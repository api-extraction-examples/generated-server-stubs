/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class ServiceInfo.
    /// </summary>
    [DataContract]
    public partial class LiveTvServiceInfo : IEquatable<LiveTvServiceInfo>
    {
        /// <summary>
        /// Gets or sets a value indicating whether this instance has update available.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has update available.</value>
        [DataMember(Name="HasUpdateAvailable", EmitDefaultValue=true)]
        public bool HasUpdateAvailable { get; set; }

        /// <summary>
        /// Gets or sets the home page URL.
        /// </summary>
        /// <value>Gets or sets the home page URL.</value>
        [DataMember(Name="HomePageUrl", EmitDefaultValue=true)]
        public string HomePageUrl { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is visible.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is visible.</value>
        [DataMember(Name="IsVisible", EmitDefaultValue=true)]
        public bool IsVisible { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public LiveTvServiceStatus Status { get; set; }

        /// <summary>
        /// Gets or sets the status message.
        /// </summary>
        /// <value>Gets or sets the status message.</value>
        [DataMember(Name="StatusMessage", EmitDefaultValue=true)]
        public string StatusMessage { get; set; }

        /// <summary>
        /// Gets or Sets Tuners
        /// </summary>
        [DataMember(Name="Tuners", EmitDefaultValue=true)]
        public List<string> Tuners { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        /// <value>Gets or sets the version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class LiveTvServiceInfo {\n");
            sb.Append("  HasUpdateAvailable: ").Append(HasUpdateAvailable).Append("\n");
            sb.Append("  HomePageUrl: ").Append(HomePageUrl).Append("\n");
            sb.Append("  IsVisible: ").Append(IsVisible).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  StatusMessage: ").Append(StatusMessage).Append("\n");
            sb.Append("  Tuners: ").Append(Tuners).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((LiveTvServiceInfo)obj);
        }

        /// <summary>
        /// Returns true if LiveTvServiceInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of LiveTvServiceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(LiveTvServiceInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasUpdateAvailable == other.HasUpdateAvailable ||
                    
                    HasUpdateAvailable.Equals(other.HasUpdateAvailable)
                ) && 
                (
                    HomePageUrl == other.HomePageUrl ||
                    HomePageUrl != null &&
                    HomePageUrl.Equals(other.HomePageUrl)
                ) && 
                (
                    IsVisible == other.IsVisible ||
                    
                    IsVisible.Equals(other.IsVisible)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    StatusMessage == other.StatusMessage ||
                    StatusMessage != null &&
                    StatusMessage.Equals(other.StatusMessage)
                ) && 
                (
                    Tuners == other.Tuners ||
                    Tuners != null &&
                    other.Tuners != null &&
                    Tuners.SequenceEqual(other.Tuners)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + HasUpdateAvailable.GetHashCode();
                    if (HomePageUrl != null)
                    hashCode = hashCode * 59 + HomePageUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsVisible.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (StatusMessage != null)
                    hashCode = hashCode * 59 + StatusMessage.GetHashCode();
                    if (Tuners != null)
                    hashCode = hashCode * 59 + Tuners.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(LiveTvServiceInfo left, LiveTvServiceInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(LiveTvServiceInfo left, LiveTvServiceInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
