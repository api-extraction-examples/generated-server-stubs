/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserPolicy : IEquatable<UserPolicy>
    {
        /// <summary>
        /// Gets or Sets AccessSchedules
        /// </summary>
        [DataMember(Name="AccessSchedules", EmitDefaultValue=true)]
        public List<AccessSchedule> AccessSchedules { get; set; }

        /// <summary>
        /// Gets or Sets AuthenticationProviderId
        /// </summary>
        [DataMember(Name="AuthenticationProviderId", EmitDefaultValue=true)]
        public string AuthenticationProviderId { get; set; }

        /// <summary>
        /// Gets or Sets BlockUnratedItems
        /// </summary>
        [DataMember(Name="BlockUnratedItems", EmitDefaultValue=true)]
        public List<UnratedItem> BlockUnratedItems { get; set; }

        /// <summary>
        /// Gets or Sets BlockedChannels
        /// </summary>
        [DataMember(Name="BlockedChannels", EmitDefaultValue=true)]
        public List<Guid> BlockedChannels { get; set; }

        /// <summary>
        /// Gets or Sets BlockedMediaFolders
        /// </summary>
        [DataMember(Name="BlockedMediaFolders", EmitDefaultValue=true)]
        public List<Guid> BlockedMediaFolders { get; set; }

        /// <summary>
        /// Gets or Sets BlockedTags
        /// </summary>
        [DataMember(Name="BlockedTags", EmitDefaultValue=true)]
        public List<string> BlockedTags { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllChannels
        /// </summary>
        [DataMember(Name="EnableAllChannels", EmitDefaultValue=true)]
        public bool EnableAllChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllDevices
        /// </summary>
        [DataMember(Name="EnableAllDevices", EmitDefaultValue=true)]
        public bool EnableAllDevices { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllFolders
        /// </summary>
        [DataMember(Name="EnableAllFolders", EmitDefaultValue=true)]
        public bool EnableAllFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableAudioPlaybackTranscoding
        /// </summary>
        [DataMember(Name="EnableAudioPlaybackTranscoding", EmitDefaultValue=true)]
        public bool EnableAudioPlaybackTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDeletion
        /// </summary>
        [DataMember(Name="EnableContentDeletion", EmitDefaultValue=true)]
        public bool EnableContentDeletion { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDeletionFromFolders
        /// </summary>
        [DataMember(Name="EnableContentDeletionFromFolders", EmitDefaultValue=true)]
        public List<string> EnableContentDeletionFromFolders { get; set; }

        /// <summary>
        /// Gets or Sets EnableContentDownloading
        /// </summary>
        [DataMember(Name="EnableContentDownloading", EmitDefaultValue=true)]
        public bool EnableContentDownloading { get; set; }

        /// <summary>
        /// Gets or Sets EnableLiveTvAccess
        /// </summary>
        [DataMember(Name="EnableLiveTvAccess", EmitDefaultValue=true)]
        public bool EnableLiveTvAccess { get; set; }

        /// <summary>
        /// Gets or Sets EnableLiveTvManagement
        /// </summary>
        [DataMember(Name="EnableLiveTvManagement", EmitDefaultValue=true)]
        public bool EnableLiveTvManagement { get; set; }

        /// <summary>
        /// Gets or Sets EnableMediaConversion
        /// </summary>
        [DataMember(Name="EnableMediaConversion", EmitDefaultValue=true)]
        public bool EnableMediaConversion { get; set; }

        /// <summary>
        /// Gets or Sets EnableMediaPlayback
        /// </summary>
        [DataMember(Name="EnableMediaPlayback", EmitDefaultValue=true)]
        public bool EnableMediaPlayback { get; set; }

        /// <summary>
        /// Gets or Sets EnablePlaybackRemuxing
        /// </summary>
        [DataMember(Name="EnablePlaybackRemuxing", EmitDefaultValue=true)]
        public bool EnablePlaybackRemuxing { get; set; }

        /// <summary>
        /// Gets or Sets EnablePublicSharing
        /// </summary>
        [DataMember(Name="EnablePublicSharing", EmitDefaultValue=true)]
        public bool EnablePublicSharing { get; set; }

        /// <summary>
        /// Gets or Sets EnableRemoteAccess
        /// </summary>
        [DataMember(Name="EnableRemoteAccess", EmitDefaultValue=true)]
        public bool EnableRemoteAccess { get; set; }

        /// <summary>
        /// Gets or Sets EnableRemoteControlOfOtherUsers
        /// </summary>
        [DataMember(Name="EnableRemoteControlOfOtherUsers", EmitDefaultValue=true)]
        public bool EnableRemoteControlOfOtherUsers { get; set; }

        /// <summary>
        /// Gets or Sets EnableSharedDeviceControl
        /// </summary>
        [DataMember(Name="EnableSharedDeviceControl", EmitDefaultValue=true)]
        public bool EnableSharedDeviceControl { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [enable synchronize].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [enable synchronize].</value>
        [DataMember(Name="EnableSyncTranscoding", EmitDefaultValue=true)]
        public bool EnableSyncTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnableUserPreferenceAccess
        /// </summary>
        [DataMember(Name="EnableUserPreferenceAccess", EmitDefaultValue=true)]
        public bool EnableUserPreferenceAccess { get; set; }

        /// <summary>
        /// Gets or Sets EnableVideoPlaybackTranscoding
        /// </summary>
        [DataMember(Name="EnableVideoPlaybackTranscoding", EmitDefaultValue=true)]
        public bool EnableVideoPlaybackTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets EnabledChannels
        /// </summary>
        [DataMember(Name="EnabledChannels", EmitDefaultValue=true)]
        public List<Guid> EnabledChannels { get; set; }

        /// <summary>
        /// Gets or Sets EnabledDevices
        /// </summary>
        [DataMember(Name="EnabledDevices", EmitDefaultValue=true)]
        public List<string> EnabledDevices { get; set; }

        /// <summary>
        /// Gets or Sets EnabledFolders
        /// </summary>
        [DataMember(Name="EnabledFolders", EmitDefaultValue=true)]
        public List<Guid> EnabledFolders { get; set; }

        /// <summary>
        /// Gets or Sets ForceRemoteSourceTranscoding
        /// </summary>
        [DataMember(Name="ForceRemoteSourceTranscoding", EmitDefaultValue=true)]
        public bool ForceRemoteSourceTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets InvalidLoginAttemptCount
        /// </summary>
        [DataMember(Name="InvalidLoginAttemptCount", EmitDefaultValue=true)]
        public int InvalidLoginAttemptCount { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is administrator.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is administrator.</value>
        [DataMember(Name="IsAdministrator", EmitDefaultValue=true)]
        public bool IsAdministrator { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is disabled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is disabled.</value>
        [DataMember(Name="IsDisabled", EmitDefaultValue=true)]
        public bool IsDisabled { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is hidden.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is hidden.</value>
        [DataMember(Name="IsHidden", EmitDefaultValue=true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or Sets LoginAttemptsBeforeLockout
        /// </summary>
        [DataMember(Name="LoginAttemptsBeforeLockout", EmitDefaultValue=true)]
        public int LoginAttemptsBeforeLockout { get; set; }

        /// <summary>
        /// Gets or Sets MaxActiveSessions
        /// </summary>
        [DataMember(Name="MaxActiveSessions", EmitDefaultValue=true)]
        public int MaxActiveSessions { get; set; }

        /// <summary>
        /// Gets or sets the max parental rating.
        /// </summary>
        /// <value>Gets or sets the max parental rating.</value>
        [DataMember(Name="MaxParentalRating", EmitDefaultValue=true)]
        public int? MaxParentalRating { get; set; }

        /// <summary>
        /// Gets or Sets PasswordResetProviderId
        /// </summary>
        [DataMember(Name="PasswordResetProviderId", EmitDefaultValue=true)]
        public string PasswordResetProviderId { get; set; }

        /// <summary>
        /// Gets or Sets RemoteClientBitrateLimit
        /// </summary>
        [DataMember(Name="RemoteClientBitrateLimit", EmitDefaultValue=true)]
        public int RemoteClientBitrateLimit { get; set; }

        /// <summary>
        /// Gets or Sets SyncPlayAccess
        /// </summary>
        [DataMember(Name="SyncPlayAccess", EmitDefaultValue=true)]
        public SyncPlayUserAccessType SyncPlayAccess { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserPolicy {\n");
            sb.Append("  AccessSchedules: ").Append(AccessSchedules).Append("\n");
            sb.Append("  AuthenticationProviderId: ").Append(AuthenticationProviderId).Append("\n");
            sb.Append("  BlockUnratedItems: ").Append(BlockUnratedItems).Append("\n");
            sb.Append("  BlockedChannels: ").Append(BlockedChannels).Append("\n");
            sb.Append("  BlockedMediaFolders: ").Append(BlockedMediaFolders).Append("\n");
            sb.Append("  BlockedTags: ").Append(BlockedTags).Append("\n");
            sb.Append("  EnableAllChannels: ").Append(EnableAllChannels).Append("\n");
            sb.Append("  EnableAllDevices: ").Append(EnableAllDevices).Append("\n");
            sb.Append("  EnableAllFolders: ").Append(EnableAllFolders).Append("\n");
            sb.Append("  EnableAudioPlaybackTranscoding: ").Append(EnableAudioPlaybackTranscoding).Append("\n");
            sb.Append("  EnableContentDeletion: ").Append(EnableContentDeletion).Append("\n");
            sb.Append("  EnableContentDeletionFromFolders: ").Append(EnableContentDeletionFromFolders).Append("\n");
            sb.Append("  EnableContentDownloading: ").Append(EnableContentDownloading).Append("\n");
            sb.Append("  EnableLiveTvAccess: ").Append(EnableLiveTvAccess).Append("\n");
            sb.Append("  EnableLiveTvManagement: ").Append(EnableLiveTvManagement).Append("\n");
            sb.Append("  EnableMediaConversion: ").Append(EnableMediaConversion).Append("\n");
            sb.Append("  EnableMediaPlayback: ").Append(EnableMediaPlayback).Append("\n");
            sb.Append("  EnablePlaybackRemuxing: ").Append(EnablePlaybackRemuxing).Append("\n");
            sb.Append("  EnablePublicSharing: ").Append(EnablePublicSharing).Append("\n");
            sb.Append("  EnableRemoteAccess: ").Append(EnableRemoteAccess).Append("\n");
            sb.Append("  EnableRemoteControlOfOtherUsers: ").Append(EnableRemoteControlOfOtherUsers).Append("\n");
            sb.Append("  EnableSharedDeviceControl: ").Append(EnableSharedDeviceControl).Append("\n");
            sb.Append("  EnableSyncTranscoding: ").Append(EnableSyncTranscoding).Append("\n");
            sb.Append("  EnableUserPreferenceAccess: ").Append(EnableUserPreferenceAccess).Append("\n");
            sb.Append("  EnableVideoPlaybackTranscoding: ").Append(EnableVideoPlaybackTranscoding).Append("\n");
            sb.Append("  EnabledChannels: ").Append(EnabledChannels).Append("\n");
            sb.Append("  EnabledDevices: ").Append(EnabledDevices).Append("\n");
            sb.Append("  EnabledFolders: ").Append(EnabledFolders).Append("\n");
            sb.Append("  ForceRemoteSourceTranscoding: ").Append(ForceRemoteSourceTranscoding).Append("\n");
            sb.Append("  InvalidLoginAttemptCount: ").Append(InvalidLoginAttemptCount).Append("\n");
            sb.Append("  IsAdministrator: ").Append(IsAdministrator).Append("\n");
            sb.Append("  IsDisabled: ").Append(IsDisabled).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  LoginAttemptsBeforeLockout: ").Append(LoginAttemptsBeforeLockout).Append("\n");
            sb.Append("  MaxActiveSessions: ").Append(MaxActiveSessions).Append("\n");
            sb.Append("  MaxParentalRating: ").Append(MaxParentalRating).Append("\n");
            sb.Append("  PasswordResetProviderId: ").Append(PasswordResetProviderId).Append("\n");
            sb.Append("  RemoteClientBitrateLimit: ").Append(RemoteClientBitrateLimit).Append("\n");
            sb.Append("  SyncPlayAccess: ").Append(SyncPlayAccess).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserPolicy)obj);
        }

        /// <summary>
        /// Returns true if UserPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of UserPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserPolicy other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccessSchedules == other.AccessSchedules ||
                    AccessSchedules != null &&
                    other.AccessSchedules != null &&
                    AccessSchedules.SequenceEqual(other.AccessSchedules)
                ) && 
                (
                    AuthenticationProviderId == other.AuthenticationProviderId ||
                    AuthenticationProviderId != null &&
                    AuthenticationProviderId.Equals(other.AuthenticationProviderId)
                ) && 
                (
                    BlockUnratedItems == other.BlockUnratedItems ||
                    BlockUnratedItems != null &&
                    other.BlockUnratedItems != null &&
                    BlockUnratedItems.SequenceEqual(other.BlockUnratedItems)
                ) && 
                (
                    BlockedChannels == other.BlockedChannels ||
                    BlockedChannels != null &&
                    other.BlockedChannels != null &&
                    BlockedChannels.SequenceEqual(other.BlockedChannels)
                ) && 
                (
                    BlockedMediaFolders == other.BlockedMediaFolders ||
                    BlockedMediaFolders != null &&
                    other.BlockedMediaFolders != null &&
                    BlockedMediaFolders.SequenceEqual(other.BlockedMediaFolders)
                ) && 
                (
                    BlockedTags == other.BlockedTags ||
                    BlockedTags != null &&
                    other.BlockedTags != null &&
                    BlockedTags.SequenceEqual(other.BlockedTags)
                ) && 
                (
                    EnableAllChannels == other.EnableAllChannels ||
                    
                    EnableAllChannels.Equals(other.EnableAllChannels)
                ) && 
                (
                    EnableAllDevices == other.EnableAllDevices ||
                    
                    EnableAllDevices.Equals(other.EnableAllDevices)
                ) && 
                (
                    EnableAllFolders == other.EnableAllFolders ||
                    
                    EnableAllFolders.Equals(other.EnableAllFolders)
                ) && 
                (
                    EnableAudioPlaybackTranscoding == other.EnableAudioPlaybackTranscoding ||
                    
                    EnableAudioPlaybackTranscoding.Equals(other.EnableAudioPlaybackTranscoding)
                ) && 
                (
                    EnableContentDeletion == other.EnableContentDeletion ||
                    
                    EnableContentDeletion.Equals(other.EnableContentDeletion)
                ) && 
                (
                    EnableContentDeletionFromFolders == other.EnableContentDeletionFromFolders ||
                    EnableContentDeletionFromFolders != null &&
                    other.EnableContentDeletionFromFolders != null &&
                    EnableContentDeletionFromFolders.SequenceEqual(other.EnableContentDeletionFromFolders)
                ) && 
                (
                    EnableContentDownloading == other.EnableContentDownloading ||
                    
                    EnableContentDownloading.Equals(other.EnableContentDownloading)
                ) && 
                (
                    EnableLiveTvAccess == other.EnableLiveTvAccess ||
                    
                    EnableLiveTvAccess.Equals(other.EnableLiveTvAccess)
                ) && 
                (
                    EnableLiveTvManagement == other.EnableLiveTvManagement ||
                    
                    EnableLiveTvManagement.Equals(other.EnableLiveTvManagement)
                ) && 
                (
                    EnableMediaConversion == other.EnableMediaConversion ||
                    
                    EnableMediaConversion.Equals(other.EnableMediaConversion)
                ) && 
                (
                    EnableMediaPlayback == other.EnableMediaPlayback ||
                    
                    EnableMediaPlayback.Equals(other.EnableMediaPlayback)
                ) && 
                (
                    EnablePlaybackRemuxing == other.EnablePlaybackRemuxing ||
                    
                    EnablePlaybackRemuxing.Equals(other.EnablePlaybackRemuxing)
                ) && 
                (
                    EnablePublicSharing == other.EnablePublicSharing ||
                    
                    EnablePublicSharing.Equals(other.EnablePublicSharing)
                ) && 
                (
                    EnableRemoteAccess == other.EnableRemoteAccess ||
                    
                    EnableRemoteAccess.Equals(other.EnableRemoteAccess)
                ) && 
                (
                    EnableRemoteControlOfOtherUsers == other.EnableRemoteControlOfOtherUsers ||
                    
                    EnableRemoteControlOfOtherUsers.Equals(other.EnableRemoteControlOfOtherUsers)
                ) && 
                (
                    EnableSharedDeviceControl == other.EnableSharedDeviceControl ||
                    
                    EnableSharedDeviceControl.Equals(other.EnableSharedDeviceControl)
                ) && 
                (
                    EnableSyncTranscoding == other.EnableSyncTranscoding ||
                    
                    EnableSyncTranscoding.Equals(other.EnableSyncTranscoding)
                ) && 
                (
                    EnableUserPreferenceAccess == other.EnableUserPreferenceAccess ||
                    
                    EnableUserPreferenceAccess.Equals(other.EnableUserPreferenceAccess)
                ) && 
                (
                    EnableVideoPlaybackTranscoding == other.EnableVideoPlaybackTranscoding ||
                    
                    EnableVideoPlaybackTranscoding.Equals(other.EnableVideoPlaybackTranscoding)
                ) && 
                (
                    EnabledChannels == other.EnabledChannels ||
                    EnabledChannels != null &&
                    other.EnabledChannels != null &&
                    EnabledChannels.SequenceEqual(other.EnabledChannels)
                ) && 
                (
                    EnabledDevices == other.EnabledDevices ||
                    EnabledDevices != null &&
                    other.EnabledDevices != null &&
                    EnabledDevices.SequenceEqual(other.EnabledDevices)
                ) && 
                (
                    EnabledFolders == other.EnabledFolders ||
                    EnabledFolders != null &&
                    other.EnabledFolders != null &&
                    EnabledFolders.SequenceEqual(other.EnabledFolders)
                ) && 
                (
                    ForceRemoteSourceTranscoding == other.ForceRemoteSourceTranscoding ||
                    
                    ForceRemoteSourceTranscoding.Equals(other.ForceRemoteSourceTranscoding)
                ) && 
                (
                    InvalidLoginAttemptCount == other.InvalidLoginAttemptCount ||
                    
                    InvalidLoginAttemptCount.Equals(other.InvalidLoginAttemptCount)
                ) && 
                (
                    IsAdministrator == other.IsAdministrator ||
                    
                    IsAdministrator.Equals(other.IsAdministrator)
                ) && 
                (
                    IsDisabled == other.IsDisabled ||
                    
                    IsDisabled.Equals(other.IsDisabled)
                ) && 
                (
                    IsHidden == other.IsHidden ||
                    
                    IsHidden.Equals(other.IsHidden)
                ) && 
                (
                    LoginAttemptsBeforeLockout == other.LoginAttemptsBeforeLockout ||
                    
                    LoginAttemptsBeforeLockout.Equals(other.LoginAttemptsBeforeLockout)
                ) && 
                (
                    MaxActiveSessions == other.MaxActiveSessions ||
                    
                    MaxActiveSessions.Equals(other.MaxActiveSessions)
                ) && 
                (
                    MaxParentalRating == other.MaxParentalRating ||
                    MaxParentalRating != null &&
                    MaxParentalRating.Equals(other.MaxParentalRating)
                ) && 
                (
                    PasswordResetProviderId == other.PasswordResetProviderId ||
                    PasswordResetProviderId != null &&
                    PasswordResetProviderId.Equals(other.PasswordResetProviderId)
                ) && 
                (
                    RemoteClientBitrateLimit == other.RemoteClientBitrateLimit ||
                    
                    RemoteClientBitrateLimit.Equals(other.RemoteClientBitrateLimit)
                ) && 
                (
                    SyncPlayAccess == other.SyncPlayAccess ||
                    
                    SyncPlayAccess.Equals(other.SyncPlayAccess)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccessSchedules != null)
                    hashCode = hashCode * 59 + AccessSchedules.GetHashCode();
                    if (AuthenticationProviderId != null)
                    hashCode = hashCode * 59 + AuthenticationProviderId.GetHashCode();
                    if (BlockUnratedItems != null)
                    hashCode = hashCode * 59 + BlockUnratedItems.GetHashCode();
                    if (BlockedChannels != null)
                    hashCode = hashCode * 59 + BlockedChannels.GetHashCode();
                    if (BlockedMediaFolders != null)
                    hashCode = hashCode * 59 + BlockedMediaFolders.GetHashCode();
                    if (BlockedTags != null)
                    hashCode = hashCode * 59 + BlockedTags.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAllChannels.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAllDevices.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAllFolders.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAudioPlaybackTranscoding.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableContentDeletion.GetHashCode();
                    if (EnableContentDeletionFromFolders != null)
                    hashCode = hashCode * 59 + EnableContentDeletionFromFolders.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableContentDownloading.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableLiveTvAccess.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableLiveTvManagement.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableMediaConversion.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableMediaPlayback.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnablePlaybackRemuxing.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnablePublicSharing.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableRemoteAccess.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableRemoteControlOfOtherUsers.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableSharedDeviceControl.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableSyncTranscoding.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableUserPreferenceAccess.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableVideoPlaybackTranscoding.GetHashCode();
                    if (EnabledChannels != null)
                    hashCode = hashCode * 59 + EnabledChannels.GetHashCode();
                    if (EnabledDevices != null)
                    hashCode = hashCode * 59 + EnabledDevices.GetHashCode();
                    if (EnabledFolders != null)
                    hashCode = hashCode * 59 + EnabledFolders.GetHashCode();
                    
                    hashCode = hashCode * 59 + ForceRemoteSourceTranscoding.GetHashCode();
                    
                    hashCode = hashCode * 59 + InvalidLoginAttemptCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAdministrator.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDisabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsHidden.GetHashCode();
                    
                    hashCode = hashCode * 59 + LoginAttemptsBeforeLockout.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxActiveSessions.GetHashCode();
                    if (MaxParentalRating != null)
                    hashCode = hashCode * 59 + MaxParentalRating.GetHashCode();
                    if (PasswordResetProviderId != null)
                    hashCode = hashCode * 59 + PasswordResetProviderId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RemoteClientBitrateLimit.GetHashCode();
                    
                    hashCode = hashCode * 59 + SyncPlayAccess.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserPolicy left, UserPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserPolicy left, UserPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
