/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MediaSourceInfo : IEquatable<MediaSourceInfo>
    {
        /// <summary>
        /// Gets or Sets AnalyzeDurationMs
        /// </summary>
        [DataMember(Name="AnalyzeDurationMs", EmitDefaultValue=true)]
        public int? AnalyzeDurationMs { get; set; }

        /// <summary>
        /// Gets or Sets Bitrate
        /// </summary>
        [DataMember(Name="Bitrate", EmitDefaultValue=true)]
        public int? Bitrate { get; set; }

        /// <summary>
        /// Gets or Sets BufferMs
        /// </summary>
        [DataMember(Name="BufferMs", EmitDefaultValue=true)]
        public int? BufferMs { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets DefaultAudioStreamIndex
        /// </summary>
        [DataMember(Name="DefaultAudioStreamIndex", EmitDefaultValue=true)]
        public int? DefaultAudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or Sets DefaultSubtitleStreamIndex
        /// </summary>
        [DataMember(Name="DefaultSubtitleStreamIndex", EmitDefaultValue=true)]
        public int? DefaultSubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or Sets ETag
        /// </summary>
        [DataMember(Name="ETag", EmitDefaultValue=true)]
        public string ETag { get; set; }

        /// <summary>
        /// Gets or Sets EncoderPath
        /// </summary>
        [DataMember(Name="EncoderPath", EmitDefaultValue=true)]
        public string EncoderPath { get; set; }

        /// <summary>
        /// Gets or Sets EncoderProtocol
        /// </summary>
        [DataMember(Name="EncoderProtocol", EmitDefaultValue=true)]
        public MediaProtocol EncoderProtocol { get; set; }

        /// <summary>
        /// Gets or Sets Formats
        /// </summary>
        [DataMember(Name="Formats", EmitDefaultValue=true)]
        public List<string> Formats { get; set; }

        /// <summary>
        /// Gets or Sets GenPtsInput
        /// </summary>
        [DataMember(Name="GenPtsInput", EmitDefaultValue=true)]
        public bool GenPtsInput { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreDts
        /// </summary>
        [DataMember(Name="IgnoreDts", EmitDefaultValue=true)]
        public bool IgnoreDts { get; set; }

        /// <summary>
        /// Gets or Sets IgnoreIndex
        /// </summary>
        [DataMember(Name="IgnoreIndex", EmitDefaultValue=true)]
        public bool IgnoreIndex { get; set; }

        /// <summary>
        /// Gets or Sets IsInfiniteStream
        /// </summary>
        [DataMember(Name="IsInfiniteStream", EmitDefaultValue=true)]
        public bool IsInfiniteStream { get; set; }

        /// <summary>
        /// Differentiate internet url vs local network.
        /// </summary>
        /// <value>Differentiate internet url vs local network.</value>
        [DataMember(Name="IsRemote", EmitDefaultValue=true)]
        public bool IsRemote { get; set; }

        /// <summary>
        /// Gets or Sets IsoType
        /// </summary>
        [DataMember(Name="IsoType", EmitDefaultValue=true)]
        public IsoType IsoType { get; set; }

        /// <summary>
        /// Gets or Sets LiveStreamId
        /// </summary>
        [DataMember(Name="LiveStreamId", EmitDefaultValue=true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or Sets MediaAttachments
        /// </summary>
        [DataMember(Name="MediaAttachments", EmitDefaultValue=true)]
        public List<MediaAttachment> MediaAttachments { get; set; }

        /// <summary>
        /// Gets or Sets MediaStreams
        /// </summary>
        [DataMember(Name="MediaStreams", EmitDefaultValue=true)]
        public List<MediaStream> MediaStreams { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets OpenToken
        /// </summary>
        [DataMember(Name="OpenToken", EmitDefaultValue=true)]
        public string OpenToken { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="Protocol", EmitDefaultValue=true)]
        public MediaProtocol Protocol { get; set; }

        /// <summary>
        /// Gets or Sets ReadAtNativeFramerate
        /// </summary>
        [DataMember(Name="ReadAtNativeFramerate", EmitDefaultValue=true)]
        public bool ReadAtNativeFramerate { get; set; }

        /// <summary>
        /// Gets or Sets RequiredHttpHeaders
        /// </summary>
        [DataMember(Name="RequiredHttpHeaders", EmitDefaultValue=true)]
        public Dictionary<string, string> RequiredHttpHeaders { get; set; }

        /// <summary>
        /// Gets or Sets RequiresClosing
        /// </summary>
        [DataMember(Name="RequiresClosing", EmitDefaultValue=true)]
        public bool RequiresClosing { get; set; }

        /// <summary>
        /// Gets or Sets RequiresLooping
        /// </summary>
        [DataMember(Name="RequiresLooping", EmitDefaultValue=true)]
        public bool RequiresLooping { get; set; }

        /// <summary>
        /// Gets or Sets RequiresOpening
        /// </summary>
        [DataMember(Name="RequiresOpening", EmitDefaultValue=true)]
        public bool RequiresOpening { get; set; }

        /// <summary>
        /// Gets or Sets RunTimeTicks
        /// </summary>
        [DataMember(Name="RunTimeTicks", EmitDefaultValue=true)]
        public long? RunTimeTicks { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="Size", EmitDefaultValue=true)]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets SupportsDirectPlay
        /// </summary>
        [DataMember(Name="SupportsDirectPlay", EmitDefaultValue=true)]
        public bool SupportsDirectPlay { get; set; }

        /// <summary>
        /// Gets or Sets SupportsDirectStream
        /// </summary>
        [DataMember(Name="SupportsDirectStream", EmitDefaultValue=true)]
        public bool SupportsDirectStream { get; set; }

        /// <summary>
        /// Gets or Sets SupportsProbing
        /// </summary>
        [DataMember(Name="SupportsProbing", EmitDefaultValue=true)]
        public bool SupportsProbing { get; set; }

        /// <summary>
        /// Gets or Sets SupportsTranscoding
        /// </summary>
        [DataMember(Name="SupportsTranscoding", EmitDefaultValue=true)]
        public bool SupportsTranscoding { get; set; }

        /// <summary>
        /// Gets or Sets Timestamp
        /// </summary>
        [DataMember(Name="Timestamp", EmitDefaultValue=true)]
        public TransportStreamTimestamp Timestamp { get; set; }

        /// <summary>
        /// Gets or Sets TranscodingContainer
        /// </summary>
        [DataMember(Name="TranscodingContainer", EmitDefaultValue=true)]
        public string TranscodingContainer { get; set; }

        /// <summary>
        /// Gets or Sets TranscodingSubProtocol
        /// </summary>
        [DataMember(Name="TranscodingSubProtocol", EmitDefaultValue=true)]
        public string TranscodingSubProtocol { get; set; }

        /// <summary>
        /// Gets or Sets TranscodingUrl
        /// </summary>
        [DataMember(Name="TranscodingUrl", EmitDefaultValue=true)]
        public string TranscodingUrl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public MediaSourceType Type { get; set; }

        /// <summary>
        /// Gets or Sets Video3DFormat
        /// </summary>
        [DataMember(Name="Video3DFormat", EmitDefaultValue=true)]
        public Video3DFormat Video3DFormat { get; set; }

        /// <summary>
        /// Gets or Sets VideoType
        /// </summary>
        [DataMember(Name="VideoType", EmitDefaultValue=true)]
        public VideoType VideoType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaSourceInfo {\n");
            sb.Append("  AnalyzeDurationMs: ").Append(AnalyzeDurationMs).Append("\n");
            sb.Append("  Bitrate: ").Append(Bitrate).Append("\n");
            sb.Append("  BufferMs: ").Append(BufferMs).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  DefaultAudioStreamIndex: ").Append(DefaultAudioStreamIndex).Append("\n");
            sb.Append("  DefaultSubtitleStreamIndex: ").Append(DefaultSubtitleStreamIndex).Append("\n");
            sb.Append("  ETag: ").Append(ETag).Append("\n");
            sb.Append("  EncoderPath: ").Append(EncoderPath).Append("\n");
            sb.Append("  EncoderProtocol: ").Append(EncoderProtocol).Append("\n");
            sb.Append("  Formats: ").Append(Formats).Append("\n");
            sb.Append("  GenPtsInput: ").Append(GenPtsInput).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IgnoreDts: ").Append(IgnoreDts).Append("\n");
            sb.Append("  IgnoreIndex: ").Append(IgnoreIndex).Append("\n");
            sb.Append("  IsInfiniteStream: ").Append(IsInfiniteStream).Append("\n");
            sb.Append("  IsRemote: ").Append(IsRemote).Append("\n");
            sb.Append("  IsoType: ").Append(IsoType).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  MediaAttachments: ").Append(MediaAttachments).Append("\n");
            sb.Append("  MediaStreams: ").Append(MediaStreams).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OpenToken: ").Append(OpenToken).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  ReadAtNativeFramerate: ").Append(ReadAtNativeFramerate).Append("\n");
            sb.Append("  RequiredHttpHeaders: ").Append(RequiredHttpHeaders).Append("\n");
            sb.Append("  RequiresClosing: ").Append(RequiresClosing).Append("\n");
            sb.Append("  RequiresLooping: ").Append(RequiresLooping).Append("\n");
            sb.Append("  RequiresOpening: ").Append(RequiresOpening).Append("\n");
            sb.Append("  RunTimeTicks: ").Append(RunTimeTicks).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SupportsDirectPlay: ").Append(SupportsDirectPlay).Append("\n");
            sb.Append("  SupportsDirectStream: ").Append(SupportsDirectStream).Append("\n");
            sb.Append("  SupportsProbing: ").Append(SupportsProbing).Append("\n");
            sb.Append("  SupportsTranscoding: ").Append(SupportsTranscoding).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  TranscodingContainer: ").Append(TranscodingContainer).Append("\n");
            sb.Append("  TranscodingSubProtocol: ").Append(TranscodingSubProtocol).Append("\n");
            sb.Append("  TranscodingUrl: ").Append(TranscodingUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Video3DFormat: ").Append(Video3DFormat).Append("\n");
            sb.Append("  VideoType: ").Append(VideoType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaSourceInfo)obj);
        }

        /// <summary>
        /// Returns true if MediaSourceInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaSourceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaSourceInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AnalyzeDurationMs == other.AnalyzeDurationMs ||
                    AnalyzeDurationMs != null &&
                    AnalyzeDurationMs.Equals(other.AnalyzeDurationMs)
                ) && 
                (
                    Bitrate == other.Bitrate ||
                    Bitrate != null &&
                    Bitrate.Equals(other.Bitrate)
                ) && 
                (
                    BufferMs == other.BufferMs ||
                    BufferMs != null &&
                    BufferMs.Equals(other.BufferMs)
                ) && 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    DefaultAudioStreamIndex == other.DefaultAudioStreamIndex ||
                    DefaultAudioStreamIndex != null &&
                    DefaultAudioStreamIndex.Equals(other.DefaultAudioStreamIndex)
                ) && 
                (
                    DefaultSubtitleStreamIndex == other.DefaultSubtitleStreamIndex ||
                    DefaultSubtitleStreamIndex != null &&
                    DefaultSubtitleStreamIndex.Equals(other.DefaultSubtitleStreamIndex)
                ) && 
                (
                    ETag == other.ETag ||
                    ETag != null &&
                    ETag.Equals(other.ETag)
                ) && 
                (
                    EncoderPath == other.EncoderPath ||
                    EncoderPath != null &&
                    EncoderPath.Equals(other.EncoderPath)
                ) && 
                (
                    EncoderProtocol == other.EncoderProtocol ||
                    
                    EncoderProtocol.Equals(other.EncoderProtocol)
                ) && 
                (
                    Formats == other.Formats ||
                    Formats != null &&
                    other.Formats != null &&
                    Formats.SequenceEqual(other.Formats)
                ) && 
                (
                    GenPtsInput == other.GenPtsInput ||
                    
                    GenPtsInput.Equals(other.GenPtsInput)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IgnoreDts == other.IgnoreDts ||
                    
                    IgnoreDts.Equals(other.IgnoreDts)
                ) && 
                (
                    IgnoreIndex == other.IgnoreIndex ||
                    
                    IgnoreIndex.Equals(other.IgnoreIndex)
                ) && 
                (
                    IsInfiniteStream == other.IsInfiniteStream ||
                    
                    IsInfiniteStream.Equals(other.IsInfiniteStream)
                ) && 
                (
                    IsRemote == other.IsRemote ||
                    
                    IsRemote.Equals(other.IsRemote)
                ) && 
                (
                    IsoType == other.IsoType ||
                    
                    IsoType.Equals(other.IsoType)
                ) && 
                (
                    LiveStreamId == other.LiveStreamId ||
                    LiveStreamId != null &&
                    LiveStreamId.Equals(other.LiveStreamId)
                ) && 
                (
                    MediaAttachments == other.MediaAttachments ||
                    MediaAttachments != null &&
                    other.MediaAttachments != null &&
                    MediaAttachments.SequenceEqual(other.MediaAttachments)
                ) && 
                (
                    MediaStreams == other.MediaStreams ||
                    MediaStreams != null &&
                    other.MediaStreams != null &&
                    MediaStreams.SequenceEqual(other.MediaStreams)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OpenToken == other.OpenToken ||
                    OpenToken != null &&
                    OpenToken.Equals(other.OpenToken)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Protocol == other.Protocol ||
                    
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    ReadAtNativeFramerate == other.ReadAtNativeFramerate ||
                    
                    ReadAtNativeFramerate.Equals(other.ReadAtNativeFramerate)
                ) && 
                (
                    RequiredHttpHeaders == other.RequiredHttpHeaders ||
                    RequiredHttpHeaders != null &&
                    other.RequiredHttpHeaders != null &&
                    RequiredHttpHeaders.SequenceEqual(other.RequiredHttpHeaders)
                ) && 
                (
                    RequiresClosing == other.RequiresClosing ||
                    
                    RequiresClosing.Equals(other.RequiresClosing)
                ) && 
                (
                    RequiresLooping == other.RequiresLooping ||
                    
                    RequiresLooping.Equals(other.RequiresLooping)
                ) && 
                (
                    RequiresOpening == other.RequiresOpening ||
                    
                    RequiresOpening.Equals(other.RequiresOpening)
                ) && 
                (
                    RunTimeTicks == other.RunTimeTicks ||
                    RunTimeTicks != null &&
                    RunTimeTicks.Equals(other.RunTimeTicks)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    SupportsDirectPlay == other.SupportsDirectPlay ||
                    
                    SupportsDirectPlay.Equals(other.SupportsDirectPlay)
                ) && 
                (
                    SupportsDirectStream == other.SupportsDirectStream ||
                    
                    SupportsDirectStream.Equals(other.SupportsDirectStream)
                ) && 
                (
                    SupportsProbing == other.SupportsProbing ||
                    
                    SupportsProbing.Equals(other.SupportsProbing)
                ) && 
                (
                    SupportsTranscoding == other.SupportsTranscoding ||
                    
                    SupportsTranscoding.Equals(other.SupportsTranscoding)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    TranscodingContainer == other.TranscodingContainer ||
                    TranscodingContainer != null &&
                    TranscodingContainer.Equals(other.TranscodingContainer)
                ) && 
                (
                    TranscodingSubProtocol == other.TranscodingSubProtocol ||
                    TranscodingSubProtocol != null &&
                    TranscodingSubProtocol.Equals(other.TranscodingSubProtocol)
                ) && 
                (
                    TranscodingUrl == other.TranscodingUrl ||
                    TranscodingUrl != null &&
                    TranscodingUrl.Equals(other.TranscodingUrl)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Video3DFormat == other.Video3DFormat ||
                    
                    Video3DFormat.Equals(other.Video3DFormat)
                ) && 
                (
                    VideoType == other.VideoType ||
                    
                    VideoType.Equals(other.VideoType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AnalyzeDurationMs != null)
                    hashCode = hashCode * 59 + AnalyzeDurationMs.GetHashCode();
                    if (Bitrate != null)
                    hashCode = hashCode * 59 + Bitrate.GetHashCode();
                    if (BufferMs != null)
                    hashCode = hashCode * 59 + BufferMs.GetHashCode();
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    if (DefaultAudioStreamIndex != null)
                    hashCode = hashCode * 59 + DefaultAudioStreamIndex.GetHashCode();
                    if (DefaultSubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + DefaultSubtitleStreamIndex.GetHashCode();
                    if (ETag != null)
                    hashCode = hashCode * 59 + ETag.GetHashCode();
                    if (EncoderPath != null)
                    hashCode = hashCode * 59 + EncoderPath.GetHashCode();
                    
                    hashCode = hashCode * 59 + EncoderProtocol.GetHashCode();
                    if (Formats != null)
                    hashCode = hashCode * 59 + Formats.GetHashCode();
                    
                    hashCode = hashCode * 59 + GenPtsInput.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IgnoreDts.GetHashCode();
                    
                    hashCode = hashCode * 59 + IgnoreIndex.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInfiniteStream.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRemote.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsoType.GetHashCode();
                    if (LiveStreamId != null)
                    hashCode = hashCode * 59 + LiveStreamId.GetHashCode();
                    if (MediaAttachments != null)
                    hashCode = hashCode * 59 + MediaAttachments.GetHashCode();
                    if (MediaStreams != null)
                    hashCode = hashCode * 59 + MediaStreams.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OpenToken != null)
                    hashCode = hashCode * 59 + OpenToken.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReadAtNativeFramerate.GetHashCode();
                    if (RequiredHttpHeaders != null)
                    hashCode = hashCode * 59 + RequiredHttpHeaders.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresClosing.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresLooping.GetHashCode();
                    
                    hashCode = hashCode * 59 + RequiresOpening.GetHashCode();
                    if (RunTimeTicks != null)
                    hashCode = hashCode * 59 + RunTimeTicks.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsDirectPlay.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsDirectStream.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsProbing.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsTranscoding.GetHashCode();
                    
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (TranscodingContainer != null)
                    hashCode = hashCode * 59 + TranscodingContainer.GetHashCode();
                    if (TranscodingSubProtocol != null)
                    hashCode = hashCode * 59 + TranscodingSubProtocol.GetHashCode();
                    if (TranscodingUrl != null)
                    hashCode = hashCode * 59 + TranscodingUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + Video3DFormat.GetHashCode();
                    
                    hashCode = hashCode * 59 + VideoType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediaSourceInfo left, MediaSourceInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaSourceInfo left, MediaSourceInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
