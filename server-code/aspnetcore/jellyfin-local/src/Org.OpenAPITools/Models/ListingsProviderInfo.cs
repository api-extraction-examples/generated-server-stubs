/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ListingsProviderInfo : IEquatable<ListingsProviderInfo>
    {
        /// <summary>
        /// Gets or Sets ChannelMappings
        /// </summary>
        [DataMember(Name="ChannelMappings", EmitDefaultValue=true)]
        public List<NameValuePair> ChannelMappings { get; set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [DataMember(Name="Country", EmitDefaultValue=true)]
        public string Country { get; set; }

        /// <summary>
        /// Gets or Sets EnableAllTuners
        /// </summary>
        [DataMember(Name="EnableAllTuners", EmitDefaultValue=true)]
        public bool EnableAllTuners { get; set; }

        /// <summary>
        /// Gets or Sets EnabledTuners
        /// </summary>
        [DataMember(Name="EnabledTuners", EmitDefaultValue=true)]
        public List<string> EnabledTuners { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets KidsCategories
        /// </summary>
        [DataMember(Name="KidsCategories", EmitDefaultValue=true)]
        public List<string> KidsCategories { get; set; }

        /// <summary>
        /// Gets or Sets ListingsId
        /// </summary>
        [DataMember(Name="ListingsId", EmitDefaultValue=true)]
        public string ListingsId { get; set; }

        /// <summary>
        /// Gets or Sets MovieCategories
        /// </summary>
        [DataMember(Name="MovieCategories", EmitDefaultValue=true)]
        public List<string> MovieCategories { get; set; }

        /// <summary>
        /// Gets or Sets MoviePrefix
        /// </summary>
        [DataMember(Name="MoviePrefix", EmitDefaultValue=true)]
        public string MoviePrefix { get; set; }

        /// <summary>
        /// Gets or Sets NewsCategories
        /// </summary>
        [DataMember(Name="NewsCategories", EmitDefaultValue=true)]
        public List<string> NewsCategories { get; set; }

        /// <summary>
        /// Gets or Sets Password
        /// </summary>
        [DataMember(Name="Password", EmitDefaultValue=true)]
        public string Password { get; set; }

        /// <summary>
        /// Gets or Sets Path
        /// </summary>
        [DataMember(Name="Path", EmitDefaultValue=true)]
        public string Path { get; set; }

        /// <summary>
        /// Gets or Sets PreferredLanguage
        /// </summary>
        [DataMember(Name="PreferredLanguage", EmitDefaultValue=true)]
        public string PreferredLanguage { get; set; }

        /// <summary>
        /// Gets or Sets SportsCategories
        /// </summary>
        [DataMember(Name="SportsCategories", EmitDefaultValue=true)]
        public List<string> SportsCategories { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UserAgent
        /// </summary>
        [DataMember(Name="UserAgent", EmitDefaultValue=true)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        [DataMember(Name="Username", EmitDefaultValue=true)]
        public string Username { get; set; }

        /// <summary>
        /// Gets or Sets ZipCode
        /// </summary>
        [DataMember(Name="ZipCode", EmitDefaultValue=true)]
        public string ZipCode { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListingsProviderInfo {\n");
            sb.Append("  ChannelMappings: ").Append(ChannelMappings).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  EnableAllTuners: ").Append(EnableAllTuners).Append("\n");
            sb.Append("  EnabledTuners: ").Append(EnabledTuners).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  KidsCategories: ").Append(KidsCategories).Append("\n");
            sb.Append("  ListingsId: ").Append(ListingsId).Append("\n");
            sb.Append("  MovieCategories: ").Append(MovieCategories).Append("\n");
            sb.Append("  MoviePrefix: ").Append(MoviePrefix).Append("\n");
            sb.Append("  NewsCategories: ").Append(NewsCategories).Append("\n");
            sb.Append("  Password: ").Append(Password).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  PreferredLanguage: ").Append(PreferredLanguage).Append("\n");
            sb.Append("  SportsCategories: ").Append(SportsCategories).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("  ZipCode: ").Append(ZipCode).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ListingsProviderInfo)obj);
        }

        /// <summary>
        /// Returns true if ListingsProviderInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ListingsProviderInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListingsProviderInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChannelMappings == other.ChannelMappings ||
                    ChannelMappings != null &&
                    other.ChannelMappings != null &&
                    ChannelMappings.SequenceEqual(other.ChannelMappings)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    EnableAllTuners == other.EnableAllTuners ||
                    
                    EnableAllTuners.Equals(other.EnableAllTuners)
                ) && 
                (
                    EnabledTuners == other.EnabledTuners ||
                    EnabledTuners != null &&
                    other.EnabledTuners != null &&
                    EnabledTuners.SequenceEqual(other.EnabledTuners)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    KidsCategories == other.KidsCategories ||
                    KidsCategories != null &&
                    other.KidsCategories != null &&
                    KidsCategories.SequenceEqual(other.KidsCategories)
                ) && 
                (
                    ListingsId == other.ListingsId ||
                    ListingsId != null &&
                    ListingsId.Equals(other.ListingsId)
                ) && 
                (
                    MovieCategories == other.MovieCategories ||
                    MovieCategories != null &&
                    other.MovieCategories != null &&
                    MovieCategories.SequenceEqual(other.MovieCategories)
                ) && 
                (
                    MoviePrefix == other.MoviePrefix ||
                    MoviePrefix != null &&
                    MoviePrefix.Equals(other.MoviePrefix)
                ) && 
                (
                    NewsCategories == other.NewsCategories ||
                    NewsCategories != null &&
                    other.NewsCategories != null &&
                    NewsCategories.SequenceEqual(other.NewsCategories)
                ) && 
                (
                    Password == other.Password ||
                    Password != null &&
                    Password.Equals(other.Password)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    PreferredLanguage == other.PreferredLanguage ||
                    PreferredLanguage != null &&
                    PreferredLanguage.Equals(other.PreferredLanguage)
                ) && 
                (
                    SportsCategories == other.SportsCategories ||
                    SportsCategories != null &&
                    other.SportsCategories != null &&
                    SportsCategories.SequenceEqual(other.SportsCategories)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UserAgent == other.UserAgent ||
                    UserAgent != null &&
                    UserAgent.Equals(other.UserAgent)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                ) && 
                (
                    ZipCode == other.ZipCode ||
                    ZipCode != null &&
                    ZipCode.Equals(other.ZipCode)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChannelMappings != null)
                    hashCode = hashCode * 59 + ChannelMappings.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableAllTuners.GetHashCode();
                    if (EnabledTuners != null)
                    hashCode = hashCode * 59 + EnabledTuners.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (KidsCategories != null)
                    hashCode = hashCode * 59 + KidsCategories.GetHashCode();
                    if (ListingsId != null)
                    hashCode = hashCode * 59 + ListingsId.GetHashCode();
                    if (MovieCategories != null)
                    hashCode = hashCode * 59 + MovieCategories.GetHashCode();
                    if (MoviePrefix != null)
                    hashCode = hashCode * 59 + MoviePrefix.GetHashCode();
                    if (NewsCategories != null)
                    hashCode = hashCode * 59 + NewsCategories.GetHashCode();
                    if (Password != null)
                    hashCode = hashCode * 59 + Password.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (PreferredLanguage != null)
                    hashCode = hashCode * 59 + PreferredLanguage.GetHashCode();
                    if (SportsCategories != null)
                    hashCode = hashCode * 59 + SportsCategories.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UserAgent != null)
                    hashCode = hashCode * 59 + UserAgent.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                    if (ZipCode != null)
                    hashCode = hashCode * 59 + ZipCode.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ListingsProviderInfo left, ListingsProviderInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ListingsProviderInfo left, ListingsProviderInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
