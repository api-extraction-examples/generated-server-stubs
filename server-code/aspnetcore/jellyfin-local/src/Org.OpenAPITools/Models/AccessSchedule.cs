/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An entity representing a user&#39;s access schedule.
    /// </summary>
    [DataContract]
    public partial class AccessSchedule : IEquatable<AccessSchedule>
    {
        /// <summary>
        /// Gets or Sets DayOfWeek
        /// </summary>
        [Required]
        [DataMember(Name="DayOfWeek", EmitDefaultValue=true)]
        public DynamicDayOfWeek DayOfWeek { get; set; }

        /// <summary>
        /// Gets or sets the end hour.
        /// </summary>
        /// <value>Gets or sets the end hour.</value>
        [Required]
        [DataMember(Name="EndHour", EmitDefaultValue=true)]
        public double EndHour { get; set; }

        /// <summary>
        /// Gets or sets the id of this instance.
        /// </summary>
        /// <value>Gets or sets the id of this instance.</value>
        [Required]
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public int Id { get; set; }

        /// <summary>
        /// Gets or sets the start hour.
        /// </summary>
        /// <value>Gets or sets the start hour.</value>
        [Required]
        [DataMember(Name="StartHour", EmitDefaultValue=true)]
        public double StartHour { get; set; }

        /// <summary>
        /// Gets or sets the id of the associated user.
        /// </summary>
        /// <value>Gets or sets the id of the associated user.</value>
        [Required]
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AccessSchedule {\n");
            sb.Append("  DayOfWeek: ").Append(DayOfWeek).Append("\n");
            sb.Append("  EndHour: ").Append(EndHour).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  StartHour: ").Append(StartHour).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AccessSchedule)obj);
        }

        /// <summary>
        /// Returns true if AccessSchedule instances are equal
        /// </summary>
        /// <param name="other">Instance of AccessSchedule to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AccessSchedule other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DayOfWeek == other.DayOfWeek ||
                    
                    DayOfWeek.Equals(other.DayOfWeek)
                ) && 
                (
                    EndHour == other.EndHour ||
                    
                    EndHour.Equals(other.EndHour)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    StartHour == other.StartHour ||
                    
                    StartHour.Equals(other.StartHour)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DayOfWeek.GetHashCode();
                    
                    hashCode = hashCode * 59 + EndHour.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartHour.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AccessSchedule left, AccessSchedule right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AccessSchedule left, AccessSchedule right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
