/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Defines the MediaBrowser.Model.Updates.VersionInfo class.
    /// </summary>
    [DataContract]
    public partial class VersionInfo : IEquatable<VersionInfo>
    {
        /// <summary>
        /// Gets or Sets VersionNumber
        /// </summary>
        [DataMember(Name="VersionNumber", EmitDefaultValue=false)]
        public ModelVersion VersionNumber { get; set; }

        /// <summary>
        /// Gets or sets the changelog for this version.
        /// </summary>
        /// <value>Gets or sets the changelog for this version.</value>
        [DataMember(Name="changelog", EmitDefaultValue=true)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or sets a checksum for the binary.
        /// </summary>
        /// <value>Gets or sets a checksum for the binary.</value>
        [DataMember(Name="checksum", EmitDefaultValue=true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets the repository name.
        /// </summary>
        /// <value>Gets or sets the repository name.</value>
        [DataMember(Name="repositoryName", EmitDefaultValue=true)]
        public string RepositoryName { get; set; }

        /// <summary>
        /// Gets or sets the repository url.
        /// </summary>
        /// <value>Gets or sets the repository url.</value>
        [DataMember(Name="repositoryUrl", EmitDefaultValue=true)]
        public string RepositoryUrl { get; set; }

        /// <summary>
        /// Gets or sets the source URL.
        /// </summary>
        /// <value>Gets or sets the source URL.</value>
        [DataMember(Name="sourceUrl", EmitDefaultValue=true)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or sets the ABI that this version was built against.
        /// </summary>
        /// <value>Gets or sets the ABI that this version was built against.</value>
        [DataMember(Name="targetAbi", EmitDefaultValue=true)]
        public string TargetAbi { get; set; }

        /// <summary>
        /// Gets or sets a timestamp of when the binary was built.
        /// </summary>
        /// <value>Gets or sets a timestamp of when the binary was built.</value>
        [DataMember(Name="timestamp", EmitDefaultValue=true)]
        public string Timestamp { get; set; }

        /// <summary>
        /// Gets or sets the version.
        /// </summary>
        /// <value>Gets or sets the version.</value>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionInfo {\n");
            sb.Append("  VersionNumber: ").Append(VersionNumber).Append("\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  RepositoryName: ").Append(RepositoryName).Append("\n");
            sb.Append("  RepositoryUrl: ").Append(RepositoryUrl).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  TargetAbi: ").Append(TargetAbi).Append("\n");
            sb.Append("  Timestamp: ").Append(Timestamp).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VersionInfo)obj);
        }

        /// <summary>
        /// Returns true if VersionInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of VersionInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VersionNumber == other.VersionNumber ||
                    VersionNumber != null &&
                    VersionNumber.Equals(other.VersionNumber)
                ) && 
                (
                    Changelog == other.Changelog ||
                    Changelog != null &&
                    Changelog.Equals(other.Changelog)
                ) && 
                (
                    Checksum == other.Checksum ||
                    Checksum != null &&
                    Checksum.Equals(other.Checksum)
                ) && 
                (
                    RepositoryName == other.RepositoryName ||
                    RepositoryName != null &&
                    RepositoryName.Equals(other.RepositoryName)
                ) && 
                (
                    RepositoryUrl == other.RepositoryUrl ||
                    RepositoryUrl != null &&
                    RepositoryUrl.Equals(other.RepositoryUrl)
                ) && 
                (
                    SourceUrl == other.SourceUrl ||
                    SourceUrl != null &&
                    SourceUrl.Equals(other.SourceUrl)
                ) && 
                (
                    TargetAbi == other.TargetAbi ||
                    TargetAbi != null &&
                    TargetAbi.Equals(other.TargetAbi)
                ) && 
                (
                    Timestamp == other.Timestamp ||
                    Timestamp != null &&
                    Timestamp.Equals(other.Timestamp)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VersionNumber != null)
                    hashCode = hashCode * 59 + VersionNumber.GetHashCode();
                    if (Changelog != null)
                    hashCode = hashCode * 59 + Changelog.GetHashCode();
                    if (Checksum != null)
                    hashCode = hashCode * 59 + Checksum.GetHashCode();
                    if (RepositoryName != null)
                    hashCode = hashCode * 59 + RepositoryName.GetHashCode();
                    if (RepositoryUrl != null)
                    hashCode = hashCode * 59 + RepositoryUrl.GetHashCode();
                    if (SourceUrl != null)
                    hashCode = hashCode * 59 + SourceUrl.GetHashCode();
                    if (TargetAbi != null)
                    hashCode = hashCode * 59 + TargetAbi.GetHashCode();
                    if (Timestamp != null)
                    hashCode = hashCode * 59 + Timestamp.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VersionInfo left, VersionInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VersionInfo left, VersionInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
