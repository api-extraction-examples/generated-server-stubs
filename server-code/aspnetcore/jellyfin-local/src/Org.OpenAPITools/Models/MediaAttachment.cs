/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class MediaAttachment.
    /// </summary>
    [DataContract]
    public partial class MediaAttachment : IEquatable<MediaAttachment>
    {
        /// <summary>
        /// Gets or sets the codec.
        /// </summary>
        /// <value>Gets or sets the codec.</value>
        [DataMember(Name="Codec", EmitDefaultValue=true)]
        public string Codec { get; set; }

        /// <summary>
        /// Gets or sets the codec tag.
        /// </summary>
        /// <value>Gets or sets the codec tag.</value>
        [DataMember(Name="CodecTag", EmitDefaultValue=true)]
        public string CodecTag { get; set; }

        /// <summary>
        /// Gets or sets the comment.
        /// </summary>
        /// <value>Gets or sets the comment.</value>
        [DataMember(Name="Comment", EmitDefaultValue=true)]
        public string Comment { get; set; }

        /// <summary>
        /// Gets or sets the delivery URL.
        /// </summary>
        /// <value>Gets or sets the delivery URL.</value>
        [DataMember(Name="DeliveryUrl", EmitDefaultValue=true)]
        public string DeliveryUrl { get; set; }

        /// <summary>
        /// Gets or sets the filename.
        /// </summary>
        /// <value>Gets or sets the filename.</value>
        [DataMember(Name="FileName", EmitDefaultValue=true)]
        public string FileName { get; set; }

        /// <summary>
        /// Gets or sets the index.
        /// </summary>
        /// <value>Gets or sets the index.</value>
        [DataMember(Name="Index", EmitDefaultValue=true)]
        public int Index { get; set; }

        /// <summary>
        /// Gets or sets the MIME type.
        /// </summary>
        /// <value>Gets or sets the MIME type.</value>
        [DataMember(Name="MimeType", EmitDefaultValue=true)]
        public string MimeType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MediaAttachment {\n");
            sb.Append("  Codec: ").Append(Codec).Append("\n");
            sb.Append("  CodecTag: ").Append(CodecTag).Append("\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  DeliveryUrl: ").Append(DeliveryUrl).Append("\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  MimeType: ").Append(MimeType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MediaAttachment)obj);
        }

        /// <summary>
        /// Returns true if MediaAttachment instances are equal
        /// </summary>
        /// <param name="other">Instance of MediaAttachment to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MediaAttachment other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Codec == other.Codec ||
                    Codec != null &&
                    Codec.Equals(other.Codec)
                ) && 
                (
                    CodecTag == other.CodecTag ||
                    CodecTag != null &&
                    CodecTag.Equals(other.CodecTag)
                ) && 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    DeliveryUrl == other.DeliveryUrl ||
                    DeliveryUrl != null &&
                    DeliveryUrl.Equals(other.DeliveryUrl)
                ) && 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    Index == other.Index ||
                    
                    Index.Equals(other.Index)
                ) && 
                (
                    MimeType == other.MimeType ||
                    MimeType != null &&
                    MimeType.Equals(other.MimeType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Codec != null)
                    hashCode = hashCode * 59 + Codec.GetHashCode();
                    if (CodecTag != null)
                    hashCode = hashCode * 59 + CodecTag.GetHashCode();
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (DeliveryUrl != null)
                    hashCode = hashCode * 59 + DeliveryUrl.GetHashCode();
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    
                    hashCode = hashCode * 59 + Index.GetHashCode();
                    if (MimeType != null)
                    hashCode = hashCode * 59 + MimeType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MediaAttachment left, MediaAttachment right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MediaAttachment left, MediaAttachment right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
