/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Defines the display preferences for any item that supports them (usually Folders).
    /// </summary>
    [DataContract]
    public partial class DisplayPreferencesDto : IEquatable<DisplayPreferencesDto>
    {
        /// <summary>
        /// Gets or sets the client.
        /// </summary>
        /// <value>Gets or sets the client.</value>
        [DataMember(Name="Client", EmitDefaultValue=true)]
        public string VarClient { get; set; }

        /// <summary>
        /// Gets or sets the custom prefs.
        /// </summary>
        /// <value>Gets or sets the custom prefs.</value>
        [DataMember(Name="CustomPrefs", EmitDefaultValue=true)]
        public Dictionary<string, string> CustomPrefs { get; set; }

        /// <summary>
        /// Gets or sets the user id.
        /// </summary>
        /// <value>Gets or sets the user id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the index by.
        /// </summary>
        /// <value>Gets or sets the index by.</value>
        [DataMember(Name="IndexBy", EmitDefaultValue=true)]
        public string IndexBy { get; set; }

        /// <summary>
        /// Gets or sets the height of the primary image.
        /// </summary>
        /// <value>Gets or sets the height of the primary image.</value>
        [DataMember(Name="PrimaryImageHeight", EmitDefaultValue=true)]
        public int PrimaryImageHeight { get; set; }

        /// <summary>
        /// Gets or sets the width of the primary image.
        /// </summary>
        /// <value>Gets or sets the width of the primary image.</value>
        [DataMember(Name="PrimaryImageWidth", EmitDefaultValue=true)]
        public int PrimaryImageWidth { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [remember indexing].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [remember indexing].</value>
        [DataMember(Name="RememberIndexing", EmitDefaultValue=true)]
        public bool RememberIndexing { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [remember sorting].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [remember sorting].</value>
        [DataMember(Name="RememberSorting", EmitDefaultValue=true)]
        public bool RememberSorting { get; set; }

        /// <summary>
        /// Gets or Sets ScrollDirection
        /// </summary>
        [DataMember(Name="ScrollDirection", EmitDefaultValue=true)]
        public ScrollDirection ScrollDirection { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to show backdrops on this item.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to show backdrops on this item.</value>
        [DataMember(Name="ShowBackdrop", EmitDefaultValue=true)]
        public bool ShowBackdrop { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [show sidebar].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [show sidebar].</value>
        [DataMember(Name="ShowSidebar", EmitDefaultValue=true)]
        public bool ShowSidebar { get; set; }

        /// <summary>
        /// Gets or sets the sort by.
        /// </summary>
        /// <value>Gets or sets the sort by.</value>
        [DataMember(Name="SortBy", EmitDefaultValue=true)]
        public string SortBy { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="SortOrder", EmitDefaultValue=true)]
        public SortOrder SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the type of the view.
        /// </summary>
        /// <value>Gets or sets the type of the view.</value>
        [DataMember(Name="ViewType", EmitDefaultValue=true)]
        public string ViewType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DisplayPreferencesDto {\n");
            sb.Append("  VarClient: ").Append(VarClient).Append("\n");
            sb.Append("  CustomPrefs: ").Append(CustomPrefs).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IndexBy: ").Append(IndexBy).Append("\n");
            sb.Append("  PrimaryImageHeight: ").Append(PrimaryImageHeight).Append("\n");
            sb.Append("  PrimaryImageWidth: ").Append(PrimaryImageWidth).Append("\n");
            sb.Append("  RememberIndexing: ").Append(RememberIndexing).Append("\n");
            sb.Append("  RememberSorting: ").Append(RememberSorting).Append("\n");
            sb.Append("  ScrollDirection: ").Append(ScrollDirection).Append("\n");
            sb.Append("  ShowBackdrop: ").Append(ShowBackdrop).Append("\n");
            sb.Append("  ShowSidebar: ").Append(ShowSidebar).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  ViewType: ").Append(ViewType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DisplayPreferencesDto)obj);
        }

        /// <summary>
        /// Returns true if DisplayPreferencesDto instances are equal
        /// </summary>
        /// <param name="other">Instance of DisplayPreferencesDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DisplayPreferencesDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarClient == other.VarClient ||
                    VarClient != null &&
                    VarClient.Equals(other.VarClient)
                ) && 
                (
                    CustomPrefs == other.CustomPrefs ||
                    CustomPrefs != null &&
                    other.CustomPrefs != null &&
                    CustomPrefs.SequenceEqual(other.CustomPrefs)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IndexBy == other.IndexBy ||
                    IndexBy != null &&
                    IndexBy.Equals(other.IndexBy)
                ) && 
                (
                    PrimaryImageHeight == other.PrimaryImageHeight ||
                    
                    PrimaryImageHeight.Equals(other.PrimaryImageHeight)
                ) && 
                (
                    PrimaryImageWidth == other.PrimaryImageWidth ||
                    
                    PrimaryImageWidth.Equals(other.PrimaryImageWidth)
                ) && 
                (
                    RememberIndexing == other.RememberIndexing ||
                    
                    RememberIndexing.Equals(other.RememberIndexing)
                ) && 
                (
                    RememberSorting == other.RememberSorting ||
                    
                    RememberSorting.Equals(other.RememberSorting)
                ) && 
                (
                    ScrollDirection == other.ScrollDirection ||
                    
                    ScrollDirection.Equals(other.ScrollDirection)
                ) && 
                (
                    ShowBackdrop == other.ShowBackdrop ||
                    
                    ShowBackdrop.Equals(other.ShowBackdrop)
                ) && 
                (
                    ShowSidebar == other.ShowSidebar ||
                    
                    ShowSidebar.Equals(other.ShowSidebar)
                ) && 
                (
                    SortBy == other.SortBy ||
                    SortBy != null &&
                    SortBy.Equals(other.SortBy)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    ViewType == other.ViewType ||
                    ViewType != null &&
                    ViewType.Equals(other.ViewType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarClient != null)
                    hashCode = hashCode * 59 + VarClient.GetHashCode();
                    if (CustomPrefs != null)
                    hashCode = hashCode * 59 + CustomPrefs.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IndexBy != null)
                    hashCode = hashCode * 59 + IndexBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrimaryImageHeight.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrimaryImageWidth.GetHashCode();
                    
                    hashCode = hashCode * 59 + RememberIndexing.GetHashCode();
                    
                    hashCode = hashCode * 59 + RememberSorting.GetHashCode();
                    
                    hashCode = hashCode * 59 + ScrollDirection.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowBackdrop.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShowSidebar.GetHashCode();
                    if (SortBy != null)
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (ViewType != null)
                    hashCode = hashCode * 59 + ViewType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DisplayPreferencesDto left, DisplayPreferencesDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DisplayPreferencesDto left, DisplayPreferencesDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
