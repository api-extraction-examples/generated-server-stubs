/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ClientCapabilities : IEquatable<ClientCapabilities>
    {
        /// <summary>
        /// Gets or Sets AppStoreUrl
        /// </summary>
        [DataMember(Name="AppStoreUrl", EmitDefaultValue=true)]
        public string AppStoreUrl { get; set; }

        /// <summary>
        /// Gets or Sets DeviceProfile
        /// </summary>
        [DataMember(Name="DeviceProfile", EmitDefaultValue=false)]
        public DeviceProfile DeviceProfile { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name="IconUrl", EmitDefaultValue=true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or Sets MessageCallbackUrl
        /// </summary>
        [DataMember(Name="MessageCallbackUrl", EmitDefaultValue=true)]
        public string MessageCallbackUrl { get; set; }

        /// <summary>
        /// Gets or Sets PlayableMediaTypes
        /// </summary>
        [DataMember(Name="PlayableMediaTypes", EmitDefaultValue=true)]
        public List<string> PlayableMediaTypes { get; set; }

        /// <summary>
        /// Gets or Sets SupportedCommands
        /// </summary>
        [DataMember(Name="SupportedCommands", EmitDefaultValue=true)]
        public List<GeneralCommandType> SupportedCommands { get; set; }

        /// <summary>
        /// Gets or Sets SupportsContentUploading
        /// </summary>
        [DataMember(Name="SupportsContentUploading", EmitDefaultValue=true)]
        public bool SupportsContentUploading { get; set; }

        /// <summary>
        /// Gets or Sets SupportsMediaControl
        /// </summary>
        [DataMember(Name="SupportsMediaControl", EmitDefaultValue=true)]
        public bool SupportsMediaControl { get; set; }

        /// <summary>
        /// Gets or Sets SupportsPersistentIdentifier
        /// </summary>
        [DataMember(Name="SupportsPersistentIdentifier", EmitDefaultValue=true)]
        public bool SupportsPersistentIdentifier { get; set; }

        /// <summary>
        /// Gets or Sets SupportsSync
        /// </summary>
        [DataMember(Name="SupportsSync", EmitDefaultValue=true)]
        public bool SupportsSync { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ClientCapabilities {\n");
            sb.Append("  AppStoreUrl: ").Append(AppStoreUrl).Append("\n");
            sb.Append("  DeviceProfile: ").Append(DeviceProfile).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  MessageCallbackUrl: ").Append(MessageCallbackUrl).Append("\n");
            sb.Append("  PlayableMediaTypes: ").Append(PlayableMediaTypes).Append("\n");
            sb.Append("  SupportedCommands: ").Append(SupportedCommands).Append("\n");
            sb.Append("  SupportsContentUploading: ").Append(SupportsContentUploading).Append("\n");
            sb.Append("  SupportsMediaControl: ").Append(SupportsMediaControl).Append("\n");
            sb.Append("  SupportsPersistentIdentifier: ").Append(SupportsPersistentIdentifier).Append("\n");
            sb.Append("  SupportsSync: ").Append(SupportsSync).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ClientCapabilities)obj);
        }

        /// <summary>
        /// Returns true if ClientCapabilities instances are equal
        /// </summary>
        /// <param name="other">Instance of ClientCapabilities to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ClientCapabilities other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppStoreUrl == other.AppStoreUrl ||
                    AppStoreUrl != null &&
                    AppStoreUrl.Equals(other.AppStoreUrl)
                ) && 
                (
                    DeviceProfile == other.DeviceProfile ||
                    DeviceProfile != null &&
                    DeviceProfile.Equals(other.DeviceProfile)
                ) && 
                (
                    IconUrl == other.IconUrl ||
                    IconUrl != null &&
                    IconUrl.Equals(other.IconUrl)
                ) && 
                (
                    MessageCallbackUrl == other.MessageCallbackUrl ||
                    MessageCallbackUrl != null &&
                    MessageCallbackUrl.Equals(other.MessageCallbackUrl)
                ) && 
                (
                    PlayableMediaTypes == other.PlayableMediaTypes ||
                    PlayableMediaTypes != null &&
                    other.PlayableMediaTypes != null &&
                    PlayableMediaTypes.SequenceEqual(other.PlayableMediaTypes)
                ) && 
                (
                    SupportedCommands == other.SupportedCommands ||
                    SupportedCommands != null &&
                    other.SupportedCommands != null &&
                    SupportedCommands.SequenceEqual(other.SupportedCommands)
                ) && 
                (
                    SupportsContentUploading == other.SupportsContentUploading ||
                    
                    SupportsContentUploading.Equals(other.SupportsContentUploading)
                ) && 
                (
                    SupportsMediaControl == other.SupportsMediaControl ||
                    
                    SupportsMediaControl.Equals(other.SupportsMediaControl)
                ) && 
                (
                    SupportsPersistentIdentifier == other.SupportsPersistentIdentifier ||
                    
                    SupportsPersistentIdentifier.Equals(other.SupportsPersistentIdentifier)
                ) && 
                (
                    SupportsSync == other.SupportsSync ||
                    
                    SupportsSync.Equals(other.SupportsSync)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AppStoreUrl != null)
                    hashCode = hashCode * 59 + AppStoreUrl.GetHashCode();
                    if (DeviceProfile != null)
                    hashCode = hashCode * 59 + DeviceProfile.GetHashCode();
                    if (IconUrl != null)
                    hashCode = hashCode * 59 + IconUrl.GetHashCode();
                    if (MessageCallbackUrl != null)
                    hashCode = hashCode * 59 + MessageCallbackUrl.GetHashCode();
                    if (PlayableMediaTypes != null)
                    hashCode = hashCode * 59 + PlayableMediaTypes.GetHashCode();
                    if (SupportedCommands != null)
                    hashCode = hashCode * 59 + SupportedCommands.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsContentUploading.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsMediaControl.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsPersistentIdentifier.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsSync.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ClientCapabilities left, ClientCapabilities right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ClientCapabilities left, ClientCapabilities right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
