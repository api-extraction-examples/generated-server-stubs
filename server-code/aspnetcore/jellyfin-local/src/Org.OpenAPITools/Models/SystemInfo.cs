/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class SystemInfo.
    /// </summary>
    [DataContract]
    public partial class SystemInfo : IEquatable<SystemInfo>
    {
        /// <summary>
        /// Gets or sets the cache path.
        /// </summary>
        /// <value>Gets or sets the cache path.</value>
        [DataMember(Name="CachePath", EmitDefaultValue=true)]
        public string CachePath { get; set; }

        /// <summary>
        /// Gets or Sets CanLaunchWebBrowser
        /// </summary>
        [DataMember(Name="CanLaunchWebBrowser", EmitDefaultValue=true)]
        public bool CanLaunchWebBrowser { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance can self restart.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance can self restart.</value>
        [DataMember(Name="CanSelfRestart", EmitDefaultValue=true)]
        public bool CanSelfRestart { get; set; }

        /// <summary>
        /// Gets or sets the completed installations.
        /// </summary>
        /// <value>Gets or sets the completed installations.</value>
        [DataMember(Name="CompletedInstallations", EmitDefaultValue=true)]
        public List<InstallationInfo> CompletedInstallations { get; set; }

        /// <summary>
        /// Gets or Sets EncoderLocation
        /// </summary>
        [DataMember(Name="EncoderLocation", EmitDefaultValue=true)]
        public FFmpegLocation EncoderLocation { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has pending restart.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has pending restart.</value>
        [DataMember(Name="HasPendingRestart", EmitDefaultValue=true)]
        public bool HasPendingRestart { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has update available.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has update available.</value>
        [DataMember(Name="HasUpdateAvailable", EmitDefaultValue=true)]
        public bool HasUpdateAvailable { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the internal metadata path.
        /// </summary>
        /// <value>Gets or sets the internal metadata path.</value>
        [DataMember(Name="InternalMetadataPath", EmitDefaultValue=true)]
        public string InternalMetadataPath { get; set; }

        /// <summary>
        /// Gets or Sets IsShuttingDown
        /// </summary>
        [DataMember(Name="IsShuttingDown", EmitDefaultValue=true)]
        public bool IsShuttingDown { get; set; }

        /// <summary>
        /// Gets or sets the items by name path.
        /// </summary>
        /// <value>Gets or sets the items by name path.</value>
        [DataMember(Name="ItemsByNamePath", EmitDefaultValue=true)]
        public string ItemsByNamePath { get; set; }

        /// <summary>
        /// Gets or sets the local address.
        /// </summary>
        /// <value>Gets or sets the local address.</value>
        [DataMember(Name="LocalAddress", EmitDefaultValue=true)]
        public string LocalAddress { get; set; }

        /// <summary>
        /// Gets or sets the log path.
        /// </summary>
        /// <value>Gets or sets the log path.</value>
        [DataMember(Name="LogPath", EmitDefaultValue=true)]
        public string LogPath { get; set; }

        /// <summary>
        /// Gets or sets the operating system.
        /// </summary>
        /// <value>Gets or sets the operating system.</value>
        [DataMember(Name="OperatingSystem", EmitDefaultValue=true)]
        public string VarOperatingSystem { get; set; }

        /// <summary>
        /// Gets or sets the display name of the operating system.
        /// </summary>
        /// <value>Gets or sets the display name of the operating system.</value>
        [DataMember(Name="OperatingSystemDisplayName", EmitDefaultValue=true)]
        public string OperatingSystemDisplayName { get; set; }

        /// <summary>
        /// Get or sets the package name.
        /// </summary>
        /// <value>Get or sets the package name.</value>
        [DataMember(Name="PackageName", EmitDefaultValue=true)]
        public string PackageName { get; set; }

        /// <summary>
        /// Gets or sets the product name. This is the AssemblyProduct name.
        /// </summary>
        /// <value>Gets or sets the product name. This is the AssemblyProduct name.</value>
        [DataMember(Name="ProductName", EmitDefaultValue=true)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or sets the program data path.
        /// </summary>
        /// <value>Gets or sets the program data path.</value>
        [DataMember(Name="ProgramDataPath", EmitDefaultValue=true)]
        public string ProgramDataPath { get; set; }

        /// <summary>
        /// Gets or sets the name of the server.
        /// </summary>
        /// <value>Gets or sets the name of the server.</value>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether the startup wizard is completed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the startup wizard is completed.</value>
        [DataMember(Name="StartupWizardCompleted", EmitDefaultValue=true)]
        public bool? StartupWizardCompleted { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether [supports library monitor].
        /// </summary>
        /// <value>Gets or sets a value indicating whether [supports library monitor].</value>
        [DataMember(Name="SupportsLibraryMonitor", EmitDefaultValue=true)]
        public bool SupportsLibraryMonitor { get; set; }

        /// <summary>
        /// Gets or Sets SystemArchitecture
        /// </summary>
        [DataMember(Name="SystemArchitecture", EmitDefaultValue=true)]
        public Architecture SystemArchitecture { get; set; }

        /// <summary>
        /// Gets or sets the transcode path.
        /// </summary>
        /// <value>Gets or sets the transcode path.</value>
        [DataMember(Name="TranscodingTempPath", EmitDefaultValue=true)]
        public string TranscodingTempPath { get; set; }

        /// <summary>
        /// Gets or sets the server version.
        /// </summary>
        /// <value>Gets or sets the server version.</value>
        [DataMember(Name="Version", EmitDefaultValue=true)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Gets or sets the web UI resources path.
        /// </summary>
        /// <value>Gets or sets the web UI resources path.</value>
        [DataMember(Name="WebPath", EmitDefaultValue=true)]
        public string WebPath { get; set; }

        /// <summary>
        /// Gets or sets the web socket port number.
        /// </summary>
        /// <value>Gets or sets the web socket port number.</value>
        [DataMember(Name="WebSocketPortNumber", EmitDefaultValue=true)]
        public int WebSocketPortNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SystemInfo {\n");
            sb.Append("  CachePath: ").Append(CachePath).Append("\n");
            sb.Append("  CanLaunchWebBrowser: ").Append(CanLaunchWebBrowser).Append("\n");
            sb.Append("  CanSelfRestart: ").Append(CanSelfRestart).Append("\n");
            sb.Append("  CompletedInstallations: ").Append(CompletedInstallations).Append("\n");
            sb.Append("  EncoderLocation: ").Append(EncoderLocation).Append("\n");
            sb.Append("  HasPendingRestart: ").Append(HasPendingRestart).Append("\n");
            sb.Append("  HasUpdateAvailable: ").Append(HasUpdateAvailable).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  InternalMetadataPath: ").Append(InternalMetadataPath).Append("\n");
            sb.Append("  IsShuttingDown: ").Append(IsShuttingDown).Append("\n");
            sb.Append("  ItemsByNamePath: ").Append(ItemsByNamePath).Append("\n");
            sb.Append("  LocalAddress: ").Append(LocalAddress).Append("\n");
            sb.Append("  LogPath: ").Append(LogPath).Append("\n");
            sb.Append("  VarOperatingSystem: ").Append(VarOperatingSystem).Append("\n");
            sb.Append("  OperatingSystemDisplayName: ").Append(OperatingSystemDisplayName).Append("\n");
            sb.Append("  PackageName: ").Append(PackageName).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProgramDataPath: ").Append(ProgramDataPath).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("  StartupWizardCompleted: ").Append(StartupWizardCompleted).Append("\n");
            sb.Append("  SupportsLibraryMonitor: ").Append(SupportsLibraryMonitor).Append("\n");
            sb.Append("  SystemArchitecture: ").Append(SystemArchitecture).Append("\n");
            sb.Append("  TranscodingTempPath: ").Append(TranscodingTempPath).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  WebPath: ").Append(WebPath).Append("\n");
            sb.Append("  WebSocketPortNumber: ").Append(WebSocketPortNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SystemInfo)obj);
        }

        /// <summary>
        /// Returns true if SystemInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SystemInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SystemInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CachePath == other.CachePath ||
                    CachePath != null &&
                    CachePath.Equals(other.CachePath)
                ) && 
                (
                    CanLaunchWebBrowser == other.CanLaunchWebBrowser ||
                    
                    CanLaunchWebBrowser.Equals(other.CanLaunchWebBrowser)
                ) && 
                (
                    CanSelfRestart == other.CanSelfRestart ||
                    
                    CanSelfRestart.Equals(other.CanSelfRestart)
                ) && 
                (
                    CompletedInstallations == other.CompletedInstallations ||
                    CompletedInstallations != null &&
                    other.CompletedInstallations != null &&
                    CompletedInstallations.SequenceEqual(other.CompletedInstallations)
                ) && 
                (
                    EncoderLocation == other.EncoderLocation ||
                    
                    EncoderLocation.Equals(other.EncoderLocation)
                ) && 
                (
                    HasPendingRestart == other.HasPendingRestart ||
                    
                    HasPendingRestart.Equals(other.HasPendingRestart)
                ) && 
                (
                    HasUpdateAvailable == other.HasUpdateAvailable ||
                    
                    HasUpdateAvailable.Equals(other.HasUpdateAvailable)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    InternalMetadataPath == other.InternalMetadataPath ||
                    InternalMetadataPath != null &&
                    InternalMetadataPath.Equals(other.InternalMetadataPath)
                ) && 
                (
                    IsShuttingDown == other.IsShuttingDown ||
                    
                    IsShuttingDown.Equals(other.IsShuttingDown)
                ) && 
                (
                    ItemsByNamePath == other.ItemsByNamePath ||
                    ItemsByNamePath != null &&
                    ItemsByNamePath.Equals(other.ItemsByNamePath)
                ) && 
                (
                    LocalAddress == other.LocalAddress ||
                    LocalAddress != null &&
                    LocalAddress.Equals(other.LocalAddress)
                ) && 
                (
                    LogPath == other.LogPath ||
                    LogPath != null &&
                    LogPath.Equals(other.LogPath)
                ) && 
                (
                    VarOperatingSystem == other.VarOperatingSystem ||
                    VarOperatingSystem != null &&
                    VarOperatingSystem.Equals(other.VarOperatingSystem)
                ) && 
                (
                    OperatingSystemDisplayName == other.OperatingSystemDisplayName ||
                    OperatingSystemDisplayName != null &&
                    OperatingSystemDisplayName.Equals(other.OperatingSystemDisplayName)
                ) && 
                (
                    PackageName == other.PackageName ||
                    PackageName != null &&
                    PackageName.Equals(other.PackageName)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ProgramDataPath == other.ProgramDataPath ||
                    ProgramDataPath != null &&
                    ProgramDataPath.Equals(other.ProgramDataPath)
                ) && 
                (
                    ServerName == other.ServerName ||
                    ServerName != null &&
                    ServerName.Equals(other.ServerName)
                ) && 
                (
                    StartupWizardCompleted == other.StartupWizardCompleted ||
                    StartupWizardCompleted != null &&
                    StartupWizardCompleted.Equals(other.StartupWizardCompleted)
                ) && 
                (
                    SupportsLibraryMonitor == other.SupportsLibraryMonitor ||
                    
                    SupportsLibraryMonitor.Equals(other.SupportsLibraryMonitor)
                ) && 
                (
                    SystemArchitecture == other.SystemArchitecture ||
                    
                    SystemArchitecture.Equals(other.SystemArchitecture)
                ) && 
                (
                    TranscodingTempPath == other.TranscodingTempPath ||
                    TranscodingTempPath != null &&
                    TranscodingTempPath.Equals(other.TranscodingTempPath)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    WebPath == other.WebPath ||
                    WebPath != null &&
                    WebPath.Equals(other.WebPath)
                ) && 
                (
                    WebSocketPortNumber == other.WebSocketPortNumber ||
                    
                    WebSocketPortNumber.Equals(other.WebSocketPortNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CachePath != null)
                    hashCode = hashCode * 59 + CachePath.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanLaunchWebBrowser.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanSelfRestart.GetHashCode();
                    if (CompletedInstallations != null)
                    hashCode = hashCode * 59 + CompletedInstallations.GetHashCode();
                    
                    hashCode = hashCode * 59 + EncoderLocation.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPendingRestart.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasUpdateAvailable.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (InternalMetadataPath != null)
                    hashCode = hashCode * 59 + InternalMetadataPath.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsShuttingDown.GetHashCode();
                    if (ItemsByNamePath != null)
                    hashCode = hashCode * 59 + ItemsByNamePath.GetHashCode();
                    if (LocalAddress != null)
                    hashCode = hashCode * 59 + LocalAddress.GetHashCode();
                    if (LogPath != null)
                    hashCode = hashCode * 59 + LogPath.GetHashCode();
                    if (VarOperatingSystem != null)
                    hashCode = hashCode * 59 + VarOperatingSystem.GetHashCode();
                    if (OperatingSystemDisplayName != null)
                    hashCode = hashCode * 59 + OperatingSystemDisplayName.GetHashCode();
                    if (PackageName != null)
                    hashCode = hashCode * 59 + PackageName.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ProgramDataPath != null)
                    hashCode = hashCode * 59 + ProgramDataPath.GetHashCode();
                    if (ServerName != null)
                    hashCode = hashCode * 59 + ServerName.GetHashCode();
                    if (StartupWizardCompleted != null)
                    hashCode = hashCode * 59 + StartupWizardCompleted.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsLibraryMonitor.GetHashCode();
                    
                    hashCode = hashCode * 59 + SystemArchitecture.GetHashCode();
                    if (TranscodingTempPath != null)
                    hashCode = hashCode * 59 + TranscodingTempPath.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (WebPath != null)
                    hashCode = hashCode * 59 + WebPath.GetHashCode();
                    
                    hashCode = hashCode * 59 + WebSocketPortNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SystemInfo left, SystemInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SystemInfo left, SystemInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
