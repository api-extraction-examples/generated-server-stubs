/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class TaskInfo.
    /// </summary>
    [DataContract]
    public partial class TaskInfo : IEquatable<TaskInfo>
    {
        /// <summary>
        /// Gets or sets the category.
        /// </summary>
        /// <value>Gets or sets the category.</value>
        [DataMember(Name="Category", EmitDefaultValue=true)]
        public string Category { get; set; }

        /// <summary>
        /// Gets or sets the progress.
        /// </summary>
        /// <value>Gets or sets the progress.</value>
        [DataMember(Name="CurrentProgressPercentage", EmitDefaultValue=true)]
        public double? CurrentProgressPercentage { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is hidden.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is hidden.</value>
        [DataMember(Name="IsHidden", EmitDefaultValue=true)]
        public bool IsHidden { get; set; }

        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        /// <value>Gets or sets the key.</value>
        [DataMember(Name="Key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets LastExecutionResult
        /// </summary>
        [DataMember(Name="LastExecutionResult", EmitDefaultValue=false)]
        public TaskResult LastExecutionResult { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="State", EmitDefaultValue=true)]
        public TaskState State { get; set; }

        /// <summary>
        /// Gets or sets the triggers.
        /// </summary>
        /// <value>Gets or sets the triggers.</value>
        [DataMember(Name="Triggers", EmitDefaultValue=true)]
        public List<TaskTriggerInfo> Triggers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskInfo {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CurrentProgressPercentage: ").Append(CurrentProgressPercentage).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsHidden: ").Append(IsHidden).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LastExecutionResult: ").Append(LastExecutionResult).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Triggers: ").Append(Triggers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskInfo)obj);
        }

        /// <summary>
        /// Returns true if TaskInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    CurrentProgressPercentage == other.CurrentProgressPercentage ||
                    CurrentProgressPercentage != null &&
                    CurrentProgressPercentage.Equals(other.CurrentProgressPercentage)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsHidden == other.IsHidden ||
                    
                    IsHidden.Equals(other.IsHidden)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    LastExecutionResult == other.LastExecutionResult ||
                    LastExecutionResult != null &&
                    LastExecutionResult.Equals(other.LastExecutionResult)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    State == other.State ||
                    
                    State.Equals(other.State)
                ) && 
                (
                    Triggers == other.Triggers ||
                    Triggers != null &&
                    other.Triggers != null &&
                    Triggers.SequenceEqual(other.Triggers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (CurrentProgressPercentage != null)
                    hashCode = hashCode * 59 + CurrentProgressPercentage.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsHidden.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (LastExecutionResult != null)
                    hashCode = hashCode * 59 + LastExecutionResult.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Triggers != null)
                    hashCode = hashCode * 59 + Triggers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskInfo left, TaskInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskInfo left, TaskInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
