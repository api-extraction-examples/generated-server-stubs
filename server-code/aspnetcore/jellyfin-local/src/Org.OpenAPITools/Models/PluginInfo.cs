/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This is a serializable stub class that is used by the api to provide information about installed plugins.
    /// </summary>
    [DataContract]
    public partial class PluginInfo : IEquatable<PluginInfo>
    {
        /// <summary>
        /// Gets or sets a value indicating whether the plugin can be uninstalled.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the plugin can be uninstalled.</value>
        [DataMember(Name="CanUninstall", EmitDefaultValue=true)]
        public bool CanUninstall { get; set; }

        /// <summary>
        /// Gets or sets the name of the configuration file.
        /// </summary>
        /// <value>Gets or sets the name of the configuration file.</value>
        [DataMember(Name="ConfigurationFileName", EmitDefaultValue=true)]
        public string ConfigurationFileName { get; set; }

        /// <summary>
        /// Gets or sets the description.
        /// </summary>
        /// <value>Gets or sets the description.</value>
        [DataMember(Name="Description", EmitDefaultValue=true)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this plugin has a valid image.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this plugin has a valid image.</value>
        [DataMember(Name="HasImage", EmitDefaultValue=true)]
        public bool HasImage { get; set; }

        /// <summary>
        /// Gets or sets the unique id.
        /// </summary>
        /// <value>Gets or sets the unique id.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public PluginStatus Status { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PluginInfo {\n");
            sb.Append("  CanUninstall: ").Append(CanUninstall).Append("\n");
            sb.Append("  ConfigurationFileName: ").Append(ConfigurationFileName).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasImage: ").Append(HasImage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PluginInfo)obj);
        }

        /// <summary>
        /// Returns true if PluginInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PluginInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PluginInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CanUninstall == other.CanUninstall ||
                    
                    CanUninstall.Equals(other.CanUninstall)
                ) && 
                (
                    ConfigurationFileName == other.ConfigurationFileName ||
                    ConfigurationFileName != null &&
                    ConfigurationFileName.Equals(other.ConfigurationFileName)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasImage == other.HasImage ||
                    
                    HasImage.Equals(other.HasImage)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CanUninstall.GetHashCode();
                    if (ConfigurationFileName != null)
                    hashCode = hashCode * 59 + ConfigurationFileName.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasImage.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PluginInfo left, PluginInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PluginInfo left, PluginInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
