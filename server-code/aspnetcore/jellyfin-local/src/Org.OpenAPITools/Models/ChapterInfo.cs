/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class ChapterInfo.
    /// </summary>
    [DataContract]
    public partial class ChapterInfo : IEquatable<ChapterInfo>
    {
        /// <summary>
        /// Gets or Sets ImageDateModified
        /// </summary>
        [DataMember(Name="ImageDateModified", EmitDefaultValue=false)]
        public DateTime ImageDateModified { get; set; }

        /// <summary>
        /// Gets or sets the image path.
        /// </summary>
        /// <value>Gets or sets the image path.</value>
        [DataMember(Name="ImagePath", EmitDefaultValue=true)]
        public string ImagePath { get; set; }

        /// <summary>
        /// Gets or Sets ImageTag
        /// </summary>
        [DataMember(Name="ImageTag", EmitDefaultValue=true)]
        public string ImageTag { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the start position ticks.
        /// </summary>
        /// <value>Gets or sets the start position ticks.</value>
        [DataMember(Name="StartPositionTicks", EmitDefaultValue=true)]
        public long StartPositionTicks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChapterInfo {\n");
            sb.Append("  ImageDateModified: ").Append(ImageDateModified).Append("\n");
            sb.Append("  ImagePath: ").Append(ImagePath).Append("\n");
            sb.Append("  ImageTag: ").Append(ImageTag).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartPositionTicks: ").Append(StartPositionTicks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChapterInfo)obj);
        }

        /// <summary>
        /// Returns true if ChapterInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ChapterInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChapterInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ImageDateModified == other.ImageDateModified ||
                    ImageDateModified != null &&
                    ImageDateModified.Equals(other.ImageDateModified)
                ) && 
                (
                    ImagePath == other.ImagePath ||
                    ImagePath != null &&
                    ImagePath.Equals(other.ImagePath)
                ) && 
                (
                    ImageTag == other.ImageTag ||
                    ImageTag != null &&
                    ImageTag.Equals(other.ImageTag)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    StartPositionTicks == other.StartPositionTicks ||
                    
                    StartPositionTicks.Equals(other.StartPositionTicks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ImageDateModified != null)
                    hashCode = hashCode * 59 + ImageDateModified.GetHashCode();
                    if (ImagePath != null)
                    hashCode = hashCode * 59 + ImagePath.GetHashCode();
                    if (ImageTag != null)
                    hashCode = hashCode * 59 + ImageTag.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartPositionTicks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChapterInfo left, ChapterInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChapterInfo left, ChapterInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
