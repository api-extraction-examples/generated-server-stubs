/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class RemoteImageInfo.
    /// </summary>
    [DataContract]
    public partial class RemoteImageInfo : IEquatable<RemoteImageInfo>
    {
        /// <summary>
        /// Gets or sets the community rating.
        /// </summary>
        /// <value>Gets or sets the community rating.</value>
        [DataMember(Name="CommunityRating", EmitDefaultValue=true)]
        public double? CommunityRating { get; set; }

        /// <summary>
        /// Gets or sets the height.
        /// </summary>
        /// <value>Gets or sets the height.</value>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int? Height { get; set; }

        /// <summary>
        /// Gets or sets the language.
        /// </summary>
        /// <value>Gets or sets the language.</value>
        [DataMember(Name="Language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or sets the name of the provider.
        /// </summary>
        /// <value>Gets or sets the name of the provider.</value>
        [DataMember(Name="ProviderName", EmitDefaultValue=true)]
        public string ProviderName { get; set; }

        /// <summary>
        /// Gets or Sets RatingType
        /// </summary>
        [DataMember(Name="RatingType", EmitDefaultValue=true)]
        public RatingType RatingType { get; set; }

        /// <summary>
        /// Gets a url used for previewing a smaller version.
        /// </summary>
        /// <value>Gets a url used for previewing a smaller version.</value>
        [DataMember(Name="ThumbnailUrl", EmitDefaultValue=true)]
        public string ThumbnailUrl { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public ImageType Type { get; set; }

        /// <summary>
        /// Gets or sets the URL.
        /// </summary>
        /// <value>Gets or sets the URL.</value>
        [DataMember(Name="Url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or sets the vote count.
        /// </summary>
        /// <value>Gets or sets the vote count.</value>
        [DataMember(Name="VoteCount", EmitDefaultValue=true)]
        public int? VoteCount { get; set; }

        /// <summary>
        /// Gets or sets the width.
        /// </summary>
        /// <value>Gets or sets the width.</value>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int? Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteImageInfo {\n");
            sb.Append("  CommunityRating: ").Append(CommunityRating).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  ProviderName: ").Append(ProviderName).Append("\n");
            sb.Append("  RatingType: ").Append(RatingType).Append("\n");
            sb.Append("  ThumbnailUrl: ").Append(ThumbnailUrl).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  VoteCount: ").Append(VoteCount).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteImageInfo)obj);
        }

        /// <summary>
        /// Returns true if RemoteImageInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteImageInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteImageInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CommunityRating == other.CommunityRating ||
                    CommunityRating != null &&
                    CommunityRating.Equals(other.CommunityRating)
                ) && 
                (
                    Height == other.Height ||
                    Height != null &&
                    Height.Equals(other.Height)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    ProviderName == other.ProviderName ||
                    ProviderName != null &&
                    ProviderName.Equals(other.ProviderName)
                ) && 
                (
                    RatingType == other.RatingType ||
                    
                    RatingType.Equals(other.RatingType)
                ) && 
                (
                    ThumbnailUrl == other.ThumbnailUrl ||
                    ThumbnailUrl != null &&
                    ThumbnailUrl.Equals(other.ThumbnailUrl)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    VoteCount == other.VoteCount ||
                    VoteCount != null &&
                    VoteCount.Equals(other.VoteCount)
                ) && 
                (
                    Width == other.Width ||
                    Width != null &&
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CommunityRating != null)
                    hashCode = hashCode * 59 + CommunityRating.GetHashCode();
                    if (Height != null)
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    if (ProviderName != null)
                    hashCode = hashCode * 59 + ProviderName.GetHashCode();
                    
                    hashCode = hashCode * 59 + RatingType.GetHashCode();
                    if (ThumbnailUrl != null)
                    hashCode = hashCode * 59 + ThumbnailUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (VoteCount != null)
                    hashCode = hashCode * 59 + VoteCount.GetHashCode();
                    if (Width != null)
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteImageInfo left, RemoteImageInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteImageInfo left, RemoteImageInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
