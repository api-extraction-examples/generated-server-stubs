/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TranscodingProfile : IEquatable<TranscodingProfile>
    {
        /// <summary>
        /// Gets or Sets AudioCodec
        /// </summary>
        [DataMember(Name="AudioCodec", EmitDefaultValue=true)]
        public string AudioCodec { get; set; }

        /// <summary>
        /// Gets or Sets BreakOnNonKeyFrames
        /// </summary>
        [DataMember(Name="BreakOnNonKeyFrames", EmitDefaultValue=true)]
        public bool BreakOnNonKeyFrames { get; set; }

        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="Context", EmitDefaultValue=true)]
        public EncodingContext Context { get; set; }

        /// <summary>
        /// Gets or Sets CopyTimestamps
        /// </summary>
        [DataMember(Name="CopyTimestamps", EmitDefaultValue=true)]
        public bool CopyTimestamps { get; set; }

        /// <summary>
        /// Gets or Sets EnableMpegtsM2TsMode
        /// </summary>
        [DataMember(Name="EnableMpegtsM2TsMode", EmitDefaultValue=true)]
        public bool EnableMpegtsM2TsMode { get; set; }

        /// <summary>
        /// Gets or Sets EnableSubtitlesInManifest
        /// </summary>
        [DataMember(Name="EnableSubtitlesInManifest", EmitDefaultValue=true)]
        public bool EnableSubtitlesInManifest { get; set; }

        /// <summary>
        /// Gets or Sets EstimateContentLength
        /// </summary>
        [DataMember(Name="EstimateContentLength", EmitDefaultValue=true)]
        public bool EstimateContentLength { get; set; }

        /// <summary>
        /// Gets or Sets MaxAudioChannels
        /// </summary>
        [DataMember(Name="MaxAudioChannels", EmitDefaultValue=true)]
        public string MaxAudioChannels { get; set; }

        /// <summary>
        /// Gets or Sets MinSegments
        /// </summary>
        [DataMember(Name="MinSegments", EmitDefaultValue=true)]
        public int MinSegments { get; set; }

        /// <summary>
        /// Gets or Sets Protocol
        /// </summary>
        [DataMember(Name="Protocol", EmitDefaultValue=true)]
        public string Protocol { get; set; }

        /// <summary>
        /// Gets or Sets SegmentLength
        /// </summary>
        [DataMember(Name="SegmentLength", EmitDefaultValue=true)]
        public int SegmentLength { get; set; }

        /// <summary>
        /// Gets or Sets TranscodeSeekInfo
        /// </summary>
        [DataMember(Name="TranscodeSeekInfo", EmitDefaultValue=true)]
        public TranscodeSeekInfo TranscodeSeekInfo { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public DlnaProfileType Type { get; set; }

        /// <summary>
        /// Gets or Sets VideoCodec
        /// </summary>
        [DataMember(Name="VideoCodec", EmitDefaultValue=true)]
        public string VideoCodec { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TranscodingProfile {\n");
            sb.Append("  AudioCodec: ").Append(AudioCodec).Append("\n");
            sb.Append("  BreakOnNonKeyFrames: ").Append(BreakOnNonKeyFrames).Append("\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CopyTimestamps: ").Append(CopyTimestamps).Append("\n");
            sb.Append("  EnableMpegtsM2TsMode: ").Append(EnableMpegtsM2TsMode).Append("\n");
            sb.Append("  EnableSubtitlesInManifest: ").Append(EnableSubtitlesInManifest).Append("\n");
            sb.Append("  EstimateContentLength: ").Append(EstimateContentLength).Append("\n");
            sb.Append("  MaxAudioChannels: ").Append(MaxAudioChannels).Append("\n");
            sb.Append("  MinSegments: ").Append(MinSegments).Append("\n");
            sb.Append("  Protocol: ").Append(Protocol).Append("\n");
            sb.Append("  SegmentLength: ").Append(SegmentLength).Append("\n");
            sb.Append("  TranscodeSeekInfo: ").Append(TranscodeSeekInfo).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VideoCodec: ").Append(VideoCodec).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TranscodingProfile)obj);
        }

        /// <summary>
        /// Returns true if TranscodingProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of TranscodingProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TranscodingProfile other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AudioCodec == other.AudioCodec ||
                    AudioCodec != null &&
                    AudioCodec.Equals(other.AudioCodec)
                ) && 
                (
                    BreakOnNonKeyFrames == other.BreakOnNonKeyFrames ||
                    
                    BreakOnNonKeyFrames.Equals(other.BreakOnNonKeyFrames)
                ) && 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    Context == other.Context ||
                    
                    Context.Equals(other.Context)
                ) && 
                (
                    CopyTimestamps == other.CopyTimestamps ||
                    
                    CopyTimestamps.Equals(other.CopyTimestamps)
                ) && 
                (
                    EnableMpegtsM2TsMode == other.EnableMpegtsM2TsMode ||
                    
                    EnableMpegtsM2TsMode.Equals(other.EnableMpegtsM2TsMode)
                ) && 
                (
                    EnableSubtitlesInManifest == other.EnableSubtitlesInManifest ||
                    
                    EnableSubtitlesInManifest.Equals(other.EnableSubtitlesInManifest)
                ) && 
                (
                    EstimateContentLength == other.EstimateContentLength ||
                    
                    EstimateContentLength.Equals(other.EstimateContentLength)
                ) && 
                (
                    MaxAudioChannels == other.MaxAudioChannels ||
                    MaxAudioChannels != null &&
                    MaxAudioChannels.Equals(other.MaxAudioChannels)
                ) && 
                (
                    MinSegments == other.MinSegments ||
                    
                    MinSegments.Equals(other.MinSegments)
                ) && 
                (
                    Protocol == other.Protocol ||
                    Protocol != null &&
                    Protocol.Equals(other.Protocol)
                ) && 
                (
                    SegmentLength == other.SegmentLength ||
                    
                    SegmentLength.Equals(other.SegmentLength)
                ) && 
                (
                    TranscodeSeekInfo == other.TranscodeSeekInfo ||
                    
                    TranscodeSeekInfo.Equals(other.TranscodeSeekInfo)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    VideoCodec == other.VideoCodec ||
                    VideoCodec != null &&
                    VideoCodec.Equals(other.VideoCodec)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AudioCodec != null)
                    hashCode = hashCode * 59 + AudioCodec.GetHashCode();
                    
                    hashCode = hashCode * 59 + BreakOnNonKeyFrames.GetHashCode();
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    
                    hashCode = hashCode * 59 + CopyTimestamps.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableMpegtsM2TsMode.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableSubtitlesInManifest.GetHashCode();
                    
                    hashCode = hashCode * 59 + EstimateContentLength.GetHashCode();
                    if (MaxAudioChannels != null)
                    hashCode = hashCode * 59 + MaxAudioChannels.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinSegments.GetHashCode();
                    if (Protocol != null)
                    hashCode = hashCode * 59 + Protocol.GetHashCode();
                    
                    hashCode = hashCode * 59 + SegmentLength.GetHashCode();
                    
                    hashCode = hashCode * 59 + TranscodeSeekInfo.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VideoCodec != null)
                    hashCode = hashCode * 59 + VideoCodec.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TranscodingProfile left, TranscodingProfile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TranscodingProfile left, TranscodingProfile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
