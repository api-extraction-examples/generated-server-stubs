/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SubtitleProfile : IEquatable<SubtitleProfile>
    {
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets DidlMode
        /// </summary>
        [DataMember(Name="DidlMode", EmitDefaultValue=true)]
        public string DidlMode { get; set; }

        /// <summary>
        /// Gets or Sets Format
        /// </summary>
        [DataMember(Name="Format", EmitDefaultValue=true)]
        public string Format { get; set; }

        /// <summary>
        /// Gets or Sets Language
        /// </summary>
        [DataMember(Name="Language", EmitDefaultValue=true)]
        public string Language { get; set; }

        /// <summary>
        /// Gets or Sets Method
        /// </summary>
        [DataMember(Name="Method", EmitDefaultValue=true)]
        public SubtitleDeliveryMethod Method { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SubtitleProfile {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  DidlMode: ").Append(DidlMode).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  Method: ").Append(Method).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SubtitleProfile)obj);
        }

        /// <summary>
        /// Returns true if SubtitleProfile instances are equal
        /// </summary>
        /// <param name="other">Instance of SubtitleProfile to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SubtitleProfile other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    DidlMode == other.DidlMode ||
                    DidlMode != null &&
                    DidlMode.Equals(other.DidlMode)
                ) && 
                (
                    Format == other.Format ||
                    Format != null &&
                    Format.Equals(other.Format)
                ) && 
                (
                    Language == other.Language ||
                    Language != null &&
                    Language.Equals(other.Language)
                ) && 
                (
                    Method == other.Method ||
                    
                    Method.Equals(other.Method)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    if (DidlMode != null)
                    hashCode = hashCode * 59 + DidlMode.GetHashCode();
                    if (Format != null)
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    if (Language != null)
                    hashCode = hashCode * 59 + Language.GetHashCode();
                    
                    hashCode = hashCode * 59 + Method.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SubtitleProfile left, SubtitleProfile right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SubtitleProfile left, SubtitleProfile right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
