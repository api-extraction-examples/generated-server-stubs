/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Plabyback info dto.
    /// </summary>
    [DataContract]
    public partial class PlaybackInfoDto : IEquatable<PlaybackInfoDto>
    {
        /// <summary>
        /// Gets or sets a value indicating whether to allow audio stream copy.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to allow audio stream copy.</value>
        [DataMember(Name="AllowAudioStreamCopy", EmitDefaultValue=true)]
        public bool? AllowAudioStreamCopy { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable video stream copy.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable video stream copy.</value>
        [DataMember(Name="AllowVideoStreamCopy", EmitDefaultValue=true)]
        public bool? AllowVideoStreamCopy { get; set; }

        /// <summary>
        /// Gets or sets the audio stream index.
        /// </summary>
        /// <value>Gets or sets the audio stream index.</value>
        [DataMember(Name="AudioStreamIndex", EmitDefaultValue=true)]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to auto open the live stream.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to auto open the live stream.</value>
        [DataMember(Name="AutoOpenLiveStream", EmitDefaultValue=true)]
        public bool? AutoOpenLiveStream { get; set; }

        /// <summary>
        /// Gets or Sets DeviceProfile
        /// </summary>
        [DataMember(Name="DeviceProfile", EmitDefaultValue=false)]
        public DeviceProfile DeviceProfile { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable direct play.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable direct play.</value>
        [DataMember(Name="EnableDirectPlay", EmitDefaultValue=true)]
        public bool? EnableDirectPlay { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable direct stream.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable direct stream.</value>
        [DataMember(Name="EnableDirectStream", EmitDefaultValue=true)]
        public bool? EnableDirectStream { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to enable transcoding.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to enable transcoding.</value>
        [DataMember(Name="EnableTranscoding", EmitDefaultValue=true)]
        public bool? EnableTranscoding { get; set; }

        /// <summary>
        /// Gets or sets the live stream id.
        /// </summary>
        /// <value>Gets or sets the live stream id.</value>
        [DataMember(Name="LiveStreamId", EmitDefaultValue=true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or sets the max audio channels.
        /// </summary>
        /// <value>Gets or sets the max audio channels.</value>
        [DataMember(Name="MaxAudioChannels", EmitDefaultValue=true)]
        public int? MaxAudioChannels { get; set; }

        /// <summary>
        /// Gets or sets the max streaming bitrate.
        /// </summary>
        /// <value>Gets or sets the max streaming bitrate.</value>
        [DataMember(Name="MaxStreamingBitrate", EmitDefaultValue=true)]
        public int? MaxStreamingBitrate { get; set; }

        /// <summary>
        /// Gets or sets the media source id.
        /// </summary>
        /// <value>Gets or sets the media source id.</value>
        [DataMember(Name="MediaSourceId", EmitDefaultValue=true)]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// Gets or sets the start time in ticks.
        /// </summary>
        /// <value>Gets or sets the start time in ticks.</value>
        [DataMember(Name="StartTimeTicks", EmitDefaultValue=true)]
        public long? StartTimeTicks { get; set; }

        /// <summary>
        /// Gets or sets the subtitle stream index.
        /// </summary>
        /// <value>Gets or sets the subtitle stream index.</value>
        [DataMember(Name="SubtitleStreamIndex", EmitDefaultValue=true)]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the playback userId.
        /// </summary>
        /// <value>Gets or sets the playback userId.</value>
        [DataMember(Name="UserId", EmitDefaultValue=true)]
        public Guid? UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaybackInfoDto {\n");
            sb.Append("  AllowAudioStreamCopy: ").Append(AllowAudioStreamCopy).Append("\n");
            sb.Append("  AllowVideoStreamCopy: ").Append(AllowVideoStreamCopy).Append("\n");
            sb.Append("  AudioStreamIndex: ").Append(AudioStreamIndex).Append("\n");
            sb.Append("  AutoOpenLiveStream: ").Append(AutoOpenLiveStream).Append("\n");
            sb.Append("  DeviceProfile: ").Append(DeviceProfile).Append("\n");
            sb.Append("  EnableDirectPlay: ").Append(EnableDirectPlay).Append("\n");
            sb.Append("  EnableDirectStream: ").Append(EnableDirectStream).Append("\n");
            sb.Append("  EnableTranscoding: ").Append(EnableTranscoding).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  MaxAudioChannels: ").Append(MaxAudioChannels).Append("\n");
            sb.Append("  MaxStreamingBitrate: ").Append(MaxStreamingBitrate).Append("\n");
            sb.Append("  MediaSourceId: ").Append(MediaSourceId).Append("\n");
            sb.Append("  StartTimeTicks: ").Append(StartTimeTicks).Append("\n");
            sb.Append("  SubtitleStreamIndex: ").Append(SubtitleStreamIndex).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlaybackInfoDto)obj);
        }

        /// <summary>
        /// Returns true if PlaybackInfoDto instances are equal
        /// </summary>
        /// <param name="other">Instance of PlaybackInfoDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaybackInfoDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowAudioStreamCopy == other.AllowAudioStreamCopy ||
                    AllowAudioStreamCopy != null &&
                    AllowAudioStreamCopy.Equals(other.AllowAudioStreamCopy)
                ) && 
                (
                    AllowVideoStreamCopy == other.AllowVideoStreamCopy ||
                    AllowVideoStreamCopy != null &&
                    AllowVideoStreamCopy.Equals(other.AllowVideoStreamCopy)
                ) && 
                (
                    AudioStreamIndex == other.AudioStreamIndex ||
                    AudioStreamIndex != null &&
                    AudioStreamIndex.Equals(other.AudioStreamIndex)
                ) && 
                (
                    AutoOpenLiveStream == other.AutoOpenLiveStream ||
                    AutoOpenLiveStream != null &&
                    AutoOpenLiveStream.Equals(other.AutoOpenLiveStream)
                ) && 
                (
                    DeviceProfile == other.DeviceProfile ||
                    DeviceProfile != null &&
                    DeviceProfile.Equals(other.DeviceProfile)
                ) && 
                (
                    EnableDirectPlay == other.EnableDirectPlay ||
                    EnableDirectPlay != null &&
                    EnableDirectPlay.Equals(other.EnableDirectPlay)
                ) && 
                (
                    EnableDirectStream == other.EnableDirectStream ||
                    EnableDirectStream != null &&
                    EnableDirectStream.Equals(other.EnableDirectStream)
                ) && 
                (
                    EnableTranscoding == other.EnableTranscoding ||
                    EnableTranscoding != null &&
                    EnableTranscoding.Equals(other.EnableTranscoding)
                ) && 
                (
                    LiveStreamId == other.LiveStreamId ||
                    LiveStreamId != null &&
                    LiveStreamId.Equals(other.LiveStreamId)
                ) && 
                (
                    MaxAudioChannels == other.MaxAudioChannels ||
                    MaxAudioChannels != null &&
                    MaxAudioChannels.Equals(other.MaxAudioChannels)
                ) && 
                (
                    MaxStreamingBitrate == other.MaxStreamingBitrate ||
                    MaxStreamingBitrate != null &&
                    MaxStreamingBitrate.Equals(other.MaxStreamingBitrate)
                ) && 
                (
                    MediaSourceId == other.MediaSourceId ||
                    MediaSourceId != null &&
                    MediaSourceId.Equals(other.MediaSourceId)
                ) && 
                (
                    StartTimeTicks == other.StartTimeTicks ||
                    StartTimeTicks != null &&
                    StartTimeTicks.Equals(other.StartTimeTicks)
                ) && 
                (
                    SubtitleStreamIndex == other.SubtitleStreamIndex ||
                    SubtitleStreamIndex != null &&
                    SubtitleStreamIndex.Equals(other.SubtitleStreamIndex)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowAudioStreamCopy != null)
                    hashCode = hashCode * 59 + AllowAudioStreamCopy.GetHashCode();
                    if (AllowVideoStreamCopy != null)
                    hashCode = hashCode * 59 + AllowVideoStreamCopy.GetHashCode();
                    if (AudioStreamIndex != null)
                    hashCode = hashCode * 59 + AudioStreamIndex.GetHashCode();
                    if (AutoOpenLiveStream != null)
                    hashCode = hashCode * 59 + AutoOpenLiveStream.GetHashCode();
                    if (DeviceProfile != null)
                    hashCode = hashCode * 59 + DeviceProfile.GetHashCode();
                    if (EnableDirectPlay != null)
                    hashCode = hashCode * 59 + EnableDirectPlay.GetHashCode();
                    if (EnableDirectStream != null)
                    hashCode = hashCode * 59 + EnableDirectStream.GetHashCode();
                    if (EnableTranscoding != null)
                    hashCode = hashCode * 59 + EnableTranscoding.GetHashCode();
                    if (LiveStreamId != null)
                    hashCode = hashCode * 59 + LiveStreamId.GetHashCode();
                    if (MaxAudioChannels != null)
                    hashCode = hashCode * 59 + MaxAudioChannels.GetHashCode();
                    if (MaxStreamingBitrate != null)
                    hashCode = hashCode * 59 + MaxStreamingBitrate.GetHashCode();
                    if (MediaSourceId != null)
                    hashCode = hashCode * 59 + MediaSourceId.GetHashCode();
                    if (StartTimeTicks != null)
                    hashCode = hashCode * 59 + StartTimeTicks.GetHashCode();
                    if (SubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + SubtitleStreamIndex.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlaybackInfoDto left, PlaybackInfoDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlaybackInfoDto left, PlaybackInfoDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
