/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeviceIdentification : IEquatable<DeviceIdentification>
    {
        /// <summary>
        /// Gets or sets the name of the friendly.
        /// </summary>
        /// <value>Gets or sets the name of the friendly.</value>
        [DataMember(Name="FriendlyName", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// Gets or sets the headers.
        /// </summary>
        /// <value>Gets or sets the headers.</value>
        [DataMember(Name="Headers", EmitDefaultValue=true)]
        public List<HttpHeaderInfo> Headers { get; set; }

        /// <summary>
        /// Gets or sets the manufacturer.
        /// </summary>
        /// <value>Gets or sets the manufacturer.</value>
        [DataMember(Name="Manufacturer", EmitDefaultValue=true)]
        public string Manufacturer { get; set; }

        /// <summary>
        /// Gets or sets the manufacturer URL.
        /// </summary>
        /// <value>Gets or sets the manufacturer URL.</value>
        [DataMember(Name="ManufacturerUrl", EmitDefaultValue=true)]
        public string ManufacturerUrl { get; set; }

        /// <summary>
        /// Gets or sets the model description.
        /// </summary>
        /// <value>Gets or sets the model description.</value>
        [DataMember(Name="ModelDescription", EmitDefaultValue=true)]
        public string ModelDescription { get; set; }

        /// <summary>
        /// Gets or sets the name of the model.
        /// </summary>
        /// <value>Gets or sets the name of the model.</value>
        [DataMember(Name="ModelName", EmitDefaultValue=true)]
        public string ModelName { get; set; }

        /// <summary>
        /// Gets or sets the model number.
        /// </summary>
        /// <value>Gets or sets the model number.</value>
        [DataMember(Name="ModelNumber", EmitDefaultValue=true)]
        public string ModelNumber { get; set; }

        /// <summary>
        /// Gets or sets the model URL.
        /// </summary>
        /// <value>Gets or sets the model URL.</value>
        [DataMember(Name="ModelUrl", EmitDefaultValue=true)]
        public string ModelUrl { get; set; }

        /// <summary>
        /// Gets or sets the serial number.
        /// </summary>
        /// <value>Gets or sets the serial number.</value>
        [DataMember(Name="SerialNumber", EmitDefaultValue=true)]
        public string SerialNumber { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceIdentification {\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Headers: ").Append(Headers).Append("\n");
            sb.Append("  Manufacturer: ").Append(Manufacturer).Append("\n");
            sb.Append("  ManufacturerUrl: ").Append(ManufacturerUrl).Append("\n");
            sb.Append("  ModelDescription: ").Append(ModelDescription).Append("\n");
            sb.Append("  ModelName: ").Append(ModelName).Append("\n");
            sb.Append("  ModelNumber: ").Append(ModelNumber).Append("\n");
            sb.Append("  ModelUrl: ").Append(ModelUrl).Append("\n");
            sb.Append("  SerialNumber: ").Append(SerialNumber).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeviceIdentification)obj);
        }

        /// <summary>
        /// Returns true if DeviceIdentification instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceIdentification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceIdentification other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FriendlyName == other.FriendlyName ||
                    FriendlyName != null &&
                    FriendlyName.Equals(other.FriendlyName)
                ) && 
                (
                    Headers == other.Headers ||
                    Headers != null &&
                    other.Headers != null &&
                    Headers.SequenceEqual(other.Headers)
                ) && 
                (
                    Manufacturer == other.Manufacturer ||
                    Manufacturer != null &&
                    Manufacturer.Equals(other.Manufacturer)
                ) && 
                (
                    ManufacturerUrl == other.ManufacturerUrl ||
                    ManufacturerUrl != null &&
                    ManufacturerUrl.Equals(other.ManufacturerUrl)
                ) && 
                (
                    ModelDescription == other.ModelDescription ||
                    ModelDescription != null &&
                    ModelDescription.Equals(other.ModelDescription)
                ) && 
                (
                    ModelName == other.ModelName ||
                    ModelName != null &&
                    ModelName.Equals(other.ModelName)
                ) && 
                (
                    ModelNumber == other.ModelNumber ||
                    ModelNumber != null &&
                    ModelNumber.Equals(other.ModelNumber)
                ) && 
                (
                    ModelUrl == other.ModelUrl ||
                    ModelUrl != null &&
                    ModelUrl.Equals(other.ModelUrl)
                ) && 
                (
                    SerialNumber == other.SerialNumber ||
                    SerialNumber != null &&
                    SerialNumber.Equals(other.SerialNumber)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FriendlyName != null)
                    hashCode = hashCode * 59 + FriendlyName.GetHashCode();
                    if (Headers != null)
                    hashCode = hashCode * 59 + Headers.GetHashCode();
                    if (Manufacturer != null)
                    hashCode = hashCode * 59 + Manufacturer.GetHashCode();
                    if (ManufacturerUrl != null)
                    hashCode = hashCode * 59 + ManufacturerUrl.GetHashCode();
                    if (ModelDescription != null)
                    hashCode = hashCode * 59 + ModelDescription.GetHashCode();
                    if (ModelName != null)
                    hashCode = hashCode * 59 + ModelName.GetHashCode();
                    if (ModelNumber != null)
                    hashCode = hashCode * 59 + ModelNumber.GetHashCode();
                    if (ModelUrl != null)
                    hashCode = hashCode * 59 + ModelUrl.GetHashCode();
                    if (SerialNumber != null)
                    hashCode = hashCode * 59 + SerialNumber.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeviceIdentification left, DeviceIdentification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeviceIdentification left, DeviceIdentification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
