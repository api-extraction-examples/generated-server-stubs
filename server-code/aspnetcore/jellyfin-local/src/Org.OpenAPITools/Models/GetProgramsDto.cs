/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Get programs dto.
    /// </summary>
    [DataContract]
    public partial class GetProgramsDto : IEquatable<GetProgramsDto>
    {
        /// <summary>
        /// Gets or sets the channels to return guide information for.
        /// </summary>
        /// <value>Gets or sets the channels to return guide information for.</value>
        [DataMember(Name="ChannelIds", EmitDefaultValue=true)]
        public List<Guid> ChannelIds { get; set; }

        /// <summary>
        /// Gets or sets the image types to include in the output.  Optional.
        /// </summary>
        /// <value>Gets or sets the image types to include in the output.  Optional.</value>
        [DataMember(Name="EnableImageTypes", EmitDefaultValue=true)]
        public List<ImageType> EnableImageTypes { get; set; }

        /// <summary>
        /// Gets or sets include image information in output.  Optional.
        /// </summary>
        /// <value>Gets or sets include image information in output.  Optional.</value>
        [DataMember(Name="EnableImages", EmitDefaultValue=true)]
        public bool? EnableImages { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether retrieve total record count.
        /// </summary>
        /// <value>Gets or sets a value indicating whether retrieve total record count.</value>
        [DataMember(Name="EnableTotalRecordCount", EmitDefaultValue=true)]
        public bool EnableTotalRecordCount { get; set; }

        /// <summary>
        /// Gets or sets include user data.  Optional.
        /// </summary>
        /// <value>Gets or sets include user data.  Optional.</value>
        [DataMember(Name="EnableUserData", EmitDefaultValue=true)]
        public bool? EnableUserData { get; set; }

        /// <summary>
        /// Gets or sets specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.  Optional.
        /// </summary>
        /// <value>Gets or sets specify additional fields of information to return in the output. This allows multiple, comma delimited. Options: Budget, Chapters, DateCreated, Genres, HomePageUrl, IndexOptions, MediaStreams, Overview, ParentId, Path, People, ProviderIds, PrimaryImageAspectRatio, Revenue, SortName, Studios, Taglines.  Optional.</value>
        [DataMember(Name="Fields", EmitDefaultValue=true)]
        public List<ItemFields> Fields { get; set; }

        /// <summary>
        /// Gets or sets the genre ids to return guide information for.
        /// </summary>
        /// <value>Gets or sets the genre ids to return guide information for.</value>
        [DataMember(Name="GenreIds", EmitDefaultValue=true)]
        public List<Guid> GenreIds { get; set; }

        /// <summary>
        /// Gets or sets the genres to return guide information for.
        /// </summary>
        /// <value>Gets or sets the genres to return guide information for.</value>
        [DataMember(Name="Genres", EmitDefaultValue=true)]
        public List<string> Genres { get; set; }

        /// <summary>
        /// Gets or sets filter by programs that have completed airing, or not.  Optional.
        /// </summary>
        /// <value>Gets or sets filter by programs that have completed airing, or not.  Optional.</value>
        [DataMember(Name="HasAired", EmitDefaultValue=true)]
        public bool? HasAired { get; set; }

        /// <summary>
        /// Gets or sets the max number of images to return, per image type.  Optional.
        /// </summary>
        /// <value>Gets or sets the max number of images to return, per image type.  Optional.</value>
        [DataMember(Name="ImageTypeLimit", EmitDefaultValue=true)]
        public int? ImageTypeLimit { get; set; }

        /// <summary>
        /// Gets or sets filter by programs that are currently airing, or not.  Optional.
        /// </summary>
        /// <value>Gets or sets filter by programs that are currently airing, or not.  Optional.</value>
        [DataMember(Name="IsAiring", EmitDefaultValue=true)]
        public bool? IsAiring { get; set; }

        /// <summary>
        /// Gets or sets filter for kids.  Optional.
        /// </summary>
        /// <value>Gets or sets filter for kids.  Optional.</value>
        [DataMember(Name="IsKids", EmitDefaultValue=true)]
        public bool? IsKids { get; set; }

        /// <summary>
        /// Gets or sets filter for movies.  Optional.
        /// </summary>
        /// <value>Gets or sets filter for movies.  Optional.</value>
        [DataMember(Name="IsMovie", EmitDefaultValue=true)]
        public bool? IsMovie { get; set; }

        /// <summary>
        /// Gets or sets filter for news.  Optional.
        /// </summary>
        /// <value>Gets or sets filter for news.  Optional.</value>
        [DataMember(Name="IsNews", EmitDefaultValue=true)]
        public bool? IsNews { get; set; }

        /// <summary>
        /// Gets or sets filter for series.  Optional.
        /// </summary>
        /// <value>Gets or sets filter for series.  Optional.</value>
        [DataMember(Name="IsSeries", EmitDefaultValue=true)]
        public bool? IsSeries { get; set; }

        /// <summary>
        /// Gets or sets filter for sports.  Optional.
        /// </summary>
        /// <value>Gets or sets filter for sports.  Optional.</value>
        [DataMember(Name="IsSports", EmitDefaultValue=true)]
        public bool? IsSports { get; set; }

        /// <summary>
        /// Gets or sets filter by library series id.  Optional.
        /// </summary>
        /// <value>Gets or sets filter by library series id.  Optional.</value>
        [DataMember(Name="LibrarySeriesId", EmitDefaultValue=false)]
        public Guid LibrarySeriesId { get; set; }

        /// <summary>
        /// Gets or sets the maximum number of records to return.  Optional.
        /// </summary>
        /// <value>Gets or sets the maximum number of records to return.  Optional.</value>
        [DataMember(Name="Limit", EmitDefaultValue=true)]
        public int? Limit { get; set; }

        /// <summary>
        /// Gets or sets the maximum premiere end date.  Optional.
        /// </summary>
        /// <value>Gets or sets the maximum premiere end date.  Optional.</value>
        [DataMember(Name="MaxEndDate", EmitDefaultValue=true)]
        public DateTime? MaxEndDate { get; set; }

        /// <summary>
        /// Gets or sets the maximum premiere start date.  Optional.
        /// </summary>
        /// <value>Gets or sets the maximum premiere start date.  Optional.</value>
        [DataMember(Name="MaxStartDate", EmitDefaultValue=true)]
        public DateTime? MaxStartDate { get; set; }

        /// <summary>
        /// Gets or sets the minimum premiere end date.  Optional.
        /// </summary>
        /// <value>Gets or sets the minimum premiere end date.  Optional.</value>
        [DataMember(Name="MinEndDate", EmitDefaultValue=true)]
        public DateTime? MinEndDate { get; set; }

        /// <summary>
        /// Gets or sets the minimum premiere start date.  Optional.
        /// </summary>
        /// <value>Gets or sets the minimum premiere start date.  Optional.</value>
        [DataMember(Name="MinStartDate", EmitDefaultValue=true)]
        public DateTime? MinStartDate { get; set; }

        /// <summary>
        /// Gets or sets filter by series timer id.  Optional.
        /// </summary>
        /// <value>Gets or sets filter by series timer id.  Optional.</value>
        [DataMember(Name="SeriesTimerId", EmitDefaultValue=true)]
        public string SeriesTimerId { get; set; }

        /// <summary>
        /// Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.  Optional.
        /// </summary>
        /// <value>Gets or sets specify one or more sort orders, comma delimited. Options: Name, StartDate.  Optional.</value>
        [DataMember(Name="SortBy", EmitDefaultValue=true)]
        public string SortBy { get; set; }

        /// <summary>
        /// Gets or sets sort Order - Ascending,Descending.
        /// </summary>
        /// <value>Gets or sets sort Order - Ascending,Descending.</value>
        [DataMember(Name="SortOrder", EmitDefaultValue=true)]
        public string SortOrder { get; set; }

        /// <summary>
        /// Gets or sets the record index to start at. All items with a lower index will be dropped from the results.  Optional.
        /// </summary>
        /// <value>Gets or sets the record index to start at. All items with a lower index will be dropped from the results.  Optional.</value>
        [DataMember(Name="StartIndex", EmitDefaultValue=true)]
        public int? StartIndex { get; set; }

        /// <summary>
        /// Gets or sets optional. Filter by user id.
        /// </summary>
        /// <value>Gets or sets optional. Filter by user id.</value>
        [DataMember(Name="UserId", EmitDefaultValue=false)]
        public Guid UserId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetProgramsDto {\n");
            sb.Append("  ChannelIds: ").Append(ChannelIds).Append("\n");
            sb.Append("  EnableImageTypes: ").Append(EnableImageTypes).Append("\n");
            sb.Append("  EnableImages: ").Append(EnableImages).Append("\n");
            sb.Append("  EnableTotalRecordCount: ").Append(EnableTotalRecordCount).Append("\n");
            sb.Append("  EnableUserData: ").Append(EnableUserData).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  GenreIds: ").Append(GenreIds).Append("\n");
            sb.Append("  Genres: ").Append(Genres).Append("\n");
            sb.Append("  HasAired: ").Append(HasAired).Append("\n");
            sb.Append("  ImageTypeLimit: ").Append(ImageTypeLimit).Append("\n");
            sb.Append("  IsAiring: ").Append(IsAiring).Append("\n");
            sb.Append("  IsKids: ").Append(IsKids).Append("\n");
            sb.Append("  IsMovie: ").Append(IsMovie).Append("\n");
            sb.Append("  IsNews: ").Append(IsNews).Append("\n");
            sb.Append("  IsSeries: ").Append(IsSeries).Append("\n");
            sb.Append("  IsSports: ").Append(IsSports).Append("\n");
            sb.Append("  LibrarySeriesId: ").Append(LibrarySeriesId).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  MaxEndDate: ").Append(MaxEndDate).Append("\n");
            sb.Append("  MaxStartDate: ").Append(MaxStartDate).Append("\n");
            sb.Append("  MinEndDate: ").Append(MinEndDate).Append("\n");
            sb.Append("  MinStartDate: ").Append(MinStartDate).Append("\n");
            sb.Append("  SeriesTimerId: ").Append(SeriesTimerId).Append("\n");
            sb.Append("  SortBy: ").Append(SortBy).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetProgramsDto)obj);
        }

        /// <summary>
        /// Returns true if GetProgramsDto instances are equal
        /// </summary>
        /// <param name="other">Instance of GetProgramsDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetProgramsDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ChannelIds == other.ChannelIds ||
                    ChannelIds != null &&
                    other.ChannelIds != null &&
                    ChannelIds.SequenceEqual(other.ChannelIds)
                ) && 
                (
                    EnableImageTypes == other.EnableImageTypes ||
                    EnableImageTypes != null &&
                    other.EnableImageTypes != null &&
                    EnableImageTypes.SequenceEqual(other.EnableImageTypes)
                ) && 
                (
                    EnableImages == other.EnableImages ||
                    EnableImages != null &&
                    EnableImages.Equals(other.EnableImages)
                ) && 
                (
                    EnableTotalRecordCount == other.EnableTotalRecordCount ||
                    
                    EnableTotalRecordCount.Equals(other.EnableTotalRecordCount)
                ) && 
                (
                    EnableUserData == other.EnableUserData ||
                    EnableUserData != null &&
                    EnableUserData.Equals(other.EnableUserData)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    GenreIds == other.GenreIds ||
                    GenreIds != null &&
                    other.GenreIds != null &&
                    GenreIds.SequenceEqual(other.GenreIds)
                ) && 
                (
                    Genres == other.Genres ||
                    Genres != null &&
                    other.Genres != null &&
                    Genres.SequenceEqual(other.Genres)
                ) && 
                (
                    HasAired == other.HasAired ||
                    HasAired != null &&
                    HasAired.Equals(other.HasAired)
                ) && 
                (
                    ImageTypeLimit == other.ImageTypeLimit ||
                    ImageTypeLimit != null &&
                    ImageTypeLimit.Equals(other.ImageTypeLimit)
                ) && 
                (
                    IsAiring == other.IsAiring ||
                    IsAiring != null &&
                    IsAiring.Equals(other.IsAiring)
                ) && 
                (
                    IsKids == other.IsKids ||
                    IsKids != null &&
                    IsKids.Equals(other.IsKids)
                ) && 
                (
                    IsMovie == other.IsMovie ||
                    IsMovie != null &&
                    IsMovie.Equals(other.IsMovie)
                ) && 
                (
                    IsNews == other.IsNews ||
                    IsNews != null &&
                    IsNews.Equals(other.IsNews)
                ) && 
                (
                    IsSeries == other.IsSeries ||
                    IsSeries != null &&
                    IsSeries.Equals(other.IsSeries)
                ) && 
                (
                    IsSports == other.IsSports ||
                    IsSports != null &&
                    IsSports.Equals(other.IsSports)
                ) && 
                (
                    LibrarySeriesId == other.LibrarySeriesId ||
                    LibrarySeriesId != null &&
                    LibrarySeriesId.Equals(other.LibrarySeriesId)
                ) && 
                (
                    Limit == other.Limit ||
                    Limit != null &&
                    Limit.Equals(other.Limit)
                ) && 
                (
                    MaxEndDate == other.MaxEndDate ||
                    MaxEndDate != null &&
                    MaxEndDate.Equals(other.MaxEndDate)
                ) && 
                (
                    MaxStartDate == other.MaxStartDate ||
                    MaxStartDate != null &&
                    MaxStartDate.Equals(other.MaxStartDate)
                ) && 
                (
                    MinEndDate == other.MinEndDate ||
                    MinEndDate != null &&
                    MinEndDate.Equals(other.MinEndDate)
                ) && 
                (
                    MinStartDate == other.MinStartDate ||
                    MinStartDate != null &&
                    MinStartDate.Equals(other.MinStartDate)
                ) && 
                (
                    SeriesTimerId == other.SeriesTimerId ||
                    SeriesTimerId != null &&
                    SeriesTimerId.Equals(other.SeriesTimerId)
                ) && 
                (
                    SortBy == other.SortBy ||
                    SortBy != null &&
                    SortBy.Equals(other.SortBy)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    SortOrder != null &&
                    SortOrder.Equals(other.SortOrder)
                ) && 
                (
                    StartIndex == other.StartIndex ||
                    StartIndex != null &&
                    StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    UserId == other.UserId ||
                    UserId != null &&
                    UserId.Equals(other.UserId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ChannelIds != null)
                    hashCode = hashCode * 59 + ChannelIds.GetHashCode();
                    if (EnableImageTypes != null)
                    hashCode = hashCode * 59 + EnableImageTypes.GetHashCode();
                    if (EnableImages != null)
                    hashCode = hashCode * 59 + EnableImages.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnableTotalRecordCount.GetHashCode();
                    if (EnableUserData != null)
                    hashCode = hashCode * 59 + EnableUserData.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (GenreIds != null)
                    hashCode = hashCode * 59 + GenreIds.GetHashCode();
                    if (Genres != null)
                    hashCode = hashCode * 59 + Genres.GetHashCode();
                    if (HasAired != null)
                    hashCode = hashCode * 59 + HasAired.GetHashCode();
                    if (ImageTypeLimit != null)
                    hashCode = hashCode * 59 + ImageTypeLimit.GetHashCode();
                    if (IsAiring != null)
                    hashCode = hashCode * 59 + IsAiring.GetHashCode();
                    if (IsKids != null)
                    hashCode = hashCode * 59 + IsKids.GetHashCode();
                    if (IsMovie != null)
                    hashCode = hashCode * 59 + IsMovie.GetHashCode();
                    if (IsNews != null)
                    hashCode = hashCode * 59 + IsNews.GetHashCode();
                    if (IsSeries != null)
                    hashCode = hashCode * 59 + IsSeries.GetHashCode();
                    if (IsSports != null)
                    hashCode = hashCode * 59 + IsSports.GetHashCode();
                    if (LibrarySeriesId != null)
                    hashCode = hashCode * 59 + LibrarySeriesId.GetHashCode();
                    if (Limit != null)
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    if (MaxEndDate != null)
                    hashCode = hashCode * 59 + MaxEndDate.GetHashCode();
                    if (MaxStartDate != null)
                    hashCode = hashCode * 59 + MaxStartDate.GetHashCode();
                    if (MinEndDate != null)
                    hashCode = hashCode * 59 + MinEndDate.GetHashCode();
                    if (MinStartDate != null)
                    hashCode = hashCode * 59 + MinStartDate.GetHashCode();
                    if (SeriesTimerId != null)
                    hashCode = hashCode * 59 + SeriesTimerId.GetHashCode();
                    if (SortBy != null)
                    hashCode = hashCode * 59 + SortBy.GetHashCode();
                    if (SortOrder != null)
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                    if (StartIndex != null)
                    hashCode = hashCode * 59 + StartIndex.GetHashCode();
                    if (UserId != null)
                    hashCode = hashCode * 59 + UserId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetProgramsDto left, GetProgramsDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetProgramsDto left, GetProgramsDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
