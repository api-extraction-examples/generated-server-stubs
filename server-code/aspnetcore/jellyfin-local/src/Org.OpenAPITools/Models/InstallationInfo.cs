/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class InstallationInfo.
    /// </summary>
    [DataContract]
    public partial class InstallationInfo : IEquatable<InstallationInfo>
    {
        /// <summary>
        /// Gets or sets the changelog for this version.
        /// </summary>
        /// <value>Gets or sets the changelog for this version.</value>
        [DataMember(Name="Changelog", EmitDefaultValue=true)]
        public string Changelog { get; set; }

        /// <summary>
        /// Gets or sets a checksum for the binary.
        /// </summary>
        /// <value>Gets or sets a checksum for the binary.</value>
        [DataMember(Name="Checksum", EmitDefaultValue=true)]
        public string Checksum { get; set; }

        /// <summary>
        /// Gets or sets the Id.
        /// </summary>
        /// <value>Gets or sets the Id.</value>
        [DataMember(Name="Guid", EmitDefaultValue=false)]
        public Guid Guid { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the source URL.
        /// </summary>
        /// <value>Gets or sets the source URL.</value>
        [DataMember(Name="SourceUrl", EmitDefaultValue=true)]
        public string SourceUrl { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="Version", EmitDefaultValue=false)]
        public ModelVersion VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InstallationInfo {\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  Checksum: ").Append(Checksum).Append("\n");
            sb.Append("  Guid: ").Append(Guid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SourceUrl: ").Append(SourceUrl).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InstallationInfo)obj);
        }

        /// <summary>
        /// Returns true if InstallationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of InstallationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InstallationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Changelog == other.Changelog ||
                    Changelog != null &&
                    Changelog.Equals(other.Changelog)
                ) && 
                (
                    Checksum == other.Checksum ||
                    Checksum != null &&
                    Checksum.Equals(other.Checksum)
                ) && 
                (
                    Guid == other.Guid ||
                    Guid != null &&
                    Guid.Equals(other.Guid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SourceUrl == other.SourceUrl ||
                    SourceUrl != null &&
                    SourceUrl.Equals(other.SourceUrl)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Changelog != null)
                    hashCode = hashCode * 59 + Changelog.GetHashCode();
                    if (Checksum != null)
                    hashCode = hashCode * 59 + Checksum.GetHashCode();
                    if (Guid != null)
                    hashCode = hashCode * 59 + Guid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (SourceUrl != null)
                    hashCode = hashCode * 59 + SourceUrl.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InstallationInfo left, InstallationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InstallationInfo left, InstallationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
