/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class TaskExecutionInfo.
    /// </summary>
    [DataContract]
    public partial class TaskResult : IEquatable<TaskResult>
    {
        /// <summary>
        /// Gets or sets the end time UTC.
        /// </summary>
        /// <value>Gets or sets the end time UTC.</value>
        [DataMember(Name="EndTimeUtc", EmitDefaultValue=false)]
        public DateTime EndTimeUtc { get; set; }

        /// <summary>
        /// Gets or sets the error message.
        /// </summary>
        /// <value>Gets or sets the error message.</value>
        [DataMember(Name="ErrorMessage", EmitDefaultValue=true)]
        public string ErrorMessage { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        /// <value>Gets or sets the key.</value>
        [DataMember(Name="Key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the long error message.
        /// </summary>
        /// <value>Gets or sets the long error message.</value>
        [DataMember(Name="LongErrorMessage", EmitDefaultValue=true)]
        public string LongErrorMessage { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the start time UTC.
        /// </summary>
        /// <value>Gets or sets the start time UTC.</value>
        [DataMember(Name="StartTimeUtc", EmitDefaultValue=false)]
        public DateTime StartTimeUtc { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public TaskCompletionStatus Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskResult {\n");
            sb.Append("  EndTimeUtc: ").Append(EndTimeUtc).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LongErrorMessage: ").Append(LongErrorMessage).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  StartTimeUtc: ").Append(StartTimeUtc).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskResult)obj);
        }

        /// <summary>
        /// Returns true if TaskResult instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndTimeUtc == other.EndTimeUtc ||
                    EndTimeUtc != null &&
                    EndTimeUtc.Equals(other.EndTimeUtc)
                ) && 
                (
                    ErrorMessage == other.ErrorMessage ||
                    ErrorMessage != null &&
                    ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    LongErrorMessage == other.LongErrorMessage ||
                    LongErrorMessage != null &&
                    LongErrorMessage.Equals(other.LongErrorMessage)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    StartTimeUtc == other.StartTimeUtc ||
                    StartTimeUtc != null &&
                    StartTimeUtc.Equals(other.StartTimeUtc)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndTimeUtc != null)
                    hashCode = hashCode * 59 + EndTimeUtc.GetHashCode();
                    if (ErrorMessage != null)
                    hashCode = hashCode * 59 + ErrorMessage.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (LongErrorMessage != null)
                    hashCode = hashCode * 59 + LongErrorMessage.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (StartTimeUtc != null)
                    hashCode = hashCode * 59 + StartTimeUtc.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskResult left, TaskResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskResult left, TaskResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
