/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class PlaybackStopInfo.
    /// </summary>
    [DataContract]
    public partial class PlaybackStopInfo : IEquatable<PlaybackStopInfo>
    {
        /// <summary>
        /// Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this MediaBrowser.Model.Session.PlaybackStopInfo is failed.</value>
        [DataMember(Name="Failed", EmitDefaultValue=true)]
        public bool Failed { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="Item", EmitDefaultValue=false)]
        public BaseItemDto Item { get; set; }

        /// <summary>
        /// Gets or sets the item identifier.
        /// </summary>
        /// <value>Gets or sets the item identifier.</value>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public Guid ItemId { get; set; }

        /// <summary>
        /// Gets or sets the live stream identifier.
        /// </summary>
        /// <value>Gets or sets the live stream identifier.</value>
        [DataMember(Name="LiveStreamId", EmitDefaultValue=true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or sets the media version identifier.
        /// </summary>
        /// <value>Gets or sets the media version identifier.</value>
        [DataMember(Name="MediaSourceId", EmitDefaultValue=true)]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// Gets or Sets NextMediaType
        /// </summary>
        [DataMember(Name="NextMediaType", EmitDefaultValue=true)]
        public string NextMediaType { get; set; }

        /// <summary>
        /// Gets or Sets NowPlayingQueue
        /// </summary>
        [DataMember(Name="NowPlayingQueue", EmitDefaultValue=true)]
        public List<QueueItem> NowPlayingQueue { get; set; }

        /// <summary>
        /// Gets or sets the play session identifier.
        /// </summary>
        /// <value>Gets or sets the play session identifier.</value>
        [DataMember(Name="PlaySessionId", EmitDefaultValue=true)]
        public string PlaySessionId { get; set; }

        /// <summary>
        /// Gets or Sets PlaylistItemId
        /// </summary>
        [DataMember(Name="PlaylistItemId", EmitDefaultValue=true)]
        public string PlaylistItemId { get; set; }

        /// <summary>
        /// Gets or sets the position ticks.
        /// </summary>
        /// <value>Gets or sets the position ticks.</value>
        [DataMember(Name="PositionTicks", EmitDefaultValue=true)]
        public long? PositionTicks { get; set; }

        /// <summary>
        /// Gets or sets the session id.
        /// </summary>
        /// <value>Gets or sets the session id.</value>
        [DataMember(Name="SessionId", EmitDefaultValue=true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaybackStopInfo {\n");
            sb.Append("  Failed: ").Append(Failed).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  MediaSourceId: ").Append(MediaSourceId).Append("\n");
            sb.Append("  NextMediaType: ").Append(NextMediaType).Append("\n");
            sb.Append("  NowPlayingQueue: ").Append(NowPlayingQueue).Append("\n");
            sb.Append("  PlaySessionId: ").Append(PlaySessionId).Append("\n");
            sb.Append("  PlaylistItemId: ").Append(PlaylistItemId).Append("\n");
            sb.Append("  PositionTicks: ").Append(PositionTicks).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlaybackStopInfo)obj);
        }

        /// <summary>
        /// Returns true if PlaybackStopInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PlaybackStopInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaybackStopInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Failed == other.Failed ||
                    
                    Failed.Equals(other.Failed)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.Equals(other.Item)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    LiveStreamId == other.LiveStreamId ||
                    LiveStreamId != null &&
                    LiveStreamId.Equals(other.LiveStreamId)
                ) && 
                (
                    MediaSourceId == other.MediaSourceId ||
                    MediaSourceId != null &&
                    MediaSourceId.Equals(other.MediaSourceId)
                ) && 
                (
                    NextMediaType == other.NextMediaType ||
                    NextMediaType != null &&
                    NextMediaType.Equals(other.NextMediaType)
                ) && 
                (
                    NowPlayingQueue == other.NowPlayingQueue ||
                    NowPlayingQueue != null &&
                    other.NowPlayingQueue != null &&
                    NowPlayingQueue.SequenceEqual(other.NowPlayingQueue)
                ) && 
                (
                    PlaySessionId == other.PlaySessionId ||
                    PlaySessionId != null &&
                    PlaySessionId.Equals(other.PlaySessionId)
                ) && 
                (
                    PlaylistItemId == other.PlaylistItemId ||
                    PlaylistItemId != null &&
                    PlaylistItemId.Equals(other.PlaylistItemId)
                ) && 
                (
                    PositionTicks == other.PositionTicks ||
                    PositionTicks != null &&
                    PositionTicks.Equals(other.PositionTicks)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Failed.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (LiveStreamId != null)
                    hashCode = hashCode * 59 + LiveStreamId.GetHashCode();
                    if (MediaSourceId != null)
                    hashCode = hashCode * 59 + MediaSourceId.GetHashCode();
                    if (NextMediaType != null)
                    hashCode = hashCode * 59 + NextMediaType.GetHashCode();
                    if (NowPlayingQueue != null)
                    hashCode = hashCode * 59 + NowPlayingQueue.GetHashCode();
                    if (PlaySessionId != null)
                    hashCode = hashCode * 59 + PlaySessionId.GetHashCode();
                    if (PlaylistItemId != null)
                    hashCode = hashCode * 59 + PlaylistItemId.GetHashCode();
                    if (PositionTicks != null)
                    hashCode = hashCode * 59 + PositionTicks.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlaybackStopInfo left, PlaybackStopInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlaybackStopInfo left, PlaybackStopInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
