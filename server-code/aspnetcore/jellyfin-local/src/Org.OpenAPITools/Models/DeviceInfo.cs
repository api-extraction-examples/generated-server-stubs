/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeviceInfo : IEquatable<DeviceInfo>
    {
        /// <summary>
        /// Gets or sets the name of the application.
        /// </summary>
        /// <value>Gets or sets the name of the application.</value>
        [DataMember(Name="AppName", EmitDefaultValue=true)]
        public string AppName { get; set; }

        /// <summary>
        /// Gets or sets the application version.
        /// </summary>
        /// <value>Gets or sets the application version.</value>
        [DataMember(Name="AppVersion", EmitDefaultValue=true)]
        public string AppVersion { get; set; }

        /// <summary>
        /// Gets or Sets Capabilities
        /// </summary>
        [DataMember(Name="Capabilities", EmitDefaultValue=false)]
        public ClientCapabilities Capabilities { get; set; }

        /// <summary>
        /// Gets or sets the date last modified.
        /// </summary>
        /// <value>Gets or sets the date last modified.</value>
        [DataMember(Name="DateLastActivity", EmitDefaultValue=false)]
        public DateTime DateLastActivity { get; set; }

        /// <summary>
        /// Gets or Sets IconUrl
        /// </summary>
        [DataMember(Name="IconUrl", EmitDefaultValue=true)]
        public string IconUrl { get; set; }

        /// <summary>
        /// Gets or sets the identifier.
        /// </summary>
        /// <value>Gets or sets the identifier.</value>
        [DataMember(Name="Id", EmitDefaultValue=true)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or sets the last user identifier.
        /// </summary>
        /// <value>Gets or sets the last user identifier.</value>
        [DataMember(Name="LastUserId", EmitDefaultValue=false)]
        public Guid LastUserId { get; set; }

        /// <summary>
        /// Gets or sets the last name of the user.
        /// </summary>
        /// <value>Gets or sets the last name of the user.</value>
        [DataMember(Name="LastUserName", EmitDefaultValue=true)]
        public string LastUserName { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceInfo {\n");
            sb.Append("  AppName: ").Append(AppName).Append("\n");
            sb.Append("  AppVersion: ").Append(AppVersion).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  DateLastActivity: ").Append(DateLastActivity).Append("\n");
            sb.Append("  IconUrl: ").Append(IconUrl).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUserId: ").Append(LastUserId).Append("\n");
            sb.Append("  LastUserName: ").Append(LastUserName).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeviceInfo)obj);
        }

        /// <summary>
        /// Returns true if DeviceInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppName == other.AppName ||
                    AppName != null &&
                    AppName.Equals(other.AppName)
                ) && 
                (
                    AppVersion == other.AppVersion ||
                    AppVersion != null &&
                    AppVersion.Equals(other.AppVersion)
                ) && 
                (
                    Capabilities == other.Capabilities ||
                    Capabilities != null &&
                    Capabilities.Equals(other.Capabilities)
                ) && 
                (
                    DateLastActivity == other.DateLastActivity ||
                    DateLastActivity != null &&
                    DateLastActivity.Equals(other.DateLastActivity)
                ) && 
                (
                    IconUrl == other.IconUrl ||
                    IconUrl != null &&
                    IconUrl.Equals(other.IconUrl)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastUserId == other.LastUserId ||
                    LastUserId != null &&
                    LastUserId.Equals(other.LastUserId)
                ) && 
                (
                    LastUserName == other.LastUserName ||
                    LastUserName != null &&
                    LastUserName.Equals(other.LastUserName)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AppName != null)
                    hashCode = hashCode * 59 + AppName.GetHashCode();
                    if (AppVersion != null)
                    hashCode = hashCode * 59 + AppVersion.GetHashCode();
                    if (Capabilities != null)
                    hashCode = hashCode * 59 + Capabilities.GetHashCode();
                    if (DateLastActivity != null)
                    hashCode = hashCode * 59 + DateLastActivity.GetHashCode();
                    if (IconUrl != null)
                    hashCode = hashCode * 59 + IconUrl.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastUserId != null)
                    hashCode = hashCode * 59 + LastUserId.GetHashCode();
                    if (LastUserName != null)
                    hashCode = hashCode * 59 + LastUserName.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeviceInfo left, DeviceInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeviceInfo left, DeviceInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
