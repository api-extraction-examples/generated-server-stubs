/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AuthenticationInfoQueryResult : IEquatable<AuthenticationInfoQueryResult>
    {
        /// <summary>
        /// Gets or sets the items.
        /// </summary>
        /// <value>Gets or sets the items.</value>
        [DataMember(Name="Items", EmitDefaultValue=true)]
        public List<AuthenticationInfo> Items { get; set; }

        /// <summary>
        /// The index of the first record in Items.
        /// </summary>
        /// <value>The index of the first record in Items.</value>
        [DataMember(Name="StartIndex", EmitDefaultValue=true)]
        public int StartIndex { get; set; }

        /// <summary>
        /// The total number of records available.
        /// </summary>
        /// <value>The total number of records available.</value>
        [DataMember(Name="TotalRecordCount", EmitDefaultValue=true)]
        public int TotalRecordCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuthenticationInfoQueryResult {\n");
            sb.Append("  Items: ").Append(Items).Append("\n");
            sb.Append("  StartIndex: ").Append(StartIndex).Append("\n");
            sb.Append("  TotalRecordCount: ").Append(TotalRecordCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuthenticationInfoQueryResult)obj);
        }

        /// <summary>
        /// Returns true if AuthenticationInfoQueryResult instances are equal
        /// </summary>
        /// <param name="other">Instance of AuthenticationInfoQueryResult to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuthenticationInfoQueryResult other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Items == other.Items ||
                    Items != null &&
                    other.Items != null &&
                    Items.SequenceEqual(other.Items)
                ) && 
                (
                    StartIndex == other.StartIndex ||
                    
                    StartIndex.Equals(other.StartIndex)
                ) && 
                (
                    TotalRecordCount == other.TotalRecordCount ||
                    
                    TotalRecordCount.Equals(other.TotalRecordCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Items != null)
                    hashCode = hashCode * 59 + Items.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartIndex.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalRecordCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuthenticationInfoQueryResult left, AuthenticationInfoQueryResult right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuthenticationInfoQueryResult left, AuthenticationInfoQueryResult right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
