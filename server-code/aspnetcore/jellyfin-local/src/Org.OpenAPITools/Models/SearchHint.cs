/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class SearchHintResult.
    /// </summary>
    [DataContract]
    public partial class SearchHint : IEquatable<SearchHint>
    {
        /// <summary>
        /// Gets or sets the album.
        /// </summary>
        /// <value>Gets or sets the album.</value>
        [DataMember(Name="Album", EmitDefaultValue=true)]
        public string Album { get; set; }

        /// <summary>
        /// Gets or sets the album artist.
        /// </summary>
        /// <value>Gets or sets the album artist.</value>
        [DataMember(Name="AlbumArtist", EmitDefaultValue=true)]
        public string AlbumArtist { get; set; }

        /// <summary>
        /// Gets or Sets AlbumId
        /// </summary>
        [DataMember(Name="AlbumId", EmitDefaultValue=false)]
        public Guid AlbumId { get; set; }

        /// <summary>
        /// Gets or sets the artists.
        /// </summary>
        /// <value>Gets or sets the artists.</value>
        [DataMember(Name="Artists", EmitDefaultValue=true)]
        public List<string> Artists { get; set; }

        /// <summary>
        /// Gets or sets the backdrop image item identifier.
        /// </summary>
        /// <value>Gets or sets the backdrop image item identifier.</value>
        [DataMember(Name="BackdropImageItemId", EmitDefaultValue=true)]
        public string BackdropImageItemId { get; set; }

        /// <summary>
        /// Gets or sets the backdrop image tag.
        /// </summary>
        /// <value>Gets or sets the backdrop image tag.</value>
        [DataMember(Name="BackdropImageTag", EmitDefaultValue=true)]
        public string BackdropImageTag { get; set; }

        /// <summary>
        /// Gets or sets the channel identifier.
        /// </summary>
        /// <value>Gets or sets the channel identifier.</value>
        [DataMember(Name="ChannelId", EmitDefaultValue=false)]
        public Guid ChannelId { get; set; }

        /// <summary>
        /// Gets or sets the name of the channel.
        /// </summary>
        /// <value>Gets or sets the name of the channel.</value>
        [DataMember(Name="ChannelName", EmitDefaultValue=true)]
        public string ChannelName { get; set; }

        /// <summary>
        /// Gets or Sets EndDate
        /// </summary>
        [DataMember(Name="EndDate", EmitDefaultValue=true)]
        public DateTime? EndDate { get; set; }

        /// <summary>
        /// Gets or sets the episode count.
        /// </summary>
        /// <value>Gets or sets the episode count.</value>
        [DataMember(Name="EpisodeCount", EmitDefaultValue=true)]
        public int? EpisodeCount { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the index number.
        /// </summary>
        /// <value>Gets or sets the index number.</value>
        [DataMember(Name="IndexNumber", EmitDefaultValue=true)]
        public int? IndexNumber { get; set; }

        /// <summary>
        /// Gets or Sets IsFolder
        /// </summary>
        [DataMember(Name="IsFolder", EmitDefaultValue=true)]
        public bool? IsFolder { get; set; }

        /// <summary>
        /// Gets or sets the item id.
        /// </summary>
        /// <value>Gets or sets the item id.</value>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public Guid ItemId { get; set; }

        /// <summary>
        /// Gets or sets the matched term.
        /// </summary>
        /// <value>Gets or sets the matched term.</value>
        [DataMember(Name="MatchedTerm", EmitDefaultValue=true)]
        public string MatchedTerm { get; set; }

        /// <summary>
        /// Gets or sets the type of the media.
        /// </summary>
        /// <value>Gets or sets the type of the media.</value>
        [DataMember(Name="MediaType", EmitDefaultValue=true)]
        public string MediaType { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or sets the parent index number.
        /// </summary>
        /// <value>Gets or sets the parent index number.</value>
        [DataMember(Name="ParentIndexNumber", EmitDefaultValue=true)]
        public int? ParentIndexNumber { get; set; }

        /// <summary>
        /// Gets or sets the primary image aspect ratio.
        /// </summary>
        /// <value>Gets or sets the primary image aspect ratio.</value>
        [DataMember(Name="PrimaryImageAspectRatio", EmitDefaultValue=true)]
        public double? PrimaryImageAspectRatio { get; set; }

        /// <summary>
        /// Gets or sets the image tag.
        /// </summary>
        /// <value>Gets or sets the image tag.</value>
        [DataMember(Name="PrimaryImageTag", EmitDefaultValue=true)]
        public string PrimaryImageTag { get; set; }

        /// <summary>
        /// Gets or sets the production year.
        /// </summary>
        /// <value>Gets or sets the production year.</value>
        [DataMember(Name="ProductionYear", EmitDefaultValue=true)]
        public int? ProductionYear { get; set; }

        /// <summary>
        /// Gets or sets the run time ticks.
        /// </summary>
        /// <value>Gets or sets the run time ticks.</value>
        [DataMember(Name="RunTimeTicks", EmitDefaultValue=true)]
        public long? RunTimeTicks { get; set; }

        /// <summary>
        /// Gets or sets the series.
        /// </summary>
        /// <value>Gets or sets the series.</value>
        [DataMember(Name="Series", EmitDefaultValue=true)]
        public string Series { get; set; }

        /// <summary>
        /// Gets or sets the song count.
        /// </summary>
        /// <value>Gets or sets the song count.</value>
        [DataMember(Name="SongCount", EmitDefaultValue=true)]
        public int? SongCount { get; set; }

        /// <summary>
        /// Gets or Sets StartDate
        /// </summary>
        [DataMember(Name="StartDate", EmitDefaultValue=true)]
        public DateTime? StartDate { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="Status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or sets the thumb image item identifier.
        /// </summary>
        /// <value>Gets or sets the thumb image item identifier.</value>
        [DataMember(Name="ThumbImageItemId", EmitDefaultValue=true)]
        public string ThumbImageItemId { get; set; }

        /// <summary>
        /// Gets or sets the thumb image tag.
        /// </summary>
        /// <value>Gets or sets the thumb image tag.</value>
        [DataMember(Name="ThumbImageTag", EmitDefaultValue=true)]
        public string ThumbImageTag { get; set; }

        /// <summary>
        /// Gets or sets the type.
        /// </summary>
        /// <value>Gets or sets the type.</value>
        [DataMember(Name="Type", EmitDefaultValue=true)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchHint {\n");
            sb.Append("  Album: ").Append(Album).Append("\n");
            sb.Append("  AlbumArtist: ").Append(AlbumArtist).Append("\n");
            sb.Append("  AlbumId: ").Append(AlbumId).Append("\n");
            sb.Append("  Artists: ").Append(Artists).Append("\n");
            sb.Append("  BackdropImageItemId: ").Append(BackdropImageItemId).Append("\n");
            sb.Append("  BackdropImageTag: ").Append(BackdropImageTag).Append("\n");
            sb.Append("  ChannelId: ").Append(ChannelId).Append("\n");
            sb.Append("  ChannelName: ").Append(ChannelName).Append("\n");
            sb.Append("  EndDate: ").Append(EndDate).Append("\n");
            sb.Append("  EpisodeCount: ").Append(EpisodeCount).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IndexNumber: ").Append(IndexNumber).Append("\n");
            sb.Append("  IsFolder: ").Append(IsFolder).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  MatchedTerm: ").Append(MatchedTerm).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ParentIndexNumber: ").Append(ParentIndexNumber).Append("\n");
            sb.Append("  PrimaryImageAspectRatio: ").Append(PrimaryImageAspectRatio).Append("\n");
            sb.Append("  PrimaryImageTag: ").Append(PrimaryImageTag).Append("\n");
            sb.Append("  ProductionYear: ").Append(ProductionYear).Append("\n");
            sb.Append("  RunTimeTicks: ").Append(RunTimeTicks).Append("\n");
            sb.Append("  Series: ").Append(Series).Append("\n");
            sb.Append("  SongCount: ").Append(SongCount).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  ThumbImageItemId: ").Append(ThumbImageItemId).Append("\n");
            sb.Append("  ThumbImageTag: ").Append(ThumbImageTag).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SearchHint)obj);
        }

        /// <summary>
        /// Returns true if SearchHint instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchHint to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchHint other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Album == other.Album ||
                    Album != null &&
                    Album.Equals(other.Album)
                ) && 
                (
                    AlbumArtist == other.AlbumArtist ||
                    AlbumArtist != null &&
                    AlbumArtist.Equals(other.AlbumArtist)
                ) && 
                (
                    AlbumId == other.AlbumId ||
                    AlbumId != null &&
                    AlbumId.Equals(other.AlbumId)
                ) && 
                (
                    Artists == other.Artists ||
                    Artists != null &&
                    other.Artists != null &&
                    Artists.SequenceEqual(other.Artists)
                ) && 
                (
                    BackdropImageItemId == other.BackdropImageItemId ||
                    BackdropImageItemId != null &&
                    BackdropImageItemId.Equals(other.BackdropImageItemId)
                ) && 
                (
                    BackdropImageTag == other.BackdropImageTag ||
                    BackdropImageTag != null &&
                    BackdropImageTag.Equals(other.BackdropImageTag)
                ) && 
                (
                    ChannelId == other.ChannelId ||
                    ChannelId != null &&
                    ChannelId.Equals(other.ChannelId)
                ) && 
                (
                    ChannelName == other.ChannelName ||
                    ChannelName != null &&
                    ChannelName.Equals(other.ChannelName)
                ) && 
                (
                    EndDate == other.EndDate ||
                    EndDate != null &&
                    EndDate.Equals(other.EndDate)
                ) && 
                (
                    EpisodeCount == other.EpisodeCount ||
                    EpisodeCount != null &&
                    EpisodeCount.Equals(other.EpisodeCount)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IndexNumber == other.IndexNumber ||
                    IndexNumber != null &&
                    IndexNumber.Equals(other.IndexNumber)
                ) && 
                (
                    IsFolder == other.IsFolder ||
                    IsFolder != null &&
                    IsFolder.Equals(other.IsFolder)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    MatchedTerm == other.MatchedTerm ||
                    MatchedTerm != null &&
                    MatchedTerm.Equals(other.MatchedTerm)
                ) && 
                (
                    MediaType == other.MediaType ||
                    MediaType != null &&
                    MediaType.Equals(other.MediaType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ParentIndexNumber == other.ParentIndexNumber ||
                    ParentIndexNumber != null &&
                    ParentIndexNumber.Equals(other.ParentIndexNumber)
                ) && 
                (
                    PrimaryImageAspectRatio == other.PrimaryImageAspectRatio ||
                    PrimaryImageAspectRatio != null &&
                    PrimaryImageAspectRatio.Equals(other.PrimaryImageAspectRatio)
                ) && 
                (
                    PrimaryImageTag == other.PrimaryImageTag ||
                    PrimaryImageTag != null &&
                    PrimaryImageTag.Equals(other.PrimaryImageTag)
                ) && 
                (
                    ProductionYear == other.ProductionYear ||
                    ProductionYear != null &&
                    ProductionYear.Equals(other.ProductionYear)
                ) && 
                (
                    RunTimeTicks == other.RunTimeTicks ||
                    RunTimeTicks != null &&
                    RunTimeTicks.Equals(other.RunTimeTicks)
                ) && 
                (
                    Series == other.Series ||
                    Series != null &&
                    Series.Equals(other.Series)
                ) && 
                (
                    SongCount == other.SongCount ||
                    SongCount != null &&
                    SongCount.Equals(other.SongCount)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    ThumbImageItemId == other.ThumbImageItemId ||
                    ThumbImageItemId != null &&
                    ThumbImageItemId.Equals(other.ThumbImageItemId)
                ) && 
                (
                    ThumbImageTag == other.ThumbImageTag ||
                    ThumbImageTag != null &&
                    ThumbImageTag.Equals(other.ThumbImageTag)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Album != null)
                    hashCode = hashCode * 59 + Album.GetHashCode();
                    if (AlbumArtist != null)
                    hashCode = hashCode * 59 + AlbumArtist.GetHashCode();
                    if (AlbumId != null)
                    hashCode = hashCode * 59 + AlbumId.GetHashCode();
                    if (Artists != null)
                    hashCode = hashCode * 59 + Artists.GetHashCode();
                    if (BackdropImageItemId != null)
                    hashCode = hashCode * 59 + BackdropImageItemId.GetHashCode();
                    if (BackdropImageTag != null)
                    hashCode = hashCode * 59 + BackdropImageTag.GetHashCode();
                    if (ChannelId != null)
                    hashCode = hashCode * 59 + ChannelId.GetHashCode();
                    if (ChannelName != null)
                    hashCode = hashCode * 59 + ChannelName.GetHashCode();
                    if (EndDate != null)
                    hashCode = hashCode * 59 + EndDate.GetHashCode();
                    if (EpisodeCount != null)
                    hashCode = hashCode * 59 + EpisodeCount.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IndexNumber != null)
                    hashCode = hashCode * 59 + IndexNumber.GetHashCode();
                    if (IsFolder != null)
                    hashCode = hashCode * 59 + IsFolder.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (MatchedTerm != null)
                    hashCode = hashCode * 59 + MatchedTerm.GetHashCode();
                    if (MediaType != null)
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ParentIndexNumber != null)
                    hashCode = hashCode * 59 + ParentIndexNumber.GetHashCode();
                    if (PrimaryImageAspectRatio != null)
                    hashCode = hashCode * 59 + PrimaryImageAspectRatio.GetHashCode();
                    if (PrimaryImageTag != null)
                    hashCode = hashCode * 59 + PrimaryImageTag.GetHashCode();
                    if (ProductionYear != null)
                    hashCode = hashCode * 59 + ProductionYear.GetHashCode();
                    if (RunTimeTicks != null)
                    hashCode = hashCode * 59 + RunTimeTicks.GetHashCode();
                    if (Series != null)
                    hashCode = hashCode * 59 + Series.GetHashCode();
                    if (SongCount != null)
                    hashCode = hashCode * 59 + SongCount.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (ThumbImageItemId != null)
                    hashCode = hashCode * 59 + ThumbImageItemId.GetHashCode();
                    if (ThumbImageTag != null)
                    hashCode = hashCode * 59 + ThumbImageTag.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SearchHint left, SearchHint right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SearchHint left, SearchHint right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
