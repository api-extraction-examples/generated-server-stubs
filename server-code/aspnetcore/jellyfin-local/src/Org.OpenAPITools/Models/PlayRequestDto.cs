/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class PlayRequestDto.
    /// </summary>
    [DataContract]
    public partial class PlayRequestDto : IEquatable<PlayRequestDto>
    {
        /// <summary>
        /// Gets or sets the position of the playing item in the queue.
        /// </summary>
        /// <value>Gets or sets the position of the playing item in the queue.</value>
        [DataMember(Name="PlayingItemPosition", EmitDefaultValue=true)]
        public int PlayingItemPosition { get; set; }

        /// <summary>
        /// Gets or sets the playing queue.
        /// </summary>
        /// <value>Gets or sets the playing queue.</value>
        [DataMember(Name="PlayingQueue", EmitDefaultValue=true)]
        public List<Guid> PlayingQueue { get; set; }

        /// <summary>
        /// Gets or sets the start position ticks.
        /// </summary>
        /// <value>Gets or sets the start position ticks.</value>
        [DataMember(Name="StartPositionTicks", EmitDefaultValue=true)]
        public long StartPositionTicks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlayRequestDto {\n");
            sb.Append("  PlayingItemPosition: ").Append(PlayingItemPosition).Append("\n");
            sb.Append("  PlayingQueue: ").Append(PlayingQueue).Append("\n");
            sb.Append("  StartPositionTicks: ").Append(StartPositionTicks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlayRequestDto)obj);
        }

        /// <summary>
        /// Returns true if PlayRequestDto instances are equal
        /// </summary>
        /// <param name="other">Instance of PlayRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlayRequestDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PlayingItemPosition == other.PlayingItemPosition ||
                    
                    PlayingItemPosition.Equals(other.PlayingItemPosition)
                ) && 
                (
                    PlayingQueue == other.PlayingQueue ||
                    PlayingQueue != null &&
                    other.PlayingQueue != null &&
                    PlayingQueue.SequenceEqual(other.PlayingQueue)
                ) && 
                (
                    StartPositionTicks == other.StartPositionTicks ||
                    
                    StartPositionTicks.Equals(other.StartPositionTicks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + PlayingItemPosition.GetHashCode();
                    if (PlayingQueue != null)
                    hashCode = hashCode * 59 + PlayingQueue.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartPositionTicks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlayRequestDto left, PlayRequestDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlayRequestDto left, PlayRequestDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
