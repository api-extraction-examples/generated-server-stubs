/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class BaseItem.
    /// </summary>
    [DataContract]
    public partial class BaseItem : IEquatable<BaseItem>
    {
        /// <summary>
        /// Gets or Sets Container
        /// </summary>
        [DataMember(Name="Container", EmitDefaultValue=true)]
        public string Container { get; set; }

        /// <summary>
        /// Gets or Sets DateLastSaved
        /// </summary>
        [DataMember(Name="DateLastSaved", EmitDefaultValue=false)]
        public DateTime DateLastSaved { get; set; }

        /// <summary>
        /// Gets or Sets ExtraIds
        /// </summary>
        [DataMember(Name="ExtraIds", EmitDefaultValue=true)]
        public List<Guid> ExtraIds { get; set; }

        /// <summary>
        /// Gets or Sets Height
        /// </summary>
        [DataMember(Name="Height", EmitDefaultValue=true)]
        public int Height { get; set; }

        /// <summary>
        /// Gets or Sets IsHD
        /// </summary>
        [DataMember(Name="IsHD", EmitDefaultValue=true)]
        public bool IsHD { get; set; }

        /// <summary>
        /// Gets or Sets IsShortcut
        /// </summary>
        [DataMember(Name="IsShortcut", EmitDefaultValue=true)]
        public bool IsShortcut { get; set; }

        /// <summary>
        /// Gets or sets the remote trailers.
        /// </summary>
        /// <value>Gets or sets the remote trailers.</value>
        [DataMember(Name="RemoteTrailers", EmitDefaultValue=true)]
        public List<MediaUrl> RemoteTrailers { get; set; }

        /// <summary>
        /// Gets or Sets ShortcutPath
        /// </summary>
        [DataMember(Name="ShortcutPath", EmitDefaultValue=true)]
        public string ShortcutPath { get; set; }

        /// <summary>
        /// Gets or Sets Size
        /// </summary>
        [DataMember(Name="Size", EmitDefaultValue=true)]
        public long? Size { get; set; }

        /// <summary>
        /// Gets or Sets SupportsExternalTransfer
        /// </summary>
        [DataMember(Name="SupportsExternalTransfer", EmitDefaultValue=true)]
        public bool SupportsExternalTransfer { get; set; }

        /// <summary>
        /// Gets or Sets Width
        /// </summary>
        [DataMember(Name="Width", EmitDefaultValue=true)]
        public int Width { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BaseItem {\n");
            sb.Append("  Container: ").Append(Container).Append("\n");
            sb.Append("  DateLastSaved: ").Append(DateLastSaved).Append("\n");
            sb.Append("  ExtraIds: ").Append(ExtraIds).Append("\n");
            sb.Append("  Height: ").Append(Height).Append("\n");
            sb.Append("  IsHD: ").Append(IsHD).Append("\n");
            sb.Append("  IsShortcut: ").Append(IsShortcut).Append("\n");
            sb.Append("  RemoteTrailers: ").Append(RemoteTrailers).Append("\n");
            sb.Append("  ShortcutPath: ").Append(ShortcutPath).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("  SupportsExternalTransfer: ").Append(SupportsExternalTransfer).Append("\n");
            sb.Append("  Width: ").Append(Width).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BaseItem)obj);
        }

        /// <summary>
        /// Returns true if BaseItem instances are equal
        /// </summary>
        /// <param name="other">Instance of BaseItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BaseItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Container == other.Container ||
                    Container != null &&
                    Container.Equals(other.Container)
                ) && 
                (
                    DateLastSaved == other.DateLastSaved ||
                    DateLastSaved != null &&
                    DateLastSaved.Equals(other.DateLastSaved)
                ) && 
                (
                    ExtraIds == other.ExtraIds ||
                    ExtraIds != null &&
                    other.ExtraIds != null &&
                    ExtraIds.SequenceEqual(other.ExtraIds)
                ) && 
                (
                    Height == other.Height ||
                    
                    Height.Equals(other.Height)
                ) && 
                (
                    IsHD == other.IsHD ||
                    
                    IsHD.Equals(other.IsHD)
                ) && 
                (
                    IsShortcut == other.IsShortcut ||
                    
                    IsShortcut.Equals(other.IsShortcut)
                ) && 
                (
                    RemoteTrailers == other.RemoteTrailers ||
                    RemoteTrailers != null &&
                    other.RemoteTrailers != null &&
                    RemoteTrailers.SequenceEqual(other.RemoteTrailers)
                ) && 
                (
                    ShortcutPath == other.ShortcutPath ||
                    ShortcutPath != null &&
                    ShortcutPath.Equals(other.ShortcutPath)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                ) && 
                (
                    SupportsExternalTransfer == other.SupportsExternalTransfer ||
                    
                    SupportsExternalTransfer.Equals(other.SupportsExternalTransfer)
                ) && 
                (
                    Width == other.Width ||
                    
                    Width.Equals(other.Width)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Container != null)
                    hashCode = hashCode * 59 + Container.GetHashCode();
                    if (DateLastSaved != null)
                    hashCode = hashCode * 59 + DateLastSaved.GetHashCode();
                    if (ExtraIds != null)
                    hashCode = hashCode * 59 + ExtraIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Height.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsHD.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsShortcut.GetHashCode();
                    if (RemoteTrailers != null)
                    hashCode = hashCode * 59 + RemoteTrailers.GetHashCode();
                    if (ShortcutPath != null)
                    hashCode = hashCode * 59 + ShortcutPath.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsExternalTransfer.GetHashCode();
                    
                    hashCode = hashCode * 59 + Width.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BaseItem left, BaseItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BaseItem left, BaseItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
