/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class PlaybackProgressInfo.
    /// </summary>
    [DataContract]
    public partial class PlaybackProgressInfo : IEquatable<PlaybackProgressInfo>
    {
        /// <summary>
        /// Gets or Sets AspectRatio
        /// </summary>
        [DataMember(Name="AspectRatio", EmitDefaultValue=true)]
        public string AspectRatio { get; set; }

        /// <summary>
        /// Gets or sets the index of the audio stream.
        /// </summary>
        /// <value>Gets or sets the index of the audio stream.</value>
        [DataMember(Name="AudioStreamIndex", EmitDefaultValue=true)]
        public int? AudioStreamIndex { get; set; }

        /// <summary>
        /// Gets or Sets Brightness
        /// </summary>
        [DataMember(Name="Brightness", EmitDefaultValue=true)]
        public int? Brightness { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance can seek.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance can seek.</value>
        [DataMember(Name="CanSeek", EmitDefaultValue=true)]
        public bool CanSeek { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is muted.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is muted.</value>
        [DataMember(Name="IsMuted", EmitDefaultValue=true)]
        public bool IsMuted { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance is paused.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is paused.</value>
        [DataMember(Name="IsPaused", EmitDefaultValue=true)]
        public bool IsPaused { get; set; }

        /// <summary>
        /// Gets or Sets Item
        /// </summary>
        [DataMember(Name="Item", EmitDefaultValue=false)]
        public BaseItemDto Item { get; set; }

        /// <summary>
        /// Gets or sets the item identifier.
        /// </summary>
        /// <value>Gets or sets the item identifier.</value>
        [DataMember(Name="ItemId", EmitDefaultValue=false)]
        public Guid ItemId { get; set; }

        /// <summary>
        /// Gets or sets the live stream identifier.
        /// </summary>
        /// <value>Gets or sets the live stream identifier.</value>
        [DataMember(Name="LiveStreamId", EmitDefaultValue=true)]
        public string LiveStreamId { get; set; }

        /// <summary>
        /// Gets or sets the media version identifier.
        /// </summary>
        /// <value>Gets or sets the media version identifier.</value>
        [DataMember(Name="MediaSourceId", EmitDefaultValue=true)]
        public string MediaSourceId { get; set; }

        /// <summary>
        /// Gets or Sets NowPlayingQueue
        /// </summary>
        [DataMember(Name="NowPlayingQueue", EmitDefaultValue=true)]
        public List<QueueItem> NowPlayingQueue { get; set; }

        /// <summary>
        /// Gets or Sets PlayMethod
        /// </summary>
        [DataMember(Name="PlayMethod", EmitDefaultValue=true)]
        public PlayMethod PlayMethod { get; set; }

        /// <summary>
        /// Gets or sets the play session identifier.
        /// </summary>
        /// <value>Gets or sets the play session identifier.</value>
        [DataMember(Name="PlaySessionId", EmitDefaultValue=true)]
        public string PlaySessionId { get; set; }

        /// <summary>
        /// Gets or Sets PlaybackStartTimeTicks
        /// </summary>
        [DataMember(Name="PlaybackStartTimeTicks", EmitDefaultValue=true)]
        public long? PlaybackStartTimeTicks { get; set; }

        /// <summary>
        /// Gets or Sets PlaylistItemId
        /// </summary>
        [DataMember(Name="PlaylistItemId", EmitDefaultValue=true)]
        public string PlaylistItemId { get; set; }

        /// <summary>
        /// Gets or sets the position ticks.
        /// </summary>
        /// <value>Gets or sets the position ticks.</value>
        [DataMember(Name="PositionTicks", EmitDefaultValue=true)]
        public long? PositionTicks { get; set; }

        /// <summary>
        /// Gets or Sets RepeatMode
        /// </summary>
        [DataMember(Name="RepeatMode", EmitDefaultValue=true)]
        public RepeatMode RepeatMode { get; set; }

        /// <summary>
        /// Gets or sets the session id.
        /// </summary>
        /// <value>Gets or sets the session id.</value>
        [DataMember(Name="SessionId", EmitDefaultValue=true)]
        public string SessionId { get; set; }

        /// <summary>
        /// Gets or sets the index of the subtitle stream.
        /// </summary>
        /// <value>Gets or sets the index of the subtitle stream.</value>
        [DataMember(Name="SubtitleStreamIndex", EmitDefaultValue=true)]
        public int? SubtitleStreamIndex { get; set; }

        /// <summary>
        /// Gets or sets the volume level.
        /// </summary>
        /// <value>Gets or sets the volume level.</value>
        [DataMember(Name="VolumeLevel", EmitDefaultValue=true)]
        public int? VolumeLevel { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PlaybackProgressInfo {\n");
            sb.Append("  AspectRatio: ").Append(AspectRatio).Append("\n");
            sb.Append("  AudioStreamIndex: ").Append(AudioStreamIndex).Append("\n");
            sb.Append("  Brightness: ").Append(Brightness).Append("\n");
            sb.Append("  CanSeek: ").Append(CanSeek).Append("\n");
            sb.Append("  IsMuted: ").Append(IsMuted).Append("\n");
            sb.Append("  IsPaused: ").Append(IsPaused).Append("\n");
            sb.Append("  Item: ").Append(Item).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  LiveStreamId: ").Append(LiveStreamId).Append("\n");
            sb.Append("  MediaSourceId: ").Append(MediaSourceId).Append("\n");
            sb.Append("  NowPlayingQueue: ").Append(NowPlayingQueue).Append("\n");
            sb.Append("  PlayMethod: ").Append(PlayMethod).Append("\n");
            sb.Append("  PlaySessionId: ").Append(PlaySessionId).Append("\n");
            sb.Append("  PlaybackStartTimeTicks: ").Append(PlaybackStartTimeTicks).Append("\n");
            sb.Append("  PlaylistItemId: ").Append(PlaylistItemId).Append("\n");
            sb.Append("  PositionTicks: ").Append(PositionTicks).Append("\n");
            sb.Append("  RepeatMode: ").Append(RepeatMode).Append("\n");
            sb.Append("  SessionId: ").Append(SessionId).Append("\n");
            sb.Append("  SubtitleStreamIndex: ").Append(SubtitleStreamIndex).Append("\n");
            sb.Append("  VolumeLevel: ").Append(VolumeLevel).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PlaybackProgressInfo)obj);
        }

        /// <summary>
        /// Returns true if PlaybackProgressInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PlaybackProgressInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PlaybackProgressInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AspectRatio == other.AspectRatio ||
                    AspectRatio != null &&
                    AspectRatio.Equals(other.AspectRatio)
                ) && 
                (
                    AudioStreamIndex == other.AudioStreamIndex ||
                    AudioStreamIndex != null &&
                    AudioStreamIndex.Equals(other.AudioStreamIndex)
                ) && 
                (
                    Brightness == other.Brightness ||
                    Brightness != null &&
                    Brightness.Equals(other.Brightness)
                ) && 
                (
                    CanSeek == other.CanSeek ||
                    
                    CanSeek.Equals(other.CanSeek)
                ) && 
                (
                    IsMuted == other.IsMuted ||
                    
                    IsMuted.Equals(other.IsMuted)
                ) && 
                (
                    IsPaused == other.IsPaused ||
                    
                    IsPaused.Equals(other.IsPaused)
                ) && 
                (
                    Item == other.Item ||
                    Item != null &&
                    Item.Equals(other.Item)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    LiveStreamId == other.LiveStreamId ||
                    LiveStreamId != null &&
                    LiveStreamId.Equals(other.LiveStreamId)
                ) && 
                (
                    MediaSourceId == other.MediaSourceId ||
                    MediaSourceId != null &&
                    MediaSourceId.Equals(other.MediaSourceId)
                ) && 
                (
                    NowPlayingQueue == other.NowPlayingQueue ||
                    NowPlayingQueue != null &&
                    other.NowPlayingQueue != null &&
                    NowPlayingQueue.SequenceEqual(other.NowPlayingQueue)
                ) && 
                (
                    PlayMethod == other.PlayMethod ||
                    
                    PlayMethod.Equals(other.PlayMethod)
                ) && 
                (
                    PlaySessionId == other.PlaySessionId ||
                    PlaySessionId != null &&
                    PlaySessionId.Equals(other.PlaySessionId)
                ) && 
                (
                    PlaybackStartTimeTicks == other.PlaybackStartTimeTicks ||
                    PlaybackStartTimeTicks != null &&
                    PlaybackStartTimeTicks.Equals(other.PlaybackStartTimeTicks)
                ) && 
                (
                    PlaylistItemId == other.PlaylistItemId ||
                    PlaylistItemId != null &&
                    PlaylistItemId.Equals(other.PlaylistItemId)
                ) && 
                (
                    PositionTicks == other.PositionTicks ||
                    PositionTicks != null &&
                    PositionTicks.Equals(other.PositionTicks)
                ) && 
                (
                    RepeatMode == other.RepeatMode ||
                    
                    RepeatMode.Equals(other.RepeatMode)
                ) && 
                (
                    SessionId == other.SessionId ||
                    SessionId != null &&
                    SessionId.Equals(other.SessionId)
                ) && 
                (
                    SubtitleStreamIndex == other.SubtitleStreamIndex ||
                    SubtitleStreamIndex != null &&
                    SubtitleStreamIndex.Equals(other.SubtitleStreamIndex)
                ) && 
                (
                    VolumeLevel == other.VolumeLevel ||
                    VolumeLevel != null &&
                    VolumeLevel.Equals(other.VolumeLevel)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AspectRatio != null)
                    hashCode = hashCode * 59 + AspectRatio.GetHashCode();
                    if (AudioStreamIndex != null)
                    hashCode = hashCode * 59 + AudioStreamIndex.GetHashCode();
                    if (Brightness != null)
                    hashCode = hashCode * 59 + Brightness.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanSeek.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsMuted.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPaused.GetHashCode();
                    if (Item != null)
                    hashCode = hashCode * 59 + Item.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (LiveStreamId != null)
                    hashCode = hashCode * 59 + LiveStreamId.GetHashCode();
                    if (MediaSourceId != null)
                    hashCode = hashCode * 59 + MediaSourceId.GetHashCode();
                    if (NowPlayingQueue != null)
                    hashCode = hashCode * 59 + NowPlayingQueue.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayMethod.GetHashCode();
                    if (PlaySessionId != null)
                    hashCode = hashCode * 59 + PlaySessionId.GetHashCode();
                    if (PlaybackStartTimeTicks != null)
                    hashCode = hashCode * 59 + PlaybackStartTimeTicks.GetHashCode();
                    if (PlaylistItemId != null)
                    hashCode = hashCode * 59 + PlaylistItemId.GetHashCode();
                    if (PositionTicks != null)
                    hashCode = hashCode * 59 + PositionTicks.GetHashCode();
                    
                    hashCode = hashCode * 59 + RepeatMode.GetHashCode();
                    if (SessionId != null)
                    hashCode = hashCode * 59 + SessionId.GetHashCode();
                    if (SubtitleStreamIndex != null)
                    hashCode = hashCode * 59 + SubtitleStreamIndex.GetHashCode();
                    if (VolumeLevel != null)
                    hashCode = hashCode * 59 + VolumeLevel.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PlaybackProgressInfo left, PlaybackProgressInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PlaybackProgressInfo left, PlaybackProgressInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
