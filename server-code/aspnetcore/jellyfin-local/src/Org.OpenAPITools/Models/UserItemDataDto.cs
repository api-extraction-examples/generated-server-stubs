/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class UserItemDataDto.
    /// </summary>
    [DataContract]
    public partial class UserItemDataDto : IEquatable<UserItemDataDto>
    {
        /// <summary>
        /// Gets or sets a value indicating whether this instance is favorite.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance is favorite.</value>
        [DataMember(Name="IsFavorite", EmitDefaultValue=true)]
        public bool IsFavorite { get; set; }

        /// <summary>
        /// Gets or sets the item identifier.
        /// </summary>
        /// <value>Gets or sets the item identifier.</value>
        [DataMember(Name="ItemId", EmitDefaultValue=true)]
        public string ItemId { get; set; }

        /// <summary>
        /// Gets or sets the key.
        /// </summary>
        /// <value>Gets or sets the key.</value>
        [DataMember(Name="Key", EmitDefaultValue=true)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or sets the last played date.
        /// </summary>
        /// <value>Gets or sets the last played date.</value>
        [DataMember(Name="LastPlayedDate", EmitDefaultValue=true)]
        public DateTime? LastPlayedDate { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is likes.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is likes.</value>
        [DataMember(Name="Likes", EmitDefaultValue=true)]
        public bool? Likes { get; set; }

        /// <summary>
        /// Gets or sets the play count.
        /// </summary>
        /// <value>Gets or sets the play count.</value>
        [DataMember(Name="PlayCount", EmitDefaultValue=true)]
        public int PlayCount { get; set; }

        /// <summary>
        /// Gets or sets the playback position ticks.
        /// </summary>
        /// <value>Gets or sets the playback position ticks.</value>
        [DataMember(Name="PlaybackPositionTicks", EmitDefaultValue=true)]
        public long PlaybackPositionTicks { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is played.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is played.</value>
        [DataMember(Name="Played", EmitDefaultValue=true)]
        public bool Played { get; set; }

        /// <summary>
        /// Gets or sets the played percentage.
        /// </summary>
        /// <value>Gets or sets the played percentage.</value>
        [DataMember(Name="PlayedPercentage", EmitDefaultValue=true)]
        public double? PlayedPercentage { get; set; }

        /// <summary>
        /// Gets or sets the rating.
        /// </summary>
        /// <value>Gets or sets the rating.</value>
        [DataMember(Name="Rating", EmitDefaultValue=true)]
        public double? Rating { get; set; }

        /// <summary>
        /// Gets or sets the unplayed item count.
        /// </summary>
        /// <value>Gets or sets the unplayed item count.</value>
        [DataMember(Name="UnplayedItemCount", EmitDefaultValue=true)]
        public int? UnplayedItemCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserItemDataDto {\n");
            sb.Append("  IsFavorite: ").Append(IsFavorite).Append("\n");
            sb.Append("  ItemId: ").Append(ItemId).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LastPlayedDate: ").Append(LastPlayedDate).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  PlayCount: ").Append(PlayCount).Append("\n");
            sb.Append("  PlaybackPositionTicks: ").Append(PlaybackPositionTicks).Append("\n");
            sb.Append("  Played: ").Append(Played).Append("\n");
            sb.Append("  PlayedPercentage: ").Append(PlayedPercentage).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  UnplayedItemCount: ").Append(UnplayedItemCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserItemDataDto)obj);
        }

        /// <summary>
        /// Returns true if UserItemDataDto instances are equal
        /// </summary>
        /// <param name="other">Instance of UserItemDataDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserItemDataDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsFavorite == other.IsFavorite ||
                    
                    IsFavorite.Equals(other.IsFavorite)
                ) && 
                (
                    ItemId == other.ItemId ||
                    ItemId != null &&
                    ItemId.Equals(other.ItemId)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    LastPlayedDate == other.LastPlayedDate ||
                    LastPlayedDate != null &&
                    LastPlayedDate.Equals(other.LastPlayedDate)
                ) && 
                (
                    Likes == other.Likes ||
                    Likes != null &&
                    Likes.Equals(other.Likes)
                ) && 
                (
                    PlayCount == other.PlayCount ||
                    
                    PlayCount.Equals(other.PlayCount)
                ) && 
                (
                    PlaybackPositionTicks == other.PlaybackPositionTicks ||
                    
                    PlaybackPositionTicks.Equals(other.PlaybackPositionTicks)
                ) && 
                (
                    Played == other.Played ||
                    
                    Played.Equals(other.Played)
                ) && 
                (
                    PlayedPercentage == other.PlayedPercentage ||
                    PlayedPercentage != null &&
                    PlayedPercentage.Equals(other.PlayedPercentage)
                ) && 
                (
                    Rating == other.Rating ||
                    Rating != null &&
                    Rating.Equals(other.Rating)
                ) && 
                (
                    UnplayedItemCount == other.UnplayedItemCount ||
                    UnplayedItemCount != null &&
                    UnplayedItemCount.Equals(other.UnplayedItemCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsFavorite.GetHashCode();
                    if (ItemId != null)
                    hashCode = hashCode * 59 + ItemId.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (LastPlayedDate != null)
                    hashCode = hashCode * 59 + LastPlayedDate.GetHashCode();
                    if (Likes != null)
                    hashCode = hashCode * 59 + Likes.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlayCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + PlaybackPositionTicks.GetHashCode();
                    
                    hashCode = hashCode * 59 + Played.GetHashCode();
                    if (PlayedPercentage != null)
                    hashCode = hashCode * 59 + PlayedPercentage.GetHashCode();
                    if (Rating != null)
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (UnplayedItemCount != null)
                    hashCode = hashCode * 59 + UnplayedItemCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserItemDataDto left, UserItemDataDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserItemDataDto left, UserItemDataDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
