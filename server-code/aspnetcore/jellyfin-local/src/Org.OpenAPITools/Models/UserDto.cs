/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class UserDto.
    /// </summary>
    [DataContract]
    public partial class UserDto : IEquatable<UserDto>
    {
        /// <summary>
        /// Gets or Sets VarConfiguration
        /// </summary>
        [DataMember(Name="Configuration", EmitDefaultValue=false)]
        public UserConfiguration VarConfiguration { get; set; }

        /// <summary>
        /// Gets or sets whether async login is enabled or not.
        /// </summary>
        /// <value>Gets or sets whether async login is enabled or not.</value>
        [DataMember(Name="EnableAutoLogin", EmitDefaultValue=true)]
        public bool? EnableAutoLogin { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has configured easy password.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has configured easy password.</value>
        [DataMember(Name="HasConfiguredEasyPassword", EmitDefaultValue=true)]
        public bool HasConfiguredEasyPassword { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has configured password.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has configured password.</value>
        [DataMember(Name="HasConfiguredPassword", EmitDefaultValue=true)]
        public bool HasConfiguredPassword { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether this instance has password.
        /// </summary>
        /// <value>Gets or sets a value indicating whether this instance has password.</value>
        [DataMember(Name="HasPassword", EmitDefaultValue=true)]
        public bool HasPassword { get; set; }

        /// <summary>
        /// Gets or sets the id.
        /// </summary>
        /// <value>Gets or sets the id.</value>
        [DataMember(Name="Id", EmitDefaultValue=false)]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or sets the last activity date.
        /// </summary>
        /// <value>Gets or sets the last activity date.</value>
        [DataMember(Name="LastActivityDate", EmitDefaultValue=true)]
        public DateTime? LastActivityDate { get; set; }

        /// <summary>
        /// Gets or sets the last login date.
        /// </summary>
        /// <value>Gets or sets the last login date.</value>
        [DataMember(Name="LastLoginDate", EmitDefaultValue=true)]
        public DateTime? LastLoginDate { get; set; }

        /// <summary>
        /// Gets or sets the name.
        /// </summary>
        /// <value>Gets or sets the name.</value>
        [DataMember(Name="Name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Policy
        /// </summary>
        [DataMember(Name="Policy", EmitDefaultValue=false)]
        public UserPolicy Policy { get; set; }

        /// <summary>
        /// Gets or sets the primary image aspect ratio.
        /// </summary>
        /// <value>Gets or sets the primary image aspect ratio.</value>
        [DataMember(Name="PrimaryImageAspectRatio", EmitDefaultValue=true)]
        public double? PrimaryImageAspectRatio { get; set; }

        /// <summary>
        /// Gets or sets the primary image tag.
        /// </summary>
        /// <value>Gets or sets the primary image tag.</value>
        [DataMember(Name="PrimaryImageTag", EmitDefaultValue=true)]
        public string PrimaryImageTag { get; set; }

        /// <summary>
        /// Gets or sets the server identifier.
        /// </summary>
        /// <value>Gets or sets the server identifier.</value>
        [DataMember(Name="ServerId", EmitDefaultValue=true)]
        public string ServerId { get; set; }

        /// <summary>
        /// Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.
        /// </summary>
        /// <value>Gets or sets the name of the server.  This is not used by the server and is for client-side usage only.</value>
        [DataMember(Name="ServerName", EmitDefaultValue=true)]
        public string ServerName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserDto {\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  EnableAutoLogin: ").Append(EnableAutoLogin).Append("\n");
            sb.Append("  HasConfiguredEasyPassword: ").Append(HasConfiguredEasyPassword).Append("\n");
            sb.Append("  HasConfiguredPassword: ").Append(HasConfiguredPassword).Append("\n");
            sb.Append("  HasPassword: ").Append(HasPassword).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastActivityDate: ").Append(LastActivityDate).Append("\n");
            sb.Append("  LastLoginDate: ").Append(LastLoginDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Policy: ").Append(Policy).Append("\n");
            sb.Append("  PrimaryImageAspectRatio: ").Append(PrimaryImageAspectRatio).Append("\n");
            sb.Append("  PrimaryImageTag: ").Append(PrimaryImageTag).Append("\n");
            sb.Append("  ServerId: ").Append(ServerId).Append("\n");
            sb.Append("  ServerName: ").Append(ServerName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserDto)obj);
        }

        /// <summary>
        /// Returns true if UserDto instances are equal
        /// </summary>
        /// <param name="other">Instance of UserDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarConfiguration == other.VarConfiguration ||
                    VarConfiguration != null &&
                    VarConfiguration.Equals(other.VarConfiguration)
                ) && 
                (
                    EnableAutoLogin == other.EnableAutoLogin ||
                    EnableAutoLogin != null &&
                    EnableAutoLogin.Equals(other.EnableAutoLogin)
                ) && 
                (
                    HasConfiguredEasyPassword == other.HasConfiguredEasyPassword ||
                    
                    HasConfiguredEasyPassword.Equals(other.HasConfiguredEasyPassword)
                ) && 
                (
                    HasConfiguredPassword == other.HasConfiguredPassword ||
                    
                    HasConfiguredPassword.Equals(other.HasConfiguredPassword)
                ) && 
                (
                    HasPassword == other.HasPassword ||
                    
                    HasPassword.Equals(other.HasPassword)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastActivityDate == other.LastActivityDate ||
                    LastActivityDate != null &&
                    LastActivityDate.Equals(other.LastActivityDate)
                ) && 
                (
                    LastLoginDate == other.LastLoginDate ||
                    LastLoginDate != null &&
                    LastLoginDate.Equals(other.LastLoginDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Policy == other.Policy ||
                    Policy != null &&
                    Policy.Equals(other.Policy)
                ) && 
                (
                    PrimaryImageAspectRatio == other.PrimaryImageAspectRatio ||
                    PrimaryImageAspectRatio != null &&
                    PrimaryImageAspectRatio.Equals(other.PrimaryImageAspectRatio)
                ) && 
                (
                    PrimaryImageTag == other.PrimaryImageTag ||
                    PrimaryImageTag != null &&
                    PrimaryImageTag.Equals(other.PrimaryImageTag)
                ) && 
                (
                    ServerId == other.ServerId ||
                    ServerId != null &&
                    ServerId.Equals(other.ServerId)
                ) && 
                (
                    ServerName == other.ServerName ||
                    ServerName != null &&
                    ServerName.Equals(other.ServerName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarConfiguration != null)
                    hashCode = hashCode * 59 + VarConfiguration.GetHashCode();
                    if (EnableAutoLogin != null)
                    hashCode = hashCode * 59 + EnableAutoLogin.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasConfiguredEasyPassword.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasConfiguredPassword.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasPassword.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastActivityDate != null)
                    hashCode = hashCode * 59 + LastActivityDate.GetHashCode();
                    if (LastLoginDate != null)
                    hashCode = hashCode * 59 + LastLoginDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Policy != null)
                    hashCode = hashCode * 59 + Policy.GetHashCode();
                    if (PrimaryImageAspectRatio != null)
                    hashCode = hashCode * 59 + PrimaryImageAspectRatio.GetHashCode();
                    if (PrimaryImageTag != null)
                    hashCode = hashCode * 59 + PrimaryImageTag.GetHashCode();
                    if (ServerId != null)
                    hashCode = hashCode * 59 + ServerId.GetHashCode();
                    if (ServerName != null)
                    hashCode = hashCode * 59 + ServerName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserDto left, UserDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserDto left, UserDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
