/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The update user password request body.
    /// </summary>
    [DataContract]
    public partial class UpdateUserPassword : IEquatable<UpdateUserPassword>
    {
        /// <summary>
        /// Gets or sets the current sha1-hashed password.
        /// </summary>
        /// <value>Gets or sets the current sha1-hashed password.</value>
        [DataMember(Name="CurrentPassword", EmitDefaultValue=true)]
        public string CurrentPassword { get; set; }

        /// <summary>
        /// Gets or sets the current plain text password.
        /// </summary>
        /// <value>Gets or sets the current plain text password.</value>
        [DataMember(Name="CurrentPw", EmitDefaultValue=true)]
        public string CurrentPw { get; set; }

        /// <summary>
        /// Gets or sets the new plain text password.
        /// </summary>
        /// <value>Gets or sets the new plain text password.</value>
        [DataMember(Name="NewPw", EmitDefaultValue=true)]
        public string NewPw { get; set; }

        /// <summary>
        /// Gets or sets a value indicating whether to reset the password.
        /// </summary>
        /// <value>Gets or sets a value indicating whether to reset the password.</value>
        [DataMember(Name="ResetPassword", EmitDefaultValue=true)]
        public bool ResetPassword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateUserPassword {\n");
            sb.Append("  CurrentPassword: ").Append(CurrentPassword).Append("\n");
            sb.Append("  CurrentPw: ").Append(CurrentPw).Append("\n");
            sb.Append("  NewPw: ").Append(NewPw).Append("\n");
            sb.Append("  ResetPassword: ").Append(ResetPassword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateUserPassword)obj);
        }

        /// <summary>
        /// Returns true if UpdateUserPassword instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateUserPassword to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateUserPassword other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CurrentPassword == other.CurrentPassword ||
                    CurrentPassword != null &&
                    CurrentPassword.Equals(other.CurrentPassword)
                ) && 
                (
                    CurrentPw == other.CurrentPw ||
                    CurrentPw != null &&
                    CurrentPw.Equals(other.CurrentPw)
                ) && 
                (
                    NewPw == other.NewPw ||
                    NewPw != null &&
                    NewPw.Equals(other.NewPw)
                ) && 
                (
                    ResetPassword == other.ResetPassword ||
                    
                    ResetPassword.Equals(other.ResetPassword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CurrentPassword != null)
                    hashCode = hashCode * 59 + CurrentPassword.GetHashCode();
                    if (CurrentPw != null)
                    hashCode = hashCode * 59 + CurrentPw.GetHashCode();
                    if (NewPw != null)
                    hashCode = hashCode * 59 + NewPw.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResetPassword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateUserPassword left, UpdateUserPassword right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateUserPassword left, UpdateUserPassword right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
