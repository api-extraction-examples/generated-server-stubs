/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Class BufferRequestDto.
    /// </summary>
    [DataContract]
    public partial class BufferRequestDto : IEquatable<BufferRequestDto>
    {
        /// <summary>
        /// Gets or sets a value indicating whether the client playback is unpaused.
        /// </summary>
        /// <value>Gets or sets a value indicating whether the client playback is unpaused.</value>
        [DataMember(Name="IsPlaying", EmitDefaultValue=true)]
        public bool IsPlaying { get; set; }

        /// <summary>
        /// Gets or sets the playlist item identifier of the playing item.
        /// </summary>
        /// <value>Gets or sets the playlist item identifier of the playing item.</value>
        [DataMember(Name="PlaylistItemId", EmitDefaultValue=false)]
        public Guid PlaylistItemId { get; set; }

        /// <summary>
        /// Gets or sets the position ticks.
        /// </summary>
        /// <value>Gets or sets the position ticks.</value>
        [DataMember(Name="PositionTicks", EmitDefaultValue=true)]
        public long PositionTicks { get; set; }

        /// <summary>
        /// Gets or sets when the request has been made by the client.
        /// </summary>
        /// <value>Gets or sets when the request has been made by the client.</value>
        [DataMember(Name="When", EmitDefaultValue=false)]
        public DateTime When { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BufferRequestDto {\n");
            sb.Append("  IsPlaying: ").Append(IsPlaying).Append("\n");
            sb.Append("  PlaylistItemId: ").Append(PlaylistItemId).Append("\n");
            sb.Append("  PositionTicks: ").Append(PositionTicks).Append("\n");
            sb.Append("  When: ").Append(When).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BufferRequestDto)obj);
        }

        /// <summary>
        /// Returns true if BufferRequestDto instances are equal
        /// </summary>
        /// <param name="other">Instance of BufferRequestDto to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BufferRequestDto other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsPlaying == other.IsPlaying ||
                    
                    IsPlaying.Equals(other.IsPlaying)
                ) && 
                (
                    PlaylistItemId == other.PlaylistItemId ||
                    PlaylistItemId != null &&
                    PlaylistItemId.Equals(other.PlaylistItemId)
                ) && 
                (
                    PositionTicks == other.PositionTicks ||
                    
                    PositionTicks.Equals(other.PositionTicks)
                ) && 
                (
                    When == other.When ||
                    When != null &&
                    When.Equals(other.When)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsPlaying.GetHashCode();
                    if (PlaylistItemId != null)
                    hashCode = hashCode * 59 + PlaylistItemId.GetHashCode();
                    
                    hashCode = hashCode * 59 + PositionTicks.GetHashCode();
                    if (When != null)
                    hashCode = hashCode * 59 + When.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BufferRequestDto left, BufferRequestDto right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BufferRequestDto left, BufferRequestDto right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
