/*
 * Top Stories
 *
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Article : IEquatable<Article>
    {
        /// <summary>
        /// Gets or Sets VarAbstract
        /// </summary>
        [DataMember(Name="abstract", EmitDefaultValue=false)]
        public string VarAbstract { get; set; }

        /// <summary>
        /// Gets or Sets Byline
        /// </summary>
        [DataMember(Name="byline", EmitDefaultValue=false)]
        public string Byline { get; set; }

        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets DesFacet
        /// </summary>
        [DataMember(Name="des_facet", EmitDefaultValue=false)]
        public List<string> DesFacet { get; set; }

        /// <summary>
        /// Gets or Sets GeoFacet
        /// </summary>
        [DataMember(Name="geo_facet", EmitDefaultValue=false)]
        public List<string> GeoFacet { get; set; }

        /// <summary>
        /// Gets or Sets ItemType
        /// </summary>
        [DataMember(Name="item_type", EmitDefaultValue=false)]
        public string ItemType { get; set; }

        /// <summary>
        /// Gets or Sets Kicker
        /// </summary>
        [DataMember(Name="kicker", EmitDefaultValue=false)]
        public string Kicker { get; set; }

        /// <summary>
        /// Gets or Sets MaterialTypeFacet
        /// </summary>
        [DataMember(Name="material_type_facet", EmitDefaultValue=false)]
        public string MaterialTypeFacet { get; set; }

        /// <summary>
        /// Gets or Sets Multimedia
        /// </summary>
        [DataMember(Name="multimedia", EmitDefaultValue=false)]
        public List<ArticleMultimediaInner> Multimedia { get; set; }

        /// <summary>
        /// Gets or Sets OrgFacet
        /// </summary>
        [DataMember(Name="org_facet", EmitDefaultValue=false)]
        public List<string> OrgFacet { get; set; }

        /// <summary>
        /// Gets or Sets PerFacet
        /// </summary>
        [DataMember(Name="per_facet", EmitDefaultValue=false)]
        public List<string> PerFacet { get; set; }

        /// <summary>
        /// Gets or Sets PublishedDate
        /// </summary>
        [DataMember(Name="published_date", EmitDefaultValue=false)]
        public string PublishedDate { get; set; }

        /// <summary>
        /// Gets or Sets RelatedUrls
        /// </summary>
        [DataMember(Name="related_urls", EmitDefaultValue=false)]
        public List<ArticleRelatedUrlsInner> RelatedUrls { get; set; }

        /// <summary>
        /// Gets or Sets Section
        /// </summary>
        [DataMember(Name="section", EmitDefaultValue=false)]
        public string Section { get; set; }

        /// <summary>
        /// Gets or Sets ShortUrl
        /// </summary>
        [DataMember(Name="short_url", EmitDefaultValue=false)]
        public string ShortUrl { get; set; }

        /// <summary>
        /// Gets or Sets Subsection
        /// </summary>
        [DataMember(Name="subsection", EmitDefaultValue=false)]
        public string Subsection { get; set; }

        /// <summary>
        /// Gets or Sets ThumbnailStandard
        /// </summary>
        [DataMember(Name="thumbnail_standard", EmitDefaultValue=false)]
        public string ThumbnailStandard { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public string UpdatedDate { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Article {\n");
            sb.Append("  VarAbstract: ").Append(VarAbstract).Append("\n");
            sb.Append("  Byline: ").Append(Byline).Append("\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  DesFacet: ").Append(DesFacet).Append("\n");
            sb.Append("  GeoFacet: ").Append(GeoFacet).Append("\n");
            sb.Append("  ItemType: ").Append(ItemType).Append("\n");
            sb.Append("  Kicker: ").Append(Kicker).Append("\n");
            sb.Append("  MaterialTypeFacet: ").Append(MaterialTypeFacet).Append("\n");
            sb.Append("  Multimedia: ").Append(Multimedia).Append("\n");
            sb.Append("  OrgFacet: ").Append(OrgFacet).Append("\n");
            sb.Append("  PerFacet: ").Append(PerFacet).Append("\n");
            sb.Append("  PublishedDate: ").Append(PublishedDate).Append("\n");
            sb.Append("  RelatedUrls: ").Append(RelatedUrls).Append("\n");
            sb.Append("  Section: ").Append(Section).Append("\n");
            sb.Append("  ShortUrl: ").Append(ShortUrl).Append("\n");
            sb.Append("  Subsection: ").Append(Subsection).Append("\n");
            sb.Append("  ThumbnailStandard: ").Append(ThumbnailStandard).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Article)obj);
        }

        /// <summary>
        /// Returns true if Article instances are equal
        /// </summary>
        /// <param name="other">Instance of Article to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Article other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarAbstract == other.VarAbstract ||
                    VarAbstract != null &&
                    VarAbstract.Equals(other.VarAbstract)
                ) && 
                (
                    Byline == other.Byline ||
                    Byline != null &&
                    Byline.Equals(other.Byline)
                ) && 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    DesFacet == other.DesFacet ||
                    DesFacet != null &&
                    other.DesFacet != null &&
                    DesFacet.SequenceEqual(other.DesFacet)
                ) && 
                (
                    GeoFacet == other.GeoFacet ||
                    GeoFacet != null &&
                    other.GeoFacet != null &&
                    GeoFacet.SequenceEqual(other.GeoFacet)
                ) && 
                (
                    ItemType == other.ItemType ||
                    ItemType != null &&
                    ItemType.Equals(other.ItemType)
                ) && 
                (
                    Kicker == other.Kicker ||
                    Kicker != null &&
                    Kicker.Equals(other.Kicker)
                ) && 
                (
                    MaterialTypeFacet == other.MaterialTypeFacet ||
                    MaterialTypeFacet != null &&
                    MaterialTypeFacet.Equals(other.MaterialTypeFacet)
                ) && 
                (
                    Multimedia == other.Multimedia ||
                    Multimedia != null &&
                    other.Multimedia != null &&
                    Multimedia.SequenceEqual(other.Multimedia)
                ) && 
                (
                    OrgFacet == other.OrgFacet ||
                    OrgFacet != null &&
                    other.OrgFacet != null &&
                    OrgFacet.SequenceEqual(other.OrgFacet)
                ) && 
                (
                    PerFacet == other.PerFacet ||
                    PerFacet != null &&
                    other.PerFacet != null &&
                    PerFacet.SequenceEqual(other.PerFacet)
                ) && 
                (
                    PublishedDate == other.PublishedDate ||
                    PublishedDate != null &&
                    PublishedDate.Equals(other.PublishedDate)
                ) && 
                (
                    RelatedUrls == other.RelatedUrls ||
                    RelatedUrls != null &&
                    other.RelatedUrls != null &&
                    RelatedUrls.SequenceEqual(other.RelatedUrls)
                ) && 
                (
                    Section == other.Section ||
                    Section != null &&
                    Section.Equals(other.Section)
                ) && 
                (
                    ShortUrl == other.ShortUrl ||
                    ShortUrl != null &&
                    ShortUrl.Equals(other.ShortUrl)
                ) && 
                (
                    Subsection == other.Subsection ||
                    Subsection != null &&
                    Subsection.Equals(other.Subsection)
                ) && 
                (
                    ThumbnailStandard == other.ThumbnailStandard ||
                    ThumbnailStandard != null &&
                    ThumbnailStandard.Equals(other.ThumbnailStandard)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarAbstract != null)
                    hashCode = hashCode * 59 + VarAbstract.GetHashCode();
                    if (Byline != null)
                    hashCode = hashCode * 59 + Byline.GetHashCode();
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (DesFacet != null)
                    hashCode = hashCode * 59 + DesFacet.GetHashCode();
                    if (GeoFacet != null)
                    hashCode = hashCode * 59 + GeoFacet.GetHashCode();
                    if (ItemType != null)
                    hashCode = hashCode * 59 + ItemType.GetHashCode();
                    if (Kicker != null)
                    hashCode = hashCode * 59 + Kicker.GetHashCode();
                    if (MaterialTypeFacet != null)
                    hashCode = hashCode * 59 + MaterialTypeFacet.GetHashCode();
                    if (Multimedia != null)
                    hashCode = hashCode * 59 + Multimedia.GetHashCode();
                    if (OrgFacet != null)
                    hashCode = hashCode * 59 + OrgFacet.GetHashCode();
                    if (PerFacet != null)
                    hashCode = hashCode * 59 + PerFacet.GetHashCode();
                    if (PublishedDate != null)
                    hashCode = hashCode * 59 + PublishedDate.GetHashCode();
                    if (RelatedUrls != null)
                    hashCode = hashCode * 59 + RelatedUrls.GetHashCode();
                    if (Section != null)
                    hashCode = hashCode * 59 + Section.GetHashCode();
                    if (ShortUrl != null)
                    hashCode = hashCode * 59 + ShortUrl.GetHashCode();
                    if (Subsection != null)
                    hashCode = hashCode * 59 + Subsection.GetHashCode();
                    if (ThumbnailStandard != null)
                    hashCode = hashCode * 59 + ThumbnailStandard.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Article left, Article right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Article left, Article right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
