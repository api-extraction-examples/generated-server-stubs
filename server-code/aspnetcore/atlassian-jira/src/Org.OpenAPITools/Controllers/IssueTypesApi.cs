/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueTypesApiController : ControllerBase
    { 
        /// <summary>
        /// Create issue type
        /// </summary>
        /// <remarks>Creates an issue type and adds it to the default issue type scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="issueTypeCreateBean"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  a subtask issue type is requested on an instance where subtasks are disabled.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="409">Returned if the issue type name is in use.</response>
        [HttpPost]
        [Route("/rest/api/3/issuetype")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateIssueType")]
        [SwaggerResponse(statusCode: 201, type: typeof(IssueTypeDetails), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateIssueType([FromBody]IssueTypeCreateBean issueTypeCreateBean)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(IssueTypeDetails));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IssueTypeDetails>(exampleJson)
            : default(IssueTypeDetails);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Load issue type avatar
        /// </summary>
        /// <remarks>Loads an avatar for the issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl - -request POST \\ - -user email@example.com:&lt;api_token&gt; \\ - -header &#39;X-Atlassian-Token: no-check&#39; \\ - -header &#39;Content-Type: image/&lt; image_type&gt;&#39; \\ - -data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; \\ - -url &#39;https://your-domain.atlassian.net/rest/api/3/issuetype/{issueTypeId}&#39;This&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar, use [ Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <param name="body"></param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image.  *  &#x60;cropSize&#x60; is missing.  *  the issue type ID is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the issue type is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/issuetype/{id}/avatar2")]
        [ValidateModelState]
        [SwaggerOperation("CreateIssueTypeAvatar")]
        [SwaggerResponse(statusCode: 201, type: typeof(Avatar), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateIssueTypeAvatar([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "size")][Required()]int size, [FromBody]Object body, [FromQuery (Name = "x")]int? x, [FromQuery (Name = "y")]int? y)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Avatar));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"isDeletable\" : true,\n  \"owner\" : \"owner\",\n  \"fileName\" : \"fileName\",\n  \"urls\" : {\n    \"key\" : \"https://openapi-generator.tech\"\n  },\n  \"isSelected\" : true,\n  \"isSystemAvatar\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Avatar>(exampleJson)
            : default(Avatar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete issue type
        /// </summary>
        /// <remarks>Deletes the issue type. If the issue type is in use, all uses are updated with the alternative issue type (&#x60;alternativeIssueTypeId&#x60;). A list of alternative issue types are obtained from the [Get alternative issue types](#api-rest-api-3-issuetype-id-alternatives-get) resource.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <param name="alternativeIssueTypeId">The ID of the replacement issue type.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if any issues cannot be updated with the alternative issue type.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the issue type is in use and an alternative issue type is not specified.  *  the issue type or alternative issue type is not found.</response>
        /// <response code="409">Returned if the issue type is in use and:   *  also specified as the alternative issue type.  *  is a *standard* issue type and the alternative issue type is a *subtask*.</response>
        [HttpDelete]
        [Route("/rest/api/3/issuetype/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteIssueType")]
        public virtual IActionResult DeleteIssueType([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "alternativeIssueTypeId")]string alternativeIssueTypeId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get alternative issue types
        /// </summary>
        /// <remarks>Returns a list of issue types that can be used to replace the issue type. The alternative issue types are those assigned to the same workflow scheme, field configuration scheme, and screen scheme.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the issue type is not found.  *  the user does not have the required permissions.</response>
        [HttpGet]
        [Route("/rest/api/3/issuetype/{id}/alternatives")]
        [ValidateModelState]
        [SwaggerOperation("GetAlternativeIssueTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IssueTypeDetails>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAlternativeIssueTypes([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IssueTypeDetails>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}, {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<IssueTypeDetails>>(exampleJson)
            : default(List<IssueTypeDetails>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all issue types for user
        /// </summary>
        /// <remarks>Returns all issue types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Issue types are only returned as follows:   *  if the user has the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg), all issue types are returned.  *  if the user has the *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for one or more projects, the issue types associated with the projects the user has permission to browse are returned.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/issuetype")]
        [ValidateModelState]
        [SwaggerOperation("GetIssueAllTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IssueTypeDetails>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetIssueAllTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IssueTypeDetails>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}, {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<IssueTypeDetails>>(exampleJson)
            : default(List<IssueTypeDetails>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get issue type
        /// </summary>
        /// <remarks>Returns an issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in a project the issue type is associated with or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the issue type ID is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the issue type is not found.  *  the user does not have the required permissions.</response>
        [HttpGet]
        [Route("/rest/api/3/issuetype/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetIssueType")]
        [SwaggerResponse(statusCode: 200, type: typeof(IssueTypeDetails), description: "Returned if the request is successful.")]
        public virtual IActionResult GetIssueType([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IssueTypeDetails));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IssueTypeDetails>(exampleJson)
            : default(IssueTypeDetails);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get issue types for project
        /// </summary>
        /// <remarks>Returns issue types for a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) in the relevant project or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="projectId">The ID of the project.</param>
        /// <param name="level">The level of the issue type to filter by. Use:   *  &#x60;-1&#x60; for Subtask.  *  &#x60;0&#x60; for Base.  *  &#x60;1&#x60; for Epic.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the project is not found.  *  the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/issuetype/project")]
        [ValidateModelState]
        [SwaggerOperation("GetIssueTypesForProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<IssueTypeDetails>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetIssueTypesForProject([FromQuery (Name = "projectId")][Required()]long projectId, [FromQuery (Name = "level")]int? level)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<IssueTypeDetails>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}, {\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<IssueTypeDetails>>(exampleJson)
            : default(List<IssueTypeDetails>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update issue type
        /// </summary>
        /// <remarks>Updates the issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the issue type.</param>
        /// <param name="issueTypeUpdateBean"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid because:   *  no content is sent.  *  the issue type name exceeds 60 characters.  *  the avatar is not associated with this issue type.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the issue type is not found.</response>
        /// <response code="409">Returned if the issue type name is in use.</response>
        [HttpPut]
        [Route("/rest/api/3/issuetype/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateIssueType")]
        [SwaggerResponse(statusCode: 200, type: typeof(IssueTypeDetails), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateIssueType([FromRoute (Name = "id")][Required]string id, [FromBody]IssueTypeUpdateBean issueTypeUpdateBean)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(IssueTypeDetails));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"avatarId\" : 0,\n  \"hierarchyLevel\" : 6,\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"entityId\" : \"046b6c7f-0b8a-43b9-b35d-6489e6daee91\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\",\n  \"subtask\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<IssueTypeDetails>(exampleJson)
            : default(IssueTypeDetails);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
