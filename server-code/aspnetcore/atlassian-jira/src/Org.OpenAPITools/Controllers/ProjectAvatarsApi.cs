/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectAvatarsApiController : ControllerBase
    { 
        /// <summary>
        /// Load project avatar
        /// </summary>
        /// <remarks>Loads an avatar for a project.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl - -request POST &#x60;  &#x60;- -user email@example.com:&lt;api_token&gt; &#x60;  &#x60;- -header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;- -header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;- -data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;- -url &#39;https://your-domain.atlassian.net/rest/api/3/project/{projectIdOrKey}/avatar2&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).</remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <param name="body"></param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to administer the project or an anonymous call is made to the operation.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view the project.</response>
        [HttpPost]
        [Route("/rest/api/3/project/{projectIdOrKey}/avatar2")]
        [ValidateModelState]
        [SwaggerOperation("CreateProjectAvatar")]
        [SwaggerResponse(statusCode: 201, type: typeof(Avatar), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateProjectAvatar([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromBody]Object body, [FromQuery (Name = "x")]int? x, [FromQuery (Name = "y")]int? y, [FromQuery (Name = "size")]int? size)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Avatar));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"isDeletable\" : true,\n  \"owner\" : \"owner\",\n  \"fileName\" : \"fileName\",\n  \"urls\" : {\n    \"key\" : \"https://openapi-generator.tech\"\n  },\n  \"isSelected\" : true,\n  \"isSystemAvatar\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Avatar>(exampleJson)
            : default(Avatar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete project avatar
        /// </summary>
        /// <remarks>Deletes a custom avatar from a project. Note that system avatars cannot be deleted.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).</remarks>
        /// <param name="projectIdOrKey">The project ID or (case-sensitive) key.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the avatar is a system avatar or the user does not have permission to administer the project.</response>
        /// <response code="404">Returned if the project or avatar is not found or the user does not have permission to view the project.</response>
        [HttpDelete]
        [Route("/rest/api/3/project/{projectIdOrKey}/avatar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteProjectAvatar")]
        public virtual IActionResult DeleteProjectAvatar([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromRoute (Name = "id")][Required]long id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all project avatars
        /// </summary>
        /// <remarks>Returns all project avatars, grouped by system and custom avatars.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.</remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <response code="200">Returned if request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view the project.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/avatars")]
        [ValidateModelState]
        [SwaggerOperation("GetAllProjectAvatars")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectAvatars), description: "Returned if request is successful.")]
        public virtual IActionResult GetAllProjectAvatars([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectAvatars));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"system\" : [ {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  }, {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  } ],\n  \"custom\" : [ {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  }, {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectAvatars>(exampleJson)
            : default(ProjectAvatars);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Set project avatar
        /// </summary>
        /// <remarks>Sets the avatar displayed for a project.  Use [Load project avatar](#api-rest-api-3-project-projectIdOrKey-avatar2-post) to store avatars against the project, before using this operation to set the displayed avatar.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg).</remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <param name="avatar"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to administer the project.</response>
        /// <response code="404">Returned if the project or avatar is not found or the user does not have permission to view the project.</response>
        [HttpPut]
        [Route("/rest/api/3/project/{projectIdOrKey}/avatar")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateProjectAvatar")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateProjectAvatar([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromBody]Avatar avatar)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
