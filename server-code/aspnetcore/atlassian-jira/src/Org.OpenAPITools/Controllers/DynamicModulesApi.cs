/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DynamicModulesApiController : ControllerBase
    { 
        /// <summary>
        /// Get modules
        /// </summary>
        /// <remarks>Returns all modules registered dynamically by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the call is not from a Connect app.</response>
        [HttpGet]
        [Route("/rest/atlassian-connect/1/app/module/dynamic")]
        [ValidateModelState]
        [SwaggerOperation("DynamicModulesResourceGetModulesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ConnectModules), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Returned if the call is not from a Connect app.")]
        public virtual IActionResult DynamicModulesResourceGetModulesGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ConnectModules));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));
            string exampleJson = null;
            exampleJson = "{\n  \"jiraEntityProperties\" : [ {\n    \"entityType\" : \"issue\",\n    \"key\" : \"dynamic-attachment-entity-property\",\n    \"keyConfigurations\" : [ {\n      \"extractions\" : [ {\n        \"alias\" : \"attachmentExtension\",\n        \"objectName\" : \"extension\",\n        \"type\" : \"text\"\n      } ],\n      \"propertyKey\" : \"attachment\"\n    } ],\n    \"name\" : {\n      \"value\" : \"Attachment Index Document\"\n    }\n  } ],\n  \"jiraIssueFields\" : [ {\n    \"description\" : {\n      \"value\" : \"A dynamically added single-select field\"\n    },\n    \"extractions\" : [ {\n      \"name\" : \"categoryName\",\n      \"path\" : \"category\",\n      \"type\" : \"text\"\n    } ],\n    \"key\" : \"dynamic-select-field\",\n    \"name\" : {\n      \"value\" : \"Dynamic single select\"\n    },\n    \"type\" : \"single_select\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ConnectModules>(exampleJson)
            : default(ConnectModules);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Register modules
        /// </summary>
        /// <remarks>Registers a list of modules.  **[Permissions](#permissions) required:** Only Connect apps can make this request.</remarks>
        /// <param name="connectModules"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if: * any of the provided modules is invalid. For example, required properties are missing. * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.  Details of the issues encountered are included in the error message.</response>
        /// <response code="401">Returned if the call is not from a Connect app.</response>
        [HttpPost]
        [Route("/rest/atlassian-connect/1/app/module/dynamic")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DynamicModulesResourceRegisterModulesPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorMessage), description: "Returned if: * any of the provided modules is invalid. For example, required properties are missing. * any of the modules conflict with registered dynamic modules or modules defined in the app descriptor. For example, there are duplicate keys.  Details of the issues encountered are included in the error message.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Returned if the call is not from a Connect app.")]
        public virtual IActionResult DynamicModulesResourceRegisterModulesPost([FromBody]ConnectModules connectModules)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorMessage));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Remove modules
        /// </summary>
        /// <remarks>Remove all or a list of modules registered by the calling app.  **[Permissions](#permissions) required:** Only Connect apps can make this request.</remarks>
        /// <param name="moduleKey">The key of the module to remove. To include multiple module keys, provide multiple copies of this parameter. For example, &#x60;moduleKey&#x3D;dynamic-attachment-entity-property&amp;moduleKey&#x3D;dynamic-select-field&#x60;. Nonexistent keys are ignored.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the call is not from a Connect app.</response>
        [HttpDelete]
        [Route("/rest/atlassian-connect/1/app/module/dynamic")]
        [ValidateModelState]
        [SwaggerOperation("DynamicModulesResourceRemoveModulesDelete")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorMessage), description: "Returned if the call is not from a Connect app.")]
        public virtual IActionResult DynamicModulesResourceRemoveModulesDelete([FromQuery (Name = "moduleKey")]List<string> moduleKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorMessage));

            throw new NotImplementedException();
        }
    }
}
