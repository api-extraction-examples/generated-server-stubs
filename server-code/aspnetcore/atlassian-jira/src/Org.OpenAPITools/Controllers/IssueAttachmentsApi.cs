/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueAttachmentsApiController : ControllerBase
    { 
        /// <summary>
        /// Add attachment
        /// </summary>
        /// <remarks>Adds one or more attachments to an issue. Attachments are posted as multipart/form-data ([RFC 1867](https://www.ietf.org/rfc/rfc1867.txt)).  Note that:   *  The request must have a &#x60;X-Atlassian-Token: no-check&#x60; header, if not it is blocked. See [Special headers](#special-request-headers) for more information.  *  The name of the multipart/form-data parameter that contains the attachments must be &#x60;file&#x60;.  The following examples upload a file called *myfile.txt* to the issue *TEST-123*:  #### curl ####      curl - -location - -request POST &#39;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&#39;      -u &#39;email@example.com:&lt;api_token&gt;&#39;      -H &#39;X-Atlassian-Token: no-check&#39;      - -form &#39;file&#x3D;@\&quot;myfile.txt\&quot;&#39;  #### Node.js ####      // This code sample uses the &#39;node-fetch&#39; and &#39;form-data&#39; libraries:      // https://www.npmjs.com/package/node-fetch      // https://www.npmjs.com/package/form-data      const fetch &#x3D; require(&#39;node-fetch&#39;);      const FormData &#x3D; require(&#39;form-data&#39;);      const fs &#x3D; require(&#39;fs&#39;);           const filePath &#x3D; &#39;myfile.txt&#39;;      const form &#x3D; new FormData();      const stats &#x3D; fs.statSync(filePath);      const fileSizeInBytes &#x3D; stats.size;      const fileStream &#x3D; fs.createReadStream(filePath);           form.append(&#39;file&#39;, fileStream, {knownLength: fileSizeInBytes});           fetch(&#39;https://your-domain.atlassian.net/rest/api/3/issue/TEST-123/attachments&#39;, {          method: &#39;POST&#39;,          body: form,          headers: {              &#39;Authorization&#39;: &#x60;Basic ${Buffer.from(                  &#39;email@example.com:&#39;              ).toString(&#39;base64&#39;)}&#x60;,              &#39;Accept&#39;: &#39;application/json&#39;,              &#39;X-Atlassian-Token&#39;: &#39;no-check&#39;          }      })          .then(response &#x3D;&gt; {              console.log(                  &#x60;Response: ${response.status} ${response.statusText}&#x60;              );              return response.text();          })          .then(text &#x3D;&gt; console.log(text))          .catch(err &#x3D;&gt; console.error(err));  #### Java ####      // This code sample uses the  &#39;Unirest&#39; library:      // http://unirest.io/java.html      HttpResponse response &#x3D; Unirest.post(\&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\&quot;)              .basicAuth(\&quot;email@example.com\&quot;, \&quot;\&quot;)              .header(\&quot;Accept\&quot;, \&quot;application/json\&quot;)              .header(\&quot;X-Atlassian-Token\&quot;, \&quot;no-check\&quot;)              .field(\&quot;file\&quot;, new File(\&quot;myfile.txt\&quot;))              .asJson();                   System.out.println(response.getBody());  #### Python ####      # This code sample uses the &#39;requests&#39; library:      # http://docs.python-requests.org      import requests      from requests.auth import HTTPBasicAuth      import json           url &#x3D; \&quot;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments\&quot;           auth &#x3D; HTTPBasicAuth(\&quot;email@example.com\&quot;, \&quot;\&quot;)           headers &#x3D; {         \&quot;Accept\&quot;: \&quot;application/json\&quot;,         \&quot;X-Atlassian-Token\&quot;: \&quot;no-check\&quot;      }           response &#x3D; requests.request(         \&quot;POST\&quot;,         url,         headers &#x3D; headers,         auth &#x3D; auth,         files &#x3D; {              \&quot;file\&quot;: (\&quot;myfile.txt\&quot;, open(\&quot;myfile.txt\&quot;,\&quot;rb\&quot;), \&quot;application-type\&quot;)         }      )           print(json.dumps(json.loads(response.text), sort_keys&#x3D;True, indent&#x3D;4, separators&#x3D;(\&quot;,\&quot;, \&quot;: \&quot;)))  #### PHP ####      // This code sample uses the &#39;Unirest&#39; library:      // http://unirest.io/php.html      Unirest\\Request::auth(&#39;email@example.com&#39;, &#39;&#39;);           $headers &#x3D; array(        &#39;Accept&#39; &#x3D;&gt; &#39;application/json&#39;,        &#39;X-Atlassian-Token&#39; &#x3D;&gt; &#39;no-check&#39;      );           $parameters &#x3D; array(        &#39;file&#39; &#x3D;&gt; File::add(&#39;myfile.txt&#39;)      );           $response &#x3D; Unirest\\Request::post(        &#39;https://your-domain.atlassian.net/rest/api/2/issue/{issueIdOrKey}/attachments&#39;,        $headers,        $parameters      );           var_dump($response)  #### Forge ####      // This sample uses Atlassian Forge and the &#x60;form-data&#x60; library.      // https://developer.atlassian.com/platform/forge/      // https://www.npmjs.com/package/form-data      import api from \&quot;@forge/api\&quot;;      import FormData from \&quot;form-data\&quot;;           const form &#x3D; new FormData();      form.append(&#39;file&#39;, fileStream, {knownLength: fileSizeInBytes});           const response &#x3D; await api.asApp().requestJira(&#39;/rest/api/2/issue/{issueIdOrKey}/attachments&#39;, {          method: &#39;POST&#39;,          body: form,          headers: {              &#39;Accept&#39;: &#39;application/json&#39;,              &#39;X-Atlassian-Token&#39;: &#39;no-check&#39;          }      });           console.log(&#x60;Response: ${response.status} ${response.statusText}&#x60;);      console.log(await response.json());  Tip: Use a client library. Many client libraries have classes for handling multipart POST operations. For example, in Java, the Apache HTTP Components library provides a [MultiPartEntity](http://hc.apache.org/httpcomponents-client-ga/httpmime/apidocs/org/apache/http/entity/mime/MultipartEntity.html) class for multipart POST operations.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**    *  *Browse Projects* and *Create attachments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue that attachments are added to.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if any of the following is true:   *  the issue is not found.  *  the user does not have permission to view the issue.</response>
        /// <response code="413">The attachments exceed the maximum attachment size for issues. See [Configuring file attachments](https://confluence.atlassian.com/x/wIXKM) for details.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/{issueIdOrKey}/attachments")]
        [Consumes("multipart/form-data")]
        [ValidateModelState]
        [SwaggerOperation("AddAttachment")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Attachment>), description: "Returned if the request is successful.")]
        public virtual IActionResult AddAttachment([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Attachment>));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 413 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(413);
            string exampleJson = null;
            exampleJson = "[ {\n  \"thumbnail\" : \"thumbnail\",\n  \"filename\" : \"filename\",\n  \"size\" : 0,\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"self\",\n  \"id\" : \"id\",\n  \"mimeType\" : \"mimeType\",\n  \"content\" : \"content\"\n}, {\n  \"thumbnail\" : \"thumbnail\",\n  \"filename\" : \"filename\",\n  \"size\" : 0,\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"self\",\n  \"id\" : \"id\",\n  \"mimeType\" : \"mimeType\",\n  \"content\" : \"content\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Attachment>>(exampleJson)
            : default(List<Attachment>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all metadata for an expanded attachment
        /// </summary>
        /// <remarks>Returns the metadata for the contents of an attachment, if it is an archive, and metadata for the attachment itself. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned and metadata for the ZIP archive. Currently, only the ZIP archive format is supported.  Use this operation to retrieve data that is presented to the user, as this operation returns the metadata for the attachment itself, such as the attachment&#39;s ID and name. Otherwise, use [ Get contents metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-raw-get), which only returns the metadata for the attachment&#39;s contents.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <response code="200">Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">The user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.</response>
        /// <response code="409">Returned if the attachment is an archive, but not a supported archive format.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/{id}/expand/human")]
        [ValidateModelState]
        [SwaggerOperation("ExpandAttachmentForHumans")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachmentArchiveMetadataReadable), description: "Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.")]
        public virtual IActionResult ExpandAttachmentForHumans([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachmentArchiveMetadataReadable));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"totalEntryCount\" : 1,\n  \"entries\" : [ {\n    \"path\" : \"path\",\n    \"size\" : \"size\",\n    \"index\" : 0,\n    \"mediaType\" : \"mediaType\",\n    \"label\" : \"label\"\n  }, {\n    \"path\" : \"path\",\n    \"size\" : \"size\",\n    \"index\" : 0,\n    \"mediaType\" : \"mediaType\",\n    \"label\" : \"label\"\n  } ],\n  \"name\" : \"name\",\n  \"mediaType\" : \"mediaType\",\n  \"id\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttachmentArchiveMetadataReadable>(exampleJson)
            : default(AttachmentArchiveMetadataReadable);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get contents metadata for an expanded attachment
        /// </summary>
        /// <remarks>Returns the metadata for the contents of an attachment, if it is an archive. For example, if the attachment is a ZIP archive, then information about the files in the archive is returned. Currently, only the ZIP archive format is supported.  Use this operation if you are processing the data without presenting it to the user, as this operation only returns the metadata for the contents of the attachment. Otherwise, to retrieve data to present to the user, use [ Get all metadata for an expanded attachment](#api-rest-api-3-attachment-id-expand-human-get) which also returns the metadata for the attachment itself, such as the attachment&#39;s ID and name.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <response code="200">Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">The user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.</response>
        /// <response code="409">Returned if the attachment is an archive, but not a supported archive format.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/{id}/expand/raw")]
        [ValidateModelState]
        [SwaggerOperation("ExpandAttachmentForMachines")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachmentArchiveImpl), description: "Returned if the request is successful. If an empty list is returned in the response, the attachment is empty, corrupt, or not an archive.")]
        public virtual IActionResult ExpandAttachmentForMachines([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachmentArchiveImpl));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"totalEntryCount\" : 1,\n  \"entries\" : [ {\n    \"entryIndex\" : 0,\n    \"size\" : 6,\n    \"name\" : \"name\",\n    \"mediaType\" : \"mediaType\",\n    \"abbreviatedName\" : \"abbreviatedName\"\n  }, {\n    \"entryIndex\" : 0,\n    \"size\" : 6,\n    \"name\" : \"name\",\n    \"mediaType\" : \"mediaType\",\n    \"abbreviatedName\" : \"abbreviatedName\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttachmentArchiveImpl>(exampleJson)
            : default(AttachmentArchiveImpl);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get attachment metadata
        /// </summary>
        /// <remarks>Returns the metadata for an attachment. Note that the attachment itself is not returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachment")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachmentMetadata), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAttachment([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachmentMetadata));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"thumbnail\" : \"thumbnail\",\n  \"filename\" : \"filename\",\n  \"size\" : 6,\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0,\n  \"mimeType\" : \"mimeType\",\n  \"content\" : \"content\",\n  \"properties\" : {\n    \"key\" : \"\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttachmentMetadata>(exampleJson)
            : default(AttachmentMetadata);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get attachment content
        /// </summary>
        /// <remarks>Returns the contents of an attachment. A &#x60;Range&#x60; header can be set to define a range of bytes within the attachment to download. See the [HTTP Range header standard](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Range) for details.  To return a thumbnail of the attachment, use [Get attachment thumbnail](#api-rest-api-3-attachment-thumbnail-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="redirect">Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to &#x60;false&#x60; to avoid making multiple requests to download the attachment.</param>
        /// <response code="200">Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;.</response>
        /// <response code="206">Returned if the request is successful when a &#x60;Range&#x60; header is provided and &#x60;redirect&#x60; is set to &#x60;false&#x60;.</response>
        /// <response code="303">Returned if the request is successful. See the &#x60;Location&#x60; header for the download URL.</response>
        /// <response code="400">Returned if the range supplied in the &#x60;Range&#x60; header is malformed.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="403">The user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.</response>
        /// <response code="416">Returned if the server is unable to satisfy the range of bytes provided.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/content/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentContent")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;.")]
        public virtual IActionResult GetAttachmentContent([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "redirect")]bool? redirect)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 206 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(206);
            //TODO: Uncomment the next line to return response 303 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(303);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 416 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(416);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Jira attachment settings
        /// </summary>
        /// <remarks>Returns the attachment settings, that is, whether attachments are enabled and the maximum attachment size allowed.  Note that there are also [project permissions](https://confluence.atlassian.com/x/yodKLg) that restrict whether users can create and delete attachments.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/meta")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentMeta")]
        [SwaggerResponse(statusCode: 200, type: typeof(AttachmentSettings), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAttachmentMeta()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AttachmentSettings));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"uploadLimit\" : 0,\n  \"enabled\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AttachmentSettings>(exampleJson)
            : default(AttachmentSettings);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get attachment thumbnail
        /// </summary>
        /// <remarks>Returns the thumbnail of an attachment.  To return the attachment contents, use [Get attachment content](#api-rest-api-3-attachment-content-id-get).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the issue containing the attachment:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <param name="redirect">Whether a redirect is provided for the attachment download. Clients that do not automatically follow redirects can set this to &#x60;false&#x60; to avoid making multiple requests to download the attachment.</param>
        /// <param name="fallbackToDefault">Whether a default thumbnail is returned when the requested thumbnail is not found.</param>
        /// <param name="width">The maximum width to scale the thumbnail to.</param>
        /// <param name="height">The maximum height to scale the thumbnail to.</param>
        /// <response code="200">Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;.</response>
        /// <response code="303">Returned if the request is successful. See the &#x60;Location&#x60; header for the download URL.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="403">The user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.  *  &#x60;fallbackToDefault&#x60; is &#x60;false&#x60; and the request thumbnail cannot be downloaded.</response>
        [HttpGet]
        [Route("/rest/api/3/attachment/thumbnail/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetAttachmentThumbnail")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Returned if the request is successful when &#x60;redirect&#x60; is set to &#x60;false&#x60;.")]
        public virtual IActionResult GetAttachmentThumbnail([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "redirect")]bool? redirect, [FromQuery (Name = "fallbackToDefault")]bool? fallbackToDefault, [FromQuery (Name = "width")]int? width, [FromQuery (Name = "height")]int? height)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 303 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(303);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete attachment
        /// </summary>
        /// <remarks>Deletes an attachment from an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** For the project holding the issue containing the attachment:   *  *Delete own attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by the calling user.  *  *Delete all attachments* [project permission](https://confluence.atlassian.com/x/yodKLg) to delete an attachment created by any user.</remarks>
        /// <param name="id">The ID of the attachment.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if:   *  the attachment is not found.  *  attachments are disabled in the Jira settings.</response>
        [HttpDelete]
        [Route("/rest/api/3/attachment/{id}")]
        [ValidateModelState]
        [SwaggerOperation("RemoveAttachment")]
        public virtual IActionResult RemoveAttachment([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
