/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class FilterSharingApiController : ControllerBase
    { 
        /// <summary>
        /// Add share permission
        /// </summary>
        /// <remarks>Add a share permissions to a filter. If you add a global share permission (one for all logged-in users or the public) it will overwrite all share permissions for the filter.  Be aware that this operation uses different objects for updating share permissions compared to [Update filter](#api-rest-api-3-filter-id-put).  **[Permissions](#permissions) required:** *Share dashboards and filters* [global permission](https://confluence.atlassian.com/x/x4dKLg) and the user must own the filter.</remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="sharePermissionInputBean"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  the request object is invalid. For example, it contains an invalid type, the ID does not match the type, or the project or group is not found.  *  the user does not own the filter.  *  the user does not have the required permissions.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter.</response>
        [HttpPost]
        [Route("/rest/api/3/filter/{id}/permission")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddSharePermission")]
        [SwaggerResponse(statusCode: 201, type: typeof(List<SharePermission>), description: "Returned if the request is successful.")]
        public virtual IActionResult AddSharePermission([FromRoute (Name = "id")][Required]long id, [FromBody]SharePermissionInputBean sharePermissionInputBean)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(List<SharePermission>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"role\" : \"\",\n  \"project\" : \"\",\n  \"id\" : 6,\n  \"type\" : \"user\",\n  \"user\" : \"\",\n  \"group\" : \"\"\n}, {\n  \"role\" : \"\",\n  \"project\" : \"\",\n  \"id\" : 6,\n  \"type\" : \"user\",\n  \"user\" : \"\",\n  \"group\" : \"\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SharePermission>>(exampleJson)
            : default(List<SharePermission>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete share permission
        /// </summary>
        /// <remarks>Deletes a share permission from a filter.  **[Permissions](#permissions) required:** Permission to access Jira and the user must own the filter.</remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="permissionId">The ID of the share permission.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the filter is not found.  *  the user does not own the filter.</response>
        [HttpDelete]
        [Route("/rest/api/3/filter/{id}/permission/{permissionId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteSharePermission")]
        public virtual IActionResult DeleteSharePermission([FromRoute (Name = "id")][Required]long id, [FromRoute (Name = "permissionId")][Required]long permissionId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get default share scope
        /// </summary>
        /// <remarks>Returns the default sharing settings for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/filter/defaultShareScope")]
        [ValidateModelState]
        [SwaggerOperation("GetDefaultShareScope")]
        [SwaggerResponse(statusCode: 200, type: typeof(DefaultShareScope), description: "Returned if the request is successful.")]
        public virtual IActionResult GetDefaultShareScope()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DefaultShareScope));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"scope\" : \"GLOBAL\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DefaultShareScope>(exampleJson)
            : default(DefaultShareScope);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get share permission
        /// </summary>
        /// <remarks>Returns a share permission for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, a share permission is only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.</remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <param name="permissionId">The ID of the share permission.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the filter is not found.  *  the permission is not found.  *  the user does not have permission to view the filter.</response>
        [HttpGet]
        [Route("/rest/api/3/filter/{id}/permission/{permissionId}")]
        [ValidateModelState]
        [SwaggerOperation("GetSharePermission")]
        [SwaggerResponse(statusCode: 200, type: typeof(SharePermission), description: "Returned if the request is successful.")]
        public virtual IActionResult GetSharePermission([FromRoute (Name = "id")][Required]long id, [FromRoute (Name = "permissionId")][Required]long permissionId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SharePermission));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"role\" : \"\",\n  \"project\" : \"\",\n  \"id\" : 6,\n  \"type\" : \"user\",\n  \"user\" : \"\",\n  \"group\" : \"\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SharePermission>(exampleJson)
            : default(SharePermission);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get share permissions
        /// </summary>
        /// <remarks>Returns the share permissions for a filter. A filter can be shared with groups, projects, all logged-in users, or the public. Sharing with all logged-in users or the public is known as a global share permission.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None, however, share permissions are only returned for:   *  filters owned by the user.  *  filters shared with a group that the user is a member of.  *  filters shared with a private project that the user has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for.  *  filters shared with a public project.  *  filters shared with the public.</remarks>
        /// <param name="id">The ID of the filter.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the filter is not found.  *  the user does not have permission to view the filter.</response>
        [HttpGet]
        [Route("/rest/api/3/filter/{id}/permission")]
        [ValidateModelState]
        [SwaggerOperation("GetSharePermissions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<SharePermission>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetSharePermissions([FromRoute (Name = "id")][Required]long id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<SharePermission>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"role\" : \"\",\n  \"project\" : \"\",\n  \"id\" : 6,\n  \"type\" : \"user\",\n  \"user\" : \"\",\n  \"group\" : \"\"\n}, {\n  \"role\" : \"\",\n  \"project\" : \"\",\n  \"id\" : 6,\n  \"type\" : \"user\",\n  \"user\" : \"\",\n  \"group\" : \"\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<SharePermission>>(exampleJson)
            : default(List<SharePermission>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Set default share scope
        /// </summary>
        /// <remarks>Sets the default sharing for new filters and dashboards for a user.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="defaultShareScope"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if an invalid scope is set.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpPut]
        [Route("/rest/api/3/filter/defaultShareScope")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetDefaultShareScope")]
        [SwaggerResponse(statusCode: 200, type: typeof(DefaultShareScope), description: "Returned if the request is successful.")]
        public virtual IActionResult SetDefaultShareScope([FromBody]DefaultShareScope defaultShareScope)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DefaultShareScope));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"scope\" : \"GLOBAL\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DefaultShareScope>(exampleJson)
            : default(DefaultShareScope);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
