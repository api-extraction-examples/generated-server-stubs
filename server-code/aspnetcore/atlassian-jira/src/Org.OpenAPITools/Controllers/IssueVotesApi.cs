/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueVotesApiController : ControllerBase
    { 
        /// <summary>
        /// Add vote
        /// </summary>
        /// <remarks>Adds the user&#39;s vote to an issue. This is the equivalent of the user clicking *Vote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  voting is disabled.  *  the issue is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/{issueIdOrKey}/votes")]
        [ValidateModelState]
        [SwaggerOperation("AddVote")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult AddVote([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get votes
        /// </summary>
        /// <remarks>Returns details about the votes on an issue.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  Note that users with the necessary permissions for this operation but without the *View voters and watchers* project permissions are not returned details in the &#x60;voters&#x60; field.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  voting is disabled.  *  the user does not have permission to view the issue.  *  the issue is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/votes")]
        [ValidateModelState]
        [SwaggerOperation("GetVotes")]
        [SwaggerResponse(statusCode: 200, type: typeof(Votes), description: "Returned if the request is successful.")]
        public virtual IActionResult GetVotes([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Votes));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"hasVoted\" : true,\n  \"voters\" : [ {\n    \"displayName\" : \"displayName\",\n    \"accountType\" : \"atlassian\",\n    \"active\" : true,\n    \"timeZone\" : \"timeZone\",\n    \"locale\" : \"locale\",\n    \"accountId\" : \"accountId\",\n    \"emailAddress\" : \"emailAddress\",\n    \"expand\" : \"expand\",\n    \"name\" : \"name\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"key\" : \"key\"\n  }, {\n    \"displayName\" : \"displayName\",\n    \"accountType\" : \"atlassian\",\n    \"active\" : true,\n    \"timeZone\" : \"timeZone\",\n    \"locale\" : \"locale\",\n    \"accountId\" : \"accountId\",\n    \"emailAddress\" : \"emailAddress\",\n    \"expand\" : \"expand\",\n    \"name\" : \"name\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"key\" : \"key\"\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"votes\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Votes>(exampleJson)
            : default(Votes);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete vote
        /// </summary>
        /// <remarks>Deletes a user&#39;s vote from an issue. This is the equivalent of the user clicking *Unvote* on an issue in Jira.  This operation requires the **Allow users to vote on issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  voting is disabled.  *  the user has not voted on the issue.  *  the issue is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/issue/{issueIdOrKey}/votes")]
        [ValidateModelState]
        [SwaggerOperation("RemoveVote")]
        public virtual IActionResult RemoveVote([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
