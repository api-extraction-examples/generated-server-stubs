/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectComponentsApiController : ControllerBase
    { 
        /// <summary>
        /// Create component
        /// </summary>
        /// <remarks>Creates a component. Use components to provide containers for issues within a project.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project in which the component is created or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="projectComponent"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  the user is not found.  *  &#x60;name&#x60; is not provided.  *  &#x60;name&#x60; is over 255 characters in length.  *  &#x60;projectId&#x60; is not provided.  *  &#x60;assigneeType&#x60; is an invalid value.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to browse the project containing the component.</response>
        [HttpPost]
        [Route("/rest/api/3/component")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateComponent")]
        [SwaggerResponse(statusCode: 201, type: typeof(ProjectComponent), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateComponent([FromBody]ProjectComponent projectComponent)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ProjectComponent));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"leadUserName\" : \"leadUserName\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"leadAccountId\" : \"leadAccountId\",\n  \"isAssigneeTypeValid\" : true,\n  \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n  \"name\" : \"name\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"assigneeType\" : \"PROJECT_DEFAULT\",\n  \"id\" : \"id\",\n  \"projectId\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectComponent>(exampleJson)
            : default(ProjectComponent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete component
        /// </summary>
        /// <remarks>Deletes a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the component.</param>
        /// <param name="moveIssuesTo">The ID of the component to replace the deleted component. If this value is null no replacement is made.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.</response>
        /// <response code="404">Returned if:   *  the component is not found.  *  the replacement component is not found.  *  the user does not have permission to browse the project containing the component.</response>
        [HttpDelete]
        [Route("/rest/api/3/component/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteComponent")]
        public virtual IActionResult DeleteComponent([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "moveIssuesTo")]string moveIssuesTo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get component
        /// </summary>
        /// <remarks>Returns a component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for project containing the component.</remarks>
        /// <param name="id">The ID of the component.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the component is not found or the user does not have permission to browse the project containing the component.</response>
        [HttpGet]
        [Route("/rest/api/3/component/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetComponent")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectComponent), description: "Returned if the request is successful.")]
        public virtual IActionResult GetComponent([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectComponent));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"leadUserName\" : \"leadUserName\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"leadAccountId\" : \"leadAccountId\",\n  \"isAssigneeTypeValid\" : true,\n  \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n  \"name\" : \"name\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"assigneeType\" : \"PROJECT_DEFAULT\",\n  \"id\" : \"id\",\n  \"projectId\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectComponent>(exampleJson)
            : default(ProjectComponent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get component issues count
        /// </summary>
        /// <remarks>Returns the counts of issues assigned to the component.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="id">The ID of the component.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the component is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/component/{id}/relatedIssueCounts")]
        [ValidateModelState]
        [SwaggerOperation("GetComponentRelatedIssues")]
        [SwaggerResponse(statusCode: 200, type: typeof(ComponentIssuesCount), description: "Returned if the request is successful.")]
        public virtual IActionResult GetComponentRelatedIssues([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ComponentIssuesCount));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"self\" : \"https://openapi-generator.tech\",\n  \"issueCount\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ComponentIssuesCount>(exampleJson)
            : default(ComponentIssuesCount);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get project components
        /// </summary>
        /// <remarks>Returns all components in a project. See the [Get project components paginated](#api-rest-api-3-project-projectIdOrKey-component-get) resource if you want to get a full list of components with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.</remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/components")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectComponents")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProjectComponent>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetProjectComponents([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ProjectComponent>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"leadUserName\" : \"leadUserName\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"leadAccountId\" : \"leadAccountId\",\n  \"isAssigneeTypeValid\" : true,\n  \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n  \"name\" : \"name\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"assigneeType\" : \"PROJECT_DEFAULT\",\n  \"id\" : \"id\",\n  \"projectId\" : 0\n}, {\n  \"leadUserName\" : \"leadUserName\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"leadAccountId\" : \"leadAccountId\",\n  \"isAssigneeTypeValid\" : true,\n  \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n  \"name\" : \"name\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"assigneeType\" : \"PROJECT_DEFAULT\",\n  \"id\" : \"id\",\n  \"projectId\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ProjectComponent>>(exampleJson)
            : default(List<ProjectComponent>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get project components paginated
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of all components in a project. See the [Get project components](#api-rest-api-3-project-projectIdOrKey-components-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.</remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by the component description.  *  &#x60;issueCount&#x60; Sorts by the count of issues associated with the component.  *  &#x60;lead&#x60; Sorts by the user key of the component&#39;s project lead.  *  &#x60;name&#x60; Sorts by component name.</param>
        /// <param name="query">Filter the results using a literal string. Components with a matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive).</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/component")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectComponentsPaginated")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanComponentWithIssueCount), description: "Returned if the request is successful.")]
        public virtual IActionResult GetProjectComponentsPaginated([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "orderBy")]string orderBy, [FromQuery (Name = "query")]string query)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanComponentWithIssueCount));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"description\" : \"description\",\n    \"project\" : \"project\",\n    \"issueCount\" : 5,\n    \"lead\" : \"\",\n    \"isAssigneeTypeValid\" : true,\n    \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n    \"name\" : \"name\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"realAssignee\" : \"\",\n    \"assignee\" : \"\",\n    \"assigneeType\" : \"PROJECT_DEFAULT\",\n    \"id\" : \"id\",\n    \"projectId\" : 5\n  }, {\n    \"description\" : \"description\",\n    \"project\" : \"project\",\n    \"issueCount\" : 5,\n    \"lead\" : \"\",\n    \"isAssigneeTypeValid\" : true,\n    \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n    \"name\" : \"name\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"realAssignee\" : \"\",\n    \"assignee\" : \"\",\n    \"assigneeType\" : \"PROJECT_DEFAULT\",\n    \"id\" : \"id\",\n    \"projectId\" : 5\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanComponentWithIssueCount>(exampleJson)
            : default(PageBeanComponentWithIssueCount);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update component
        /// </summary>
        /// <remarks>Updates a component. Any fields included in the request are overwritten. If &#x60;leadAccountId&#x60; is an empty string (\&quot;\&quot;) the component lead is removed.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the component or *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the component.</param>
        /// <param name="projectComponent"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  the user is not found.  *  &#x60;assigneeType&#x60; is an invalid value.  *  &#x60;name&#x60; is over 255 characters in length.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to manage the project containing the component or does not have permission to administer Jira.</response>
        /// <response code="404">Returned if the component is not found or the user does not have permission to browse the project containing the component.</response>
        [HttpPut]
        [Route("/rest/api/3/component/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateComponent")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectComponent), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateComponent([FromRoute (Name = "id")][Required]string id, [FromBody]ProjectComponent projectComponent)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectComponent));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"leadUserName\" : \"leadUserName\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"leadAccountId\" : \"leadAccountId\",\n  \"isAssigneeTypeValid\" : true,\n  \"realAssigneeType\" : \"PROJECT_DEFAULT\",\n  \"name\" : \"name\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"assigneeType\" : \"PROJECT_DEFAULT\",\n  \"id\" : \"id\",\n  \"projectId\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectComponent>(exampleJson)
            : default(ProjectComponent);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
