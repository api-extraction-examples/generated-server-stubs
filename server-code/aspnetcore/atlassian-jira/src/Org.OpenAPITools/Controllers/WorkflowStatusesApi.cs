/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WorkflowStatusesApiController : ControllerBase
    { 
        /// <summary>
        /// Get status
        /// </summary>
        /// <remarks>Returns a status. The status must be associated with an active workflow to be returned.  If a name is used on more than one status, only the status found first is returned. Therefore, identifying the status by its ID may be preferable.  This operation can be accessed anonymously.  [Permissions](#permissions) required: None.</remarks>
        /// <param name="idOrName">The ID or name of the status.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the status is not found.  *  the status is not associated with a workflow.  *  the user does not have the required permissions.</response>
        [HttpGet]
        [Route("/rest/api/3/status/{idOrName}")]
        [ValidateModelState]
        [SwaggerOperation("GetStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(StatusDetails), description: "Returned if the request is successful.")]
        public virtual IActionResult GetStatus([FromRoute (Name = "idOrName")][Required]string idOrName)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StatusDetails));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StatusDetails>(exampleJson)
            : default(StatusDetails);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all statuses
        /// </summary>
        /// <remarks>Returns a list of all statuses associated with active workflows.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/status")]
        [ValidateModelState]
        [SwaggerOperation("GetStatuses")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<StatusDetails>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetStatuses()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<StatusDetails>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\"\n}, {\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"iconUrl\" : \"iconUrl\",\n  \"id\" : \"id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<StatusDetails>>(exampleJson)
            : default(List<StatusDetails>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
