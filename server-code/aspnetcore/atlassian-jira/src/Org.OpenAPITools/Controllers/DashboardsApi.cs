/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DashboardsApiController : ControllerBase
    { 
        /// <summary>
        /// Add gadget to dashboard
        /// </summary>
        /// <remarks>Adds a gadget to a dashboard.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="dashboardGadgetSettings"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/dashboard/{dashboardId}/gadget")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddGadget")]
        [SwaggerResponse(statusCode: 200, type: typeof(DashboardGadget), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the dashboard is not found.")]
        public virtual IActionResult AddGadget([FromRoute (Name = "dashboardId")][Required]long dashboardId, [FromBody]DashboardGadgetSettings dashboardGadgetSettings)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DashboardGadget));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"color\" : \"blue\",\n  \"id\" : 0,\n  \"title\" : \"title\",\n  \"uri\" : \"uri\",\n  \"moduleKey\" : \"moduleKey\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DashboardGadget>(exampleJson)
            : default(DashboardGadget);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Copy dashboard
        /// </summary>
        /// <remarks>Copies a dashboard. Any values provided in the &#x60;dashboard&#x60; parameter replace those in the copied dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be copied must be owned by or shared with the user.</remarks>
        /// <param name="id"></param>
        /// <param name="dashboardDetails">Dashboard details.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.</response>
        [HttpPost]
        [Route("/rest/api/3/dashboard/{id}/copy")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CopyDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dashboard), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.")]
        public virtual IActionResult CopyDashboard([FromRoute (Name = "id")][Required]string id, [FromBody]DashboardDetails dashboardDetails)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dashboard));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"automaticRefreshMs\" : 0,\n  \"description\" : \"description\",\n  \"isWritable\" : true,\n  \"view\" : \"view\",\n  \"editPermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"popularity\" : 1,\n  \"name\" : \"name\",\n  \"rank\" : 5,\n  \"self\" : \"https://openapi-generator.tech\",\n  \"systemDashboard\" : true,\n  \"id\" : \"id\",\n  \"sharePermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"isFavourite\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Dashboard>(exampleJson)
            : default(Dashboard);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create dashboard
        /// </summary>
        /// <remarks>Creates a dashboard.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="dashboardDetails">Dashboard details.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpPost]
        [Route("/rest/api/3/dashboard")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dashboard), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult CreateDashboard([FromBody]DashboardDetails dashboardDetails)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dashboard));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"automaticRefreshMs\" : 0,\n  \"description\" : \"description\",\n  \"isWritable\" : true,\n  \"view\" : \"view\",\n  \"editPermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"popularity\" : 1,\n  \"name\" : \"name\",\n  \"rank\" : 5,\n  \"self\" : \"https://openapi-generator.tech\",\n  \"systemDashboard\" : true,\n  \"id\" : \"id\",\n  \"sharePermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"isFavourite\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Dashboard>(exampleJson)
            : default(Dashboard);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete dashboard
        /// </summary>
        /// <remarks>Deletes a dashboard.  **[Permissions](#permissions) required:** None  The dashboard to be deleted must be owned by the user.</remarks>
        /// <param name="id">The ID of the dashboard.</param>
        /// <response code="204">Returned if the dashboard is deleted.</response>
        /// <response code="400">400 response</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpDelete]
        [Route("/rest/api/3/dashboard/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDashboard")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "400 response")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult DeleteDashboard([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete dashboard item property
        /// </summary>
        /// <remarks>Deletes a dashboard item property.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property.</param>
        /// <response code="204">Returned if the dashboard item property is deleted.</response>
        /// <response code="400">Returned if the dashboard or dashboard item ID is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user is not the owner of the dashboard.</response>
        /// <response code="404">Returned if the dashboard item is not found or the dashboard is not shared with the user.</response>
        [HttpDelete]
        [Route("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDashboardItemProperty")]
        public virtual IActionResult DeleteDashboardItemProperty([FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "propertyKey")][Required]string propertyKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get available gadgets
        /// </summary>
        /// <remarks>Gets a list of all available gadgets that can be added to all dashboards.  **[Permissions](#permissions) required:** None.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">400 response</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/gadgets")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAvailableDashboardGadgets")]
        [SwaggerResponse(statusCode: 200, type: typeof(AvailableDashboardGadgetsResponse), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "400 response")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult GetAllAvailableDashboardGadgets()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AvailableDashboardGadgetsResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"gadgets\" : [ {\n    \"title\" : \"title\",\n    \"uri\" : \"uri\",\n    \"moduleKey\" : \"moduleKey\"\n  }, {\n    \"title\" : \"title\",\n    \"uri\" : \"uri\",\n    \"moduleKey\" : \"moduleKey\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AvailableDashboardGadgetsResponse>(exampleJson)
            : default(AvailableDashboardGadgetsResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all dashboards
        /// </summary>
        /// <remarks>Returns a list of dashboards owned by or shared with the user. The list may be filtered to include only favorite or owned dashboards.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="filter">The filter applied to the list of dashboards. Valid values are:   *  &#x60;favourite&#x60; Returns dashboards the user has marked as favorite.  *  &#x60;my&#x60; Returns dashboards owned by the user.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard")]
        [ValidateModelState]
        [SwaggerOperation("GetAllDashboards")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageOfDashboards), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is invalid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult GetAllDashboards([FromQuery (Name = "filter")]string filter, [FromQuery (Name = "startAt")]int? startAt, [FromQuery (Name = "maxResults")]int? maxResults)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageOfDashboards));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"next\" : \"next\",\n  \"total\" : 7,\n  \"maxResults\" : 5,\n  \"prev\" : \"prev\",\n  \"dashboards\" : [ {\n    \"automaticRefreshMs\" : 0,\n    \"description\" : \"description\",\n    \"isWritable\" : true,\n    \"view\" : \"view\",\n    \"editPermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"popularity\" : 1,\n    \"name\" : \"name\",\n    \"rank\" : 5,\n    \"self\" : \"https://openapi-generator.tech\",\n    \"systemDashboard\" : true,\n    \"id\" : \"id\",\n    \"sharePermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"isFavourite\" : true\n  }, {\n    \"automaticRefreshMs\" : 0,\n    \"description\" : \"description\",\n    \"isWritable\" : true,\n    \"view\" : \"view\",\n    \"editPermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"popularity\" : 1,\n    \"name\" : \"name\",\n    \"rank\" : 5,\n    \"self\" : \"https://openapi-generator.tech\",\n    \"systemDashboard\" : true,\n    \"id\" : \"id\",\n    \"sharePermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"isFavourite\" : true\n  } ],\n  \"startAt\" : 2\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageOfDashboards>(exampleJson)
            : default(PageOfDashboards);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get gadgets
        /// </summary>
        /// <remarks>Returns a list of dashboard gadgets on a dashboard.  This operation returns:   *  Gadgets from a list of IDs, when &#x60;id&#x60; is set.  *  Gadgets with a module key, when &#x60;moduleKey&#x60; is set.  *  Gadgets from a list of URIs, when &#x60;uri&#x60; is set.  *  All gadgets, when no other parameters are set.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="moduleKey">The list of gadgets module keys. To include multiple module keys, separate module keys with ampersand: &#x60;moduleKey&#x3D;key:one&amp;moduleKey&#x3D;key:two&#x60;.</param>
        /// <param name="uri">The list of gadgets URIs. To include multiple URIs, separate URIs with ampersand: &#x60;uri&#x3D;/rest/example/uri/1&amp;uri&#x3D;/rest/example/uri/2&#x60;.</param>
        /// <param name="gadgetId">The list of gadgets IDs. To include multiple IDs, separate IDs with ampersand: &#x60;gadgetId&#x3D;10000&amp;gadgetId&#x3D;10001&#x60;.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if the dashboard is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/{dashboardId}/gadget")]
        [ValidateModelState]
        [SwaggerOperation("GetAllGadgets")]
        [SwaggerResponse(statusCode: 200, type: typeof(DashboardGadgetResponse), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the dashboard is not found.")]
        public virtual IActionResult GetAllGadgets([FromRoute (Name = "dashboardId")][Required]long dashboardId, [FromQuery (Name = "moduleKey")]List<string> moduleKey, [FromQuery (Name = "uri")]List<string> uri, [FromQuery (Name = "gadgetId")]List<long> gadgetId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DashboardGadgetResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"gadgets\" : [ {\n    \"color\" : \"blue\",\n    \"id\" : 0,\n    \"title\" : \"title\",\n    \"uri\" : \"uri\",\n    \"moduleKey\" : \"moduleKey\"\n  }, {\n    \"color\" : \"blue\",\n    \"id\" : 0,\n    \"title\" : \"title\",\n    \"uri\" : \"uri\",\n    \"moduleKey\" : \"moduleKey\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DashboardGadgetResponse>(exampleJson)
            : default(DashboardGadgetResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get dashboard
        /// </summary>
        /// <remarks>Returns a dashboard.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.  However, to get a dashboard, the dashboard must be shared with the user or the user must own it. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users.</remarks>
        /// <param name="id">The ID of the dashboard.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">400 response</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard is not found or the dashboard is not owned by or shared with the user.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dashboard), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "400 response")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult GetDashboard([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dashboard));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"automaticRefreshMs\" : 0,\n  \"description\" : \"description\",\n  \"isWritable\" : true,\n  \"view\" : \"view\",\n  \"editPermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"popularity\" : 1,\n  \"name\" : \"name\",\n  \"rank\" : 5,\n  \"self\" : \"https://openapi-generator.tech\",\n  \"systemDashboard\" : true,\n  \"id\" : \"id\",\n  \"sharePermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"isFavourite\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Dashboard>(exampleJson)
            : default(Dashboard);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get dashboard item property
        /// </summary>
        /// <remarks>Returns the key and value of a dashboard item property.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard, the dashboard item, or dashboard item property is not found, or the dashboard is not owned by or shared with the user.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")]
        [ValidateModelState]
        [SwaggerOperation("GetDashboardItemProperty")]
        [SwaggerResponse(statusCode: 200, type: typeof(EntityProperty), description: "Returned if the request is successful.")]
        public virtual IActionResult GetDashboardItemProperty([FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "propertyKey")][Required]string propertyKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(EntityProperty));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"value\" : \"\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<EntityProperty>(exampleJson)
            : default(EntityProperty);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get dashboard item property keys
        /// </summary>
        /// <remarks>Returns the keys of all properties for a dashboard item.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard or have the dashboard shared with them. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard. The System dashboard is considered to be shared with all other users, and is accessible to anonymous users when Jira’s anonymous access is permitted.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard or dashboard item is not found, or the dashboard is not owned by or shared with the user.</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties")]
        [ValidateModelState]
        [SwaggerOperation("GetDashboardItemPropertyKeys")]
        [SwaggerResponse(statusCode: 200, type: typeof(PropertyKeys), description: "Returned if the request is successful.")]
        public virtual IActionResult GetDashboardItemPropertyKeys([FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromRoute (Name = "itemId")][Required]string itemId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PropertyKeys));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"keys\" : [ {\n    \"self\" : \"self\",\n    \"key\" : \"key\"\n  }, {\n    \"self\" : \"self\",\n    \"key\" : \"key\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PropertyKeys>(exampleJson)
            : default(PropertyKeys);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Search for dashboards
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of dashboards. This operation is similar to [Get dashboards](#api-rest-api-3-dashboard-get) except that the results can be refined to include dashboards that have specific attributes. For example, dashboards with a particular name. When multiple attributes are specified only filters matching all attributes are returned.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The following dashboards that match the query parameters are returned:   *  Dashboards owned by the user. Not returned for anonymous users.  *  Dashboards shared with a group that the user is a member of. Not returned for anonymous users.  *  Dashboards shared with a private project that the user can browse. Not returned for anonymous users.  *  Dashboards shared with a public project.  *  Dashboards shared with the public.</remarks>
        /// <param name="dashboardName">String used to perform a case-insensitive partial match with &#x60;name&#x60;.</param>
        /// <param name="accountId">User account ID used to return dashboards with the matching &#x60;owner.accountId&#x60;. This parameter cannot be used with the &#x60;owner&#x60; parameter.</param>
        /// <param name="owner">This parameter is deprecated because of privacy changes. Use &#x60;accountId&#x60; instead. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details. User name used to return dashboards with the matching &#x60;owner.name&#x60;. This parameter cannot be used with the &#x60;accountId&#x60; parameter.</param>
        /// <param name="groupname">As a group&#39;s name can change, use of &#x60;groupId&#x60; is recommended. Group name used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.name&#x60;. This parameter cannot be used with the &#x60;groupId&#x60; parameter.</param>
        /// <param name="groupId">Group ID used to return dashboards that are shared with a group that matches &#x60;sharePermissions.group.groupId&#x60;. This parameter cannot be used with the &#x60;groupname&#x60; parameter.</param>
        /// <param name="projectId">Project ID used to returns dashboards that are shared with a project that matches &#x60;sharePermissions.project.id&#x60;.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by dashboard description. Note that this sort works independently of whether the expand to display the description field is in use.  *  &#x60;favourite_count&#x60; Sorts by dashboard popularity.  *  &#x60;id&#x60; Sorts by dashboard ID.  *  &#x60;is_favourite&#x60; Sorts by whether the dashboard is marked as a favorite.  *  &#x60;name&#x60; Sorts by dashboard name.  *  &#x60;owner&#x60; Sorts by dashboard owner name.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="status">The status to filter by. It may be active, archived or deleted.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about dashboard in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;description&#x60; Returns the description of the dashboard.  *  &#x60;owner&#x60; Returns the owner of the dashboard.  *  &#x60;viewUrl&#x60; Returns the URL that is used to view the dashboard.  *  &#x60;favourite&#x60; Returns &#x60;isFavourite&#x60;, an indicator of whether the user has set the dashboard as a favorite.  *  &#x60;favouritedCount&#x60; Returns &#x60;popularity&#x60;, a count of how many users have set this dashboard as a favorite.  *  &#x60;sharePermissions&#x60; Returns details of the share permissions defined for the dashboard.  *  &#x60;editPermissions&#x60; Returns details of the edit permissions defined for the dashboard.  *  &#x60;isWritable&#x60; Returns whether the current user has permission to edit the dashboard.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  &#x60;orderBy&#x60; is invalid.  *  &#x60;expand&#x60; includes an invalid value.  *  &#x60;accountId&#x60; and &#x60;owner&#x60; are provided.  *  &#x60;groupname&#x60; and &#x60;groupId&#x60; are provided.</response>
        /// <response code="401">401 response</response>
        [HttpGet]
        [Route("/rest/api/3/dashboard/search")]
        [ValidateModelState]
        [SwaggerOperation("GetDashboardsPaginated")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanDashboard), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if:   *  &#x60;orderBy&#x60; is invalid.  *  &#x60;expand&#x60; includes an invalid value.  *  &#x60;accountId&#x60; and &#x60;owner&#x60; are provided.  *  &#x60;groupname&#x60; and &#x60;groupId&#x60; are provided.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "401 response")]
        public virtual IActionResult GetDashboardsPaginated([FromQuery (Name = "dashboardName")]string dashboardName, [FromQuery (Name = "accountId")] [MaxLength(128)]string accountId, [FromQuery (Name = "owner")]string owner, [FromQuery (Name = "groupname")]string groupname, [FromQuery (Name = "groupId")]string groupId, [FromQuery (Name = "projectId")]long? projectId, [FromQuery (Name = "orderBy")]string orderBy, [FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "status")]string status, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanDashboard));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"automaticRefreshMs\" : 0,\n    \"description\" : \"description\",\n    \"isWritable\" : true,\n    \"view\" : \"view\",\n    \"editPermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"popularity\" : 1,\n    \"name\" : \"name\",\n    \"rank\" : 5,\n    \"self\" : \"https://openapi-generator.tech\",\n    \"systemDashboard\" : true,\n    \"id\" : \"id\",\n    \"sharePermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"isFavourite\" : true\n  }, {\n    \"automaticRefreshMs\" : 0,\n    \"description\" : \"description\",\n    \"isWritable\" : true,\n    \"view\" : \"view\",\n    \"editPermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"popularity\" : 1,\n    \"name\" : \"name\",\n    \"rank\" : 5,\n    \"self\" : \"https://openapi-generator.tech\",\n    \"systemDashboard\" : true,\n    \"id\" : \"id\",\n    \"sharePermissions\" : [ {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"role\" : \"\",\n      \"project\" : \"\",\n      \"id\" : 6,\n      \"type\" : \"user\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ],\n    \"isFavourite\" : true\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanDashboard>(exampleJson)
            : default(PageBeanDashboard);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove gadget from dashboard
        /// </summary>
        /// <remarks>Removes a dashboard gadget from a dashboard.  When a gadget is removed from a dashboard, other gadgets in the same column are moved up to fill the emptied position.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="gadgetId">The ID of the gadget.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the gadget or the dashboard is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}")]
        [ValidateModelState]
        [SwaggerOperation("RemoveGadget")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the gadget or the dashboard is not found.")]
        public virtual IActionResult RemoveGadget([FromRoute (Name = "dashboardId")][Required]long dashboardId, [FromRoute (Name = "gadgetId")][Required]long gadgetId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Set dashboard item property
        /// </summary>
        /// <remarks>Sets the value of a dashboard item property. Use this resource in apps to store custom data against a dashboard item.  A dashboard item enables an app to add user-specific information to a user dashboard. Dashboard items are exposed to users as gadgets that users can add to their dashboards. For more information on how users do this, see [Adding and customizing gadgets](https://confluence.atlassian.com/x/7AeiLQ).  When an app creates a dashboard item it registers a callback to receive the dashboard item ID. The callback fires whenever the item is rendered or, where the item is configurable, the user edits the item. The app then uses this resource to store the item&#39;s content or configuration details. For more information on working with dashboard items, see [ Building a dashboard item for a JIRA Connect add-on](https://developer.atlassian.com/server/jira/platform/guide-building-a-dashboard-item-for-a-jira-connect-add-on-33746254/) and the [Dashboard Item](https://developer.atlassian.com/cloud/jira/platform/modules/dashboard-item/) documentation.  There is no resource to set or get dashboard items.  The value of the request body must be a [valid](http://tools.ietf.org/html/rfc4627), non-empty JSON blob. The maximum length is 32768 characters.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** The user must be the owner of the dashboard. Note, users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) are considered owners of the System dashboard.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="itemId">The ID of the dashboard item.</param>
        /// <param name="propertyKey">The key of the dashboard item property. The maximum length is 255 characters. For dashboard items with a spec URI and no complete module key, if the provided propertyKey is equal to \&quot;config\&quot;, the request body&#39;s JSON must be an object with all keys and values as strings.</param>
        /// <param name="body"></param>
        /// <response code="200">Returned if the dashboard item property is updated.</response>
        /// <response code="201">Returned if the dashboard item property is created.</response>
        /// <response code="400">Returned if:   *  Request is invalid  *  Or if all of these conditions are met in the request:           *  The dashboard item has a spec URI and no complete module key      *  The value of propertyKey is equal to \&quot;config\&quot;      *  The request body contains a JSON object whose keys and values are not strings.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user is not the owner of the dashboard.</response>
        /// <response code="404">Returned if the dashboard item is not found or the dashboard is not shared with the user.</response>
        [HttpPut]
        [Route("/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetDashboardItemProperty")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Returned if the dashboard item property is updated.")]
        [SwaggerResponse(statusCode: 201, type: typeof(Object), description: "Returned if the dashboard item property is created.")]
        public virtual IActionResult SetDashboardItemProperty([FromRoute (Name = "dashboardId")][Required]string dashboardId, [FromRoute (Name = "itemId")][Required]string itemId, [FromRoute (Name = "propertyKey")][Required]string propertyKey, [FromBody]Object body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update dashboard
        /// </summary>
        /// <remarks>Updates a dashboard, replacing all the dashboard details with those provided.  **[Permissions](#permissions) required:** None  The dashboard to be updated must be owned by the user.</remarks>
        /// <param name="id">The ID of the dashboard to update.</param>
        /// <param name="dashboardDetails">Replacement dashboard details.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the dashboard is not found or the dashboard is not owned by the user.</response>
        [HttpPut]
        [Route("/rest/api/3/dashboard/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateDashboard")]
        [SwaggerResponse(statusCode: 200, type: typeof(Dashboard), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is not valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the dashboard is not found or the dashboard is not owned by the user.")]
        public virtual IActionResult UpdateDashboard([FromRoute (Name = "id")][Required]string id, [FromBody]DashboardDetails dashboardDetails)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Dashboard));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"automaticRefreshMs\" : 0,\n  \"description\" : \"description\",\n  \"isWritable\" : true,\n  \"view\" : \"view\",\n  \"editPermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"popularity\" : 1,\n  \"name\" : \"name\",\n  \"rank\" : 5,\n  \"self\" : \"https://openapi-generator.tech\",\n  \"systemDashboard\" : true,\n  \"id\" : \"id\",\n  \"sharePermissions\" : [ {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  }, {\n    \"role\" : \"\",\n    \"project\" : \"\",\n    \"id\" : 6,\n    \"type\" : \"user\",\n    \"user\" : \"\",\n    \"group\" : \"\"\n  } ],\n  \"isFavourite\" : true\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Dashboard>(exampleJson)
            : default(Dashboard);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update gadget on dashboard
        /// </summary>
        /// <remarks>Changes the title, position, and color of the gadget on a dashboard.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="dashboardId">The ID of the dashboard.</param>
        /// <param name="gadgetId">The ID of the gadget.</param>
        /// <param name="dashboardGadgetUpdateRequest"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if the gadget or the dashboard is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateGadget")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request is invalid.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the gadget or the dashboard is not found.")]
        public virtual IActionResult UpdateGadget([FromRoute (Name = "dashboardId")][Required]long dashboardId, [FromRoute (Name = "gadgetId")][Required]long gadgetId, [FromBody]DashboardGadgetUpdateRequest dashboardGadgetUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
