/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class GroupAndUserPickerApiController : ControllerBase
    { 
        /// <summary>
        /// Find users and groups
        /// </summary>
        /// <remarks>Returns a list of users and groups matching a string. The string is used:   *  for users, to find a case-insensitive match with display name and e-mail address. Note that if a user has hidden their email address in their user profile, partial matches of the email address will not find the user. An exact match is required.  *  for groups, to find a case-sensitive match with group name.  For example, if the string *tin* is used, records with the display name *Tina*, email address *sarah@tinplatetraining.com*, and the group *accounting* would be returned.  Optionally, the search can be refined to:   *  the projects and issue types associated with a custom field, such as a user picker. The search can then be further refined to return only users and groups that have permission to view specific:           *  projects.      *  issue types.          If multiple projects or issue types are specified, they must be a subset of those enabled for the custom field or no results are returned. For example, if a field is enabled for projects A, B, and C then the search could be limited to projects B and C. However, if the search is limited to projects B and D, nothing is returned.  *  not return Connect app users and groups.  *  return groups that have a case-insensitive match with the query.  The primary use case for this resource is to populate a picker field suggestion list with users or groups. To this end, the returned object includes an &#x60;html&#x60; field for each list. This field highlights the matched query term in the item name with the HTML strong tag. Also, each list is wrapped in a response object that contains a header for use in a picker, specifically *Showing X of Y matching groups*.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse users and groups* [global permission](https://confluence.atlassian.com/x/yodKLg).</remarks>
        /// <param name="query">The search string.</param>
        /// <param name="maxResults">The maximum number of items to return in each list.</param>
        /// <param name="showAvatar">Whether the user avatar should be returned. If an invalid value is provided, the default value is used.</param>
        /// <param name="fieldId">The custom field ID of the field this request is for.</param>
        /// <param name="projectId">The ID of a project that returned users and groups must have permission to view. To include multiple projects, provide an ampersand-separated list. For example, &#x60;projectId&#x3D;10000&amp;projectId&#x3D;10001&#x60;. This parameter is only used when &#x60;fieldId&#x60; is present.</param>
        /// <param name="issueTypeId">The ID of an issue type that returned users and groups must have permission to view. To include multiple issue types, provide an ampersand-separated list. For example, &#x60;issueTypeId&#x3D;10000&amp;issueTypeId&#x3D;10001&#x60;. Special values, such as &#x60;-1&#x60; (all standard issue types) and &#x60;-2&#x60; (all subtask issue types), are supported. This parameter is only used when &#x60;fieldId&#x60; is present.</param>
        /// <param name="avatarSize">The size of the avatar to return. If an invalid value is provided, the default value is used.</param>
        /// <param name="caseInsensitive">Whether the search for groups should be case insensitive.</param>
        /// <param name="excludeConnectAddons">Whether Connect app users and groups should be excluded from the search results. If an invalid value is provided, the default value is used.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the query parameter is not provided.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="429">Returned if the rate limit is exceeded. User search endpoints share a collective rate limit for the tenant, in addition to Jira&#39;s normal rate limiting you may receive a rate limit for user search. Please respect the Retry-After header.</response>
        [HttpGet]
        [Route("/rest/api/3/groupuserpicker")]
        [ValidateModelState]
        [SwaggerOperation("FindUsersAndGroups")]
        [SwaggerResponse(statusCode: 200, type: typeof(FoundUsersAndGroups), description: "Returned if the request is successful.")]
        public virtual IActionResult FindUsersAndGroups([FromQuery (Name = "query")][Required()]string query, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "showAvatar")]bool? showAvatar, [FromQuery (Name = "fieldId")]string fieldId, [FromQuery (Name = "projectId")]List<string> projectId, [FromQuery (Name = "issueTypeId")]List<string> issueTypeId, [FromQuery (Name = "avatarSize")]string avatarSize, [FromQuery (Name = "caseInsensitive")]bool? caseInsensitive, [FromQuery (Name = "excludeConnectAddons")]bool? excludeConnectAddons)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(FoundUsersAndGroups));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 429 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(429);
            string exampleJson = null;
            exampleJson = "{\n  \"groups\" : {\n    \"total\" : 0,\n    \"groups\" : [ {\n      \"groupId\" : \"groupId\",\n      \"name\" : \"name\",\n      \"html\" : \"html\",\n      \"labels\" : [ {\n        \"text\" : \"text\",\n        \"title\" : \"title\",\n        \"type\" : \"ADMIN\"\n      }, {\n        \"text\" : \"text\",\n        \"title\" : \"title\",\n        \"type\" : \"ADMIN\"\n      } ]\n    }, {\n      \"groupId\" : \"groupId\",\n      \"name\" : \"name\",\n      \"html\" : \"html\",\n      \"labels\" : [ {\n        \"text\" : \"text\",\n        \"title\" : \"title\",\n        \"type\" : \"ADMIN\"\n      }, {\n        \"text\" : \"text\",\n        \"title\" : \"title\",\n        \"type\" : \"ADMIN\"\n      } ]\n    } ],\n    \"header\" : \"header\"\n  },\n  \"users\" : {\n    \"total\" : 0,\n    \"header\" : \"header\",\n    \"users\" : [ {\n      \"accountId\" : \"accountId\",\n      \"avatarUrl\" : \"https://openapi-generator.tech\",\n      \"displayName\" : \"displayName\",\n      \"name\" : \"name\",\n      \"html\" : \"html\",\n      \"key\" : \"key\"\n    }, {\n      \"accountId\" : \"accountId\",\n      \"avatarUrl\" : \"https://openapi-generator.tech\",\n      \"displayName\" : \"displayName\",\n      \"name\" : \"name\",\n      \"html\" : \"html\",\n      \"key\" : \"key\"\n    } ]\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<FoundUsersAndGroups>(exampleJson)
            : default(FoundUsersAndGroups);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
