/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectVersionsApiController : ControllerBase
    { 
        /// <summary>
        /// Create version
        /// </summary>
        /// <remarks>Creates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the version is added to.</remarks>
        /// <param name="modelVersion"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the project is not found.  *  the user does not have the required permissions.</response>
        [HttpPost]
        [Route("/rest/api/3/version")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateVersion")]
        [SwaggerResponse(statusCode: 201, type: typeof(ModelVersion), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateVersion([FromBody]ModelVersion modelVersion)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ModelVersion));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelVersion>(exampleJson)
            : default(ModelVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete and replace version
        /// </summary>
        /// <remarks>Deletes a project version.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, or any version picker custom fields. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and any version picker custom field, that contain the deleted version, are cleared. Any replacement version must be in the same project as the version being deleted and cannot be the version being deleted.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="deleteAndReplaceVersionBean"></param>
        /// <response code="204">Returned if the version is deleted.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the version to delete is not found.  *  the user does not have the required permissions.</response>
        [HttpPost]
        [Route("/rest/api/3/version/{id}/removeAndSwap")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAndReplaceVersion")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the version is deleted.")]
        public virtual IActionResult DeleteAndReplaceVersion([FromRoute (Name = "id")][Required]string id, [FromBody]DeleteAndReplaceVersionBean deleteAndReplaceVersionBean)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete version
        /// </summary>
        /// <remarks>Deletes a project version.  Deprecated, use [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) that supports swapping version values in custom fields, in addition to the swapping for &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; provided in this resource.  Alternative versions can be provided to update issues that use the deleted version in &#x60;fixVersion&#x60; or &#x60;affectedVersion&#x60;. If alternatives are not provided, occurrences of &#x60;fixVersion&#x60; and &#x60;affectedVersion&#x60; that contain the deleted version are cleared.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="moveFixIssuesTo">The ID of the version to update &#x60;fixVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.</param>
        /// <param name="moveAffectedIssuesTo">The ID of the version to update &#x60;affectedVersion&#x60; to when the field contains the deleted version. The replacement version must be in the same project as the version being deleted and cannot be the version being deleted.</param>
        /// <response code="204">Returned if the version is deleted.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if:   *  the authentication credentials are incorrect.  *  the user does not have the required permissions.</response>
        /// <response code="404">Returned if the version is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/version/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteVersion")]
        [Obsolete]
        public virtual IActionResult DeleteVersion([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "moveFixIssuesTo")]string moveFixIssuesTo, [FromQuery (Name = "moveAffectedIssuesTo")]string moveAffectedIssuesTo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get project versions
        /// </summary>
        /// <remarks>Returns all versions in a project. The response is not paginated. Use [Get project versions paginated](#api-rest-api-3-project-projectIdOrKey-version-get) if you want to get the versions in a project with pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.</remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;operations&#x60;, which returns actions that can be performed on the version.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/versions")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectVersions")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ModelVersion>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetProjectVersions([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ModelVersion>));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n}, {\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ModelVersion>>(exampleJson)
            : default(List<ModelVersion>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get project versions paginated
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of all versions in a project. See the [Get project versions](#api-rest-api-3-project-projectIdOrKey-versions-get) resource if you want to get a full list of versions without pagination.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project.</remarks>
        /// <param name="projectIdOrKey">The project ID or project key (case sensitive).</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:   *  &#x60;description&#x60; Sorts by version description.  *  &#x60;name&#x60; Sorts by version name.  *  &#x60;releaseDate&#x60; Sorts by release date, starting with the oldest date. Versions with no release date are listed last.  *  &#x60;sequence&#x60; Sorts by the order of appearance in the user interface.  *  &#x60;startDate&#x60; Sorts by start date, starting with the oldest date. Versions with no start date are listed last.</param>
        /// <param name="query">Filter the results using a literal string. Versions with matching &#x60;name&#x60; or &#x60;description&#x60; are returned (case insensitive).</param>
        /// <param name="status">A list of status values used to filter the results by version status. This parameter accepts a comma-separated list. The status values are &#x60;released&#x60;, &#x60;unreleased&#x60;, and &#x60;archived&#x60;.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;issuesstatus&#x60; Returns the number of issues in each status category for each version.  *  &#x60;operations&#x60; Returns actions that can be performed on the specified version.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="404">Returned if the project is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/version")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectVersionsPaginated")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanVersion), description: "Returned if the request is successful.")]
        public virtual IActionResult GetProjectVersionsPaginated([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "orderBy")]string orderBy, [FromQuery (Name = "query")]string query, [FromQuery (Name = "status")]string status, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanVersion));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"releaseDate\" : \"2000-01-23\",\n    \"description\" : \"description\",\n    \"project\" : \"project\",\n    \"archived\" : true,\n    \"expand\" : \"expand\",\n    \"operations\" : [ {\n      \"weight\" : 0,\n      \"href\" : \"href\",\n      \"id\" : \"id\",\n      \"label\" : \"label\",\n      \"styleClass\" : \"styleClass\",\n      \"title\" : \"title\",\n      \"iconClass\" : \"iconClass\"\n    }, {\n      \"weight\" : 0,\n      \"href\" : \"href\",\n      \"id\" : \"id\",\n      \"label\" : \"label\",\n      \"styleClass\" : \"styleClass\",\n      \"title\" : \"title\",\n      \"iconClass\" : \"iconClass\"\n    } ],\n    \"overdue\" : true,\n    \"name\" : \"name\",\n    \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"userReleaseDate\" : \"userReleaseDate\",\n    \"id\" : \"id\",\n    \"userStartDate\" : \"userStartDate\",\n    \"projectId\" : 6,\n    \"released\" : true,\n    \"startDate\" : \"2000-01-23\"\n  }, {\n    \"releaseDate\" : \"2000-01-23\",\n    \"description\" : \"description\",\n    \"project\" : \"project\",\n    \"archived\" : true,\n    \"expand\" : \"expand\",\n    \"operations\" : [ {\n      \"weight\" : 0,\n      \"href\" : \"href\",\n      \"id\" : \"id\",\n      \"label\" : \"label\",\n      \"styleClass\" : \"styleClass\",\n      \"title\" : \"title\",\n      \"iconClass\" : \"iconClass\"\n    }, {\n      \"weight\" : 0,\n      \"href\" : \"href\",\n      \"id\" : \"id\",\n      \"label\" : \"label\",\n      \"styleClass\" : \"styleClass\",\n      \"title\" : \"title\",\n      \"iconClass\" : \"iconClass\"\n    } ],\n    \"overdue\" : true,\n    \"name\" : \"name\",\n    \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"userReleaseDate\" : \"userReleaseDate\",\n    \"id\" : \"id\",\n    \"userStartDate\" : \"userStartDate\",\n    \"projectId\" : 6,\n    \"released\" : true,\n    \"startDate\" : \"2000-01-23\"\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanVersion>(exampleJson)
            : default(PageBeanVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get version
        /// </summary>
        /// <remarks>Returns a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property represents the number of issues with a status other than *to do*, *in progress*, and *done*.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the version is not found or the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/version/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelVersion), description: "Returned if the request is successful.")]
        public virtual IActionResult GetVersion([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelVersion));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelVersion>(exampleJson)
            : default(ModelVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get version&#39;s related issues count
        /// </summary>
        /// <remarks>Returns the following counts for a version:   *  Number of issues where the &#x60;fixVersion&#x60; is set to the version.  *  Number of issues where the &#x60;affectedVersion&#x60; is set to the version.  *  Number of issues where a version custom field is set to the version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if:   *  the version is not found.  *  the user does not have the required permissions.</response>
        [HttpGet]
        [Route("/rest/api/3/version/{id}/relatedIssueCounts")]
        [ValidateModelState]
        [SwaggerOperation("GetVersionRelatedIssues")]
        [SwaggerResponse(statusCode: 200, type: typeof(VersionIssueCounts), description: "Returned if the request is successful.")]
        public virtual IActionResult GetVersionRelatedIssues([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VersionIssueCounts));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"issueCountWithCustomFieldsShowingVersion\" : 1,\n  \"customFieldUsage\" : [ {\n    \"fieldName\" : \"fieldName\",\n    \"issueCountWithVersionInCustomField\" : 6,\n    \"customFieldId\" : 0\n  }, {\n    \"fieldName\" : \"fieldName\",\n    \"issueCountWithVersionInCustomField\" : 6,\n    \"customFieldId\" : 0\n  } ],\n  \"issuesAffectedCount\" : 5,\n  \"issuesFixedCount\" : 5,\n  \"self\" : \"https://openapi-generator.tech\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VersionIssueCounts>(exampleJson)
            : default(VersionIssueCounts);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get version&#39;s unresolved issues count
        /// </summary>
        /// <remarks>Returns counts of the issues and unresolved issues for the project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if:   *  the version is not found.  *  the user does not have the required permissions.</response>
        [HttpGet]
        [Route("/rest/api/3/version/{id}/unresolvedIssueCount")]
        [ValidateModelState]
        [SwaggerOperation("GetVersionUnresolvedIssues")]
        [SwaggerResponse(statusCode: 200, type: typeof(VersionUnresolvedIssuesCount), description: "Returned if the request is successful.")]
        public virtual IActionResult GetVersionUnresolvedIssues([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(VersionUnresolvedIssuesCount));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"issuesUnresolvedCount\" : 6,\n  \"self\" : \"https://openapi-generator.tech\",\n  \"issuesCount\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<VersionUnresolvedIssuesCount>(exampleJson)
            : default(VersionUnresolvedIssuesCount);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Merge versions
        /// </summary>
        /// <remarks>Merges two project versions. The merge is completed by deleting the version specified in &#x60;id&#x60; and replacing any occurrences of its ID in &#x60;fixVersion&#x60; with the version ID specified in &#x60;moveIssuesTo&#x60;.  Consider using [ Delete and replace version](#api-rest-api-3-version-id-removeAndSwap-post) instead. This resource supports swapping version values in &#x60;fixVersion&#x60;, &#x60;affectedVersion&#x60;, and custom fields.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version to delete.</param>
        /// <param name="moveIssuesTo">The ID of the version to merge into.</param>
        /// <response code="204">Returned if the version is deleted.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if:   *  the authentication credentials are incorrect or missing.  *  the user does not have the required permissions.</response>
        /// <response code="404">Returned if the version to be deleted or the version to merge to are not found.</response>
        [HttpPut]
        [Route("/rest/api/3/version/{id}/mergeto/{moveIssuesTo}")]
        [ValidateModelState]
        [SwaggerOperation("MergeVersions")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the version is deleted.")]
        public virtual IActionResult MergeVersions([FromRoute (Name = "id")][Required]string id, [FromRoute (Name = "moveIssuesTo")][Required]string moveIssuesTo)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Move version
        /// </summary>
        /// <remarks>Modifies the version&#39;s sequence within the project, which affects the display order of the versions in Jira.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Browse projects* project permission for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version to be moved.</param>
        /// <param name="versionMoveBean"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  no body parameters are provided.  *  &#x60;after&#x60; and &#x60;position&#x60; are provided.  *  &#x60;position&#x60; is invalid.</response>
        /// <response code="401">Returned if:   *  the authentication credentials are incorrect or missing  *  the user does not have the required commissions.</response>
        /// <response code="404">Returned if the version or move after version are not found.</response>
        [HttpPost]
        [Route("/rest/api/3/version/{id}/move")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("MoveVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelVersion), description: "Returned if the request is successful.")]
        public virtual IActionResult MoveVersion([FromRoute (Name = "id")][Required]string id, [FromBody]VersionMoveBean versionMoveBean)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelVersion));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelVersion>(exampleJson)
            : default(ModelVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update version
        /// </summary>
        /// <remarks>Updates a project version.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) or *Administer Projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that contains the version.</remarks>
        /// <param name="id">The ID of the version.</param>
        /// <param name="modelVersion"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  the request is invalid.  *  the user does not have the required permissions.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if the version is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/version/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelVersion), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateVersion([FromRoute (Name = "id")][Required]string id, [FromBody]ModelVersion modelVersion)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelVersion));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"releaseDate\" : \"2000-01-23\",\n  \"description\" : \"description\",\n  \"project\" : \"project\",\n  \"archived\" : true,\n  \"expand\" : \"expand\",\n  \"operations\" : [ {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  }, {\n    \"weight\" : 0,\n    \"href\" : \"href\",\n    \"id\" : \"id\",\n    \"label\" : \"label\",\n    \"styleClass\" : \"styleClass\",\n    \"title\" : \"title\",\n    \"iconClass\" : \"iconClass\"\n  } ],\n  \"overdue\" : true,\n  \"name\" : \"name\",\n  \"moveUnfixedIssuesTo\" : \"https://openapi-generator.tech\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"userReleaseDate\" : \"userReleaseDate\",\n  \"id\" : \"id\",\n  \"userStartDate\" : \"userStartDate\",\n  \"projectId\" : 6,\n  \"released\" : true,\n  \"startDate\" : \"2000-01-23\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelVersion>(exampleJson)
            : default(ModelVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
