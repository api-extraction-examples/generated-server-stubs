/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueRemoteLinksApiController : ControllerBase
    { 
        /// <summary>
        /// Create or update remote issue link
        /// </summary>
        /// <remarks>Creates or updates a remote issue link for an issue.  If a &#x60;globalId&#x60; is provided and a remote issue link with that global ID is found it is updated. Any fields without values in the request are set to null. Otherwise, the remote issue link is created.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="remoteIssueLinkRequest"></param>
        /// <response code="200">Returned if the remote issue link is updated.</response>
        /// <response code="201">Returned if the remote issue link is created.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to link issues.</response>
        /// <response code="404">Returned if the issue is not found or the user does not have permission to view the issue.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateOrUpdateRemoteIssueLink")]
        [SwaggerResponse(statusCode: 200, type: typeof(RemoteIssueLinkIdentifies), description: "Returned if the remote issue link is updated.")]
        [SwaggerResponse(statusCode: 201, type: typeof(RemoteIssueLinkIdentifies), description: "Returned if the remote issue link is created.")]
        public virtual IActionResult CreateOrUpdateRemoteIssueLink([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromBody]RemoteIssueLinkRequest remoteIssueLinkRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RemoteIssueLinkIdentifies));
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(RemoteIssueLinkIdentifies));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"self\" : \"self\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RemoteIssueLinkIdentifies>(exampleJson)
            : default(RemoteIssueLinkIdentifies);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete remote issue link by global ID
        /// </summary>
        /// <remarks>Deletes the remote issue link from the issue using the link&#39;s global ID. Where the global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is implemented, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="globalId">The global ID of a remote issue link.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if a global ID isn&#39;t provided.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to link issues.</response>
        /// <response code="404">Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.</response>
        [HttpDelete]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRemoteIssueLinkByGlobalId")]
        public virtual IActionResult DeleteRemoteIssueLinkByGlobalId([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromQuery (Name = "globalId")][Required()]string globalId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete remote issue link by ID
        /// </summary>
        /// <remarks>Deletes a remote issue link from an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects*, *Edit issues*, and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of a remote issue link.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the link ID is invalid or the remote issue link does not belong to the issue.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to link issues.</response>
        /// <response code="404">Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.</response>
        [HttpDelete]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteRemoteIssueLinkById")]
        public virtual IActionResult DeleteRemoteIssueLinkById([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "linkId")][Required]string linkId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get remote issue link by ID
        /// </summary>
        /// <remarks>Returns a remote issue link for an issue.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of the remote issue link.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the link ID is invalid or the remote issue link does not belong to the issue.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if issue linking is disabled.</response>
        /// <response code="404">Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")]
        [ValidateModelState]
        [SwaggerOperation("GetRemoteIssueLinkById")]
        [SwaggerResponse(statusCode: 200, type: typeof(RemoteIssueLink), description: "Returned if the request is successful.")]
        public virtual IActionResult GetRemoteIssueLinkById([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "linkId")][Required]string linkId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RemoteIssueLink));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"application\" : \"\",\n  \"globalId\" : \"globalId\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0,\n  \"relationship\" : \"relationship\",\n  \"object\" : \"\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RemoteIssueLink>(exampleJson)
            : default(RemoteIssueLink);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get remote issue links
        /// </summary>
        /// <remarks>Returns the remote issue links for an issue. When a remote issue link global ID is provided the record with that global ID is returned, otherwise all remote issue links are returned. Where a global ID includes reserved URL characters these must be escaped in the request. For example, pass &#x60;system&#x3D;http://www.mycompany.com/support&amp;id&#x3D;1&#x60; as &#x60;system%3Dhttp%3A%2F%2Fwww.mycompany.com%2Fsupport%26id%3D1&#x60;.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="globalId">The global ID of the remote issue link.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if issue linking is disabled.</response>
        /// <response code="404">Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink")]
        [ValidateModelState]
        [SwaggerOperation("GetRemoteIssueLinks")]
        [SwaggerResponse(statusCode: 200, type: typeof(RemoteIssueLink), description: "Returned if the request is successful.")]
        public virtual IActionResult GetRemoteIssueLinks([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromQuery (Name = "globalId")]string globalId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RemoteIssueLink));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"application\" : \"\",\n  \"globalId\" : \"globalId\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0,\n  \"relationship\" : \"relationship\",\n  \"object\" : \"\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RemoteIssueLink>(exampleJson)
            : default(RemoteIssueLink);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update remote issue link by ID
        /// </summary>
        /// <remarks>Updates a remote issue link for an issue.  Note: Fields without values in the request are set to null.  This operation requires [issue linking to be active](https://confluence.atlassian.com/x/yoXKM).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Link issues* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="linkId">The ID of the remote issue link.</param>
        /// <param name="remoteIssueLinkRequest"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  the link ID is invalid.  *  the remote issue link does not belong to the issue.  *  the request body is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have permission to link issues.</response>
        /// <response code="404">Returned if the issue or remote issue link is not found or the user does not have permission to view the issue.</response>
        [HttpPut]
        [Route("/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateRemoteIssueLink")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateRemoteIssueLink([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "linkId")][Required]string linkId, [FromBody]RemoteIssueLinkRequest remoteIssueLinkRequest)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
