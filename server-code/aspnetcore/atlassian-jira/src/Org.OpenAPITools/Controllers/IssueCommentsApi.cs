/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueCommentsApiController : ControllerBase
    { 
        /// <summary>
        /// Add comment
        /// </summary>
        /// <remarks>Adds a comment to an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* and *Add comments* [ project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="comment"></param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.</param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if the issue is not found or the user does not have permission to view it.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/{issueIdOrKey}/comment")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddComment")]
        [SwaggerResponse(statusCode: 201, type: typeof(Comment), description: "Returned if the request is successful.")]
        public virtual IActionResult AddComment([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromBody]Comment comment, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Comment));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"renderedBody\" : \"renderedBody\",\n  \"visibility\" : \"\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"self\",\n  \"jsdPublic\" : true,\n  \"id\" : \"id\",\n  \"body\" : \"\",\n  \"jsdAuthorCanSeeRequest\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"properties\" : [ {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete comment
        /// </summary>
        /// <remarks>Deletes a comment.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Delete all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to delete any comment or *Delete own comments* to delete comment created by the user,  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the user does not have permission to delete the comment.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.</response>
        /// <response code="405">Returned if an anonymous call is made to the operation.</response>
        [HttpDelete]
        [Route("/rest/api/3/issue/{issueIdOrKey}/comment/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteComment")]
        public virtual IActionResult DeleteComment([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 405 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(405);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get comment
        /// </summary>
        /// <remarks>Returns a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/comment/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Comment), description: "Returned if the request is successful.")]
        public virtual IActionResult GetComment([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Comment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"renderedBody\" : \"renderedBody\",\n  \"visibility\" : \"\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"self\",\n  \"jsdPublic\" : true,\n  \"id\" : \"id\",\n  \"body\" : \"\",\n  \"jsdAuthorCanSeeRequest\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"properties\" : [ {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get comments
        /// </summary>
        /// <remarks>Returns all comments for an issue.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are included in the response where the user has:   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is role visibility is restricted to.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field. Accepts *created* to sort comments by their created date.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if &#x60;orderBy&#x60; is set to a value other than *created*.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the issue is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/comment")]
        [ValidateModelState]
        [SwaggerOperation("GetComments")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageOfComments), description: "Returned if the request is successful.")]
        public virtual IActionResult GetComments([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "orderBy")]string orderBy, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageOfComments));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"comments\" : [ {\n    \"renderedBody\" : \"renderedBody\",\n    \"visibility\" : \"\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"self\" : \"self\",\n    \"jsdPublic\" : true,\n    \"id\" : \"id\",\n    \"body\" : \"\",\n    \"jsdAuthorCanSeeRequest\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"properties\" : [ {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"renderedBody\" : \"renderedBody\",\n    \"visibility\" : \"\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"self\" : \"self\",\n    \"jsdPublic\" : true,\n    \"id\" : \"id\",\n    \"body\" : \"\",\n    \"jsdAuthorCanSeeRequest\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"properties\" : [ {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"maxResults\" : 0,\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageOfComments>(exampleJson)
            : default(PageOfComments);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get comments by IDs
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of comments specified by a list of comment IDs.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** Comments are returned where the user:   *  has *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project containing the comment.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  If the comment has visibility restrictions, belongs to the group or has the role visibility is restricted to.</remarks>
        /// <param name="issueCommentListRequestBean">The list of comment IDs.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;renderedBody&#x60; Returns the comment body rendered in HTML.  *  &#x60;properties&#x60; Returns the comment&#39;s properties.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request contains more than 1000 IDs or is empty.</response>
        [HttpPost]
        [Route("/rest/api/3/comment/list")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetCommentsByIds")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanComment), description: "Returned if the request is successful.")]
        public virtual IActionResult GetCommentsByIds([FromBody]IssueCommentListRequestBean issueCommentListRequestBean, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanComment));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"renderedBody\" : \"renderedBody\",\n    \"visibility\" : \"\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"self\" : \"self\",\n    \"jsdPublic\" : true,\n    \"id\" : \"id\",\n    \"body\" : \"\",\n    \"jsdAuthorCanSeeRequest\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"properties\" : [ {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  }, {\n    \"renderedBody\" : \"renderedBody\",\n    \"visibility\" : \"\",\n    \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"self\" : \"self\",\n    \"jsdPublic\" : true,\n    \"id\" : \"id\",\n    \"body\" : \"\",\n    \"jsdAuthorCanSeeRequest\" : true,\n    \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"properties\" : [ {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    }, {\n      \"value\" : \"\",\n      \"key\" : \"key\"\n    } ]\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanComment>(exampleJson)
            : default(PageBeanComment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update comment
        /// </summary>
        /// <remarks>Updates a comment.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue containing the comment is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  *Edit all comments*[ project permission](https://confluence.atlassian.com/x/yodKLg) to update any comment or *Edit own comments* to update comment created by the user.  *  If the comment has visibility restrictions, the user belongs to the group or has the role visibility is restricted to.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="id">The ID of the comment.</param>
        /// <param name="comment"></param>
        /// <param name="notifyUsers">Whether users are notified when a comment is updated.</param>
        /// <param name="overrideEditableFlag">Whether screen security is overridden to enable uneditable fields to be edited. Available to Connect app users with the *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg) and Forge apps acting on behalf of users with *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about comments in the response. This parameter accepts &#x60;renderedBody&#x60;, which returns the comment body rendered in HTML.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the user does not have permission to edit the comment or the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the issue or comment is not found or the user does not have permission to view the issue or comment.</response>
        [HttpPut]
        [Route("/rest/api/3/issue/{issueIdOrKey}/comment/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateComment")]
        [SwaggerResponse(statusCode: 200, type: typeof(Comment), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateComment([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromRoute (Name = "id")][Required]string id, [FromBody]Comment comment, [FromQuery (Name = "notifyUsers")]bool? notifyUsers, [FromQuery (Name = "overrideEditableFlag")]bool? overrideEditableFlag, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Comment));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"renderedBody\" : \"renderedBody\",\n  \"visibility\" : \"\",\n  \"created\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"self\" : \"self\",\n  \"jsdPublic\" : true,\n  \"id\" : \"id\",\n  \"body\" : \"\",\n  \"jsdAuthorCanSeeRequest\" : true,\n  \"updated\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"properties\" : [ {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  }, {\n    \"value\" : \"\",\n    \"key\" : \"key\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Comment>(exampleJson)
            : default(Comment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
