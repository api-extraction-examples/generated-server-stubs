/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectTypesApiController : ControllerBase
    { 
        /// <summary>
        /// Get accessible project type by key
        /// </summary>
        /// <remarks>Returns a [project type](https://confluence.atlassian.com/x/Var1Nw) if it is accessible to the user.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="projectTypeKey">The key of the project type.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the project type is not accessible to the user.</response>
        [HttpGet]
        [Route("/rest/api/3/project/type/{projectTypeKey}/accessible")]
        [ValidateModelState]
        [SwaggerOperation("GetAccessibleProjectTypeByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectType), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAccessibleProjectTypeByKey([FromRoute (Name = "projectTypeKey")][Required]string projectTypeKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectType));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectType>(exampleJson)
            : default(ProjectType);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get licensed project types
        /// </summary>
        /// <remarks>Returns all [project types](https://confluence.atlassian.com/x/Var1Nw) with a valid license.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        [HttpGet]
        [Route("/rest/api/3/project/type/accessible")]
        [ValidateModelState]
        [SwaggerOperation("GetAllAccessibleProjectTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProjectType>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAllAccessibleProjectTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ProjectType>));
            string exampleJson = null;
            exampleJson = "[ {\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n}, {\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ProjectType>>(exampleJson)
            : default(List<ProjectType>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all project types
        /// </summary>
        /// <remarks>Returns all [project types](https://confluence.atlassian.com/x/Var1Nw), whether or not the instance has a valid license for each type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        [HttpGet]
        [Route("/rest/api/3/project/type")]
        [ValidateModelState]
        [SwaggerOperation("GetAllProjectTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ProjectType>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAllProjectTypes()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ProjectType>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n}, {\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ProjectType>>(exampleJson)
            : default(List<ProjectType>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get project type by key
        /// </summary>
        /// <remarks>Returns a [project type](https://confluence.atlassian.com/x/Var1Nw).  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="projectTypeKey">The key of the project type.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="404">Returned if the project type is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/project/type/{projectTypeKey}")]
        [ValidateModelState]
        [SwaggerOperation("GetProjectTypeByKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProjectType), description: "Returned if the request is successful.")]
        public virtual IActionResult GetProjectTypeByKey([FromRoute (Name = "projectTypeKey")][Required]string projectTypeKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProjectType));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"descriptionI18nKey\" : \"descriptionI18nKey\",\n  \"color\" : \"color\",\n  \"icon\" : \"icon\",\n  \"formattedKey\" : \"formattedKey\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProjectType>(exampleJson)
            : default(ProjectType);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
