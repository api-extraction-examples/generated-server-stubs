/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AvatarsApiController : ControllerBase
    { 
        /// <summary>
        /// Delete avatar
        /// </summary>
        /// <remarks>Deletes an avatar from a project or issue type.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="owningObjectId">The ID of the item the avatar is associated with.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="403">Returned if the user does not have permission to delete the avatar, the avatar is not deletable.</response>
        /// <response code="404">Returned if the avatar type, associated item ID, or avatar ID is invalid.</response>
        [HttpDelete]
        [Route("/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteAvatar")]
        public virtual IActionResult DeleteAvatar([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "owningObjectId")][Required]string owningObjectId, [FromRoute (Name = "id")][Required]long id)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get system avatars by type
        /// </summary>
        /// <remarks>Returns a list of system avatar details by owner type, where the owner types are issue type, project, or user.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="type">The avatar type.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="500">Returned if an error occurs while retrieving the list of avatars.</response>
        [HttpGet]
        [Route("/rest/api/3/avatar/{type}/system")]
        [ValidateModelState]
        [SwaggerOperation("GetAllSystemAvatars")]
        [SwaggerResponse(statusCode: 200, type: typeof(SystemAvatars), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAllSystemAvatars([FromRoute (Name = "type")][Required]string type)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SystemAvatars));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"system\" : [ {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  }, {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SystemAvatars>(exampleJson)
            : default(SystemAvatars);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get avatar image by ID
        /// </summary>
        /// <remarks>Returns a project or issue type avatar image by ID.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.</remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="id">The ID of the avatar.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if an avatar is not found or an avatar matching the requested size is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetAvatarImageByID")]
        public virtual IActionResult GetAvatarImageByID([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "id")][Required]long id, [FromQuery (Name = "size")]string size, [FromQuery (Name = "format")]string format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get avatar image by owner
        /// </summary>
        /// <remarks>Returns the avatar image for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  For system avatars, none.  *  For custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  For custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.</remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="entityId">The ID of the project or issue type the avatar belongs to.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if an avatar is not found or an avatar matching the requested size is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAvatarImageByOwner")]
        public virtual IActionResult GetAvatarImageByOwner([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "entityId")][Required]string entityId, [FromQuery (Name = "size")]string size, [FromQuery (Name = "format")]string format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get avatar image by type
        /// </summary>
        /// <remarks>Returns the default project or issue type avatar image.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:** None.</remarks>
        /// <param name="type">The icon type of the avatar.</param>
        /// <param name="size">The size of the avatar image. If not provided the default size is returned.</param>
        /// <param name="format">The format to return the avatar image in. If not provided the original content format is returned.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if an avatar is not found or an avatar matching the requested size is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/universal_avatar/view/type/{type}")]
        [ValidateModelState]
        [SwaggerOperation("GetAvatarImageByType")]
        public virtual IActionResult GetAvatarImageByType([FromRoute (Name = "type")][Required]string type, [FromQuery (Name = "size")]string size, [FromQuery (Name = "format")]string format)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get avatars
        /// </summary>
        /// <remarks>Returns the system and custom avatars for a project or issue type.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  for custom project avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project the avatar belongs to.  *  for custom issue type avatars, *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for at least one project the issue type is used in.  *  for system avatars, none.</remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="entityId">The ID of the item the avatar is associated with.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/universal_avatar/type/{type}/owner/{entityId}")]
        [ValidateModelState]
        [SwaggerOperation("GetAvatars")]
        [SwaggerResponse(statusCode: 200, type: typeof(Avatars), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAvatars([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "entityId")][Required]string entityId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Avatars));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"system\" : [ {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  }, {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  } ],\n  \"custom\" : [ {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  }, {\n    \"isDeletable\" : true,\n    \"owner\" : \"owner\",\n    \"fileName\" : \"fileName\",\n    \"urls\" : {\n      \"key\" : \"https://openapi-generator.tech\"\n    },\n    \"isSelected\" : true,\n    \"isSystemAvatar\" : true,\n    \"id\" : \"id\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Avatars>(exampleJson)
            : default(Avatars);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Load avatar
        /// </summary>
        /// <remarks>Loads a custom avatar for a project or issue type.  Specify the avatar&#39;s local file location in the body of the request. Also, include the following headers:   *  &#x60;X-Atlassian-Token: no-check&#x60; To prevent XSRF protection blocking the request, for more information see [Special Headers](#special-request-headers).  *  &#x60;Content-Type: image/image type&#x60; Valid image types are JPEG, GIF, or PNG.  For example:   &#x60;curl - -request POST &#x60;  &#x60;- -user email@example.com:&lt;api_token&gt; &#x60;  &#x60;- -header &#39;X-Atlassian-Token: no-check&#39; &#x60;  &#x60;- -header &#39;Content-Type: image/&lt; image_type&gt;&#39; &#x60;  &#x60;- -data-binary \&quot;&lt;@/path/to/file/with/your/avatar&gt;\&quot; &#x60;  &#x60;- -url &#39;https://your-domain.atlassian.net/rest/api/3/universal_avatar/type/{type}/owner/{entityId}&#39;&#x60;  The avatar is cropped to a square. If no crop parameters are specified, the square originates at the top left of the image. The length of the square&#39;s sides is set to the smaller of the height or width of the image.  The cropped image is then used to create avatars of 16x16, 24x24, 32x32, and 48x48 in size.  After creating the avatar use:   *  [Update issue type](#api-rest-api-3-issuetype-id-put) to set it as the issue type&#39;s displayed avatar.  *  [Set project avatar](#api-rest-api-3-project-projectIdOrKey-avatar-put) to set it as the project&#39;s displayed avatar.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="type">The avatar type.</param>
        /// <param name="entityId">The ID of the item the avatar is associated with.</param>
        /// <param name="size">The length of each side of the crop region.</param>
        /// <param name="body"></param>
        /// <param name="x">The X coordinate of the top-left corner of the crop region.</param>
        /// <param name="y">The Y coordinate of the top-left corner of the crop region.</param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if:   *  an image isn&#39;t included in the request.  *  the image type is unsupported.  *  the crop parameters extend the crop area beyond the edge of the image.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permissions.</response>
        /// <response code="404">Returned if the avatar type is invalid, the associated item ID is missing, or the item is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/universal_avatar/type/{type}/owner/{entityId}")]
        [ValidateModelState]
        [SwaggerOperation("StoreAvatar")]
        [SwaggerResponse(statusCode: 201, type: typeof(Avatar), description: "Returned if the request is successful.")]
        public virtual IActionResult StoreAvatar([FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "entityId")][Required]string entityId, [FromQuery (Name = "size")][Required()]int size, [FromBody]Object body, [FromQuery (Name = "x")]int? x, [FromQuery (Name = "y")]int? y)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Avatar));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"isDeletable\" : true,\n  \"owner\" : \"owner\",\n  \"fileName\" : \"fileName\",\n  \"urls\" : {\n    \"key\" : \"https://openapi-generator.tech\"\n  },\n  \"isSelected\" : true,\n  \"isSystemAvatar\" : true,\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Avatar>(exampleJson)
            : default(Avatar);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
