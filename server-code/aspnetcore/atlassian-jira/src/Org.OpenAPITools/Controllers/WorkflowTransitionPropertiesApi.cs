/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WorkflowTransitionPropertiesApiController : ControllerBase
    { 
        /// <summary>
        /// Create workflow transition property
        /// </summary>
        /// <remarks>Adds a property to a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The key of the property being added, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowTransitionProperty"></param>
        /// <param name="workflowMode">The workflow status. Set to *live* for inactive workflows or *draft* for draft workflows. Active workflows cannot be edited.</param>
        /// <response code="200">200 response</response>
        /// <response code="400">Returned if a workflow property with the same key is present on the transition.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the workflow transition is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/workflow/transitions/{transitionId}/properties")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateWorkflowTransitionProperty")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkflowTransitionProperty), description: "200 response")]
        public virtual IActionResult CreateWorkflowTransitionProperty([FromRoute (Name = "transitionId")][Required]long transitionId, [FromQuery (Name = "key")][Required()]string key, [FromQuery (Name = "workflowName")][Required()]string workflowName, [FromBody]WorkflowTransitionProperty workflowTransitionProperty, [FromQuery (Name = "workflowMode")]string workflowMode)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkflowTransitionProperty));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"id\",\n  \"value\" : \"value\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkflowTransitionProperty>(exampleJson)
            : default(WorkflowTransitionProperty);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete workflow transition property
        /// </summary>
        /// <remarks>Deletes a property from a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The name of the transition property to delete, also known as the name of the property.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowMode">The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited.</param>
        /// <response code="200">200 response</response>
        /// <response code="304">Returned if no changes were made by the request. For example, trying to delete a property that cannot be found.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the workflow transition is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/workflow/transitions/{transitionId}/properties")]
        [ValidateModelState]
        [SwaggerOperation("DeleteWorkflowTransitionProperty")]
        public virtual IActionResult DeleteWorkflowTransitionProperty([FromRoute (Name = "transitionId")][Required]long transitionId, [FromQuery (Name = "key")][Required()]string key, [FromQuery (Name = "workflowName")][Required()]string workflowName, [FromQuery (Name = "workflowMode")]string workflowMode)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 304 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(304);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get workflow transition properties
        /// </summary>
        /// <remarks>Returns the properties on a workflow transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira administration console. The ID is shown next to the transition.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="includeReservedKeys">Some properties with keys that have the *jira.* prefix are reserved, which means they are not editable. To include these properties in the results, set this parameter to *true*.</param>
        /// <param name="key">The key of the property being returned, also known as the name of the property. If this parameter is not specified, all properties on the transition are returned.</param>
        /// <param name="workflowMode">The workflow status. Set to *live* for active and inactive workflows, or *draft* for draft workflows.</param>
        /// <response code="200">200 response</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have admin permission</response>
        /// <response code="404">Returned if the workflow transition or property is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/workflow/transitions/{transitionId}/properties")]
        [ValidateModelState]
        [SwaggerOperation("GetWorkflowTransitionProperties")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkflowTransitionProperty), description: "200 response")]
        public virtual IActionResult GetWorkflowTransitionProperties([FromRoute (Name = "transitionId")][Required]long transitionId, [FromQuery (Name = "workflowName")][Required()]string workflowName, [FromQuery (Name = "includeReservedKeys")]bool? includeReservedKeys, [FromQuery (Name = "key")]string key, [FromQuery (Name = "workflowMode")]string workflowMode)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkflowTransitionProperty));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"id\",\n  \"value\" : \"value\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkflowTransitionProperty>(exampleJson)
            : default(WorkflowTransitionProperty);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update workflow transition property
        /// </summary>
        /// <remarks>Updates a workflow transition by changing the property value. Trying to update a property that does not exist results in a new property being added to the transition. Transition properties are used to change the behavior of a transition. For more information, see [Transition properties](https://confluence.atlassian.com/x/zIhKLg#Advancedworkflowconfiguration-transitionproperties) and [Workflow properties](https://confluence.atlassian.com/x/JYlKLg).  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="transitionId">The ID of the transition. To get the ID, view the workflow in text mode in the Jira admin settings. The ID is shown next to the transition.</param>
        /// <param name="key">The key of the property being updated, also known as the name of the property. Set this to the same value as the &#x60;key&#x60; defined in the request body.</param>
        /// <param name="workflowName">The name of the workflow that the transition belongs to.</param>
        /// <param name="workflowTransitionProperty"></param>
        /// <param name="workflowMode">The workflow status. Set to &#x60;live&#x60; for inactive workflows or &#x60;draft&#x60; for draft workflows. Active workflows cannot be edited.</param>
        /// <response code="200">200 response</response>
        /// <response code="304">Returned if no changes were made by the request. For example, attempting to update a property with its current value.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the workflow transition is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/workflow/transitions/{transitionId}/properties")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateWorkflowTransitionProperty")]
        [SwaggerResponse(statusCode: 200, type: typeof(WorkflowTransitionProperty), description: "200 response")]
        public virtual IActionResult UpdateWorkflowTransitionProperty([FromRoute (Name = "transitionId")][Required]long transitionId, [FromQuery (Name = "key")][Required()]string key, [FromQuery (Name = "workflowName")][Required()]string workflowName, [FromBody]WorkflowTransitionProperty workflowTransitionProperty, [FromQuery (Name = "workflowMode")]string workflowMode)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(WorkflowTransitionProperty));
            //TODO: Uncomment the next line to return response 304 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(304);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"id\",\n  \"value\" : \"value\",\n  \"key\" : \"key\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<WorkflowTransitionProperty>(exampleJson)
            : default(WorkflowTransitionProperty);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
