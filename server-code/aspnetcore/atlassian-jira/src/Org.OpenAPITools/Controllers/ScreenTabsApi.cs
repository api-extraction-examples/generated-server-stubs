/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ScreenTabsApiController : ControllerBase
    { 
        /// <summary>
        /// Create screen tab
        /// </summary>
        /// <remarks>Creates a tab for a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="screenableTab"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen is not found.</response>
        [HttpPost]
        [Route("/rest/api/3/screens/{screenId}/tabs")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddScreenTab")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScreenableTab), description: "Returned if the request is successful.")]
        public virtual IActionResult AddScreenTab([FromRoute (Name = "screenId")][Required]long screenId, [FromBody]ScreenableTab screenableTab)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScreenableTab));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ScreenableTab>(exampleJson)
            : default(ScreenableTab);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete screen tab
        /// </summary>
        /// <remarks>Deletes a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen or screen tab is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/screens/{screenId}/tabs/{tabId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteScreenTab")]
        public virtual IActionResult DeleteScreenTab([FromRoute (Name = "screenId")][Required]long screenId, [FromRoute (Name = "tabId")][Required]long tabId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all screen tabs
        /// </summary>
        /// <remarks>Returns the list of tabs for a screen.  **[Permissions](#permissions) required:**   *  *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).  *  *Administer projects* [project permission](https://confluence.atlassian.com/x/yodKLg) when the project key is specified, providing that the screen is associated with the project through a Screen Scheme and Issue Type Screen Scheme.</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="projectKey">The key of the project.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the screen ID is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/screens/{screenId}/tabs")]
        [ValidateModelState]
        [SwaggerOperation("GetAllScreenTabs")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScreenableTab>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAllScreenTabs([FromRoute (Name = "screenId")][Required]long screenId, [FromQuery (Name = "projectKey")]string projectKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScreenableTab>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : 0\n}, {\n  \"name\" : \"name\",\n  \"id\" : 0\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ScreenableTab>>(exampleJson)
            : default(List<ScreenableTab>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Move screen tab
        /// </summary>
        /// <remarks>Moves a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="pos">The position of tab. The base index is 0.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen or screen tab is not found or the position is invalid.</response>
        [HttpPost]
        [Route("/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}")]
        [ValidateModelState]
        [SwaggerOperation("MoveScreenTab")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult MoveScreenTab([FromRoute (Name = "screenId")][Required]long screenId, [FromRoute (Name = "tabId")][Required]long tabId, [FromRoute (Name = "pos")][Required]int pos)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update screen tab
        /// </summary>
        /// <remarks>Updates the name of a screen tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="tabId">The ID of the screen tab.</param>
        /// <param name="screenableTab"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen or screen tab is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/screens/{screenId}/tabs/{tabId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("RenameScreenTab")]
        [SwaggerResponse(statusCode: 200, type: typeof(ScreenableTab), description: "Returned if the request is successful.")]
        public virtual IActionResult RenameScreenTab([FromRoute (Name = "screenId")][Required]long screenId, [FromRoute (Name = "tabId")][Required]long tabId, [FromBody]ScreenableTab screenableTab)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ScreenableTab));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"name\" : \"name\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ScreenableTab>(exampleJson)
            : default(ScreenableTab);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
