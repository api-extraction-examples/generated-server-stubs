/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class JiraExpressionsApiController : ControllerBase
    { 
        /// <summary>
        /// Analyse Jira expression
        /// </summary>
        /// <remarks>Analyses and validates Jira expressions.  As an experimental feature, this operation can also attempt to type-check the expressions.  Learn more about Jira expressions in the [documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/).  **[Permissions](#permissions) required**: None.</remarks>
        /// <param name="jiraExpressionForAnalysis">The Jira expressions to analyse.</param>
        /// <param name="check">The check to perform:   *  &#x60;syntax&#x60; Each expression&#39;s syntax is checked to ensure the expression can be parsed. Also, syntactic limits are validated. For example, the expression&#39;s length.  *  &#x60;type&#x60; EXPERIMENTAL. Each expression is type checked and the final type of the expression inferred. Any type errors that would result in the expression failure at runtime are reported. For example, accessing properties that don&#39;t exist or passing the wrong number of arguments to functions. Also performs the syntax check.  *  &#x60;complexity&#x60; EXPERIMENTAL. Determines the formulae for how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) each expression may execute.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">400 response</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">404 response</response>
        [HttpPost]
        [Route("/rest/api/3/expression/analyse")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AnalyseExpression")]
        [SwaggerResponse(statusCode: 200, type: typeof(JiraExpressionsAnalysis), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "400 response")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "404 response")]
        public virtual IActionResult AnalyseExpression([FromBody]JiraExpressionForAnalysis jiraExpressionForAnalysis, [FromQuery (Name = "check")]string check)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(JiraExpressionsAnalysis));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"results\" : [ {\n    \"valid\" : true,\n    \"complexity\" : {\n      \"variables\" : {\n        \"key\" : \"variables\"\n      },\n      \"expensiveOperations\" : \"expensiveOperations\"\n    },\n    \"expression\" : \"expression\",\n    \"type\" : \"type\",\n    \"errors\" : [ {\n      \"expression\" : \"expression\",\n      \"line\" : 6,\n      \"column\" : 0,\n      \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\",\n      \"type\" : \"syntax\"\n    }, {\n      \"expression\" : \"expression\",\n      \"line\" : 6,\n      \"column\" : 0,\n      \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\",\n      \"type\" : \"syntax\"\n    } ]\n  }, {\n    \"valid\" : true,\n    \"complexity\" : {\n      \"variables\" : {\n        \"key\" : \"variables\"\n      },\n      \"expensiveOperations\" : \"expensiveOperations\"\n    },\n    \"expression\" : \"expression\",\n    \"type\" : \"type\",\n    \"errors\" : [ {\n      \"expression\" : \"expression\",\n      \"line\" : 6,\n      \"column\" : 0,\n      \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\",\n      \"type\" : \"syntax\"\n    }, {\n      \"expression\" : \"expression\",\n      \"line\" : 6,\n      \"column\" : 0,\n      \"message\" : \"!, -, typeof, (, IDENTIFIER, null, true, false, NUMBER, STRING, TEMPLATE_LITERAL, new, [ or { expected, > encountered.\",\n      \"type\" : \"syntax\"\n    } ]\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<JiraExpressionsAnalysis>(exampleJson)
            : default(JiraExpressionsAnalysis);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Evaluate Jira expression
        /// </summary>
        /// <remarks>Evaluates a Jira expression and returns its value.  This resource can be used to test Jira expressions that you plan to use elsewhere, or to fetch data in a flexible way. Consult the [Jira expressions documentation](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/) for more details.  #### Context variables ####  The following context variables are available to Jira expressions evaluated by this resource. Their presence depends on various factors; usually you need to manually request them in the context object sent in the payload, but some of them are added automatically under certain conditions.   *  &#x60;user&#x60; ([User](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user)): The current user. Always available and equal to &#x60;null&#x60; if the request is anonymous.  *  &#x60;app&#x60; ([App](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#app)): The [Connect app](https://developer.atlassian.com/cloud/jira/platform/index/#connect-apps) that made the request. Available only for authenticated requests made by Connect Apps (read more here: [Authentication for Connect apps](https://developer.atlassian.com/cloud/jira/platform/security-for-connect-apps/)).  *  &#x60;issue&#x60; ([Issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): The current issue. Available only when the issue is provided in the request context object.  *  &#x60;issues&#x60; ([List](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#list) of [Issues](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue)): A collection of issues matching a JQL query. Available only when JQL is provided in the request context object.  *  &#x60;project&#x60; ([Project](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#project)): The current project. Available only when the project is provided in the request context object.  *  &#x60;sprint&#x60; ([Sprint](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#sprint)): The current sprint. Available only when the sprint is provided in the request context object.  *  &#x60;board&#x60; ([Board](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#board)): The current board. Available only when the board is provided in the request context object.  *  &#x60;serviceDesk&#x60; ([ServiceDesk](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#servicedesk)): The current service desk. Available only when the service desk is provided in the request context object.  *  &#x60;customerRequest&#x60; ([CustomerRequest](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#customerrequest)): The current customer request. Available only when the customer request is provided in the request context object.  Also, custom context variables can be passed in the request with their types. Those variables can be accessed by key in the Jira expression. These variable types are available for use in a custom context:   *  &#x60;user&#x60;: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  &#x60;issue&#x60;: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  &#x60;json&#x60;: A JSON object containing custom content.  *  &#x60;list&#x60;: A JSON list of &#x60;user&#x60;, &#x60;issue&#x60;, or &#x60;json&#x60; variable types.  This operation can be accessed anonymously.  **[Permissions](#permissions) required**: None. However, an expression may return different results for different users depending on their permissions. For example, different users may see different comments on the same issue.   Permission to access Jira Software is required to access Jira Software context variables (&#x60;board&#x60; and &#x60;sprint&#x60;) or fields (for example, &#x60;issue.sprint&#x60;).</remarks>
        /// <param name="jiraExpressionEvalRequestBean">The Jira expression and the evaluation context.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts &#x60;meta.complexity&#x60; that returns information about the expression complexity. For example, the number of expensive operations used by the expression and how close the expression is to reaching the [complexity limit](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#restrictions). Useful when designing and debugging your expressions.</param>
        /// <response code="200">Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.</response>
        /// <response code="400">Returned if:   *  the request is invalid, that is:           *  invalid data is provided, such as a request including issue ID and key.      *  the expression is invalid and can not be parsed.  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression &#x60;issue.id&#x60; where &#x60;issue&#x60; is &#x60;null&#x60;). In this case an error message is provided.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if any object provided in the request context is not found or the user does not have permission to view it.</response>
        [HttpPost]
        [Route("/rest/api/3/expression/eval")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("EvaluateJiraExpression")]
        [SwaggerResponse(statusCode: 200, type: typeof(JiraExpressionResult), description: "Returned if the evaluation results in a value. The result is a JSON primitive value, list, or object.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if:   *  the request is invalid, that is:           *  invalid data is provided, such as a request including issue ID and key.      *  the expression is invalid and can not be parsed.  *  evaluation fails at runtime. This may happen for various reasons. For example, accessing a property on a null object (such as the expression &#x60;issue.id&#x60; where &#x60;issue&#x60; is &#x60;null&#x60;). In this case an error message is provided.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if any object provided in the request context is not found or the user does not have permission to view it.")]
        public virtual IActionResult EvaluateJiraExpression([FromBody]JiraExpressionEvalRequestBean jiraExpressionEvalRequestBean, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(JiraExpressionResult));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"meta\" : \"\",\n  \"value\" : \"\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<JiraExpressionResult>(exampleJson)
            : default(JiraExpressionResult);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
