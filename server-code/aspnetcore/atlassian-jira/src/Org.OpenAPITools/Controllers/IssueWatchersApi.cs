/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueWatchersApiController : ControllerBase
    { 
        /// <summary>
        /// Add watcher
        /// </summary>
        /// <remarks>Adds a user as a watcher of an issue by passing the account ID of the user. For example, &#x60;\&quot;5b10ac8d82e05b22cc7d4ef5\&quot;&#x60;. If no user is specified the calling user is added.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To add users other than themselves to the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="body">The account ID of the user. Note that username cannot be used due to privacy changes.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the permission to manage the watcher list.</response>
        /// <response code="404">Returned if the issue or the user is not found or the user does not have permission to view the issue.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/{issueIdOrKey}/watchers")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddWatcher")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult AddWatcher([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromBody]string body)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get is watching issue bulk
        /// </summary>
        /// <remarks>Returns, for the user, details of the watched status of issues from a list. If an issue ID is invalid, the returned watched status is &#x60;false&#x60;.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.</remarks>
        /// <param name="issueList">A list of issue IDs.</param>
        /// <response code="200">Returned if the request is successful</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpPost]
        [Route("/rest/api/3/issue/watching")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("GetIsWatchingIssueBulk")]
        [SwaggerResponse(statusCode: 200, type: typeof(BulkIssueIsWatching), description: "Returned if the request is successful")]
        public virtual IActionResult GetIsWatchingIssueBulk([FromBody]IssueList issueList)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(BulkIssueIsWatching));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"issuesIsWatching\" : {\n    \"key\" : true\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<BulkIssueIsWatching>(exampleJson)
            : default(BulkIssueIsWatching);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get issue watchers
        /// </summary>
        /// <remarks>Returns the watchers for an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  This operation can be accessed anonymously.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is ini  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To see details of users on the watchlist other than themselves, *View voters and watchers* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <response code="200">Returned if the request is successful</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the issue is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/issue/{issueIdOrKey}/watchers")]
        [ValidateModelState]
        [SwaggerOperation("GetIssueWatchers")]
        [SwaggerResponse(statusCode: 200, type: typeof(Watchers), description: "Returned if the request is successful")]
        public virtual IActionResult GetIssueWatchers([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Watchers));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"self\" : \"self\",\n  \"watchers\" : [ {\n    \"accountId\" : \"accountId\",\n    \"emailAddress\" : \"emailAddress\",\n    \"displayName\" : \"displayName\",\n    \"accountType\" : \"accountType\",\n    \"name\" : \"name\",\n    \"active\" : true,\n    \"self\" : \"self\",\n    \"timeZone\" : \"timeZone\",\n    \"key\" : \"key\"\n  }, {\n    \"accountId\" : \"accountId\",\n    \"emailAddress\" : \"emailAddress\",\n    \"displayName\" : \"displayName\",\n    \"accountType\" : \"accountType\",\n    \"name\" : \"name\",\n    \"active\" : true,\n    \"self\" : \"self\",\n    \"timeZone\" : \"timeZone\",\n    \"key\" : \"key\"\n  } ],\n  \"isWatching\" : true,\n  \"watchCount\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Watchers>(exampleJson)
            : default(Watchers);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete watcher
        /// </summary>
        /// <remarks>Deletes a user as a watcher of an issue.  This operation requires the **Allow users to watch issues** option to be *ON*. This option is set in General configuration for Jira. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.  **[Permissions](#permissions) required:**   *  *Browse projects* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.  *  If [issue-level security](https://confluence.atlassian.com/x/J4lKLg) is configured, issue-level security permission to view the issue.  *  To remove users other than themselves from the watchlist, *Manage watcher list* [project permission](https://confluence.atlassian.com/x/yodKLg) for the project that the issue is in.</remarks>
        /// <param name="issueIdOrKey">The ID or key of the issue.</param>
        /// <param name="username">This parameter is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.</param>
        /// <param name="accountId">The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*. Required.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if &#x60;accountId&#x60; is not supplied.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the permission to manage the watcher list.</response>
        /// <response code="404">Returned if the issue or the user is not found or the user does not have permission to view the issue.</response>
        [HttpDelete]
        [Route("/rest/api/3/issue/{issueIdOrKey}/watchers")]
        [ValidateModelState]
        [SwaggerOperation("RemoveWatcher")]
        public virtual IActionResult RemoveWatcher([FromRoute (Name = "issueIdOrKey")][Required]string issueIdOrKey, [FromQuery (Name = "username")]string username, [FromQuery (Name = "accountId")] [MaxLength(128)]string accountId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }
    }
}
