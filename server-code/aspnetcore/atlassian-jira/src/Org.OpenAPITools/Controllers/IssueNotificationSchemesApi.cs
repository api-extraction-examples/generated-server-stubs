/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class IssueNotificationSchemesApiController : ControllerBase
    { 
        /// <summary>
        /// Add notifications to notification scheme
        /// </summary>
        /// <remarks>Adds notifications to a notification scheme. You can add up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the notification scheme.</param>
        /// <param name="addNotificationsDetails"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user doesn&#39;t have the necessary permission.</response>
        /// <response code="404">Returned if the notification scheme isn&#39;t found.</response>
        [HttpPut]
        [Route("/rest/api/3/notificationscheme/{id}/notification")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("AddNotifications")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request isn&#39;t valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user doesn&#39;t have the necessary permission.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the notification scheme isn&#39;t found.")]
        public virtual IActionResult AddNotifications([FromRoute (Name = "id")][Required]string id, [FromBody]AddNotificationsDetails addNotificationsDetails)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create notification scheme
        /// </summary>
        /// <remarks>Creates a notification scheme with notifications. You can create up to 1000 notifications per request.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="createNotificationSchemeDetails"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user doesn&#39;t have the necessary permission.</response>
        [HttpPost]
        [Route("/rest/api/3/notificationscheme")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateNotificationScheme")]
        [SwaggerResponse(statusCode: 201, type: typeof(NotificationSchemeId), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request isn&#39;t valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user doesn&#39;t have the necessary permission.")]
        public virtual IActionResult CreateNotificationScheme([FromBody]CreateNotificationSchemeDetails createNotificationSchemeDetails)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(NotificationSchemeId));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"id\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NotificationSchemeId>(exampleJson)
            : default(NotificationSchemeId);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete notification scheme
        /// </summary>
        /// <remarks>Deletes a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="notificationSchemeId">The ID of the notification scheme.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user doesn&#39;t have the necessary permission.</response>
        /// <response code="404">Returned if the notification scheme isn&#39;t found.</response>
        [HttpDelete]
        [Route("/rest/api/3/notificationscheme/{notificationSchemeId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteNotificationScheme")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request isn&#39;t valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user doesn&#39;t have the necessary permission.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the notification scheme isn&#39;t found.")]
        public virtual IActionResult DeleteNotificationScheme([FromRoute (Name = "notificationSchemeId")][Required]string notificationSchemeId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get notification scheme
        /// </summary>
        /// <remarks>Returns a [notification scheme](https://confluence.atlassian.com/x/8YdKLg), including the list of events and the recipients who will receive notifications for those events.  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with the notification scheme.</remarks>
        /// <param name="id">The ID of the notification scheme. Use [Get notification schemes paginated](#api-rest-api-3-notificationscheme-get) to get a list of notification scheme IDs.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the notification scheme is not found or the user does not have permission to view it.</response>
        [HttpGet]
        [Route("/rest/api/3/notificationscheme/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationScheme")]
        [SwaggerResponse(statusCode: 200, type: typeof(NotificationScheme), description: "Returned if the request is successful.")]
        public virtual IActionResult GetNotificationScheme([FromRoute (Name = "id")][Required]long id, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(NotificationScheme));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"expand\" : \"expand\",\n  \"projects\" : [ 7, 7 ],\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"self\",\n  \"id\" : 5,\n  \"notificationSchemeEvents\" : [ {\n    \"event\" : {\n      \"templateEvent\" : \"\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : 5\n    },\n    \"notifications\" : [ {\n      \"emailAddress\" : \"emailAddress\",\n      \"expand\" : \"expand\",\n      \"field\" : \"\",\n      \"projectRole\" : \"\",\n      \"parameter\" : \"parameter\",\n      \"recipient\" : \"recipient\",\n      \"id\" : 2,\n      \"notificationType\" : \"CurrentAssignee\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"emailAddress\" : \"emailAddress\",\n      \"expand\" : \"expand\",\n      \"field\" : \"\",\n      \"projectRole\" : \"\",\n      \"parameter\" : \"parameter\",\n      \"recipient\" : \"recipient\",\n      \"id\" : 2,\n      \"notificationType\" : \"CurrentAssignee\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ]\n  }, {\n    \"event\" : {\n      \"templateEvent\" : \"\",\n      \"name\" : \"name\",\n      \"description\" : \"description\",\n      \"id\" : 5\n    },\n    \"notifications\" : [ {\n      \"emailAddress\" : \"emailAddress\",\n      \"expand\" : \"expand\",\n      \"field\" : \"\",\n      \"projectRole\" : \"\",\n      \"parameter\" : \"parameter\",\n      \"recipient\" : \"recipient\",\n      \"id\" : 2,\n      \"notificationType\" : \"CurrentAssignee\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    }, {\n      \"emailAddress\" : \"emailAddress\",\n      \"expand\" : \"expand\",\n      \"field\" : \"\",\n      \"projectRole\" : \"\",\n      \"parameter\" : \"parameter\",\n      \"recipient\" : \"recipient\",\n      \"id\" : 2,\n      \"notificationType\" : \"CurrentAssignee\",\n      \"user\" : \"\",\n      \"group\" : \"\"\n    } ]\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<NotificationScheme>(exampleJson)
            : default(NotificationScheme);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get projects using notification schemes paginated
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) mapping of project that have notification scheme assigned. You can provide either one or multiple notification scheme IDs or project IDs to filter by. If you don&#39;t provide any, this will return a list of all mappings. Note that only company-managed (classic) projects are supported. This is because team-managed projects don&#39;t have a concept of a default notification scheme. The mappings are ordered by projectId.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="notificationSchemeId">The list of notifications scheme IDs to be filtered out</param>
        /// <param name="projectId">The list of project IDs to be filtered out</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/notificationscheme/project")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationSchemeToProjectMappings")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanNotificationSchemeAndProjectMappingJsonBean), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if search criteria are invalid, strings vs numbers for projectId, notificationSchemeId, startAt and maxResult")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        public virtual IActionResult GetNotificationSchemeToProjectMappings([FromQuery (Name = "startAt")]string startAt, [FromQuery (Name = "maxResults")]string maxResults, [FromQuery (Name = "notificationSchemeId")]List<string> notificationSchemeId, [FromQuery (Name = "projectId")]List<string> projectId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanNotificationSchemeAndProjectMappingJsonBean));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"notificationSchemeId\" : \"notificationSchemeId\",\n    \"projectId\" : \"projectId\"\n  }, {\n    \"notificationSchemeId\" : \"notificationSchemeId\",\n    \"projectId\" : \"projectId\"\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanNotificationSchemeAndProjectMappingJsonBean>(exampleJson)
            : default(PageBeanNotificationSchemeAndProjectMappingJsonBean);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get notification schemes paginated
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of [notification schemes](https://confluence.atlassian.com/x/8YdKLg) ordered by the display name.  *Note that you should allow for events without recipients to appear in responses.*  **[Permissions](#permissions) required:** Permission to access Jira, however, the user must have permission to administer at least one project associated with a notification scheme for it to be returned.</remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of notification schemes IDs to be filtered by</param>
        /// <param name="projectId">The list of projects IDs to be filtered by</param>
        /// <param name="onlyDefault">When set to true, returns only the default notification scheme. If you provide project IDs not associated with the default, returns an empty page. The default value is false.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;all&#x60; Returns all expandable information  *  &#x60;field&#x60; Returns information about any custom fields assigned to receive an event  *  &#x60;group&#x60; Returns information about any groups assigned to receive an event  *  &#x60;notificationSchemeEvents&#x60; Returns a list of event associations. This list is returned for all expandable information  *  &#x60;projectRole&#x60; Returns information about any project roles assigned to receive an event  *  &#x60;user&#x60; Returns information about any users assigned to receive an event</param>
        /// <response code="200">Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/notificationscheme")]
        [ValidateModelState]
        [SwaggerOperation("GetNotificationSchemes")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanNotificationScheme), description: "Returned if the request is successful. Only returns notification schemes that the user has permission to access. An empty list is returned if the user lacks permission to access all notification schemes.")]
        public virtual IActionResult GetNotificationSchemes([FromQuery (Name = "startAt")]string startAt, [FromQuery (Name = "maxResults")]string maxResults, [FromQuery (Name = "id")]List<string> id, [FromQuery (Name = "projectId")]List<string> projectId, [FromQuery (Name = "onlyDefault")]bool? onlyDefault, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanNotificationScheme));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"expand\" : \"expand\",\n    \"projects\" : [ 7, 7 ],\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"self\" : \"self\",\n    \"id\" : 5,\n    \"notificationSchemeEvents\" : [ {\n      \"event\" : {\n        \"templateEvent\" : \"\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : 5\n      },\n      \"notifications\" : [ {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      }, {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      } ]\n    }, {\n      \"event\" : {\n        \"templateEvent\" : \"\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : 5\n      },\n      \"notifications\" : [ {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      }, {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      } ]\n    } ]\n  }, {\n    \"expand\" : \"expand\",\n    \"projects\" : [ 7, 7 ],\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"self\" : \"self\",\n    \"id\" : 5,\n    \"notificationSchemeEvents\" : [ {\n      \"event\" : {\n        \"templateEvent\" : \"\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : 5\n      },\n      \"notifications\" : [ {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      }, {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      } ]\n    }, {\n      \"event\" : {\n        \"templateEvent\" : \"\",\n        \"name\" : \"name\",\n        \"description\" : \"description\",\n        \"id\" : 5\n      },\n      \"notifications\" : [ {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      }, {\n        \"emailAddress\" : \"emailAddress\",\n        \"expand\" : \"expand\",\n        \"field\" : \"\",\n        \"projectRole\" : \"\",\n        \"parameter\" : \"parameter\",\n        \"recipient\" : \"recipient\",\n        \"id\" : 2,\n        \"notificationType\" : \"CurrentAssignee\",\n        \"user\" : \"\",\n        \"group\" : \"\"\n      } ]\n    } ]\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanNotificationScheme>(exampleJson)
            : default(PageBeanNotificationScheme);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Remove notification from notification scheme
        /// </summary>
        /// <remarks>Removes a notification from a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="notificationSchemeId">The ID of the notification scheme.</param>
        /// <param name="notificationId">The ID of the notification.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user doesn&#39;t have the necessary permission.</response>
        /// <response code="404">Returned if either the notification scheme or notification isn&#39;t found.</response>
        [HttpDelete]
        [Route("/rest/api/3/notificationscheme/{notificationSchemeId}/notification/{notificationId}")]
        [ValidateModelState]
        [SwaggerOperation("RemoveNotificationFromNotificationScheme")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request isn&#39;t valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user doesn&#39;t have the necessary permission.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if either the notification scheme or notification isn&#39;t found.")]
        public virtual IActionResult RemoveNotificationFromNotificationScheme([FromRoute (Name = "notificationSchemeId")][Required]string notificationSchemeId, [FromRoute (Name = "notificationId")][Required]string notificationId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update notification scheme
        /// </summary>
        /// <remarks>Updates a notification scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="id">The ID of the notification scheme.</param>
        /// <param name="updateNotificationSchemeDetails"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request isn&#39;t valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user doesn&#39;t have the necessary permission.</response>
        /// <response code="404">Returned if the notification scheme isn&#39;t found.</response>
        [HttpPut]
        [Route("/rest/api/3/notificationscheme/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateNotificationScheme")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if the request isn&#39;t valid.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user doesn&#39;t have the necessary permission.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorCollection), description: "Returned if the notification scheme isn&#39;t found.")]
        public virtual IActionResult UpdateNotificationScheme([FromRoute (Name = "id")][Required]string id, [FromBody]UpdateNotificationSchemeDetails updateNotificationSchemeDetails)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
