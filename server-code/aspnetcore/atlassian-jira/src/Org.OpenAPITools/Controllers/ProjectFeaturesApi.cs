/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectFeaturesApiController : ControllerBase
    { 
        /// <summary>
        /// Get project features
        /// </summary>
        /// <remarks>Returns the list of features for a project.</remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the required permissions.</response>
        /// <response code="404">Returned if the project is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/project/{projectIdOrKey}/features")]
        [ValidateModelState]
        [SwaggerOperation("GetFeaturesForProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerForProjectFeatures), description: "Returned if the request is successful.")]
        public virtual IActionResult GetFeaturesForProject([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerForProjectFeatures));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"features\" : [ {\n    \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ],\n    \"imageUri\" : \"imageUri\",\n    \"toggleLocked\" : true,\n    \"feature\" : \"feature\",\n    \"localisedDescription\" : \"localisedDescription\",\n    \"localisedName\" : \"localisedName\",\n    \"state\" : \"ENABLED\",\n    \"projectId\" : 0\n  }, {\n    \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ],\n    \"imageUri\" : \"imageUri\",\n    \"toggleLocked\" : true,\n    \"feature\" : \"feature\",\n    \"localisedDescription\" : \"localisedDescription\",\n    \"localisedName\" : \"localisedName\",\n    \"state\" : \"ENABLED\",\n    \"projectId\" : 0\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerForProjectFeatures>(exampleJson)
            : default(ContainerForProjectFeatures);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Set project feature state
        /// </summary>
        /// <remarks>Sets the state of a project feature.</remarks>
        /// <param name="projectIdOrKey">The ID or (case-sensitive) key of the project.</param>
        /// <param name="featureKey">The key of the feature.</param>
        /// <param name="projectFeatureState">Details of the feature state change.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the required permissions.</response>
        /// <response code="404">Returned if the project or project feature is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/project/{projectIdOrKey}/features/{featureKey}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("ToggleFeatureForProject")]
        [SwaggerResponse(statusCode: 200, type: typeof(ContainerForProjectFeatures), description: "Returned if the request is successful.")]
        public virtual IActionResult ToggleFeatureForProject([FromRoute (Name = "projectIdOrKey")][Required]string projectIdOrKey, [FromRoute (Name = "featureKey")][Required]string featureKey, [FromBody]ProjectFeatureState projectFeatureState)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ContainerForProjectFeatures));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"features\" : [ {\n    \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ],\n    \"imageUri\" : \"imageUri\",\n    \"toggleLocked\" : true,\n    \"feature\" : \"feature\",\n    \"localisedDescription\" : \"localisedDescription\",\n    \"localisedName\" : \"localisedName\",\n    \"state\" : \"ENABLED\",\n    \"projectId\" : 0\n  }, {\n    \"prerequisites\" : [ \"prerequisites\", \"prerequisites\" ],\n    \"imageUri\" : \"imageUri\",\n    \"toggleLocked\" : true,\n    \"feature\" : \"feature\",\n    \"localisedDescription\" : \"localisedDescription\",\n    \"localisedName\" : \"localisedName\",\n    \"state\" : \"ENABLED\",\n    \"projectId\" : 0\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ContainerForProjectFeatures>(exampleJson)
            : default(ContainerForProjectFeatures);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
