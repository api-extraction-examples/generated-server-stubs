/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AnnouncementBannerApiController : ControllerBase
    { 
        /// <summary>
        /// Get announcement banner configuration
        /// </summary>
        /// <remarks>Returns the current announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/announcementBanner")]
        [ValidateModelState]
        [SwaggerOperation("GetBanner")]
        [SwaggerResponse(statusCode: 200, type: typeof(AnnouncementBannerConfiguration), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user does not have the necessary permission.")]
        public virtual IActionResult GetBanner()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(AnnouncementBannerConfiguration));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            string exampleJson = null;
            exampleJson = "{\n  \"visibility\" : \"PUBLIC\",\n  \"isEnabled\" : true,\n  \"isDismissible\" : true,\n  \"message\" : \"message\",\n  \"hashId\" : \"hashId\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<AnnouncementBannerConfiguration>(exampleJson)
            : default(AnnouncementBannerConfiguration);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update announcement banner configuration
        /// </summary>
        /// <remarks>Updates the announcement banner configuration.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="announcementBannerConfigurationUpdate"></param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if an invalid parameter is passed.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpPut]
        [Route("/rest/api/3/announcementBanner")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetBanner")]
        [SwaggerResponse(statusCode: 204, type: typeof(Object), description: "Returned if the request is successful.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorCollection), description: "Returned if an invalid parameter is passed.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorCollection), description: "Returned if the authentication credentials are incorrect or missing.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorCollection), description: "Returned if the user does not have the necessary permission.")]
        public virtual IActionResult SetBanner([FromBody]AnnouncementBannerConfigurationUpdate announcementBannerConfigurationUpdate)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204, default(Object));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorCollection));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorCollection));
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
