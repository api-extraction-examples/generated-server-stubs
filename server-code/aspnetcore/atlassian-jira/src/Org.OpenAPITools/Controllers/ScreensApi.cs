/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ScreensApiController : ControllerBase
    { 
        /// <summary>
        /// Add field to default screen
        /// </summary>
        /// <remarks>Adds a field to the default tab of the default screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="fieldId">The ID of the field.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the field it not found or the field is already present.</response>
        [HttpPost]
        [Route("/rest/api/3/screens/addToDefault/{fieldId}")]
        [ValidateModelState]
        [SwaggerOperation("AddFieldToDefaultScreen")]
        [SwaggerResponse(statusCode: 200, type: typeof(Object), description: "Returned if the request is successful.")]
        public virtual IActionResult AddFieldToDefaultScreen([FromRoute (Name = "fieldId")][Required]string fieldId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Object));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Object>(exampleJson)
            : default(Object);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create screen
        /// </summary>
        /// <remarks>Creates a screen with a default field tab.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenDetails"></param>
        /// <response code="201">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the required permissions.</response>
        [HttpPost]
        [Route("/rest/api/3/screens")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateScreen")]
        [SwaggerResponse(statusCode: 201, type: typeof(Screen), description: "Returned if the request is successful.")]
        public virtual IActionResult CreateScreen([FromBody]ScreenDetails screenDetails)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Screen));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 5\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Screen>(exampleJson)
            : default(Screen);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete screen
        /// </summary>
        /// <remarks>Deletes a screen. A screen cannot be deleted if it is used in a screen scheme, workflow, or workflow draft.  Only screens used in classic projects can be deleted.</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <response code="204">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/screens/{screenId}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteScreen")]
        public virtual IActionResult DeleteScreen([FromRoute (Name = "screenId")][Required]long screenId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get available screen fields
        /// </summary>
        /// <remarks>Returns the fields that can be added to a tab on a screen.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen is not found.</response>
        [HttpGet]
        [Route("/rest/api/3/screens/{screenId}/availableFields")]
        [ValidateModelState]
        [SwaggerOperation("GetAvailableScreenFields")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<ScreenableField>), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAvailableScreenFields([FromRoute (Name = "screenId")][Required]long screenId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<ScreenableField>));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : \"id\"\n}, {\n  \"name\" : \"name\",\n  \"id\" : \"id\"\n} ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<ScreenableField>>(exampleJson)
            : default(List<ScreenableField>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get screens
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of all screens or those specified by one or more screen IDs.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="id">The list of screen IDs. To include multiple IDs, provide an ampersand-separated list. For example, &#x60;id&#x3D;10000&amp;id&#x3D;10001&#x60;.</param>
        /// <param name="queryString">String used to perform a case-insensitive partial match with screen name.</param>
        /// <param name="scope">The scope filter string. To filter by multiple scope, provide an ampersand-separated list. For example, &#x60;scope&#x3D;GLOBAL&amp;scope&#x3D;PROJECT&#x60;.</param>
        /// <param name="orderBy">[Order](#ordering) the results by a field:   *  &#x60;id&#x60; Sorts by screen ID.  *  &#x60;name&#x60; Sorts by screen name.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/screens")]
        [ValidateModelState]
        [SwaggerOperation("GetScreens")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanScreen), description: "Returned if the request is successful.")]
        public virtual IActionResult GetScreens([FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "id")]List<long> id, [FromQuery (Name = "queryString")]string queryString, [FromQuery (Name = "scope")]List<string> scope, [FromQuery (Name = "orderBy")]string orderBy)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanScreen));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 5\n  }, {\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 5\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanScreen>(exampleJson)
            : default(PageBeanScreen);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get screens for a field
        /// </summary>
        /// <remarks>Returns a [paginated](#pagination) list of the screens a field is used in.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="fieldId">The ID of the field to return screens for.</param>
        /// <param name="startAt">The index of the first item to return in a page of results (page offset).</param>
        /// <param name="maxResults">The maximum number of items to return per page.</param>
        /// <param name="expand">Use [expand](#expansion) to include additional information about screens in the response. This parameter accepts &#x60;tab&#x60; which returns details about the screen tabs the field is used in.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/field/{fieldId}/screens")]
        [ValidateModelState]
        [SwaggerOperation("GetScreensForField")]
        [SwaggerResponse(statusCode: 200, type: typeof(PageBeanScreenWithTab), description: "Returned if the request is successful.")]
        public virtual IActionResult GetScreensForField([FromRoute (Name = "fieldId")][Required]string fieldId, [FromQuery (Name = "startAt")]long? startAt, [FromQuery (Name = "maxResults")]int? maxResults, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PageBeanScreenWithTab));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"isLast\" : true,\n  \"maxResults\" : 0,\n  \"nextPage\" : \"https://openapi-generator.tech\",\n  \"values\" : [ {\n    \"tab\" : \"\",\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 5\n  }, {\n    \"tab\" : \"\",\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"id\" : 5\n  } ],\n  \"self\" : \"https://openapi-generator.tech\",\n  \"startAt\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PageBeanScreenWithTab>(exampleJson)
            : default(PageBeanScreenWithTab);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update screen
        /// </summary>
        /// <remarks>Updates a screen. Only screens used in classic projects can be updated.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="screenId">The ID of the screen.</param>
        /// <param name="updateScreenDetails"></param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="400">Returned if the request is not valid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the screen is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/screens/{screenId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateScreen")]
        [SwaggerResponse(statusCode: 200, type: typeof(Screen), description: "Returned if the request is successful.")]
        public virtual IActionResult UpdateScreen([FromRoute (Name = "screenId")][Required]long screenId, [FromBody]UpdateScreenDetails updateScreenDetails)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Screen));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"id\" : 5\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Screen>(exampleJson)
            : default(Screen);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
