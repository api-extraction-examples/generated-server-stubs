/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PermissionSchemesApiController : ControllerBase
    { 
        /// <summary>
        /// Create permission grant
        /// </summary>
        /// <remarks>Creates a permission grant in a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="schemeId">The ID of the permission scheme in which to create a new permission grant.</param>
        /// <param name="permissionGrant">The permission grant to create.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information.</param>
        /// <response code="201">Returned if the scheme permission is created.</response>
        /// <response code="400">Returned if the value for expand is invalid or the same permission grant is present.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpPost]
        [Route("/rest/api/3/permissionscheme/{schemeId}/permission")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreatePermissionGrant")]
        [SwaggerResponse(statusCode: 201, type: typeof(PermissionGrant), description: "Returned if the scheme permission is created.")]
        public virtual IActionResult CreatePermissionGrant([FromRoute (Name = "schemeId")][Required]long schemeId, [FromBody]PermissionGrant permissionGrant, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PermissionGrant));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"self\" : \"https://openapi-generator.tech\",\n  \"holder\" : \"\",\n  \"permission\" : \"permission\",\n  \"id\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionGrant>(exampleJson)
            : default(PermissionGrant);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create permission scheme
        /// </summary>
        /// <remarks>Creates a new permission scheme. You can create a permission scheme with or without defining a set of permission grants.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="permissionScheme">The permission scheme to create.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.</param>
        /// <response code="201">Returned if the permission scheme is created.</response>
        /// <response code="400">Returned if the request is invalid.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission or the feature is not available in the Jira plan.</response>
        [HttpPost]
        [Route("/rest/api/3/permissionscheme")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreatePermissionScheme")]
        [SwaggerResponse(statusCode: 201, type: typeof(PermissionScheme), description: "Returned if the permission scheme is created.")]
        public virtual IActionResult CreatePermissionScheme([FromBody]PermissionScheme permissionScheme, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(PermissionScheme));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            string exampleJson = null;
            exampleJson = "{\n  \"expand\" : \"expand\",\n  \"permissions\" : [ {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  }, {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  } ],\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionScheme>(exampleJson)
            : default(PermissionScheme);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Delete permission scheme
        /// </summary>
        /// <remarks>Deletes a permission scheme.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="schemeId">The ID of the permission scheme being deleted.</param>
        /// <response code="204">Returned if the permission scheme is deleted.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        /// <response code="404">Returned if the permission scheme is not found.</response>
        [HttpDelete]
        [Route("/rest/api/3/permissionscheme/{schemeId}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePermissionScheme")]
        public virtual IActionResult DeletePermissionScheme([FromRoute (Name = "schemeId")][Required]long schemeId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Delete permission scheme grant
        /// </summary>
        /// <remarks>Deletes a permission grant from a permission scheme. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="schemeId">The ID of the permission scheme to delete the permission grant from.</param>
        /// <param name="permissionId">The ID of the permission grant to delete.</param>
        /// <response code="204">Returned if the permission grant is deleted.</response>
        /// <response code="400">Returned if permission grant with the provided ID is not found.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if the user does not have the necessary permission.</response>
        [HttpDelete]
        [Route("/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePermissionSchemeEntity")]
        public virtual IActionResult DeletePermissionSchemeEntity([FromRoute (Name = "schemeId")][Required]long schemeId, [FromRoute (Name = "permissionId")][Required]long permissionId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get all permission schemes
        /// </summary>
        /// <remarks>Returns all permission schemes.  ### About permission schemes and grants ###  A permission scheme is a collection of permission grants. A permission grant consists of a &#x60;holder&#x60; and a &#x60;permission&#x60;.  #### Holder object ####  The &#x60;holder&#x60; object contains information about the user or group being granted the permission. For example, the *Administer projects* permission is granted to a group named *Teams in space administrators*. In this case, the type is &#x60;\&quot;type\&quot;: \&quot;group\&quot;&#x60;, and the parameter is the group name, &#x60;\&quot;parameter\&quot;: \&quot;Teams in space administrators\&quot;&#x60; and the value is group ID, &#x60;\&quot;value\&quot;: \&quot;ca85fac0-d974-40ca-a615-7af99c48d24f\&quot;&#x60;. The &#x60;holder&#x60; object is defined by the following properties:   *  &#x60;type&#x60; Identifies the user or group (see the list of types below).  *  &#x60;parameter&#x60; As a group&#39;s name can change, use of &#x60;value&#x60; is recommended. The value of this property depends on the &#x60;type&#x60;. For example, if the &#x60;type&#x60; is a group, then you need to specify the group name.  *  &#x60;value&#x60; The value of this property depends on the &#x60;type&#x60;. If the &#x60;type&#x60; is a group, then you need to specify the group ID. For other &#x60;type&#x60; it has the same value as &#x60;parameter&#x60;  The following &#x60;types&#x60; are available. The expected values for &#x60;parameter&#x60; and &#x60;value&#x60; are given in parentheses (some types may not have a &#x60;parameter&#x60; or &#x60;value&#x60;):   *  &#x60;anyone&#x60; Grant for anonymous users.  *  &#x60;applicationRole&#x60; Grant for users with access to the specified application (application name, application name). See [Update product access settings](https://confluence.atlassian.com/x/3YxjL) for more information.  *  &#x60;assignee&#x60; Grant for the user currently assigned to an issue.  *  &#x60;group&#x60; Grant for the specified group (&#x60;parameter&#x60; : group name, &#x60;value&#x60; : group ID).  *  &#x60;groupCustomField&#x60; Grant for a user in the group selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  *  &#x60;projectLead&#x60; Grant for a project lead.  *  &#x60;projectRole&#x60; Grant for the specified project role (&#x60;parameter&#x60; :project role ID, &#x60;value&#x60; : project role ID).  *  &#x60;reporter&#x60; Grant for the user who reported the issue.  *  &#x60;sd.customer.portal.only&#x60; Jira Service Desk only. Grants customers permission to access the customer portal but not Jira. See [Customizing Jira Service Desk permissions](https://confluence.atlassian.com/x/24dKLg) for more information.  *  &#x60;user&#x60; Grant for the specified user (&#x60;parameter&#x60; : user ID - historically this was the userkey but that is deprecated and the account ID should be used, &#x60;value&#x60; : user ID).  *  &#x60;userCustomField&#x60; Grant for a user selected in the specified custom field (&#x60;parameter&#x60; : custom field ID, &#x60;value&#x60; : custom field ID).  #### Built-in permissions ####  The [built-in Jira permissions](https://confluence.atlassian.com/x/yodKLg) are listed below. Apps can also define custom permissions. See the [project permission](https://developer.atlassian.com/cloud/jira/platform/modules/project-permission/) and [global permission](https://developer.atlassian.com/cloud/jira/platform/modules/global-permission/) module documentation for more information.  **Project permissions**   *  &#x60;ADMINISTER_PROJECTS&#x60;  *  &#x60;BROWSE_PROJECTS&#x60;  *  &#x60;MANAGE_SPRINTS_PERMISSION&#x60; (Jira Software only)  *  &#x60;SERVICEDESK_AGENT&#x60; (Jira Service Desk only)  *  &#x60;VIEW_DEV_TOOLS&#x60; (Jira Software only)  *  &#x60;VIEW_READONLY_WORKFLOW&#x60;  **Issue permissions**   *  &#x60;ASSIGNABLE_USER&#x60;  *  &#x60;ASSIGN_ISSUES&#x60;  *  &#x60;CLOSE_ISSUES&#x60;  *  &#x60;CREATE_ISSUES&#x60;  *  &#x60;DELETE_ISSUES&#x60;  *  &#x60;EDIT_ISSUES&#x60;  *  &#x60;LINK_ISSUES&#x60;  *  &#x60;MODIFY_REPORTER&#x60;  *  &#x60;MOVE_ISSUES&#x60;  *  &#x60;RESOLVE_ISSUES&#x60;  *  &#x60;SCHEDULE_ISSUES&#x60;  *  &#x60;SET_ISSUE_SECURITY&#x60;  *  &#x60;TRANSITION_ISSUES&#x60;  **Voters and watchers permissions**   *  &#x60;MANAGE_WATCHERS&#x60;  *  &#x60;VIEW_VOTERS_AND_WATCHERS&#x60;  **Comments permissions**   *  &#x60;ADD_COMMENTS&#x60;  *  &#x60;DELETE_ALL_COMMENTS&#x60;  *  &#x60;DELETE_OWN_COMMENTS&#x60;  *  &#x60;EDIT_ALL_COMMENTS&#x60;  *  &#x60;EDIT_OWN_COMMENTS&#x60;  **Attachments permissions**   *  &#x60;CREATE_ATTACHMENTS&#x60;  *  &#x60;DELETE_ALL_ATTACHMENTS&#x60;  *  &#x60;DELETE_OWN_ATTACHMENTS&#x60;  **Time tracking permissions**   *  &#x60;DELETE_ALL_WORKLOGS&#x60;  *  &#x60;DELETE_OWN_WORKLOGS&#x60;  *  &#x60;EDIT_ALL_WORKLOGS&#x60;  *  &#x60;EDIT_OWN_WORKLOGS&#x60;  *  &#x60;WORK_ON_ISSUES&#x60;  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        [HttpGet]
        [Route("/rest/api/3/permissionscheme")]
        [ValidateModelState]
        [SwaggerOperation("GetAllPermissionSchemes")]
        [SwaggerResponse(statusCode: 200, type: typeof(PermissionSchemes), description: "Returned if the request is successful.")]
        public virtual IActionResult GetAllPermissionSchemes([FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PermissionSchemes));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"permissionSchemes\" : [ {\n    \"expand\" : \"expand\",\n    \"permissions\" : [ {\n      \"self\" : \"https://openapi-generator.tech\",\n      \"holder\" : \"\",\n      \"permission\" : \"permission\",\n      \"id\" : 6\n    }, {\n      \"self\" : \"https://openapi-generator.tech\",\n      \"holder\" : \"\",\n      \"permission\" : \"permission\",\n      \"id\" : 6\n    } ],\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"id\" : 0\n  }, {\n    \"expand\" : \"expand\",\n    \"permissions\" : [ {\n      \"self\" : \"https://openapi-generator.tech\",\n      \"holder\" : \"\",\n      \"permission\" : \"permission\",\n      \"id\" : 6\n    }, {\n      \"self\" : \"https://openapi-generator.tech\",\n      \"holder\" : \"\",\n      \"permission\" : \"permission\",\n      \"id\" : 6\n    } ],\n    \"scope\" : \"\",\n    \"name\" : \"name\",\n    \"description\" : \"description\",\n    \"self\" : \"https://openapi-generator.tech\",\n    \"id\" : 0\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionSchemes>(exampleJson)
            : default(PermissionSchemes);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get permission scheme
        /// </summary>
        /// <remarks>Returns a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="schemeId">The ID of the permission scheme to return.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the permission scheme is not found or the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/permissionscheme/{schemeId}")]
        [ValidateModelState]
        [SwaggerOperation("GetPermissionScheme")]
        [SwaggerResponse(statusCode: 200, type: typeof(PermissionScheme), description: "Returned if the request is successful.")]
        public virtual IActionResult GetPermissionScheme([FromRoute (Name = "schemeId")][Required]long schemeId, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PermissionScheme));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"expand\" : \"expand\",\n  \"permissions\" : [ {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  }, {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  } ],\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionScheme>(exampleJson)
            : default(PermissionScheme);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get permission scheme grant
        /// </summary>
        /// <remarks>Returns a permission grant.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="schemeId">The ID of the permission scheme.</param>
        /// <param name="permissionId">The ID of the permission grant.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the permission scheme or permission grant is not found or the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}")]
        [ValidateModelState]
        [SwaggerOperation("GetPermissionSchemeGrant")]
        [SwaggerResponse(statusCode: 200, type: typeof(PermissionGrant), description: "Returned if the request is successful.")]
        public virtual IActionResult GetPermissionSchemeGrant([FromRoute (Name = "schemeId")][Required]long schemeId, [FromRoute (Name = "permissionId")][Required]long permissionId, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PermissionGrant));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"self\" : \"https://openapi-generator.tech\",\n  \"holder\" : \"\",\n  \"permission\" : \"permission\",\n  \"id\" : 6\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionGrant>(exampleJson)
            : default(PermissionGrant);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get permission scheme grants
        /// </summary>
        /// <remarks>Returns all permission grants for a permission scheme.  **[Permissions](#permissions) required:** Permission to access Jira.</remarks>
        /// <param name="schemeId">The ID of the permission scheme.</param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;all&#x60; Returns all expandable information.</param>
        /// <response code="200">Returned if the request is successful.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="404">Returned if the permission schemes is not found or the user does not have the necessary permission.</response>
        [HttpGet]
        [Route("/rest/api/3/permissionscheme/{schemeId}/permission")]
        [ValidateModelState]
        [SwaggerOperation("GetPermissionSchemeGrants")]
        [SwaggerResponse(statusCode: 200, type: typeof(PermissionGrants), description: "Returned if the request is successful.")]
        public virtual IActionResult GetPermissionSchemeGrants([FromRoute (Name = "schemeId")][Required]long schemeId, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PermissionGrants));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"expand\" : \"expand\",\n  \"permissions\" : [ {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  }, {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionGrants>(exampleJson)
            : default(PermissionGrants);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update permission scheme
        /// </summary>
        /// <remarks>Updates a permission scheme. Below are some important things to note when using this resource:   *  If a permissions list is present in the request, then it is set in the permission scheme, overwriting *all existing* grants.  *  If you want to update only the name and description, then do not send a permissions list in the request.  *  Sending an empty list will remove all permission grants from the permission scheme.  If you want to add or delete a permission grant instead of updating the whole list, see [Create permission grant](#api-rest-api-3-permissionscheme-schemeId-permission-post) or [Delete permission scheme entity](#api-rest-api-3-permissionscheme-schemeId-permission-permissionId-delete).  See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more details.  **[Permissions](#permissions) required:** *Administer Jira* [global permission](https://confluence.atlassian.com/x/x4dKLg).</remarks>
        /// <param name="schemeId">The ID of the permission scheme to update.</param>
        /// <param name="permissionScheme"></param>
        /// <param name="expand">Use expand to include additional information in the response. This parameter accepts a comma-separated list. Note that permissions are always included when you specify any value. Expand options include:   *  &#x60;all&#x60; Returns all expandable information.  *  &#x60;field&#x60; Returns information about the custom field granted the permission.  *  &#x60;group&#x60; Returns information about the group that is granted the permission.  *  &#x60;permissions&#x60; Returns all permission grants for each permission scheme.  *  &#x60;projectRole&#x60; Returns information about the project role granted the permission.  *  &#x60;user&#x60; Returns information about the user who is granted the permission.</param>
        /// <response code="200">Returned if the scheme is updated.</response>
        /// <response code="401">Returned if the authentication credentials are incorrect or missing.</response>
        /// <response code="403">Returned if:   *  the user does not have the necessary permission to update permission schemes.  *  the Jira instance is Jira Core Free or Jira Software Free. Permission schemes cannot be updated on free plans.</response>
        /// <response code="404">Returned if the permission scheme is not found.</response>
        [HttpPut]
        [Route("/rest/api/3/permissionscheme/{schemeId}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdatePermissionScheme")]
        [SwaggerResponse(statusCode: 200, type: typeof(PermissionScheme), description: "Returned if the scheme is updated.")]
        public virtual IActionResult UpdatePermissionScheme([FromRoute (Name = "schemeId")][Required]long schemeId, [FromBody]PermissionScheme permissionScheme, [FromQuery (Name = "expand")]string expand)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PermissionScheme));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"expand\" : \"expand\",\n  \"permissions\" : [ {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  }, {\n    \"self\" : \"https://openapi-generator.tech\",\n    \"holder\" : \"\",\n    \"permission\" : \"permission\",\n    \"id\" : 6\n  } ],\n  \"scope\" : \"\",\n  \"name\" : \"name\",\n  \"description\" : \"description\",\n  \"self\" : \"https://openapi-generator.tech\",\n  \"id\" : 0\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PermissionScheme>(exampleJson)
            : default(PermissionScheme);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
