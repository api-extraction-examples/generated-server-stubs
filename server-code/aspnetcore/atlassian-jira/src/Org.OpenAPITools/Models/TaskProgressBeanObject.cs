/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a task.
    /// </summary>
    [DataContract]
    public partial class TaskProgressBeanObject : IEquatable<TaskProgressBeanObject>
    {
        /// <summary>
        /// The description of the task.
        /// </summary>
        /// <value>The description of the task.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The execution time of the task, in milliseconds.
        /// </summary>
        /// <value>The execution time of the task, in milliseconds.</value>
        [Required]
        [DataMember(Name="elapsedRuntime", EmitDefaultValue=true)]
        public long ElapsedRuntime { get; set; }

        /// <summary>
        /// A timestamp recording when the task was finished.
        /// </summary>
        /// <value>A timestamp recording when the task was finished.</value>
        [DataMember(Name="finished", EmitDefaultValue=true)]
        public long Finished { get; set; }

        /// <summary>
        /// The ID of the task.
        /// </summary>
        /// <value>The ID of the task.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// A timestamp recording when the task progress was last updated.
        /// </summary>
        /// <value>A timestamp recording when the task progress was last updated.</value>
        [Required]
        [DataMember(Name="lastUpdate", EmitDefaultValue=true)]
        public long LastUpdate { get; set; }

        /// <summary>
        /// Information about the progress of the task.
        /// </summary>
        /// <value>Information about the progress of the task.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// The progress of the task, as a percentage complete.
        /// </summary>
        /// <value>The progress of the task, as a percentage complete.</value>
        [Required]
        [DataMember(Name="progress", EmitDefaultValue=true)]
        public long Progress { get; set; }

        /// <summary>
        /// The result of the task execution.
        /// </summary>
        /// <value>The result of the task execution.</value>
        [DataMember(Name="result", EmitDefaultValue=true)]
        public Object Result { get; set; }

        /// <summary>
        /// The URL of the task.
        /// </summary>
        /// <value>The URL of the task.</value>
        [Required]
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// A timestamp recording when the task was started.
        /// </summary>
        /// <value>A timestamp recording when the task was started.</value>
        [DataMember(Name="started", EmitDefaultValue=true)]
        public long Started { get; set; }


        /// <summary>
        /// The status of the task.
        /// </summary>
        /// <value>The status of the task.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ENQUEUEDEnum for ENQUEUED
            /// </summary>
            [EnumMember(Value = "ENQUEUED")]
            ENQUEUEDEnum = 1,
            
            /// <summary>
            /// Enum RUNNINGEnum for RUNNING
            /// </summary>
            [EnumMember(Value = "RUNNING")]
            RUNNINGEnum = 2,
            
            /// <summary>
            /// Enum COMPLETEEnum for COMPLETE
            /// </summary>
            [EnumMember(Value = "COMPLETE")]
            COMPLETEEnum = 3,
            
            /// <summary>
            /// Enum FAILEDEnum for FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILEDEnum = 4,
            
            /// <summary>
            /// Enum CANCELREQUESTEDEnum for CANCEL_REQUESTED
            /// </summary>
            [EnumMember(Value = "CANCEL_REQUESTED")]
            CANCELREQUESTEDEnum = 5,
            
            /// <summary>
            /// Enum CANCELLEDEnum for CANCELLED
            /// </summary>
            [EnumMember(Value = "CANCELLED")]
            CANCELLEDEnum = 6,
            
            /// <summary>
            /// Enum DEADEnum for DEAD
            /// </summary>
            [EnumMember(Value = "DEAD")]
            DEADEnum = 7
        }

        /// <summary>
        /// The status of the task.
        /// </summary>
        /// <value>The status of the task.</value>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// A timestamp recording when the task was submitted.
        /// </summary>
        /// <value>A timestamp recording when the task was submitted.</value>
        [Required]
        [DataMember(Name="submitted", EmitDefaultValue=true)]
        public long Submitted { get; set; }

        /// <summary>
        /// The ID of the user who submitted the task.
        /// </summary>
        /// <value>The ID of the user who submitted the task.</value>
        [Required]
        [DataMember(Name="submittedBy", EmitDefaultValue=true)]
        public long SubmittedBy { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskProgressBeanObject {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ElapsedRuntime: ").Append(ElapsedRuntime).Append("\n");
            sb.Append("  Finished: ").Append(Finished).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Progress: ").Append(Progress).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Started: ").Append(Started).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Submitted: ").Append(Submitted).Append("\n");
            sb.Append("  SubmittedBy: ").Append(SubmittedBy).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskProgressBeanObject)obj);
        }

        /// <summary>
        /// Returns true if TaskProgressBeanObject instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskProgressBeanObject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskProgressBeanObject other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ElapsedRuntime == other.ElapsedRuntime ||
                    
                    ElapsedRuntime.Equals(other.ElapsedRuntime)
                ) && 
                (
                    Finished == other.Finished ||
                    
                    Finished.Equals(other.Finished)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Progress == other.Progress ||
                    
                    Progress.Equals(other.Progress)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    Result.Equals(other.Result)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Started == other.Started ||
                    
                    Started.Equals(other.Started)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Submitted == other.Submitted ||
                    
                    Submitted.Equals(other.Submitted)
                ) && 
                (
                    SubmittedBy == other.SubmittedBy ||
                    
                    SubmittedBy.Equals(other.SubmittedBy)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + ElapsedRuntime.GetHashCode();
                    
                    hashCode = hashCode * 59 + Finished.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    
                    hashCode = hashCode * 59 + Progress.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    
                    hashCode = hashCode * 59 + Started.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + Submitted.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubmittedBy.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskProgressBeanObject left, TaskProgressBeanObject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskProgressBeanObject left, TaskProgressBeanObject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
