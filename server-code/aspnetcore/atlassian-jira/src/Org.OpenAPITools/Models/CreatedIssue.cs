/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a created issue or subtask.
    /// </summary>
    [DataContract]
    public partial class CreatedIssue : IEquatable<CreatedIssue>
    {
        /// <summary>
        /// The ID of the created issue or subtask.
        /// </summary>
        /// <value>The ID of the created issue or subtask.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the created issue or subtask.
        /// </summary>
        /// <value>The key of the created issue or subtask.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The URL of the created issue or subtask.
        /// </summary>
        /// <value>The URL of the created issue or subtask.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Gets or Sets Transition
        /// </summary>
        [DataMember(Name="transition", EmitDefaultValue=false)]
        public CreatedIssueTransition Transition { get; set; }

        /// <summary>
        /// Gets or Sets Watchers
        /// </summary>
        [DataMember(Name="watchers", EmitDefaultValue=false)]
        public CreatedIssueWatchers Watchers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreatedIssue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Transition: ").Append(Transition).Append("\n");
            sb.Append("  Watchers: ").Append(Watchers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreatedIssue)obj);
        }

        /// <summary>
        /// Returns true if CreatedIssue instances are equal
        /// </summary>
        /// <param name="other">Instance of CreatedIssue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreatedIssue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Transition == other.Transition ||
                    Transition != null &&
                    Transition.Equals(other.Transition)
                ) && 
                (
                    Watchers == other.Watchers ||
                    Watchers != null &&
                    Watchers.Equals(other.Watchers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    if (Transition != null)
                    hashCode = hashCode * 59 + Transition.GetHashCode();
                    if (Watchers != null)
                    hashCode = hashCode * 59 + Watchers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreatedIssue left, CreatedIssue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreatedIssue left, CreatedIssue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
