/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class JiraExpressionsComplexityBean : IEquatable<JiraExpressionsComplexityBean>
    {
        /// <summary>
        /// Gets or Sets Beans
        /// </summary>
        [Required]
        [DataMember(Name="beans", EmitDefaultValue=false)]
        public JiraExpressionsComplexityValueBean Beans { get; set; }

        /// <summary>
        /// Gets or Sets ExpensiveOperations
        /// </summary>
        [Required]
        [DataMember(Name="expensiveOperations", EmitDefaultValue=false)]
        public JiraExpressionsComplexityValueBean ExpensiveOperations { get; set; }

        /// <summary>
        /// Gets or Sets PrimitiveValues
        /// </summary>
        [Required]
        [DataMember(Name="primitiveValues", EmitDefaultValue=false)]
        public JiraExpressionsComplexityValueBean PrimitiveValues { get; set; }

        /// <summary>
        /// Gets or Sets Steps
        /// </summary>
        [Required]
        [DataMember(Name="steps", EmitDefaultValue=false)]
        public JiraExpressionsComplexityValueBean Steps { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JiraExpressionsComplexityBean {\n");
            sb.Append("  Beans: ").Append(Beans).Append("\n");
            sb.Append("  ExpensiveOperations: ").Append(ExpensiveOperations).Append("\n");
            sb.Append("  PrimitiveValues: ").Append(PrimitiveValues).Append("\n");
            sb.Append("  Steps: ").Append(Steps).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JiraExpressionsComplexityBean)obj);
        }

        /// <summary>
        /// Returns true if JiraExpressionsComplexityBean instances are equal
        /// </summary>
        /// <param name="other">Instance of JiraExpressionsComplexityBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JiraExpressionsComplexityBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Beans == other.Beans ||
                    Beans != null &&
                    Beans.Equals(other.Beans)
                ) && 
                (
                    ExpensiveOperations == other.ExpensiveOperations ||
                    ExpensiveOperations != null &&
                    ExpensiveOperations.Equals(other.ExpensiveOperations)
                ) && 
                (
                    PrimitiveValues == other.PrimitiveValues ||
                    PrimitiveValues != null &&
                    PrimitiveValues.Equals(other.PrimitiveValues)
                ) && 
                (
                    Steps == other.Steps ||
                    Steps != null &&
                    Steps.Equals(other.Steps)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Beans != null)
                    hashCode = hashCode * 59 + Beans.GetHashCode();
                    if (ExpensiveOperations != null)
                    hashCode = hashCode * 59 + ExpensiveOperations.GetHashCode();
                    if (PrimitiveValues != null)
                    hashCode = hashCode * 59 + PrimitiveValues.GetHashCode();
                    if (Steps != null)
                    hashCode = hashCode * 59 + Steps.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JiraExpressionsComplexityBean left, JiraExpressionsComplexityBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JiraExpressionsComplexityBean left, JiraExpressionsComplexityBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
