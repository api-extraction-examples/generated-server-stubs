/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An operand that is a JQL keyword. See [Advanced searching - keywords reference](https://confluence.atlassian.com/jiracorecloud/advanced-searching-keywords-reference-765593717.html#Advancedsearching-keywordsreference-EMPTYEMPTY) for more information about operand keywords.
    /// </summary>
    [DataContract]
    public partial class KeywordOperand : IEquatable<KeywordOperand>
    {

        /// <summary>
        /// The keyword that is the operand value.
        /// </summary>
        /// <value>The keyword that is the operand value.</value>
        [TypeConverter(typeof(CustomEnumConverter<KeywordEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum KeywordEnum
        {
            
            /// <summary>
            /// Enum EmptyEnum for empty
            /// </summary>
            [EnumMember(Value = "empty")]
            EmptyEnum = 1
        }

        /// <summary>
        /// The keyword that is the operand value.
        /// </summary>
        /// <value>The keyword that is the operand value.</value>
        [Required]
        [DataMember(Name="keyword", EmitDefaultValue=true)]
        public KeywordEnum Keyword { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KeywordOperand {\n");
            sb.Append("  Keyword: ").Append(Keyword).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((KeywordOperand)obj);
        }

        /// <summary>
        /// Returns true if KeywordOperand instances are equal
        /// </summary>
        /// <param name="other">Instance of KeywordOperand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KeywordOperand other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Keyword == other.Keyword ||
                    
                    Keyword.Equals(other.Keyword)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Keyword.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(KeywordOperand left, KeywordOperand right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(KeywordOperand left, KeywordOperand right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
