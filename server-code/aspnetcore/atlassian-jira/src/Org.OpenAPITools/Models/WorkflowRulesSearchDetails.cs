/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of workflow transition rules.
    /// </summary>
    [DataContract]
    public partial class WorkflowRulesSearchDetails : IEquatable<WorkflowRulesSearchDetails>
    {
        /// <summary>
        /// List of workflow rule IDs that do not belong to the workflow or can not be found.
        /// </summary>
        /// <value>List of workflow rule IDs that do not belong to the workflow or can not be found.</value>
        [DataMember(Name="invalidRules", EmitDefaultValue=false)]
        public List<Guid> InvalidRules { get; set; }

        /// <summary>
        /// List of valid workflow transition rules.
        /// </summary>
        /// <value>List of valid workflow transition rules.</value>
        [DataMember(Name="validRules", EmitDefaultValue=false)]
        public List<WorkflowTransitionRules> ValidRules { get; set; }

        /// <summary>
        /// The workflow ID.
        /// </summary>
        /// <value>The workflow ID.</value>
        /// <example>a498d711-685d-428d-8c3e-bc03bb450ea7</example>
        [DataMember(Name="workflowEntityId", EmitDefaultValue=false)]
        public Guid WorkflowEntityId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowRulesSearchDetails {\n");
            sb.Append("  InvalidRules: ").Append(InvalidRules).Append("\n");
            sb.Append("  ValidRules: ").Append(ValidRules).Append("\n");
            sb.Append("  WorkflowEntityId: ").Append(WorkflowEntityId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowRulesSearchDetails)obj);
        }

        /// <summary>
        /// Returns true if WorkflowRulesSearchDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowRulesSearchDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowRulesSearchDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InvalidRules == other.InvalidRules ||
                    InvalidRules != null &&
                    other.InvalidRules != null &&
                    InvalidRules.SequenceEqual(other.InvalidRules)
                ) && 
                (
                    ValidRules == other.ValidRules ||
                    ValidRules != null &&
                    other.ValidRules != null &&
                    ValidRules.SequenceEqual(other.ValidRules)
                ) && 
                (
                    WorkflowEntityId == other.WorkflowEntityId ||
                    WorkflowEntityId != null &&
                    WorkflowEntityId.Equals(other.WorkflowEntityId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (InvalidRules != null)
                    hashCode = hashCode * 59 + InvalidRules.GetHashCode();
                    if (ValidRules != null)
                    hashCode = hashCode * 59 + ValidRules.GetHashCode();
                    if (WorkflowEntityId != null)
                    hashCode = hashCode * 59 + WorkflowEntityId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowRulesSearchDetails left, WorkflowRulesSearchDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowRulesSearchDetails left, WorkflowRulesSearchDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
