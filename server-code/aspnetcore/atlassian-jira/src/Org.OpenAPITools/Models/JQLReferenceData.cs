/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Lists of JQL reference data.
    /// </summary>
    [DataContract]
    public partial class JQLReferenceData : IEquatable<JQLReferenceData>
    {
        /// <summary>
        /// List of JQL query reserved words.
        /// </summary>
        /// <value>List of JQL query reserved words.</value>
        [DataMember(Name="jqlReservedWords", EmitDefaultValue=false)]
        public List<string> JqlReservedWords { get; set; }

        /// <summary>
        /// List of fields usable in JQL queries.
        /// </summary>
        /// <value>List of fields usable in JQL queries.</value>
        [DataMember(Name="visibleFieldNames", EmitDefaultValue=false)]
        public List<FieldReferenceData> VisibleFieldNames { get; set; }

        /// <summary>
        /// List of functions usable in JQL queries.
        /// </summary>
        /// <value>List of functions usable in JQL queries.</value>
        [DataMember(Name="visibleFunctionNames", EmitDefaultValue=false)]
        public List<FunctionReferenceData> VisibleFunctionNames { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JQLReferenceData {\n");
            sb.Append("  JqlReservedWords: ").Append(JqlReservedWords).Append("\n");
            sb.Append("  VisibleFieldNames: ").Append(VisibleFieldNames).Append("\n");
            sb.Append("  VisibleFunctionNames: ").Append(VisibleFunctionNames).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JQLReferenceData)obj);
        }

        /// <summary>
        /// Returns true if JQLReferenceData instances are equal
        /// </summary>
        /// <param name="other">Instance of JQLReferenceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JQLReferenceData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    JqlReservedWords == other.JqlReservedWords ||
                    JqlReservedWords != null &&
                    other.JqlReservedWords != null &&
                    JqlReservedWords.SequenceEqual(other.JqlReservedWords)
                ) && 
                (
                    VisibleFieldNames == other.VisibleFieldNames ||
                    VisibleFieldNames != null &&
                    other.VisibleFieldNames != null &&
                    VisibleFieldNames.SequenceEqual(other.VisibleFieldNames)
                ) && 
                (
                    VisibleFunctionNames == other.VisibleFunctionNames ||
                    VisibleFunctionNames != null &&
                    other.VisibleFunctionNames != null &&
                    VisibleFunctionNames.SequenceEqual(other.VisibleFunctionNames)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (JqlReservedWords != null)
                    hashCode = hashCode * 59 + JqlReservedWords.GetHashCode();
                    if (VisibleFieldNames != null)
                    hashCode = hashCode * 59 + VisibleFieldNames.GetHashCode();
                    if (VisibleFunctionNames != null)
                    hashCode = hashCode * 59 + VisibleFunctionNames.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JQLReferenceData left, JQLReferenceData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JQLReferenceData left, JQLReferenceData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
