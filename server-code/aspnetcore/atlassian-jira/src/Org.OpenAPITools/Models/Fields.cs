/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Key fields from the linked issue.
    /// </summary>
    [DataContract]
    public partial class Fields : IEquatable<Fields>
    {
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public FieldsAssignee Assignee { get; set; }

        /// <summary>
        /// Gets or Sets IssueType
        /// </summary>
        [DataMember(Name="issueType", EmitDefaultValue=false)]
        public FieldsIssueType IssueType { get; set; }

        /// <summary>
        /// Gets or Sets Issuetype
        /// </summary>
        [DataMember(Name="issuetype", EmitDefaultValue=false)]
        public IssueTypeDetails Issuetype { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [DataMember(Name="priority", EmitDefaultValue=false)]
        public FieldsPriority Priority { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public FieldsStatus Status { get; set; }

        /// <summary>
        /// The summary description of the linked issue.
        /// </summary>
        /// <value>The summary description of the linked issue.</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Gets or Sets Timetracking
        /// </summary>
        [DataMember(Name="timetracking", EmitDefaultValue=false)]
        public FieldsTimetracking Timetracking { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Fields {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  Issuetype: ").Append(Issuetype).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  Timetracking: ").Append(Timetracking).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Fields)obj);
        }

        /// <summary>
        /// Returns true if Fields instances are equal
        /// </summary>
        /// <param name="other">Instance of Fields to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Fields other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Assignee == other.Assignee ||
                    Assignee != null &&
                    Assignee.Equals(other.Assignee)
                ) && 
                (
                    IssueType == other.IssueType ||
                    IssueType != null &&
                    IssueType.Equals(other.IssueType)
                ) && 
                (
                    Issuetype == other.Issuetype ||
                    Issuetype != null &&
                    Issuetype.Equals(other.Issuetype)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.Equals(other.Summary)
                ) && 
                (
                    Timetracking == other.Timetracking ||
                    Timetracking != null &&
                    Timetracking.Equals(other.Timetracking)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Assignee != null)
                    hashCode = hashCode * 59 + Assignee.GetHashCode();
                    if (IssueType != null)
                    hashCode = hashCode * 59 + IssueType.GetHashCode();
                    if (Issuetype != null)
                    hashCode = hashCode * 59 + Issuetype.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                    if (Timetracking != null)
                    hashCode = hashCode * 59 + Timetracking.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Fields left, Fields right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Fields left, Fields right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
