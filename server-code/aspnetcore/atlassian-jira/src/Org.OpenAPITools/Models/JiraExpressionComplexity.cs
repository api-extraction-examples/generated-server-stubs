/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the complexity of the analysed Jira expression.
    /// </summary>
    [DataContract]
    public partial class JiraExpressionComplexity : IEquatable<JiraExpressionComplexity>
    {
        /// <summary>
        /// Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  &#x60;issues.map(i &#x3D;&gt; i.comments)&#x60; performs as many expensive operations as there are issues on the issues list. So this parameter returns &#x60;N&#x60;, where &#x60;N&#x60; is the size of issue list.  *  &#x60;new Issue(10010).comments&#x60; gets comments for one issue, so its complexity is &#x60;2&#x60; (&#x60;1&#x60; to retrieve issue 10010 from the database plus &#x60;1&#x60; to get its comments).
        /// </summary>
        /// <value>Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  &#x60;issues.map(i &#x3D;&gt; i.comments)&#x60; performs as many expensive operations as there are issues on the issues list. So this parameter returns &#x60;N&#x60;, where &#x60;N&#x60; is the size of issue list.  *  &#x60;new Issue(10010).comments&#x60; gets comments for one issue, so its complexity is &#x60;2&#x60; (&#x60;1&#x60; to retrieve issue 10010 from the database plus &#x60;1&#x60; to get its comments).</value>
        [Required]
        [DataMember(Name="expensiveOperations", EmitDefaultValue=false)]
        public string ExpensiveOperations { get; set; }

        /// <summary>
        /// Variables used in the formula, mapped to the parts of the expression they refer to.
        /// </summary>
        /// <value>Variables used in the formula, mapped to the parts of the expression they refer to.</value>
        [DataMember(Name="variables", EmitDefaultValue=false)]
        public Dictionary<string, string> Variables { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JiraExpressionComplexity {\n");
            sb.Append("  ExpensiveOperations: ").Append(ExpensiveOperations).Append("\n");
            sb.Append("  Variables: ").Append(Variables).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JiraExpressionComplexity)obj);
        }

        /// <summary>
        /// Returns true if JiraExpressionComplexity instances are equal
        /// </summary>
        /// <param name="other">Instance of JiraExpressionComplexity to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JiraExpressionComplexity other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExpensiveOperations == other.ExpensiveOperations ||
                    ExpensiveOperations != null &&
                    ExpensiveOperations.Equals(other.ExpensiveOperations)
                ) && 
                (
                    Variables == other.Variables ||
                    Variables != null &&
                    other.Variables != null &&
                    Variables.SequenceEqual(other.Variables)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExpensiveOperations != null)
                    hashCode = hashCode * 59 + ExpensiveOperations.GetHashCode();
                    if (Variables != null)
                    hashCode = hashCode * 59 + Variables.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JiraExpressionComplexity left, JiraExpressionComplexity right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JiraExpressionComplexity left, JiraExpressionComplexity right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
