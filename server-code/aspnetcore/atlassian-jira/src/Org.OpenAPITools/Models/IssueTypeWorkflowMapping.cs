/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the mapping between an issue type and a workflow.
    /// </summary>
    [DataContract]
    public partial class IssueTypeWorkflowMapping : IEquatable<IssueTypeWorkflowMapping>
    {
        /// <summary>
        /// The ID of the issue type. Not required if updating the issue type-workflow mapping.
        /// </summary>
        /// <value>The ID of the issue type. Not required if updating the issue type-workflow mapping.</value>
        [DataMember(Name="issueType", EmitDefaultValue=false)]
        public string IssueType { get; set; }

        /// <summary>
        /// Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. Only applicable when updating the workflow-issue types mapping.
        /// </summary>
        /// <value>Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to &#x60;false&#x60;. Only applicable when updating the workflow-issue types mapping.</value>
        [DataMember(Name="updateDraftIfNeeded", EmitDefaultValue=true)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow.
        /// </summary>
        /// <value>The name of the workflow.</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public string Workflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueTypeWorkflowMapping {\n");
            sb.Append("  IssueType: ").Append(IssueType).Append("\n");
            sb.Append("  UpdateDraftIfNeeded: ").Append(UpdateDraftIfNeeded).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueTypeWorkflowMapping)obj);
        }

        /// <summary>
        /// Returns true if IssueTypeWorkflowMapping instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueTypeWorkflowMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueTypeWorkflowMapping other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IssueType == other.IssueType ||
                    IssueType != null &&
                    IssueType.Equals(other.IssueType)
                ) && 
                (
                    UpdateDraftIfNeeded == other.UpdateDraftIfNeeded ||
                    
                    UpdateDraftIfNeeded.Equals(other.UpdateDraftIfNeeded)
                ) && 
                (
                    Workflow == other.Workflow ||
                    Workflow != null &&
                    Workflow.Equals(other.Workflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (IssueType != null)
                    hashCode = hashCode * 59 + IssueType.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateDraftIfNeeded.GetHashCode();
                    if (Workflow != null)
                    hashCode = hashCode * 59 + Workflow.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueTypeWorkflowMapping left, IssueTypeWorkflowMapping right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueTypeWorkflowMapping left, IssueTypeWorkflowMapping right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
