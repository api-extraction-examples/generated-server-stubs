/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The JQL specifying the issues available in the evaluated Jira expression under the &#x60;issues&#x60; context variable. Not all issues returned by the JQL query are loaded, only those described by the &#x60;startAt&#x60; and &#x60;maxResults&#x60; properties. To determine whether it is necessary to iterate to ensure all the issues returned by the JQL query are evaluated, inspect &#x60;meta.issues.jql.count&#x60; in the response.
    /// </summary>
    [DataContract]
    public partial class JexpJqlIssues : IEquatable<JexpJqlIssues>
    {
        /// <summary>
        /// The maximum number of issues to return from the JQL query. Inspect &#x60;meta.issues.jql.maxResults&#x60; in the response to ensure the maximum value has not been exceeded.
        /// </summary>
        /// <value>The maximum number of issues to return from the JQL query. Inspect &#x60;meta.issues.jql.maxResults&#x60; in the response to ensure the maximum value has not been exceeded.</value>
        [DataMember(Name="maxResults", EmitDefaultValue=true)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The JQL query.
        /// </summary>
        /// <value>The JQL query.</value>
        [DataMember(Name="query", EmitDefaultValue=false)]
        public string Query { get; set; }

        /// <summary>
        /// The index of the first issue to return from the JQL query.
        /// </summary>
        /// <value>The index of the first issue to return from the JQL query.</value>
        [DataMember(Name="startAt", EmitDefaultValue=true)]
        public long StartAt { get; set; }


        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results.
        /// </summary>
        /// <value>Determines how to validate the JQL query and treat the validation results.</value>
        [TypeConverter(typeof(CustomEnumConverter<ValidationEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ValidationEnum
        {
            
            /// <summary>
            /// Enum StrictEnum for strict
            /// </summary>
            [EnumMember(Value = "strict")]
            StrictEnum = 1,
            
            /// <summary>
            /// Enum WarnEnum for warn
            /// </summary>
            [EnumMember(Value = "warn")]
            WarnEnum = 2,
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 3
        }

        /// <summary>
        /// Determines how to validate the JQL query and treat the validation results.
        /// </summary>
        /// <value>Determines how to validate the JQL query and treat the validation results.</value>
        [DataMember(Name="validation", EmitDefaultValue=true)]
        public ValidationEnum Validation { get; set; } = ValidationEnum.StrictEnum;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JexpJqlIssues {\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Query: ").Append(Query).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  Validation: ").Append(Validation).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JexpJqlIssues)obj);
        }

        /// <summary>
        /// Returns true if JexpJqlIssues instances are equal
        /// </summary>
        /// <param name="other">Instance of JexpJqlIssues to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JexpJqlIssues other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MaxResults == other.MaxResults ||
                    
                    MaxResults.Equals(other.MaxResults)
                ) && 
                (
                    Query == other.Query ||
                    Query != null &&
                    Query.Equals(other.Query)
                ) && 
                (
                    StartAt == other.StartAt ||
                    
                    StartAt.Equals(other.StartAt)
                ) && 
                (
                    Validation == other.Validation ||
                    
                    Validation.Equals(other.Validation)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + MaxResults.GetHashCode();
                    if (Query != null)
                    hashCode = hashCode * 59 + Query.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Validation.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JexpJqlIssues left, JexpJqlIssues right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JexpJqlIssues left, JexpJqlIssues right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
