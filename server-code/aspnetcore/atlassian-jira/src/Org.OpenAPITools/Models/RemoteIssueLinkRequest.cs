/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of a remote issue link.
    /// </summary>
    [DataContract]
    public partial class RemoteIssueLinkRequest : IEquatable<RemoteIssueLinkRequest>
    {
        /// <summary>
        /// Gets or Sets Application
        /// </summary>
        [DataMember(Name="application", EmitDefaultValue=false)]
        public Application Application { get; set; }

        /// <summary>
        /// An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters.
        /// </summary>
        /// <value>An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: &#x60;appId&#x3D;456&amp;pageId&#x3D;123&#x60;.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record&#39;s Jira ID.  The maximum length is 255 characters.</value>
        [DataMember(Name="globalId", EmitDefaultValue=false)]
        public string GlobalId { get; set; }

        /// <summary>
        /// Gets or Sets VarObject
        /// </summary>
        [Required]
        [DataMember(Name="object", EmitDefaultValue=false)]
        public RemoteObject VarObject { get; set; }

        /// <summary>
        /// Description of the relationship between the issue and the linked item. If not set, the relationship description \&quot;links to\&quot; is used in Jira.
        /// </summary>
        /// <value>Description of the relationship between the issue and the linked item. If not set, the relationship description \&quot;links to\&quot; is used in Jira.</value>
        [DataMember(Name="relationship", EmitDefaultValue=false)]
        public string Relationship { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RemoteIssueLinkRequest {\n");
            sb.Append("  Application: ").Append(Application).Append("\n");
            sb.Append("  GlobalId: ").Append(GlobalId).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("  Relationship: ").Append(Relationship).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RemoteIssueLinkRequest)obj);
        }

        /// <summary>
        /// Returns true if RemoteIssueLinkRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of RemoteIssueLinkRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RemoteIssueLinkRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Application == other.Application ||
                    Application != null &&
                    Application.Equals(other.Application)
                ) && 
                (
                    GlobalId == other.GlobalId ||
                    GlobalId != null &&
                    GlobalId.Equals(other.GlobalId)
                ) && 
                (
                    VarObject == other.VarObject ||
                    VarObject != null &&
                    VarObject.Equals(other.VarObject)
                ) && 
                (
                    Relationship == other.Relationship ||
                    Relationship != null &&
                    Relationship.Equals(other.Relationship)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Application != null)
                    hashCode = hashCode * 59 + Application.GetHashCode();
                    if (GlobalId != null)
                    hashCode = hashCode * 59 + GlobalId.GetHashCode();
                    if (VarObject != null)
                    hashCode = hashCode * 59 + VarObject.GetHashCode();
                    if (Relationship != null)
                    hashCode = hashCode * 59 + Relationship.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RemoteIssueLinkRequest left, RemoteIssueLinkRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RemoteIssueLinkRequest left, RemoteIssueLinkRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
