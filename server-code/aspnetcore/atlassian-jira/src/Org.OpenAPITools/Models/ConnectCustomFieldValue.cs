/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A list of custom field details.
    /// </summary>
    [DataContract]
    public partial class ConnectCustomFieldValue : IEquatable<ConnectCustomFieldValue>
    {

        /// <summary>
        /// The type of custom field.
        /// </summary>
        /// <value>The type of custom field.</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum StringIssueFieldEnum for StringIssueField
            /// </summary>
            [EnumMember(Value = "StringIssueField")]
            StringIssueFieldEnum = 1,
            
            /// <summary>
            /// Enum NumberIssueFieldEnum for NumberIssueField
            /// </summary>
            [EnumMember(Value = "NumberIssueField")]
            NumberIssueFieldEnum = 2,
            
            /// <summary>
            /// Enum RichTextIssueFieldEnum for RichTextIssueField
            /// </summary>
            [EnumMember(Value = "RichTextIssueField")]
            RichTextIssueFieldEnum = 3,
            
            /// <summary>
            /// Enum SingleSelectIssueFieldEnum for SingleSelectIssueField
            /// </summary>
            [EnumMember(Value = "SingleSelectIssueField")]
            SingleSelectIssueFieldEnum = 4,
            
            /// <summary>
            /// Enum MultiSelectIssueFieldEnum for MultiSelectIssueField
            /// </summary>
            [EnumMember(Value = "MultiSelectIssueField")]
            MultiSelectIssueFieldEnum = 5,
            
            /// <summary>
            /// Enum TextIssueFieldEnum for TextIssueField
            /// </summary>
            [EnumMember(Value = "TextIssueField")]
            TextIssueFieldEnum = 6
        }

        /// <summary>
        /// The type of custom field.
        /// </summary>
        /// <value>The type of custom field.</value>
        [Required]
        [DataMember(Name="_type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// The custom field ID.
        /// </summary>
        /// <value>The custom field ID.</value>
        [Required]
        [DataMember(Name="fieldID", EmitDefaultValue=true)]
        public int FieldID { get; set; }

        /// <summary>
        /// The issue ID.
        /// </summary>
        /// <value>The issue ID.</value>
        [Required]
        [DataMember(Name="issueID", EmitDefaultValue=true)]
        public int IssueID { get; set; }

        /// <summary>
        /// The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;.
        /// </summary>
        /// <value>The value of number type custom field when &#x60;_type&#x60; is &#x60;NumberIssueField&#x60;.</value>
        [DataMember(Name="number", EmitDefaultValue=true)]
        public decimal Number { get; set; }

        /// <summary>
        /// The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;.
        /// </summary>
        /// <value>The value of single select and multiselect custom field type when &#x60;_type&#x60; is &#x60;SingleSelectIssueField&#x60; or &#x60;MultiSelectIssueField&#x60;.</value>
        [DataMember(Name="optionID", EmitDefaultValue=false)]
        public string OptionID { get; set; }

        /// <summary>
        /// The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;.
        /// </summary>
        /// <value>The value of richText type custom field when &#x60;_type&#x60; is &#x60;RichTextIssueField&#x60;.</value>
        [DataMember(Name="richText", EmitDefaultValue=false)]
        public string RichText { get; set; }

        /// <summary>
        /// The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;.
        /// </summary>
        /// <value>The value of string type custom field when &#x60;_type&#x60; is &#x60;StringIssueField&#x60;.</value>
        [DataMember(Name="string", EmitDefaultValue=false)]
        public string VarString { get; set; }

        /// <summary>
        /// The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;.
        /// </summary>
        /// <value>The value of of text custom field type when &#x60;_type&#x60; is &#x60;TextIssueField&#x60;.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ConnectCustomFieldValue {\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  FieldID: ").Append(FieldID).Append("\n");
            sb.Append("  IssueID: ").Append(IssueID).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  OptionID: ").Append(OptionID).Append("\n");
            sb.Append("  RichText: ").Append(RichText).Append("\n");
            sb.Append("  VarString: ").Append(VarString).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ConnectCustomFieldValue)obj);
        }

        /// <summary>
        /// Returns true if ConnectCustomFieldValue instances are equal
        /// </summary>
        /// <param name="other">Instance of ConnectCustomFieldValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ConnectCustomFieldValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    FieldID == other.FieldID ||
                    
                    FieldID.Equals(other.FieldID)
                ) && 
                (
                    IssueID == other.IssueID ||
                    
                    IssueID.Equals(other.IssueID)
                ) && 
                (
                    Number == other.Number ||
                    
                    Number.Equals(other.Number)
                ) && 
                (
                    OptionID == other.OptionID ||
                    OptionID != null &&
                    OptionID.Equals(other.OptionID)
                ) && 
                (
                    RichText == other.RichText ||
                    RichText != null &&
                    RichText.Equals(other.RichText)
                ) && 
                (
                    VarString == other.VarString ||
                    VarString != null &&
                    VarString.Equals(other.VarString)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + FieldID.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueID.GetHashCode();
                    
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (OptionID != null)
                    hashCode = hashCode * 59 + OptionID.GetHashCode();
                    if (RichText != null)
                    hashCode = hashCode * 59 + RichText.GetHashCode();
                    if (VarString != null)
                    hashCode = hashCode * 59 + VarString.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ConnectCustomFieldValue left, ConnectCustomFieldValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ConnectCustomFieldValue left, ConnectCustomFieldValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
