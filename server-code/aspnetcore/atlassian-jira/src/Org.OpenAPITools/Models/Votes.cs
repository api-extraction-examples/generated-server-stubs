/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The details of votes on an issue.
    /// </summary>
    [DataContract]
    public partial class Votes : IEquatable<Votes>
    {
        /// <summary>
        /// Whether the user making this request has voted on the issue.
        /// </summary>
        /// <value>Whether the user making this request has voted on the issue.</value>
        [DataMember(Name="hasVoted", EmitDefaultValue=true)]
        public bool HasVoted { get; set; }

        /// <summary>
        /// The URL of these issue vote details.
        /// </summary>
        /// <value>The URL of these issue vote details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// List of the users who have voted on this issue. An empty list is returned when the calling user doesn&#39;t have the *View voters and watchers* project permission.
        /// </summary>
        /// <value>List of the users who have voted on this issue. An empty list is returned when the calling user doesn&#39;t have the *View voters and watchers* project permission.</value>
        [DataMember(Name="voters", EmitDefaultValue=false)]
        public List<User> Voters { get; set; }

        /// <summary>
        /// The number of votes on the issue.
        /// </summary>
        /// <value>The number of votes on the issue.</value>
        [DataMember(Name="votes", EmitDefaultValue=true)]
        public long VarVotes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Votes {\n");
            sb.Append("  HasVoted: ").Append(HasVoted).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Voters: ").Append(Voters).Append("\n");
            sb.Append("  VarVotes: ").Append(VarVotes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Votes)obj);
        }

        /// <summary>
        /// Returns true if Votes instances are equal
        /// </summary>
        /// <param name="other">Instance of Votes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Votes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    HasVoted == other.HasVoted ||
                    
                    HasVoted.Equals(other.HasVoted)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Voters == other.Voters ||
                    Voters != null &&
                    other.Voters != null &&
                    Voters.SequenceEqual(other.Voters)
                ) && 
                (
                    VarVotes == other.VarVotes ||
                    
                    VarVotes.Equals(other.VarVotes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + HasVoted.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    if (Voters != null)
                    hashCode = hashCode * 59 + Voters.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVotes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Votes left, Votes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Votes left, Votes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
