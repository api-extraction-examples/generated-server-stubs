/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a component with a count of the issues it contains.
    /// </summary>
    [DataContract]
    public partial class ComponentWithIssueCount : IEquatable<ComponentWithIssueCount>
    {
        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public User Assignee { get; set; }


        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See `realAssigneeType` for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  `PROJECT_LEAD` the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  `COMPONENT_LEAD` the assignee to any issues created with this component is nominally the lead for the component.  *  `UNASSIGNED` an assignee is not set for issues created with this component.  *  `PROJECT_DEFAULT` the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</value>
        [TypeConverter(typeof(CustomEnumConverter<AssigneeTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AssigneeTypeEnum
        {
            
            /// <summary>
            /// Enum PROJECTDEFAULTEnum for PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULTEnum = 1,
            
            /// <summary>
            /// Enum COMPONENTLEADEnum for COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEADEnum = 2,
            
            /// <summary>
            /// Enum PROJECTLEADEnum for PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEADEnum = 3,
            
            /// <summary>
            /// Enum UNASSIGNEDEnum for UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNEDEnum = 4
        }

        /// <summary>
        /// The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.
        /// </summary>
        /// <value>The nominal user type used to determine the assignee for issues created with this component. See &#x60;realAssigneeType&#x60; for details on how the type of the user, and hence the user, assigned to issues is determined. Takes the following values:   *  &#x60;PROJECT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the project the component is in.  *  &#x60;COMPONENT_LEAD&#x60; the assignee to any issues created with this component is nominally the lead for the component.  *  &#x60;UNASSIGNED&#x60; an assignee is not set for issues created with this component.  *  &#x60;PROJECT_DEFAULT&#x60; the assignee to any issues created with this component is nominally the default assignee for the project that the component is in.</value>
        [DataMember(Name="assigneeType", EmitDefaultValue=true)]
        public AssigneeTypeEnum AssigneeType { get; set; }

        /// <summary>
        /// The description for the component.
        /// </summary>
        /// <value>The description for the component.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The unique identifier for the component.
        /// </summary>
        /// <value>The unique identifier for the component.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.
        /// </summary>
        /// <value>Whether a user is associated with &#x60;assigneeType&#x60;. For example, if the &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but the component lead is not set, then &#x60;false&#x60; is returned.</value>
        [DataMember(Name="isAssigneeTypeValid", EmitDefaultValue=true)]
        public bool IsAssigneeTypeValid { get; set; }

        /// <summary>
        /// Count of issues for the component.
        /// </summary>
        /// <value>Count of issues for the component.</value>
        [DataMember(Name="issueCount", EmitDefaultValue=true)]
        public long IssueCount { get; set; }

        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name="lead", EmitDefaultValue=false)]
        public User Lead { get; set; }

        /// <summary>
        /// The name for the component.
        /// </summary>
        /// <value>The name for the component.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The key of the project to which the component is assigned.
        /// </summary>
        /// <value>The key of the project to which the component is assigned.</value>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public string Project { get; set; }

        /// <summary>
        /// Not used.
        /// </summary>
        /// <value>Not used.</value>
        [DataMember(Name="projectId", EmitDefaultValue=true)]
        public long ProjectId { get; set; }

        /// <summary>
        /// Gets or Sets RealAssignee
        /// </summary>
        [DataMember(Name="realAssignee", EmitDefaultValue=false)]
        public User RealAssignee { get; set; }


        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the `assigneeType`. For example, `assigneeType` is set to `COMPONENT_LEAD` but no component lead is set. This property is set to one of the following values:   *  `PROJECT_LEAD` when `assigneeType` is `PROJECT_LEAD` and the project lead has permission to be assigned issues in the project that the component is in.  *  `COMPONENT_LEAD` when `assignee`Type is `COMPONENT_LEAD` and the component lead has permission to be assigned issues in the project that the component is in.  *  `UNASSIGNED` when `assigneeType` is `UNASSIGNED` and Jira is configured to allow unassigned issues.  *  `PROJECT_DEFAULT` when none of the preceding cases are true.</value>
        [TypeConverter(typeof(CustomEnumConverter<RealAssigneeTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum RealAssigneeTypeEnum
        {
            
            /// <summary>
            /// Enum PROJECTDEFAULTEnum for PROJECT_DEFAULT
            /// </summary>
            [EnumMember(Value = "PROJECT_DEFAULT")]
            PROJECTDEFAULTEnum = 1,
            
            /// <summary>
            /// Enum COMPONENTLEADEnum for COMPONENT_LEAD
            /// </summary>
            [EnumMember(Value = "COMPONENT_LEAD")]
            COMPONENTLEADEnum = 2,
            
            /// <summary>
            /// Enum PROJECTLEADEnum for PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEADEnum = 3,
            
            /// <summary>
            /// Enum UNASSIGNEDEnum for UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNEDEnum = 4
        }

        /// <summary>
        /// The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.
        /// </summary>
        /// <value>The type of the assignee that is assigned to issues created with this component, when an assignee cannot be set from the &#x60;assigneeType&#x60;. For example, &#x60;assigneeType&#x60; is set to &#x60;COMPONENT_LEAD&#x60; but no component lead is set. This property is set to one of the following values:   *  &#x60;PROJECT_LEAD&#x60; when &#x60;assigneeType&#x60; is &#x60;PROJECT_LEAD&#x60; and the project lead has permission to be assigned issues in the project that the component is in.  *  &#x60;COMPONENT_LEAD&#x60; when &#x60;assignee&#x60;Type is &#x60;COMPONENT_LEAD&#x60; and the component lead has permission to be assigned issues in the project that the component is in.  *  &#x60;UNASSIGNED&#x60; when &#x60;assigneeType&#x60; is &#x60;UNASSIGNED&#x60; and Jira is configured to allow unassigned issues.  *  &#x60;PROJECT_DEFAULT&#x60; when none of the preceding cases are true.</value>
        [DataMember(Name="realAssigneeType", EmitDefaultValue=true)]
        public RealAssigneeTypeEnum RealAssigneeType { get; set; }

        /// <summary>
        /// The URL for this count of the issues contained in the component.
        /// </summary>
        /// <value>The URL for this count of the issues contained in the component.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ComponentWithIssueCount {\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAssigneeTypeValid: ").Append(IsAssigneeTypeValid).Append("\n");
            sb.Append("  IssueCount: ").Append(IssueCount).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  RealAssignee: ").Append(RealAssignee).Append("\n");
            sb.Append("  RealAssigneeType: ").Append(RealAssigneeType).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ComponentWithIssueCount)obj);
        }

        /// <summary>
        /// Returns true if ComponentWithIssueCount instances are equal
        /// </summary>
        /// <param name="other">Instance of ComponentWithIssueCount to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ComponentWithIssueCount other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Assignee == other.Assignee ||
                    Assignee != null &&
                    Assignee.Equals(other.Assignee)
                ) && 
                (
                    AssigneeType == other.AssigneeType ||
                    
                    AssigneeType.Equals(other.AssigneeType)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsAssigneeTypeValid == other.IsAssigneeTypeValid ||
                    
                    IsAssigneeTypeValid.Equals(other.IsAssigneeTypeValid)
                ) && 
                (
                    IssueCount == other.IssueCount ||
                    
                    IssueCount.Equals(other.IssueCount)
                ) && 
                (
                    Lead == other.Lead ||
                    Lead != null &&
                    Lead.Equals(other.Lead)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    RealAssignee == other.RealAssignee ||
                    RealAssignee != null &&
                    RealAssignee.Equals(other.RealAssignee)
                ) && 
                (
                    RealAssigneeType == other.RealAssigneeType ||
                    
                    RealAssigneeType.Equals(other.RealAssigneeType)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Assignee != null)
                    hashCode = hashCode * 59 + Assignee.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssigneeType.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAssigneeTypeValid.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueCount.GetHashCode();
                    if (Lead != null)
                    hashCode = hashCode * 59 + Lead.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (RealAssignee != null)
                    hashCode = hashCode * 59 + RealAssignee.GetHashCode();
                    
                    hashCode = hashCode * 59 + RealAssigneeType.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ComponentWithIssueCount left, ComponentWithIssueCount right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ComponentWithIssueCount left, ComponentWithIssueCount right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
