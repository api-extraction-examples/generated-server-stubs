/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Metadata for an item in an attachment archive.
    /// </summary>
    [DataContract]
    public partial class AttachmentArchiveItemReadable : IEquatable<AttachmentArchiveItemReadable>
    {
        /// <summary>
        /// The position of the item within the archive.
        /// </summary>
        /// <value>The position of the item within the archive.</value>
        [DataMember(Name="index", EmitDefaultValue=true)]
        public long Index { get; set; }

        /// <summary>
        /// The label for the archive item.
        /// </summary>
        /// <value>The label for the archive item.</value>
        [DataMember(Name="label", EmitDefaultValue=false)]
        public string Label { get; set; }

        /// <summary>
        /// The MIME type of the archive item.
        /// </summary>
        /// <value>The MIME type of the archive item.</value>
        [DataMember(Name="mediaType", EmitDefaultValue=false)]
        public string MediaType { get; set; }

        /// <summary>
        /// The path of the archive item.
        /// </summary>
        /// <value>The path of the archive item.</value>
        [DataMember(Name="path", EmitDefaultValue=false)]
        public string Path { get; set; }

        /// <summary>
        /// The size of the archive item.
        /// </summary>
        /// <value>The size of the archive item.</value>
        [DataMember(Name="size", EmitDefaultValue=false)]
        public string Size { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AttachmentArchiveItemReadable {\n");
            sb.Append("  Index: ").Append(Index).Append("\n");
            sb.Append("  Label: ").Append(Label).Append("\n");
            sb.Append("  MediaType: ").Append(MediaType).Append("\n");
            sb.Append("  Path: ").Append(Path).Append("\n");
            sb.Append("  Size: ").Append(Size).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AttachmentArchiveItemReadable)obj);
        }

        /// <summary>
        /// Returns true if AttachmentArchiveItemReadable instances are equal
        /// </summary>
        /// <param name="other">Instance of AttachmentArchiveItemReadable to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AttachmentArchiveItemReadable other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Index == other.Index ||
                    
                    Index.Equals(other.Index)
                ) && 
                (
                    Label == other.Label ||
                    Label != null &&
                    Label.Equals(other.Label)
                ) && 
                (
                    MediaType == other.MediaType ||
                    MediaType != null &&
                    MediaType.Equals(other.MediaType)
                ) && 
                (
                    Path == other.Path ||
                    Path != null &&
                    Path.Equals(other.Path)
                ) && 
                (
                    Size == other.Size ||
                    Size != null &&
                    Size.Equals(other.Size)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Index.GetHashCode();
                    if (Label != null)
                    hashCode = hashCode * 59 + Label.GetHashCode();
                    if (MediaType != null)
                    hashCode = hashCode * 59 + MediaType.GetHashCode();
                    if (Path != null)
                    hashCode = hashCode * 59 + Path.GetHashCode();
                    if (Size != null)
                    hashCode = hashCode * 59 + Size.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AttachmentArchiveItemReadable left, AttachmentArchiveItemReadable right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AttachmentArchiveItemReadable left, AttachmentArchiveItemReadable right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
