/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Container for a list of audit records.
    /// </summary>
    [DataContract]
    public partial class AuditRecords : IEquatable<AuditRecords>
    {
        /// <summary>
        /// The requested or default limit on the number of audit items to be returned.
        /// </summary>
        /// <value>The requested or default limit on the number of audit items to be returned.</value>
        [DataMember(Name="limit", EmitDefaultValue=true)]
        public int Limit { get; set; }

        /// <summary>
        /// The number of audit items skipped before the first item in this list.
        /// </summary>
        /// <value>The number of audit items skipped before the first item in this list.</value>
        [DataMember(Name="offset", EmitDefaultValue=true)]
        public int Offset { get; set; }

        /// <summary>
        /// The list of audit items.
        /// </summary>
        /// <value>The list of audit items.</value>
        [DataMember(Name="records", EmitDefaultValue=false)]
        public List<AuditRecordBean> Records { get; set; }

        /// <summary>
        /// The total number of audit items returned.
        /// </summary>
        /// <value>The total number of audit items returned.</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public long Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditRecords {\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Records: ").Append(Records).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuditRecords)obj);
        }

        /// <summary>
        /// Returns true if AuditRecords instances are equal
        /// </summary>
        /// <param name="other">Instance of AuditRecords to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditRecords other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Limit == other.Limit ||
                    
                    Limit.Equals(other.Limit)
                ) && 
                (
                    Offset == other.Offset ||
                    
                    Offset.Equals(other.Offset)
                ) && 
                (
                    Records == other.Records ||
                    Records != null &&
                    other.Records != null &&
                    Records.SequenceEqual(other.Records)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    
                    hashCode = hashCode * 59 + Offset.GetHashCode();
                    if (Records != null)
                    hashCode = hashCode * 59 + Records.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuditRecords left, AuditRecords right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuditRecords left, AuditRecords right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
