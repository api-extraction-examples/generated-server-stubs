/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a workflow scheme.
    /// </summary>
    [DataContract]
    public partial class WorkflowScheme : IEquatable<WorkflowScheme>
    {
        /// <summary>
        /// The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.
        /// </summary>
        /// <value>The name of the default workflow for the workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira. If &#x60;defaultWorkflow&#x60; is not specified when creating a workflow scheme, it is set to *Jira Workflow (jira)*.</value>
        [DataMember(Name="defaultWorkflow", EmitDefaultValue=false)]
        public string DefaultWorkflow { get; set; }

        /// <summary>
        /// The description of the workflow scheme.
        /// </summary>
        /// <value>The description of the workflow scheme.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow scheme is a draft or not.
        /// </summary>
        /// <value>Whether the workflow scheme is a draft or not.</value>
        [DataMember(Name="draft", EmitDefaultValue=true)]
        public bool Draft { get; set; }

        /// <summary>
        /// The ID of the workflow scheme.
        /// </summary>
        /// <value>The ID of the workflow scheme.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        /// <value>The issue type to workflow mappings, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.</value>
        [DataMember(Name="issueTypeMappings", EmitDefaultValue=false)]
        public Dictionary<string, string> IssueTypeMappings { get; set; }

        /// <summary>
        /// The issue types available in Jira.
        /// </summary>
        /// <value>The issue types available in Jira.</value>
        [DataMember(Name="issueTypes", EmitDefaultValue=false)]
        public Dictionary<string, IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.
        /// </summary>
        /// <value>The date-time that the draft workflow scheme was last modified. A modification is a change to the issue type-project mappings only. This property does not apply to non-draft workflows.</value>
        [DataMember(Name="lastModified", EmitDefaultValue=false)]
        public string LastModified { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedUser
        /// </summary>
        [DataMember(Name="lastModifiedUser", EmitDefaultValue=false)]
        public WorkflowSchemeLastModifiedUser LastModifiedUser { get; set; }

        /// <summary>
        /// The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.
        /// </summary>
        /// <value>The name of the workflow scheme. The name must be unique. The maximum length is 255 characters. Required when creating a workflow scheme.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.
        /// </summary>
        /// <value>For draft workflow schemes, this property is the name of the default workflow for the original workflow scheme. The default workflow has *All Unassigned Issue Types* assigned to it in Jira.</value>
        [DataMember(Name="originalDefaultWorkflow", EmitDefaultValue=false)]
        public string OriginalDefaultWorkflow { get; set; }

        /// <summary>
        /// For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.
        /// </summary>
        /// <value>For draft workflow schemes, this property is the issue type to workflow mappings for the original workflow scheme, where each mapping is an issue type ID and workflow name pair. Note that an issue type can only be mapped to one workflow in a workflow scheme.</value>
        [DataMember(Name="originalIssueTypeMappings", EmitDefaultValue=false)]
        public Dictionary<string, string> OriginalIssueTypeMappings { get; set; }

        /// <summary>
        /// Gets or Sets Self
        /// </summary>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether to create or update a draft workflow scheme when updating an active workflow scheme. An active workflow scheme is a workflow scheme that is used by at least one project. The following examples show how this property works:   *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: If a draft workflow scheme exists, it is updated. Otherwise, a draft workflow scheme is created.  *  Update an active workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;false&#x60;: An error is returned, as active workflow schemes cannot be updated.  *  Update an inactive workflow scheme with &#x60;updateDraftIfNeeded&#x60; set to &#x60;true&#x60;: The workflow scheme is updated, as inactive workflow schemes do not require drafts to update.  Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name="updateDraftIfNeeded", EmitDefaultValue=true)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkflowScheme {\n");
            sb.Append("  DefaultWorkflow: ").Append(DefaultWorkflow).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Draft: ").Append(Draft).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssueTypeMappings: ").Append(IssueTypeMappings).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastModifiedUser: ").Append(LastModifiedUser).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OriginalDefaultWorkflow: ").Append(OriginalDefaultWorkflow).Append("\n");
            sb.Append("  OriginalIssueTypeMappings: ").Append(OriginalIssueTypeMappings).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  UpdateDraftIfNeeded: ").Append(UpdateDraftIfNeeded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkflowScheme)obj);
        }

        /// <summary>
        /// Returns true if WorkflowScheme instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkflowScheme to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkflowScheme other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultWorkflow == other.DefaultWorkflow ||
                    DefaultWorkflow != null &&
                    DefaultWorkflow.Equals(other.DefaultWorkflow)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Draft == other.Draft ||
                    
                    Draft.Equals(other.Draft)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    IssueTypeMappings == other.IssueTypeMappings ||
                    IssueTypeMappings != null &&
                    other.IssueTypeMappings != null &&
                    IssueTypeMappings.SequenceEqual(other.IssueTypeMappings)
                ) && 
                (
                    IssueTypes == other.IssueTypes ||
                    IssueTypes != null &&
                    other.IssueTypes != null &&
                    IssueTypes.SequenceEqual(other.IssueTypes)
                ) && 
                (
                    LastModified == other.LastModified ||
                    LastModified != null &&
                    LastModified.Equals(other.LastModified)
                ) && 
                (
                    LastModifiedUser == other.LastModifiedUser ||
                    LastModifiedUser != null &&
                    LastModifiedUser.Equals(other.LastModifiedUser)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OriginalDefaultWorkflow == other.OriginalDefaultWorkflow ||
                    OriginalDefaultWorkflow != null &&
                    OriginalDefaultWorkflow.Equals(other.OriginalDefaultWorkflow)
                ) && 
                (
                    OriginalIssueTypeMappings == other.OriginalIssueTypeMappings ||
                    OriginalIssueTypeMappings != null &&
                    other.OriginalIssueTypeMappings != null &&
                    OriginalIssueTypeMappings.SequenceEqual(other.OriginalIssueTypeMappings)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    UpdateDraftIfNeeded == other.UpdateDraftIfNeeded ||
                    
                    UpdateDraftIfNeeded.Equals(other.UpdateDraftIfNeeded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DefaultWorkflow != null)
                    hashCode = hashCode * 59 + DefaultWorkflow.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Draft.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IssueTypeMappings != null)
                    hashCode = hashCode * 59 + IssueTypeMappings.GetHashCode();
                    if (IssueTypes != null)
                    hashCode = hashCode * 59 + IssueTypes.GetHashCode();
                    if (LastModified != null)
                    hashCode = hashCode * 59 + LastModified.GetHashCode();
                    if (LastModifiedUser != null)
                    hashCode = hashCode * 59 + LastModifiedUser.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OriginalDefaultWorkflow != null)
                    hashCode = hashCode * 59 + OriginalDefaultWorkflow.GetHashCode();
                    if (OriginalIssueTypeMappings != null)
                    hashCode = hashCode * 59 + OriginalIssueTypeMappings.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateDraftIfNeeded.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkflowScheme left, WorkflowScheme right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkflowScheme left, WorkflowScheme right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
