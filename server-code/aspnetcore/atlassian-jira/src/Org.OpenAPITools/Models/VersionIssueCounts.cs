/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Various counts of issues within a version.
    /// </summary>
    [DataContract]
    public partial class VersionIssueCounts : IEquatable<VersionIssueCounts>
    {
        /// <summary>
        /// List of custom fields using the version.
        /// </summary>
        /// <value>List of custom fields using the version.</value>
        [DataMember(Name="customFieldUsage", EmitDefaultValue=false)]
        public List<VersionUsageInCustomField> CustomFieldUsage { get; set; }

        /// <summary>
        /// Count of issues where a version custom field is set to the version.
        /// </summary>
        /// <value>Count of issues where a version custom field is set to the version.</value>
        [DataMember(Name="issueCountWithCustomFieldsShowingVersion", EmitDefaultValue=true)]
        public long IssueCountWithCustomFieldsShowingVersion { get; set; }

        /// <summary>
        /// Count of issues where the &#x60;affectedVersion&#x60; is set to the version.
        /// </summary>
        /// <value>Count of issues where the &#x60;affectedVersion&#x60; is set to the version.</value>
        [DataMember(Name="issuesAffectedCount", EmitDefaultValue=true)]
        public long IssuesAffectedCount { get; set; }

        /// <summary>
        /// Count of issues where the &#x60;fixVersion&#x60; is set to the version.
        /// </summary>
        /// <value>Count of issues where the &#x60;fixVersion&#x60; is set to the version.</value>
        [DataMember(Name="issuesFixedCount", EmitDefaultValue=true)]
        public long IssuesFixedCount { get; set; }

        /// <summary>
        /// The URL of these count details.
        /// </summary>
        /// <value>The URL of these count details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VersionIssueCounts {\n");
            sb.Append("  CustomFieldUsage: ").Append(CustomFieldUsage).Append("\n");
            sb.Append("  IssueCountWithCustomFieldsShowingVersion: ").Append(IssueCountWithCustomFieldsShowingVersion).Append("\n");
            sb.Append("  IssuesAffectedCount: ").Append(IssuesAffectedCount).Append("\n");
            sb.Append("  IssuesFixedCount: ").Append(IssuesFixedCount).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VersionIssueCounts)obj);
        }

        /// <summary>
        /// Returns true if VersionIssueCounts instances are equal
        /// </summary>
        /// <param name="other">Instance of VersionIssueCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VersionIssueCounts other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CustomFieldUsage == other.CustomFieldUsage ||
                    CustomFieldUsage != null &&
                    other.CustomFieldUsage != null &&
                    CustomFieldUsage.SequenceEqual(other.CustomFieldUsage)
                ) && 
                (
                    IssueCountWithCustomFieldsShowingVersion == other.IssueCountWithCustomFieldsShowingVersion ||
                    
                    IssueCountWithCustomFieldsShowingVersion.Equals(other.IssueCountWithCustomFieldsShowingVersion)
                ) && 
                (
                    IssuesAffectedCount == other.IssuesAffectedCount ||
                    
                    IssuesAffectedCount.Equals(other.IssuesAffectedCount)
                ) && 
                (
                    IssuesFixedCount == other.IssuesFixedCount ||
                    
                    IssuesFixedCount.Equals(other.IssuesFixedCount)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CustomFieldUsage != null)
                    hashCode = hashCode * 59 + CustomFieldUsage.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueCountWithCustomFieldsShowingVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssuesAffectedCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssuesFixedCount.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VersionIssueCounts left, VersionIssueCounts right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VersionIssueCounts left, VersionIssueCounts right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
