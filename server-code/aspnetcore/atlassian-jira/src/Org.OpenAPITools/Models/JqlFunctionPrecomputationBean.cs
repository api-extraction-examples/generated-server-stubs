/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Jql function precomputation.
    /// </summary>
    [DataContract]
    public partial class JqlFunctionPrecomputationBean : IEquatable<JqlFunctionPrecomputationBean>
    {
        /// <summary>
        /// Gets or Sets Arguments
        /// </summary>
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public List<string> Arguments { get; set; }

        /// <summary>
        /// Gets or Sets Created
        /// </summary>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public string Field { get; set; }

        /// <summary>
        /// Gets or Sets FunctionKey
        /// </summary>
        [DataMember(Name="functionKey", EmitDefaultValue=false)]
        public string FunctionKey { get; set; }

        /// <summary>
        /// Gets or Sets FunctionName
        /// </summary>
        [DataMember(Name="functionName", EmitDefaultValue=false)]
        public string FunctionName { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarOperator
        /// </summary>
        [DataMember(Name="operator", EmitDefaultValue=false)]
        public string VarOperator { get; set; }

        /// <summary>
        /// Gets or Sets Updated
        /// </summary>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Gets or Sets Used
        /// </summary>
        [DataMember(Name="used", EmitDefaultValue=false)]
        public DateTime Used { get; set; }

        /// <summary>
        /// Gets or Sets Value
        /// </summary>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JqlFunctionPrecomputationBean {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  FunctionKey: ").Append(FunctionKey).Append("\n");
            sb.Append("  FunctionName: ").Append(FunctionName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("  Used: ").Append(Used).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JqlFunctionPrecomputationBean)obj);
        }

        /// <summary>
        /// Returns true if JqlFunctionPrecomputationBean instances are equal
        /// </summary>
        /// <param name="other">Instance of JqlFunctionPrecomputationBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JqlFunctionPrecomputationBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Arguments == other.Arguments ||
                    Arguments != null &&
                    other.Arguments != null &&
                    Arguments.SequenceEqual(other.Arguments)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Field == other.Field ||
                    Field != null &&
                    Field.Equals(other.Field)
                ) && 
                (
                    FunctionKey == other.FunctionKey ||
                    FunctionKey != null &&
                    FunctionKey.Equals(other.FunctionKey)
                ) && 
                (
                    FunctionName == other.FunctionName ||
                    FunctionName != null &&
                    FunctionName.Equals(other.FunctionName)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    VarOperator == other.VarOperator ||
                    VarOperator != null &&
                    VarOperator.Equals(other.VarOperator)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                ) && 
                (
                    Used == other.Used ||
                    Used != null &&
                    Used.Equals(other.Used)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Arguments != null)
                    hashCode = hashCode * 59 + Arguments.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Field != null)
                    hashCode = hashCode * 59 + Field.GetHashCode();
                    if (FunctionKey != null)
                    hashCode = hashCode * 59 + FunctionKey.GetHashCode();
                    if (FunctionName != null)
                    hashCode = hashCode * 59 + FunctionName.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (VarOperator != null)
                    hashCode = hashCode * 59 + VarOperator.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                    if (Used != null)
                    hashCode = hashCode * 59 + Used.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JqlFunctionPrecomputationBean left, JqlFunctionPrecomputationBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JqlFunctionPrecomputationBean left, JqlFunctionPrecomputationBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
