/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of a custom field.
    /// </summary>
    [DataContract]
    public partial class UpdateCustomFieldDetails : IEquatable<UpdateCustomFieldDetails>
    {
        /// <summary>
        /// The description of the custom field. The maximum length is 40000 characters.
        /// </summary>
        /// <value>The description of the custom field. The maximum length is 40000 characters.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The name of the custom field. It doesn&#39;t have to be unique. The maximum length is 255 characters.
        /// </summary>
        /// <value>The name of the custom field. It doesn&#39;t have to be unique. The maximum length is 255 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):   *  `cascadingselect`: `cascadingselectsearcher`  *  `datepicker`: `daterange`  *  `datetime`: `datetimerange`  *  `float`: `exactnumber` or `numberrange`  *  `grouppicker`: `grouppickersearcher`  *  `importid`: `exactnumber` or `numberrange`  *  `labels`: `labelsearcher`  *  `multicheckboxes`: `multiselectsearcher`  *  `multigrouppicker`: `multiselectsearcher`  *  `multiselect`: `multiselectsearcher`  *  `multiuserpicker`: `userpickergroupsearcher`  *  `multiversion`: `versionsearcher`  *  `project`: `projectsearcher`  *  `radiobuttons`: `multiselectsearcher`  *  `readonlyfield`: `textsearcher`  *  `select`: `multiselectsearcher`  *  `textarea`: `textsearcher`  *  `textfield`: `textsearcher`  *  `url`: `exacttextsearcher`  *  `userpicker`: `userpickergroupsearcher`  *  `version`: `versionsearcher`
        /// </summary>
        /// <value>The searcher that defines the way the field is searched in Jira. It can be set to `null`, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):   *  `cascadingselect`: `cascadingselectsearcher`  *  `datepicker`: `daterange`  *  `datetime`: `datetimerange`  *  `float`: `exactnumber` or `numberrange`  *  `grouppicker`: `grouppickersearcher`  *  `importid`: `exactnumber` or `numberrange`  *  `labels`: `labelsearcher`  *  `multicheckboxes`: `multiselectsearcher`  *  `multigrouppicker`: `multiselectsearcher`  *  `multiselect`: `multiselectsearcher`  *  `multiuserpicker`: `userpickergroupsearcher`  *  `multiversion`: `versionsearcher`  *  `project`: `projectsearcher`  *  `radiobuttons`: `multiselectsearcher`  *  `readonlyfield`: `textsearcher`  *  `select`: `multiselectsearcher`  *  `textarea`: `textsearcher`  *  `textfield`: `textsearcher`  *  `url`: `exacttextsearcher`  *  `userpicker`: `userpickergroupsearcher`  *  `version`: `versionsearcher`</value>
        [TypeConverter(typeof(CustomEnumConverter<SearcherKeyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SearcherKeyEnum
        {
            
            /// <summary>
            /// Enum CascadingselectsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:cascadingselectsearcher")]
            CascadingselectsearcherEnum = 1,
            
            /// <summary>
            /// Enum DaterangeEnum for com.atlassian.jira.plugin.system.customfieldtypes:daterange
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:daterange")]
            DaterangeEnum = 2,
            
            /// <summary>
            /// Enum DatetimerangeEnum for com.atlassian.jira.plugin.system.customfieldtypes:datetimerange
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:datetimerange")]
            DatetimerangeEnum = 3,
            
            /// <summary>
            /// Enum ExactnumberEnum for com.atlassian.jira.plugin.system.customfieldtypes:exactnumber
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:exactnumber")]
            ExactnumberEnum = 4,
            
            /// <summary>
            /// Enum ExacttextsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:exacttextsearcher")]
            ExacttextsearcherEnum = 5,
            
            /// <summary>
            /// Enum GrouppickersearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:grouppickersearcher")]
            GrouppickersearcherEnum = 6,
            
            /// <summary>
            /// Enum LabelsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:labelsearcher")]
            LabelsearcherEnum = 7,
            
            /// <summary>
            /// Enum MultiselectsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:multiselectsearcher")]
            MultiselectsearcherEnum = 8,
            
            /// <summary>
            /// Enum NumberrangeEnum for com.atlassian.jira.plugin.system.customfieldtypes:numberrange
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:numberrange")]
            NumberrangeEnum = 9,
            
            /// <summary>
            /// Enum ProjectsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:projectsearcher")]
            ProjectsearcherEnum = 10,
            
            /// <summary>
            /// Enum TextsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:textsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:textsearcher")]
            TextsearcherEnum = 11,
            
            /// <summary>
            /// Enum UserpickergroupsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:userpickergroupsearcher")]
            UserpickergroupsearcherEnum = 12,
            
            /// <summary>
            /// Enum VersionsearcherEnum for com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher
            /// </summary>
            [EnumMember(Value = "com.atlassian.jira.plugin.system.customfieldtypes:versionsearcher")]
            VersionsearcherEnum = 13
        }

        /// <summary>
        /// The searcher that defines the way the field is searched in Jira. It can be set to &#x60;null&#x60;, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):   *  &#x60;cascadingselect&#x60;: &#x60;cascadingselectsearcher&#x60;  *  &#x60;datepicker&#x60;: &#x60;daterange&#x60;  *  &#x60;datetime&#x60;: &#x60;datetimerange&#x60;  *  &#x60;float&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;grouppicker&#x60;: &#x60;grouppickersearcher&#x60;  *  &#x60;importid&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;labels&#x60;: &#x60;labelsearcher&#x60;  *  &#x60;multicheckboxes&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multigrouppicker&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiselect&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiuserpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;multiversion&#x60;: &#x60;versionsearcher&#x60;  *  &#x60;project&#x60;: &#x60;projectsearcher&#x60;  *  &#x60;radiobuttons&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;readonlyfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;select&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;textarea&#x60;: &#x60;textsearcher&#x60;  *  &#x60;textfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;url&#x60;: &#x60;exacttextsearcher&#x60;  *  &#x60;userpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;version&#x60;: &#x60;versionsearcher&#x60;
        /// </summary>
        /// <value>The searcher that defines the way the field is searched in Jira. It can be set to &#x60;null&#x60;, otherwise you must specify the valid searcher for the field type, as listed below (abbreviated values shown):   *  &#x60;cascadingselect&#x60;: &#x60;cascadingselectsearcher&#x60;  *  &#x60;datepicker&#x60;: &#x60;daterange&#x60;  *  &#x60;datetime&#x60;: &#x60;datetimerange&#x60;  *  &#x60;float&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;grouppicker&#x60;: &#x60;grouppickersearcher&#x60;  *  &#x60;importid&#x60;: &#x60;exactnumber&#x60; or &#x60;numberrange&#x60;  *  &#x60;labels&#x60;: &#x60;labelsearcher&#x60;  *  &#x60;multicheckboxes&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multigrouppicker&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiselect&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;multiuserpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;multiversion&#x60;: &#x60;versionsearcher&#x60;  *  &#x60;project&#x60;: &#x60;projectsearcher&#x60;  *  &#x60;radiobuttons&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;readonlyfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;select&#x60;: &#x60;multiselectsearcher&#x60;  *  &#x60;textarea&#x60;: &#x60;textsearcher&#x60;  *  &#x60;textfield&#x60;: &#x60;textsearcher&#x60;  *  &#x60;url&#x60;: &#x60;exacttextsearcher&#x60;  *  &#x60;userpicker&#x60;: &#x60;userpickergroupsearcher&#x60;  *  &#x60;version&#x60;: &#x60;versionsearcher&#x60;</value>
        [DataMember(Name="searcherKey", EmitDefaultValue=true)]
        public SearcherKeyEnum SearcherKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UpdateCustomFieldDetails {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SearcherKey: ").Append(SearcherKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UpdateCustomFieldDetails)obj);
        }

        /// <summary>
        /// Returns true if UpdateCustomFieldDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of UpdateCustomFieldDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UpdateCustomFieldDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SearcherKey == other.SearcherKey ||
                    
                    SearcherKey.Equals(other.SearcherKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + SearcherKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UpdateCustomFieldDetails left, UpdateCustomFieldDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UpdateCustomFieldDetails left, UpdateCustomFieldDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
