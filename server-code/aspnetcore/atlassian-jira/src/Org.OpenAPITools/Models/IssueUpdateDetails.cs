/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of an issue update request.
    /// </summary>
    [DataContract]
    public partial class IssueUpdateDetails : IEquatable<IssueUpdateDetails>
    {
        /// <summary>
        /// List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use &#x60;update&#x60;. Fields included in here cannot be included in &#x60;update&#x60;.
        /// </summary>
        /// <value>List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use &#x60;update&#x60;. Fields included in here cannot be included in &#x60;update&#x60;.</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> Fields { get; set; }

        /// <summary>
        /// Gets or Sets HistoryMetadata
        /// </summary>
        [DataMember(Name="historyMetadata", EmitDefaultValue=false)]
        public HistoryMetadata HistoryMetadata { get; set; }

        /// <summary>
        /// Details of issue properties to be add or update.
        /// </summary>
        /// <value>Details of issue properties to be add or update.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public List<EntityProperty> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Transition
        /// </summary>
        [DataMember(Name="transition", EmitDefaultValue=false)]
        public IssueTransition Transition { get; set; }

        /// <summary>
        /// A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in &#x60;fields&#x60;.
        /// </summary>
        /// <value>A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in &#x60;fields&#x60;.</value>
        [DataMember(Name="update", EmitDefaultValue=false)]
        public Dictionary<string, List<FieldUpdateOperation>> Update { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueUpdateDetails {\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  HistoryMetadata: ").Append(HistoryMetadata).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Transition: ").Append(Transition).Append("\n");
            sb.Append("  Update: ").Append(Update).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueUpdateDetails)obj);
        }

        /// <summary>
        /// Returns true if IssueUpdateDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueUpdateDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueUpdateDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    HistoryMetadata == other.HistoryMetadata ||
                    HistoryMetadata != null &&
                    HistoryMetadata.Equals(other.HistoryMetadata)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    other.Properties != null &&
                    Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    Transition == other.Transition ||
                    Transition != null &&
                    Transition.Equals(other.Transition)
                ) && 
                (
                    Update == other.Update ||
                    Update != null &&
                    other.Update != null &&
                    Update.SequenceEqual(other.Update)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (HistoryMetadata != null)
                    hashCode = hashCode * 59 + HistoryMetadata.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                    if (Transition != null)
                    hashCode = hashCode * 59 + Transition.GetHashCode();
                    if (Update != null)
                    hashCode = hashCode * 59 + Update.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueUpdateDetails left, IssueUpdateDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueUpdateDetails left, IssueUpdateDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
