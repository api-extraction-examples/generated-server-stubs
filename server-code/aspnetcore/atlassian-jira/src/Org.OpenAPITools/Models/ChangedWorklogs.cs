/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// List of changed worklogs.
    /// </summary>
    [DataContract]
    public partial class ChangedWorklogs : IEquatable<ChangedWorklogs>
    {
        /// <summary>
        /// Gets or Sets LastPage
        /// </summary>
        [DataMember(Name="lastPage", EmitDefaultValue=true)]
        public bool LastPage { get; set; }

        /// <summary>
        /// The URL of the next list of changed worklogs.
        /// </summary>
        /// <value>The URL of the next list of changed worklogs.</value>
        [DataMember(Name="nextPage", EmitDefaultValue=false)]
        public string NextPage { get; set; }

        /// <summary>
        /// The URL of this changed worklogs list.
        /// </summary>
        /// <value>The URL of this changed worklogs list.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// The datetime of the first worklog item in the list.
        /// </summary>
        /// <value>The datetime of the first worklog item in the list.</value>
        [DataMember(Name="since", EmitDefaultValue=true)]
        public long Since { get; set; }

        /// <summary>
        /// The datetime of the last worklog item in the list.
        /// </summary>
        /// <value>The datetime of the last worklog item in the list.</value>
        [DataMember(Name="until", EmitDefaultValue=true)]
        public long Until { get; set; }

        /// <summary>
        /// Changed worklog list.
        /// </summary>
        /// <value>Changed worklog list.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<ChangedWorklog> Values { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangedWorklogs {\n");
            sb.Append("  LastPage: ").Append(LastPage).Append("\n");
            sb.Append("  NextPage: ").Append(NextPage).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Since: ").Append(Since).Append("\n");
            sb.Append("  Until: ").Append(Until).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChangedWorklogs)obj);
        }

        /// <summary>
        /// Returns true if ChangedWorklogs instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangedWorklogs to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangedWorklogs other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    LastPage == other.LastPage ||
                    
                    LastPage.Equals(other.LastPage)
                ) && 
                (
                    NextPage == other.NextPage ||
                    NextPage != null &&
                    NextPage.Equals(other.NextPage)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Since == other.Since ||
                    
                    Since.Equals(other.Since)
                ) && 
                (
                    Until == other.Until ||
                    
                    Until.Equals(other.Until)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + LastPage.GetHashCode();
                    if (NextPage != null)
                    hashCode = hashCode * 59 + NextPage.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    
                    hashCode = hashCode * 59 + Since.GetHashCode();
                    
                    hashCode = hashCode * 59 + Until.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChangedWorklogs left, ChangedWorklogs right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChangedWorklogs left, ChangedWorklogs right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
