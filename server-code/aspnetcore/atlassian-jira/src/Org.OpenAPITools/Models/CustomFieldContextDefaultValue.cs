/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using JsonSubTypes;
using Swashbuckle.AspNetCore.Annotations;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    [JsonConverter(typeof(JsonSubtypes), "Type")]
    [SwaggerDiscriminator("Type")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueDate), "datepicker")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueDate), DiscriminatorValue =  "datepicker")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueDateTime), "datetimepicker")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueDateTime), DiscriminatorValue =  "datetimepicker")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueFloat), "float")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueFloat), DiscriminatorValue =  "float")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeDateTimeField), "forge.datetime")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeDateTimeField), DiscriminatorValue =  "forge.datetime")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeGroupField), "forge.group")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeGroupField), DiscriminatorValue =  "forge.group")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeMultiGroupField), "forge.group.list")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeMultiGroupField), DiscriminatorValue =  "forge.group.list")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeNumberField), "forge.number")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeNumberField), DiscriminatorValue =  "forge.number")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeObjectField), "forge.object")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeObjectField), DiscriminatorValue =  "forge.object")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeStringField), "forge.string")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeStringField), DiscriminatorValue =  "forge.string")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeMultiStringField), "forge.string.list")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeMultiStringField), DiscriminatorValue =  "forge.string.list")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeUserField), "forge.user")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeUserField), DiscriminatorValue =  "forge.user")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueForgeMultiUserField), "forge.user.list")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueForgeMultiUserField), DiscriminatorValue =  "forge.user.list")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueMultipleGroupPicker), "grouppicker.multiple")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueMultipleGroupPicker), DiscriminatorValue =  "grouppicker.multiple")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueSingleGroupPicker), "grouppicker.single")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueSingleGroupPicker), DiscriminatorValue =  "grouppicker.single")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueLabels), "labels")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueLabels), DiscriminatorValue =  "labels")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueMultiUserPicker), "multi.user.select")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueMultiUserPicker), DiscriminatorValue =  "multi.user.select")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueCascadingOption), "option.cascading")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueCascadingOption), DiscriminatorValue =  "option.cascading")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueMultipleOption), "option.multiple")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueMultipleOption), DiscriminatorValue =  "option.multiple")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueSingleOption), "option.single")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueSingleOption), DiscriminatorValue =  "option.single")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueProject), "project")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueProject), DiscriminatorValue =  "project")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueReadOnly), "readonly")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueReadOnly), DiscriminatorValue =  "readonly")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextSingleUserPickerDefaults), "single.user.select")]
    [SwaggerSubType(typeof(CustomFieldContextSingleUserPickerDefaults), DiscriminatorValue =  "single.user.select")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueTextArea), "textarea")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueTextArea), DiscriminatorValue =  "textarea")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueTextField), "textfield")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueTextField), DiscriminatorValue =  "textfield")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueURL), "url")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueURL), DiscriminatorValue =  "url")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueMultipleVersionPicker), "version.multiple")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueMultipleVersionPicker), DiscriminatorValue =  "version.multiple")]
    [JsonSubtypes.KnownSubType(typeof(CustomFieldContextDefaultValueSingleVersionPicker), "version.single")]
    [SwaggerSubType(typeof(CustomFieldContextDefaultValueSingleVersionPicker), DiscriminatorValue =  "version.single")]
    public partial class CustomFieldContextDefaultValue : IEquatable<CustomFieldContextDefaultValue>
    {
        /// <summary>
        /// The ID of the default cascading option.
        /// </summary>
        /// <value>The ID of the default cascading option.</value>
        [DataMember(Name="cascadingOptionId", EmitDefaultValue=false)]
        public string CascadingOptionId { get; set; }

        /// <summary>
        /// The ID of the context.
        /// </summary>
        /// <value>The ID of the context.</value>
        [Required]
        [DataMember(Name="contextId", EmitDefaultValue=false)]
        public string ContextId { get; set; }

        /// <summary>
        /// The ID of the default option.
        /// </summary>
        /// <value>The ID of the default option.</value>
        [Required]
        [DataMember(Name="optionId", EmitDefaultValue=false)]
        public string OptionId { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// The list of IDs of the default options.
        /// </summary>
        /// <value>The list of IDs of the default options.</value>
        [Required]
        [DataMember(Name="optionIds", EmitDefaultValue=false)]
        public List<string> OptionIds { get; set; }

        /// <summary>
        /// The ID of the default user.
        /// </summary>
        /// <value>The ID of the default user.</value>
        [Required]
        [DataMember(Name="accountId", EmitDefaultValue=false)]
        public string AccountId { get; set; }

        /// <summary>
        /// Gets or Sets UserFilter
        /// </summary>
        [Required]
        [DataMember(Name="userFilter", EmitDefaultValue=false)]
        public UserFilter UserFilter { get; set; }

        /// <summary>
        /// The IDs of the default users.
        /// </summary>
        /// <value>The IDs of the default users.</value>
        [Required]
        [DataMember(Name="accountIds", EmitDefaultValue=false)]
        public List<string> AccountIds { get; set; }

        /// <summary>
        /// The ID of the the default group.
        /// </summary>
        /// <value>The ID of the the default group.</value>
        [Required]
        [DataMember(Name="groupId", EmitDefaultValue=false)]
        public string GroupId { get; set; }

        /// <summary>
        /// The IDs of the default groups.
        /// </summary>
        /// <value>The IDs of the default groups.</value>
        [Required]
        [DataMember(Name="groupIds", EmitDefaultValue=false)]
        public List<string> GroupIds { get; set; }

        /// <summary>
        /// The default date in ISO format. Ignored if &#x60;useCurrent&#x60; is true.
        /// </summary>
        /// <value>The default date in ISO format. Ignored if &#x60;useCurrent&#x60; is true.</value>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Whether to use the current date.
        /// </summary>
        /// <value>Whether to use the current date.</value>
        [DataMember(Name="useCurrent", EmitDefaultValue=true)]
        public bool UseCurrent { get; set; } = false;

        /// <summary>
        /// The default date-time in ISO format. Ignored if &#x60;useCurrent&#x60; is true.
        /// </summary>
        /// <value>The default date-time in ISO format. Ignored if &#x60;useCurrent&#x60; is true.</value>
        [DataMember(Name="dateTime", EmitDefaultValue=false)]
        public string DateTime { get; set; }

        /// <summary>
        /// The default URL.
        /// </summary>
        /// <value>The default URL.</value>
        [Required]
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// The ID of the default project.
        /// </summary>
        /// <value>The ID of the default project.</value>
        [Required]
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The default floating-point number.
        /// </summary>
        /// <value>The default floating-point number.</value>
        [Required]
        [DataMember(Name="number", EmitDefaultValue=true)]
        public double Number { get; set; }

        /// <summary>
        /// The default labels value.
        /// </summary>
        /// <value>The default labels value.</value>
        [Required]
        [DataMember(Name="labels", EmitDefaultValue=false)]
        public List<string> Labels { get; set; }

        /// <summary>
        /// The default text. The maximum length is 254 characters.
        /// </summary>
        /// <value>The default text. The maximum length is 254 characters.</value>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// The ID of the default version.
        /// </summary>
        /// <value>The ID of the default version.</value>
        [Required]
        [DataMember(Name="versionId", EmitDefaultValue=false)]
        public string VersionId { get; set; }

        /// <summary>
        /// The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are &#x60;\&quot;releasedFirst\&quot;&#x60; and &#x60;\&quot;unreleasedFirst\&quot;&#x60;.
        /// </summary>
        /// <value>The order the pickable versions are displayed in. If not provided, the released-first order is used. Available version orders are &#x60;\&quot;releasedFirst\&quot;&#x60; and &#x60;\&quot;unreleasedFirst\&quot;&#x60;.</value>
        [DataMember(Name="versionOrder", EmitDefaultValue=false)]
        public string VersionOrder { get; set; }

        /// <summary>
        /// The IDs of the default versions.
        /// </summary>
        /// <value>The IDs of the default versions.</value>
        [Required]
        [DataMember(Name="versionIds", EmitDefaultValue=false)]
        public List<string> VersionIds { get; set; }

        /// <summary>
        /// List of string values. The maximum length for a value is 254 characters.
        /// </summary>
        /// <value>List of string values. The maximum length for a value is 254 characters.</value>
        [DataMember(Name="values", EmitDefaultValue=false)]
        public List<string> Values { get; set; }

        /// <summary>
        /// The default JSON object.
        /// </summary>
        /// <value>The default JSON object.</value>
        [DataMember(Name="object", EmitDefaultValue=false)]
        public Object VarObject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldContextDefaultValue {\n");
            sb.Append("  CascadingOptionId: ").Append(CascadingOptionId).Append("\n");
            sb.Append("  ContextId: ").Append(ContextId).Append("\n");
            sb.Append("  OptionId: ").Append(OptionId).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  OptionIds: ").Append(OptionIds).Append("\n");
            sb.Append("  AccountId: ").Append(AccountId).Append("\n");
            sb.Append("  UserFilter: ").Append(UserFilter).Append("\n");
            sb.Append("  AccountIds: ").Append(AccountIds).Append("\n");
            sb.Append("  GroupId: ").Append(GroupId).Append("\n");
            sb.Append("  GroupIds: ").Append(GroupIds).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  UseCurrent: ").Append(UseCurrent).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  Number: ").Append(Number).Append("\n");
            sb.Append("  Labels: ").Append(Labels).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  VersionId: ").Append(VersionId).Append("\n");
            sb.Append("  VersionOrder: ").Append(VersionOrder).Append("\n");
            sb.Append("  VersionIds: ").Append(VersionIds).Append("\n");
            sb.Append("  Values: ").Append(Values).Append("\n");
            sb.Append("  VarObject: ").Append(VarObject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomFieldContextDefaultValue)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldContextDefaultValue instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldContextDefaultValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldContextDefaultValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CascadingOptionId == other.CascadingOptionId ||
                    CascadingOptionId != null &&
                    CascadingOptionId.Equals(other.CascadingOptionId)
                ) && 
                (
                    ContextId == other.ContextId ||
                    ContextId != null &&
                    ContextId.Equals(other.ContextId)
                ) && 
                (
                    OptionId == other.OptionId ||
                    OptionId != null &&
                    OptionId.Equals(other.OptionId)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    OptionIds == other.OptionIds ||
                    OptionIds != null &&
                    other.OptionIds != null &&
                    OptionIds.SequenceEqual(other.OptionIds)
                ) && 
                (
                    AccountId == other.AccountId ||
                    AccountId != null &&
                    AccountId.Equals(other.AccountId)
                ) && 
                (
                    UserFilter == other.UserFilter ||
                    UserFilter != null &&
                    UserFilter.Equals(other.UserFilter)
                ) && 
                (
                    AccountIds == other.AccountIds ||
                    AccountIds != null &&
                    other.AccountIds != null &&
                    AccountIds.SequenceEqual(other.AccountIds)
                ) && 
                (
                    GroupId == other.GroupId ||
                    GroupId != null &&
                    GroupId.Equals(other.GroupId)
                ) && 
                (
                    GroupIds == other.GroupIds ||
                    GroupIds != null &&
                    other.GroupIds != null &&
                    GroupIds.SequenceEqual(other.GroupIds)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    UseCurrent == other.UseCurrent ||
                    
                    UseCurrent.Equals(other.UseCurrent)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.Equals(other.DateTime)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    ProjectId != null &&
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    Number == other.Number ||
                    
                    Number.Equals(other.Number)
                ) && 
                (
                    Labels == other.Labels ||
                    Labels != null &&
                    other.Labels != null &&
                    Labels.SequenceEqual(other.Labels)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    VersionId == other.VersionId ||
                    VersionId != null &&
                    VersionId.Equals(other.VersionId)
                ) && 
                (
                    VersionOrder == other.VersionOrder ||
                    VersionOrder != null &&
                    VersionOrder.Equals(other.VersionOrder)
                ) && 
                (
                    VersionIds == other.VersionIds ||
                    VersionIds != null &&
                    other.VersionIds != null &&
                    VersionIds.SequenceEqual(other.VersionIds)
                ) && 
                (
                    Values == other.Values ||
                    Values != null &&
                    other.Values != null &&
                    Values.SequenceEqual(other.Values)
                ) && 
                (
                    VarObject == other.VarObject ||
                    VarObject != null &&
                    VarObject.Equals(other.VarObject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CascadingOptionId != null)
                    hashCode = hashCode * 59 + CascadingOptionId.GetHashCode();
                    if (ContextId != null)
                    hashCode = hashCode * 59 + ContextId.GetHashCode();
                    if (OptionId != null)
                    hashCode = hashCode * 59 + OptionId.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (OptionIds != null)
                    hashCode = hashCode * 59 + OptionIds.GetHashCode();
                    if (AccountId != null)
                    hashCode = hashCode * 59 + AccountId.GetHashCode();
                    if (UserFilter != null)
                    hashCode = hashCode * 59 + UserFilter.GetHashCode();
                    if (AccountIds != null)
                    hashCode = hashCode * 59 + AccountIds.GetHashCode();
                    if (GroupId != null)
                    hashCode = hashCode * 59 + GroupId.GetHashCode();
                    if (GroupIds != null)
                    hashCode = hashCode * 59 + GroupIds.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    
                    hashCode = hashCode * 59 + UseCurrent.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (ProjectId != null)
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Number.GetHashCode();
                    if (Labels != null)
                    hashCode = hashCode * 59 + Labels.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (VersionId != null)
                    hashCode = hashCode * 59 + VersionId.GetHashCode();
                    if (VersionOrder != null)
                    hashCode = hashCode * 59 + VersionOrder.GetHashCode();
                    if (VersionIds != null)
                    hashCode = hashCode * 59 + VersionIds.GetHashCode();
                    if (Values != null)
                    hashCode = hashCode * 59 + Values.GetHashCode();
                    if (VarObject != null)
                    hashCode = hashCode * 59 + VarObject.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomFieldContextDefaultValue left, CustomFieldContextDefaultValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomFieldContextDefaultValue left, CustomFieldContextDefaultValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
