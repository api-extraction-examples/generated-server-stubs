/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A JQL query clause that consists of nested clauses. For example, &#x60;(labels in (urgent, blocker) OR lastCommentedBy &#x3D; currentUser()). Note that, where nesting is not defined, the parser nests JQL clauses based on the operator precedence. For example, \&quot;A OR B AND C\&quot; is parsed as \&quot;(A OR B) AND C\&quot;. See Setting the precedence of operators for more information about precedence in JQL queries.&#x60;
    /// </summary>
    [DataContract]
    public partial class CompoundClause : IEquatable<CompoundClause>
    {
        /// <summary>
        /// The list of nested clauses.
        /// </summary>
        /// <value>The list of nested clauses.</value>
        [Required]
        [DataMember(Name="clauses", EmitDefaultValue=false)]
        public List<JqlQueryClause> Clauses { get; set; }


        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        /// <value>The operator between the clauses.</value>
        [TypeConverter(typeof(CustomEnumConverter<OperatorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OperatorEnum
        {
            
            /// <summary>
            /// Enum AndEnum for and
            /// </summary>
            [EnumMember(Value = "and")]
            AndEnum = 1,
            
            /// <summary>
            /// Enum OrEnum for or
            /// </summary>
            [EnumMember(Value = "or")]
            OrEnum = 2,
            
            /// <summary>
            /// Enum NotEnum for not
            /// </summary>
            [EnumMember(Value = "not")]
            NotEnum = 3
        }

        /// <summary>
        /// The operator between the clauses.
        /// </summary>
        /// <value>The operator between the clauses.</value>
        [Required]
        [DataMember(Name="operator", EmitDefaultValue=true)]
        public OperatorEnum VarOperator { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CompoundClause {\n");
            sb.Append("  Clauses: ").Append(Clauses).Append("\n");
            sb.Append("  VarOperator: ").Append(VarOperator).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CompoundClause)obj);
        }

        /// <summary>
        /// Returns true if CompoundClause instances are equal
        /// </summary>
        /// <param name="other">Instance of CompoundClause to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CompoundClause other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Clauses == other.Clauses ||
                    Clauses != null &&
                    other.Clauses != null &&
                    Clauses.SequenceEqual(other.Clauses)
                ) && 
                (
                    VarOperator == other.VarOperator ||
                    
                    VarOperator.Equals(other.VarOperator)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Clauses != null)
                    hashCode = hashCode * 59 + Clauses.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarOperator.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CompoundClause left, CompoundClause right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CompoundClause left, CompoundClause right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
