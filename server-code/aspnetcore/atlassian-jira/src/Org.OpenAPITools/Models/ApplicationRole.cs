/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of an application role.
    /// </summary>
    [DataContract]
    public partial class ApplicationRole : IEquatable<ApplicationRole>
    {
        /// <summary>
        /// The groups that are granted default access for this application role. As a group&#39;s name can change, use of &#x60;defaultGroupsDetails&#x60; is recommended to identify a groups.
        /// </summary>
        /// <value>The groups that are granted default access for this application role. As a group&#39;s name can change, use of &#x60;defaultGroupsDetails&#x60; is recommended to identify a groups.</value>
        [DataMember(Name="defaultGroups", EmitDefaultValue=false)]
        public List<string> DefaultGroups { get; set; }

        /// <summary>
        /// The groups that are granted default access for this application role.
        /// </summary>
        /// <value>The groups that are granted default access for this application role.</value>
        [DataMember(Name="defaultGroupsDetails", EmitDefaultValue=false)]
        public List<GroupName> DefaultGroupsDetails { get; set; }

        /// <summary>
        /// Deprecated.
        /// </summary>
        /// <value>Deprecated.</value>
        [DataMember(Name="defined", EmitDefaultValue=true)]
        public bool Defined { get; set; }

        /// <summary>
        /// The groups associated with the application role.
        /// </summary>
        /// <value>The groups associated with the application role.</value>
        [DataMember(Name="groupDetails", EmitDefaultValue=false)]
        public List<GroupName> GroupDetails { get; set; }

        /// <summary>
        /// The groups associated with the application role. As a group&#39;s name can change, use of &#x60;groupDetails&#x60; is recommended to identify a groups.
        /// </summary>
        /// <value>The groups associated with the application role. As a group&#39;s name can change, use of &#x60;groupDetails&#x60; is recommended to identify a groups.</value>
        [DataMember(Name="groups", EmitDefaultValue=false)]
        public List<string> Groups { get; set; }

        /// <summary>
        /// Gets or Sets HasUnlimitedSeats
        /// </summary>
        [DataMember(Name="hasUnlimitedSeats", EmitDefaultValue=true)]
        public bool HasUnlimitedSeats { get; set; }

        /// <summary>
        /// The key of the application role.
        /// </summary>
        /// <value>The key of the application role.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The display name of the application role.
        /// </summary>
        /// <value>The display name of the application role.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The maximum count of users on your license.
        /// </summary>
        /// <value>The maximum count of users on your license.</value>
        [DataMember(Name="numberOfSeats", EmitDefaultValue=true)]
        public int NumberOfSeats { get; set; }

        /// <summary>
        /// Indicates if the application role belongs to Jira platform (&#x60;jira-core&#x60;).
        /// </summary>
        /// <value>Indicates if the application role belongs to Jira platform (&#x60;jira-core&#x60;).</value>
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public bool Platform { get; set; }

        /// <summary>
        /// The count of users remaining on your license.
        /// </summary>
        /// <value>The count of users remaining on your license.</value>
        [DataMember(Name="remainingSeats", EmitDefaultValue=true)]
        public int RemainingSeats { get; set; }

        /// <summary>
        /// Determines whether this application role should be selected by default on user creation.
        /// </summary>
        /// <value>Determines whether this application role should be selected by default on user creation.</value>
        [DataMember(Name="selectedByDefault", EmitDefaultValue=true)]
        public bool SelectedByDefault { get; set; }

        /// <summary>
        /// The number of users counting against your license.
        /// </summary>
        /// <value>The number of users counting against your license.</value>
        [DataMember(Name="userCount", EmitDefaultValue=true)]
        public int UserCount { get; set; }

        /// <summary>
        /// The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.
        /// </summary>
        /// <value>The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.</value>
        [DataMember(Name="userCountDescription", EmitDefaultValue=false)]
        public string UserCountDescription { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApplicationRole {\n");
            sb.Append("  DefaultGroups: ").Append(DefaultGroups).Append("\n");
            sb.Append("  DefaultGroupsDetails: ").Append(DefaultGroupsDetails).Append("\n");
            sb.Append("  Defined: ").Append(Defined).Append("\n");
            sb.Append("  GroupDetails: ").Append(GroupDetails).Append("\n");
            sb.Append("  Groups: ").Append(Groups).Append("\n");
            sb.Append("  HasUnlimitedSeats: ").Append(HasUnlimitedSeats).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberOfSeats: ").Append(NumberOfSeats).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  RemainingSeats: ").Append(RemainingSeats).Append("\n");
            sb.Append("  SelectedByDefault: ").Append(SelectedByDefault).Append("\n");
            sb.Append("  UserCount: ").Append(UserCount).Append("\n");
            sb.Append("  UserCountDescription: ").Append(UserCountDescription).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApplicationRole)obj);
        }

        /// <summary>
        /// Returns true if ApplicationRole instances are equal
        /// </summary>
        /// <param name="other">Instance of ApplicationRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApplicationRole other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultGroups == other.DefaultGroups ||
                    DefaultGroups != null &&
                    other.DefaultGroups != null &&
                    DefaultGroups.SequenceEqual(other.DefaultGroups)
                ) && 
                (
                    DefaultGroupsDetails == other.DefaultGroupsDetails ||
                    DefaultGroupsDetails != null &&
                    other.DefaultGroupsDetails != null &&
                    DefaultGroupsDetails.SequenceEqual(other.DefaultGroupsDetails)
                ) && 
                (
                    Defined == other.Defined ||
                    
                    Defined.Equals(other.Defined)
                ) && 
                (
                    GroupDetails == other.GroupDetails ||
                    GroupDetails != null &&
                    other.GroupDetails != null &&
                    GroupDetails.SequenceEqual(other.GroupDetails)
                ) && 
                (
                    Groups == other.Groups ||
                    Groups != null &&
                    other.Groups != null &&
                    Groups.SequenceEqual(other.Groups)
                ) && 
                (
                    HasUnlimitedSeats == other.HasUnlimitedSeats ||
                    
                    HasUnlimitedSeats.Equals(other.HasUnlimitedSeats)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberOfSeats == other.NumberOfSeats ||
                    
                    NumberOfSeats.Equals(other.NumberOfSeats)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                ) && 
                (
                    RemainingSeats == other.RemainingSeats ||
                    
                    RemainingSeats.Equals(other.RemainingSeats)
                ) && 
                (
                    SelectedByDefault == other.SelectedByDefault ||
                    
                    SelectedByDefault.Equals(other.SelectedByDefault)
                ) && 
                (
                    UserCount == other.UserCount ||
                    
                    UserCount.Equals(other.UserCount)
                ) && 
                (
                    UserCountDescription == other.UserCountDescription ||
                    UserCountDescription != null &&
                    UserCountDescription.Equals(other.UserCountDescription)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DefaultGroups != null)
                    hashCode = hashCode * 59 + DefaultGroups.GetHashCode();
                    if (DefaultGroupsDetails != null)
                    hashCode = hashCode * 59 + DefaultGroupsDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Defined.GetHashCode();
                    if (GroupDetails != null)
                    hashCode = hashCode * 59 + GroupDetails.GetHashCode();
                    if (Groups != null)
                    hashCode = hashCode * 59 + Groups.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasUnlimitedSeats.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberOfSeats.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    
                    hashCode = hashCode * 59 + RemainingSeats.GetHashCode();
                    
                    hashCode = hashCode * 59 + SelectedByDefault.GetHashCode();
                    
                    hashCode = hashCode * 59 + UserCount.GetHashCode();
                    if (UserCountDescription != null)
                    hashCode = hashCode * 59 + UserCountDescription.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApplicationRole left, ApplicationRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApplicationRole left, ApplicationRole right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
