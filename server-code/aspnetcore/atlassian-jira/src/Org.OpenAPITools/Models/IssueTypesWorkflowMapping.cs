/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the mapping between issue types and a workflow.
    /// </summary>
    [DataContract]
    public partial class IssueTypesWorkflowMapping : IEquatable<IssueTypesWorkflowMapping>
    {
        /// <summary>
        /// Whether the workflow is the default workflow for the workflow scheme.
        /// </summary>
        /// <value>Whether the workflow is the default workflow for the workflow scheme.</value>
        [DataMember(Name="defaultMapping", EmitDefaultValue=true)]
        public bool DefaultMapping { get; set; }

        /// <summary>
        /// The list of issue type IDs.
        /// </summary>
        /// <value>The list of issue type IDs.</value>
        [DataMember(Name="issueTypes", EmitDefaultValue=false)]
        public List<string> IssueTypes { get; set; }

        /// <summary>
        /// Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to &#x60;false&#x60;.
        /// </summary>
        /// <value>Whether a draft workflow scheme is created or updated when updating an active workflow scheme. The draft is updated with the new workflow-issue types mapping. Defaults to &#x60;false&#x60;.</value>
        [DataMember(Name="updateDraftIfNeeded", EmitDefaultValue=true)]
        public bool UpdateDraftIfNeeded { get; set; }

        /// <summary>
        /// The name of the workflow. Optional if updating the workflow-issue types mapping.
        /// </summary>
        /// <value>The name of the workflow. Optional if updating the workflow-issue types mapping.</value>
        [DataMember(Name="workflow", EmitDefaultValue=false)]
        public string Workflow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueTypesWorkflowMapping {\n");
            sb.Append("  DefaultMapping: ").Append(DefaultMapping).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  UpdateDraftIfNeeded: ").Append(UpdateDraftIfNeeded).Append("\n");
            sb.Append("  Workflow: ").Append(Workflow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueTypesWorkflowMapping)obj);
        }

        /// <summary>
        /// Returns true if IssueTypesWorkflowMapping instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueTypesWorkflowMapping to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueTypesWorkflowMapping other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DefaultMapping == other.DefaultMapping ||
                    
                    DefaultMapping.Equals(other.DefaultMapping)
                ) && 
                (
                    IssueTypes == other.IssueTypes ||
                    IssueTypes != null &&
                    other.IssueTypes != null &&
                    IssueTypes.SequenceEqual(other.IssueTypes)
                ) && 
                (
                    UpdateDraftIfNeeded == other.UpdateDraftIfNeeded ||
                    
                    UpdateDraftIfNeeded.Equals(other.UpdateDraftIfNeeded)
                ) && 
                (
                    Workflow == other.Workflow ||
                    Workflow != null &&
                    Workflow.Equals(other.Workflow)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + DefaultMapping.GetHashCode();
                    if (IssueTypes != null)
                    hashCode = hashCode * 59 + IssueTypes.GetHashCode();
                    
                    hashCode = hashCode * 59 + UpdateDraftIfNeeded.GetHashCode();
                    if (Workflow != null)
                    hashCode = hashCode * 59 + Workflow.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueTypesWorkflowMapping left, IssueTypesWorkflowMapping right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueTypesWorkflowMapping left, IssueTypesWorkflowMapping right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
