/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about an issue.
    /// </summary>
    [DataContract]
    public partial class IssueBean : IEquatable<IssueBean>
    {
        /// <summary>
        /// Gets or Sets Changelog
        /// </summary>
        [DataMember(Name="changelog", EmitDefaultValue=false)]
        public IssueBeanChangelog Changelog { get; set; }

        /// <summary>
        /// Gets or Sets Editmeta
        /// </summary>
        [DataMember(Name="editmeta", EmitDefaultValue=false)]
        public IssueBeanEditmeta Editmeta { get; set; }

        /// <summary>
        /// Expand options that include additional issue details in the response.
        /// </summary>
        /// <value>Expand options that include additional issue details in the response.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public Dictionary<string, Object> Fields { get; set; }

        /// <summary>
        /// Gets or Sets FieldsToInclude
        /// </summary>
        [DataMember(Name="fieldsToInclude", EmitDefaultValue=false)]
        public IncludedFields FieldsToInclude { get; set; }

        /// <summary>
        /// The ID of the issue.
        /// </summary>
        /// <value>The ID of the issue.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        /// <value>The key of the issue.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The ID and name of each field present on the issue.
        /// </summary>
        /// <value>The ID and name of each field present on the issue.</value>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public Dictionary<string, string> Names { get; set; }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public IssueBeanOperations Operations { get; set; }

        /// <summary>
        /// Details of the issue properties identified in the request.
        /// </summary>
        /// <value>Details of the issue properties identified in the request.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// The rendered value of each field present on the issue.
        /// </summary>
        /// <value>The rendered value of each field present on the issue.</value>
        [DataMember(Name="renderedFields", EmitDefaultValue=false)]
        public Dictionary<string, Object> RenderedFields { get; set; }

        /// <summary>
        /// The schema describing each field present on the issue.
        /// </summary>
        /// <value>The schema describing each field present on the issue.</value>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public Dictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The URL of the issue details.
        /// </summary>
        /// <value>The URL of the issue details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// The transitions that can be performed on the issue.
        /// </summary>
        /// <value>The transitions that can be performed on the issue.</value>
        [DataMember(Name="transitions", EmitDefaultValue=false)]
        public List<IssueTransition> Transitions { get; set; }

        /// <summary>
        /// The versions of each field on the issue.
        /// </summary>
        /// <value>The versions of each field on the issue.</value>
        [DataMember(Name="versionedRepresentations", EmitDefaultValue=false)]
        public Dictionary<string, Dictionary<string, Object>> VersionedRepresentations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueBean {\n");
            sb.Append("  Changelog: ").Append(Changelog).Append("\n");
            sb.Append("  Editmeta: ").Append(Editmeta).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  FieldsToInclude: ").Append(FieldsToInclude).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RenderedFields: ").Append(RenderedFields).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  VersionedRepresentations: ").Append(VersionedRepresentations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueBean)obj);
        }

        /// <summary>
        /// Returns true if IssueBean instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Changelog == other.Changelog ||
                    Changelog != null &&
                    Changelog.Equals(other.Changelog)
                ) && 
                (
                    Editmeta == other.Editmeta ||
                    Editmeta != null &&
                    Editmeta.Equals(other.Editmeta)
                ) && 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    FieldsToInclude == other.FieldsToInclude ||
                    FieldsToInclude != null &&
                    FieldsToInclude.Equals(other.FieldsToInclude)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Names == other.Names ||
                    Names != null &&
                    other.Names != null &&
                    Names.SequenceEqual(other.Names)
                ) && 
                (
                    Operations == other.Operations ||
                    Operations != null &&
                    Operations.Equals(other.Operations)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    other.Properties != null &&
                    Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    RenderedFields == other.RenderedFields ||
                    RenderedFields != null &&
                    other.RenderedFields != null &&
                    RenderedFields.SequenceEqual(other.RenderedFields)
                ) && 
                (
                    Schema == other.Schema ||
                    Schema != null &&
                    other.Schema != null &&
                    Schema.SequenceEqual(other.Schema)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Transitions == other.Transitions ||
                    Transitions != null &&
                    other.Transitions != null &&
                    Transitions.SequenceEqual(other.Transitions)
                ) && 
                (
                    VersionedRepresentations == other.VersionedRepresentations ||
                    VersionedRepresentations != null &&
                    other.VersionedRepresentations != null &&
                    VersionedRepresentations.SequenceEqual(other.VersionedRepresentations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Changelog != null)
                    hashCode = hashCode * 59 + Changelog.GetHashCode();
                    if (Editmeta != null)
                    hashCode = hashCode * 59 + Editmeta.GetHashCode();
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (FieldsToInclude != null)
                    hashCode = hashCode * 59 + FieldsToInclude.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Names != null)
                    hashCode = hashCode * 59 + Names.GetHashCode();
                    if (Operations != null)
                    hashCode = hashCode * 59 + Operations.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                    if (RenderedFields != null)
                    hashCode = hashCode * 59 + RenderedFields.GetHashCode();
                    if (Schema != null)
                    hashCode = hashCode * 59 + Schema.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    if (Transitions != null)
                    hashCode = hashCode * 59 + Transitions.GetHashCode();
                    if (VersionedRepresentations != null)
                    hashCode = hashCode * 59 + VersionedRepresentations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueBean left, IssueBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueBean left, IssueBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
