/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of the contextual configuration for a custom field.
    /// </summary>
    [DataContract]
    public partial class ContextualConfiguration : IEquatable<ContextualConfiguration>
    {
        /// <summary>
        /// The field configuration.
        /// </summary>
        /// <value>The field configuration.</value>
        [DataMember(Name="configuration", EmitDefaultValue=true)]
        public Object VarConfiguration { get; set; }

        /// <summary>
        /// The ID of the field context the configuration is associated with.
        /// </summary>
        /// <value>The ID of the field context the configuration is associated with.</value>
        [Required]
        [DataMember(Name="fieldContextId", EmitDefaultValue=false)]
        public string FieldContextId { get; set; }

        /// <summary>
        /// The ID of the configuration.
        /// </summary>
        /// <value>The ID of the configuration.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The field value schema.
        /// </summary>
        /// <value>The field value schema.</value>
        [DataMember(Name="schema", EmitDefaultValue=true)]
        public Object Schema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContextualConfiguration {\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  FieldContextId: ").Append(FieldContextId).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ContextualConfiguration)obj);
        }

        /// <summary>
        /// Returns true if ContextualConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of ContextualConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContextualConfiguration other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarConfiguration == other.VarConfiguration ||
                    VarConfiguration != null &&
                    VarConfiguration.Equals(other.VarConfiguration)
                ) && 
                (
                    FieldContextId == other.FieldContextId ||
                    FieldContextId != null &&
                    FieldContextId.Equals(other.FieldContextId)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Schema == other.Schema ||
                    Schema != null &&
                    Schema.Equals(other.Schema)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarConfiguration != null)
                    hashCode = hashCode * 59 + VarConfiguration.GetHashCode();
                    if (FieldContextId != null)
                    hashCode = hashCode * 59 + FieldContextId.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Schema != null)
                    hashCode = hashCode * 59 + Schema.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ContextualConfiguration left, ContextualConfiguration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ContextualConfiguration left, ContextualConfiguration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
