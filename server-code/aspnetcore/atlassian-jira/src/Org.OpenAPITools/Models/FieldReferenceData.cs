/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of a field that can be used in advanced searches.
    /// </summary>
    [DataContract]
    public partial class FieldReferenceData : IEquatable<FieldReferenceData>
    {

        /// <summary>
        /// Whether the field provide auto-complete suggestions.
        /// </summary>
        /// <value>Whether the field provide auto-complete suggestions.</value>
        [TypeConverter(typeof(CustomEnumConverter<AutoEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AutoEnum
        {
            
            /// <summary>
            /// Enum TrueEnum for true
            /// </summary>
            [EnumMember(Value = "true")]
            TrueEnum = 1,
            
            /// <summary>
            /// Enum FalseEnum for false
            /// </summary>
            [EnumMember(Value = "false")]
            FalseEnum = 2
        }

        /// <summary>
        /// Whether the field provide auto-complete suggestions.
        /// </summary>
        /// <value>Whether the field provide auto-complete suggestions.</value>
        [DataMember(Name="auto", EmitDefaultValue=true)]
        public AutoEnum Auto { get; set; }

        /// <summary>
        /// If the item is a custom field, the ID of the custom field.
        /// </summary>
        /// <value>If the item is a custom field, the ID of the custom field.</value>
        [DataMember(Name="cfid", EmitDefaultValue=false)]
        public string Cfid { get; set; }


        /// <summary>
        /// Whether this field has been deprecated.
        /// </summary>
        /// <value>Whether this field has been deprecated.</value>
        [TypeConverter(typeof(CustomEnumConverter<DeprecatedEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DeprecatedEnum
        {
            
            /// <summary>
            /// Enum TrueEnum for true
            /// </summary>
            [EnumMember(Value = "true")]
            TrueEnum = 1,
            
            /// <summary>
            /// Enum FalseEnum for false
            /// </summary>
            [EnumMember(Value = "false")]
            FalseEnum = 2
        }

        /// <summary>
        /// Whether this field has been deprecated.
        /// </summary>
        /// <value>Whether this field has been deprecated.</value>
        [DataMember(Name="deprecated", EmitDefaultValue=true)]
        public DeprecatedEnum Deprecated { get; set; }

        /// <summary>
        /// The searcher key of the field, only passed when the field is deprecated.
        /// </summary>
        /// <value>The searcher key of the field, only passed when the field is deprecated.</value>
        [DataMember(Name="deprecatedSearcherKey", EmitDefaultValue=false)]
        public string DeprecatedSearcherKey { get; set; }

        /// <summary>
        /// The display name contains the following:   *  for system fields, the field name. For example, &#x60;Summary&#x60;.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, &#x60;Component - Component[Dropdown]&#x60;.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, &#x60;Component - cf[10061]&#x60;.
        /// </summary>
        /// <value>The display name contains the following:   *  for system fields, the field name. For example, &#x60;Summary&#x60;.  *  for collapsed custom fields, the field name followed by a hyphen and then the field name and field type. For example, &#x60;Component - Component[Dropdown]&#x60;.  *  for other custom fields, the field name followed by a hyphen and then the custom field ID. For example, &#x60;Component - cf[10061]&#x60;.</value>
        [DataMember(Name="displayName", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The valid search operators for the field.
        /// </summary>
        /// <value>The valid search operators for the field.</value>
        [DataMember(Name="operators", EmitDefaultValue=false)]
        public List<string> Operators { get; set; }


        /// <summary>
        /// Whether the field can be used in a query's `ORDER BY` clause.
        /// </summary>
        /// <value>Whether the field can be used in a query's `ORDER BY` clause.</value>
        [TypeConverter(typeof(CustomEnumConverter<OrderableEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum OrderableEnum
        {
            
            /// <summary>
            /// Enum TrueEnum for true
            /// </summary>
            [EnumMember(Value = "true")]
            TrueEnum = 1,
            
            /// <summary>
            /// Enum FalseEnum for false
            /// </summary>
            [EnumMember(Value = "false")]
            FalseEnum = 2
        }

        /// <summary>
        /// Whether the field can be used in a query&#39;s &#x60;ORDER BY&#x60; clause.
        /// </summary>
        /// <value>Whether the field can be used in a query&#39;s &#x60;ORDER BY&#x60; clause.</value>
        [DataMember(Name="orderable", EmitDefaultValue=true)]
        public OrderableEnum Orderable { get; set; }


        /// <summary>
        /// Whether the content of this field can be searched.
        /// </summary>
        /// <value>Whether the content of this field can be searched.</value>
        [TypeConverter(typeof(CustomEnumConverter<SearchableEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SearchableEnum
        {
            
            /// <summary>
            /// Enum TrueEnum for true
            /// </summary>
            [EnumMember(Value = "true")]
            TrueEnum = 1,
            
            /// <summary>
            /// Enum FalseEnum for false
            /// </summary>
            [EnumMember(Value = "false")]
            FalseEnum = 2
        }

        /// <summary>
        /// Whether the content of this field can be searched.
        /// </summary>
        /// <value>Whether the content of this field can be searched.</value>
        [DataMember(Name="searchable", EmitDefaultValue=true)]
        public SearchableEnum Searchable { get; set; }

        /// <summary>
        /// The data types of items in the field.
        /// </summary>
        /// <value>The data types of items in the field.</value>
        [DataMember(Name="types", EmitDefaultValue=false)]
        public List<string> Types { get; set; }

        /// <summary>
        /// The field identifier.
        /// </summary>
        /// <value>The field identifier.</value>
        [DataMember(Name="value", EmitDefaultValue=false)]
        public string Value { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldReferenceData {\n");
            sb.Append("  Auto: ").Append(Auto).Append("\n");
            sb.Append("  Cfid: ").Append(Cfid).Append("\n");
            sb.Append("  Deprecated: ").Append(Deprecated).Append("\n");
            sb.Append("  DeprecatedSearcherKey: ").Append(DeprecatedSearcherKey).Append("\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  Operators: ").Append(Operators).Append("\n");
            sb.Append("  Orderable: ").Append(Orderable).Append("\n");
            sb.Append("  Searchable: ").Append(Searchable).Append("\n");
            sb.Append("  Types: ").Append(Types).Append("\n");
            sb.Append("  Value: ").Append(Value).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldReferenceData)obj);
        }

        /// <summary>
        /// Returns true if FieldReferenceData instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldReferenceData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldReferenceData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Auto == other.Auto ||
                    
                    Auto.Equals(other.Auto)
                ) && 
                (
                    Cfid == other.Cfid ||
                    Cfid != null &&
                    Cfid.Equals(other.Cfid)
                ) && 
                (
                    Deprecated == other.Deprecated ||
                    
                    Deprecated.Equals(other.Deprecated)
                ) && 
                (
                    DeprecatedSearcherKey == other.DeprecatedSearcherKey ||
                    DeprecatedSearcherKey != null &&
                    DeprecatedSearcherKey.Equals(other.DeprecatedSearcherKey)
                ) && 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    Operators == other.Operators ||
                    Operators != null &&
                    other.Operators != null &&
                    Operators.SequenceEqual(other.Operators)
                ) && 
                (
                    Orderable == other.Orderable ||
                    
                    Orderable.Equals(other.Orderable)
                ) && 
                (
                    Searchable == other.Searchable ||
                    
                    Searchable.Equals(other.Searchable)
                ) && 
                (
                    Types == other.Types ||
                    Types != null &&
                    other.Types != null &&
                    Types.SequenceEqual(other.Types)
                ) && 
                (
                    Value == other.Value ||
                    Value != null &&
                    Value.Equals(other.Value)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Auto.GetHashCode();
                    if (Cfid != null)
                    hashCode = hashCode * 59 + Cfid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Deprecated.GetHashCode();
                    if (DeprecatedSearcherKey != null)
                    hashCode = hashCode * 59 + DeprecatedSearcherKey.GetHashCode();
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (Operators != null)
                    hashCode = hashCode * 59 + Operators.GetHashCode();
                    
                    hashCode = hashCode * 59 + Orderable.GetHashCode();
                    
                    hashCode = hashCode * 59 + Searchable.GetHashCode();
                    if (Types != null)
                    hashCode = hashCode * 59 + Types.GetHashCode();
                    if (Value != null)
                    hashCode = hashCode * 59 + Value.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldReferenceData left, FieldReferenceData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldReferenceData left, FieldReferenceData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
