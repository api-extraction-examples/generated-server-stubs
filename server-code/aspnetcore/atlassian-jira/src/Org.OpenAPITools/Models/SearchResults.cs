/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The result of a JQL search.
    /// </summary>
    [DataContract]
    public partial class SearchResults : IEquatable<SearchResults>
    {
        /// <summary>
        /// Expand options that include additional search result details in the response.
        /// </summary>
        /// <value>Expand options that include additional search result details in the response.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// The list of issues found by the search.
        /// </summary>
        /// <value>The list of issues found by the search.</value>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public List<IssueBean> Issues { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        /// <value>The maximum number of results that could be on the page.</value>
        [DataMember(Name="maxResults", EmitDefaultValue=true)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The ID and name of each field in the search results.
        /// </summary>
        /// <value>The ID and name of each field in the search results.</value>
        [DataMember(Name="names", EmitDefaultValue=false)]
        public Dictionary<string, string> Names { get; set; }

        /// <summary>
        /// The schema describing the field types in the search results.
        /// </summary>
        /// <value>The schema describing the field types in the search results.</value>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public Dictionary<string, JsonTypeBean> Schema { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        /// <value>The index of the first item returned on the page.</value>
        [DataMember(Name="startAt", EmitDefaultValue=true)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        /// <value>The number of results on the page.</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public int Total { get; set; }

        /// <summary>
        /// Any warnings related to the JQL query.
        /// </summary>
        /// <value>Any warnings related to the JQL query.</value>
        [DataMember(Name="warningMessages", EmitDefaultValue=false)]
        public List<string> WarningMessages { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SearchResults {\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Names: ").Append(Names).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  WarningMessages: ").Append(WarningMessages).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SearchResults)obj);
        }

        /// <summary>
        /// Returns true if SearchResults instances are equal
        /// </summary>
        /// <param name="other">Instance of SearchResults to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SearchResults other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Issues == other.Issues ||
                    Issues != null &&
                    other.Issues != null &&
                    Issues.SequenceEqual(other.Issues)
                ) && 
                (
                    MaxResults == other.MaxResults ||
                    
                    MaxResults.Equals(other.MaxResults)
                ) && 
                (
                    Names == other.Names ||
                    Names != null &&
                    other.Names != null &&
                    Names.SequenceEqual(other.Names)
                ) && 
                (
                    Schema == other.Schema ||
                    Schema != null &&
                    other.Schema != null &&
                    Schema.SequenceEqual(other.Schema)
                ) && 
                (
                    StartAt == other.StartAt ||
                    
                    StartAt.Equals(other.StartAt)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                ) && 
                (
                    WarningMessages == other.WarningMessages ||
                    WarningMessages != null &&
                    other.WarningMessages != null &&
                    WarningMessages.SequenceEqual(other.WarningMessages)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    if (Issues != null)
                    hashCode = hashCode * 59 + Issues.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxResults.GetHashCode();
                    if (Names != null)
                    hashCode = hashCode * 59 + Names.GetHashCode();
                    if (Schema != null)
                    hashCode = hashCode * 59 + Schema.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                    if (WarningMessages != null)
                    hashCode = hashCode * 59 + WarningMessages.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SearchResults left, SearchResults right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SearchResults left, SearchResults right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
