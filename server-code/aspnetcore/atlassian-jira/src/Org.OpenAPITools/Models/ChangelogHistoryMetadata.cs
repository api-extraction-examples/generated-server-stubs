/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The history metadata associated with the changed.
    /// </summary>
    [DataContract]
    public partial class ChangelogHistoryMetadata : IEquatable<ChangelogHistoryMetadata>
    {
        /// <summary>
        /// The activity described in the history record.
        /// </summary>
        /// <value>The activity described in the history record.</value>
        [DataMember(Name="activityDescription", EmitDefaultValue=false)]
        public string ActivityDescription { get; set; }

        /// <summary>
        /// The key of the activity described in the history record.
        /// </summary>
        /// <value>The key of the activity described in the history record.</value>
        [DataMember(Name="activityDescriptionKey", EmitDefaultValue=false)]
        public string ActivityDescriptionKey { get; set; }

        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public HistoryMetadataParticipant Actor { get; set; }

        /// <summary>
        /// Gets or Sets Cause
        /// </summary>
        [DataMember(Name="cause", EmitDefaultValue=false)]
        public HistoryMetadataParticipant Cause { get; set; }

        /// <summary>
        /// The description of the history record.
        /// </summary>
        /// <value>The description of the history record.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The description key of the history record.
        /// </summary>
        /// <value>The description key of the history record.</value>
        [DataMember(Name="descriptionKey", EmitDefaultValue=false)]
        public string DescriptionKey { get; set; }

        /// <summary>
        /// The description of the email address associated the history record.
        /// </summary>
        /// <value>The description of the email address associated the history record.</value>
        [DataMember(Name="emailDescription", EmitDefaultValue=false)]
        public string EmailDescription { get; set; }

        /// <summary>
        /// The description key of the email address associated the history record.
        /// </summary>
        /// <value>The description key of the email address associated the history record.</value>
        [DataMember(Name="emailDescriptionKey", EmitDefaultValue=false)]
        public string EmailDescriptionKey { get; set; }

        /// <summary>
        /// Additional arbitrary information about the history record.
        /// </summary>
        /// <value>Additional arbitrary information about the history record.</value>
        [DataMember(Name="extraData", EmitDefaultValue=false)]
        public Dictionary<string, string> ExtraData { get; set; }

        /// <summary>
        /// Gets or Sets Generator
        /// </summary>
        [DataMember(Name="generator", EmitDefaultValue=false)]
        public HistoryMetadataParticipant Generator { get; set; }

        /// <summary>
        /// The type of the history record.
        /// </summary>
        /// <value>The type of the history record.</value>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ChangelogHistoryMetadata {\n");
            sb.Append("  ActivityDescription: ").Append(ActivityDescription).Append("\n");
            sb.Append("  ActivityDescriptionKey: ").Append(ActivityDescriptionKey).Append("\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  DescriptionKey: ").Append(DescriptionKey).Append("\n");
            sb.Append("  EmailDescription: ").Append(EmailDescription).Append("\n");
            sb.Append("  EmailDescriptionKey: ").Append(EmailDescriptionKey).Append("\n");
            sb.Append("  ExtraData: ").Append(ExtraData).Append("\n");
            sb.Append("  Generator: ").Append(Generator).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ChangelogHistoryMetadata)obj);
        }

        /// <summary>
        /// Returns true if ChangelogHistoryMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of ChangelogHistoryMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ChangelogHistoryMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActivityDescription == other.ActivityDescription ||
                    ActivityDescription != null &&
                    ActivityDescription.Equals(other.ActivityDescription)
                ) && 
                (
                    ActivityDescriptionKey == other.ActivityDescriptionKey ||
                    ActivityDescriptionKey != null &&
                    ActivityDescriptionKey.Equals(other.ActivityDescriptionKey)
                ) && 
                (
                    Actor == other.Actor ||
                    Actor != null &&
                    Actor.Equals(other.Actor)
                ) && 
                (
                    Cause == other.Cause ||
                    Cause != null &&
                    Cause.Equals(other.Cause)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    DescriptionKey == other.DescriptionKey ||
                    DescriptionKey != null &&
                    DescriptionKey.Equals(other.DescriptionKey)
                ) && 
                (
                    EmailDescription == other.EmailDescription ||
                    EmailDescription != null &&
                    EmailDescription.Equals(other.EmailDescription)
                ) && 
                (
                    EmailDescriptionKey == other.EmailDescriptionKey ||
                    EmailDescriptionKey != null &&
                    EmailDescriptionKey.Equals(other.EmailDescriptionKey)
                ) && 
                (
                    ExtraData == other.ExtraData ||
                    ExtraData != null &&
                    other.ExtraData != null &&
                    ExtraData.SequenceEqual(other.ExtraData)
                ) && 
                (
                    Generator == other.Generator ||
                    Generator != null &&
                    Generator.Equals(other.Generator)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ActivityDescription != null)
                    hashCode = hashCode * 59 + ActivityDescription.GetHashCode();
                    if (ActivityDescriptionKey != null)
                    hashCode = hashCode * 59 + ActivityDescriptionKey.GetHashCode();
                    if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                    if (Cause != null)
                    hashCode = hashCode * 59 + Cause.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (DescriptionKey != null)
                    hashCode = hashCode * 59 + DescriptionKey.GetHashCode();
                    if (EmailDescription != null)
                    hashCode = hashCode * 59 + EmailDescription.GetHashCode();
                    if (EmailDescriptionKey != null)
                    hashCode = hashCode * 59 + EmailDescriptionKey.GetHashCode();
                    if (ExtraData != null)
                    hashCode = hashCode * 59 + ExtraData.GetHashCode();
                    if (Generator != null)
                    hashCode = hashCode * 59 + Generator.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ChangelogHistoryMetadata left, ChangelogHistoryMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ChangelogHistoryMetadata left, ChangelogHistoryMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
