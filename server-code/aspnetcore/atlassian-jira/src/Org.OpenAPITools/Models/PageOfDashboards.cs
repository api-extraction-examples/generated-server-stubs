/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A page containing dashboard details.
    /// </summary>
    [DataContract]
    public partial class PageOfDashboards : IEquatable<PageOfDashboards>
    {
        /// <summary>
        /// List of dashboards.
        /// </summary>
        /// <value>List of dashboards.</value>
        [DataMember(Name="dashboards", EmitDefaultValue=false)]
        public List<Dashboard> Dashboards { get; set; }

        /// <summary>
        /// The maximum number of results that could be on the page.
        /// </summary>
        /// <value>The maximum number of results that could be on the page.</value>
        [DataMember(Name="maxResults", EmitDefaultValue=true)]
        public int MaxResults { get; set; }

        /// <summary>
        /// The URL of the next page of results, if any.
        /// </summary>
        /// <value>The URL of the next page of results, if any.</value>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public string Next { get; set; }

        /// <summary>
        /// The URL of the previous page of results, if any.
        /// </summary>
        /// <value>The URL of the previous page of results, if any.</value>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public string Prev { get; set; }

        /// <summary>
        /// The index of the first item returned on the page.
        /// </summary>
        /// <value>The index of the first item returned on the page.</value>
        [DataMember(Name="startAt", EmitDefaultValue=true)]
        public int StartAt { get; set; }

        /// <summary>
        /// The number of results on the page.
        /// </summary>
        /// <value>The number of results on the page.</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PageOfDashboards {\n");
            sb.Append("  Dashboards: ").Append(Dashboards).Append("\n");
            sb.Append("  MaxResults: ").Append(MaxResults).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PageOfDashboards)obj);
        }

        /// <summary>
        /// Returns true if PageOfDashboards instances are equal
        /// </summary>
        /// <param name="other">Instance of PageOfDashboards to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PageOfDashboards other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Dashboards == other.Dashboards ||
                    Dashboards != null &&
                    other.Dashboards != null &&
                    Dashboards.SequenceEqual(other.Dashboards)
                ) && 
                (
                    MaxResults == other.MaxResults ||
                    
                    MaxResults.Equals(other.MaxResults)
                ) && 
                (
                    Next == other.Next ||
                    Next != null &&
                    Next.Equals(other.Next)
                ) && 
                (
                    Prev == other.Prev ||
                    Prev != null &&
                    Prev.Equals(other.Prev)
                ) && 
                (
                    StartAt == other.StartAt ||
                    
                    StartAt.Equals(other.StartAt)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Dashboards != null)
                    hashCode = hashCode * 59 + Dashboards.GetHashCode();
                    
                    hashCode = hashCode * 59 + MaxResults.GetHashCode();
                    if (Next != null)
                    hashCode = hashCode * 59 + Next.GetHashCode();
                    if (Prev != null)
                    hashCode = hashCode * 59 + Prev.GetHashCode();
                    
                    hashCode = hashCode * 59 + StartAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PageOfDashboards left, PageOfDashboards right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PageOfDashboards left, PageOfDashboards right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
