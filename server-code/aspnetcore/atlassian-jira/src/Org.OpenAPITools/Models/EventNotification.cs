/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a notification associated with an event.
    /// </summary>
    [DataContract]
    public partial class EventNotification : IEquatable<EventNotification>
    {
        /// <summary>
        /// The email address.
        /// </summary>
        /// <value>The email address.</value>
        [DataMember(Name="emailAddress", EmitDefaultValue=false)]
        public string EmailAddress { get; set; }

        /// <summary>
        /// Expand options that include additional event notification details in the response.
        /// </summary>
        /// <value>Expand options that include additional event notification details in the response.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// Gets or Sets Field
        /// </summary>
        [DataMember(Name="field", EmitDefaultValue=false)]
        public FieldDetails Field { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [DataMember(Name="group", EmitDefaultValue=false)]
        public GroupName Group { get; set; }

        /// <summary>
        /// The ID of the notification.
        /// </summary>
        /// <value>The ID of the notification.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }


        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        /// <value>Identifies the recipients of the notification.</value>
        [TypeConverter(typeof(CustomEnumConverter<NotificationTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NotificationTypeEnum
        {
            
            /// <summary>
            /// Enum CurrentAssigneeEnum for CurrentAssignee
            /// </summary>
            [EnumMember(Value = "CurrentAssignee")]
            CurrentAssigneeEnum = 1,
            
            /// <summary>
            /// Enum ReporterEnum for Reporter
            /// </summary>
            [EnumMember(Value = "Reporter")]
            ReporterEnum = 2,
            
            /// <summary>
            /// Enum CurrentUserEnum for CurrentUser
            /// </summary>
            [EnumMember(Value = "CurrentUser")]
            CurrentUserEnum = 3,
            
            /// <summary>
            /// Enum ProjectLeadEnum for ProjectLead
            /// </summary>
            [EnumMember(Value = "ProjectLead")]
            ProjectLeadEnum = 4,
            
            /// <summary>
            /// Enum ComponentLeadEnum for ComponentLead
            /// </summary>
            [EnumMember(Value = "ComponentLead")]
            ComponentLeadEnum = 5,
            
            /// <summary>
            /// Enum UserEnum for User
            /// </summary>
            [EnumMember(Value = "User")]
            UserEnum = 6,
            
            /// <summary>
            /// Enum GroupEnum for Group
            /// </summary>
            [EnumMember(Value = "Group")]
            GroupEnum = 7,
            
            /// <summary>
            /// Enum ProjectRoleEnum for ProjectRole
            /// </summary>
            [EnumMember(Value = "ProjectRole")]
            ProjectRoleEnum = 8,
            
            /// <summary>
            /// Enum EmailAddressEnum for EmailAddress
            /// </summary>
            [EnumMember(Value = "EmailAddress")]
            EmailAddressEnum = 9,
            
            /// <summary>
            /// Enum AllWatchersEnum for AllWatchers
            /// </summary>
            [EnumMember(Value = "AllWatchers")]
            AllWatchersEnum = 10,
            
            /// <summary>
            /// Enum UserCustomFieldEnum for UserCustomField
            /// </summary>
            [EnumMember(Value = "UserCustomField")]
            UserCustomFieldEnum = 11,
            
            /// <summary>
            /// Enum GroupCustomFieldEnum for GroupCustomField
            /// </summary>
            [EnumMember(Value = "GroupCustomField")]
            GroupCustomFieldEnum = 12
        }

        /// <summary>
        /// Identifies the recipients of the notification.
        /// </summary>
        /// <value>Identifies the recipients of the notification.</value>
        [DataMember(Name="notificationType", EmitDefaultValue=true)]
        public NotificationTypeEnum NotificationType { get; set; }

        /// <summary>
        /// As a group&#39;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.
        /// </summary>
        /// <value>As a group&#39;s name can change, use of &#x60;recipient&#x60; is recommended. The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60; The &#x60;parameter&#x60; is the user account ID.  *  &#x60;Group&#x60; The &#x60;parameter&#x60; is the group name.  *  &#x60;ProjectRole&#x60; The &#x60;parameter&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60; The &#x60;parameter&#x60; is the ID of the custom field.</value>
        [DataMember(Name="parameter", EmitDefaultValue=false)]
        public string VarParameter { get; set; }

        /// <summary>
        /// Gets or Sets ProjectRole
        /// </summary>
        [DataMember(Name="projectRole", EmitDefaultValue=false)]
        public ProjectRole ProjectRole { get; set; }

        /// <summary>
        /// The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.
        /// </summary>
        /// <value>The identifier associated with the &#x60;notificationType&#x60; value that defines the receiver of the notification, where the receiver isn&#39;t implied by the &#x60;notificationType&#x60; value. So, when &#x60;notificationType&#x60; is:   *  &#x60;User&#x60;, &#x60;recipient&#x60; is the user account ID.  *  &#x60;Group&#x60;, &#x60;recipient&#x60; is the group ID.  *  &#x60;ProjectRole&#x60;, &#x60;recipient&#x60; is the project role ID.  *  &#x60;UserCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.  *  &#x60;GroupCustomField&#x60;, &#x60;recipient&#x60; is the ID of the custom field.</value>
        [DataMember(Name="recipient", EmitDefaultValue=false)]
        public string Recipient { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserDetails User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventNotification {\n");
            sb.Append("  EmailAddress: ").Append(EmailAddress).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Field: ").Append(Field).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  NotificationType: ").Append(NotificationType).Append("\n");
            sb.Append("  VarParameter: ").Append(VarParameter).Append("\n");
            sb.Append("  ProjectRole: ").Append(ProjectRole).Append("\n");
            sb.Append("  Recipient: ").Append(Recipient).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventNotification)obj);
        }

        /// <summary>
        /// Returns true if EventNotification instances are equal
        /// </summary>
        /// <param name="other">Instance of EventNotification to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventNotification other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EmailAddress == other.EmailAddress ||
                    EmailAddress != null &&
                    EmailAddress.Equals(other.EmailAddress)
                ) && 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Field == other.Field ||
                    Field != null &&
                    Field.Equals(other.Field)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    NotificationType == other.NotificationType ||
                    
                    NotificationType.Equals(other.NotificationType)
                ) && 
                (
                    VarParameter == other.VarParameter ||
                    VarParameter != null &&
                    VarParameter.Equals(other.VarParameter)
                ) && 
                (
                    ProjectRole == other.ProjectRole ||
                    ProjectRole != null &&
                    ProjectRole.Equals(other.ProjectRole)
                ) && 
                (
                    Recipient == other.Recipient ||
                    Recipient != null &&
                    Recipient.Equals(other.Recipient)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EmailAddress != null)
                    hashCode = hashCode * 59 + EmailAddress.GetHashCode();
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    if (Field != null)
                    hashCode = hashCode * 59 + Field.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + NotificationType.GetHashCode();
                    if (VarParameter != null)
                    hashCode = hashCode * 59 + VarParameter.GetHashCode();
                    if (ProjectRole != null)
                    hashCode = hashCode * 59 + ProjectRole.GetHashCode();
                    if (Recipient != null)
                    hashCode = hashCode * 59 + Recipient.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventNotification left, EventNotification right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventNotification left, EventNotification right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
