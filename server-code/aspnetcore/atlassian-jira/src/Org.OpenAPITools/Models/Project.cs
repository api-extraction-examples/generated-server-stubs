/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a project.
    /// </summary>
    [DataContract]
    public partial class Project : IEquatable<Project>
    {
        /// <summary>
        /// Whether the project is archived.
        /// </summary>
        /// <value>Whether the project is archived.</value>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets ArchivedBy
        /// </summary>
        [DataMember(Name="archivedBy", EmitDefaultValue=false)]
        public ProjectArchivedBy ArchivedBy { get; set; }

        /// <summary>
        /// The date when the project was archived.
        /// </summary>
        /// <value>The date when the project was archived.</value>
        [DataMember(Name="archivedDate", EmitDefaultValue=false)]
        public DateTime ArchivedDate { get; set; }


        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        /// <value>The default assignee when creating issues for this project.</value>
        [TypeConverter(typeof(CustomEnumConverter<AssigneeTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AssigneeTypeEnum
        {
            
            /// <summary>
            /// Enum PROJECTLEADEnum for PROJECT_LEAD
            /// </summary>
            [EnumMember(Value = "PROJECT_LEAD")]
            PROJECTLEADEnum = 1,
            
            /// <summary>
            /// Enum UNASSIGNEDEnum for UNASSIGNED
            /// </summary>
            [EnumMember(Value = "UNASSIGNED")]
            UNASSIGNEDEnum = 2
        }

        /// <summary>
        /// The default assignee when creating issues for this project.
        /// </summary>
        /// <value>The default assignee when creating issues for this project.</value>
        [DataMember(Name="assigneeType", EmitDefaultValue=true)]
        public AssigneeTypeEnum AssigneeType { get; set; }

        /// <summary>
        /// Gets or Sets AvatarUrls
        /// </summary>
        [DataMember(Name="avatarUrls", EmitDefaultValue=false)]
        public ProjectAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// List of the components contained in the project.
        /// </summary>
        /// <value>List of the components contained in the project.</value>
        [DataMember(Name="components", EmitDefaultValue=false)]
        public List<ProjectComponent> Components { get; set; }

        /// <summary>
        /// Whether the project is marked as deleted.
        /// </summary>
        /// <value>Whether the project is marked as deleted.</value>
        [DataMember(Name="deleted", EmitDefaultValue=true)]
        public bool Deleted { get; set; }

        /// <summary>
        /// Gets or Sets DeletedBy
        /// </summary>
        [DataMember(Name="deletedBy", EmitDefaultValue=false)]
        public ProjectDeletedBy DeletedBy { get; set; }

        /// <summary>
        /// The date when the project was marked as deleted.
        /// </summary>
        /// <value>The date when the project was marked as deleted.</value>
        [DataMember(Name="deletedDate", EmitDefaultValue=false)]
        public DateTime DeletedDate { get; set; }

        /// <summary>
        /// A brief description of the project.
        /// </summary>
        /// <value>A brief description of the project.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// An email address associated with the project.
        /// </summary>
        /// <value>An email address associated with the project.</value>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Expand options that include additional project details in the response.
        /// </summary>
        /// <value>Expand options that include additional project details in the response.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// Whether the project is selected as a favorite.
        /// </summary>
        /// <value>Whether the project is selected as a favorite.</value>
        [DataMember(Name="favourite", EmitDefaultValue=true)]
        public bool Favourite { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Insight
        /// </summary>
        [DataMember(Name="insight", EmitDefaultValue=false)]
        public ProjectInsight Insight { get; set; }

        /// <summary>
        /// Whether the project is private.
        /// </summary>
        /// <value>Whether the project is private.</value>
        [DataMember(Name="isPrivate", EmitDefaultValue=true)]
        public bool IsPrivate { get; set; }

        /// <summary>
        /// Gets or Sets IssueTypeHierarchy
        /// </summary>
        [DataMember(Name="issueTypeHierarchy", EmitDefaultValue=false)]
        public ProjectIssueTypeHierarchy IssueTypeHierarchy { get; set; }

        /// <summary>
        /// List of the issue types available in the project.
        /// </summary>
        /// <value>List of the issue types available in the project.</value>
        [DataMember(Name="issueTypes", EmitDefaultValue=false)]
        public List<IssueTypeDetails> IssueTypes { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        /// <value>The key of the project.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets LandingPageInfo
        /// </summary>
        [DataMember(Name="landingPageInfo", EmitDefaultValue=false)]
        public ProjectLandingPageInfo LandingPageInfo { get; set; }

        /// <summary>
        /// Gets or Sets Lead
        /// </summary>
        [DataMember(Name="lead", EmitDefaultValue=false)]
        public ProjectLead Lead { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Permissions
        /// </summary>
        [DataMember(Name="permissions", EmitDefaultValue=false)]
        public ProjectPermissions Permissions { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCategory
        /// </summary>
        [DataMember(Name="projectCategory", EmitDefaultValue=false)]
        public ProjectProjectCategory ProjectCategory { get; set; }


        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [TypeConverter(typeof(CustomEnumConverter<ProjectTypeKeyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProjectTypeKeyEnum
        {
            
            /// <summary>
            /// Enum SoftwareEnum for software
            /// </summary>
            [EnumMember(Value = "software")]
            SoftwareEnum = 1,
            
            /// <summary>
            /// Enum ServiceDeskEnum for service_desk
            /// </summary>
            [EnumMember(Value = "service_desk")]
            ServiceDeskEnum = 2,
            
            /// <summary>
            /// Enum BusinessEnum for business
            /// </summary>
            [EnumMember(Value = "business")]
            BusinessEnum = 3
        }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [DataMember(Name="projectTypeKey", EmitDefaultValue=true)]
        public ProjectTypeKeyEnum ProjectTypeKey { get; set; }

        /// <summary>
        /// Map of project properties
        /// </summary>
        /// <value>Map of project properties</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, Object> Properties { get; set; }

        /// <summary>
        /// The date when the project is deleted permanently.
        /// </summary>
        /// <value>The date when the project is deleted permanently.</value>
        [DataMember(Name="retentionTillDate", EmitDefaultValue=false)]
        public DateTime RetentionTillDate { get; set; }

        /// <summary>
        /// The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).
        /// </summary>
        /// <value>The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).</value>
        [DataMember(Name="roles", EmitDefaultValue=false)]
        public Dictionary<string, string> Roles { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        /// <value>The URL of the project details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Whether the project is simplified.
        /// </summary>
        /// <value>Whether the project is simplified.</value>
        [DataMember(Name="simplified", EmitDefaultValue=true)]
        public bool Simplified { get; set; }


        /// <summary>
        /// The type of the project.
        /// </summary>
        /// <value>The type of the project.</value>
        [TypeConverter(typeof(CustomEnumConverter<StyleEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StyleEnum
        {
            
            /// <summary>
            /// Enum ClassicEnum for classic
            /// </summary>
            [EnumMember(Value = "classic")]
            ClassicEnum = 1,
            
            /// <summary>
            /// Enum NextGenEnum for next-gen
            /// </summary>
            [EnumMember(Value = "next-gen")]
            NextGenEnum = 2
        }

        /// <summary>
        /// The type of the project.
        /// </summary>
        /// <value>The type of the project.</value>
        [DataMember(Name="style", EmitDefaultValue=true)]
        public StyleEnum Style { get; set; }

        /// <summary>
        /// A link to information about this project, such as project documentation.
        /// </summary>
        /// <value>A link to information about this project, such as project documentation.</value>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Unique ID for next-gen projects.
        /// </summary>
        /// <value>Unique ID for next-gen projects.</value>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public Guid Uuid { get; set; }

        /// <summary>
        /// The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).
        /// </summary>
        /// <value>The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).</value>
        [DataMember(Name="versions", EmitDefaultValue=false)]
        public List<ModelVersion> Versions { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ArchivedBy: ").Append(ArchivedBy).Append("\n");
            sb.Append("  ArchivedDate: ").Append(ArchivedDate).Append("\n");
            sb.Append("  AssigneeType: ").Append(AssigneeType).Append("\n");
            sb.Append("  AvatarUrls: ").Append(AvatarUrls).Append("\n");
            sb.Append("  Components: ").Append(Components).Append("\n");
            sb.Append("  Deleted: ").Append(Deleted).Append("\n");
            sb.Append("  DeletedBy: ").Append(DeletedBy).Append("\n");
            sb.Append("  DeletedDate: ").Append(DeletedDate).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Favourite: ").Append(Favourite).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Insight: ").Append(Insight).Append("\n");
            sb.Append("  IsPrivate: ").Append(IsPrivate).Append("\n");
            sb.Append("  IssueTypeHierarchy: ").Append(IssueTypeHierarchy).Append("\n");
            sb.Append("  IssueTypes: ").Append(IssueTypes).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  LandingPageInfo: ").Append(LandingPageInfo).Append("\n");
            sb.Append("  Lead: ").Append(Lead).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Permissions: ").Append(Permissions).Append("\n");
            sb.Append("  ProjectCategory: ").Append(ProjectCategory).Append("\n");
            sb.Append("  ProjectTypeKey: ").Append(ProjectTypeKey).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  RetentionTillDate: ").Append(RetentionTillDate).Append("\n");
            sb.Append("  Roles: ").Append(Roles).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Simplified: ").Append(Simplified).Append("\n");
            sb.Append("  Style: ").Append(Style).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("  Versions: ").Append(Versions).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Project)obj);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="other">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    ArchivedBy == other.ArchivedBy ||
                    ArchivedBy != null &&
                    ArchivedBy.Equals(other.ArchivedBy)
                ) && 
                (
                    ArchivedDate == other.ArchivedDate ||
                    ArchivedDate != null &&
                    ArchivedDate.Equals(other.ArchivedDate)
                ) && 
                (
                    AssigneeType == other.AssigneeType ||
                    
                    AssigneeType.Equals(other.AssigneeType)
                ) && 
                (
                    AvatarUrls == other.AvatarUrls ||
                    AvatarUrls != null &&
                    AvatarUrls.Equals(other.AvatarUrls)
                ) && 
                (
                    Components == other.Components ||
                    Components != null &&
                    other.Components != null &&
                    Components.SequenceEqual(other.Components)
                ) && 
                (
                    Deleted == other.Deleted ||
                    
                    Deleted.Equals(other.Deleted)
                ) && 
                (
                    DeletedBy == other.DeletedBy ||
                    DeletedBy != null &&
                    DeletedBy.Equals(other.DeletedBy)
                ) && 
                (
                    DeletedDate == other.DeletedDate ||
                    DeletedDate != null &&
                    DeletedDate.Equals(other.DeletedDate)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Favourite == other.Favourite ||
                    
                    Favourite.Equals(other.Favourite)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Insight == other.Insight ||
                    Insight != null &&
                    Insight.Equals(other.Insight)
                ) && 
                (
                    IsPrivate == other.IsPrivate ||
                    
                    IsPrivate.Equals(other.IsPrivate)
                ) && 
                (
                    IssueTypeHierarchy == other.IssueTypeHierarchy ||
                    IssueTypeHierarchy != null &&
                    IssueTypeHierarchy.Equals(other.IssueTypeHierarchy)
                ) && 
                (
                    IssueTypes == other.IssueTypes ||
                    IssueTypes != null &&
                    other.IssueTypes != null &&
                    IssueTypes.SequenceEqual(other.IssueTypes)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    LandingPageInfo == other.LandingPageInfo ||
                    LandingPageInfo != null &&
                    LandingPageInfo.Equals(other.LandingPageInfo)
                ) && 
                (
                    Lead == other.Lead ||
                    Lead != null &&
                    Lead.Equals(other.Lead)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Permissions == other.Permissions ||
                    Permissions != null &&
                    Permissions.Equals(other.Permissions)
                ) && 
                (
                    ProjectCategory == other.ProjectCategory ||
                    ProjectCategory != null &&
                    ProjectCategory.Equals(other.ProjectCategory)
                ) && 
                (
                    ProjectTypeKey == other.ProjectTypeKey ||
                    
                    ProjectTypeKey.Equals(other.ProjectTypeKey)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    other.Properties != null &&
                    Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    RetentionTillDate == other.RetentionTillDate ||
                    RetentionTillDate != null &&
                    RetentionTillDate.Equals(other.RetentionTillDate)
                ) && 
                (
                    Roles == other.Roles ||
                    Roles != null &&
                    other.Roles != null &&
                    Roles.SequenceEqual(other.Roles)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Simplified == other.Simplified ||
                    
                    Simplified.Equals(other.Simplified)
                ) && 
                (
                    Style == other.Style ||
                    
                    Style.Equals(other.Style)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                ) && 
                (
                    Versions == other.Versions ||
                    Versions != null &&
                    other.Versions != null &&
                    Versions.SequenceEqual(other.Versions)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (ArchivedBy != null)
                    hashCode = hashCode * 59 + ArchivedBy.GetHashCode();
                    if (ArchivedDate != null)
                    hashCode = hashCode * 59 + ArchivedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssigneeType.GetHashCode();
                    if (AvatarUrls != null)
                    hashCode = hashCode * 59 + AvatarUrls.GetHashCode();
                    if (Components != null)
                    hashCode = hashCode * 59 + Components.GetHashCode();
                    
                    hashCode = hashCode * 59 + Deleted.GetHashCode();
                    if (DeletedBy != null)
                    hashCode = hashCode * 59 + DeletedBy.GetHashCode();
                    if (DeletedDate != null)
                    hashCode = hashCode * 59 + DeletedDate.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    
                    hashCode = hashCode * 59 + Favourite.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Insight != null)
                    hashCode = hashCode * 59 + Insight.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPrivate.GetHashCode();
                    if (IssueTypeHierarchy != null)
                    hashCode = hashCode * 59 + IssueTypeHierarchy.GetHashCode();
                    if (IssueTypes != null)
                    hashCode = hashCode * 59 + IssueTypes.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (LandingPageInfo != null)
                    hashCode = hashCode * 59 + LandingPageInfo.GetHashCode();
                    if (Lead != null)
                    hashCode = hashCode * 59 + Lead.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Permissions != null)
                    hashCode = hashCode * 59 + Permissions.GetHashCode();
                    if (ProjectCategory != null)
                    hashCode = hashCode * 59 + ProjectCategory.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectTypeKey.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                    if (RetentionTillDate != null)
                    hashCode = hashCode * 59 + RetentionTillDate.GetHashCode();
                    if (Roles != null)
                    hashCode = hashCode * 59 + Roles.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    
                    hashCode = hashCode * 59 + Simplified.GetHashCode();
                    
                    hashCode = hashCode * 59 + Style.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                    if (Versions != null)
                    hashCode = hashCode * 59 + Versions.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Project left, Project right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Project left, Project right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
