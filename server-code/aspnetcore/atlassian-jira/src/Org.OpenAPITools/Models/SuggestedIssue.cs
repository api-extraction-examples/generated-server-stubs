/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An issue suggested for use in the issue picker auto-completion.
    /// </summary>
    [DataContract]
    public partial class SuggestedIssue : IEquatable<SuggestedIssue>
    {
        /// <summary>
        /// The ID of the issue.
        /// </summary>
        /// <value>The ID of the issue.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// The URL of the issue type&#39;s avatar.
        /// </summary>
        /// <value>The URL of the issue type&#39;s avatar.</value>
        [DataMember(Name="img", EmitDefaultValue=false)]
        public string Img { get; set; }

        /// <summary>
        /// The key of the issue.
        /// </summary>
        /// <value>The key of the issue.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The key of the issue in HTML format.
        /// </summary>
        /// <value>The key of the issue in HTML format.</value>
        [DataMember(Name="keyHtml", EmitDefaultValue=false)]
        public string KeyHtml { get; set; }

        /// <summary>
        /// The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.
        /// </summary>
        /// <value>The phrase containing the query string in HTML format, with the string highlighted with HTML bold tags.</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// The phrase containing the query string, as plain text.
        /// </summary>
        /// <value>The phrase containing the query string, as plain text.</value>
        [DataMember(Name="summaryText", EmitDefaultValue=false)]
        public string SummaryText { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SuggestedIssue {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Img: ").Append(Img).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  KeyHtml: ").Append(KeyHtml).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("  SummaryText: ").Append(SummaryText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SuggestedIssue)obj);
        }

        /// <summary>
        /// Returns true if SuggestedIssue instances are equal
        /// </summary>
        /// <param name="other">Instance of SuggestedIssue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SuggestedIssue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Img == other.Img ||
                    Img != null &&
                    Img.Equals(other.Img)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    KeyHtml == other.KeyHtml ||
                    KeyHtml != null &&
                    KeyHtml.Equals(other.KeyHtml)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.Equals(other.Summary)
                ) && 
                (
                    SummaryText == other.SummaryText ||
                    SummaryText != null &&
                    SummaryText.Equals(other.SummaryText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Img != null)
                    hashCode = hashCode * 59 + Img.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (KeyHtml != null)
                    hashCode = hashCode * 59 + KeyHtml.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                    if (SummaryText != null)
                    hashCode = hashCode * 59 + SummaryText.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SuggestedIssue left, SuggestedIssue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SuggestedIssue left, SuggestedIssue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
