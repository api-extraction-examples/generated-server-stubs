/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a project version.
    /// </summary>
    [DataContract]
    public partial class ModelVersion : IEquatable<ModelVersion>
    {
        /// <summary>
        /// Indicates that the version is archived. Optional when creating or updating a version.
        /// </summary>
        /// <value>Indicates that the version is archived. Optional when creating or updating a version.</value>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// The description of the version. Optional when creating or updating a version.
        /// </summary>
        /// <value>The description of the version. Optional when creating or updating a version.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.
        /// </summary>
        /// <value>Use [expand](em&gt;#expansion) to include additional information about version in the response. This parameter accepts a comma-separated list. Expand options include:   *  &#x60;operations&#x60; Returns the list of operations available for this version.  *  &#x60;issuesstatus&#x60; Returns the count of issues in this version for each of the status categories *to do*, *in progress*, *done*, and *unmapped*. The *unmapped* property contains a count of issues with a status other than *to do*, *in progress*, and *done*.  Optional for create and update.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// The ID of the version.
        /// </summary>
        /// <value>The ID of the version.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets IssuesStatusForFixVersion
        /// </summary>
        [DataMember(Name="issuesStatusForFixVersion", EmitDefaultValue=false)]
        public VersionIssuesStatusForFixVersion IssuesStatusForFixVersion { get; set; }

        /// <summary>
        /// The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        /// <value>The URL of the self link to the version to which all unfixed issues are moved when a version is released. Not applicable when creating a version. Optional when updating a version.</value>
        [DataMember(Name="moveUnfixedIssuesTo", EmitDefaultValue=false)]
        public string MoveUnfixedIssuesTo { get; set; }

        /// <summary>
        /// The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.
        /// </summary>
        /// <value>The unique name of the version. Required when creating a version. Optional when updating a version. The maximum length is 255 characters.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version.
        /// </summary>
        /// <value>If the expand option &#x60;operations&#x60; is used, returns the list of operations available for this version.</value>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public List<SimpleLink> Operations { get; set; }

        /// <summary>
        /// Indicates that the version is overdue.
        /// </summary>
        /// <value>Indicates that the version is overdue.</value>
        [DataMember(Name="overdue", EmitDefaultValue=true)]
        public bool Overdue { get; set; }

        /// <summary>
        /// Deprecated. Use &#x60;projectId&#x60;.
        /// </summary>
        /// <value>Deprecated. Use &#x60;projectId&#x60;.</value>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public string Project { get; set; }

        /// <summary>
        /// The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.
        /// </summary>
        /// <value>The ID of the project to which this version is attached. Required when creating a version. Not applicable when updating a version.</value>
        [DataMember(Name="projectId", EmitDefaultValue=true)]
        public long ProjectId { get; set; }

        /// <summary>
        /// The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        /// <value>The release date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</value>
        [DataMember(Name="releaseDate", EmitDefaultValue=false)]
        public DateTime ReleaseDate { get; set; }

        /// <summary>
        /// Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.
        /// </summary>
        /// <value>Indicates that the version is released. If the version is released a request to release again is ignored. Not applicable when creating a version. Optional when updating a version.</value>
        [DataMember(Name="released", EmitDefaultValue=true)]
        public bool Released { get; set; }

        /// <summary>
        /// The URL of the version.
        /// </summary>
        /// <value>The URL of the version.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.
        /// </summary>
        /// <value>The start date of the version. Expressed in ISO 8601 format (yyyy-mm-dd). Optional when creating or updating a version.</value>
        [DataMember(Name="startDate", EmitDefaultValue=false)]
        public DateTime StartDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format.
        /// </summary>
        /// <value>The date on which work on this version is expected to finish, expressed in the instance&#39;s *Day/Month/Year Format* date format.</value>
        [DataMember(Name="userReleaseDate", EmitDefaultValue=false)]
        public string UserReleaseDate { get; set; }

        /// <summary>
        /// The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format.
        /// </summary>
        /// <value>The date on which work on this version is expected to start, expressed in the instance&#39;s *Day/Month/Year Format* date format.</value>
        [DataMember(Name="userStartDate", EmitDefaultValue=false)]
        public string UserStartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelVersion {\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IssuesStatusForFixVersion: ").Append(IssuesStatusForFixVersion).Append("\n");
            sb.Append("  MoveUnfixedIssuesTo: ").Append(MoveUnfixedIssuesTo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Overdue: ").Append(Overdue).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ReleaseDate: ").Append(ReleaseDate).Append("\n");
            sb.Append("  Released: ").Append(Released).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  StartDate: ").Append(StartDate).Append("\n");
            sb.Append("  UserReleaseDate: ").Append(UserReleaseDate).Append("\n");
            sb.Append("  UserStartDate: ").Append(UserStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelVersion)obj);
        }

        /// <summary>
        /// Returns true if ModelVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelVersion other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IssuesStatusForFixVersion == other.IssuesStatusForFixVersion ||
                    IssuesStatusForFixVersion != null &&
                    IssuesStatusForFixVersion.Equals(other.IssuesStatusForFixVersion)
                ) && 
                (
                    MoveUnfixedIssuesTo == other.MoveUnfixedIssuesTo ||
                    MoveUnfixedIssuesTo != null &&
                    MoveUnfixedIssuesTo.Equals(other.MoveUnfixedIssuesTo)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Operations == other.Operations ||
                    Operations != null &&
                    other.Operations != null &&
                    Operations.SequenceEqual(other.Operations)
                ) && 
                (
                    Overdue == other.Overdue ||
                    
                    Overdue.Equals(other.Overdue)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    ReleaseDate == other.ReleaseDate ||
                    ReleaseDate != null &&
                    ReleaseDate.Equals(other.ReleaseDate)
                ) && 
                (
                    Released == other.Released ||
                    
                    Released.Equals(other.Released)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    StartDate == other.StartDate ||
                    StartDate != null &&
                    StartDate.Equals(other.StartDate)
                ) && 
                (
                    UserReleaseDate == other.UserReleaseDate ||
                    UserReleaseDate != null &&
                    UserReleaseDate.Equals(other.UserReleaseDate)
                ) && 
                (
                    UserStartDate == other.UserStartDate ||
                    UserStartDate != null &&
                    UserStartDate.Equals(other.UserStartDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (IssuesStatusForFixVersion != null)
                    hashCode = hashCode * 59 + IssuesStatusForFixVersion.GetHashCode();
                    if (MoveUnfixedIssuesTo != null)
                    hashCode = hashCode * 59 + MoveUnfixedIssuesTo.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Operations != null)
                    hashCode = hashCode * 59 + Operations.GetHashCode();
                    
                    hashCode = hashCode * 59 + Overdue.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (ReleaseDate != null)
                    hashCode = hashCode * 59 + ReleaseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Released.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    if (StartDate != null)
                    hashCode = hashCode * 59 + StartDate.GetHashCode();
                    if (UserReleaseDate != null)
                    hashCode = hashCode * 59 + UserReleaseDate.GetHashCode();
                    if (UserStartDate != null)
                    hashCode = hashCode * 59 + UserStartDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelVersion left, ModelVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelVersion left, ModelVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
