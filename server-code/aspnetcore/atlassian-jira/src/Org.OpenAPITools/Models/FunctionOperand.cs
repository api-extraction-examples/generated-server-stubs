/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An operand that is a function. See [Advanced searching - functions reference](https://confluence.atlassian.com/x/dwiiLQ) for more information about JQL functions.
    /// </summary>
    [DataContract]
    public partial class FunctionOperand : IEquatable<FunctionOperand>
    {
        /// <summary>
        /// The list of function arguments.
        /// </summary>
        /// <value>The list of function arguments.</value>
        [Required]
        [DataMember(Name="arguments", EmitDefaultValue=false)]
        public List<string> Arguments { get; set; }

        /// <summary>
        /// Encoded operand, which can be used directly in a JQL query.
        /// </summary>
        /// <value>Encoded operand, which can be used directly in a JQL query.</value>
        [DataMember(Name="encodedOperand", EmitDefaultValue=false)]
        public string EncodedOperand { get; set; }

        /// <summary>
        /// The name of the function.
        /// </summary>
        /// <value>The name of the function.</value>
        [Required]
        [DataMember(Name="function", EmitDefaultValue=false)]
        public string Function { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FunctionOperand {\n");
            sb.Append("  Arguments: ").Append(Arguments).Append("\n");
            sb.Append("  EncodedOperand: ").Append(EncodedOperand).Append("\n");
            sb.Append("  Function: ").Append(Function).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FunctionOperand)obj);
        }

        /// <summary>
        /// Returns true if FunctionOperand instances are equal
        /// </summary>
        /// <param name="other">Instance of FunctionOperand to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FunctionOperand other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Arguments == other.Arguments ||
                    Arguments != null &&
                    other.Arguments != null &&
                    Arguments.SequenceEqual(other.Arguments)
                ) && 
                (
                    EncodedOperand == other.EncodedOperand ||
                    EncodedOperand != null &&
                    EncodedOperand.Equals(other.EncodedOperand)
                ) && 
                (
                    Function == other.Function ||
                    Function != null &&
                    Function.Equals(other.Function)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Arguments != null)
                    hashCode = hashCode * 59 + Arguments.GetHashCode();
                    if (EncodedOperand != null)
                    hashCode = hashCode * 59 + EncodedOperand.GetHashCode();
                    if (Function != null)
                    hashCode = hashCode * 59 + Function.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FunctionOperand left, FunctionOperand right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FunctionOperand left, FunctionOperand right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
