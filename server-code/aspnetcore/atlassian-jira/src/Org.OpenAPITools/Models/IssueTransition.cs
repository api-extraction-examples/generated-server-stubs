/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of an issue transition.
    /// </summary>
    [DataContract]
    public partial class IssueTransition : IEquatable<IssueTransition>
    {
        /// <summary>
        /// Expand options that include additional transition details in the response.
        /// </summary>
        /// <value>Expand options that include additional transition details in the response.</value>
        [DataMember(Name="expand", EmitDefaultValue=false)]
        public string Expand { get; set; }

        /// <summary>
        /// Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.
        /// </summary>
        /// <value>Details of the fields associated with the issue transition screen. Use this information to populate &#x60;fields&#x60; and &#x60;update&#x60; in a transition request.</value>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public Dictionary<string, FieldMetadata> Fields { get; set; }

        /// <summary>
        /// Whether there is a screen associated with the issue transition.
        /// </summary>
        /// <value>Whether there is a screen associated with the issue transition.</value>
        [DataMember(Name="hasScreen", EmitDefaultValue=true)]
        public bool HasScreen { get; set; }

        /// <summary>
        /// The ID of the issue transition. Required when specifying a transition to undertake.
        /// </summary>
        /// <value>The ID of the issue transition. Required when specifying a transition to undertake.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the transition is available to be performed.
        /// </summary>
        /// <value>Whether the transition is available to be performed.</value>
        [DataMember(Name="isAvailable", EmitDefaultValue=true)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// Whether the issue has to meet criteria before the issue transition is applied.
        /// </summary>
        /// <value>Whether the issue has to meet criteria before the issue transition is applied.</value>
        [DataMember(Name="isConditional", EmitDefaultValue=true)]
        public bool IsConditional { get; set; }

        /// <summary>
        /// Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.
        /// </summary>
        /// <value>Whether the issue transition is global, that is, the transition is applied to issues regardless of their status.</value>
        [DataMember(Name="isGlobal", EmitDefaultValue=true)]
        public bool IsGlobal { get; set; }

        /// <summary>
        /// Whether this is the initial issue transition for the workflow.
        /// </summary>
        /// <value>Whether this is the initial issue transition for the workflow.</value>
        [DataMember(Name="isInitial", EmitDefaultValue=true)]
        public bool IsInitial { get; set; }

        /// <summary>
        /// Gets or Sets Looped
        /// </summary>
        [DataMember(Name="looped", EmitDefaultValue=true)]
        public bool Looped { get; set; }

        /// <summary>
        /// The name of the issue transition.
        /// </summary>
        /// <value>The name of the issue transition.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="to", EmitDefaultValue=false)]
        public IssueTransitionTo To { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueTransition {\n");
            sb.Append("  Expand: ").Append(Expand).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  HasScreen: ").Append(HasScreen).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  IsConditional: ").Append(IsConditional).Append("\n");
            sb.Append("  IsGlobal: ").Append(IsGlobal).Append("\n");
            sb.Append("  IsInitial: ").Append(IsInitial).Append("\n");
            sb.Append("  Looped: ").Append(Looped).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueTransition)obj);
        }

        /// <summary>
        /// Returns true if IssueTransition instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueTransition to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueTransition other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Expand == other.Expand ||
                    Expand != null &&
                    Expand.Equals(other.Expand)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    HasScreen == other.HasScreen ||
                    
                    HasScreen.Equals(other.HasScreen)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsAvailable == other.IsAvailable ||
                    
                    IsAvailable.Equals(other.IsAvailable)
                ) && 
                (
                    IsConditional == other.IsConditional ||
                    
                    IsConditional.Equals(other.IsConditional)
                ) && 
                (
                    IsGlobal == other.IsGlobal ||
                    
                    IsGlobal.Equals(other.IsGlobal)
                ) && 
                (
                    IsInitial == other.IsInitial ||
                    
                    IsInitial.Equals(other.IsInitial)
                ) && 
                (
                    Looped == other.Looped ||
                    
                    Looped.Equals(other.Looped)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Expand != null)
                    hashCode = hashCode * 59 + Expand.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasScreen.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAvailable.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsConditional.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsGlobal.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsInitial.GetHashCode();
                    
                    hashCode = hashCode * 59 + Looped.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueTransition left, IssueTransition right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueTransition left, IssueTransition right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
