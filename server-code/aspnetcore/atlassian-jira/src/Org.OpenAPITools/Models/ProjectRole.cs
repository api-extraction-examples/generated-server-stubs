/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the roles in a project.
    /// </summary>
    [DataContract]
    public partial class ProjectRole : IEquatable<ProjectRole>
    {
        /// <summary>
        /// The list of users who act in this role.
        /// </summary>
        /// <value>The list of users who act in this role.</value>
        [DataMember(Name="actors", EmitDefaultValue=false)]
        public List<RoleActor> Actors { get; set; }

        /// <summary>
        /// Whether this role is the admin role for the project.
        /// </summary>
        /// <value>Whether this role is the admin role for the project.</value>
        [DataMember(Name="admin", EmitDefaultValue=true)]
        public bool Admin { get; set; }

        /// <summary>
        /// Whether the calling user is part of this role.
        /// </summary>
        /// <value>Whether the calling user is part of this role.</value>
        [DataMember(Name="currentUserRole", EmitDefaultValue=true)]
        public bool CurrentUserRole { get; set; }

        /// <summary>
        /// Whether this role is the default role for the project
        /// </summary>
        /// <value>Whether this role is the default role for the project</value>
        [DataMember(Name="default", EmitDefaultValue=true)]
        public bool VarDefault { get; set; }

        /// <summary>
        /// The description of the project role.
        /// </summary>
        /// <value>The description of the project role.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The ID of the project role.
        /// </summary>
        /// <value>The ID of the project role.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// The name of the project role.
        /// </summary>
        /// <value>The name of the project role.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the roles are configurable for this project.
        /// </summary>
        /// <value>Whether the roles are configurable for this project.</value>
        [DataMember(Name="roleConfigurable", EmitDefaultValue=true)]
        public bool RoleConfigurable { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public ProjectRoleScope Scope { get; set; }

        /// <summary>
        /// The URL the project role details.
        /// </summary>
        /// <value>The URL the project role details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// The translated name of the project role.
        /// </summary>
        /// <value>The translated name of the project role.</value>
        [DataMember(Name="translatedName", EmitDefaultValue=false)]
        public string TranslatedName { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectRole {\n");
            sb.Append("  Actors: ").Append(Actors).Append("\n");
            sb.Append("  Admin: ").Append(Admin).Append("\n");
            sb.Append("  CurrentUserRole: ").Append(CurrentUserRole).Append("\n");
            sb.Append("  VarDefault: ").Append(VarDefault).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  RoleConfigurable: ").Append(RoleConfigurable).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  TranslatedName: ").Append(TranslatedName).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectRole)obj);
        }

        /// <summary>
        /// Returns true if ProjectRole instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectRole to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectRole other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Actors == other.Actors ||
                    Actors != null &&
                    other.Actors != null &&
                    Actors.SequenceEqual(other.Actors)
                ) && 
                (
                    Admin == other.Admin ||
                    
                    Admin.Equals(other.Admin)
                ) && 
                (
                    CurrentUserRole == other.CurrentUserRole ||
                    
                    CurrentUserRole.Equals(other.CurrentUserRole)
                ) && 
                (
                    VarDefault == other.VarDefault ||
                    
                    VarDefault.Equals(other.VarDefault)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    RoleConfigurable == other.RoleConfigurable ||
                    
                    RoleConfigurable.Equals(other.RoleConfigurable)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.Equals(other.Scope)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    TranslatedName == other.TranslatedName ||
                    TranslatedName != null &&
                    TranslatedName.Equals(other.TranslatedName)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Actors != null)
                    hashCode = hashCode * 59 + Actors.GetHashCode();
                    
                    hashCode = hashCode * 59 + Admin.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentUserRole.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarDefault.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + RoleConfigurable.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    if (TranslatedName != null)
                    hashCode = hashCode * 59 + TranslatedName.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectRole left, ProjectRole right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectRole left, ProjectRole right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
