/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An ordered list of issue type IDs and information about where to move them.
    /// </summary>
    [DataContract]
    public partial class OrderOfIssueTypes : IEquatable<OrderOfIssueTypes>
    {
        /// <summary>
        /// The ID of the issue type to place the moved issue types after. Required if &#x60;position&#x60; isn&#39;t provided.
        /// </summary>
        /// <value>The ID of the issue type to place the moved issue types after. Required if &#x60;position&#x60; isn&#39;t provided.</value>
        [DataMember(Name="after", EmitDefaultValue=false)]
        public string After { get; set; }

        /// <summary>
        /// A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.
        /// </summary>
        /// <value>A list of the issue type IDs to move. The order of the issue type IDs in the list is the order they are given after the move.</value>
        [Required]
        [DataMember(Name="issueTypeIds", EmitDefaultValue=false)]
        public List<string> IssueTypeIds { get; set; }


        /// <summary>
        /// The position the issue types should be moved to. Required if `after` isn't provided.
        /// </summary>
        /// <value>The position the issue types should be moved to. Required if `after` isn't provided.</value>
        [TypeConverter(typeof(CustomEnumConverter<PositionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PositionEnum
        {
            
            /// <summary>
            /// Enum FirstEnum for First
            /// </summary>
            [EnumMember(Value = "First")]
            FirstEnum = 1,
            
            /// <summary>
            /// Enum LastEnum for Last
            /// </summary>
            [EnumMember(Value = "Last")]
            LastEnum = 2
        }

        /// <summary>
        /// The position the issue types should be moved to. Required if &#x60;after&#x60; isn&#39;t provided.
        /// </summary>
        /// <value>The position the issue types should be moved to. Required if &#x60;after&#x60; isn&#39;t provided.</value>
        [DataMember(Name="position", EmitDefaultValue=true)]
        public PositionEnum Position { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class OrderOfIssueTypes {\n");
            sb.Append("  After: ").Append(After).Append("\n");
            sb.Append("  IssueTypeIds: ").Append(IssueTypeIds).Append("\n");
            sb.Append("  Position: ").Append(Position).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((OrderOfIssueTypes)obj);
        }

        /// <summary>
        /// Returns true if OrderOfIssueTypes instances are equal
        /// </summary>
        /// <param name="other">Instance of OrderOfIssueTypes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(OrderOfIssueTypes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    After == other.After ||
                    After != null &&
                    After.Equals(other.After)
                ) && 
                (
                    IssueTypeIds == other.IssueTypeIds ||
                    IssueTypeIds != null &&
                    other.IssueTypeIds != null &&
                    IssueTypeIds.SequenceEqual(other.IssueTypeIds)
                ) && 
                (
                    Position == other.Position ||
                    
                    Position.Equals(other.Position)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (After != null)
                    hashCode = hashCode * 59 + After.GetHashCode();
                    if (IssueTypeIds != null)
                    hashCode = hashCode * 59 + IssueTypeIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + Position.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(OrderOfIssueTypes left, OrderOfIssueTypes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(OrderOfIssueTypes left, OrderOfIssueTypes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
