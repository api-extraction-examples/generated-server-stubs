/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a workflow.
    /// </summary>
    [DataContract]
    public partial class Workflow : IEquatable<Workflow>
    {
        /// <summary>
        /// The creation date of the workflow.
        /// </summary>
        /// <value>The creation date of the workflow.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The description of the workflow.
        /// </summary>
        /// <value>The description of the workflow.</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether the workflow has a draft version.
        /// </summary>
        /// <value>Whether the workflow has a draft version.</value>
        [DataMember(Name="hasDraftWorkflow", EmitDefaultValue=true)]
        public bool HasDraftWorkflow { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public PublishedWorkflowId Id { get; set; }

        /// <summary>
        /// Whether this is the default workflow.
        /// </summary>
        /// <value>Whether this is the default workflow.</value>
        [DataMember(Name="isDefault", EmitDefaultValue=true)]
        public bool IsDefault { get; set; }

        /// <summary>
        /// Gets or Sets Operations
        /// </summary>
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public WorkflowOperations Operations { get; set; }

        /// <summary>
        /// The projects the workflow is assigned to, through workflow schemes.
        /// </summary>
        /// <value>The projects the workflow is assigned to, through workflow schemes.</value>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<ProjectDetails> Projects { get; set; }

        /// <summary>
        /// The workflow schemes the workflow is assigned to.
        /// </summary>
        /// <value>The workflow schemes the workflow is assigned to.</value>
        [DataMember(Name="schemes", EmitDefaultValue=false)]
        public List<WorkflowSchemeIdName> Schemes { get; set; }

        /// <summary>
        /// The statuses of the workflow.
        /// </summary>
        /// <value>The statuses of the workflow.</value>
        [DataMember(Name="statuses", EmitDefaultValue=false)]
        public List<WorkflowStatus> Statuses { get; set; }

        /// <summary>
        /// The transitions of the workflow.
        /// </summary>
        /// <value>The transitions of the workflow.</value>
        [DataMember(Name="transitions", EmitDefaultValue=false)]
        public List<Transition> Transitions { get; set; }

        /// <summary>
        /// The last edited date of the workflow.
        /// </summary>
        /// <value>The last edited date of the workflow.</value>
        [DataMember(Name="updated", EmitDefaultValue=false)]
        public DateTime Updated { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Workflow {\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HasDraftWorkflow: ").Append(HasDraftWorkflow).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDefault: ").Append(IsDefault).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Schemes: ").Append(Schemes).Append("\n");
            sb.Append("  Statuses: ").Append(Statuses).Append("\n");
            sb.Append("  Transitions: ").Append(Transitions).Append("\n");
            sb.Append("  Updated: ").Append(Updated).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Workflow)obj);
        }

        /// <summary>
        /// Returns true if Workflow instances are equal
        /// </summary>
        /// <param name="other">Instance of Workflow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Workflow other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HasDraftWorkflow == other.HasDraftWorkflow ||
                    
                    HasDraftWorkflow.Equals(other.HasDraftWorkflow)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsDefault == other.IsDefault ||
                    
                    IsDefault.Equals(other.IsDefault)
                ) && 
                (
                    Operations == other.Operations ||
                    Operations != null &&
                    Operations.Equals(other.Operations)
                ) && 
                (
                    Projects == other.Projects ||
                    Projects != null &&
                    other.Projects != null &&
                    Projects.SequenceEqual(other.Projects)
                ) && 
                (
                    Schemes == other.Schemes ||
                    Schemes != null &&
                    other.Schemes != null &&
                    Schemes.SequenceEqual(other.Schemes)
                ) && 
                (
                    Statuses == other.Statuses ||
                    Statuses != null &&
                    other.Statuses != null &&
                    Statuses.SequenceEqual(other.Statuses)
                ) && 
                (
                    Transitions == other.Transitions ||
                    Transitions != null &&
                    other.Transitions != null &&
                    Transitions.SequenceEqual(other.Transitions)
                ) && 
                (
                    Updated == other.Updated ||
                    Updated != null &&
                    Updated.Equals(other.Updated)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasDraftWorkflow.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDefault.GetHashCode();
                    if (Operations != null)
                    hashCode = hashCode * 59 + Operations.GetHashCode();
                    if (Projects != null)
                    hashCode = hashCode * 59 + Projects.GetHashCode();
                    if (Schemes != null)
                    hashCode = hashCode * 59 + Schemes.GetHashCode();
                    if (Statuses != null)
                    hashCode = hashCode * 59 + Statuses.GetHashCode();
                    if (Transitions != null)
                    hashCode = hashCode * 59 + Transitions.GetHashCode();
                    if (Updated != null)
                    hashCode = hashCode * 59 + Updated.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Workflow left, Workflow right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Workflow left, Workflow right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
