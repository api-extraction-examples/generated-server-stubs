/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The details of a UI modification&#39;s context, which define where to activate the UI modification.
    /// </summary>
    [DataContract]
    public partial class UiModificationContextDetails : IEquatable<UiModificationContextDetails>
    {
        /// <summary>
        /// The ID of the UI modification context.
        /// </summary>
        /// <value>The ID of the UI modification context.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether a context is available. For example, when a project is deleted the context becomes unavailable.
        /// </summary>
        /// <value>Whether a context is available. For example, when a project is deleted the context becomes unavailable.</value>
        [DataMember(Name="isAvailable", EmitDefaultValue=true)]
        public bool IsAvailable { get; set; }

        /// <summary>
        /// The issue type ID of the context.
        /// </summary>
        /// <value>The issue type ID of the context.</value>
        [Required]
        [DataMember(Name="issueTypeId", EmitDefaultValue=false)]
        public string IssueTypeId { get; set; }

        /// <summary>
        /// The project ID of the context.
        /// </summary>
        /// <value>The project ID of the context.</value>
        [Required]
        [DataMember(Name="projectId", EmitDefaultValue=false)]
        public string ProjectId { get; set; }

        /// <summary>
        /// The view type of the context. Only &#x60;GIC&#x60; (Global Issue Create) is supported.
        /// </summary>
        /// <value>The view type of the context. Only &#x60;GIC&#x60; (Global Issue Create) is supported.</value>
        [Required]
        [DataMember(Name="viewType", EmitDefaultValue=false)]
        public string ViewType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UiModificationContextDetails {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsAvailable: ").Append(IsAvailable).Append("\n");
            sb.Append("  IssueTypeId: ").Append(IssueTypeId).Append("\n");
            sb.Append("  ProjectId: ").Append(ProjectId).Append("\n");
            sb.Append("  ViewType: ").Append(ViewType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UiModificationContextDetails)obj);
        }

        /// <summary>
        /// Returns true if UiModificationContextDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of UiModificationContextDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UiModificationContextDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsAvailable == other.IsAvailable ||
                    
                    IsAvailable.Equals(other.IsAvailable)
                ) && 
                (
                    IssueTypeId == other.IssueTypeId ||
                    IssueTypeId != null &&
                    IssueTypeId.Equals(other.IssueTypeId)
                ) && 
                (
                    ProjectId == other.ProjectId ||
                    ProjectId != null &&
                    ProjectId.Equals(other.ProjectId)
                ) && 
                (
                    ViewType == other.ViewType ||
                    ViewType != null &&
                    ViewType.Equals(other.ViewType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAvailable.GetHashCode();
                    if (IssueTypeId != null)
                    hashCode = hashCode * 59 + IssueTypeId.GetHashCode();
                    if (ProjectId != null)
                    hashCode = hashCode * 59 + ProjectId.GetHashCode();
                    if (ViewType != null)
                    hashCode = hashCode * 59 + ViewType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UiModificationContextDetails left, UiModificationContextDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UiModificationContextDetails left, UiModificationContextDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
