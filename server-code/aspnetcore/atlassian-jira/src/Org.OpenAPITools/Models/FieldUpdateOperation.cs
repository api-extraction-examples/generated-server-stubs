/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of an operation to perform on a field.
    /// </summary>
    [DataContract]
    public partial class FieldUpdateOperation : IEquatable<FieldUpdateOperation>
    {
        /// <summary>
        /// The value to add to the field.
        /// </summary>
        /// <value>The value to add to the field.</value>
        /// <example>triaged</example>
        [DataMember(Name="add", EmitDefaultValue=true)]
        public Object Add { get; set; }

        /// <summary>
        /// The field value to copy from another issue.
        /// </summary>
        /// <value>The field value to copy from another issue.</value>
        /// <example>{&quot;issuelinks&quot;:{&quot;sourceIssues&quot;:[{&quot;key&quot;:&quot;FP-5&quot;}]}}</example>
        [DataMember(Name="copy", EmitDefaultValue=true)]
        public Object Copy { get; set; }

        /// <summary>
        /// The value to edit in the field.
        /// </summary>
        /// <value>The value to edit in the field.</value>
        /// <example>{&quot;originalEstimate&quot;:&quot;1w 1d&quot;,&quot;remainingEstimate&quot;:&quot;4d&quot;}</example>
        [DataMember(Name="edit", EmitDefaultValue=true)]
        public Object Edit { get; set; }

        /// <summary>
        /// The value to removed from the field.
        /// </summary>
        /// <value>The value to removed from the field.</value>
        /// <example>blocker</example>
        [DataMember(Name="remove", EmitDefaultValue=true)]
        public Object Remove { get; set; }

        /// <summary>
        /// The value to set in the field.
        /// </summary>
        /// <value>The value to set in the field.</value>
        /// <example>A new summary</example>
        [DataMember(Name="set", EmitDefaultValue=true)]
        public Object Set { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldUpdateOperation {\n");
            sb.Append("  Add: ").Append(Add).Append("\n");
            sb.Append("  Copy: ").Append(Copy).Append("\n");
            sb.Append("  Edit: ").Append(Edit).Append("\n");
            sb.Append("  Remove: ").Append(Remove).Append("\n");
            sb.Append("  Set: ").Append(Set).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldUpdateOperation)obj);
        }

        /// <summary>
        /// Returns true if FieldUpdateOperation instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldUpdateOperation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldUpdateOperation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Add == other.Add ||
                    Add != null &&
                    Add.Equals(other.Add)
                ) && 
                (
                    Copy == other.Copy ||
                    Copy != null &&
                    Copy.Equals(other.Copy)
                ) && 
                (
                    Edit == other.Edit ||
                    Edit != null &&
                    Edit.Equals(other.Edit)
                ) && 
                (
                    Remove == other.Remove ||
                    Remove != null &&
                    Remove.Equals(other.Remove)
                ) && 
                (
                    Set == other.Set ||
                    Set != null &&
                    Set.Equals(other.Set)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Add != null)
                    hashCode = hashCode * 59 + Add.GetHashCode();
                    if (Copy != null)
                    hashCode = hashCode * 59 + Copy.GetHashCode();
                    if (Edit != null)
                    hashCode = hashCode * 59 + Edit.GetHashCode();
                    if (Remove != null)
                    hashCode = hashCode * 59 + Remove.GetHashCode();
                    if (Set != null)
                    hashCode = hashCode * 59 + Set.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldUpdateOperation left, FieldUpdateOperation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldUpdateOperation left, FieldUpdateOperation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
