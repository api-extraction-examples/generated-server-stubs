/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Configuration of the announcement banner.
    /// </summary>
    [DataContract]
    public partial class AnnouncementBannerConfigurationUpdate : IEquatable<AnnouncementBannerConfigurationUpdate>
    {
        /// <summary>
        /// Flag indicating if the announcement banner can be dismissed by the user.
        /// </summary>
        /// <value>Flag indicating if the announcement banner can be dismissed by the user.</value>
        [DataMember(Name="isDismissible", EmitDefaultValue=true)]
        public bool IsDismissible { get; set; }

        /// <summary>
        /// Flag indicating if the announcement banner is enabled or not.
        /// </summary>
        /// <value>Flag indicating if the announcement banner is enabled or not.</value>
        [DataMember(Name="isEnabled", EmitDefaultValue=true)]
        public bool IsEnabled { get; set; }

        /// <summary>
        /// The text on the announcement banner.
        /// </summary>
        /// <value>The text on the announcement banner.</value>
        [DataMember(Name="message", EmitDefaultValue=false)]
        public string Message { get; set; }

        /// <summary>
        /// Visibility of the announcement banner. Can be public or private.
        /// </summary>
        /// <value>Visibility of the announcement banner. Can be public or private.</value>
        [DataMember(Name="visibility", EmitDefaultValue=false)]
        public string Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AnnouncementBannerConfigurationUpdate {\n");
            sb.Append("  IsDismissible: ").Append(IsDismissible).Append("\n");
            sb.Append("  IsEnabled: ").Append(IsEnabled).Append("\n");
            sb.Append("  Message: ").Append(Message).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AnnouncementBannerConfigurationUpdate)obj);
        }

        /// <summary>
        /// Returns true if AnnouncementBannerConfigurationUpdate instances are equal
        /// </summary>
        /// <param name="other">Instance of AnnouncementBannerConfigurationUpdate to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AnnouncementBannerConfigurationUpdate other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    IsDismissible == other.IsDismissible ||
                    
                    IsDismissible.Equals(other.IsDismissible)
                ) && 
                (
                    IsEnabled == other.IsEnabled ||
                    
                    IsEnabled.Equals(other.IsEnabled)
                ) && 
                (
                    Message == other.Message ||
                    Message != null &&
                    Message.Equals(other.Message)
                ) && 
                (
                    Visibility == other.Visibility ||
                    Visibility != null &&
                    Visibility.Equals(other.Visibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + IsDismissible.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEnabled.GetHashCode();
                    if (Message != null)
                    hashCode = hashCode * 59 + Message.GetHashCode();
                    if (Visibility != null)
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AnnouncementBannerConfigurationUpdate left, AnnouncementBannerConfigurationUpdate right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AnnouncementBannerConfigurationUpdate left, AnnouncementBannerConfigurationUpdate right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
