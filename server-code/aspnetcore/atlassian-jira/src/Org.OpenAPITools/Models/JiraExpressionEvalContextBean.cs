/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class JiraExpressionEvalContextBean : IEquatable<JiraExpressionEvalContextBean>
    {
        /// <summary>
        /// The ID of the board that is available under the &#x60;board&#x60; variable when evaluating the expression.
        /// </summary>
        /// <value>The ID of the board that is available under the &#x60;board&#x60; variable when evaluating the expression.</value>
        [DataMember(Name="board", EmitDefaultValue=true)]
        public long Board { get; set; }

        /// <summary>
        /// Custom context variables and their types. These variable types are available for use in a custom context:   *  &#x60;user&#x60;: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  &#x60;issue&#x60;: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  &#x60;json&#x60;: A JSON object containing custom content.  *  &#x60;list&#x60;: A JSON list of &#x60;user&#x60;, &#x60;issue&#x60;, or &#x60;json&#x60; variable types.
        /// </summary>
        /// <value>Custom context variables and their types. These variable types are available for use in a custom context:   *  &#x60;user&#x60;: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  &#x60;issue&#x60;: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  &#x60;json&#x60;: A JSON object containing custom content.  *  &#x60;list&#x60;: A JSON list of &#x60;user&#x60;, &#x60;issue&#x60;, or &#x60;json&#x60; variable types.</value>
        [DataMember(Name="custom", EmitDefaultValue=false)]
        public List<CustomContextVariable> Custom { get; set; }

        /// <summary>
        /// The ID of the customer request that is available under the &#x60;customerRequest&#x60; variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.
        /// </summary>
        /// <value>The ID of the customer request that is available under the &#x60;customerRequest&#x60; variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.</value>
        [DataMember(Name="customerRequest", EmitDefaultValue=true)]
        public long CustomerRequest { get; set; }

        /// <summary>
        /// Gets or Sets Issue
        /// </summary>
        [DataMember(Name="issue", EmitDefaultValue=false)]
        public IdOrKeyBean Issue { get; set; }

        /// <summary>
        /// Gets or Sets Issues
        /// </summary>
        [DataMember(Name="issues", EmitDefaultValue=false)]
        public JexpIssues Issues { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public IdOrKeyBean Project { get; set; }

        /// <summary>
        /// The ID of the service desk that is available under the &#x60;serviceDesk&#x60; variable when evaluating the expression.
        /// </summary>
        /// <value>The ID of the service desk that is available under the &#x60;serviceDesk&#x60; variable when evaluating the expression.</value>
        [DataMember(Name="serviceDesk", EmitDefaultValue=true)]
        public long ServiceDesk { get; set; }

        /// <summary>
        /// The ID of the sprint that is available under the &#x60;sprint&#x60; variable when evaluating the expression.
        /// </summary>
        /// <value>The ID of the sprint that is available under the &#x60;sprint&#x60; variable when evaluating the expression.</value>
        [DataMember(Name="sprint", EmitDefaultValue=true)]
        public long Sprint { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JiraExpressionEvalContextBean {\n");
            sb.Append("  Board: ").Append(Board).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  CustomerRequest: ").Append(CustomerRequest).Append("\n");
            sb.Append("  Issue: ").Append(Issue).Append("\n");
            sb.Append("  Issues: ").Append(Issues).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  ServiceDesk: ").Append(ServiceDesk).Append("\n");
            sb.Append("  Sprint: ").Append(Sprint).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JiraExpressionEvalContextBean)obj);
        }

        /// <summary>
        /// Returns true if JiraExpressionEvalContextBean instances are equal
        /// </summary>
        /// <param name="other">Instance of JiraExpressionEvalContextBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JiraExpressionEvalContextBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Board == other.Board ||
                    
                    Board.Equals(other.Board)
                ) && 
                (
                    Custom == other.Custom ||
                    Custom != null &&
                    other.Custom != null &&
                    Custom.SequenceEqual(other.Custom)
                ) && 
                (
                    CustomerRequest == other.CustomerRequest ||
                    
                    CustomerRequest.Equals(other.CustomerRequest)
                ) && 
                (
                    Issue == other.Issue ||
                    Issue != null &&
                    Issue.Equals(other.Issue)
                ) && 
                (
                    Issues == other.Issues ||
                    Issues != null &&
                    Issues.Equals(other.Issues)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    ServiceDesk == other.ServiceDesk ||
                    
                    ServiceDesk.Equals(other.ServiceDesk)
                ) && 
                (
                    Sprint == other.Sprint ||
                    
                    Sprint.Equals(other.Sprint)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Board.GetHashCode();
                    if (Custom != null)
                    hashCode = hashCode * 59 + Custom.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomerRequest.GetHashCode();
                    if (Issue != null)
                    hashCode = hashCode * 59 + Issue.GetHashCode();
                    if (Issues != null)
                    hashCode = hashCode * 59 + Issues.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceDesk.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sprint.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JiraExpressionEvalContextBean left, JiraExpressionEvalContextBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JiraExpressionEvalContextBean left, JiraExpressionEvalContextBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
