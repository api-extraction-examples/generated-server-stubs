/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class IssueFieldOptionScopeBean : IEquatable<IssueFieldOptionScopeBean>
    {
        /// <summary>
        /// Gets or Sets Global
        /// </summary>
        [DataMember(Name="global", EmitDefaultValue=false)]
        public GlobalScopeBean Global { get; set; }

        /// <summary>
        /// DEPRECATED
        /// </summary>
        /// <value>DEPRECATED</value>
        [DataMember(Name="projects", EmitDefaultValue=false)]
        public List<long> Projects { get; set; }

        /// <summary>
        /// Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.
        /// </summary>
        /// <value>Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.</value>
        [DataMember(Name="projects2", EmitDefaultValue=false)]
        public List<ProjectScopeBean> Projects2 { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class IssueFieldOptionScopeBean {\n");
            sb.Append("  Global: ").Append(Global).Append("\n");
            sb.Append("  Projects: ").Append(Projects).Append("\n");
            sb.Append("  Projects2: ").Append(Projects2).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((IssueFieldOptionScopeBean)obj);
        }

        /// <summary>
        /// Returns true if IssueFieldOptionScopeBean instances are equal
        /// </summary>
        /// <param name="other">Instance of IssueFieldOptionScopeBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(IssueFieldOptionScopeBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Global == other.Global ||
                    Global != null &&
                    Global.Equals(other.Global)
                ) && 
                (
                    Projects == other.Projects ||
                    Projects != null &&
                    other.Projects != null &&
                    Projects.SequenceEqual(other.Projects)
                ) && 
                (
                    Projects2 == other.Projects2 ||
                    Projects2 != null &&
                    other.Projects2 != null &&
                    Projects2.SequenceEqual(other.Projects2)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Global != null)
                    hashCode = hashCode * 59 + Global.GetHashCode();
                    if (Projects != null)
                    hashCode = hashCode * 59 + Projects.GetHashCode();
                    if (Projects2 != null)
                    hashCode = hashCode * 59 + Projects2.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(IssueFieldOptionScopeBean left, IssueFieldOptionScopeBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(IssueFieldOptionScopeBean left, IssueFieldOptionScopeBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
