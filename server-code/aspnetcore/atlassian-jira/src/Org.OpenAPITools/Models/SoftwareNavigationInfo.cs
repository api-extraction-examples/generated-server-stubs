/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class SoftwareNavigationInfo : IEquatable<SoftwareNavigationInfo>
    {
        /// <summary>
        /// Gets or Sets BoardId
        /// </summary>
        [DataMember(Name="boardId", EmitDefaultValue=true)]
        public long BoardId { get; set; }

        /// <summary>
        /// Gets or Sets BoardName
        /// </summary>
        [DataMember(Name="boardName", EmitDefaultValue=false)]
        public string BoardName { get; set; }

        /// <summary>
        /// Gets or Sets SimpleBoard
        /// </summary>
        [DataMember(Name="simpleBoard", EmitDefaultValue=true)]
        public bool SimpleBoard { get; set; }

        /// <summary>
        /// Gets or Sets TotalBoardsInProject
        /// </summary>
        [DataMember(Name="totalBoardsInProject", EmitDefaultValue=true)]
        public long TotalBoardsInProject { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SoftwareNavigationInfo {\n");
            sb.Append("  BoardId: ").Append(BoardId).Append("\n");
            sb.Append("  BoardName: ").Append(BoardName).Append("\n");
            sb.Append("  SimpleBoard: ").Append(SimpleBoard).Append("\n");
            sb.Append("  TotalBoardsInProject: ").Append(TotalBoardsInProject).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SoftwareNavigationInfo)obj);
        }

        /// <summary>
        /// Returns true if SoftwareNavigationInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of SoftwareNavigationInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SoftwareNavigationInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BoardId == other.BoardId ||
                    
                    BoardId.Equals(other.BoardId)
                ) && 
                (
                    BoardName == other.BoardName ||
                    BoardName != null &&
                    BoardName.Equals(other.BoardName)
                ) && 
                (
                    SimpleBoard == other.SimpleBoard ||
                    
                    SimpleBoard.Equals(other.SimpleBoard)
                ) && 
                (
                    TotalBoardsInProject == other.TotalBoardsInProject ||
                    
                    TotalBoardsInProject.Equals(other.TotalBoardsInProject)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BoardId.GetHashCode();
                    if (BoardName != null)
                    hashCode = hashCode * 59 + BoardName.GetHashCode();
                    
                    hashCode = hashCode * 59 + SimpleBoard.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalBoardsInProject.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SoftwareNavigationInfo left, SoftwareNavigationInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SoftwareNavigationInfo left, SoftwareNavigationInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
