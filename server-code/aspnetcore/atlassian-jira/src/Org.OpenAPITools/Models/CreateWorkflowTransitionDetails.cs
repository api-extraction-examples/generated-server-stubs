/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The details of a workflow transition.
    /// </summary>
    [DataContract]
    public partial class CreateWorkflowTransitionDetails : IEquatable<CreateWorkflowTransitionDetails>
    {
        /// <summary>
        /// The description of the transition. The maximum length is 1000 characters.
        /// </summary>
        /// <value>The description of the transition. The maximum length is 1000 characters.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The statuses the transition can start from.
        /// </summary>
        /// <value>The statuses the transition can start from.</value>
        [DataMember(Name="from", EmitDefaultValue=false)]
        public List<string> From { get; set; }

        /// <summary>
        /// The name of the transition. The maximum length is 60 characters.
        /// </summary>
        /// <value>The name of the transition. The maximum length is 60 characters.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The properties of the transition.
        /// </summary>
        /// <value>The properties of the transition.</value>
        [DataMember(Name="properties", EmitDefaultValue=false)]
        public Dictionary<string, string> Properties { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public CreateWorkflowTransitionRulesDetails Rules { get; set; }

        /// <summary>
        /// Gets or Sets Screen
        /// </summary>
        [DataMember(Name="screen", EmitDefaultValue=false)]
        public CreateWorkflowTransitionScreenDetails Screen { get; set; }

        /// <summary>
        /// The status the transition goes to.
        /// </summary>
        /// <value>The status the transition goes to.</value>
        [Required]
        [DataMember(Name="to", EmitDefaultValue=false)]
        public string To { get; set; }


        /// <summary>
        /// The type of the transition.
        /// </summary>
        /// <value>The type of the transition.</value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum GlobalEnum for global
            /// </summary>
            [EnumMember(Value = "global")]
            GlobalEnum = 1,
            
            /// <summary>
            /// Enum InitialEnum for initial
            /// </summary>
            [EnumMember(Value = "initial")]
            InitialEnum = 2,
            
            /// <summary>
            /// Enum DirectedEnum for directed
            /// </summary>
            [EnumMember(Value = "directed")]
            DirectedEnum = 3
        }

        /// <summary>
        /// The type of the transition.
        /// </summary>
        /// <value>The type of the transition.</value>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateWorkflowTransitionDetails {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Properties: ").Append(Properties).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Screen: ").Append(Screen).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateWorkflowTransitionDetails)obj);
        }

        /// <summary>
        /// Returns true if CreateWorkflowTransitionDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateWorkflowTransitionDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateWorkflowTransitionDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    From == other.From ||
                    From != null &&
                    other.From != null &&
                    From.SequenceEqual(other.From)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Properties == other.Properties ||
                    Properties != null &&
                    other.Properties != null &&
                    Properties.SequenceEqual(other.Properties)
                ) && 
                (
                    Rules == other.Rules ||
                    Rules != null &&
                    Rules.Equals(other.Rules)
                ) && 
                (
                    Screen == other.Screen ||
                    Screen != null &&
                    Screen.Equals(other.Screen)
                ) && 
                (
                    To == other.To ||
                    To != null &&
                    To.Equals(other.To)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (From != null)
                    hashCode = hashCode * 59 + From.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Properties != null)
                    hashCode = hashCode * 59 + Properties.GetHashCode();
                    if (Rules != null)
                    hashCode = hashCode * 59 + Rules.GetHashCode();
                    if (Screen != null)
                    hashCode = hashCode * 59 + Screen.GetHashCode();
                    if (To != null)
                    hashCode = hashCode * 59 + To.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateWorkflowTransitionDetails left, CreateWorkflowTransitionDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateWorkflowTransitionDetails left, CreateWorkflowTransitionDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
