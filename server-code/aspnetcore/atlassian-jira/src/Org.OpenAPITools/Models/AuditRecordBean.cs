/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An audit record.
    /// </summary>
    [DataContract]
    public partial class AuditRecordBean : IEquatable<AuditRecordBean>
    {
        /// <summary>
        /// The list of items associated with the changed record.
        /// </summary>
        /// <value>The list of items associated with the changed record.</value>
        [DataMember(Name="associatedItems", EmitDefaultValue=false)]
        public List<AssociatedItemBean> AssociatedItems { get; set; }

        /// <summary>
        /// Deprecated, use &#x60;authorAccountId&#x60; instead. The key of the user who created the audit record.
        /// </summary>
        /// <value>Deprecated, use &#x60;authorAccountId&#x60; instead. The key of the user who created the audit record.</value>
        [DataMember(Name="authorKey", EmitDefaultValue=false)]
        public string AuthorKey { get; set; }

        /// <summary>
        /// The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).
        /// </summary>
        /// <value>The category of the audit record. For a list of these categories, see the help article [Auditing in Jira applications](https://confluence.atlassian.com/x/noXKM).</value>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public string Category { get; set; }

        /// <summary>
        /// The list of values changed in the record event.
        /// </summary>
        /// <value>The list of values changed in the record event.</value>
        [DataMember(Name="changedValues", EmitDefaultValue=false)]
        public List<ChangedValueBean> ChangedValues { get; set; }

        /// <summary>
        /// The date and time on which the audit record was created.
        /// </summary>
        /// <value>The date and time on which the audit record was created.</value>
        [DataMember(Name="created", EmitDefaultValue=false)]
        public DateTime Created { get; set; }

        /// <summary>
        /// The description of the audit record.
        /// </summary>
        /// <value>The description of the audit record.</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The event the audit record originated from.
        /// </summary>
        /// <value>The event the audit record originated from.</value>
        [DataMember(Name="eventSource", EmitDefaultValue=false)]
        public string EventSource { get; set; }

        /// <summary>
        /// The ID of the audit record.
        /// </summary>
        /// <value>The ID of the audit record.</value>
        [DataMember(Name="id", EmitDefaultValue=true)]
        public long Id { get; set; }

        /// <summary>
        /// Gets or Sets ObjectItem
        /// </summary>
        [DataMember(Name="objectItem", EmitDefaultValue=false)]
        public AssociatedItemBean ObjectItem { get; set; }

        /// <summary>
        /// The URL of the computer where the creation of the audit record was initiated.
        /// </summary>
        /// <value>The URL of the computer where the creation of the audit record was initiated.</value>
        [DataMember(Name="remoteAddress", EmitDefaultValue=false)]
        public string RemoteAddress { get; set; }

        /// <summary>
        /// The summary of the audit record.
        /// </summary>
        /// <value>The summary of the audit record.</value>
        [DataMember(Name="summary", EmitDefaultValue=false)]
        public string Summary { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditRecordBean {\n");
            sb.Append("  AssociatedItems: ").Append(AssociatedItems).Append("\n");
            sb.Append("  AuthorKey: ").Append(AuthorKey).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  ChangedValues: ").Append(ChangedValues).Append("\n");
            sb.Append("  Created: ").Append(Created).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EventSource: ").Append(EventSource).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ObjectItem: ").Append(ObjectItem).Append("\n");
            sb.Append("  RemoteAddress: ").Append(RemoteAddress).Append("\n");
            sb.Append("  Summary: ").Append(Summary).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuditRecordBean)obj);
        }

        /// <summary>
        /// Returns true if AuditRecordBean instances are equal
        /// </summary>
        /// <param name="other">Instance of AuditRecordBean to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditRecordBean other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AssociatedItems == other.AssociatedItems ||
                    AssociatedItems != null &&
                    other.AssociatedItems != null &&
                    AssociatedItems.SequenceEqual(other.AssociatedItems)
                ) && 
                (
                    AuthorKey == other.AuthorKey ||
                    AuthorKey != null &&
                    AuthorKey.Equals(other.AuthorKey)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    ChangedValues == other.ChangedValues ||
                    ChangedValues != null &&
                    other.ChangedValues != null &&
                    ChangedValues.SequenceEqual(other.ChangedValues)
                ) && 
                (
                    Created == other.Created ||
                    Created != null &&
                    Created.Equals(other.Created)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EventSource == other.EventSource ||
                    EventSource != null &&
                    EventSource.Equals(other.EventSource)
                ) && 
                (
                    Id == other.Id ||
                    
                    Id.Equals(other.Id)
                ) && 
                (
                    ObjectItem == other.ObjectItem ||
                    ObjectItem != null &&
                    ObjectItem.Equals(other.ObjectItem)
                ) && 
                (
                    RemoteAddress == other.RemoteAddress ||
                    RemoteAddress != null &&
                    RemoteAddress.Equals(other.RemoteAddress)
                ) && 
                (
                    Summary == other.Summary ||
                    Summary != null &&
                    Summary.Equals(other.Summary)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AssociatedItems != null)
                    hashCode = hashCode * 59 + AssociatedItems.GetHashCode();
                    if (AuthorKey != null)
                    hashCode = hashCode * 59 + AuthorKey.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (ChangedValues != null)
                    hashCode = hashCode * 59 + ChangedValues.GetHashCode();
                    if (Created != null)
                    hashCode = hashCode * 59 + Created.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (EventSource != null)
                    hashCode = hashCode * 59 + EventSource.GetHashCode();
                    
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ObjectItem != null)
                    hashCode = hashCode * 59 + ObjectItem.GetHashCode();
                    if (RemoteAddress != null)
                    hashCode = hashCode * 59 + RemoteAddress.GetHashCode();
                    if (Summary != null)
                    hashCode = hashCode * 59 + Summary.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuditRecordBean left, AuditRecordBean right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuditRecordBean left, AuditRecordBean right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
