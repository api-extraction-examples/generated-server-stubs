/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A list of webhooks.
    /// </summary>
    [DataContract]
    public partial class WebhookDetails : IEquatable<WebhookDetails>
    {

        /// <summary>
        /// Gets or Sets Events
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<EventsEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum EventsEnum
        {
            
            /// <summary>
            /// Enum JiraissueCreatedEnum for jira:issue_created
            /// </summary>
            [EnumMember(Value = "jira:issue_created")]
            JiraissueCreatedEnum = 1,
            
            /// <summary>
            /// Enum JiraissueUpdatedEnum for jira:issue_updated
            /// </summary>
            [EnumMember(Value = "jira:issue_updated")]
            JiraissueUpdatedEnum = 2,
            
            /// <summary>
            /// Enum JiraissueDeletedEnum for jira:issue_deleted
            /// </summary>
            [EnumMember(Value = "jira:issue_deleted")]
            JiraissueDeletedEnum = 3,
            
            /// <summary>
            /// Enum CommentCreatedEnum for comment_created
            /// </summary>
            [EnumMember(Value = "comment_created")]
            CommentCreatedEnum = 4,
            
            /// <summary>
            /// Enum CommentUpdatedEnum for comment_updated
            /// </summary>
            [EnumMember(Value = "comment_updated")]
            CommentUpdatedEnum = 5,
            
            /// <summary>
            /// Enum CommentDeletedEnum for comment_deleted
            /// </summary>
            [EnumMember(Value = "comment_deleted")]
            CommentDeletedEnum = 6,
            
            /// <summary>
            /// Enum IssuePropertySetEnum for issue_property_set
            /// </summary>
            [EnumMember(Value = "issue_property_set")]
            IssuePropertySetEnum = 7,
            
            /// <summary>
            /// Enum IssuePropertyDeletedEnum for issue_property_deleted
            /// </summary>
            [EnumMember(Value = "issue_property_deleted")]
            IssuePropertyDeletedEnum = 8
        }

        /// <summary>
        /// The Jira events that trigger the webhook.
        /// </summary>
        /// <value>The Jira events that trigger the webhook.</value>
        [Required]
        [DataMember(Name="events", EmitDefaultValue=false)]
        public List<WebhookDetails.EventsEnum> Events { get; set; }

        /// <summary>
        /// A list of field IDs. When the issue changelog contains any of the fields, the webhook &#x60;jira:issue_updated&#x60; is sent. If this parameter is not present, the app is notified about all field updates.
        /// </summary>
        /// <value>A list of field IDs. When the issue changelog contains any of the fields, the webhook &#x60;jira:issue_updated&#x60; is sent. If this parameter is not present, the app is notified about all field updates.</value>
        [DataMember(Name="fieldIdsFilter", EmitDefaultValue=false)]
        public List<string> FieldIdsFilter { get; set; }

        /// <summary>
        /// A list of issue property keys. A change of those issue properties triggers the &#x60;issue_property_set&#x60; or &#x60;issue_property_deleted&#x60; webhooks. If this parameter is not present, the app is notified about all issue property updates.
        /// </summary>
        /// <value>A list of issue property keys. A change of those issue properties triggers the &#x60;issue_property_set&#x60; or &#x60;issue_property_deleted&#x60; webhooks. If this parameter is not present, the app is notified about all issue property updates.</value>
        [DataMember(Name="issuePropertyKeysFilter", EmitDefaultValue=false)]
        public List<string> IssuePropertyKeysFilter { get; set; }

        /// <summary>
        /// The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:   *  Fields: &#x60;issueKey&#x60;, &#x60;project&#x60;, &#x60;issuetype&#x60;, &#x60;status&#x60;, &#x60;assignee&#x60;, &#x60;reporter&#x60;, &#x60;issue.property&#x60;, and &#x60;cf[id]&#x60;. For custom fields (&#x60;cf[id]&#x60;), only the epic label custom field is supported.\&quot;.  *  Operators: &#x60;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;IN&#x60;, and &#x60;NOT IN&#x60;.
        /// </summary>
        /// <value>The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:   *  Fields: &#x60;issueKey&#x60;, &#x60;project&#x60;, &#x60;issuetype&#x60;, &#x60;status&#x60;, &#x60;assignee&#x60;, &#x60;reporter&#x60;, &#x60;issue.property&#x60;, and &#x60;cf[id]&#x60;. For custom fields (&#x60;cf[id]&#x60;), only the epic label custom field is supported.\&quot;.  *  Operators: &#x60;&#x3D;&#x60;, &#x60;!&#x3D;&#x60;, &#x60;IN&#x60;, and &#x60;NOT IN&#x60;.</value>
        [Required]
        [DataMember(Name="jqlFilter", EmitDefaultValue=false)]
        public string JqlFilter { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookDetails {\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  FieldIdsFilter: ").Append(FieldIdsFilter).Append("\n");
            sb.Append("  IssuePropertyKeysFilter: ").Append(IssuePropertyKeysFilter).Append("\n");
            sb.Append("  JqlFilter: ").Append(JqlFilter).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WebhookDetails)obj);
        }

        /// <summary>
        /// Returns true if WebhookDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of WebhookDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Events == other.Events ||
                    Events != null &&
                    other.Events != null &&
                    Events.SequenceEqual(other.Events)
                ) && 
                (
                    FieldIdsFilter == other.FieldIdsFilter ||
                    FieldIdsFilter != null &&
                    other.FieldIdsFilter != null &&
                    FieldIdsFilter.SequenceEqual(other.FieldIdsFilter)
                ) && 
                (
                    IssuePropertyKeysFilter == other.IssuePropertyKeysFilter ||
                    IssuePropertyKeysFilter != null &&
                    other.IssuePropertyKeysFilter != null &&
                    IssuePropertyKeysFilter.SequenceEqual(other.IssuePropertyKeysFilter)
                ) && 
                (
                    JqlFilter == other.JqlFilter ||
                    JqlFilter != null &&
                    JqlFilter.Equals(other.JqlFilter)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                    if (FieldIdsFilter != null)
                    hashCode = hashCode * 59 + FieldIdsFilter.GetHashCode();
                    if (IssuePropertyKeysFilter != null)
                    hashCode = hashCode * 59 + IssuePropertyKeysFilter.GetHashCode();
                    if (JqlFilter != null)
                    hashCode = hashCode * 59 + JqlFilter.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WebhookDetails left, WebhookDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WebhookDetails left, WebhookDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
