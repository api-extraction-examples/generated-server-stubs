/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a field.
    /// </summary>
    [DataContract]
    public partial class FieldDetails : IEquatable<FieldDetails>
    {
        /// <summary>
        /// The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).
        /// </summary>
        /// <value>The names that can be used to reference the field in an advanced search. For more information, see [Advanced searching - fields reference](https://confluence.atlassian.com/x/gwORLQ).</value>
        [DataMember(Name="clauseNames", EmitDefaultValue=false)]
        public List<string> ClauseNames { get; set; }

        /// <summary>
        /// Whether the field is a custom field.
        /// </summary>
        /// <value>Whether the field is a custom field.</value>
        [DataMember(Name="custom", EmitDefaultValue=true)]
        public bool Custom { get; set; }

        /// <summary>
        /// The ID of the field.
        /// </summary>
        /// <value>The ID of the field.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        /// <value>The key of the field.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the field can be used as a column on the issue navigator.
        /// </summary>
        /// <value>Whether the field can be used as a column on the issue navigator.</value>
        [DataMember(Name="navigable", EmitDefaultValue=true)]
        public bool Navigable { get; set; }

        /// <summary>
        /// Whether the content of the field can be used to order lists.
        /// </summary>
        /// <value>Whether the content of the field can be used to order lists.</value>
        [DataMember(Name="orderable", EmitDefaultValue=true)]
        public bool Orderable { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public JsonTypeBean Schema { get; set; }

        /// <summary>
        /// Gets or Sets Scope
        /// </summary>
        [DataMember(Name="scope", EmitDefaultValue=false)]
        public Scope Scope { get; set; }

        /// <summary>
        /// Whether the content of the field can be searched.
        /// </summary>
        /// <value>Whether the content of the field can be searched.</value>
        [DataMember(Name="searchable", EmitDefaultValue=true)]
        public bool Searchable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldDetails {\n");
            sb.Append("  ClauseNames: ").Append(ClauseNames).Append("\n");
            sb.Append("  Custom: ").Append(Custom).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Navigable: ").Append(Navigable).Append("\n");
            sb.Append("  Orderable: ").Append(Orderable).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("  Scope: ").Append(Scope).Append("\n");
            sb.Append("  Searchable: ").Append(Searchable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldDetails)obj);
        }

        /// <summary>
        /// Returns true if FieldDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClauseNames == other.ClauseNames ||
                    ClauseNames != null &&
                    other.ClauseNames != null &&
                    ClauseNames.SequenceEqual(other.ClauseNames)
                ) && 
                (
                    Custom == other.Custom ||
                    
                    Custom.Equals(other.Custom)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Navigable == other.Navigable ||
                    
                    Navigable.Equals(other.Navigable)
                ) && 
                (
                    Orderable == other.Orderable ||
                    
                    Orderable.Equals(other.Orderable)
                ) && 
                (
                    Schema == other.Schema ||
                    Schema != null &&
                    Schema.Equals(other.Schema)
                ) && 
                (
                    Scope == other.Scope ||
                    Scope != null &&
                    Scope.Equals(other.Scope)
                ) && 
                (
                    Searchable == other.Searchable ||
                    
                    Searchable.Equals(other.Searchable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClauseNames != null)
                    hashCode = hashCode * 59 + ClauseNames.GetHashCode();
                    
                    hashCode = hashCode * 59 + Custom.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Navigable.GetHashCode();
                    
                    hashCode = hashCode * 59 + Orderable.GetHashCode();
                    if (Schema != null)
                    hashCode = hashCode * 59 + Schema.GetHashCode();
                    if (Scope != null)
                    hashCode = hashCode * 59 + Scope.GetHashCode();
                    
                    hashCode = hashCode * 59 + Searchable.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldDetails left, FieldDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldDetails left, FieldDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
