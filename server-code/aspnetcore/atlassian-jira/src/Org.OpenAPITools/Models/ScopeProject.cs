/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The project the item has scope in.
    /// </summary>
    [DataContract]
    public partial class ScopeProject : IEquatable<ScopeProject>
    {
        /// <summary>
        /// Gets or Sets AvatarUrls
        /// </summary>
        [DataMember(Name="avatarUrls", EmitDefaultValue=false)]
        public ProjectAvatarUrls AvatarUrls { get; set; }

        /// <summary>
        /// The ID of the project.
        /// </summary>
        /// <value>The ID of the project.</value>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// The key of the project.
        /// </summary>
        /// <value>The key of the project.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the project.
        /// </summary>
        /// <value>The name of the project.</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProjectCategory
        /// </summary>
        [DataMember(Name="projectCategory", EmitDefaultValue=false)]
        public ProjectDetailsProjectCategory ProjectCategory { get; set; }


        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [TypeConverter(typeof(CustomEnumConverter<ProjectTypeKeyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProjectTypeKeyEnum
        {
            
            /// <summary>
            /// Enum SoftwareEnum for software
            /// </summary>
            [EnumMember(Value = "software")]
            SoftwareEnum = 1,
            
            /// <summary>
            /// Enum ServiceDeskEnum for service_desk
            /// </summary>
            [EnumMember(Value = "service_desk")]
            ServiceDeskEnum = 2,
            
            /// <summary>
            /// Enum BusinessEnum for business
            /// </summary>
            [EnumMember(Value = "business")]
            BusinessEnum = 3
        }

        /// <summary>
        /// The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.
        /// </summary>
        /// <value>The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.</value>
        [DataMember(Name="projectTypeKey", EmitDefaultValue=true)]
        public ProjectTypeKeyEnum ProjectTypeKey { get; set; }

        /// <summary>
        /// The URL of the project details.
        /// </summary>
        /// <value>The URL of the project details.</value>
        [DataMember(Name="self", EmitDefaultValue=false)]
        public string Self { get; set; }

        /// <summary>
        /// Whether or not the project is simplified.
        /// </summary>
        /// <value>Whether or not the project is simplified.</value>
        [DataMember(Name="simplified", EmitDefaultValue=true)]
        public bool Simplified { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ScopeProject {\n");
            sb.Append("  AvatarUrls: ").Append(AvatarUrls).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectCategory: ").Append(ProjectCategory).Append("\n");
            sb.Append("  ProjectTypeKey: ").Append(ProjectTypeKey).Append("\n");
            sb.Append("  Self: ").Append(Self).Append("\n");
            sb.Append("  Simplified: ").Append(Simplified).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ScopeProject)obj);
        }

        /// <summary>
        /// Returns true if ScopeProject instances are equal
        /// </summary>
        /// <param name="other">Instance of ScopeProject to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ScopeProject other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AvatarUrls == other.AvatarUrls ||
                    AvatarUrls != null &&
                    AvatarUrls.Equals(other.AvatarUrls)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ProjectCategory == other.ProjectCategory ||
                    ProjectCategory != null &&
                    ProjectCategory.Equals(other.ProjectCategory)
                ) && 
                (
                    ProjectTypeKey == other.ProjectTypeKey ||
                    
                    ProjectTypeKey.Equals(other.ProjectTypeKey)
                ) && 
                (
                    Self == other.Self ||
                    Self != null &&
                    Self.Equals(other.Self)
                ) && 
                (
                    Simplified == other.Simplified ||
                    
                    Simplified.Equals(other.Simplified)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AvatarUrls != null)
                    hashCode = hashCode * 59 + AvatarUrls.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ProjectCategory != null)
                    hashCode = hashCode * 59 + ProjectCategory.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProjectTypeKey.GetHashCode();
                    if (Self != null)
                    hashCode = hashCode * 59 + Self.GetHashCode();
                    
                    hashCode = hashCode * 59 + Simplified.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ScopeProject left, ScopeProject right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ScopeProject left, ScopeProject right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
