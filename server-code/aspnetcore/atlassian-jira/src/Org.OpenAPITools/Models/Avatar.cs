/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details of an avatar.
    /// </summary>
    [DataContract]
    public partial class Avatar : IEquatable<Avatar>
    {
        /// <summary>
        /// The file name of the avatar icon. Returned for system avatars.
        /// </summary>
        /// <value>The file name of the avatar icon. Returned for system avatars.</value>
        [DataMember(Name="fileName", EmitDefaultValue=false)]
        public string FileName { get; set; }

        /// <summary>
        /// The ID of the avatar.
        /// </summary>
        /// <value>The ID of the avatar.</value>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Whether the avatar can be deleted.
        /// </summary>
        /// <value>Whether the avatar can be deleted.</value>
        [DataMember(Name="isDeletable", EmitDefaultValue=true)]
        public bool IsDeletable { get; set; }

        /// <summary>
        /// Whether the avatar is used in Jira. For example, shown as a project&#39;s avatar.
        /// </summary>
        /// <value>Whether the avatar is used in Jira. For example, shown as a project&#39;s avatar.</value>
        [DataMember(Name="isSelected", EmitDefaultValue=true)]
        public bool IsSelected { get; set; }

        /// <summary>
        /// Whether the avatar is a system avatar.
        /// </summary>
        /// <value>Whether the avatar is a system avatar.</value>
        [DataMember(Name="isSystemAvatar", EmitDefaultValue=true)]
        public bool IsSystemAvatar { get; set; }

        /// <summary>
        /// The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.
        /// </summary>
        /// <value>The owner of the avatar. For a system avatar the owner is null (and nothing is returned). For non-system avatars this is the appropriate identifier, such as the ID for a project or the account ID for a user.</value>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public string Owner { get; set; }

        /// <summary>
        /// The list of avatar icon URLs.
        /// </summary>
        /// <value>The list of avatar icon URLs.</value>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public Dictionary<string, string> Urls { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Avatar {\n");
            sb.Append("  FileName: ").Append(FileName).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  IsDeletable: ").Append(IsDeletable).Append("\n");
            sb.Append("  IsSelected: ").Append(IsSelected).Append("\n");
            sb.Append("  IsSystemAvatar: ").Append(IsSystemAvatar).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Avatar)obj);
        }

        /// <summary>
        /// Returns true if Avatar instances are equal
        /// </summary>
        /// <param name="other">Instance of Avatar to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Avatar other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FileName == other.FileName ||
                    FileName != null &&
                    FileName.Equals(other.FileName)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    IsDeletable == other.IsDeletable ||
                    
                    IsDeletable.Equals(other.IsDeletable)
                ) && 
                (
                    IsSelected == other.IsSelected ||
                    
                    IsSelected.Equals(other.IsSelected)
                ) && 
                (
                    IsSystemAvatar == other.IsSystemAvatar ||
                    
                    IsSystemAvatar.Equals(other.IsSystemAvatar)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Urls == other.Urls ||
                    Urls != null &&
                    other.Urls != null &&
                    Urls.SequenceEqual(other.Urls)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FileName != null)
                    hashCode = hashCode * 59 + FileName.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDeletable.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSelected.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSystemAvatar.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Urls != null)
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Avatar left, Avatar right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Avatar left, Avatar right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
