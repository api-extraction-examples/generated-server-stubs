/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The time tracking of the linked issue.
    /// </summary>
    [DataContract]
    public partial class FieldsTimetracking : IEquatable<FieldsTimetracking>
    {
        /// <summary>
        /// The original estimate of time needed for this issue in readable format.
        /// </summary>
        /// <value>The original estimate of time needed for this issue in readable format.</value>
        [DataMember(Name="originalEstimate", EmitDefaultValue=false)]
        public string OriginalEstimate { get; set; }

        /// <summary>
        /// The original estimate of time needed for this issue in seconds.
        /// </summary>
        /// <value>The original estimate of time needed for this issue in seconds.</value>
        [DataMember(Name="originalEstimateSeconds", EmitDefaultValue=true)]
        public long OriginalEstimateSeconds { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in readable format.
        /// </summary>
        /// <value>The remaining estimate of time needed for this issue in readable format.</value>
        [DataMember(Name="remainingEstimate", EmitDefaultValue=false)]
        public string RemainingEstimate { get; set; }

        /// <summary>
        /// The remaining estimate of time needed for this issue in seconds.
        /// </summary>
        /// <value>The remaining estimate of time needed for this issue in seconds.</value>
        [DataMember(Name="remainingEstimateSeconds", EmitDefaultValue=true)]
        public long RemainingEstimateSeconds { get; set; }

        /// <summary>
        /// Time worked on this issue in readable format.
        /// </summary>
        /// <value>Time worked on this issue in readable format.</value>
        [DataMember(Name="timeSpent", EmitDefaultValue=false)]
        public string TimeSpent { get; set; }

        /// <summary>
        /// Time worked on this issue in seconds.
        /// </summary>
        /// <value>Time worked on this issue in seconds.</value>
        [DataMember(Name="timeSpentSeconds", EmitDefaultValue=true)]
        public long TimeSpentSeconds { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldsTimetracking {\n");
            sb.Append("  OriginalEstimate: ").Append(OriginalEstimate).Append("\n");
            sb.Append("  OriginalEstimateSeconds: ").Append(OriginalEstimateSeconds).Append("\n");
            sb.Append("  RemainingEstimate: ").Append(RemainingEstimate).Append("\n");
            sb.Append("  RemainingEstimateSeconds: ").Append(RemainingEstimateSeconds).Append("\n");
            sb.Append("  TimeSpent: ").Append(TimeSpent).Append("\n");
            sb.Append("  TimeSpentSeconds: ").Append(TimeSpentSeconds).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldsTimetracking)obj);
        }

        /// <summary>
        /// Returns true if FieldsTimetracking instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldsTimetracking to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldsTimetracking other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OriginalEstimate == other.OriginalEstimate ||
                    OriginalEstimate != null &&
                    OriginalEstimate.Equals(other.OriginalEstimate)
                ) && 
                (
                    OriginalEstimateSeconds == other.OriginalEstimateSeconds ||
                    
                    OriginalEstimateSeconds.Equals(other.OriginalEstimateSeconds)
                ) && 
                (
                    RemainingEstimate == other.RemainingEstimate ||
                    RemainingEstimate != null &&
                    RemainingEstimate.Equals(other.RemainingEstimate)
                ) && 
                (
                    RemainingEstimateSeconds == other.RemainingEstimateSeconds ||
                    
                    RemainingEstimateSeconds.Equals(other.RemainingEstimateSeconds)
                ) && 
                (
                    TimeSpent == other.TimeSpent ||
                    TimeSpent != null &&
                    TimeSpent.Equals(other.TimeSpent)
                ) && 
                (
                    TimeSpentSeconds == other.TimeSpentSeconds ||
                    
                    TimeSpentSeconds.Equals(other.TimeSpentSeconds)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OriginalEstimate != null)
                    hashCode = hashCode * 59 + OriginalEstimate.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginalEstimateSeconds.GetHashCode();
                    if (RemainingEstimate != null)
                    hashCode = hashCode * 59 + RemainingEstimate.GetHashCode();
                    
                    hashCode = hashCode * 59 + RemainingEstimateSeconds.GetHashCode();
                    if (TimeSpent != null)
                    hashCode = hashCode * 59 + TimeSpent.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeSpentSeconds.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldsTimetracking left, FieldsTimetracking right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldsTimetracking left, FieldsTimetracking right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
