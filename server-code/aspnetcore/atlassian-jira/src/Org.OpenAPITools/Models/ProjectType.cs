/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about a project type.
    /// </summary>
    [DataContract]
    public partial class ProjectType : IEquatable<ProjectType>
    {
        /// <summary>
        /// The color of the project type.
        /// </summary>
        /// <value>The color of the project type.</value>
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// The key of the project type&#39;s description.
        /// </summary>
        /// <value>The key of the project type&#39;s description.</value>
        [DataMember(Name="descriptionI18nKey", EmitDefaultValue=false)]
        public string DescriptionI18nKey { get; set; }

        /// <summary>
        /// The formatted key of the project type.
        /// </summary>
        /// <value>The formatted key of the project type.</value>
        [DataMember(Name="formattedKey", EmitDefaultValue=false)]
        public string FormattedKey { get; set; }

        /// <summary>
        /// The icon of the project type.
        /// </summary>
        /// <value>The icon of the project type.</value>
        [DataMember(Name="icon", EmitDefaultValue=false)]
        public string Icon { get; set; }

        /// <summary>
        /// The key of the project type.
        /// </summary>
        /// <value>The key of the project type.</value>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectType {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  DescriptionI18nKey: ").Append(DescriptionI18nKey).Append("\n");
            sb.Append("  FormattedKey: ").Append(FormattedKey).Append("\n");
            sb.Append("  Icon: ").Append(Icon).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectType)obj);
        }

        /// <summary>
        /// Returns true if ProjectType instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                ) && 
                (
                    DescriptionI18nKey == other.DescriptionI18nKey ||
                    DescriptionI18nKey != null &&
                    DescriptionI18nKey.Equals(other.DescriptionI18nKey)
                ) && 
                (
                    FormattedKey == other.FormattedKey ||
                    FormattedKey != null &&
                    FormattedKey.Equals(other.FormattedKey)
                ) && 
                (
                    Icon == other.Icon ||
                    Icon != null &&
                    Icon.Equals(other.Icon)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (DescriptionI18nKey != null)
                    hashCode = hashCode * 59 + DescriptionI18nKey.GetHashCode();
                    if (FormattedKey != null)
                    hashCode = hashCode * 59 + FormattedKey.GetHashCode();
                    if (Icon != null)
                    hashCode = hashCode * 59 + Icon.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectType left, ProjectType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectType left, ProjectType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
