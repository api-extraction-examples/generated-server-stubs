/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the configuration of Jira.
    /// </summary>
    [DataContract]
    public partial class ModelConfiguration : IEquatable<ModelConfiguration>
    {
        /// <summary>
        /// Whether the ability to add attachments to issues is enabled.
        /// </summary>
        /// <value>Whether the ability to add attachments to issues is enabled.</value>
        [DataMember(Name="attachmentsEnabled", EmitDefaultValue=true)]
        public bool AttachmentsEnabled { get; set; }

        /// <summary>
        /// Whether the ability to link issues is enabled.
        /// </summary>
        /// <value>Whether the ability to link issues is enabled.</value>
        [DataMember(Name="issueLinkingEnabled", EmitDefaultValue=true)]
        public bool IssueLinkingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create subtasks for issues is enabled.
        /// </summary>
        /// <value>Whether the ability to create subtasks for issues is enabled.</value>
        [DataMember(Name="subTasksEnabled", EmitDefaultValue=true)]
        public bool SubTasksEnabled { get; set; }

        /// <summary>
        /// Gets or Sets TimeTrackingConfiguration
        /// </summary>
        [DataMember(Name="timeTrackingConfiguration", EmitDefaultValue=false)]
        public ConfigurationTimeTrackingConfiguration TimeTrackingConfiguration { get; set; }

        /// <summary>
        /// Whether the ability to track time is enabled. This property is deprecated.
        /// </summary>
        /// <value>Whether the ability to track time is enabled. This property is deprecated.</value>
        [DataMember(Name="timeTrackingEnabled", EmitDefaultValue=true)]
        public bool TimeTrackingEnabled { get; set; }

        /// <summary>
        /// Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability to create unassigned issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name="unassignedIssuesAllowed", EmitDefaultValue=true)]
        public bool UnassignedIssuesAllowed { get; set; }

        /// <summary>
        /// Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability for users to vote on issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name="votingEnabled", EmitDefaultValue=true)]
        public bool VotingEnabled { get; set; }

        /// <summary>
        /// Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.
        /// </summary>
        /// <value>Whether the ability for users to watch issues is enabled. See [Configuring Jira application options](https://confluence.atlassian.com/x/uYXKM) for details.</value>
        [DataMember(Name="watchingEnabled", EmitDefaultValue=true)]
        public bool WatchingEnabled { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelConfiguration {\n");
            sb.Append("  AttachmentsEnabled: ").Append(AttachmentsEnabled).Append("\n");
            sb.Append("  IssueLinkingEnabled: ").Append(IssueLinkingEnabled).Append("\n");
            sb.Append("  SubTasksEnabled: ").Append(SubTasksEnabled).Append("\n");
            sb.Append("  TimeTrackingConfiguration: ").Append(TimeTrackingConfiguration).Append("\n");
            sb.Append("  TimeTrackingEnabled: ").Append(TimeTrackingEnabled).Append("\n");
            sb.Append("  UnassignedIssuesAllowed: ").Append(UnassignedIssuesAllowed).Append("\n");
            sb.Append("  VotingEnabled: ").Append(VotingEnabled).Append("\n");
            sb.Append("  WatchingEnabled: ").Append(WatchingEnabled).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelConfiguration)obj);
        }

        /// <summary>
        /// Returns true if ModelConfiguration instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelConfiguration to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ModelConfiguration other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AttachmentsEnabled == other.AttachmentsEnabled ||
                    
                    AttachmentsEnabled.Equals(other.AttachmentsEnabled)
                ) && 
                (
                    IssueLinkingEnabled == other.IssueLinkingEnabled ||
                    
                    IssueLinkingEnabled.Equals(other.IssueLinkingEnabled)
                ) && 
                (
                    SubTasksEnabled == other.SubTasksEnabled ||
                    
                    SubTasksEnabled.Equals(other.SubTasksEnabled)
                ) && 
                (
                    TimeTrackingConfiguration == other.TimeTrackingConfiguration ||
                    TimeTrackingConfiguration != null &&
                    TimeTrackingConfiguration.Equals(other.TimeTrackingConfiguration)
                ) && 
                (
                    TimeTrackingEnabled == other.TimeTrackingEnabled ||
                    
                    TimeTrackingEnabled.Equals(other.TimeTrackingEnabled)
                ) && 
                (
                    UnassignedIssuesAllowed == other.UnassignedIssuesAllowed ||
                    
                    UnassignedIssuesAllowed.Equals(other.UnassignedIssuesAllowed)
                ) && 
                (
                    VotingEnabled == other.VotingEnabled ||
                    
                    VotingEnabled.Equals(other.VotingEnabled)
                ) && 
                (
                    WatchingEnabled == other.WatchingEnabled ||
                    
                    WatchingEnabled.Equals(other.WatchingEnabled)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AttachmentsEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IssueLinkingEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + SubTasksEnabled.GetHashCode();
                    if (TimeTrackingConfiguration != null)
                    hashCode = hashCode * 59 + TimeTrackingConfiguration.GetHashCode();
                    
                    hashCode = hashCode * 59 + TimeTrackingEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + UnassignedIssuesAllowed.GetHashCode();
                    
                    hashCode = hashCode * 59 + VotingEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + WatchingEnabled.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelConfiguration left, ModelConfiguration right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelConfiguration left, ModelConfiguration right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
