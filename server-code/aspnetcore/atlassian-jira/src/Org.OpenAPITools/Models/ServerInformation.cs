/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about the Jira instance.
    /// </summary>
    [DataContract]
    public partial class ServerInformation : IEquatable<ServerInformation>
    {
        /// <summary>
        /// The base URL of the Jira instance.
        /// </summary>
        /// <value>The base URL of the Jira instance.</value>
        [DataMember(Name="baseUrl", EmitDefaultValue=false)]
        public string BaseUrl { get; set; }

        /// <summary>
        /// The timestamp when the Jira version was built.
        /// </summary>
        /// <value>The timestamp when the Jira version was built.</value>
        [DataMember(Name="buildDate", EmitDefaultValue=false)]
        public DateTime BuildDate { get; set; }

        /// <summary>
        /// The build number of the Jira version.
        /// </summary>
        /// <value>The build number of the Jira version.</value>
        [DataMember(Name="buildNumber", EmitDefaultValue=true)]
        public int BuildNumber { get; set; }

        /// <summary>
        /// The type of server deployment. This is always returned as *Cloud*.
        /// </summary>
        /// <value>The type of server deployment. This is always returned as *Cloud*.</value>
        [DataMember(Name="deploymentType", EmitDefaultValue=false)]
        public string DeploymentType { get; set; }

        /// <summary>
        /// Jira instance health check results. Deprecated and no longer returned.
        /// </summary>
        /// <value>Jira instance health check results. Deprecated and no longer returned.</value>
        [DataMember(Name="healthChecks", EmitDefaultValue=false)]
        public List<HealthCheckResult> HealthChecks { get; set; }

        /// <summary>
        /// The unique identifier of the Jira version.
        /// </summary>
        /// <value>The unique identifier of the Jira version.</value>
        [DataMember(Name="scmInfo", EmitDefaultValue=false)]
        public string ScmInfo { get; set; }

        /// <summary>
        /// The time in Jira when this request was responded to.
        /// </summary>
        /// <value>The time in Jira when this request was responded to.</value>
        [DataMember(Name="serverTime", EmitDefaultValue=false)]
        public DateTime ServerTime { get; set; }

        /// <summary>
        /// The name of the Jira instance.
        /// </summary>
        /// <value>The name of the Jira instance.</value>
        [DataMember(Name="serverTitle", EmitDefaultValue=false)]
        public string ServerTitle { get; set; }

        /// <summary>
        /// The version of Jira.
        /// </summary>
        /// <value>The version of Jira.</value>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// The major, minor, and revision version numbers of the Jira version.
        /// </summary>
        /// <value>The major, minor, and revision version numbers of the Jira version.</value>
        [DataMember(Name="versionNumbers", EmitDefaultValue=false)]
        public List<int> VersionNumbers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ServerInformation {\n");
            sb.Append("  BaseUrl: ").Append(BaseUrl).Append("\n");
            sb.Append("  BuildDate: ").Append(BuildDate).Append("\n");
            sb.Append("  BuildNumber: ").Append(BuildNumber).Append("\n");
            sb.Append("  DeploymentType: ").Append(DeploymentType).Append("\n");
            sb.Append("  HealthChecks: ").Append(HealthChecks).Append("\n");
            sb.Append("  ScmInfo: ").Append(ScmInfo).Append("\n");
            sb.Append("  ServerTime: ").Append(ServerTime).Append("\n");
            sb.Append("  ServerTitle: ").Append(ServerTitle).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  VersionNumbers: ").Append(VersionNumbers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ServerInformation)obj);
        }

        /// <summary>
        /// Returns true if ServerInformation instances are equal
        /// </summary>
        /// <param name="other">Instance of ServerInformation to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ServerInformation other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseUrl == other.BaseUrl ||
                    BaseUrl != null &&
                    BaseUrl.Equals(other.BaseUrl)
                ) && 
                (
                    BuildDate == other.BuildDate ||
                    BuildDate != null &&
                    BuildDate.Equals(other.BuildDate)
                ) && 
                (
                    BuildNumber == other.BuildNumber ||
                    
                    BuildNumber.Equals(other.BuildNumber)
                ) && 
                (
                    DeploymentType == other.DeploymentType ||
                    DeploymentType != null &&
                    DeploymentType.Equals(other.DeploymentType)
                ) && 
                (
                    HealthChecks == other.HealthChecks ||
                    HealthChecks != null &&
                    other.HealthChecks != null &&
                    HealthChecks.SequenceEqual(other.HealthChecks)
                ) && 
                (
                    ScmInfo == other.ScmInfo ||
                    ScmInfo != null &&
                    ScmInfo.Equals(other.ScmInfo)
                ) && 
                (
                    ServerTime == other.ServerTime ||
                    ServerTime != null &&
                    ServerTime.Equals(other.ServerTime)
                ) && 
                (
                    ServerTitle == other.ServerTitle ||
                    ServerTitle != null &&
                    ServerTitle.Equals(other.ServerTitle)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    VersionNumbers == other.VersionNumbers ||
                    VersionNumbers != null &&
                    other.VersionNumbers != null &&
                    VersionNumbers.SequenceEqual(other.VersionNumbers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BaseUrl != null)
                    hashCode = hashCode * 59 + BaseUrl.GetHashCode();
                    if (BuildDate != null)
                    hashCode = hashCode * 59 + BuildDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + BuildNumber.GetHashCode();
                    if (DeploymentType != null)
                    hashCode = hashCode * 59 + DeploymentType.GetHashCode();
                    if (HealthChecks != null)
                    hashCode = hashCode * 59 + HealthChecks.GetHashCode();
                    if (ScmInfo != null)
                    hashCode = hashCode * 59 + ScmInfo.GetHashCode();
                    if (ServerTime != null)
                    hashCode = hashCode * 59 + ServerTime.GetHashCode();
                    if (ServerTitle != null)
                    hashCode = hashCode * 59 + ServerTitle.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (VersionNumbers != null)
                    hashCode = hashCode * 59 + VersionNumbers.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ServerInformation left, ServerInformation right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ServerInformation left, ServerInformation right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
