/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * The version of the OpenAPI document: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The metadata describing an issue field.
    /// </summary>
    [DataContract]
    public partial class FieldMetadata : IEquatable<FieldMetadata>
    {
        /// <summary>
        /// The list of values allowed in the field.
        /// </summary>
        /// <value>The list of values allowed in the field.</value>
        [DataMember(Name="allowedValues", EmitDefaultValue=false)]
        public List<Object> AllowedValues { get; set; }

        /// <summary>
        /// The URL that can be used to automatically complete the field.
        /// </summary>
        /// <value>The URL that can be used to automatically complete the field.</value>
        [DataMember(Name="autoCompleteUrl", EmitDefaultValue=false)]
        public string AutoCompleteUrl { get; set; }

        /// <summary>
        /// The configuration properties.
        /// </summary>
        /// <value>The configuration properties.</value>
        [DataMember(Name="configuration", EmitDefaultValue=false)]
        public Dictionary<string, Object> VarConfiguration { get; set; }

        /// <summary>
        /// The default value of the field.
        /// </summary>
        /// <value>The default value of the field.</value>
        [DataMember(Name="defaultValue", EmitDefaultValue=true)]
        public Object DefaultValue { get; set; }

        /// <summary>
        /// Whether the field has a default value.
        /// </summary>
        /// <value>Whether the field has a default value.</value>
        [DataMember(Name="hasDefaultValue", EmitDefaultValue=true)]
        public bool HasDefaultValue { get; set; }

        /// <summary>
        /// The key of the field.
        /// </summary>
        /// <value>The key of the field.</value>
        [Required]
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// The name of the field.
        /// </summary>
        /// <value>The name of the field.</value>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The list of operations that can be performed on the field.
        /// </summary>
        /// <value>The list of operations that can be performed on the field.</value>
        [Required]
        [DataMember(Name="operations", EmitDefaultValue=false)]
        public List<string> Operations { get; set; }

        /// <summary>
        /// Whether the field is required.
        /// </summary>
        /// <value>Whether the field is required.</value>
        [Required]
        [DataMember(Name="required", EmitDefaultValue=true)]
        public bool Required { get; set; }

        /// <summary>
        /// Gets or Sets Schema
        /// </summary>
        [Required]
        [DataMember(Name="schema", EmitDefaultValue=false)]
        public FieldMetadataSchema Schema { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FieldMetadata {\n");
            sb.Append("  AllowedValues: ").Append(AllowedValues).Append("\n");
            sb.Append("  AutoCompleteUrl: ").Append(AutoCompleteUrl).Append("\n");
            sb.Append("  VarConfiguration: ").Append(VarConfiguration).Append("\n");
            sb.Append("  DefaultValue: ").Append(DefaultValue).Append("\n");
            sb.Append("  HasDefaultValue: ").Append(HasDefaultValue).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Operations: ").Append(Operations).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  Schema: ").Append(Schema).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FieldMetadata)obj);
        }

        /// <summary>
        /// Returns true if FieldMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of FieldMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FieldMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowedValues == other.AllowedValues ||
                    AllowedValues != null &&
                    other.AllowedValues != null &&
                    AllowedValues.SequenceEqual(other.AllowedValues)
                ) && 
                (
                    AutoCompleteUrl == other.AutoCompleteUrl ||
                    AutoCompleteUrl != null &&
                    AutoCompleteUrl.Equals(other.AutoCompleteUrl)
                ) && 
                (
                    VarConfiguration == other.VarConfiguration ||
                    VarConfiguration != null &&
                    other.VarConfiguration != null &&
                    VarConfiguration.SequenceEqual(other.VarConfiguration)
                ) && 
                (
                    DefaultValue == other.DefaultValue ||
                    DefaultValue != null &&
                    DefaultValue.Equals(other.DefaultValue)
                ) && 
                (
                    HasDefaultValue == other.HasDefaultValue ||
                    
                    HasDefaultValue.Equals(other.HasDefaultValue)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Operations == other.Operations ||
                    Operations != null &&
                    other.Operations != null &&
                    Operations.SequenceEqual(other.Operations)
                ) && 
                (
                    Required == other.Required ||
                    
                    Required.Equals(other.Required)
                ) && 
                (
                    Schema == other.Schema ||
                    Schema != null &&
                    Schema.Equals(other.Schema)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AllowedValues != null)
                    hashCode = hashCode * 59 + AllowedValues.GetHashCode();
                    if (AutoCompleteUrl != null)
                    hashCode = hashCode * 59 + AutoCompleteUrl.GetHashCode();
                    if (VarConfiguration != null)
                    hashCode = hashCode * 59 + VarConfiguration.GetHashCode();
                    if (DefaultValue != null)
                    hashCode = hashCode * 59 + DefaultValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasDefaultValue.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Operations != null)
                    hashCode = hashCode * 59 + Operations.GetHashCode();
                    
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (Schema != null)
                    hashCode = hashCode * 59 + Schema.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FieldMetadata left, FieldMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FieldMetadata left, FieldMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
