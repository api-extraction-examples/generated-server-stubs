/*
 * Twilio - Notify
 *
 * This is the public Twilio REST API.
 *
 * The version of the OpenAPI document: 1.52.0
 * Contact: support@twilio.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class NotifyV1Credential : IEquatable<NotifyV1Credential>
    {
        /// <summary>
        /// The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Credential resource.
        /// </summary>
        /// <value>The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Credential resource.</value>
        [RegularExpression("^AC[0-9a-fA-F]{32}$")]
        [StringLength(34, MinimumLength=34)]
        [DataMember(Name="account_sid", EmitDefaultValue=true)]
        public string AccountSid { get; set; }

        /// <summary>
        /// The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
        /// </summary>
        /// <value>The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.</value>
        [DataMember(Name="date_created", EmitDefaultValue=true)]
        public DateTime? DateCreated { get; set; }

        /// <summary>
        /// The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.
        /// </summary>
        /// <value>The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.</value>
        [DataMember(Name="date_updated", EmitDefaultValue=true)]
        public DateTime? DateUpdated { get; set; }

        /// <summary>
        /// The string that you assigned to describe the resource.
        /// </summary>
        /// <value>The string that you assigned to describe the resource.</value>
        [DataMember(Name="friendly_name", EmitDefaultValue=true)]
        public string FriendlyName { get; set; }

        /// <summary>
        /// [APN only] Whether to send the credential to sandbox APNs. Can be &#x60;true&#x60; to send to sandbox APNs or &#x60;false&#x60; to send to production.
        /// </summary>
        /// <value>[APN only] Whether to send the credential to sandbox APNs. Can be &#x60;true&#x60; to send to sandbox APNs or &#x60;false&#x60; to send to production.</value>
        [DataMember(Name="sandbox", EmitDefaultValue=true)]
        public string Sandbox { get; set; }

        /// <summary>
        /// The unique string that we created to identify the Credential resource.
        /// </summary>
        /// <value>The unique string that we created to identify the Credential resource.</value>
        [RegularExpression("^CR[0-9a-fA-F]{32}$")]
        [StringLength(34, MinimumLength=34)]
        [DataMember(Name="sid", EmitDefaultValue=true)]
        public string Sid { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public CredentialEnumPushService Type { get; set; }

        /// <summary>
        /// The absolute URL of the Credential resource.
        /// </summary>
        /// <value>The absolute URL of the Credential resource.</value>
        [DataMember(Name="url", EmitDefaultValue=true)]
        public string Url { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NotifyV1Credential {\n");
            sb.Append("  AccountSid: ").Append(AccountSid).Append("\n");
            sb.Append("  DateCreated: ").Append(DateCreated).Append("\n");
            sb.Append("  DateUpdated: ").Append(DateUpdated).Append("\n");
            sb.Append("  FriendlyName: ").Append(FriendlyName).Append("\n");
            sb.Append("  Sandbox: ").Append(Sandbox).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((NotifyV1Credential)obj);
        }

        /// <summary>
        /// Returns true if NotifyV1Credential instances are equal
        /// </summary>
        /// <param name="other">Instance of NotifyV1Credential to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NotifyV1Credential other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AccountSid == other.AccountSid ||
                    AccountSid != null &&
                    AccountSid.Equals(other.AccountSid)
                ) && 
                (
                    DateCreated == other.DateCreated ||
                    DateCreated != null &&
                    DateCreated.Equals(other.DateCreated)
                ) && 
                (
                    DateUpdated == other.DateUpdated ||
                    DateUpdated != null &&
                    DateUpdated.Equals(other.DateUpdated)
                ) && 
                (
                    FriendlyName == other.FriendlyName ||
                    FriendlyName != null &&
                    FriendlyName.Equals(other.FriendlyName)
                ) && 
                (
                    Sandbox == other.Sandbox ||
                    Sandbox != null &&
                    Sandbox.Equals(other.Sandbox)
                ) && 
                (
                    Sid == other.Sid ||
                    Sid != null &&
                    Sid.Equals(other.Sid)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AccountSid != null)
                    hashCode = hashCode * 59 + AccountSid.GetHashCode();
                    if (DateCreated != null)
                    hashCode = hashCode * 59 + DateCreated.GetHashCode();
                    if (DateUpdated != null)
                    hashCode = hashCode * 59 + DateUpdated.GetHashCode();
                    if (FriendlyName != null)
                    hashCode = hashCode * 59 + FriendlyName.GetHashCode();
                    if (Sandbox != null)
                    hashCode = hashCode * 59 + Sandbox.GetHashCode();
                    if (Sid != null)
                    hashCode = hashCode * 59 + Sid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(NotifyV1Credential left, NotifyV1Credential right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(NotifyV1Credential left, NotifyV1Credential right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
