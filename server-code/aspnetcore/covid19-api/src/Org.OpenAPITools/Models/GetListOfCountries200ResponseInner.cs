/*
 * COVID-19 data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetListOfCountries200ResponseInner : IEquatable<GetListOfCountries200ResponseInner>
    {
        /// <summary>
        /// Gets or Sets Alpha2Code
        /// </summary>
        [DataMember(Name="alpha-2-code", EmitDefaultValue=false)]
        public string Alpha2Code { get; set; }

        /// <summary>
        /// Gets or Sets Alpha3Code
        /// </summary>
        [DataMember(Name="alpha-3-code", EmitDefaultValue=false)]
        public string Alpha3Code { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name="latitude", EmitDefaultValue=true)]
        public float Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name="longitude", EmitDefaultValue=true)]
        public float Longitude { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetListOfCountries200ResponseInner {\n");
            sb.Append("  Alpha2Code: ").Append(Alpha2Code).Append("\n");
            sb.Append("  Alpha3Code: ").Append(Alpha3Code).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetListOfCountries200ResponseInner)obj);
        }

        /// <summary>
        /// Returns true if GetListOfCountries200ResponseInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GetListOfCountries200ResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetListOfCountries200ResponseInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Alpha2Code == other.Alpha2Code ||
                    Alpha2Code != null &&
                    Alpha2Code.Equals(other.Alpha2Code)
                ) && 
                (
                    Alpha3Code == other.Alpha3Code ||
                    Alpha3Code != null &&
                    Alpha3Code.Equals(other.Alpha3Code)
                ) && 
                (
                    Latitude == other.Latitude ||
                    
                    Latitude.Equals(other.Latitude)
                ) && 
                (
                    Longitude == other.Longitude ||
                    
                    Longitude.Equals(other.Longitude)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Alpha2Code != null)
                    hashCode = hashCode * 59 + Alpha2Code.GetHashCode();
                    if (Alpha3Code != null)
                    hashCode = hashCode * 59 + Alpha3Code.GetHashCode();
                    
                    hashCode = hashCode * 59 + Latitude.GetHashCode();
                    
                    hashCode = hashCode * 59 + Longitude.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetListOfCountries200ResponseInner left, GetListOfCountries200ResponseInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetListOfCountries200ResponseInner left, GetListOfCountries200ResponseInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
