/*
 * COVID-19 data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.6
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GetDailyReportTotals200ResponseInner : IEquatable<GetDailyReportTotals200ResponseInner>
    {
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public int Active { get; set; }

        /// <summary>
        /// Gets or Sets Confirmed
        /// </summary>
        [DataMember(Name="confirmed", EmitDefaultValue=true)]
        public int Confirmed { get; set; }

        /// <summary>
        /// Gets or Sets Critical
        /// </summary>
        [DataMember(Name="critical", EmitDefaultValue=true)]
        public int Critical { get; set; }

        /// <summary>
        /// Gets or Sets Date
        /// </summary>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets Deaths
        /// </summary>
        [DataMember(Name="deaths", EmitDefaultValue=true)]
        public int Deaths { get; set; }

        /// <summary>
        /// Gets or Sets Recovered
        /// </summary>
        [DataMember(Name="recovered", EmitDefaultValue=true)]
        public int Recovered { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GetDailyReportTotals200ResponseInner {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Confirmed: ").Append(Confirmed).Append("\n");
            sb.Append("  Critical: ").Append(Critical).Append("\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  Deaths: ").Append(Deaths).Append("\n");
            sb.Append("  Recovered: ").Append(Recovered).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GetDailyReportTotals200ResponseInner)obj);
        }

        /// <summary>
        /// Returns true if GetDailyReportTotals200ResponseInner instances are equal
        /// </summary>
        /// <param name="other">Instance of GetDailyReportTotals200ResponseInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GetDailyReportTotals200ResponseInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    Confirmed == other.Confirmed ||
                    
                    Confirmed.Equals(other.Confirmed)
                ) && 
                (
                    Critical == other.Critical ||
                    
                    Critical.Equals(other.Critical)
                ) && 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    Deaths == other.Deaths ||
                    
                    Deaths.Equals(other.Deaths)
                ) && 
                (
                    Recovered == other.Recovered ||
                    
                    Recovered.Equals(other.Recovered)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    
                    hashCode = hashCode * 59 + Confirmed.GetHashCode();
                    
                    hashCode = hashCode * 59 + Critical.GetHashCode();
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    
                    hashCode = hashCode * 59 + Deaths.GetHashCode();
                    
                    hashCode = hashCode * 59 + Recovered.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GetDailyReportTotals200ResponseInner left, GetDailyReportTotals200ResponseInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GetDailyReportTotals200ResponseInner left, GetDailyReportTotals200ResponseInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
