/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class KycApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt;This method was originally created to see which onboarding requirements were still pending for sellers being onboarded for eBay managed payments, but now that all seller accounts are onboarded globally, this method should now just returne an empty payload with a &lt;code&gt;204 No Content&lt;/code&gt; HTTP status code. &lt;/span&gt;</remarks>
        /// <response code="200">OK</response>
        /// <response code="204">No Content</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/sell/account/v1/kyc")]
        [ValidateModelState]
        [SwaggerOperation("GetKYC")]
        [SwaggerResponse(statusCode: 200, type: typeof(KycResponse), description: "OK")]
        public virtual IActionResult GetKYC()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(KycResponse));
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"kycChecks\" : [ {\n    \"dataRequired\" : \"dataRequired\",\n    \"alert\" : \"alert\",\n    \"remedyUrl\" : \"remedyUrl\",\n    \"dueDate\" : \"dueDate\",\n    \"detailMessage\" : \"detailMessage\"\n  }, {\n    \"dataRequired\" : \"dataRequired\",\n    \"alert\" : \"alert\",\n    \"remedyUrl\" : \"remedyUrl\",\n    \"dueDate\" : \"dueDate\",\n    \"detailMessage\" : \"detailMessage\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<KycResponse>(exampleJson)
            : default(KycResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
