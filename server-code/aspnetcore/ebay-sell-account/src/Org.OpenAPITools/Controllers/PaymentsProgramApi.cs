/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PaymentsProgramApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; This method is no longer applicable, as all seller accounts globally have been enabled for the new eBay payment and checkout flow.&lt;/span&gt;&lt;br/&gt;&lt;br/&gt;This method returns whether or not the user is opted-in to the specified payments program. Sellers opt-in to payments programs by marketplace and you use the &lt;b&gt;marketplace_id&lt;/b&gt; path parameter to specify the marketplace of the status flag you want returned.</remarks>
        /// <param name="marketplaceId">This path parameter specifies the eBay marketplace of the payments program for which you want to retrieve the seller&#39;s status.</param>
        /// <param name="paymentsProgramType">This path parameter specifies the payments program whose status is returned by the call.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/sell/account/v1/payments_program/{marketplace_id}/{payments_program_type}")]
        [ValidateModelState]
        [SwaggerOperation("GetPaymentsProgram")]
        [SwaggerResponse(statusCode: 200, type: typeof(PaymentsProgramResponse), description: "Success")]
        public virtual IActionResult GetPaymentsProgram([FromRoute (Name = "marketplace_id")][Required]string marketplaceId, [FromRoute (Name = "payments_program_type")][Required]string paymentsProgramType)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PaymentsProgramResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"marketplaceId\" : \"marketplaceId\",\n  \"wasPreviouslyOptedIn\" : true,\n  \"paymentsProgramType\" : \"paymentsProgramType\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PaymentsProgramResponse>(exampleJson)
            : default(PaymentsProgramResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
