/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SubscriptionApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This method retrieves a list of subscriptions associated with the seller account.</remarks>
        /// <param name="limit">This field is for future use.</param>
        /// <param name="continuationToken">This field is for future use.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/sell/account/v1/subscription")]
        [ValidateModelState]
        [SwaggerOperation("GetSubscription")]
        [SwaggerResponse(statusCode: 200, type: typeof(SubscriptionResponse), description: "Success")]
        public virtual IActionResult GetSubscription([FromQuery (Name = "limit")]string limit, [FromQuery (Name = "continuation_token")]string continuationToken)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SubscriptionResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"next\" : \"next\",\n  \"subscriptions\" : [ {\n    \"marketplaceId\" : \"marketplaceId\",\n    \"subscriptionLevel\" : \"subscriptionLevel\",\n    \"subscriptionType\" : \"subscriptionType\",\n    \"term\" : {\n      \"unit\" : \"unit\",\n      \"value\" : 0\n    },\n    \"subscriptionId\" : \"subscriptionId\"\n  }, {\n    \"marketplaceId\" : \"marketplaceId\",\n    \"subscriptionLevel\" : \"subscriptionLevel\",\n    \"subscriptionType\" : \"subscriptionType\",\n    \"term\" : {\n      \"unit\" : \"unit\",\n      \"value\" : 0\n    },\n    \"subscriptionId\" : \"subscriptionId\"\n  } ],\n  \"total\" : 6,\n  \"limit\" : 0,\n  \"href\" : \"href\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SubscriptionResponse>(exampleJson)
            : default(SubscriptionResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
