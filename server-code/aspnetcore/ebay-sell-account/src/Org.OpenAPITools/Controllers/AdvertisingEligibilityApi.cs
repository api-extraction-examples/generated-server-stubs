/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class AdvertisingEligibilityApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>This method allows developers to check the seller eligibility status for eBay advertising programs.</remarks>
        /// <param name="X_EBAY_C_MARKETPLACE_ID">The unique identifier of the eBay marketplace for which the seller eligibility status shall be checked.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; This value is case-sensitive.&lt;/span&gt;</param>
        /// <param name="programTypes">A comma-separated list of eBay advertising programs.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Tip:&lt;/b&gt; See the &lt;a href&#x3D;\&quot;/api-docs/sell/account/types/plser:AdvertisingProgramEnum\&quot;&gt; AdvertisingProgramEnum&lt;/a&gt; type for possible values.&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;If no programs are specified, the results will be returned for all programs.</param>
        /// <response code="200">Success</response>
        /// <response code="400">Bad Request</response>
        /// <response code="500">Internal Server Error</response>
        [HttpGet]
        [Route("/sell/account/v1/advertising_eligibility")]
        [ValidateModelState]
        [SwaggerOperation("GetAdvertisingEligibility")]
        [SwaggerResponse(statusCode: 200, type: typeof(SellerEligibilityMultiProgramResponse), description: "Success")]
        public virtual IActionResult GetAdvertisingEligibility([FromHeader (Name = "X-EBAY-C-MARKETPLACE-ID")][Required()]string X_EBAY_C_MARKETPLACE_ID, [FromQuery (Name = "program_types")]string programTypes)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SellerEligibilityMultiProgramResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "{\n  \"advertisingEligibility\" : [ {\n    \"reason\" : \"reason\",\n    \"programType\" : \"programType\",\n    \"status\" : \"status\"\n  }, {\n    \"reason\" : \"reason\",\n    \"programType\" : \"programType\",\n    \"status\" : \"status\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SellerEligibilityMultiProgramResponse>(exampleJson)
            : default(SellerEligibilityMultiProgramResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
