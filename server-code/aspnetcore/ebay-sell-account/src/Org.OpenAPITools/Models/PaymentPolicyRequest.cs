/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This root container defines a seller&#39;s payment business policy for a specific marketplace and category group. This type is used when creating or updating a payment business policy.
    /// </summary>
    [DataContract]
    public partial class PaymentPolicyRequest : IEquatable<PaymentPolicyRequest>
    {
        /// <summary>
        /// This container is used to specify whether the payment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
        /// </summary>
        /// <value>This container is used to specify whether the payment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.</value>
        [DataMember(Name="categoryTypes", EmitDefaultValue=false)]
        public List<CategoryType> CategoryTypes { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="deposit", EmitDefaultValue=false)]
        public Deposit Deposit { get; set; }

        /// <summary>
        /// A seller-defined description of the payment business policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250
        /// </summary>
        /// <value>A seller-defined description of the payment business policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FullPaymentDueIn
        /// </summary>
        [DataMember(Name="fullPaymentDueIn", EmitDefaultValue=false)]
        public TimeDuration FullPaymentDueIn { get; set; }

        /// <summary>
        /// This field should be included and set to &lt;code&gt;true&lt;/code&gt; if the seller wants to require immediate payment from the buyer for: &lt;ul&gt;&lt;li&gt;A fixed-price item&lt;/li&gt;&lt;li&gt;An auction item where the buyer is using the &#39;Buy it Now&#39; option&lt;/li&gt;&lt;li&gt;A deposit for a motor vehicle listing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Default:&lt;/b&gt; False
        /// </summary>
        /// <value>This field should be included and set to &lt;code&gt;true&lt;/code&gt; if the seller wants to require immediate payment from the buyer for: &lt;ul&gt;&lt;li&gt;A fixed-price item&lt;/li&gt;&lt;li&gt;An auction item where the buyer is using the &#39;Buy it Now&#39; option&lt;/li&gt;&lt;li&gt;A deposit for a motor vehicle listing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;&lt;b&gt;Default:&lt;/b&gt; False</value>
        [DataMember(Name="immediatePay", EmitDefaultValue=true)]
        public bool ImmediatePay { get; set; }

        /// <summary>
        /// The ID of the eBay marketplace to which this payment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The ID of the eBay marketplace to which this payment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A seller-defined name for this payment business policy. Names must be unique for policies assigned to the same marketplace.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Max length:&lt;/b&gt; 64
        /// </summary>
        /// <value>A seller-defined name for this payment business policy. Names must be unique for policies assigned to the same marketplace.&lt;br /&gt;&lt;br /&gt;&lt;b&gt;Max length:&lt;/b&gt; 64</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; DO NOT USE THIS FIELD. Payment instructions are no longer supported by payment business policies.&lt;/p&gt;A free-form string field that allows sellers to add detailed payment instructions to their listings.
        /// </summary>
        /// <value>&lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; DO NOT USE THIS FIELD. Payment instructions are no longer supported by payment business policies.&lt;/p&gt;A free-form string field that allows sellers to add detailed payment instructions to their listings.</value>
        [DataMember(Name="paymentInstructions", EmitDefaultValue=false)]
        public string PaymentInstructions { get; set; }

        /// <summary>
        /// &lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; This field applies only when the seller needs to specify one or more offline payment methods. eBay now manages the electronic payment options available to buyers to pay for the item.&lt;/p&gt;This array is used to specify one or more offline payment methods that will be accepted for payment that occurs off of eBay&#39;s platform.
        /// </summary>
        /// <value>&lt;p class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note:&lt;/b&gt; This field applies only when the seller needs to specify one or more offline payment methods. eBay now manages the electronic payment options available to buyers to pay for the item.&lt;/p&gt;This array is used to specify one or more offline payment methods that will be accepted for payment that occurs off of eBay&#39;s platform.</value>
        [DataMember(Name="paymentMethods", EmitDefaultValue=false)]
        public List<PaymentMethod> PaymentMethods { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPolicyRequest {\n");
            sb.Append("  CategoryTypes: ").Append(CategoryTypes).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FullPaymentDueIn: ").Append(FullPaymentDueIn).Append("\n");
            sb.Append("  ImmediatePay: ").Append(ImmediatePay).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentPolicyRequest)obj);
        }

        /// <summary>
        /// Returns true if PaymentPolicyRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentPolicyRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPolicyRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryTypes == other.CategoryTypes ||
                    CategoryTypes != null &&
                    other.CategoryTypes != null &&
                    CategoryTypes.SequenceEqual(other.CategoryTypes)
                ) && 
                (
                    Deposit == other.Deposit ||
                    Deposit != null &&
                    Deposit.Equals(other.Deposit)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FullPaymentDueIn == other.FullPaymentDueIn ||
                    FullPaymentDueIn != null &&
                    FullPaymentDueIn.Equals(other.FullPaymentDueIn)
                ) && 
                (
                    ImmediatePay == other.ImmediatePay ||
                    
                    ImmediatePay.Equals(other.ImmediatePay)
                ) && 
                (
                    MarketplaceId == other.MarketplaceId ||
                    MarketplaceId != null &&
                    MarketplaceId.Equals(other.MarketplaceId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PaymentInstructions == other.PaymentInstructions ||
                    PaymentInstructions != null &&
                    PaymentInstructions.Equals(other.PaymentInstructions)
                ) && 
                (
                    PaymentMethods == other.PaymentMethods ||
                    PaymentMethods != null &&
                    other.PaymentMethods != null &&
                    PaymentMethods.SequenceEqual(other.PaymentMethods)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryTypes != null)
                    hashCode = hashCode * 59 + CategoryTypes.GetHashCode();
                    if (Deposit != null)
                    hashCode = hashCode * 59 + Deposit.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (FullPaymentDueIn != null)
                    hashCode = hashCode * 59 + FullPaymentDueIn.GetHashCode();
                    
                    hashCode = hashCode * 59 + ImmediatePay.GetHashCode();
                    if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PaymentInstructions != null)
                    hashCode = hashCode * 59 + PaymentInstructions.GetHashCode();
                    if (PaymentMethods != null)
                    hashCode = hashCode * 59 + PaymentMethods.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentPolicyRequest left, PaymentPolicyRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentPolicyRequest left, PaymentPolicyRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
