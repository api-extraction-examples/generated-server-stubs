/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type is used to define specific shipping regions. There are four &#39;levels&#39; of shipping regions, including large geographical regions (like &#39;Asia&#39;, &#39;Europe&#39;, or &#39;Middle East&#39;), individual countries, US states or Canadian provinces, and special locations/domestic regions within a country (like &#39;Alaska/Hawaii&#39; or &#39;PO Box&#39;).
    /// </summary>
    [DataContract]
    public partial class Region : IEquatable<Region>
    {
        /// <summary>
        /// A string that indicates the name of a region, as defined by eBay. A \&quot;region\&quot; can be either a &#39;world region&#39; (e.g., the \&quot;Middle East\&quot; or \&quot;Southeast Asia\&quot;), a country (represented with a two-letter country code), a state or province (represented with a two-letter code), or a special domestic region within a country. &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;GeteBayDetails&lt;/b&gt; call in the Trading API can be used to retrieve the world regions and special domestic regions within a specific country. To get these enumeration values, call &lt;b&gt;GeteBayDetails&lt;/b&gt; with the &lt;b&gt;DetailName&lt;/b&gt; value set to &lt;b&gt;ExcludeShippingLocationDetails&lt;/b&gt;.
        /// </summary>
        /// <value>A string that indicates the name of a region, as defined by eBay. A \&quot;region\&quot; can be either a &#39;world region&#39; (e.g., the \&quot;Middle East\&quot; or \&quot;Southeast Asia\&quot;), a country (represented with a two-letter country code), a state or province (represented with a two-letter code), or a special domestic region within a country. &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;GeteBayDetails&lt;/b&gt; call in the Trading API can be used to retrieve the world regions and special domestic regions within a specific country. To get these enumeration values, call &lt;b&gt;GeteBayDetails&lt;/b&gt; with the &lt;b&gt;DetailName&lt;/b&gt; value set to &lt;b&gt;ExcludeShippingLocationDetails&lt;/b&gt;.</value>
        [DataMember(Name="regionName", EmitDefaultValue=false)]
        public string RegionName { get; set; }

        /// <summary>
        /// Reserved for future use. &lt;!- -The region&#39;s type, which can be one of the following: &#39;COUNTRY&#39;, &#39;COUNTRY_REGION&#39;, &#39;STATE_OR_PROVINCE&#39;, &#39;WORLD_REGION&#39;, or &#39;WORLDWIDE&#39;.- -&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:RegionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>Reserved for future use. &lt;!- -The region&#39;s type, which can be one of the following: &#39;COUNTRY&#39;, &#39;COUNTRY_REGION&#39;, &#39;STATE_OR_PROVINCE&#39;, &#39;WORLD_REGION&#39;, or &#39;WORLDWIDE&#39;.- -&gt; For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:RegionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="regionType", EmitDefaultValue=false)]
        public string RegionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Region {\n");
            sb.Append("  RegionName: ").Append(RegionName).Append("\n");
            sb.Append("  RegionType: ").Append(RegionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Region)obj);
        }

        /// <summary>
        /// Returns true if Region instances are equal
        /// </summary>
        /// <param name="other">Instance of Region to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Region other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegionName == other.RegionName ||
                    RegionName != null &&
                    RegionName.Equals(other.RegionName)
                ) && 
                (
                    RegionType == other.RegionType ||
                    RegionType != null &&
                    RegionType.Equals(other.RegionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegionName != null)
                    hashCode = hashCode * 59 + RegionName.GetHashCode();
                    if (RegionType != null)
                    hashCode = hashCode * 59 + RegionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Region left, Region right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Region left, Region right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
