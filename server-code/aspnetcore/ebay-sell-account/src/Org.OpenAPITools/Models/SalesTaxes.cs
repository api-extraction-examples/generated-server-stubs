/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type is used by the root response of the &lt;b&gt;getSalesTaxes&lt;/b&gt; method.
    /// </summary>
    [DataContract]
    public partial class SalesTaxes : IEquatable<SalesTaxes>
    {
        /// <summary>
        /// An array of one or more sales tax rate entries for a specific marketplace (or all applicable marketplaces if the &lt;b&gt;country_code&lt;/b&gt; query parameter is not used.&lt;br&gt;&lt;br&gt;If no sales tax rate entries are set up, no response payload is returned, but only an HTTP status code of &lt;code&gt;204 No Content&lt;/code&gt;.
        /// </summary>
        /// <value>An array of one or more sales tax rate entries for a specific marketplace (or all applicable marketplaces if the &lt;b&gt;country_code&lt;/b&gt; query parameter is not used.&lt;br&gt;&lt;br&gt;If no sales tax rate entries are set up, no response payload is returned, but only an HTTP status code of &lt;code&gt;204 No Content&lt;/code&gt;.</value>
        [DataMember(Name="salesTaxes", EmitDefaultValue=false)]
        public List<SalesTax> VarSalesTaxes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SalesTaxes {\n");
            sb.Append("  VarSalesTaxes: ").Append(VarSalesTaxes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SalesTaxes)obj);
        }

        /// <summary>
        /// Returns true if SalesTaxes instances are equal
        /// </summary>
        /// <param name="other">Instance of SalesTaxes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SalesTaxes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    VarSalesTaxes == other.VarSalesTaxes ||
                    VarSalesTaxes != null &&
                    other.VarSalesTaxes != null &&
                    VarSalesTaxes.SequenceEqual(other.VarSalesTaxes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (VarSalesTaxes != null)
                    hashCode = hashCode * 59 + VarSalesTaxes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SalesTaxes left, SalesTaxes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SalesTaxes left, SalesTaxes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
