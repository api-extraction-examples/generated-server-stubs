/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Complex type that that gets populated with a response containing a fulfillment policy.
    /// </summary>
    [DataContract]
    public partial class SetFulfillmentPolicyResponse : IEquatable<SetFulfillmentPolicyResponse>
    {
        /// <summary>
        /// This container indicates whether the fulfillment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
        /// </summary>
        /// <value>This container indicates whether the fulfillment business policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.</value>
        [DataMember(Name="categoryTypes", EmitDefaultValue=false)]
        public List<CategoryType> CategoryTypes { get; set; }

        /// <summary>
        /// A seller-defined description of the fulfillment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages. This field is returned if set for the policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250
        /// </summary>
        /// <value>A seller-defined description of the fulfillment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages. This field is returned if set for the policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers freight shipping. Freight shipping can be used for large items over 150 lbs.
        /// </summary>
        /// <value>If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers freight shipping. Freight shipping can be used for large items over 150 lbs.</value>
        [DataMember(Name="freightShipping", EmitDefaultValue=true)]
        public bool FreightShipping { get; set; }

        /// <summary>
        /// A unique eBay-assigned ID for a fulfillment business policy. This ID is generated when the policy is created.
        /// </summary>
        /// <value>A unique eBay-assigned ID for a fulfillment business policy. This ID is generated when the policy is created.</value>
        [DataMember(Name="fulfillmentPolicyId", EmitDefaultValue=false)]
        public string FulfillmentPolicyId { get; set; }

        /// <summary>
        /// If returned as &lt;code&gt;true&lt;/code&gt;, the eBay Global Shipping Program will be used by the seller to ship items to international locations.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: On the US marketplace, the &lt;em&gt;&lt;b&gt;Global Shipping Program&lt;/b&gt;&lt;/em&gt; is scheduled to be replaced by a new intermediated international shipping program called &lt;em&gt;&lt;b&gt;eBay International Shipping&lt;/b&gt;&lt;/em&gt;. US sellers who are opted in to the Global Shipping Program will be automatically opted in to eBay International Shipping when it becomes available to them. All US sellers will be migrated by March 31, 2023. &lt;br /&gt;&lt;br /&gt;eBay International Shipping is an account level setting, and no field needs to be set in a Fulfillment business policy to enable it. As long as the US seller&#39;s account is opted in to eBay International Shipping, this shipping option will be enabled automatically for all listings where international shipping is available. &lt;br /&gt;&lt;br /&gt;A US seller who is opted in to eBay International Shipping can also specify individual international shipping service options for a Fulfillment business policy.&lt;/span&gt;
        /// </summary>
        /// <value>If returned as &lt;code&gt;true&lt;/code&gt;, the eBay Global Shipping Program will be used by the seller to ship items to international locations.&lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: On the US marketplace, the &lt;em&gt;&lt;b&gt;Global Shipping Program&lt;/b&gt;&lt;/em&gt; is scheduled to be replaced by a new intermediated international shipping program called &lt;em&gt;&lt;b&gt;eBay International Shipping&lt;/b&gt;&lt;/em&gt;. US sellers who are opted in to the Global Shipping Program will be automatically opted in to eBay International Shipping when it becomes available to them. All US sellers will be migrated by March 31, 2023. &lt;br /&gt;&lt;br /&gt;eBay International Shipping is an account level setting, and no field needs to be set in a Fulfillment business policy to enable it. As long as the US seller&#39;s account is opted in to eBay International Shipping, this shipping option will be enabled automatically for all listings where international shipping is available. &lt;br /&gt;&lt;br /&gt;A US seller who is opted in to eBay International Shipping can also specify individual international shipping service options for a Fulfillment business policy.&lt;/span&gt;</value>
        [DataMember(Name="globalShipping", EmitDefaultValue=true)]
        public bool GlobalShipping { get; set; }

        /// <summary>
        /// Gets or Sets HandlingTime
        /// </summary>
        [DataMember(Name="handlingTime", EmitDefaultValue=false)]
        public TimeDuration HandlingTime { get; set; }

        /// <summary>
        /// If returned as &lt;code&gt;true&lt;/code&gt;, local pickup is available for this policy.
        /// </summary>
        /// <value>If returned as &lt;code&gt;true&lt;/code&gt;, local pickup is available for this policy.</value>
        [DataMember(Name="localPickup", EmitDefaultValue=true)]
        public bool LocalPickup { get; set; }

        /// <summary>
        /// The ID of the eBay marketplace to which this fulfillment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The ID of the eBay marketplace to which this fulfillment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A seller-defined name for this fulfillment business policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64
        /// </summary>
        /// <value>A seller-defined name for this fulfillment business policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers the \&quot;Click and Collect\&quot; option. &lt;br/&gt;&lt;br/&gt;Currently, \&quot;Click and Collect\&quot; is available only to large retail merchants the eBay AU and UK marketplaces.
        /// </summary>
        /// <value>If returned as &lt;code&gt;true&lt;/code&gt;, the seller offers the \&quot;Click and Collect\&quot; option. &lt;br/&gt;&lt;br/&gt;Currently, \&quot;Click and Collect\&quot; is available only to large retail merchants the eBay AU and UK marketplaces.</value>
        [DataMember(Name="pickupDropOff", EmitDefaultValue=true)]
        public bool PickupDropOff { get; set; }

        /// <summary>
        /// Gets or Sets ShipToLocations
        /// </summary>
        [DataMember(Name="shipToLocations", EmitDefaultValue=false)]
        public RegionSet ShipToLocations { get; set; }

        /// <summary>
        /// This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate &lt;b&gt;ShippingOption&lt;/b&gt; object covers domestic shipping service options and international shipping service options (if the seller ships to international locations). &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;optionType&lt;/b&gt; field indicates whether the &lt;b&gt;ShippingOption&lt;/b&gt; object applies to domestic or international shipping, and the &lt;b&gt;costType&lt;/b&gt; field indicates whether flat-rate shipping or calculated shipping will be used. &lt;p&gt;A separate &lt;b&gt;ShippingServices&lt;/b&gt; object is used to specify cost and other details for every available domestic and international shipping service option. &lt;/p&gt;
        /// </summary>
        /// <value>This array is used to provide detailed information on the domestic and international shipping options available for the policy. A separate &lt;b&gt;ShippingOption&lt;/b&gt; object covers domestic shipping service options and international shipping service options (if the seller ships to international locations). &lt;br /&gt;&lt;br /&gt;The &lt;b&gt;optionType&lt;/b&gt; field indicates whether the &lt;b&gt;ShippingOption&lt;/b&gt; object applies to domestic or international shipping, and the &lt;b&gt;costType&lt;/b&gt; field indicates whether flat-rate shipping or calculated shipping will be used. &lt;p&gt;A separate &lt;b&gt;ShippingServices&lt;/b&gt; object is used to specify cost and other details for every available domestic and international shipping service option. &lt;/p&gt;</value>
        [DataMember(Name="shippingOptions", EmitDefaultValue=false)]
        public List<ShippingOption> ShippingOptions { get; set; }

        /// <summary>
        /// An array of one or more errors or warnings that were generated during the processing of the request. If there were no issues with the request, this array will return empty.
        /// </summary>
        /// <value>An array of one or more errors or warnings that were generated during the processing of the request. If there were no issues with the request, this array will return empty.</value>
        [DataMember(Name="warnings", EmitDefaultValue=false)]
        public List<Error> Warnings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SetFulfillmentPolicyResponse {\n");
            sb.Append("  CategoryTypes: ").Append(CategoryTypes).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FreightShipping: ").Append(FreightShipping).Append("\n");
            sb.Append("  FulfillmentPolicyId: ").Append(FulfillmentPolicyId).Append("\n");
            sb.Append("  GlobalShipping: ").Append(GlobalShipping).Append("\n");
            sb.Append("  HandlingTime: ").Append(HandlingTime).Append("\n");
            sb.Append("  LocalPickup: ").Append(LocalPickup).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PickupDropOff: ").Append(PickupDropOff).Append("\n");
            sb.Append("  ShipToLocations: ").Append(ShipToLocations).Append("\n");
            sb.Append("  ShippingOptions: ").Append(ShippingOptions).Append("\n");
            sb.Append("  Warnings: ").Append(Warnings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SetFulfillmentPolicyResponse)obj);
        }

        /// <summary>
        /// Returns true if SetFulfillmentPolicyResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SetFulfillmentPolicyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SetFulfillmentPolicyResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryTypes == other.CategoryTypes ||
                    CategoryTypes != null &&
                    other.CategoryTypes != null &&
                    CategoryTypes.SequenceEqual(other.CategoryTypes)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FreightShipping == other.FreightShipping ||
                    
                    FreightShipping.Equals(other.FreightShipping)
                ) && 
                (
                    FulfillmentPolicyId == other.FulfillmentPolicyId ||
                    FulfillmentPolicyId != null &&
                    FulfillmentPolicyId.Equals(other.FulfillmentPolicyId)
                ) && 
                (
                    GlobalShipping == other.GlobalShipping ||
                    
                    GlobalShipping.Equals(other.GlobalShipping)
                ) && 
                (
                    HandlingTime == other.HandlingTime ||
                    HandlingTime != null &&
                    HandlingTime.Equals(other.HandlingTime)
                ) && 
                (
                    LocalPickup == other.LocalPickup ||
                    
                    LocalPickup.Equals(other.LocalPickup)
                ) && 
                (
                    MarketplaceId == other.MarketplaceId ||
                    MarketplaceId != null &&
                    MarketplaceId.Equals(other.MarketplaceId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PickupDropOff == other.PickupDropOff ||
                    
                    PickupDropOff.Equals(other.PickupDropOff)
                ) && 
                (
                    ShipToLocations == other.ShipToLocations ||
                    ShipToLocations != null &&
                    ShipToLocations.Equals(other.ShipToLocations)
                ) && 
                (
                    ShippingOptions == other.ShippingOptions ||
                    ShippingOptions != null &&
                    other.ShippingOptions != null &&
                    ShippingOptions.SequenceEqual(other.ShippingOptions)
                ) && 
                (
                    Warnings == other.Warnings ||
                    Warnings != null &&
                    other.Warnings != null &&
                    Warnings.SequenceEqual(other.Warnings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryTypes != null)
                    hashCode = hashCode * 59 + CategoryTypes.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + FreightShipping.GetHashCode();
                    if (FulfillmentPolicyId != null)
                    hashCode = hashCode * 59 + FulfillmentPolicyId.GetHashCode();
                    
                    hashCode = hashCode * 59 + GlobalShipping.GetHashCode();
                    if (HandlingTime != null)
                    hashCode = hashCode * 59 + HandlingTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + LocalPickup.GetHashCode();
                    if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + PickupDropOff.GetHashCode();
                    if (ShipToLocations != null)
                    hashCode = hashCode * 59 + ShipToLocations.GetHashCode();
                    if (ShippingOptions != null)
                    hashCode = hashCode * 59 + ShippingOptions.GetHashCode();
                    if (Warnings != null)
                    hashCode = hashCode * 59 + Warnings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SetFulfillmentPolicyResponse left, SetFulfillmentPolicyResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SetFulfillmentPolicyResponse left, SetFulfillmentPolicyResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
