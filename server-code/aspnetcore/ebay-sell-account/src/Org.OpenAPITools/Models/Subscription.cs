/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type is used by the &lt;strong&gt;getSubscription&lt;/strong&gt; response container, which defines the subscription types and levels for the seller account.
    /// </summary>
    [DataContract]
    public partial class Subscription : IEquatable<Subscription>
    {
        /// <summary>
        /// The marketplace with which the subscription is associated. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The marketplace with which the subscription is associated. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// The subscription ID.
        /// </summary>
        /// <value>The subscription ID.</value>
        [DataMember(Name="subscriptionId", EmitDefaultValue=false)]
        public string SubscriptionId { get; set; }

        /// <summary>
        /// The subscription level. For example, subscription levels for an eBay store include Starter, Basic, Featured, Anchor, and Enterprise levels.
        /// </summary>
        /// <value>The subscription level. For example, subscription levels for an eBay store include Starter, Basic, Featured, Anchor, and Enterprise levels.</value>
        [DataMember(Name="subscriptionLevel", EmitDefaultValue=false)]
        public string SubscriptionLevel { get; set; }

        /// <summary>
        /// The kind of entity with which the subscription is associated, such as an eBay store. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:SubscriptionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The kind of entity with which the subscription is associated, such as an eBay store. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:SubscriptionTypeEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="subscriptionType", EmitDefaultValue=false)]
        public string SubscriptionType { get; set; }

        /// <summary>
        /// Gets or Sets Term
        /// </summary>
        [DataMember(Name="term", EmitDefaultValue=false)]
        public TimeDuration Term { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Subscription {\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  SubscriptionId: ").Append(SubscriptionId).Append("\n");
            sb.Append("  SubscriptionLevel: ").Append(SubscriptionLevel).Append("\n");
            sb.Append("  SubscriptionType: ").Append(SubscriptionType).Append("\n");
            sb.Append("  Term: ").Append(Term).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Subscription)obj);
        }

        /// <summary>
        /// Returns true if Subscription instances are equal
        /// </summary>
        /// <param name="other">Instance of Subscription to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Subscription other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    MarketplaceId == other.MarketplaceId ||
                    MarketplaceId != null &&
                    MarketplaceId.Equals(other.MarketplaceId)
                ) && 
                (
                    SubscriptionId == other.SubscriptionId ||
                    SubscriptionId != null &&
                    SubscriptionId.Equals(other.SubscriptionId)
                ) && 
                (
                    SubscriptionLevel == other.SubscriptionLevel ||
                    SubscriptionLevel != null &&
                    SubscriptionLevel.Equals(other.SubscriptionLevel)
                ) && 
                (
                    SubscriptionType == other.SubscriptionType ||
                    SubscriptionType != null &&
                    SubscriptionType.Equals(other.SubscriptionType)
                ) && 
                (
                    Term == other.Term ||
                    Term != null &&
                    Term.Equals(other.Term)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                    if (SubscriptionId != null)
                    hashCode = hashCode * 59 + SubscriptionId.GetHashCode();
                    if (SubscriptionLevel != null)
                    hashCode = hashCode * 59 + SubscriptionLevel.GetHashCode();
                    if (SubscriptionType != null)
                    hashCode = hashCode * 59 + SubscriptionType.GetHashCode();
                    if (Term != null)
                    hashCode = hashCode * 59 + Term.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Subscription left, Subscription right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Subscription left, Subscription right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
