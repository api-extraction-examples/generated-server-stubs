/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A type that is used to provide the seller&#39;s eligibility status for an eBay advertising program.
    /// </summary>
    [DataContract]
    public partial class SellerEligibilityResponse : IEquatable<SellerEligibilityResponse>
    {
        /// <summary>
        /// The eBay advertising program for which a seller may be eligible. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/plser:AdvertisingProgramEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The eBay advertising program for which a seller may be eligible. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/plser:AdvertisingProgramEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="programType", EmitDefaultValue=false)]
        public string ProgramType { get; set; }

        /// <summary>
        /// The reason why a seller is ineligible for the specified eBay advertising program.&lt;br /&gt;&lt;br /&gt;This field is only returned if the seller is ineligible for the eBay advertising program. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/plser:SellerIneligibleReasonEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The reason why a seller is ineligible for the specified eBay advertising program.&lt;br /&gt;&lt;br /&gt;This field is only returned if the seller is ineligible for the eBay advertising program. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/plser:SellerIneligibleReasonEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="reason", EmitDefaultValue=false)]
        public string Reason { get; set; }

        /// <summary>
        /// The seller elibibilty status for the specified eBay advertising program. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/cmlib:SellerEligibilityEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The seller elibibilty status for the specified eBay advertising program. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/cmlib:SellerEligibilityEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class SellerEligibilityResponse {\n");
            sb.Append("  ProgramType: ").Append(ProgramType).Append("\n");
            sb.Append("  Reason: ").Append(Reason).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((SellerEligibilityResponse)obj);
        }

        /// <summary>
        /// Returns true if SellerEligibilityResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of SellerEligibilityResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(SellerEligibilityResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProgramType == other.ProgramType ||
                    ProgramType != null &&
                    ProgramType.Equals(other.ProgramType)
                ) && 
                (
                    Reason == other.Reason ||
                    Reason != null &&
                    Reason.Equals(other.Reason)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProgramType != null)
                    hashCode = hashCode * 59 + ProgramType.GetHashCode();
                    if (Reason != null)
                    hashCode = hashCode * 59 + Reason.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(SellerEligibilityResponse left, SellerEligibilityResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(SellerEligibilityResponse left, SellerEligibilityResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
