/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type is used by the &lt;b&gt;paymentPolicy&lt;/b&gt; response container, a container which defines a seller&#39;s payment business policy for a specific marketplace.
    /// </summary>
    [DataContract]
    public partial class PaymentPolicy : IEquatable<PaymentPolicy>
    {
        /// <summary>
        /// This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.
        /// </summary>
        /// <value>This container indicates whether the fulfillment policy applies to motor vehicle listings, or if it applies to non-motor vehicle listings.</value>
        [DataMember(Name="categoryTypes", EmitDefaultValue=false)]
        public List<CategoryType> CategoryTypes { get; set; }

        /// <summary>
        /// Gets or Sets Deposit
        /// </summary>
        [DataMember(Name="deposit", EmitDefaultValue=false)]
        public Deposit Deposit { get; set; }

        /// <summary>
        /// A seller-defined description of the payment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250
        /// </summary>
        /// <value>A seller-defined description of the payment policy. This description is only for the seller&#39;s use, and is not exposed on any eBay pages.  &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 250</value>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets FullPaymentDueIn
        /// </summary>
        [DataMember(Name="fullPaymentDueIn", EmitDefaultValue=false)]
        public TimeDuration FullPaymentDueIn { get; set; }

        /// <summary>
        /// If this field is returned as &lt;code&gt;true&lt;/code&gt;, immediate payment is required from the buyer for: &lt;ul&gt;&lt;li&gt;A fixed-price item&lt;/li&gt;&lt;li&gt;An auction item where the buyer uses the &#39;Buy it Now&#39; option&lt;/li&gt;&lt;li&gt;A deposit for a motor vehicle listing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;It is possible for the seller to set this field as &lt;code&gt;true&lt;/code&gt; in the payment business policy, but it will not apply in some scenarios. For example, immediate payment is not applicable for auction listings that have a winning bidder, for buyer purchases that involve the Best Offer feature, or for transactions that happen offline between the buyer and seller.
        /// </summary>
        /// <value>If this field is returned as &lt;code&gt;true&lt;/code&gt;, immediate payment is required from the buyer for: &lt;ul&gt;&lt;li&gt;A fixed-price item&lt;/li&gt;&lt;li&gt;An auction item where the buyer uses the &#39;Buy it Now&#39; option&lt;/li&gt;&lt;li&gt;A deposit for a motor vehicle listing&lt;/li&gt;&lt;/ul&gt;&lt;br /&gt;It is possible for the seller to set this field as &lt;code&gt;true&lt;/code&gt; in the payment business policy, but it will not apply in some scenarios. For example, immediate payment is not applicable for auction listings that have a winning bidder, for buyer purchases that involve the Best Offer feature, or for transactions that happen offline between the buyer and seller.</value>
        [DataMember(Name="immediatePay", EmitDefaultValue=true)]
        public bool ImmediatePay { get; set; }

        /// <summary>
        /// The ID of the eBay marketplace to which the payment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>The ID of the eBay marketplace to which the payment business policy applies. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/ba:MarketplaceIdEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="marketplaceId", EmitDefaultValue=false)]
        public string MarketplaceId { get; set; }

        /// <summary>
        /// A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64
        /// </summary>
        /// <value>A seller-defined name for this fulfillment policy. Names must be unique for policies assigned to the same marketplace. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 64</value>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Although this field may be returned for some older payment business policies, payment instructions are no longer supported by payment business policies. If this field is returned, it can be ignored and these payment instructions will not appear in any listings that use the corresponding business policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 1000
        /// </summary>
        /// <value>Although this field may be returned for some older payment business policies, payment instructions are no longer supported by payment business policies. If this field is returned, it can be ignored and these payment instructions will not appear in any listings that use the corresponding business policy. &lt;br/&gt;&lt;br/&gt;&lt;b&gt;Max length&lt;/b&gt;: 1000</value>
        [DataMember(Name="paymentInstructions", EmitDefaultValue=false)]
        public string PaymentInstructions { get; set; }

        /// <summary>
        /// This container is returned to show the payment methods that are accepted for the payment business policy.  &lt;br&gt;&lt;br&gt;Sellers do not have to specify any electronic payment methods for listings, so this array will often be returned empty unless the payment business policy is intended for motor vehicle listings or other items in categories where offline payments are required or supported. 
        /// </summary>
        /// <value>This container is returned to show the payment methods that are accepted for the payment business policy.  &lt;br&gt;&lt;br&gt;Sellers do not have to specify any electronic payment methods for listings, so this array will often be returned empty unless the payment business policy is intended for motor vehicle listings or other items in categories where offline payments are required or supported. </value>
        [DataMember(Name="paymentMethods", EmitDefaultValue=false)]
        public List<PaymentMethod> PaymentMethods { get; set; }

        /// <summary>
        /// A unique eBay-assigned ID for a payment business policy. This ID is generated when the policy is created.
        /// </summary>
        /// <value>A unique eBay-assigned ID for a payment business policy. This ID is generated when the policy is created.</value>
        [DataMember(Name="paymentPolicyId", EmitDefaultValue=false)]
        public string PaymentPolicyId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPolicy {\n");
            sb.Append("  CategoryTypes: ").Append(CategoryTypes).Append("\n");
            sb.Append("  Deposit: ").Append(Deposit).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  FullPaymentDueIn: ").Append(FullPaymentDueIn).Append("\n");
            sb.Append("  ImmediatePay: ").Append(ImmediatePay).Append("\n");
            sb.Append("  MarketplaceId: ").Append(MarketplaceId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PaymentInstructions: ").Append(PaymentInstructions).Append("\n");
            sb.Append("  PaymentMethods: ").Append(PaymentMethods).Append("\n");
            sb.Append("  PaymentPolicyId: ").Append(PaymentPolicyId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentPolicy)obj);
        }

        /// <summary>
        /// Returns true if PaymentPolicy instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentPolicy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPolicy other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryTypes == other.CategoryTypes ||
                    CategoryTypes != null &&
                    other.CategoryTypes != null &&
                    CategoryTypes.SequenceEqual(other.CategoryTypes)
                ) && 
                (
                    Deposit == other.Deposit ||
                    Deposit != null &&
                    Deposit.Equals(other.Deposit)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    FullPaymentDueIn == other.FullPaymentDueIn ||
                    FullPaymentDueIn != null &&
                    FullPaymentDueIn.Equals(other.FullPaymentDueIn)
                ) && 
                (
                    ImmediatePay == other.ImmediatePay ||
                    
                    ImmediatePay.Equals(other.ImmediatePay)
                ) && 
                (
                    MarketplaceId == other.MarketplaceId ||
                    MarketplaceId != null &&
                    MarketplaceId.Equals(other.MarketplaceId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    PaymentInstructions == other.PaymentInstructions ||
                    PaymentInstructions != null &&
                    PaymentInstructions.Equals(other.PaymentInstructions)
                ) && 
                (
                    PaymentMethods == other.PaymentMethods ||
                    PaymentMethods != null &&
                    other.PaymentMethods != null &&
                    PaymentMethods.SequenceEqual(other.PaymentMethods)
                ) && 
                (
                    PaymentPolicyId == other.PaymentPolicyId ||
                    PaymentPolicyId != null &&
                    PaymentPolicyId.Equals(other.PaymentPolicyId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryTypes != null)
                    hashCode = hashCode * 59 + CategoryTypes.GetHashCode();
                    if (Deposit != null)
                    hashCode = hashCode * 59 + Deposit.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (FullPaymentDueIn != null)
                    hashCode = hashCode * 59 + FullPaymentDueIn.GetHashCode();
                    
                    hashCode = hashCode * 59 + ImmediatePay.GetHashCode();
                    if (MarketplaceId != null)
                    hashCode = hashCode * 59 + MarketplaceId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (PaymentInstructions != null)
                    hashCode = hashCode * 59 + PaymentInstructions.GetHashCode();
                    if (PaymentMethods != null)
                    hashCode = hashCode * 59 + PaymentMethods.GetHashCode();
                    if (PaymentPolicyId != null)
                    hashCode = hashCode * 59 + PaymentPolicyId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentPolicy left, PaymentPolicy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentPolicy left, PaymentPolicy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
