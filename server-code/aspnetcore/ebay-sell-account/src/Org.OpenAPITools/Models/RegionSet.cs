/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type consists of the &lt;b&gt;regionIncluded&lt;/b&gt; and &lt;b&gt;regionExcluded&lt;/b&gt; arrays, which indicate the areas to where the seller does and doesn&#39;t ship.
    /// </summary>
    [DataContract]
    public partial class RegionSet : IEquatable<RegionSet>
    {
        /// <summary>
        /// An array of one or more &lt;b&gt;regionName&lt;/b&gt; values that specify the areas to where a seller does not ship. A &lt;b&gt;regionExcluded&lt;/b&gt; list should only be set in the top-level &lt;b&gt;shipToLocations&lt;/b&gt; container and not within the &lt;b&gt;shippingServices.shipToLocations&lt;/b&gt; container used to specify which shipping regions are serviced by each available shipping service option. &lt;p&gt;Many sellers are willing to ship to many international locations, but they may want to exclude some world regions or some countries as places they are willing to ship to.&lt;br/&gt;&lt;br/&gt;This array will be returned as empty if no shipping regions are excluded with the fulfillment business policy.&lt;br /&gt; &lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; The &lt;b&gt;regionExcluded&lt;/b&gt; array is not applicable for motor vehicle business policies on the US, CA, or UK marketplaces. If this array is used in a &lt;b&gt;createFulfillmentPolicy&lt;/b&gt; or &lt;b&gt;updateFulfillmentPolicy&lt;/b&gt; request, it will be ignored.&lt;/span&gt;
        /// </summary>
        /// <value>An array of one or more &lt;b&gt;regionName&lt;/b&gt; values that specify the areas to where a seller does not ship. A &lt;b&gt;regionExcluded&lt;/b&gt; list should only be set in the top-level &lt;b&gt;shipToLocations&lt;/b&gt; container and not within the &lt;b&gt;shippingServices.shipToLocations&lt;/b&gt; container used to specify which shipping regions are serviced by each available shipping service option. &lt;p&gt;Many sellers are willing to ship to many international locations, but they may want to exclude some world regions or some countries as places they are willing to ship to.&lt;br/&gt;&lt;br/&gt;This array will be returned as empty if no shipping regions are excluded with the fulfillment business policy.&lt;br /&gt; &lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; The &lt;b&gt;regionExcluded&lt;/b&gt; array is not applicable for motor vehicle business policies on the US, CA, or UK marketplaces. If this array is used in a &lt;b&gt;createFulfillmentPolicy&lt;/b&gt; or &lt;b&gt;updateFulfillmentPolicy&lt;/b&gt; request, it will be ignored.&lt;/span&gt;</value>
        [DataMember(Name="regionExcluded", EmitDefaultValue=false)]
        public List<Region> RegionExcluded { get; set; }

        /// <summary>
        /// An array of one or more &lt;b&gt;regionName&lt;/b&gt; fields that specify the areas to where a seller ships. &lt;br /&gt;Each eBay marketplace supports its own set of allowable shipping locations.&lt;br /&gt; &lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; The &lt;b&gt;regionIncluded&lt;/b&gt; array is not applicable for motor vehicle business policies on the US, CA, or UK marketplaces. If this array is used in a &lt;b&gt;createFulfillmentPolicy&lt;/b&gt; or &lt;b&gt;updateFulfillmentPolicy&lt;/b&gt; request, it will be ignored.&lt;/span&gt;
        /// </summary>
        /// <value>An array of one or more &lt;b&gt;regionName&lt;/b&gt; fields that specify the areas to where a seller ships. &lt;br /&gt;Each eBay marketplace supports its own set of allowable shipping locations.&lt;br /&gt; &lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note: &lt;/b&gt; The &lt;b&gt;regionIncluded&lt;/b&gt; array is not applicable for motor vehicle business policies on the US, CA, or UK marketplaces. If this array is used in a &lt;b&gt;createFulfillmentPolicy&lt;/b&gt; or &lt;b&gt;updateFulfillmentPolicy&lt;/b&gt; request, it will be ignored.&lt;/span&gt;</value>
        [DataMember(Name="regionIncluded", EmitDefaultValue=false)]
        public List<Region> RegionIncluded { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RegionSet {\n");
            sb.Append("  RegionExcluded: ").Append(RegionExcluded).Append("\n");
            sb.Append("  RegionIncluded: ").Append(RegionIncluded).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RegionSet)obj);
        }

        /// <summary>
        /// Returns true if RegionSet instances are equal
        /// </summary>
        /// <param name="other">Instance of RegionSet to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RegionSet other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    RegionExcluded == other.RegionExcluded ||
                    RegionExcluded != null &&
                    other.RegionExcluded != null &&
                    RegionExcluded.SequenceEqual(other.RegionExcluded)
                ) && 
                (
                    RegionIncluded == other.RegionIncluded ||
                    RegionIncluded != null &&
                    other.RegionIncluded != null &&
                    RegionIncluded.SequenceEqual(other.RegionIncluded)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (RegionExcluded != null)
                    hashCode = hashCode * 59 + RegionExcluded.GetHashCode();
                    if (RegionIncluded != null)
                    hashCode = hashCode * 59 + RegionIncluded.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RegionSet left, RegionSet right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RegionSet left, RegionSet right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
