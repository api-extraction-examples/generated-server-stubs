/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This is the base response type of the &lt;b&gt;getKYC&lt;/b&gt; method.
    /// </summary>
    [DataContract]
    public partial class KycResponse : IEquatable<KycResponse>
    {
        /// <summary>
        /// This array contains one or more KYC checks required from a managed payments seller. The seller may need to provide more documentation and/or information about themselves, their company, or the bank account they are using for seller payouts.&lt;br/&gt;&lt;br/&gt;If no KYC checks are currently required from the seller, this array is not returned, and the seller only receives a &lt;code&gt;204 No Content&lt;/code&gt; HTTP status code.
        /// </summary>
        /// <value>This array contains one or more KYC checks required from a managed payments seller. The seller may need to provide more documentation and/or information about themselves, their company, or the bank account they are using for seller payouts.&lt;br/&gt;&lt;br/&gt;If no KYC checks are currently required from the seller, this array is not returned, and the seller only receives a &lt;code&gt;204 No Content&lt;/code&gt; HTTP status code.</value>
        [DataMember(Name="kycChecks", EmitDefaultValue=false)]
        public List<KycCheck> KycChecks { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class KycResponse {\n");
            sb.Append("  KycChecks: ").Append(KycChecks).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((KycResponse)obj);
        }

        /// <summary>
        /// Returns true if KycResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of KycResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(KycResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    KycChecks == other.KycChecks ||
                    KycChecks != null &&
                    other.KycChecks != null &&
                    KycChecks.SequenceEqual(other.KycChecks)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (KycChecks != null)
                    hashCode = hashCode * 59 + KycChecks.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(KycResponse left, KycResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(KycResponse left, KycResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
