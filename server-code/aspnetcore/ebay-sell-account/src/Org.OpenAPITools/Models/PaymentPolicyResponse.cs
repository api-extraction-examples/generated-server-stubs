/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The response payload for the &lt;b&gt;getPaymentPolicies&lt;/b&gt; method. &lt;br /&gt;&lt;br /&gt;&lt;span class&#x3D;\&quot;tablenote\&quot;&gt;&lt;b&gt;Note&lt;/b&gt;: Pagination has not yet been enabled for &lt;b&gt;getPaymentPolicies&lt;/b&gt;, so all of the pagination-related fields are for future use.&lt;/span&gt;
    /// </summary>
    [DataContract]
    public partial class PaymentPolicyResponse : IEquatable<PaymentPolicyResponse>
    {
        /// <summary>
        /// This field is for future use.
        /// </summary>
        /// <value>This field is for future use.</value>
        [DataMember(Name="href", EmitDefaultValue=false)]
        public string Href { get; set; }

        /// <summary>
        /// This field is for future use.
        /// </summary>
        /// <value>This field is for future use.</value>
        [DataMember(Name="limit", EmitDefaultValue=true)]
        public int Limit { get; set; }

        /// <summary>
        /// This field is for future use.
        /// </summary>
        /// <value>This field is for future use.</value>
        [DataMember(Name="next", EmitDefaultValue=false)]
        public string Next { get; set; }

        /// <summary>
        /// This field is for future use.
        /// </summary>
        /// <value>This field is for future use.</value>
        [DataMember(Name="offset", EmitDefaultValue=true)]
        public int Offset { get; set; }

        /// <summary>
        /// A list of all of the seller&#39;s payment business policies defined for the specified marketplace. This array will be returned as empty if no payment business policies are defined for the specified marketplace.
        /// </summary>
        /// <value>A list of all of the seller&#39;s payment business policies defined for the specified marketplace. This array will be returned as empty if no payment business policies are defined for the specified marketplace.</value>
        [DataMember(Name="paymentPolicies", EmitDefaultValue=false)]
        public List<PaymentPolicy> PaymentPolicies { get; set; }

        /// <summary>
        /// This field is for future use.
        /// </summary>
        /// <value>This field is for future use.</value>
        [DataMember(Name="prev", EmitDefaultValue=false)]
        public string Prev { get; set; }

        /// <summary>
        /// The total number of payment business policies retrieved in the result set.  &lt;br/&gt;&lt;br/&gt;If no payment business policies are defined for the specified marketplace, this field is returned with a value of &lt;code&gt;0&lt;/code&gt;.
        /// </summary>
        /// <value>The total number of payment business policies retrieved in the result set.  &lt;br/&gt;&lt;br/&gt;If no payment business policies are defined for the specified marketplace, this field is returned with a value of &lt;code&gt;0&lt;/code&gt;.</value>
        [DataMember(Name="total", EmitDefaultValue=true)]
        public int Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PaymentPolicyResponse {\n");
            sb.Append("  Href: ").Append(Href).Append("\n");
            sb.Append("  Limit: ").Append(Limit).Append("\n");
            sb.Append("  Next: ").Append(Next).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  PaymentPolicies: ").Append(PaymentPolicies).Append("\n");
            sb.Append("  Prev: ").Append(Prev).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PaymentPolicyResponse)obj);
        }

        /// <summary>
        /// Returns true if PaymentPolicyResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of PaymentPolicyResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PaymentPolicyResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Href == other.Href ||
                    Href != null &&
                    Href.Equals(other.Href)
                ) && 
                (
                    Limit == other.Limit ||
                    
                    Limit.Equals(other.Limit)
                ) && 
                (
                    Next == other.Next ||
                    Next != null &&
                    Next.Equals(other.Next)
                ) && 
                (
                    Offset == other.Offset ||
                    
                    Offset.Equals(other.Offset)
                ) && 
                (
                    PaymentPolicies == other.PaymentPolicies ||
                    PaymentPolicies != null &&
                    other.PaymentPolicies != null &&
                    PaymentPolicies.SequenceEqual(other.PaymentPolicies)
                ) && 
                (
                    Prev == other.Prev ||
                    Prev != null &&
                    Prev.Equals(other.Prev)
                ) && 
                (
                    Total == other.Total ||
                    
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Href != null)
                    hashCode = hashCode * 59 + Href.GetHashCode();
                    
                    hashCode = hashCode * 59 + Limit.GetHashCode();
                    if (Next != null)
                    hashCode = hashCode * 59 + Next.GetHashCode();
                    
                    hashCode = hashCode * 59 + Offset.GetHashCode();
                    if (PaymentPolicies != null)
                    hashCode = hashCode * 59 + PaymentPolicies.GetHashCode();
                    if (Prev != null)
                    hashCode = hashCode * 59 + Prev.GetHashCode();
                    
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PaymentPolicyResponse left, PaymentPolicyResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PaymentPolicyResponse left, PaymentPolicyResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
