/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * The version of the OpenAPI document: v1.9.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// This type defines the fields for a seller&#39;s international return policy. Sellers have the ability to set separate domestic and international return policies, but if an international return policy is not set, the same return policy settings specified for the domestic return policy are also used for returns for international buyers. 
    /// </summary>
    [DataContract]
    public partial class InternationalReturnOverrideType : IEquatable<InternationalReturnOverrideType>
    {
        /// <summary>
        /// This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="returnMethod", EmitDefaultValue=false)]
        public string ReturnMethod { get; set; }

        /// <summary>
        /// Gets or Sets ReturnPeriod
        /// </summary>
        [DataMember(Name="returnPeriod", EmitDefaultValue=false)]
        public TimeDuration ReturnPeriod { get; set; }

        /// <summary>
        /// This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either &lt;code&gt;BUYER&lt;/code&gt; or &lt;code&gt;SELLER&lt;/code&gt;.  &lt;br/&gt;&lt;br/&gt;Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for &#39;significantly not as described&#39; (SNAD) issues.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the &lt;b&gt;internationalOverride.returnsAccepted&lt;/b&gt; field is set to &lt;code&gt;true&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum&#39;&gt;eBay API documentation&lt;/a&gt;
        /// </summary>
        /// <value>This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either &lt;code&gt;BUYER&lt;/code&gt; or &lt;code&gt;SELLER&lt;/code&gt;.  &lt;br/&gt;&lt;br/&gt;Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for &#39;significantly not as described&#39; (SNAD) issues.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the &lt;b&gt;internationalOverride.returnsAccepted&lt;/b&gt; field is set to &lt;code&gt;true&lt;/code&gt;. For implementation help, refer to &lt;a href&#x3D;&#39;https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum&#39;&gt;eBay API documentation&lt;/a&gt;</value>
        [DataMember(Name="returnShippingCostPayer", EmitDefaultValue=false)]
        public string ReturnShippingCostPayer { get; set; }

        /// <summary>
        /// If set to &lt;code&gt;true&lt;/code&gt;, the seller accepts international returns. If set to &lt;code&gt;false&lt;/code&gt;, the seller does not accept international returns.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the seller chooses to have a separate international return policy.
        /// </summary>
        /// <value>If set to &lt;code&gt;true&lt;/code&gt;, the seller accepts international returns. If set to &lt;code&gt;false&lt;/code&gt;, the seller does not accept international returns.  &lt;br/&gt;&lt;br/&gt;This field is conditionally required if the seller chooses to have a separate international return policy.</value>
        [DataMember(Name="returnsAccepted", EmitDefaultValue=true)]
        public bool ReturnsAccepted { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InternationalReturnOverrideType {\n");
            sb.Append("  ReturnMethod: ").Append(ReturnMethod).Append("\n");
            sb.Append("  ReturnPeriod: ").Append(ReturnPeriod).Append("\n");
            sb.Append("  ReturnShippingCostPayer: ").Append(ReturnShippingCostPayer).Append("\n");
            sb.Append("  ReturnsAccepted: ").Append(ReturnsAccepted).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InternationalReturnOverrideType)obj);
        }

        /// <summary>
        /// Returns true if InternationalReturnOverrideType instances are equal
        /// </summary>
        /// <param name="other">Instance of InternationalReturnOverrideType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InternationalReturnOverrideType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ReturnMethod == other.ReturnMethod ||
                    ReturnMethod != null &&
                    ReturnMethod.Equals(other.ReturnMethod)
                ) && 
                (
                    ReturnPeriod == other.ReturnPeriod ||
                    ReturnPeriod != null &&
                    ReturnPeriod.Equals(other.ReturnPeriod)
                ) && 
                (
                    ReturnShippingCostPayer == other.ReturnShippingCostPayer ||
                    ReturnShippingCostPayer != null &&
                    ReturnShippingCostPayer.Equals(other.ReturnShippingCostPayer)
                ) && 
                (
                    ReturnsAccepted == other.ReturnsAccepted ||
                    
                    ReturnsAccepted.Equals(other.ReturnsAccepted)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ReturnMethod != null)
                    hashCode = hashCode * 59 + ReturnMethod.GetHashCode();
                    if (ReturnPeriod != null)
                    hashCode = hashCode * 59 + ReturnPeriod.GetHashCode();
                    if (ReturnShippingCostPayer != null)
                    hashCode = hashCode * 59 + ReturnShippingCostPayer.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReturnsAccepted.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InternationalReturnOverrideType left, InternationalReturnOverrideType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InternationalReturnOverrideType left, InternationalReturnOverrideType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
