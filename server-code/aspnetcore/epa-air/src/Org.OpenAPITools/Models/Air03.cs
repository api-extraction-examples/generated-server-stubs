/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 *
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Facilities Object
    /// </summary>
    [DataContract]
    public partial class Air03 : IEquatable<Air03>
    {
        /// <summary>
        /// The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
        /// </summary>
        /// <value>The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined</value>
        /// <example>VV__SS_U__V_</example>
        [Required]
        [DataMember(Name="AIR3yrComplQtrsHistory", EmitDefaultValue=false)]
        public string AIR3yrComplQtrsHistory { get; set; }

        /// <summary>
        /// Space-delimited list of AIR cases associated with the facility.
        /// </summary>
        /// <value>Space-delimited list of AIR cases associated with the facility.</value>
        /// <example>05-1993-1585 05-2014-5021</example>
        [Required]
        [DataMember(Name="AIRCaseIDs", EmitDefaultValue=false)]
        public string AIRCaseIDs { get; set; }

        /// <summary>
        /// The city where the AIR facility is located.
        /// </summary>
        /// <value>The city where the AIR facility is located.</value>
        /// <example>Washington</example>
        [Required]
        [DataMember(Name="AIRCity", EmitDefaultValue=false)]
        public string AIRCity { get; set; }

        /// <summary>
        /// Gets or Sets AIRClassification
        /// </summary>
        [Required]
        [DataMember(Name="AIRClassification", EmitDefaultValue=false)]
        public string AIRClassification { get; set; }

        /// <summary>
        /// The facility&#39;s recent violation status under the Clean Air Act.
        /// </summary>
        /// <value>The facility&#39;s recent violation status under the Clean Air Act.</value>
        /// <example>No Viol</example>
        [Required]
        [DataMember(Name="AIRComplStatus", EmitDefaultValue=false)]
        public string AIRComplStatus { get; set; }

        /// <summary>
        /// The name of the county where the AIR facility is located.
        /// </summary>
        /// <value>The name of the county where the AIR facility is located.</value>
        /// <example>Racine</example>
        [Required]
        [DataMember(Name="AIRCounty", EmitDefaultValue=false)]
        public string AIRCounty { get; set; }

        /// <summary>
        /// The number of days since the most recent compliance evaluation of the facility.
        /// </summary>
        /// <value>The number of days since the most recent compliance evaluation of the facility.</value>
        /// <example>2806</example>
        [Required]
        [DataMember(Name="AIRDaysLastEval", EmitDefaultValue=false)]
        public string AIRDaysLastEval { get; set; }

        /// <summary>
        /// The EPA region where the AIR facility is located.
        /// </summary>
        /// <value>The EPA region where the AIR facility is located.</value>
        /// <example>05</example>
        [Required]
        [DataMember(Name="AIREPARegion", EmitDefaultValue=false)]
        public string AIREPARegion { get; set; }

        /// <summary>
        /// The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.
        /// </summary>
        /// <value>The number of compliance evaluations, under the Clean Air Act, occurring at the facility within the last five years.</value>
        /// <example>0</example>
        [Required]
        [DataMember(Name="AIREvalCnt", EmitDefaultValue=false)]
        public string AIREvalCnt { get; set; }

        /// <summary>
        /// A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.
        /// </summary>
        /// <value>A 5 digit combination of the 2 digit Federal Information Processing Standards (FIPS) code for the state and the 3 digit FIPS code of the county that a facility is located in.</value>
        /// <example>11001</example>
        [Required]
        [DataMember(Name="AIRFIPSCode", EmitDefaultValue=false)]
        public string AIRFIPSCode { get; set; }

        /// <summary>
        /// A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown
        /// </summary>
        /// <value>A three-character code indicating if plant is government facility. COR - Corporation CNG - County Government DIS - District FDF - Federal Facility (U.S. Government) GOC - GOCO (Gov Owned/Contractor Operated) IND - Individual MXO - Mixed Ownership (e.g., Public/Private) MWD - Municipal or Water District CTG - Municipality NON - Non-Government POF - Privately Owned Facility SDT - School District STF - State Government TRB - Tribal Government UNK - Unknown</value>
        /// <example>POF</example>
        [Required]
        [DataMember(Name="AIRFacilityTypeCode", EmitDefaultValue=false)]
        public string AIRFacilityTypeCode { get; set; }

        /// <summary>
        /// Gets or Sets AIRFacilityTypeDesc
        /// </summary>
        [Required]
        [DataMember(Name="AIRFacilityTypeDesc", EmitDefaultValue=false)]
        public string AIRFacilityTypeDesc { get; set; }

        /// <summary>
        /// The total number of formal enforcement actions taken against the facility within the last five years.
        /// </summary>
        /// <value>The total number of formal enforcement actions taken against the facility within the last five years.</value>
        /// <example>2</example>
        [Required]
        [DataMember(Name="AIRFeaCnt", EmitDefaultValue=false)]
        public string AIRFeaCnt { get; set; }

        /// <summary>
        /// Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.
        /// </summary>
        /// <value>Indicates whether the facility currently has an unresolved High Priority Violation (HPV) under the Clean Air Act.</value>
        /// <example>true</example>
        [Required]
        [DataMember(Name="AIRHpvStatus", EmitDefaultValue=false)]
        public string AIRHpvStatus { get; set; }

        /// <summary>
        /// Air Facility System (AFS) ID.
        /// </summary>
        /// <value>Air Facility System (AFS) ID.</value>
        /// <example>DC0000001100195254</example>
        [Required]
        [DataMember(Name="AIRIDs", EmitDefaultValue=false)]
        public string AIRIDs { get; set; }

        /// <summary>
        /// The total number of informal enforcement actions taken against the facility within the last five years.
        /// </summary>
        /// <value>The total number of informal enforcement actions taken against the facility within the last five years.</value>
        /// <example>2</example>
        [Required]
        [DataMember(Name="AIRIeaCnt", EmitDefaultValue=false)]
        public string AIRIeaCnt { get; set; }

        /// <summary>
        /// Flag indicating whether the AIR facility is located in Indian country.
        /// </summary>
        /// <value>Flag indicating whether the AIR facility is located in Indian country.</value>
        /// <example>N</example>
        [Required]
        [DataMember(Name="AIRIndianCntryFlg", EmitDefaultValue=false)]
        public string AIRIndianCntryFlg { get; set; }

        /// <summary>
        /// The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.
        /// </summary>
        /// <value>The date on which the most recent Full Compliance Evaluation (FCE) of the facility by EPA or a state agency was completed.</value>
        /// <example>05/18/2009</example>
        [Required]
        [DataMember(Name="AIRLastEvalDate", EmitDefaultValue=false)]
        public string AIRLastEvalDate { get; set; }

        /// <summary>
        /// The last Air Inspection Date performed by EPA.
        /// </summary>
        /// <value>The last Air Inspection Date performed by EPA.</value>
        /// <example>05/16/2014</example>
        [Required]
        [DataMember(Name="AIRLastEvalDateEPA", EmitDefaultValue=false)]
        public string AIRLastEvalDateEPA { get; set; }

        /// <summary>
        /// The last Air Inspection Date performed by State or local authorities.
        /// </summary>
        /// <value>The last Air Inspection Date performed by State or local authorities.</value>
        /// <example>05/18/2009</example>
        [Required]
        [DataMember(Name="AIRLastEvalDateState", EmitDefaultValue=false)]
        public string AIRLastEvalDateState { get; set; }

        /// <summary>
        /// The effective date of the most recent listed formal enforcement action taken against the facility.
        /// </summary>
        /// <value>The effective date of the most recent listed formal enforcement action taken against the facility.</value>
        /// <example>05/16/2014</example>
        [Required]
        [DataMember(Name="AIRLastFeaDate", EmitDefaultValue=false)]
        public string AIRLastFeaDate { get; set; }

        /// <summary>
        /// The last Air Formal Enforcement Action Date take by EPA.
        /// </summary>
        /// <value>The last Air Formal Enforcement Action Date take by EPA.</value>
        /// <example>05/16/2014</example>
        [Required]
        [DataMember(Name="AIRLastFeaDateEPA", EmitDefaultValue=false)]
        public string AIRLastFeaDateEPA { get; set; }

        /// <summary>
        /// The last Air Formal Enforcement Action Date take by State or Local authorities.
        /// </summary>
        /// <value>The last Air Formal Enforcement Action Date take by State or Local authorities.</value>
        /// <example>05/16/2014</example>
        [Required]
        [DataMember(Name="AIRLastFeaDateState", EmitDefaultValue=false)]
        public string AIRLastFeaDateState { get; set; }

        /// <summary>
        /// The effective date of the most recent listed informal enforcement action taken against the facility.
        /// </summary>
        /// <value>The effective date of the most recent listed informal enforcement action taken against the facility.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastIeaDate", EmitDefaultValue=false)]
        public string AIRLastIeaDate { get; set; }

        /// <summary>
        /// The effective date of the most recent listed informal enforcement action taken against the facility by EPA.
        /// </summary>
        /// <value>The effective date of the most recent listed informal enforcement action taken against the facility by EPA.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastIeaDateEPA", EmitDefaultValue=false)]
        public string AIRLastIeaDateEPA { get; set; }

        /// <summary>
        /// The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.
        /// </summary>
        /// <value>The effective date of the most recent listed informal enforcement action taken against the facility by a state agency.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastIeaDateState", EmitDefaultValue=false)]
        public string AIRLastIeaDateState { get; set; }

        /// <summary>
        /// Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.
        /// </summary>
        /// <value>Indicates the date on which the most recent assessed (or final) penalty was taken against the facility for AIR.</value>
        /// <example>05/16/2014</example>
        [Required]
        [DataMember(Name="AIRLastPenaltyDate", EmitDefaultValue=false)]
        public string AIRLastPenaltyDate { get; set; }

        /// <summary>
        /// The date on which the most recent stack test by EPA occurred.
        /// </summary>
        /// <value>The date on which the most recent stack test by EPA occurred.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastStckDateEPA", EmitDefaultValue=false)]
        public string AIRLastStckDateEPA { get; set; }

        /// <summary>
        /// The date on which the most recent stack test by a state agency occurred.
        /// </summary>
        /// <value>The date on which the most recent stack test by a state agency occurred.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastStckDateState", EmitDefaultValue=false)]
        public string AIRLastStckDateState { get; set; }

        /// <summary>
        /// The date on which the most recent stack test occurred.
        /// </summary>
        /// <value>The date on which the most recent stack test occurred.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastStckTestDate", EmitDefaultValue=false)]
        public string AIRLastStckTestDate { get; set; }

        /// <summary>
        /// The result of the most recent stack test (Pass, Fail, Pending, or Blank).
        /// </summary>
        /// <value>The result of the most recent stack test (Pass, Fail, Pending, or Blank).</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastStckTestResults", EmitDefaultValue=false)]
        public string AIRLastStckTestResults { get; set; }

        /// <summary>
        /// The date on which the most recent violation was reported.
        /// </summary>
        /// <value>The date on which the most recent violation was reported.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="AIRLastViolDate", EmitDefaultValue=false)]
        public string AIRLastViolDate { get; set; }

        /// <summary>
        /// The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.
        /// </summary>
        /// <value>The Maximum Achievable Control Technology (MACT) Subpart associated with the facility.</value>
        /// <example>ZZZZZ</example>
        [Required]
        [DataMember(Name="AIRMacts", EmitDefaultValue=false)]
        public string AIRMacts { get; set; }

        /// <summary>
        /// Indicated whether the facility is designated as a major facilitiy.
        /// </summary>
        /// <value>Indicated whether the facility is designated as a major facilitiy.</value>
        /// <example>N</example>
        [Required]
        [DataMember(Name="AIRMajorFlag", EmitDefaultValue=false)]
        public string AIRMajorFlag { get; set; }

        /// <summary>
        /// The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status
        /// </summary>
        /// <value>The number of months in the last three years in which the permit or site is considered in High Priority Violation (HPV) status</value>
        /// <example>3</example>
        [Required]
        [DataMember(Name="AIRMnthsWithHpv", EmitDefaultValue=false)]
        public string AIRMnthsWithHpv { get; set; }

        /// <summary>
        /// The facility’s or permit&#39;s primary North American Industry Classification System (NAICS) Code.
        /// </summary>
        /// <value>The facility’s or permit&#39;s primary North American Industry Classification System (NAICS) Code.</value>
        /// <example>812320</example>
        [Required]
        [DataMember(Name="AIRNAICS", EmitDefaultValue=false)]
        public string AIRNAICS { get; set; }

        /// <summary>
        /// The name of the AIR Facility.
        /// </summary>
        /// <value>The name of the AIR Facility.</value>
        /// <example>WEST PARK CLEANERS</example>
        [Required]
        [DataMember(Name="AIRName", EmitDefaultValue=false)]
        public string AIRName { get; set; }

        /// <summary>
        /// The New Source Performance Standards (NSPS) Subpart associated with the facility.
        /// </summary>
        /// <value>The New Source Performance Standards (NSPS) Subpart associated with the facility.</value>
        /// <example>NSPS Part 60</example>
        [Required]
        [DataMember(Name="AIRNsps", EmitDefaultValue=false)]
        public string AIRNsps { get; set; }

        /// <summary>
        /// The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.
        /// </summary>
        /// <value>The Non-Major New Source Performance Standards (NSPS) Subpart associated with the facility.</value>
        /// <example>NSPS Part 60</example>
        [Required]
        [DataMember(Name="AIRNspsm", EmitDefaultValue=false)]
        public string AIRNspsm { get; set; }

        /// <summary>
        /// The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.
        /// </summary>
        /// <value>The total dollar amount of assessed (or final) penalties taken against the facility within the last five years under the Clean Air Act. This value only includes penalties that have been entered in the national program database, ICIS-Air.</value>
        /// <example>$435</example>
        [Required]
        [DataMember(Name="AIRPenalties", EmitDefaultValue=false)]
        public string AIRPenalties { get; set; }

        /// <summary>
        /// The names of pollutants or pollutant categories with violations reported in the last year.
        /// </summary>
        /// <value>The names of pollutants or pollutant categories with violations reported in the last year.</value>
        /// <example>Sulfur</example>
        [Required]
        [DataMember(Name="AIRPollRecentViol", EmitDefaultValue=false)]
        public string AIRPollRecentViol { get; set; }

        /// <summary>
        /// Comma-delimited list of AIR programs.
        /// </summary>
        /// <value>Comma-delimited list of AIR programs.</value>
        /// <example>MACT, SIP</example>
        [Required]
        [DataMember(Name="AIRPrograms", EmitDefaultValue=false)]
        public string AIRPrograms { get; set; }

        /// <summary>
        /// The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.
        /// </summary>
        /// <value>The number of quarters in the last three years in which the permit or site is considered in High Priority Violation (HPV) status.</value>
        /// <example>4</example>
        [Required]
        [DataMember(Name="AIRQtrsWithHpv", EmitDefaultValue=false)]
        public string AIRQtrsWithHpv { get; set; }

        /// <summary>
        /// The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.
        /// </summary>
        /// <value>The number of quarters in the last three years in which the permit or site has had unresolved violation(s) reported.</value>
        /// <example>2</example>
        [Required]
        [DataMember(Name="AIRQtrsWithViol", EmitDefaultValue=false)]
        public string AIRQtrsWithViol { get; set; }

        /// <summary>
        /// The number of violations reported in the last year.
        /// </summary>
        /// <value>The number of violations reported in the last year.</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="AIRRecentViolCnt", EmitDefaultValue=false)]
        public string AIRRecentViolCnt { get; set; }

        /// <summary>
        /// Gets or Sets AIRStackTest5YrAll
        /// </summary>
        [Required]
        [DataMember(Name="AIRStackTest5YrAll", EmitDefaultValue=false)]
        public string AIRStackTest5YrAll { get; set; }

        /// <summary>
        /// Gets or Sets AIRStackTest5YrFail
        /// </summary>
        [Required]
        [DataMember(Name="AIRStackTest5YrFail", EmitDefaultValue=false)]
        public string AIRStackTest5YrFail { get; set; }

        /// <summary>
        /// The state where the AIR facility is located.
        /// </summary>
        /// <value>The state where the AIR facility is located.</value>
        /// <example>WI</example>
        [Required]
        [DataMember(Name="AIRState", EmitDefaultValue=false)]
        public string AIRState { get; set; }

        /// <summary>
        /// The status of the AIR facility location.
        /// </summary>
        /// <value>The status of the AIR facility location.</value>
        /// <example>Permanently Closed</example>
        [Required]
        [DataMember(Name="AIRStatus", EmitDefaultValue=false)]
        public string AIRStatus { get; set; }

        /// <summary>
        /// The street address of the AIR facility location.
        /// </summary>
        /// <value>The street address of the AIR facility location.</value>
        /// <example>2130 P STREET N.W.</example>
        [Required]
        [DataMember(Name="AIRStreet", EmitDefaultValue=false)]
        public string AIRStreet { get; set; }

        /// <summary>
        /// The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
        /// </summary>
        /// <value>The EPA Tribal or Native Alaskan Village Identifier for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.</value>
        [Required]
        [DataMember(Name="AIRTRIbalEPAids", EmitDefaultValue=false)]
        public string AIRTRIbalEPAids { get; set; }

        /// <summary>
        /// The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.
        /// </summary>
        /// <value>The EPA Tribal or Native Alaskan Village Name for facilities, that based on their Best Pick FRS spatial coordinate, are within a Tribal or Alaskan Village area.</value>
        [Required]
        [DataMember(Name="AIRTRIbalNames", EmitDefaultValue=false)]
        public string AIRTRIbalNames { get; set; }

        /// <summary>
        /// The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.
        /// </summary>
        /// <value>The program office defines each CAA Source ID and the associated permits as being Federally Reportable or Non-Federally Reportable. Under the CAA, federally reportable source include majors, synthetic minors, NESHAP Part 61 minors, minors with an unresolved High Priority Violation (HPV), with recent enforcement action, or included on a Compliance Monitoring Strategy plan.</value>
        /// <example>Minor Emissions</example>
        [Required]
        [DataMember(Name="AIRUniverse", EmitDefaultValue=false)]
        public string AIRUniverse { get; set; }

        /// <summary>
        /// The five-digit zip code of the AIR facility.
        /// </summary>
        /// <value>The five-digit zip code of the AIR facility.</value>
        /// <example>20037</example>
        [Required]
        [DataMember(Name="AIRZip", EmitDefaultValue=false)]
        public string AIRZip { get; set; }

        /// <summary>
        /// A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.
        /// </summary>
        /// <value>A Y/N indicator indicating that the facility is active and located within the lower 48 contiguous US States.</value>
        [Required]
        [DataMember(Name="ActiveLower48", EmitDefaultValue=false)]
        public string ActiveLower48 { get; set; }

        /// <summary>
        /// A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.
        /// </summary>
        /// <value>A unique  ID assigned for each record/permit/site/facility within ICIS-NPDES. These identifiers are for used tracking purposes in the individual data systems.</value>
        /// <example>DC0000001</example>
        [Required]
        [DataMember(Name="CWAIDs", EmitDefaultValue=false)]
        public string CWAIDs { get; set; }

        /// <summary>
        /// The estimated accuracy in Meters for the facility&#39;s geospatial coordinate.
        /// </summary>
        /// <value>The estimated accuracy in Meters for the facility&#39;s geospatial coordinate.</value>
        /// <example>50</example>
        [Required]
        [DataMember(Name="CalculatedAccuracyMeters", EmitDefaultValue=false)]
        public string CalculatedAccuracyMeters { get; set; }

        /// <summary>
        /// Facility identifiers for the Clean Air Markets Division database.
        /// </summary>
        /// <value>Facility identifiers for the Clean Air Markets Division database.</value>
        [Required]
        [DataMember(Name="CamdIDs", EmitDefaultValue=false)]
        public string CamdIDs { get; set; }

        /// <summary>
        /// A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.
        /// </summary>
        /// <value>A geographic unit used by the United States Census Bureau, generally defined to contain between 600 and 3,000 people.</value>
        /// <example>110010096022</example>
        [Required]
        [DataMember(Name="CensusBlockGroup", EmitDefaultValue=false)]
        public string CensusBlockGroup { get; set; }

        /// <summary>
        /// Displays \&quot;Y\&quot; if the facility is located within the Chesapeake Bay watershed.
        /// </summary>
        /// <value>Displays \&quot;Y\&quot; if the facility is located within the Chesapeake Bay watershed.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="ChesapeakeBayFlag", EmitDefaultValue=false)]
        public string ChesapeakeBayFlag { get; set; }

        /// <summary>
        /// ??
        /// </summary>
        /// <value>??</value>
        /// <example>ADDRESS MATCHING-HOUSE NUMBER</example>
        [Required]
        [DataMember(Name="CollectionMethod", EmitDefaultValue=false)]
        public string CollectionMethod { get; set; }

        /// <summary>
        /// Indicates if the facility has a current significant violation. 1 &#x3D; Yes
        /// </summary>
        /// <value>Indicates if the facility has a current significant violation. 1 &#x3D; Yes</value>
        /// <example>0</example>
        [Required]
        [DataMember(Name="CurrSvFlag", EmitDefaultValue=false)]
        public string CurrSvFlag { get; set; }

        /// <summary>
        /// Indicates if the facility has a current violation. 1 &#x3D; Yes
        /// </summary>
        /// <value>Indicates if the facility has a current violation. 1 &#x3D; Yes</value>
        /// <example>0</example>
        [Required]
        [DataMember(Name="CurrVioFlag", EmitDefaultValue=false)]
        public string CurrVioFlag { get; set; }

        /// <summary>
        /// The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.
        /// </summary>
        /// <value>The EPA data system in which permit and facility records are kept. EPA&#39;s Facility Registry System (FRS) links all program database records (such as permit IDs and IDs facilities use in reporting to EPA) together. The following list describes the individual data systems that are linked to from the detailed facility report:   - AFS: Air Facility System for Clean Air Act stationary source programs. - ICP: Integrated Compliance Information System for Clean Water Act programs monitoring National Pollutant Discharge Elimination System (NPDES) permits. - RCR: Resource Conservation and Recovery Act Information System (RCRAInfo) for tracking the Resource Conservation and Recovery Act (RCRA) programs. - NCDB: National Compliance Database System for monitoring national performance of the Toxic Substance Control Act (TSCA); the Emergency Planning and Right-to-Know Act, Section 313 (EPCRA); the Asbestos Hazard Emergency Response (AHERA); and the Federal Insecticide, Fungicide, and Rodenticide Act (FIFRA). - TRI: Toxics Release Inventory for Emergency Planning and Community Right-to-Know Act, Section 313 submissions. - NEI: National Emissions Inventory database contains information on stationary and mobile sources that emit criteria air pollutants and their precursors, as well as hazardous air pollutants (HAPs). The database includes estimates of annual emissions, by source, of air pollutants in each area of the country, on an annual basis. - TSCA: Toxic Substances Control Act addressing the production, importation, use, and disposal of specific chemicals.</value>
        /// <example>ICP</example>
        [Required]
        [DataMember(Name="EPASystem", EmitDefaultValue=false)]
        public string EPASystem { get; set; }

        /// <summary>
        /// Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes
        /// </summary>
        /// <value>Indicates if the facility has a formal enforcement action within the last 5 years. 1 &#x3D; Yes</value>
        /// <example>0</example>
        [Required]
        [DataMember(Name="Ea5yrFlag", EmitDefaultValue=false)]
        public string Ea5yrFlag { get; set; }

        /// <summary>
        /// A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.
        /// </summary>
        /// <value>A unique ID assigned for each facility within EPA’s Emissions Inventory System (EIS) Database.</value>
        /// <example>12620001</example>
        [Required]
        [DataMember(Name="EisIDs", EmitDefaultValue=false)]
        public string EisIDs { get; set; }

        /// <summary>
        /// A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
        /// </summary>
        /// <value>A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.</value>
        [Required]
        [DataMember(Name="EjscreenFlag", EmitDefaultValue=false)]
        public string EjscreenFlag { get; set; }

        /// <summary>
        /// A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.
        /// </summary>
        /// <value>A Y/N indicator identifying whether or not the facility is within an Environmental Justice area.</value>
        [Required]
        [DataMember(Name="EjscreenFlagUs", EmitDefaultValue=false)]
        public string EjscreenFlagUs { get; set; }

        /// <summary>
        /// Indicates whether the facility reports to the Clean Air Markets Division (CAMD).
        /// </summary>
        /// <value>Indicates whether the facility reports to the Clean Air Markets Division (CAMD).</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacCamdReporter", EmitDefaultValue=false)]
        public string FacCamdReporter { get; set; }

        /// <summary>
        /// The facility county name from EPA&#39;s Facility Registry System
        /// </summary>
        /// <value>The facility county name from EPA&#39;s Facility Registry System</value>
        /// <example>Fairfax County</example>
        [Required]
        [DataMember(Name="FacCountyName", EmitDefaultValue=false)]
        public string FacCountyName { get; set; }

        /// <summary>
        /// The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.
        /// </summary>
        /// <value>The 8-digit Hydrologic Unit Code (HUC) of the watershed in which the facility resides. A HUC number is assigned to every watershed in the nation and uniquely identifies the watershed.</value>
        /// <example>552968</example>
        [Required]
        [DataMember(Name="FacDerivedHuc", EmitDefaultValue=false)]
        public string FacDerivedHuc { get; set; }

        /// <summary>
        /// The tribes or tribal territories located within 25 miles of the facility&#39;s location.
        /// </summary>
        /// <value>The tribes or tribal territories located within 25 miles of the facility&#39;s location.</value>
        /// <example>Cherokee Nation</example>
        [Required]
        [DataMember(Name="FacDerivedTRIbes", EmitDefaultValue=false)]
        public string FacDerivedTRIbes { get; set; }

        /// <summary>
        /// The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.
        /// </summary>
        /// <value>The Hydrologic Unit Code (HUC-12) of the waterbody in which the facility resides, derived based on location data in FRS.</value>
        /// <example>20700100204</example>
        [Required]
        [DataMember(Name="FacDerivedWBD", EmitDefaultValue=false)]
        public string FacDerivedWBD { get; set; }

        /// <summary>
        /// The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate
        /// </summary>
        /// <value>The 12 digit Watershed Boundary Dataset Name derived from the FRS Best Pick Coordinate</value>
        /// <example>Fourmile Run-Potomac River</example>
        [Required]
        [DataMember(Name="FacDerivedWBDName", EmitDefaultValue=false)]
        public string FacDerivedWBDName { get; set; }

        /// <summary>
        /// The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).
        /// </summary>
        /// <value>The amount of hazardous air pollutants released to air in tons per year, as reported in the most recent National Emissions Inventory (NEI).</value>
        /// <example>2.35</example>
        [Required]
        [DataMember(Name="FacEisAIRReleases", EmitDefaultValue=false)]
        public string FacEisAIRReleases { get; set; }

        /// <summary>
        /// Indicates whether the facility reports to the Emissions Inventory System (EIS).
        /// </summary>
        /// <value>Indicates whether the facility reports to the Emissions Inventory System (EIS).</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacEisReporter", EmitDefaultValue=false)]
        public string FacEisReporter { get; set; }

        /// <summary>
        /// The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.
        /// </summary>
        /// <value>The 2-digit Federal Information Processing Standards (FIPS) code to identify the county that a facility is located in.</value>
        /// <example>55001</example>
        [Required]
        [DataMember(Name="FacFIPSCode", EmitDefaultValue=false)]
        public string FacFIPSCode { get; set; }

        /// <summary>
        /// Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C &#x3D; Civilian Federal Agency; D &#x3D; Department of Defense; E &#x3D; Department of Energy; X &#x3D; Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.
        /// </summary>
        /// <value>Indicates the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government. The five-character code consists of a letter followed by four numbers. There are four possible letters that can occupy the first character position: C &#x3D; Civilian Federal Agency; D &#x3D; Department of Defense; E &#x3D; Department of Energy; X &#x3D; Unknown. The second and third characters represent the agency code, while the fourth and fifth characters represent the bureau code.</value>
        /// <example>E</example>
        [Required]
        [DataMember(Name="FacFederalAgencyCode", EmitDefaultValue=false)]
        public string FacFederalAgencyCode { get; set; }

        /// <summary>
        /// Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.
        /// </summary>
        /// <value>Indicates the name of the federal agency, as classified in FRS. Federal agencies are installations that are owned and operated by the U.S. government.</value>
        /// <example>EPA</example>
        [Required]
        [DataMember(Name="FacFederalAgencyName", EmitDefaultValue=false)]
        public string FacFederalAgencyName { get; set; }

        /// <summary>
        /// The annual sum of total release amounts and \&quot;associated quantities\&quot; of all linked Greenhouse Gas IDs from the Office of Air and Radiation \&quot;Summary 2010 Greenhouse Gas Data.\&quot; Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).
        /// </summary>
        /// <value>The annual sum of total release amounts and \&quot;associated quantities\&quot; of all linked Greenhouse Gas IDs from the Office of Air and Radiation \&quot;Summary 2010 Greenhouse Gas Data.\&quot; Units are reported as metric tons of CO2 equivalents per year (MTCO2e/year).</value>
        /// <example>100</example>
        [Required]
        [DataMember(Name="FacGHGCO2Releases", EmitDefaultValue=false)]
        public string FacGHGCO2Releases { get; set; }

        /// <summary>
        /// Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)
        /// </summary>
        /// <value>Indicates whether the facility reports to the Greenhouse Gas Reporting Program (GHGRP)</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacGHGReporter", EmitDefaultValue=false)]
        public string FacGHGReporter { get; set; }

        /// <summary>
        /// Flag showing Y/N whether the facility is located in Indian Country.
        /// </summary>
        /// <value>Flag showing Y/N whether the facility is located in Indian Country.</value>
        [Required]
        [DataMember(Name="FacIndianCntryFlg", EmitDefaultValue=false)]
        public string FacIndianCntryFlg { get; set; }

        /// <summary>
        /// Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.
        /// </summary>
        /// <value>Returns “Y” if a facility is located within a tribal spatial boundary as defined by the U.S. Census Bureau 2010 tribal boundary layer data for tribes in the lower 48 states and Bureau of Land Management Alaska State Office data for native villages in Alaska. Returns “N” if a facility is not located within a tribal or native Alaskan village area.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacIndianSpatialFlg", EmitDefaultValue=false)]
        public string FacIndianSpatialFlg { get; set; }

        /// <summary>
        /// The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
        /// </summary>
        /// <value>The latitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.</value>
        /// <example>38.803076</example>
        [Required]
        [DataMember(Name="FacLat", EmitDefaultValue=false)]
        public string FacLat { get; set; }

        /// <summary>
        /// The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.
        /// </summary>
        /// <value>The longitude of the facility in decimal degrees expressed using the NAD83 horizontal datum. The coordinate comes from the FRS EPA Locational Reference Tables (LRT) file which represents the most accurate value for the facility based on the available spatial metadata.</value>
        /// <example>-77.085951</example>
        [Required]
        [DataMember(Name="FacLong", EmitDefaultValue=false)]
        public string FacLong { get; set; }

        /// <summary>
        /// Graphical indicator denoting whether geographical data required to map a facility are available.
        /// </summary>
        /// <value>Graphical indicator denoting whether geographical data required to map a facility are available.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacMapFlg", EmitDefaultValue=false)]
        public string FacMapFlg { get; set; }

        /// <summary>
        /// The default map icon image file calculated for the facility by the ECHO program.
        /// </summary>
        /// <value>The default map icon image file calculated for the facility by the ECHO program.</value>
        /// <example>CWA-NC-MJ-2.png</example>
        [Required]
        [DataMember(Name="FacMapIcon", EmitDefaultValue=false)]
        public string FacMapIcon { get; set; }

        /// <summary>
        /// Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.
        /// </summary>
        /// <value>Indicates whether the facility is located in a nonattainment area of the country, where air pollution levels persistently exceed the national ambient air quality standards. This flag does not indicate whether or not the facility has violated national ambient area quality standards.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacNaaFlag", EmitDefaultValue=false)]
        public string FacNaaFlag { get; set; }

        /// <summary>
        /// Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.
        /// </summary>
        /// <value>Percent Minority is the percentage of the population of the given area that is considered minority. Statistics are shown for the area within a 3-mile radius of each facility.</value>
        /// <example>45.379</example>
        [Required]
        [DataMember(Name="FacPercentMinority", EmitDefaultValue=false)]
        public string FacPercentMinority { get; set; }

        /// <summary>
        /// The number of persons per square mile in the profiled area.
        /// </summary>
        /// <value>The number of persons per square mile in the profiled area.</value>
        /// <example>9611.17</example>
        [Required]
        [DataMember(Name="FacPopulationDensity", EmitDefaultValue=false)]
        public string FacPopulationDensity { get; set; }

        /// <summary>
        /// Indicates the facility’s or permit&#39;s primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.
        /// </summary>
        /// <value>Indicates the facility’s or permit&#39;s primary Standard Industrial Classification (SIC) Code. The SIC code describes the primary activity of the facility.</value>
        /// <example>811</example>
        [Required]
        [DataMember(Name="FacSICCodes", EmitDefaultValue=false)]
        public string FacSICCodes { get; set; }

        /// <summary>
        /// The standardized  facility county name from EPA&#39;s Facility Registry System
        /// </summary>
        /// <value>The standardized  facility county name from EPA&#39;s Facility Registry System</value>
        /// <example>Fairfax County</example>
        [Required]
        [DataMember(Name="FacStdCountyName", EmitDefaultValue=false)]
        public string FacStdCountyName { get; set; }

        /// <summary>
        /// The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.
        /// </summary>
        /// <value>The total chemical releases to air, in pounds, as reported to TRI by the facility for the most recent reporting year.</value>
        /// <example>36</example>
        [Required]
        [DataMember(Name="FacTRIAIRReleases", EmitDefaultValue=false)]
        public string FacTRIAIRReleases { get; set; }

        /// <summary>
        /// The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).
        /// </summary>
        /// <value>The pounds of chemicals considered to be carcinogens released to air, as reported to TRI for the most recent reporting year. Chemicals are classified as carcinogens under the requirements of the Occupational Safety and Health Administration (OSHA).</value>
        /// <example>24</example>
        [Required]
        [DataMember(Name="FacTRICarcAIRReleases", EmitDefaultValue=false)]
        public string FacTRICarcAIRReleases { get; set; }

        /// <summary>
        /// The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.
        /// </summary>
        /// <value>The pounds of chemicals classified as hazardous air pollutants (HAPS) released to air in pounds per year, as reported to TRI for the most recent reporting year.</value>
        /// <example>35.5</example>
        [Required]
        [DataMember(Name="FacTRIHapsReleases", EmitDefaultValue=false)]
        public string FacTRIHapsReleases { get; set; }

        /// <summary>
        /// Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.
        /// </summary>
        /// <value>Indicates whether facility reported to the Toxics Release Inventory (TRI) for the most recent reporting year.</value>
        /// <example>B</example>
        [Required]
        [DataMember(Name="FacTRIReporter", EmitDefaultValue=false)]
        public string FacTRIReporter { get; set; }

        /// <summary>
        /// A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.
        /// </summary>
        /// <value>A Y/N flag indicating that the facility is within 100KM of the US-Mexico Border.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="FacUsMexBorderFlg", EmitDefaultValue=false)]
        public string FacUsMexBorderFlg { get; set; }

        /// <summary>
        /// A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.
        /// </summary>
        /// <value>A unique ID assigned for each facility within EPA’s Greenhouse Gas Reporting Program (GHGRP) Emissions Data Sets.</value>
        /// <example>110000</example>
        [Required]
        [DataMember(Name="GHGIDs", EmitDefaultValue=false)]
        public string GHGIDs { get; set; }

        /// <summary>
        /// ???
        /// </summary>
        /// <value>???</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="HasPollRpt", EmitDefaultValue=false)]
        public string HasPollRpt { get; set; }

        /// <summary>
        /// Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.
        /// </summary>
        /// <value>Indicates if the facility has an informal enforcement action within the last 5 years. 1 &#x3D; Yes.</value>
        /// <example>0</example>
        [Required]
        [DataMember(Name="Infea5yrFlag", EmitDefaultValue=false)]
        public string Infea5yrFlag { get; set; }

        /// <summary>
        /// Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes
        /// </summary>
        /// <value>Indicates if the facility has an inspection within the last 5 years. 1 &#x3D; Yes</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="Insp5yrFlag", EmitDefaultValue=false)]
        public string Insp5yrFlag { get; set; }

        /// <summary>
        /// The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.
        /// </summary>
        /// <value>The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA or a state agency was completed.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="LastDatePce", EmitDefaultValue=false)]
        public string LastDatePce { get; set; }

        /// <summary>
        /// The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.
        /// </summary>
        /// <value>The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by EPA was completed.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="LastDatePceEPA", EmitDefaultValue=false)]
        public string LastDatePceEPA { get; set; }

        /// <summary>
        /// The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.
        /// </summary>
        /// <value>The date on which the most recent Partial Compliance Evaluation (PCE) of the facility by a state agency was completed.</value>
        /// <example>04/25/2014</example>
        [Required]
        [DataMember(Name="LastDatePceSta", EmitDefaultValue=false)]
        public string LastDatePceSta { get; set; }

        /// <summary>
        /// Code for regions within a state. Search criteria for DFR in OTIS.
        /// </summary>
        /// <value>Code for regions within a state. Search criteria for DFR in OTIS.</value>
        [Required]
        [DataMember(Name="LocalControlRegionCode", EmitDefaultValue=false)]
        public string LocalControlRegionCode { get; set; }

        /// <summary>
        /// Regions within a state. Search criteria for DFR in OTIS.
        /// </summary>
        /// <value>Regions within a state. Search criteria for DFR in OTIS.</value>
        [Required]
        [DataMember(Name="LocalControlRegionName", EmitDefaultValue=false)]
        public string LocalControlRegionName { get; set; }

        /// <summary>
        /// Flag showing Y/N whether location is within the contiguous (lower 48) United States.
        /// </summary>
        /// <value>Flag showing Y/N whether location is within the contiguous (lower 48) United States.</value>
        /// <example>Y</example>
        [Required]
        [DataMember(Name="Lower48", EmitDefaultValue=false)]
        public string Lower48 { get; set; }

        /// <summary>
        /// Gets or Sets MaintPollutantsNaa
        /// </summary>
        [Required]
        [DataMember(Name="MaintPollutantsNaa", EmitDefaultValue=false)]
        public string MaintPollutantsNaa { get; set; }

        /// <summary>
        /// Gets or Sets MaintStandardsNaa
        /// </summary>
        [Required]
        [DataMember(Name="MaintStandardsNaa", EmitDefaultValue=false)]
        public string MaintStandardsNaa { get; set; }

        /// <summary>
        /// Gets or Sets MaintStatusNaa
        /// </summary>
        [Required]
        [DataMember(Name="MaintStatusNaa", EmitDefaultValue=false)]
        public string MaintStatusNaa { get; set; }

        /// <summary>
        /// No Longer Used.
        /// </summary>
        /// <value>No Longer Used.</value>
        [Required]
        [DataMember(Name="Map", EmitDefaultValue=false)]
        public string Map { get; set; }

        /// <summary>
        /// The maximum percentile from all individual EJSCREEN indicators.
        /// </summary>
        /// <value>The maximum percentile from all individual EJSCREEN indicators.</value>
        /// <example>98</example>
        [Required]
        [DataMember(Name="MaxPctileUs", EmitDefaultValue=false)]
        public string MaxPctileUs { get; set; }

        /// <summary>
        /// A sorting score for internal use.
        /// </summary>
        /// <value>A sorting score for internal use.</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="MaxScore", EmitDefaultValue=false)]
        public string MaxScore { get; set; }

        /// <summary>
        /// Gets or Sets NaPollutantsNaa
        /// </summary>
        [Required]
        [DataMember(Name="NaPollutantsNaa", EmitDefaultValue=false)]
        public string NaPollutantsNaa { get; set; }

        /// <summary>
        /// Gets or Sets NaStandardsNaa
        /// </summary>
        [Required]
        [DataMember(Name="NaStandardsNaa", EmitDefaultValue=false)]
        public string NaStandardsNaa { get; set; }

        /// <summary>
        /// Gets or Sets NaStatusNaa
        /// </summary>
        [Required]
        [DataMember(Name="NaStatusNaa", EmitDefaultValue=false)]
        public string NaStatusNaa { get; set; }

        /// <summary>
        /// The nonattainment area categories that the facility is in, derived spatially based on the facility&#39;s geographic coordinates in FRS.�
        /// </summary>
        /// <value>The nonattainment area categories that the facility is in, derived spatially based on the facility&#39;s geographic coordinates in FRS.�</value>
        /// <example>8-HOUR OZONE(2015)</example>
        [Required]
        [DataMember(Name="NaaCategories", EmitDefaultValue=false)]
        public string NaaCategories { get; set; }

        /// <summary>
        /// All criteria pollutants that the facility is in nonattainment for.
        /// </summary>
        /// <value>All criteria pollutants that the facility is in nonattainment for.</value>
        /// <example>OZONE</example>
        [Required]
        [DataMember(Name="NaaPollutants", EmitDefaultValue=false)]
        public string NaaPollutants { get; set; }

        /// <summary>
        /// Gets or Sets OtherPermitIDs
        /// </summary>
        [Required]
        [DataMember(Name="OtherPermitIDs", EmitDefaultValue=false)]
        public string OtherPermitIDs { get; set; }

        /// <summary>
        /// The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.
        /// </summary>
        /// <value>The number of primary EJSCREEN environmental justice (EJ) indexes exceeding the 80th or higher national percentile for the Census block group that the facility is located in.</value>
        /// <example>3</example>
        [Required]
        [DataMember(Name="Over80CountUs", EmitDefaultValue=false)]
        public string Over80CountUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN NATA air toxics cancer risk indicator.</value>
        /// <example>99</example>
        [Required]
        [DataMember(Name="PctileCancerUs", EmitDefaultValue=false)]
        public string PctileCancerUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN diesel particulate matter indicator.</value>
        /// <example>99</example>
        [Required]
        [DataMember(Name="PctileDpmUs", EmitDefaultValue=false)]
        public string PctileDpmUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN ozone indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN ozone indicator.</value>
        /// <example>94</example>
        [Required]
        [DataMember(Name="PctileO3Us", EmitDefaultValue=false)]
        public string PctileO3Us { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN Lead paint indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN Lead paint indicator.</value>
        /// <example>14.6</example>
        [Required]
        [DataMember(Name="PctilePctpre1960Us", EmitDefaultValue=false)]
        public string PctilePctpre1960Us { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN particulate matter indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN particulate matter indicator.</value>
        /// <example>93</example>
        [Required]
        [DataMember(Name="PctilePmUs", EmitDefaultValue=false)]
        public string PctilePmUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN proximity to major direct water dischargers indicator.</value>
        /// <example>23.7</example>
        [Required]
        [DataMember(Name="PctileProximityNPDESUs", EmitDefaultValue=false)]
        public string PctileProximityNPDESUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN proximity to National Priorities List (NPL) sites indicator.</value>
        /// <example>96</example>
        [Required]
        [DataMember(Name="PctileProximityNplUs", EmitDefaultValue=false)]
        public string PctileProximityNplUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN proximity to Risk Management Plan (RMP) sites indicator.</value>
        /// <example>91</example>
        [Required]
        [DataMember(Name="PctileProximityRmpUs", EmitDefaultValue=false)]
        public string PctileProximityRmpUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN proximity to Treatment Storage and Disposal Facilities (TSDFs) indicator.</value>
        /// <example>82</example>
        [Required]
        [DataMember(Name="PctileProximityTsdfUs", EmitDefaultValue=false)]
        public string PctileProximityTsdfUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN NATA respiratory hazard index indicator.</value>
        /// <example>99</example>
        [Required]
        [DataMember(Name="PctileRespUs", EmitDefaultValue=false)]
        public string PctileRespUs { get; set; }

        /// <summary>
        /// The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.
        /// </summary>
        /// <value>The national percentile of the census block group for the EJSCREEN Traffic proximity and volume indicator.</value>
        /// <example>92</example>
        [Required]
        [DataMember(Name="PctileTrafficScoreUs", EmitDefaultValue=false)]
        public string PctileTrafficScoreUs { get; set; }

        /// <summary>
        /// A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.
        /// </summary>
        /// <value>A unique 12-character ID assigned for each record/permit/site/facility within the RCRAInfo database.</value>
        /// <example>VAD981111784</example>
        [Required]
        [DataMember(Name="RCRAIDs", EmitDefaultValue=false)]
        public string RCRAIDs { get; set; }

        /// <summary>
        /// ??
        /// </summary>
        /// <value>??</value>
        /// <example>ENTRANCE POINT OF A FACILITY OR STATION</example>
        [Required]
        [DataMember(Name="ReferencePoint", EmitDefaultValue=false)]
        public string ReferencePoint { get; set; }

        /// <summary>
        /// An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.
        /// </summary>
        /// <value>An internal 12-digit Facility Registry Service (FRS) tracking number used to tie all facility data together in EPA regulatory program databases.</value>
        /// <example>110020837601</example>
        [Required]
        [DataMember(Name="RegistryID", EmitDefaultValue=false)]
        public string RegistryID { get; set; }

        /// <summary>
        /// A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.
        /// </summary>
        /// <value>A unique ID assigned to each facility submitting a Risk Management Plan to EPA under the Risk Management Plan Rule.</value>
        /// <example>110000</example>
        [Required]
        [DataMember(Name="RmpIDs", EmitDefaultValue=false)]
        public string RmpIDs { get; set; }

        /// <summary>
        /// A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).
        /// </summary>
        /// <value>A unique 9-character ID assigned for each public water system within the Safe Drinking Water Information System (SDWIS).</value>
        /// <example>DC0000001</example>
        [Required]
        [DataMember(Name="SDWAIDs", EmitDefaultValue=false)]
        public string SDWAIDs { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        /// <example>1</example>
        [Required]
        [DataMember(Name="Score", EmitDefaultValue=false)]
        public string Score { get; set; }

        /// <summary>
        /// Unique Identifier assigned by EPA.
        /// </summary>
        /// <value>Unique Identifier assigned by EPA.</value>
        /// <example>ALR040033</example>
        [Required]
        [DataMember(Name="SourceID", EmitDefaultValue=false)]
        public string SourceID { get; set; }

        /// <summary>
        /// The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act
        /// </summary>
        /// <value>The name of the statute associated with each of the permits and identifiers linked to the facility:  - CAA &#x3D; the Clean Air Act - CWA &#x3D; the Clean Water Act - RCRA &#x3D; the Resource Conservation and Recovery Act - EP313 &#x3D; the Emergency Planning and Community Right-to-Know Act, Section 313 (also known as the Toxics Release Inventory Program) - TSCA &#x3D; the Toxic Substances Control Act - SDWA &#x3D; the Safe Drinking Water Act</value>
        /// <example>CWA</example>
        [Required]
        [DataMember(Name="Statute", EmitDefaultValue=false)]
        public string Statute { get; set; }

        /// <summary>
        /// A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.
        /// </summary>
        /// <value>A unique 15-character ID assigned for each facility within the Toxics Release Inventory (TRI) program. The format is ZZZZZNNNNNSSSSS, where ZZZZZ &#x3D; ZIP code, NNNNN &#x3D; the first 5 consonants of the name, and SSSSS &#x3D; the first 5 non-blank non-special characters in the street address.</value>
        /// <example>20011FRTTT5001F</example>
        [Required]
        [DataMember(Name="TRIIDs", EmitDefaultValue=false)]
        public string TRIIDs { get; set; }

        /// <summary>
        /// A flag indicating that the facility is within a tribal area.
        /// </summary>
        /// <value>A flag indicating that the facility is within a tribal area.</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="TRIbalFlag", EmitDefaultValue=false)]
        public string TRIbalFlag { get; set; }

        /// <summary>
        /// Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes
        /// </summary>
        /// <value>Indicates if the facility had a violation within the last 3 years. 1 &#x3D; Yes</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="ViolFlag", EmitDefaultValue=false)]
        public string ViolFlag { get; set; }

        /// <summary>
        /// Contains flags that identify what web accessible documents are available for the facility.
        /// </summary>
        /// <value>Contains flags that identify what web accessible documents are available for the facility.</value>
        /// <example>C6</example>
        [Required]
        [DataMember(Name="WebDocs", EmitDefaultValue=false)]
        public string WebDocs { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Air03 {\n");
            sb.Append("  AIR3yrComplQtrsHistory: ").Append(AIR3yrComplQtrsHistory).Append("\n");
            sb.Append("  AIRCaseIDs: ").Append(AIRCaseIDs).Append("\n");
            sb.Append("  AIRCity: ").Append(AIRCity).Append("\n");
            sb.Append("  AIRClassification: ").Append(AIRClassification).Append("\n");
            sb.Append("  AIRComplStatus: ").Append(AIRComplStatus).Append("\n");
            sb.Append("  AIRCounty: ").Append(AIRCounty).Append("\n");
            sb.Append("  AIRDaysLastEval: ").Append(AIRDaysLastEval).Append("\n");
            sb.Append("  AIREPARegion: ").Append(AIREPARegion).Append("\n");
            sb.Append("  AIREvalCnt: ").Append(AIREvalCnt).Append("\n");
            sb.Append("  AIRFIPSCode: ").Append(AIRFIPSCode).Append("\n");
            sb.Append("  AIRFacilityTypeCode: ").Append(AIRFacilityTypeCode).Append("\n");
            sb.Append("  AIRFacilityTypeDesc: ").Append(AIRFacilityTypeDesc).Append("\n");
            sb.Append("  AIRFeaCnt: ").Append(AIRFeaCnt).Append("\n");
            sb.Append("  AIRHpvStatus: ").Append(AIRHpvStatus).Append("\n");
            sb.Append("  AIRIDs: ").Append(AIRIDs).Append("\n");
            sb.Append("  AIRIeaCnt: ").Append(AIRIeaCnt).Append("\n");
            sb.Append("  AIRIndianCntryFlg: ").Append(AIRIndianCntryFlg).Append("\n");
            sb.Append("  AIRLastEvalDate: ").Append(AIRLastEvalDate).Append("\n");
            sb.Append("  AIRLastEvalDateEPA: ").Append(AIRLastEvalDateEPA).Append("\n");
            sb.Append("  AIRLastEvalDateState: ").Append(AIRLastEvalDateState).Append("\n");
            sb.Append("  AIRLastFeaDate: ").Append(AIRLastFeaDate).Append("\n");
            sb.Append("  AIRLastFeaDateEPA: ").Append(AIRLastFeaDateEPA).Append("\n");
            sb.Append("  AIRLastFeaDateState: ").Append(AIRLastFeaDateState).Append("\n");
            sb.Append("  AIRLastIeaDate: ").Append(AIRLastIeaDate).Append("\n");
            sb.Append("  AIRLastIeaDateEPA: ").Append(AIRLastIeaDateEPA).Append("\n");
            sb.Append("  AIRLastIeaDateState: ").Append(AIRLastIeaDateState).Append("\n");
            sb.Append("  AIRLastPenaltyDate: ").Append(AIRLastPenaltyDate).Append("\n");
            sb.Append("  AIRLastStckDateEPA: ").Append(AIRLastStckDateEPA).Append("\n");
            sb.Append("  AIRLastStckDateState: ").Append(AIRLastStckDateState).Append("\n");
            sb.Append("  AIRLastStckTestDate: ").Append(AIRLastStckTestDate).Append("\n");
            sb.Append("  AIRLastStckTestResults: ").Append(AIRLastStckTestResults).Append("\n");
            sb.Append("  AIRLastViolDate: ").Append(AIRLastViolDate).Append("\n");
            sb.Append("  AIRMacts: ").Append(AIRMacts).Append("\n");
            sb.Append("  AIRMajorFlag: ").Append(AIRMajorFlag).Append("\n");
            sb.Append("  AIRMnthsWithHpv: ").Append(AIRMnthsWithHpv).Append("\n");
            sb.Append("  AIRNAICS: ").Append(AIRNAICS).Append("\n");
            sb.Append("  AIRName: ").Append(AIRName).Append("\n");
            sb.Append("  AIRNsps: ").Append(AIRNsps).Append("\n");
            sb.Append("  AIRNspsm: ").Append(AIRNspsm).Append("\n");
            sb.Append("  AIRPenalties: ").Append(AIRPenalties).Append("\n");
            sb.Append("  AIRPollRecentViol: ").Append(AIRPollRecentViol).Append("\n");
            sb.Append("  AIRPrograms: ").Append(AIRPrograms).Append("\n");
            sb.Append("  AIRQtrsWithHpv: ").Append(AIRQtrsWithHpv).Append("\n");
            sb.Append("  AIRQtrsWithViol: ").Append(AIRQtrsWithViol).Append("\n");
            sb.Append("  AIRRecentViolCnt: ").Append(AIRRecentViolCnt).Append("\n");
            sb.Append("  AIRStackTest5YrAll: ").Append(AIRStackTest5YrAll).Append("\n");
            sb.Append("  AIRStackTest5YrFail: ").Append(AIRStackTest5YrFail).Append("\n");
            sb.Append("  AIRState: ").Append(AIRState).Append("\n");
            sb.Append("  AIRStatus: ").Append(AIRStatus).Append("\n");
            sb.Append("  AIRStreet: ").Append(AIRStreet).Append("\n");
            sb.Append("  AIRTRIbalEPAids: ").Append(AIRTRIbalEPAids).Append("\n");
            sb.Append("  AIRTRIbalNames: ").Append(AIRTRIbalNames).Append("\n");
            sb.Append("  AIRUniverse: ").Append(AIRUniverse).Append("\n");
            sb.Append("  AIRZip: ").Append(AIRZip).Append("\n");
            sb.Append("  ActiveLower48: ").Append(ActiveLower48).Append("\n");
            sb.Append("  CWAIDs: ").Append(CWAIDs).Append("\n");
            sb.Append("  CalculatedAccuracyMeters: ").Append(CalculatedAccuracyMeters).Append("\n");
            sb.Append("  CamdIDs: ").Append(CamdIDs).Append("\n");
            sb.Append("  CensusBlockGroup: ").Append(CensusBlockGroup).Append("\n");
            sb.Append("  ChesapeakeBayFlag: ").Append(ChesapeakeBayFlag).Append("\n");
            sb.Append("  CollectionMethod: ").Append(CollectionMethod).Append("\n");
            sb.Append("  CurrSvFlag: ").Append(CurrSvFlag).Append("\n");
            sb.Append("  CurrVioFlag: ").Append(CurrVioFlag).Append("\n");
            sb.Append("  EPASystem: ").Append(EPASystem).Append("\n");
            sb.Append("  Ea5yrFlag: ").Append(Ea5yrFlag).Append("\n");
            sb.Append("  EisIDs: ").Append(EisIDs).Append("\n");
            sb.Append("  EjscreenFlag: ").Append(EjscreenFlag).Append("\n");
            sb.Append("  EjscreenFlagUs: ").Append(EjscreenFlagUs).Append("\n");
            sb.Append("  FacCamdReporter: ").Append(FacCamdReporter).Append("\n");
            sb.Append("  FacCountyName: ").Append(FacCountyName).Append("\n");
            sb.Append("  FacDerivedHuc: ").Append(FacDerivedHuc).Append("\n");
            sb.Append("  FacDerivedTRIbes: ").Append(FacDerivedTRIbes).Append("\n");
            sb.Append("  FacDerivedWBD: ").Append(FacDerivedWBD).Append("\n");
            sb.Append("  FacDerivedWBDName: ").Append(FacDerivedWBDName).Append("\n");
            sb.Append("  FacEisAIRReleases: ").Append(FacEisAIRReleases).Append("\n");
            sb.Append("  FacEisReporter: ").Append(FacEisReporter).Append("\n");
            sb.Append("  FacFIPSCode: ").Append(FacFIPSCode).Append("\n");
            sb.Append("  FacFederalAgencyCode: ").Append(FacFederalAgencyCode).Append("\n");
            sb.Append("  FacFederalAgencyName: ").Append(FacFederalAgencyName).Append("\n");
            sb.Append("  FacGHGCO2Releases: ").Append(FacGHGCO2Releases).Append("\n");
            sb.Append("  FacGHGReporter: ").Append(FacGHGReporter).Append("\n");
            sb.Append("  FacIndianCntryFlg: ").Append(FacIndianCntryFlg).Append("\n");
            sb.Append("  FacIndianSpatialFlg: ").Append(FacIndianSpatialFlg).Append("\n");
            sb.Append("  FacLat: ").Append(FacLat).Append("\n");
            sb.Append("  FacLong: ").Append(FacLong).Append("\n");
            sb.Append("  FacMapFlg: ").Append(FacMapFlg).Append("\n");
            sb.Append("  FacMapIcon: ").Append(FacMapIcon).Append("\n");
            sb.Append("  FacNaaFlag: ").Append(FacNaaFlag).Append("\n");
            sb.Append("  FacPercentMinority: ").Append(FacPercentMinority).Append("\n");
            sb.Append("  FacPopulationDensity: ").Append(FacPopulationDensity).Append("\n");
            sb.Append("  FacSICCodes: ").Append(FacSICCodes).Append("\n");
            sb.Append("  FacStdCountyName: ").Append(FacStdCountyName).Append("\n");
            sb.Append("  FacTRIAIRReleases: ").Append(FacTRIAIRReleases).Append("\n");
            sb.Append("  FacTRICarcAIRReleases: ").Append(FacTRICarcAIRReleases).Append("\n");
            sb.Append("  FacTRIHapsReleases: ").Append(FacTRIHapsReleases).Append("\n");
            sb.Append("  FacTRIReporter: ").Append(FacTRIReporter).Append("\n");
            sb.Append("  FacUsMexBorderFlg: ").Append(FacUsMexBorderFlg).Append("\n");
            sb.Append("  GHGIDs: ").Append(GHGIDs).Append("\n");
            sb.Append("  HasPollRpt: ").Append(HasPollRpt).Append("\n");
            sb.Append("  Infea5yrFlag: ").Append(Infea5yrFlag).Append("\n");
            sb.Append("  Insp5yrFlag: ").Append(Insp5yrFlag).Append("\n");
            sb.Append("  LastDatePce: ").Append(LastDatePce).Append("\n");
            sb.Append("  LastDatePceEPA: ").Append(LastDatePceEPA).Append("\n");
            sb.Append("  LastDatePceSta: ").Append(LastDatePceSta).Append("\n");
            sb.Append("  LocalControlRegionCode: ").Append(LocalControlRegionCode).Append("\n");
            sb.Append("  LocalControlRegionName: ").Append(LocalControlRegionName).Append("\n");
            sb.Append("  Lower48: ").Append(Lower48).Append("\n");
            sb.Append("  MaintPollutantsNaa: ").Append(MaintPollutantsNaa).Append("\n");
            sb.Append("  MaintStandardsNaa: ").Append(MaintStandardsNaa).Append("\n");
            sb.Append("  MaintStatusNaa: ").Append(MaintStatusNaa).Append("\n");
            sb.Append("  Map: ").Append(Map).Append("\n");
            sb.Append("  MaxPctileUs: ").Append(MaxPctileUs).Append("\n");
            sb.Append("  MaxScore: ").Append(MaxScore).Append("\n");
            sb.Append("  NaPollutantsNaa: ").Append(NaPollutantsNaa).Append("\n");
            sb.Append("  NaStandardsNaa: ").Append(NaStandardsNaa).Append("\n");
            sb.Append("  NaStatusNaa: ").Append(NaStatusNaa).Append("\n");
            sb.Append("  NaaCategories: ").Append(NaaCategories).Append("\n");
            sb.Append("  NaaPollutants: ").Append(NaaPollutants).Append("\n");
            sb.Append("  OtherPermitIDs: ").Append(OtherPermitIDs).Append("\n");
            sb.Append("  Over80CountUs: ").Append(Over80CountUs).Append("\n");
            sb.Append("  PctileCancerUs: ").Append(PctileCancerUs).Append("\n");
            sb.Append("  PctileDpmUs: ").Append(PctileDpmUs).Append("\n");
            sb.Append("  PctileO3Us: ").Append(PctileO3Us).Append("\n");
            sb.Append("  PctilePctpre1960Us: ").Append(PctilePctpre1960Us).Append("\n");
            sb.Append("  PctilePmUs: ").Append(PctilePmUs).Append("\n");
            sb.Append("  PctileProximityNPDESUs: ").Append(PctileProximityNPDESUs).Append("\n");
            sb.Append("  PctileProximityNplUs: ").Append(PctileProximityNplUs).Append("\n");
            sb.Append("  PctileProximityRmpUs: ").Append(PctileProximityRmpUs).Append("\n");
            sb.Append("  PctileProximityTsdfUs: ").Append(PctileProximityTsdfUs).Append("\n");
            sb.Append("  PctileRespUs: ").Append(PctileRespUs).Append("\n");
            sb.Append("  PctileTrafficScoreUs: ").Append(PctileTrafficScoreUs).Append("\n");
            sb.Append("  RCRAIDs: ").Append(RCRAIDs).Append("\n");
            sb.Append("  ReferencePoint: ").Append(ReferencePoint).Append("\n");
            sb.Append("  RegistryID: ").Append(RegistryID).Append("\n");
            sb.Append("  RmpIDs: ").Append(RmpIDs).Append("\n");
            sb.Append("  SDWAIDs: ").Append(SDWAIDs).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  SourceID: ").Append(SourceID).Append("\n");
            sb.Append("  Statute: ").Append(Statute).Append("\n");
            sb.Append("  TRIIDs: ").Append(TRIIDs).Append("\n");
            sb.Append("  TRIbalFlag: ").Append(TRIbalFlag).Append("\n");
            sb.Append("  ViolFlag: ").Append(ViolFlag).Append("\n");
            sb.Append("  WebDocs: ").Append(WebDocs).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Air03)obj);
        }

        /// <summary>
        /// Returns true if Air03 instances are equal
        /// </summary>
        /// <param name="other">Instance of Air03 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Air03 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AIR3yrComplQtrsHistory == other.AIR3yrComplQtrsHistory ||
                    AIR3yrComplQtrsHistory != null &&
                    AIR3yrComplQtrsHistory.Equals(other.AIR3yrComplQtrsHistory)
                ) && 
                (
                    AIRCaseIDs == other.AIRCaseIDs ||
                    AIRCaseIDs != null &&
                    AIRCaseIDs.Equals(other.AIRCaseIDs)
                ) && 
                (
                    AIRCity == other.AIRCity ||
                    AIRCity != null &&
                    AIRCity.Equals(other.AIRCity)
                ) && 
                (
                    AIRClassification == other.AIRClassification ||
                    AIRClassification != null &&
                    AIRClassification.Equals(other.AIRClassification)
                ) && 
                (
                    AIRComplStatus == other.AIRComplStatus ||
                    AIRComplStatus != null &&
                    AIRComplStatus.Equals(other.AIRComplStatus)
                ) && 
                (
                    AIRCounty == other.AIRCounty ||
                    AIRCounty != null &&
                    AIRCounty.Equals(other.AIRCounty)
                ) && 
                (
                    AIRDaysLastEval == other.AIRDaysLastEval ||
                    AIRDaysLastEval != null &&
                    AIRDaysLastEval.Equals(other.AIRDaysLastEval)
                ) && 
                (
                    AIREPARegion == other.AIREPARegion ||
                    AIREPARegion != null &&
                    AIREPARegion.Equals(other.AIREPARegion)
                ) && 
                (
                    AIREvalCnt == other.AIREvalCnt ||
                    AIREvalCnt != null &&
                    AIREvalCnt.Equals(other.AIREvalCnt)
                ) && 
                (
                    AIRFIPSCode == other.AIRFIPSCode ||
                    AIRFIPSCode != null &&
                    AIRFIPSCode.Equals(other.AIRFIPSCode)
                ) && 
                (
                    AIRFacilityTypeCode == other.AIRFacilityTypeCode ||
                    AIRFacilityTypeCode != null &&
                    AIRFacilityTypeCode.Equals(other.AIRFacilityTypeCode)
                ) && 
                (
                    AIRFacilityTypeDesc == other.AIRFacilityTypeDesc ||
                    AIRFacilityTypeDesc != null &&
                    AIRFacilityTypeDesc.Equals(other.AIRFacilityTypeDesc)
                ) && 
                (
                    AIRFeaCnt == other.AIRFeaCnt ||
                    AIRFeaCnt != null &&
                    AIRFeaCnt.Equals(other.AIRFeaCnt)
                ) && 
                (
                    AIRHpvStatus == other.AIRHpvStatus ||
                    AIRHpvStatus != null &&
                    AIRHpvStatus.Equals(other.AIRHpvStatus)
                ) && 
                (
                    AIRIDs == other.AIRIDs ||
                    AIRIDs != null &&
                    AIRIDs.Equals(other.AIRIDs)
                ) && 
                (
                    AIRIeaCnt == other.AIRIeaCnt ||
                    AIRIeaCnt != null &&
                    AIRIeaCnt.Equals(other.AIRIeaCnt)
                ) && 
                (
                    AIRIndianCntryFlg == other.AIRIndianCntryFlg ||
                    AIRIndianCntryFlg != null &&
                    AIRIndianCntryFlg.Equals(other.AIRIndianCntryFlg)
                ) && 
                (
                    AIRLastEvalDate == other.AIRLastEvalDate ||
                    AIRLastEvalDate != null &&
                    AIRLastEvalDate.Equals(other.AIRLastEvalDate)
                ) && 
                (
                    AIRLastEvalDateEPA == other.AIRLastEvalDateEPA ||
                    AIRLastEvalDateEPA != null &&
                    AIRLastEvalDateEPA.Equals(other.AIRLastEvalDateEPA)
                ) && 
                (
                    AIRLastEvalDateState == other.AIRLastEvalDateState ||
                    AIRLastEvalDateState != null &&
                    AIRLastEvalDateState.Equals(other.AIRLastEvalDateState)
                ) && 
                (
                    AIRLastFeaDate == other.AIRLastFeaDate ||
                    AIRLastFeaDate != null &&
                    AIRLastFeaDate.Equals(other.AIRLastFeaDate)
                ) && 
                (
                    AIRLastFeaDateEPA == other.AIRLastFeaDateEPA ||
                    AIRLastFeaDateEPA != null &&
                    AIRLastFeaDateEPA.Equals(other.AIRLastFeaDateEPA)
                ) && 
                (
                    AIRLastFeaDateState == other.AIRLastFeaDateState ||
                    AIRLastFeaDateState != null &&
                    AIRLastFeaDateState.Equals(other.AIRLastFeaDateState)
                ) && 
                (
                    AIRLastIeaDate == other.AIRLastIeaDate ||
                    AIRLastIeaDate != null &&
                    AIRLastIeaDate.Equals(other.AIRLastIeaDate)
                ) && 
                (
                    AIRLastIeaDateEPA == other.AIRLastIeaDateEPA ||
                    AIRLastIeaDateEPA != null &&
                    AIRLastIeaDateEPA.Equals(other.AIRLastIeaDateEPA)
                ) && 
                (
                    AIRLastIeaDateState == other.AIRLastIeaDateState ||
                    AIRLastIeaDateState != null &&
                    AIRLastIeaDateState.Equals(other.AIRLastIeaDateState)
                ) && 
                (
                    AIRLastPenaltyDate == other.AIRLastPenaltyDate ||
                    AIRLastPenaltyDate != null &&
                    AIRLastPenaltyDate.Equals(other.AIRLastPenaltyDate)
                ) && 
                (
                    AIRLastStckDateEPA == other.AIRLastStckDateEPA ||
                    AIRLastStckDateEPA != null &&
                    AIRLastStckDateEPA.Equals(other.AIRLastStckDateEPA)
                ) && 
                (
                    AIRLastStckDateState == other.AIRLastStckDateState ||
                    AIRLastStckDateState != null &&
                    AIRLastStckDateState.Equals(other.AIRLastStckDateState)
                ) && 
                (
                    AIRLastStckTestDate == other.AIRLastStckTestDate ||
                    AIRLastStckTestDate != null &&
                    AIRLastStckTestDate.Equals(other.AIRLastStckTestDate)
                ) && 
                (
                    AIRLastStckTestResults == other.AIRLastStckTestResults ||
                    AIRLastStckTestResults != null &&
                    AIRLastStckTestResults.Equals(other.AIRLastStckTestResults)
                ) && 
                (
                    AIRLastViolDate == other.AIRLastViolDate ||
                    AIRLastViolDate != null &&
                    AIRLastViolDate.Equals(other.AIRLastViolDate)
                ) && 
                (
                    AIRMacts == other.AIRMacts ||
                    AIRMacts != null &&
                    AIRMacts.Equals(other.AIRMacts)
                ) && 
                (
                    AIRMajorFlag == other.AIRMajorFlag ||
                    AIRMajorFlag != null &&
                    AIRMajorFlag.Equals(other.AIRMajorFlag)
                ) && 
                (
                    AIRMnthsWithHpv == other.AIRMnthsWithHpv ||
                    AIRMnthsWithHpv != null &&
                    AIRMnthsWithHpv.Equals(other.AIRMnthsWithHpv)
                ) && 
                (
                    AIRNAICS == other.AIRNAICS ||
                    AIRNAICS != null &&
                    AIRNAICS.Equals(other.AIRNAICS)
                ) && 
                (
                    AIRName == other.AIRName ||
                    AIRName != null &&
                    AIRName.Equals(other.AIRName)
                ) && 
                (
                    AIRNsps == other.AIRNsps ||
                    AIRNsps != null &&
                    AIRNsps.Equals(other.AIRNsps)
                ) && 
                (
                    AIRNspsm == other.AIRNspsm ||
                    AIRNspsm != null &&
                    AIRNspsm.Equals(other.AIRNspsm)
                ) && 
                (
                    AIRPenalties == other.AIRPenalties ||
                    AIRPenalties != null &&
                    AIRPenalties.Equals(other.AIRPenalties)
                ) && 
                (
                    AIRPollRecentViol == other.AIRPollRecentViol ||
                    AIRPollRecentViol != null &&
                    AIRPollRecentViol.Equals(other.AIRPollRecentViol)
                ) && 
                (
                    AIRPrograms == other.AIRPrograms ||
                    AIRPrograms != null &&
                    AIRPrograms.Equals(other.AIRPrograms)
                ) && 
                (
                    AIRQtrsWithHpv == other.AIRQtrsWithHpv ||
                    AIRQtrsWithHpv != null &&
                    AIRQtrsWithHpv.Equals(other.AIRQtrsWithHpv)
                ) && 
                (
                    AIRQtrsWithViol == other.AIRQtrsWithViol ||
                    AIRQtrsWithViol != null &&
                    AIRQtrsWithViol.Equals(other.AIRQtrsWithViol)
                ) && 
                (
                    AIRRecentViolCnt == other.AIRRecentViolCnt ||
                    AIRRecentViolCnt != null &&
                    AIRRecentViolCnt.Equals(other.AIRRecentViolCnt)
                ) && 
                (
                    AIRStackTest5YrAll == other.AIRStackTest5YrAll ||
                    AIRStackTest5YrAll != null &&
                    AIRStackTest5YrAll.Equals(other.AIRStackTest5YrAll)
                ) && 
                (
                    AIRStackTest5YrFail == other.AIRStackTest5YrFail ||
                    AIRStackTest5YrFail != null &&
                    AIRStackTest5YrFail.Equals(other.AIRStackTest5YrFail)
                ) && 
                (
                    AIRState == other.AIRState ||
                    AIRState != null &&
                    AIRState.Equals(other.AIRState)
                ) && 
                (
                    AIRStatus == other.AIRStatus ||
                    AIRStatus != null &&
                    AIRStatus.Equals(other.AIRStatus)
                ) && 
                (
                    AIRStreet == other.AIRStreet ||
                    AIRStreet != null &&
                    AIRStreet.Equals(other.AIRStreet)
                ) && 
                (
                    AIRTRIbalEPAids == other.AIRTRIbalEPAids ||
                    AIRTRIbalEPAids != null &&
                    AIRTRIbalEPAids.Equals(other.AIRTRIbalEPAids)
                ) && 
                (
                    AIRTRIbalNames == other.AIRTRIbalNames ||
                    AIRTRIbalNames != null &&
                    AIRTRIbalNames.Equals(other.AIRTRIbalNames)
                ) && 
                (
                    AIRUniverse == other.AIRUniverse ||
                    AIRUniverse != null &&
                    AIRUniverse.Equals(other.AIRUniverse)
                ) && 
                (
                    AIRZip == other.AIRZip ||
                    AIRZip != null &&
                    AIRZip.Equals(other.AIRZip)
                ) && 
                (
                    ActiveLower48 == other.ActiveLower48 ||
                    ActiveLower48 != null &&
                    ActiveLower48.Equals(other.ActiveLower48)
                ) && 
                (
                    CWAIDs == other.CWAIDs ||
                    CWAIDs != null &&
                    CWAIDs.Equals(other.CWAIDs)
                ) && 
                (
                    CalculatedAccuracyMeters == other.CalculatedAccuracyMeters ||
                    CalculatedAccuracyMeters != null &&
                    CalculatedAccuracyMeters.Equals(other.CalculatedAccuracyMeters)
                ) && 
                (
                    CamdIDs == other.CamdIDs ||
                    CamdIDs != null &&
                    CamdIDs.Equals(other.CamdIDs)
                ) && 
                (
                    CensusBlockGroup == other.CensusBlockGroup ||
                    CensusBlockGroup != null &&
                    CensusBlockGroup.Equals(other.CensusBlockGroup)
                ) && 
                (
                    ChesapeakeBayFlag == other.ChesapeakeBayFlag ||
                    ChesapeakeBayFlag != null &&
                    ChesapeakeBayFlag.Equals(other.ChesapeakeBayFlag)
                ) && 
                (
                    CollectionMethod == other.CollectionMethod ||
                    CollectionMethod != null &&
                    CollectionMethod.Equals(other.CollectionMethod)
                ) && 
                (
                    CurrSvFlag == other.CurrSvFlag ||
                    CurrSvFlag != null &&
                    CurrSvFlag.Equals(other.CurrSvFlag)
                ) && 
                (
                    CurrVioFlag == other.CurrVioFlag ||
                    CurrVioFlag != null &&
                    CurrVioFlag.Equals(other.CurrVioFlag)
                ) && 
                (
                    EPASystem == other.EPASystem ||
                    EPASystem != null &&
                    EPASystem.Equals(other.EPASystem)
                ) && 
                (
                    Ea5yrFlag == other.Ea5yrFlag ||
                    Ea5yrFlag != null &&
                    Ea5yrFlag.Equals(other.Ea5yrFlag)
                ) && 
                (
                    EisIDs == other.EisIDs ||
                    EisIDs != null &&
                    EisIDs.Equals(other.EisIDs)
                ) && 
                (
                    EjscreenFlag == other.EjscreenFlag ||
                    EjscreenFlag != null &&
                    EjscreenFlag.Equals(other.EjscreenFlag)
                ) && 
                (
                    EjscreenFlagUs == other.EjscreenFlagUs ||
                    EjscreenFlagUs != null &&
                    EjscreenFlagUs.Equals(other.EjscreenFlagUs)
                ) && 
                (
                    FacCamdReporter == other.FacCamdReporter ||
                    FacCamdReporter != null &&
                    FacCamdReporter.Equals(other.FacCamdReporter)
                ) && 
                (
                    FacCountyName == other.FacCountyName ||
                    FacCountyName != null &&
                    FacCountyName.Equals(other.FacCountyName)
                ) && 
                (
                    FacDerivedHuc == other.FacDerivedHuc ||
                    FacDerivedHuc != null &&
                    FacDerivedHuc.Equals(other.FacDerivedHuc)
                ) && 
                (
                    FacDerivedTRIbes == other.FacDerivedTRIbes ||
                    FacDerivedTRIbes != null &&
                    FacDerivedTRIbes.Equals(other.FacDerivedTRIbes)
                ) && 
                (
                    FacDerivedWBD == other.FacDerivedWBD ||
                    FacDerivedWBD != null &&
                    FacDerivedWBD.Equals(other.FacDerivedWBD)
                ) && 
                (
                    FacDerivedWBDName == other.FacDerivedWBDName ||
                    FacDerivedWBDName != null &&
                    FacDerivedWBDName.Equals(other.FacDerivedWBDName)
                ) && 
                (
                    FacEisAIRReleases == other.FacEisAIRReleases ||
                    FacEisAIRReleases != null &&
                    FacEisAIRReleases.Equals(other.FacEisAIRReleases)
                ) && 
                (
                    FacEisReporter == other.FacEisReporter ||
                    FacEisReporter != null &&
                    FacEisReporter.Equals(other.FacEisReporter)
                ) && 
                (
                    FacFIPSCode == other.FacFIPSCode ||
                    FacFIPSCode != null &&
                    FacFIPSCode.Equals(other.FacFIPSCode)
                ) && 
                (
                    FacFederalAgencyCode == other.FacFederalAgencyCode ||
                    FacFederalAgencyCode != null &&
                    FacFederalAgencyCode.Equals(other.FacFederalAgencyCode)
                ) && 
                (
                    FacFederalAgencyName == other.FacFederalAgencyName ||
                    FacFederalAgencyName != null &&
                    FacFederalAgencyName.Equals(other.FacFederalAgencyName)
                ) && 
                (
                    FacGHGCO2Releases == other.FacGHGCO2Releases ||
                    FacGHGCO2Releases != null &&
                    FacGHGCO2Releases.Equals(other.FacGHGCO2Releases)
                ) && 
                (
                    FacGHGReporter == other.FacGHGReporter ||
                    FacGHGReporter != null &&
                    FacGHGReporter.Equals(other.FacGHGReporter)
                ) && 
                (
                    FacIndianCntryFlg == other.FacIndianCntryFlg ||
                    FacIndianCntryFlg != null &&
                    FacIndianCntryFlg.Equals(other.FacIndianCntryFlg)
                ) && 
                (
                    FacIndianSpatialFlg == other.FacIndianSpatialFlg ||
                    FacIndianSpatialFlg != null &&
                    FacIndianSpatialFlg.Equals(other.FacIndianSpatialFlg)
                ) && 
                (
                    FacLat == other.FacLat ||
                    FacLat != null &&
                    FacLat.Equals(other.FacLat)
                ) && 
                (
                    FacLong == other.FacLong ||
                    FacLong != null &&
                    FacLong.Equals(other.FacLong)
                ) && 
                (
                    FacMapFlg == other.FacMapFlg ||
                    FacMapFlg != null &&
                    FacMapFlg.Equals(other.FacMapFlg)
                ) && 
                (
                    FacMapIcon == other.FacMapIcon ||
                    FacMapIcon != null &&
                    FacMapIcon.Equals(other.FacMapIcon)
                ) && 
                (
                    FacNaaFlag == other.FacNaaFlag ||
                    FacNaaFlag != null &&
                    FacNaaFlag.Equals(other.FacNaaFlag)
                ) && 
                (
                    FacPercentMinority == other.FacPercentMinority ||
                    FacPercentMinority != null &&
                    FacPercentMinority.Equals(other.FacPercentMinority)
                ) && 
                (
                    FacPopulationDensity == other.FacPopulationDensity ||
                    FacPopulationDensity != null &&
                    FacPopulationDensity.Equals(other.FacPopulationDensity)
                ) && 
                (
                    FacSICCodes == other.FacSICCodes ||
                    FacSICCodes != null &&
                    FacSICCodes.Equals(other.FacSICCodes)
                ) && 
                (
                    FacStdCountyName == other.FacStdCountyName ||
                    FacStdCountyName != null &&
                    FacStdCountyName.Equals(other.FacStdCountyName)
                ) && 
                (
                    FacTRIAIRReleases == other.FacTRIAIRReleases ||
                    FacTRIAIRReleases != null &&
                    FacTRIAIRReleases.Equals(other.FacTRIAIRReleases)
                ) && 
                (
                    FacTRICarcAIRReleases == other.FacTRICarcAIRReleases ||
                    FacTRICarcAIRReleases != null &&
                    FacTRICarcAIRReleases.Equals(other.FacTRICarcAIRReleases)
                ) && 
                (
                    FacTRIHapsReleases == other.FacTRIHapsReleases ||
                    FacTRIHapsReleases != null &&
                    FacTRIHapsReleases.Equals(other.FacTRIHapsReleases)
                ) && 
                (
                    FacTRIReporter == other.FacTRIReporter ||
                    FacTRIReporter != null &&
                    FacTRIReporter.Equals(other.FacTRIReporter)
                ) && 
                (
                    FacUsMexBorderFlg == other.FacUsMexBorderFlg ||
                    FacUsMexBorderFlg != null &&
                    FacUsMexBorderFlg.Equals(other.FacUsMexBorderFlg)
                ) && 
                (
                    GHGIDs == other.GHGIDs ||
                    GHGIDs != null &&
                    GHGIDs.Equals(other.GHGIDs)
                ) && 
                (
                    HasPollRpt == other.HasPollRpt ||
                    HasPollRpt != null &&
                    HasPollRpt.Equals(other.HasPollRpt)
                ) && 
                (
                    Infea5yrFlag == other.Infea5yrFlag ||
                    Infea5yrFlag != null &&
                    Infea5yrFlag.Equals(other.Infea5yrFlag)
                ) && 
                (
                    Insp5yrFlag == other.Insp5yrFlag ||
                    Insp5yrFlag != null &&
                    Insp5yrFlag.Equals(other.Insp5yrFlag)
                ) && 
                (
                    LastDatePce == other.LastDatePce ||
                    LastDatePce != null &&
                    LastDatePce.Equals(other.LastDatePce)
                ) && 
                (
                    LastDatePceEPA == other.LastDatePceEPA ||
                    LastDatePceEPA != null &&
                    LastDatePceEPA.Equals(other.LastDatePceEPA)
                ) && 
                (
                    LastDatePceSta == other.LastDatePceSta ||
                    LastDatePceSta != null &&
                    LastDatePceSta.Equals(other.LastDatePceSta)
                ) && 
                (
                    LocalControlRegionCode == other.LocalControlRegionCode ||
                    LocalControlRegionCode != null &&
                    LocalControlRegionCode.Equals(other.LocalControlRegionCode)
                ) && 
                (
                    LocalControlRegionName == other.LocalControlRegionName ||
                    LocalControlRegionName != null &&
                    LocalControlRegionName.Equals(other.LocalControlRegionName)
                ) && 
                (
                    Lower48 == other.Lower48 ||
                    Lower48 != null &&
                    Lower48.Equals(other.Lower48)
                ) && 
                (
                    MaintPollutantsNaa == other.MaintPollutantsNaa ||
                    MaintPollutantsNaa != null &&
                    MaintPollutantsNaa.Equals(other.MaintPollutantsNaa)
                ) && 
                (
                    MaintStandardsNaa == other.MaintStandardsNaa ||
                    MaintStandardsNaa != null &&
                    MaintStandardsNaa.Equals(other.MaintStandardsNaa)
                ) && 
                (
                    MaintStatusNaa == other.MaintStatusNaa ||
                    MaintStatusNaa != null &&
                    MaintStatusNaa.Equals(other.MaintStatusNaa)
                ) && 
                (
                    Map == other.Map ||
                    Map != null &&
                    Map.Equals(other.Map)
                ) && 
                (
                    MaxPctileUs == other.MaxPctileUs ||
                    MaxPctileUs != null &&
                    MaxPctileUs.Equals(other.MaxPctileUs)
                ) && 
                (
                    MaxScore == other.MaxScore ||
                    MaxScore != null &&
                    MaxScore.Equals(other.MaxScore)
                ) && 
                (
                    NaPollutantsNaa == other.NaPollutantsNaa ||
                    NaPollutantsNaa != null &&
                    NaPollutantsNaa.Equals(other.NaPollutantsNaa)
                ) && 
                (
                    NaStandardsNaa == other.NaStandardsNaa ||
                    NaStandardsNaa != null &&
                    NaStandardsNaa.Equals(other.NaStandardsNaa)
                ) && 
                (
                    NaStatusNaa == other.NaStatusNaa ||
                    NaStatusNaa != null &&
                    NaStatusNaa.Equals(other.NaStatusNaa)
                ) && 
                (
                    NaaCategories == other.NaaCategories ||
                    NaaCategories != null &&
                    NaaCategories.Equals(other.NaaCategories)
                ) && 
                (
                    NaaPollutants == other.NaaPollutants ||
                    NaaPollutants != null &&
                    NaaPollutants.Equals(other.NaaPollutants)
                ) && 
                (
                    OtherPermitIDs == other.OtherPermitIDs ||
                    OtherPermitIDs != null &&
                    OtherPermitIDs.Equals(other.OtherPermitIDs)
                ) && 
                (
                    Over80CountUs == other.Over80CountUs ||
                    Over80CountUs != null &&
                    Over80CountUs.Equals(other.Over80CountUs)
                ) && 
                (
                    PctileCancerUs == other.PctileCancerUs ||
                    PctileCancerUs != null &&
                    PctileCancerUs.Equals(other.PctileCancerUs)
                ) && 
                (
                    PctileDpmUs == other.PctileDpmUs ||
                    PctileDpmUs != null &&
                    PctileDpmUs.Equals(other.PctileDpmUs)
                ) && 
                (
                    PctileO3Us == other.PctileO3Us ||
                    PctileO3Us != null &&
                    PctileO3Us.Equals(other.PctileO3Us)
                ) && 
                (
                    PctilePctpre1960Us == other.PctilePctpre1960Us ||
                    PctilePctpre1960Us != null &&
                    PctilePctpre1960Us.Equals(other.PctilePctpre1960Us)
                ) && 
                (
                    PctilePmUs == other.PctilePmUs ||
                    PctilePmUs != null &&
                    PctilePmUs.Equals(other.PctilePmUs)
                ) && 
                (
                    PctileProximityNPDESUs == other.PctileProximityNPDESUs ||
                    PctileProximityNPDESUs != null &&
                    PctileProximityNPDESUs.Equals(other.PctileProximityNPDESUs)
                ) && 
                (
                    PctileProximityNplUs == other.PctileProximityNplUs ||
                    PctileProximityNplUs != null &&
                    PctileProximityNplUs.Equals(other.PctileProximityNplUs)
                ) && 
                (
                    PctileProximityRmpUs == other.PctileProximityRmpUs ||
                    PctileProximityRmpUs != null &&
                    PctileProximityRmpUs.Equals(other.PctileProximityRmpUs)
                ) && 
                (
                    PctileProximityTsdfUs == other.PctileProximityTsdfUs ||
                    PctileProximityTsdfUs != null &&
                    PctileProximityTsdfUs.Equals(other.PctileProximityTsdfUs)
                ) && 
                (
                    PctileRespUs == other.PctileRespUs ||
                    PctileRespUs != null &&
                    PctileRespUs.Equals(other.PctileRespUs)
                ) && 
                (
                    PctileTrafficScoreUs == other.PctileTrafficScoreUs ||
                    PctileTrafficScoreUs != null &&
                    PctileTrafficScoreUs.Equals(other.PctileTrafficScoreUs)
                ) && 
                (
                    RCRAIDs == other.RCRAIDs ||
                    RCRAIDs != null &&
                    RCRAIDs.Equals(other.RCRAIDs)
                ) && 
                (
                    ReferencePoint == other.ReferencePoint ||
                    ReferencePoint != null &&
                    ReferencePoint.Equals(other.ReferencePoint)
                ) && 
                (
                    RegistryID == other.RegistryID ||
                    RegistryID != null &&
                    RegistryID.Equals(other.RegistryID)
                ) && 
                (
                    RmpIDs == other.RmpIDs ||
                    RmpIDs != null &&
                    RmpIDs.Equals(other.RmpIDs)
                ) && 
                (
                    SDWAIDs == other.SDWAIDs ||
                    SDWAIDs != null &&
                    SDWAIDs.Equals(other.SDWAIDs)
                ) && 
                (
                    Score == other.Score ||
                    Score != null &&
                    Score.Equals(other.Score)
                ) && 
                (
                    SourceID == other.SourceID ||
                    SourceID != null &&
                    SourceID.Equals(other.SourceID)
                ) && 
                (
                    Statute == other.Statute ||
                    Statute != null &&
                    Statute.Equals(other.Statute)
                ) && 
                (
                    TRIIDs == other.TRIIDs ||
                    TRIIDs != null &&
                    TRIIDs.Equals(other.TRIIDs)
                ) && 
                (
                    TRIbalFlag == other.TRIbalFlag ||
                    TRIbalFlag != null &&
                    TRIbalFlag.Equals(other.TRIbalFlag)
                ) && 
                (
                    ViolFlag == other.ViolFlag ||
                    ViolFlag != null &&
                    ViolFlag.Equals(other.ViolFlag)
                ) && 
                (
                    WebDocs == other.WebDocs ||
                    WebDocs != null &&
                    WebDocs.Equals(other.WebDocs)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AIR3yrComplQtrsHistory != null)
                    hashCode = hashCode * 59 + AIR3yrComplQtrsHistory.GetHashCode();
                    if (AIRCaseIDs != null)
                    hashCode = hashCode * 59 + AIRCaseIDs.GetHashCode();
                    if (AIRCity != null)
                    hashCode = hashCode * 59 + AIRCity.GetHashCode();
                    if (AIRClassification != null)
                    hashCode = hashCode * 59 + AIRClassification.GetHashCode();
                    if (AIRComplStatus != null)
                    hashCode = hashCode * 59 + AIRComplStatus.GetHashCode();
                    if (AIRCounty != null)
                    hashCode = hashCode * 59 + AIRCounty.GetHashCode();
                    if (AIRDaysLastEval != null)
                    hashCode = hashCode * 59 + AIRDaysLastEval.GetHashCode();
                    if (AIREPARegion != null)
                    hashCode = hashCode * 59 + AIREPARegion.GetHashCode();
                    if (AIREvalCnt != null)
                    hashCode = hashCode * 59 + AIREvalCnt.GetHashCode();
                    if (AIRFIPSCode != null)
                    hashCode = hashCode * 59 + AIRFIPSCode.GetHashCode();
                    if (AIRFacilityTypeCode != null)
                    hashCode = hashCode * 59 + AIRFacilityTypeCode.GetHashCode();
                    if (AIRFacilityTypeDesc != null)
                    hashCode = hashCode * 59 + AIRFacilityTypeDesc.GetHashCode();
                    if (AIRFeaCnt != null)
                    hashCode = hashCode * 59 + AIRFeaCnt.GetHashCode();
                    if (AIRHpvStatus != null)
                    hashCode = hashCode * 59 + AIRHpvStatus.GetHashCode();
                    if (AIRIDs != null)
                    hashCode = hashCode * 59 + AIRIDs.GetHashCode();
                    if (AIRIeaCnt != null)
                    hashCode = hashCode * 59 + AIRIeaCnt.GetHashCode();
                    if (AIRIndianCntryFlg != null)
                    hashCode = hashCode * 59 + AIRIndianCntryFlg.GetHashCode();
                    if (AIRLastEvalDate != null)
                    hashCode = hashCode * 59 + AIRLastEvalDate.GetHashCode();
                    if (AIRLastEvalDateEPA != null)
                    hashCode = hashCode * 59 + AIRLastEvalDateEPA.GetHashCode();
                    if (AIRLastEvalDateState != null)
                    hashCode = hashCode * 59 + AIRLastEvalDateState.GetHashCode();
                    if (AIRLastFeaDate != null)
                    hashCode = hashCode * 59 + AIRLastFeaDate.GetHashCode();
                    if (AIRLastFeaDateEPA != null)
                    hashCode = hashCode * 59 + AIRLastFeaDateEPA.GetHashCode();
                    if (AIRLastFeaDateState != null)
                    hashCode = hashCode * 59 + AIRLastFeaDateState.GetHashCode();
                    if (AIRLastIeaDate != null)
                    hashCode = hashCode * 59 + AIRLastIeaDate.GetHashCode();
                    if (AIRLastIeaDateEPA != null)
                    hashCode = hashCode * 59 + AIRLastIeaDateEPA.GetHashCode();
                    if (AIRLastIeaDateState != null)
                    hashCode = hashCode * 59 + AIRLastIeaDateState.GetHashCode();
                    if (AIRLastPenaltyDate != null)
                    hashCode = hashCode * 59 + AIRLastPenaltyDate.GetHashCode();
                    if (AIRLastStckDateEPA != null)
                    hashCode = hashCode * 59 + AIRLastStckDateEPA.GetHashCode();
                    if (AIRLastStckDateState != null)
                    hashCode = hashCode * 59 + AIRLastStckDateState.GetHashCode();
                    if (AIRLastStckTestDate != null)
                    hashCode = hashCode * 59 + AIRLastStckTestDate.GetHashCode();
                    if (AIRLastStckTestResults != null)
                    hashCode = hashCode * 59 + AIRLastStckTestResults.GetHashCode();
                    if (AIRLastViolDate != null)
                    hashCode = hashCode * 59 + AIRLastViolDate.GetHashCode();
                    if (AIRMacts != null)
                    hashCode = hashCode * 59 + AIRMacts.GetHashCode();
                    if (AIRMajorFlag != null)
                    hashCode = hashCode * 59 + AIRMajorFlag.GetHashCode();
                    if (AIRMnthsWithHpv != null)
                    hashCode = hashCode * 59 + AIRMnthsWithHpv.GetHashCode();
                    if (AIRNAICS != null)
                    hashCode = hashCode * 59 + AIRNAICS.GetHashCode();
                    if (AIRName != null)
                    hashCode = hashCode * 59 + AIRName.GetHashCode();
                    if (AIRNsps != null)
                    hashCode = hashCode * 59 + AIRNsps.GetHashCode();
                    if (AIRNspsm != null)
                    hashCode = hashCode * 59 + AIRNspsm.GetHashCode();
                    if (AIRPenalties != null)
                    hashCode = hashCode * 59 + AIRPenalties.GetHashCode();
                    if (AIRPollRecentViol != null)
                    hashCode = hashCode * 59 + AIRPollRecentViol.GetHashCode();
                    if (AIRPrograms != null)
                    hashCode = hashCode * 59 + AIRPrograms.GetHashCode();
                    if (AIRQtrsWithHpv != null)
                    hashCode = hashCode * 59 + AIRQtrsWithHpv.GetHashCode();
                    if (AIRQtrsWithViol != null)
                    hashCode = hashCode * 59 + AIRQtrsWithViol.GetHashCode();
                    if (AIRRecentViolCnt != null)
                    hashCode = hashCode * 59 + AIRRecentViolCnt.GetHashCode();
                    if (AIRStackTest5YrAll != null)
                    hashCode = hashCode * 59 + AIRStackTest5YrAll.GetHashCode();
                    if (AIRStackTest5YrFail != null)
                    hashCode = hashCode * 59 + AIRStackTest5YrFail.GetHashCode();
                    if (AIRState != null)
                    hashCode = hashCode * 59 + AIRState.GetHashCode();
                    if (AIRStatus != null)
                    hashCode = hashCode * 59 + AIRStatus.GetHashCode();
                    if (AIRStreet != null)
                    hashCode = hashCode * 59 + AIRStreet.GetHashCode();
                    if (AIRTRIbalEPAids != null)
                    hashCode = hashCode * 59 + AIRTRIbalEPAids.GetHashCode();
                    if (AIRTRIbalNames != null)
                    hashCode = hashCode * 59 + AIRTRIbalNames.GetHashCode();
                    if (AIRUniverse != null)
                    hashCode = hashCode * 59 + AIRUniverse.GetHashCode();
                    if (AIRZip != null)
                    hashCode = hashCode * 59 + AIRZip.GetHashCode();
                    if (ActiveLower48 != null)
                    hashCode = hashCode * 59 + ActiveLower48.GetHashCode();
                    if (CWAIDs != null)
                    hashCode = hashCode * 59 + CWAIDs.GetHashCode();
                    if (CalculatedAccuracyMeters != null)
                    hashCode = hashCode * 59 + CalculatedAccuracyMeters.GetHashCode();
                    if (CamdIDs != null)
                    hashCode = hashCode * 59 + CamdIDs.GetHashCode();
                    if (CensusBlockGroup != null)
                    hashCode = hashCode * 59 + CensusBlockGroup.GetHashCode();
                    if (ChesapeakeBayFlag != null)
                    hashCode = hashCode * 59 + ChesapeakeBayFlag.GetHashCode();
                    if (CollectionMethod != null)
                    hashCode = hashCode * 59 + CollectionMethod.GetHashCode();
                    if (CurrSvFlag != null)
                    hashCode = hashCode * 59 + CurrSvFlag.GetHashCode();
                    if (CurrVioFlag != null)
                    hashCode = hashCode * 59 + CurrVioFlag.GetHashCode();
                    if (EPASystem != null)
                    hashCode = hashCode * 59 + EPASystem.GetHashCode();
                    if (Ea5yrFlag != null)
                    hashCode = hashCode * 59 + Ea5yrFlag.GetHashCode();
                    if (EisIDs != null)
                    hashCode = hashCode * 59 + EisIDs.GetHashCode();
                    if (EjscreenFlag != null)
                    hashCode = hashCode * 59 + EjscreenFlag.GetHashCode();
                    if (EjscreenFlagUs != null)
                    hashCode = hashCode * 59 + EjscreenFlagUs.GetHashCode();
                    if (FacCamdReporter != null)
                    hashCode = hashCode * 59 + FacCamdReporter.GetHashCode();
                    if (FacCountyName != null)
                    hashCode = hashCode * 59 + FacCountyName.GetHashCode();
                    if (FacDerivedHuc != null)
                    hashCode = hashCode * 59 + FacDerivedHuc.GetHashCode();
                    if (FacDerivedTRIbes != null)
                    hashCode = hashCode * 59 + FacDerivedTRIbes.GetHashCode();
                    if (FacDerivedWBD != null)
                    hashCode = hashCode * 59 + FacDerivedWBD.GetHashCode();
                    if (FacDerivedWBDName != null)
                    hashCode = hashCode * 59 + FacDerivedWBDName.GetHashCode();
                    if (FacEisAIRReleases != null)
                    hashCode = hashCode * 59 + FacEisAIRReleases.GetHashCode();
                    if (FacEisReporter != null)
                    hashCode = hashCode * 59 + FacEisReporter.GetHashCode();
                    if (FacFIPSCode != null)
                    hashCode = hashCode * 59 + FacFIPSCode.GetHashCode();
                    if (FacFederalAgencyCode != null)
                    hashCode = hashCode * 59 + FacFederalAgencyCode.GetHashCode();
                    if (FacFederalAgencyName != null)
                    hashCode = hashCode * 59 + FacFederalAgencyName.GetHashCode();
                    if (FacGHGCO2Releases != null)
                    hashCode = hashCode * 59 + FacGHGCO2Releases.GetHashCode();
                    if (FacGHGReporter != null)
                    hashCode = hashCode * 59 + FacGHGReporter.GetHashCode();
                    if (FacIndianCntryFlg != null)
                    hashCode = hashCode * 59 + FacIndianCntryFlg.GetHashCode();
                    if (FacIndianSpatialFlg != null)
                    hashCode = hashCode * 59 + FacIndianSpatialFlg.GetHashCode();
                    if (FacLat != null)
                    hashCode = hashCode * 59 + FacLat.GetHashCode();
                    if (FacLong != null)
                    hashCode = hashCode * 59 + FacLong.GetHashCode();
                    if (FacMapFlg != null)
                    hashCode = hashCode * 59 + FacMapFlg.GetHashCode();
                    if (FacMapIcon != null)
                    hashCode = hashCode * 59 + FacMapIcon.GetHashCode();
                    if (FacNaaFlag != null)
                    hashCode = hashCode * 59 + FacNaaFlag.GetHashCode();
                    if (FacPercentMinority != null)
                    hashCode = hashCode * 59 + FacPercentMinority.GetHashCode();
                    if (FacPopulationDensity != null)
                    hashCode = hashCode * 59 + FacPopulationDensity.GetHashCode();
                    if (FacSICCodes != null)
                    hashCode = hashCode * 59 + FacSICCodes.GetHashCode();
                    if (FacStdCountyName != null)
                    hashCode = hashCode * 59 + FacStdCountyName.GetHashCode();
                    if (FacTRIAIRReleases != null)
                    hashCode = hashCode * 59 + FacTRIAIRReleases.GetHashCode();
                    if (FacTRICarcAIRReleases != null)
                    hashCode = hashCode * 59 + FacTRICarcAIRReleases.GetHashCode();
                    if (FacTRIHapsReleases != null)
                    hashCode = hashCode * 59 + FacTRIHapsReleases.GetHashCode();
                    if (FacTRIReporter != null)
                    hashCode = hashCode * 59 + FacTRIReporter.GetHashCode();
                    if (FacUsMexBorderFlg != null)
                    hashCode = hashCode * 59 + FacUsMexBorderFlg.GetHashCode();
                    if (GHGIDs != null)
                    hashCode = hashCode * 59 + GHGIDs.GetHashCode();
                    if (HasPollRpt != null)
                    hashCode = hashCode * 59 + HasPollRpt.GetHashCode();
                    if (Infea5yrFlag != null)
                    hashCode = hashCode * 59 + Infea5yrFlag.GetHashCode();
                    if (Insp5yrFlag != null)
                    hashCode = hashCode * 59 + Insp5yrFlag.GetHashCode();
                    if (LastDatePce != null)
                    hashCode = hashCode * 59 + LastDatePce.GetHashCode();
                    if (LastDatePceEPA != null)
                    hashCode = hashCode * 59 + LastDatePceEPA.GetHashCode();
                    if (LastDatePceSta != null)
                    hashCode = hashCode * 59 + LastDatePceSta.GetHashCode();
                    if (LocalControlRegionCode != null)
                    hashCode = hashCode * 59 + LocalControlRegionCode.GetHashCode();
                    if (LocalControlRegionName != null)
                    hashCode = hashCode * 59 + LocalControlRegionName.GetHashCode();
                    if (Lower48 != null)
                    hashCode = hashCode * 59 + Lower48.GetHashCode();
                    if (MaintPollutantsNaa != null)
                    hashCode = hashCode * 59 + MaintPollutantsNaa.GetHashCode();
                    if (MaintStandardsNaa != null)
                    hashCode = hashCode * 59 + MaintStandardsNaa.GetHashCode();
                    if (MaintStatusNaa != null)
                    hashCode = hashCode * 59 + MaintStatusNaa.GetHashCode();
                    if (Map != null)
                    hashCode = hashCode * 59 + Map.GetHashCode();
                    if (MaxPctileUs != null)
                    hashCode = hashCode * 59 + MaxPctileUs.GetHashCode();
                    if (MaxScore != null)
                    hashCode = hashCode * 59 + MaxScore.GetHashCode();
                    if (NaPollutantsNaa != null)
                    hashCode = hashCode * 59 + NaPollutantsNaa.GetHashCode();
                    if (NaStandardsNaa != null)
                    hashCode = hashCode * 59 + NaStandardsNaa.GetHashCode();
                    if (NaStatusNaa != null)
                    hashCode = hashCode * 59 + NaStatusNaa.GetHashCode();
                    if (NaaCategories != null)
                    hashCode = hashCode * 59 + NaaCategories.GetHashCode();
                    if (NaaPollutants != null)
                    hashCode = hashCode * 59 + NaaPollutants.GetHashCode();
                    if (OtherPermitIDs != null)
                    hashCode = hashCode * 59 + OtherPermitIDs.GetHashCode();
                    if (Over80CountUs != null)
                    hashCode = hashCode * 59 + Over80CountUs.GetHashCode();
                    if (PctileCancerUs != null)
                    hashCode = hashCode * 59 + PctileCancerUs.GetHashCode();
                    if (PctileDpmUs != null)
                    hashCode = hashCode * 59 + PctileDpmUs.GetHashCode();
                    if (PctileO3Us != null)
                    hashCode = hashCode * 59 + PctileO3Us.GetHashCode();
                    if (PctilePctpre1960Us != null)
                    hashCode = hashCode * 59 + PctilePctpre1960Us.GetHashCode();
                    if (PctilePmUs != null)
                    hashCode = hashCode * 59 + PctilePmUs.GetHashCode();
                    if (PctileProximityNPDESUs != null)
                    hashCode = hashCode * 59 + PctileProximityNPDESUs.GetHashCode();
                    if (PctileProximityNplUs != null)
                    hashCode = hashCode * 59 + PctileProximityNplUs.GetHashCode();
                    if (PctileProximityRmpUs != null)
                    hashCode = hashCode * 59 + PctileProximityRmpUs.GetHashCode();
                    if (PctileProximityTsdfUs != null)
                    hashCode = hashCode * 59 + PctileProximityTsdfUs.GetHashCode();
                    if (PctileRespUs != null)
                    hashCode = hashCode * 59 + PctileRespUs.GetHashCode();
                    if (PctileTrafficScoreUs != null)
                    hashCode = hashCode * 59 + PctileTrafficScoreUs.GetHashCode();
                    if (RCRAIDs != null)
                    hashCode = hashCode * 59 + RCRAIDs.GetHashCode();
                    if (ReferencePoint != null)
                    hashCode = hashCode * 59 + ReferencePoint.GetHashCode();
                    if (RegistryID != null)
                    hashCode = hashCode * 59 + RegistryID.GetHashCode();
                    if (RmpIDs != null)
                    hashCode = hashCode * 59 + RmpIDs.GetHashCode();
                    if (SDWAIDs != null)
                    hashCode = hashCode * 59 + SDWAIDs.GetHashCode();
                    if (Score != null)
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (SourceID != null)
                    hashCode = hashCode * 59 + SourceID.GetHashCode();
                    if (Statute != null)
                    hashCode = hashCode * 59 + Statute.GetHashCode();
                    if (TRIIDs != null)
                    hashCode = hashCode * 59 + TRIIDs.GetHashCode();
                    if (TRIbalFlag != null)
                    hashCode = hashCode * 59 + TRIbalFlag.GetHashCode();
                    if (ViolFlag != null)
                    hashCode = hashCode * 59 + ViolFlag.GetHashCode();
                    if (WebDocs != null)
                    hashCode = hashCode * 59 + WebDocs.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Air03 left, Air03 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Air03 left, Air03 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
