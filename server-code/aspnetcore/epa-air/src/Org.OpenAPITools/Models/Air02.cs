/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 *
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * The version of the OpenAPI document: 2019.10.15
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Map Data Object
    /// </summary>
    [DataContract]
    public partial class Air02 : IEquatable<Air02>
    {
        /// <summary>
        /// The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
        /// </summary>
        /// <value>The facility&#39;s 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined</value>
        /// <example>______UUUUUU</example>
        [Required]
        [DataMember(Name="CAAstatus", EmitDefaultValue=false)]
        public string CAAstatus { get; set; }

        /// <summary>
        /// The number of formal enforcement actions that have been taken against the facility
        /// </summary>
        /// <value>The number of formal enforcement actions that have been taken against the facility</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="FormalCount", EmitDefaultValue=false)]
        public string FormalCount { get; set; }

        /// <summary>
        /// Name of each individual icon file within the URL base
        /// </summary>
        /// <value>Name of each individual icon file within the URL base</value>
        /// <example>CAA-IC-MN-N.png</example>
        [Required]
        [DataMember(Name="ICON", EmitDefaultValue=false)]
        public string ICON { get; set; }

        /// <summary>
        /// The number of informal enforcement actions that have been taken against the facility
        /// </summary>
        /// <value>The number of informal enforcement actions that have been taken against the facility</value>
        /// <example>1</example>
        [Required]
        [DataMember(Name="InformalCount", EmitDefaultValue=false)]
        public string InformalCount { get; set; }

        /// <summary>
        /// The latitude of the facility in degrees, to four decimal places
        /// </summary>
        /// <value>The latitude of the facility in degrees, to four decimal places</value>
        /// <example>38.798026</example>
        [Required]
        [DataMember(Name="LAT", EmitDefaultValue=false)]
        public string LAT { get; set; }

        /// <summary>
        /// The longitude of the facility in degrees, to four decimal places
        /// </summary>
        /// <value>The longitude of the facility in degrees, to four decimal places</value>
        /// <example>-77.062981</example>
        [Required]
        [DataMember(Name="LON", EmitDefaultValue=false)]
        public string LON { get; set; }

        /// <summary>
        /// The unique identifier for the last inspection
        /// </summary>
        /// <value>The unique identifier for the last inspection</value>
        /// <example>901</example>
        [Required]
        [DataMember(Name="LastInsp", EmitDefaultValue=false)]
        public string LastInsp { get; set; }

        /// <summary>
        /// For DFR, this is the Facility name. The name corresponds to the TYPE value
        /// </summary>
        /// <value>For DFR, this is the Facility name. The name corresponds to the TYPE value</value>
        /// <example>VIRGINIA CONCRETE ALEXANDRIA PLANT</example>
        [Required]
        [DataMember(Name="NAME", EmitDefaultValue=false)]
        public string NAME { get; set; }

        /// <summary>
        /// Pop up value. Combine with PopUpBaseURL to give the popup for the facility
        /// </summary>
        /// <value>Pop up value. Combine with PopUpBaseURL to give the popup for the facility</value>
        /// <example>110001891506</example>
        [Required]
        [DataMember(Name="PUV", EmitDefaultValue=false)]
        public string PUV { get; set; }

        /// <summary>
        /// For DFR, this is always facility
        /// </summary>
        /// <value>For DFR, this is always facility</value>
        /// <example>Facility</example>
        [Required]
        [DataMember(Name="TYPE", EmitDefaultValue=false)]
        public string TYPE { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Air02 {\n");
            sb.Append("  CAAstatus: ").Append(CAAstatus).Append("\n");
            sb.Append("  FormalCount: ").Append(FormalCount).Append("\n");
            sb.Append("  ICON: ").Append(ICON).Append("\n");
            sb.Append("  InformalCount: ").Append(InformalCount).Append("\n");
            sb.Append("  LAT: ").Append(LAT).Append("\n");
            sb.Append("  LON: ").Append(LON).Append("\n");
            sb.Append("  LastInsp: ").Append(LastInsp).Append("\n");
            sb.Append("  NAME: ").Append(NAME).Append("\n");
            sb.Append("  PUV: ").Append(PUV).Append("\n");
            sb.Append("  TYPE: ").Append(TYPE).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Air02)obj);
        }

        /// <summary>
        /// Returns true if Air02 instances are equal
        /// </summary>
        /// <param name="other">Instance of Air02 to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Air02 other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CAAstatus == other.CAAstatus ||
                    CAAstatus != null &&
                    CAAstatus.Equals(other.CAAstatus)
                ) && 
                (
                    FormalCount == other.FormalCount ||
                    FormalCount != null &&
                    FormalCount.Equals(other.FormalCount)
                ) && 
                (
                    ICON == other.ICON ||
                    ICON != null &&
                    ICON.Equals(other.ICON)
                ) && 
                (
                    InformalCount == other.InformalCount ||
                    InformalCount != null &&
                    InformalCount.Equals(other.InformalCount)
                ) && 
                (
                    LAT == other.LAT ||
                    LAT != null &&
                    LAT.Equals(other.LAT)
                ) && 
                (
                    LON == other.LON ||
                    LON != null &&
                    LON.Equals(other.LON)
                ) && 
                (
                    LastInsp == other.LastInsp ||
                    LastInsp != null &&
                    LastInsp.Equals(other.LastInsp)
                ) && 
                (
                    NAME == other.NAME ||
                    NAME != null &&
                    NAME.Equals(other.NAME)
                ) && 
                (
                    PUV == other.PUV ||
                    PUV != null &&
                    PUV.Equals(other.PUV)
                ) && 
                (
                    TYPE == other.TYPE ||
                    TYPE != null &&
                    TYPE.Equals(other.TYPE)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CAAstatus != null)
                    hashCode = hashCode * 59 + CAAstatus.GetHashCode();
                    if (FormalCount != null)
                    hashCode = hashCode * 59 + FormalCount.GetHashCode();
                    if (ICON != null)
                    hashCode = hashCode * 59 + ICON.GetHashCode();
                    if (InformalCount != null)
                    hashCode = hashCode * 59 + InformalCount.GetHashCode();
                    if (LAT != null)
                    hashCode = hashCode * 59 + LAT.GetHashCode();
                    if (LON != null)
                    hashCode = hashCode * 59 + LON.GetHashCode();
                    if (LastInsp != null)
                    hashCode = hashCode * 59 + LastInsp.GetHashCode();
                    if (NAME != null)
                    hashCode = hashCode * 59 + NAME.GetHashCode();
                    if (PUV != null)
                    hashCode = hashCode * 59 + PUV.GetHashCode();
                    if (TYPE != null)
                    hashCode = hashCode * 59 + TYPE.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Air02 left, Air02 right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Air02 left, Air02 right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
