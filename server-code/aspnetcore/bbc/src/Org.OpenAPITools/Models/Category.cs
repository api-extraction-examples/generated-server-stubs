/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Category : IEquatable<Category>
    {
        /// <summary>
        /// Gets or Sets CategoryType
        /// </summary>
        [Required]
        [DataMember(Name="category_type", EmitDefaultValue=false)]
        public string CategoryType { get; set; }

        /// <summary>
        /// Gets or Sets ChildCategories
        /// </summary>
        [Required]
        [DataMember(Name="child_categories", EmitDefaultValue=false)]
        public List<ChildCategory> ChildCategories { get; set; }

        /// <summary>
        /// Gets or Sets Depth
        /// </summary>
        [Required]
        [DataMember(Name="depth", EmitDefaultValue=true)]
        public int Depth { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets PipId
        /// </summary>
        [Required]
        [DataMember(Name="pip_id", EmitDefaultValue=false)]
        public string PipId { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets UrlKey
        /// </summary>
        [Required]
        [DataMember(Name="url_key", EmitDefaultValue=false)]
        public string UrlKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Category {\n");
            sb.Append("  CategoryType: ").Append(CategoryType).Append("\n");
            sb.Append("  ChildCategories: ").Append(ChildCategories).Append("\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  PipId: ").Append(PipId).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  UrlKey: ").Append(UrlKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Category)obj);
        }

        /// <summary>
        /// Returns true if Category instances are equal
        /// </summary>
        /// <param name="other">Instance of Category to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Category other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryType == other.CategoryType ||
                    CategoryType != null &&
                    CategoryType.Equals(other.CategoryType)
                ) && 
                (
                    ChildCategories == other.ChildCategories ||
                    ChildCategories != null &&
                    other.ChildCategories != null &&
                    ChildCategories.SequenceEqual(other.ChildCategories)
                ) && 
                (
                    Depth == other.Depth ||
                    
                    Depth.Equals(other.Depth)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    PipId == other.PipId ||
                    PipId != null &&
                    PipId.Equals(other.PipId)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    UrlKey == other.UrlKey ||
                    UrlKey != null &&
                    UrlKey.Equals(other.UrlKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryType != null)
                    hashCode = hashCode * 59 + CategoryType.GetHashCode();
                    if (ChildCategories != null)
                    hashCode = hashCode * 59 + ChildCategories.GetHashCode();
                    
                    hashCode = hashCode * 59 + Depth.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (PipId != null)
                    hashCode = hashCode * 59 + PipId.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (UrlKey != null)
                    hashCode = hashCode * 59 + UrlKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Category left, Category right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Category left, Category right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
