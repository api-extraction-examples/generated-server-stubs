/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalisedMusicVersion : IEquatable<PersonalisedMusicVersion>
    {
        /// <summary>
        /// Gets or Sets Classical
        /// </summary>
        [DataMember(Name="classical", EmitDefaultValue=true)]
        public bool Classical { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets Radio
        /// </summary>
        [DataMember(Name="radio", EmitDefaultValue=true)]
        public bool Radio { get; set; }

        /// <summary>
        /// Gets or Sets Vpid
        /// </summary>
        [DataMember(Name="vpid", EmitDefaultValue=false)]
        public string Vpid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalisedMusicVersion {\n");
            sb.Append("  Classical: ").Append(Classical).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Radio: ").Append(Radio).Append("\n");
            sb.Append("  Vpid: ").Append(Vpid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalisedMusicVersion)obj);
        }

        /// <summary>
        /// Returns true if PersonalisedMusicVersion instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalisedMusicVersion to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalisedMusicVersion other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Classical == other.Classical ||
                    
                    Classical.Equals(other.Classical)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    Radio == other.Radio ||
                    
                    Radio.Equals(other.Radio)
                ) && 
                (
                    Vpid == other.Vpid ||
                    Vpid != null &&
                    Vpid.Equals(other.Vpid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Classical.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    
                    hashCode = hashCode * 59 + Radio.GetHashCode();
                    if (Vpid != null)
                    hashCode = hashCode * 59 + Vpid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalisedMusicVersion left, PersonalisedMusicVersion right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalisedMusicVersion left, PersonalisedMusicVersion right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
