/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Network : IEquatable<Network>
    {
        /// <summary>
        /// Gets or Sets Active
        /// </summary>
        [Required]
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Contacts
        /// </summary>
        [Required]
        [DataMember(Name="contacts", EmitDefaultValue=false)]
        public List<Contact> Contacts { get; set; }

        /// <summary>
        /// Gets or Sets DateRanges
        /// </summary>
        [Required]
        [DataMember(Name="date_ranges", EmitDefaultValue=false)]
        public List<DateRange> DateRanges { get; set; }

        /// <summary>
        /// Gets or Sets Group
        /// </summary>
        [Required]
        [DataMember(Name="group", EmitDefaultValue=false)]
        public string Group { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets International
        /// </summary>
        [Required]
        [DataMember(Name="international", EmitDefaultValue=true)]
        public bool International { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [Required]
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Preset
        /// </summary>
        [Required]
        [DataMember(Name="preset", EmitDefaultValue=true)]
        public bool Preset { get; set; }

        /// <summary>
        /// Gets or Sets PromotedCategorySummaries
        /// </summary>
        [DataMember(Name="promoted_category_summaries", EmitDefaultValue=false)]
        public List<CategorySummary> PromotedCategorySummaries { get; set; }

        /// <summary>
        /// Gets or Sets Services
        /// </summary>
        [Required]
        [DataMember(Name="services", EmitDefaultValue=false)]
        public List<Service> Services { get; set; }

        /// <summary>
        /// Gets or Sets ShortTitle
        /// </summary>
        [Required]
        [DataMember(Name="short_title", EmitDefaultValue=false)]
        public string ShortTitle { get; set; }

        /// <summary>
        /// Gets or Sets Sort
        /// </summary>
        [Required]
        [DataMember(Name="sort", EmitDefaultValue=true)]
        public int Sort { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Network {\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Contacts: ").Append(Contacts).Append("\n");
            sb.Append("  DateRanges: ").Append(DateRanges).Append("\n");
            sb.Append("  Group: ").Append(Group).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  International: ").Append(International).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Preset: ").Append(Preset).Append("\n");
            sb.Append("  PromotedCategorySummaries: ").Append(PromotedCategorySummaries).Append("\n");
            sb.Append("  Services: ").Append(Services).Append("\n");
            sb.Append("  ShortTitle: ").Append(ShortTitle).Append("\n");
            sb.Append("  Sort: ").Append(Sort).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Network)obj);
        }

        /// <summary>
        /// Returns true if Network instances are equal
        /// </summary>
        /// <param name="other">Instance of Network to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Network other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    Contacts == other.Contacts ||
                    Contacts != null &&
                    other.Contacts != null &&
                    Contacts.SequenceEqual(other.Contacts)
                ) && 
                (
                    DateRanges == other.DateRanges ||
                    DateRanges != null &&
                    other.DateRanges != null &&
                    DateRanges.SequenceEqual(other.DateRanges)
                ) && 
                (
                    Group == other.Group ||
                    Group != null &&
                    Group.Equals(other.Group)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    International == other.International ||
                    
                    International.Equals(other.International)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Preset == other.Preset ||
                    
                    Preset.Equals(other.Preset)
                ) && 
                (
                    PromotedCategorySummaries == other.PromotedCategorySummaries ||
                    PromotedCategorySummaries != null &&
                    other.PromotedCategorySummaries != null &&
                    PromotedCategorySummaries.SequenceEqual(other.PromotedCategorySummaries)
                ) && 
                (
                    Services == other.Services ||
                    Services != null &&
                    other.Services != null &&
                    Services.SequenceEqual(other.Services)
                ) && 
                (
                    ShortTitle == other.ShortTitle ||
                    ShortTitle != null &&
                    ShortTitle.Equals(other.ShortTitle)
                ) && 
                (
                    Sort == other.Sort ||
                    
                    Sort.Equals(other.Sort)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Contacts != null)
                    hashCode = hashCode * 59 + Contacts.GetHashCode();
                    if (DateRanges != null)
                    hashCode = hashCode * 59 + DateRanges.GetHashCode();
                    if (Group != null)
                    hashCode = hashCode * 59 + Group.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + International.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    
                    hashCode = hashCode * 59 + Preset.GetHashCode();
                    if (PromotedCategorySummaries != null)
                    hashCode = hashCode * 59 + PromotedCategorySummaries.GetHashCode();
                    if (Services != null)
                    hashCode = hashCode * 59 + Services.GetHashCode();
                    if (ShortTitle != null)
                    hashCode = hashCode * 59 + ShortTitle.GetHashCode();
                    
                    hashCode = hashCode * 59 + Sort.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Network left, Network right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Network left, Network right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
