/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalisedMusicTrack : IEquatable<PersonalisedMusicTrack>
    {
        /// <summary>
        /// Gets or Sets Contributions
        /// </summary>
        [Required]
        [DataMember(Name="contributions", EmitDefaultValue=false)]
        public List<PersonalisedMusicTrackContribution> Contributions { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Images
        /// </summary>
        [Required]
        [DataMember(Name="images", EmitDefaultValue=false)]
        public List<PersonalisedMusicTrackImage> Images { get; set; }

        /// <summary>
        /// Gets or Sets Media
        /// </summary>
        [Required]
        [DataMember(Name="media", EmitDefaultValue=false)]
        public List<PersonalisedMusicTrackMedia> Media { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [Required]
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [Required]
        [DataMember(Name="version", EmitDefaultValue=false)]
        public PersonalisedMusicVersion VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalisedMusicTrack {\n");
            sb.Append("  Contributions: ").Append(Contributions).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Images: ").Append(Images).Append("\n");
            sb.Append("  Media: ").Append(Media).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalisedMusicTrack)obj);
        }

        /// <summary>
        /// Returns true if PersonalisedMusicTrack instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalisedMusicTrack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalisedMusicTrack other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Contributions == other.Contributions ||
                    Contributions != null &&
                    other.Contributions != null &&
                    Contributions.SequenceEqual(other.Contributions)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Images == other.Images ||
                    Images != null &&
                    other.Images != null &&
                    Images.SequenceEqual(other.Images)
                ) && 
                (
                    Media == other.Media ||
                    Media != null &&
                    other.Media != null &&
                    Media.SequenceEqual(other.Media)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Contributions != null)
                    hashCode = hashCode * 59 + Contributions.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Images != null)
                    hashCode = hashCode * 59 + Images.GetHashCode();
                    if (Media != null)
                    hashCode = hashCode * 59 + Media.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalisedMusicTrack left, PersonalisedMusicTrack right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalisedMusicTrack left, PersonalisedMusicTrack right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
