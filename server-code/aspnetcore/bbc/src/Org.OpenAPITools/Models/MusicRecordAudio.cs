/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MusicRecordAudio : IEquatable<MusicRecordAudio>
    {
        /// <summary>
        /// Gets or Sets AudioType
        /// </summary>
        [Required]
        [DataMember(Name="audioType", EmitDefaultValue=false)]
        public string AudioType { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [Required]
        [DataMember(Name="duration", EmitDefaultValue=true)]
        public int Duration { get; set; }

        /// <summary>
        /// Gets or Sets Identifier
        /// </summary>
        [Required]
        [DataMember(Name="identifier", EmitDefaultValue=false)]
        public string Identifier { get; set; }

        /// <summary>
        /// Gets or Sets ResourceType
        /// </summary>
        [Required]
        [DataMember(Name="resourceType", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MusicRecordAudio {\n");
            sb.Append("  AudioType: ").Append(AudioType).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Identifier: ").Append(Identifier).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MusicRecordAudio)obj);
        }

        /// <summary>
        /// Returns true if MusicRecordAudio instances are equal
        /// </summary>
        /// <param name="other">Instance of MusicRecordAudio to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MusicRecordAudio other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AudioType == other.AudioType ||
                    AudioType != null &&
                    AudioType.Equals(other.AudioType)
                ) && 
                (
                    Duration == other.Duration ||
                    
                    Duration.Equals(other.Duration)
                ) && 
                (
                    Identifier == other.Identifier ||
                    Identifier != null &&
                    Identifier.Equals(other.Identifier)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AudioType != null)
                    hashCode = hashCode * 59 + AudioType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (Identifier != null)
                    hashCode = hashCode * 59 + Identifier.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MusicRecordAudio left, MusicRecordAudio right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MusicRecordAudio left, MusicRecordAudio right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
