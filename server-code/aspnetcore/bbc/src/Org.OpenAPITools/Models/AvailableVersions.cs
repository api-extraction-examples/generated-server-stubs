/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AvailableVersions : IEquatable<AvailableVersions>
    {
        /// <summary>
        /// Gets or Sets Available
        /// </summary>
        [Required]
        [DataMember(Name="available", EmitDefaultValue=false)]
        public string Available { get; set; }

        /// <summary>
        /// Gets or Sets AvailableFromDate
        /// </summary>
        [Required]
        [DataMember(Name="available_from_date", EmitDefaultValue=false)]
        public string AvailableFromDate { get; set; }

        /// <summary>
        /// Gets or Sets AvailableToDate
        /// </summary>
        [Required]
        [DataMember(Name="available_to_date", EmitDefaultValue=false)]
        public string AvailableToDate { get; set; }

        /// <summary>
        /// Gets or Sets Duration
        /// </summary>
        [Required]
        [DataMember(Name="duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Gets or Sets HasGuidance
        /// </summary>
        [Required]
        [DataMember(Name="has_guidance", EmitDefaultValue=true)]
        public bool HasGuidance { get; set; }

        /// <summary>
        /// Gets or Sets MediaSet
        /// </summary>
        [Required]
        [DataMember(Name="media_set", EmitDefaultValue=false)]
        public string MediaSet { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets VersionPid
        /// </summary>
        [Required]
        [DataMember(Name="version_pid", EmitDefaultValue=false)]
        public string VersionPid { get; set; }

        /// <summary>
        /// Gets or Sets VersionType
        /// </summary>
        [Required]
        [DataMember(Name="version_type", EmitDefaultValue=false)]
        public string VersionType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AvailableVersions {\n");
            sb.Append("  Available: ").Append(Available).Append("\n");
            sb.Append("  AvailableFromDate: ").Append(AvailableFromDate).Append("\n");
            sb.Append("  AvailableToDate: ").Append(AvailableToDate).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  HasGuidance: ").Append(HasGuidance).Append("\n");
            sb.Append("  MediaSet: ").Append(MediaSet).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  VersionPid: ").Append(VersionPid).Append("\n");
            sb.Append("  VersionType: ").Append(VersionType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AvailableVersions)obj);
        }

        /// <summary>
        /// Returns true if AvailableVersions instances are equal
        /// </summary>
        /// <param name="other">Instance of AvailableVersions to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AvailableVersions other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Available == other.Available ||
                    Available != null &&
                    Available.Equals(other.Available)
                ) && 
                (
                    AvailableFromDate == other.AvailableFromDate ||
                    AvailableFromDate != null &&
                    AvailableFromDate.Equals(other.AvailableFromDate)
                ) && 
                (
                    AvailableToDate == other.AvailableToDate ||
                    AvailableToDate != null &&
                    AvailableToDate.Equals(other.AvailableToDate)
                ) && 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    HasGuidance == other.HasGuidance ||
                    
                    HasGuidance.Equals(other.HasGuidance)
                ) && 
                (
                    MediaSet == other.MediaSet ||
                    MediaSet != null &&
                    MediaSet.Equals(other.MediaSet)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    VersionPid == other.VersionPid ||
                    VersionPid != null &&
                    VersionPid.Equals(other.VersionPid)
                ) && 
                (
                    VersionType == other.VersionType ||
                    VersionType != null &&
                    VersionType.Equals(other.VersionType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Available != null)
                    hashCode = hashCode * 59 + Available.GetHashCode();
                    if (AvailableFromDate != null)
                    hashCode = hashCode * 59 + AvailableFromDate.GetHashCode();
                    if (AvailableToDate != null)
                    hashCode = hashCode * 59 + AvailableToDate.GetHashCode();
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasGuidance.GetHashCode();
                    if (MediaSet != null)
                    hashCode = hashCode * 59 + MediaSet.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (VersionPid != null)
                    hashCode = hashCode * 59 + VersionPid.GetHashCode();
                    if (VersionType != null)
                    hashCode = hashCode * 59 + VersionType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AvailableVersions left, AvailableVersions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AvailableVersions left, AvailableVersions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
