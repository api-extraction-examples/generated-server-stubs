/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PersonalisedMusicData : IEquatable<PersonalisedMusicData>
    {
        /// <summary>
        /// Gets or Sets Artist
        /// </summary>
        [DataMember(Name="artist", EmitDefaultValue=false)]
        public PersonalisedMusicArtist Artist { get; set; }

        /// <summary>
        /// Gets or Sets Clip
        /// </summary>
        [DataMember(Name="clip", EmitDefaultValue=false)]
        public PersonalisedMusicClip Clip { get; set; }

        /// <summary>
        /// Gets or Sets Genre
        /// </summary>
        [DataMember(Name="genre", EmitDefaultValue=false)]
        public PersonalisedMusicGenre Genre { get; set; }

        /// <summary>
        /// Gets or Sets Playlist
        /// </summary>
        [DataMember(Name="playlist", EmitDefaultValue=false)]
        public PersonalisedMusicPlaylist Playlist { get; set; }

        /// <summary>
        /// Gets or Sets Service
        /// </summary>
        [DataMember(Name="service", EmitDefaultValue=false)]
        public PersonalisedMusicService Service { get; set; }

        /// <summary>
        /// Gets or Sets Track
        /// </summary>
        [DataMember(Name="track", EmitDefaultValue=false)]
        public PersonalisedMusicTrack Track { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PersonalisedMusicData {\n");
            sb.Append("  Artist: ").Append(Artist).Append("\n");
            sb.Append("  Clip: ").Append(Clip).Append("\n");
            sb.Append("  Genre: ").Append(Genre).Append("\n");
            sb.Append("  Playlist: ").Append(Playlist).Append("\n");
            sb.Append("  Service: ").Append(Service).Append("\n");
            sb.Append("  Track: ").Append(Track).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PersonalisedMusicData)obj);
        }

        /// <summary>
        /// Returns true if PersonalisedMusicData instances are equal
        /// </summary>
        /// <param name="other">Instance of PersonalisedMusicData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PersonalisedMusicData other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Artist == other.Artist ||
                    Artist != null &&
                    Artist.Equals(other.Artist)
                ) && 
                (
                    Clip == other.Clip ||
                    Clip != null &&
                    Clip.Equals(other.Clip)
                ) && 
                (
                    Genre == other.Genre ||
                    Genre != null &&
                    Genre.Equals(other.Genre)
                ) && 
                (
                    Playlist == other.Playlist ||
                    Playlist != null &&
                    Playlist.Equals(other.Playlist)
                ) && 
                (
                    Service == other.Service ||
                    Service != null &&
                    Service.Equals(other.Service)
                ) && 
                (
                    Track == other.Track ||
                    Track != null &&
                    Track.Equals(other.Track)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Artist != null)
                    hashCode = hashCode * 59 + Artist.GetHashCode();
                    if (Clip != null)
                    hashCode = hashCode * 59 + Clip.GetHashCode();
                    if (Genre != null)
                    hashCode = hashCode * 59 + Genre.GetHashCode();
                    if (Playlist != null)
                    hashCode = hashCode * 59 + Playlist.GetHashCode();
                    if (Service != null)
                    hashCode = hashCode * 59 + Service.GetHashCode();
                    if (Track != null)
                    hashCode = hashCode * 59 + Track.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PersonalisedMusicData left, PersonalisedMusicData right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PersonalisedMusicData left, PersonalisedMusicData right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
