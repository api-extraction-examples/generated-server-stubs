/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class MusicPopularityTrack : IEquatable<MusicPopularityTrack>
    {
        /// <summary>
        /// Gets or Sets Album
        /// </summary>
        [DataMember(Name="album", EmitDefaultValue=false)]
        public string Album { get; set; }

        /// <summary>
        /// Gets or Sets ArtistGid
        /// </summary>
        [DataMember(Name="artistGid", EmitDefaultValue=false)]
        public string ArtistGid { get; set; }

        /// <summary>
        /// Gets or Sets ArtistName
        /// </summary>
        [DataMember(Name="artistName", EmitDefaultValue=false)]
        public string ArtistName { get; set; }

        /// <summary>
        /// Gets or Sets Artists
        /// </summary>
        [DataMember(Name="artists", EmitDefaultValue=false)]
        public List<MusicTrackArtist> Artists { get; set; }

        /// <summary>
        /// Gets or Sets BaseTitle
        /// </summary>
        [DataMember(Name="baseTitle", EmitDefaultValue=false)]
        public string BaseTitle { get; set; }

        /// <summary>
        /// Gets or Sets Classical
        /// </summary>
        [DataMember(Name="classical", EmitDefaultValue=true)]
        public bool Classical { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets MergedIds
        /// </summary>
        [DataMember(Name="mergedIds", EmitDefaultValue=false)]
        public List<string> MergedIds { get; set; }

        /// <summary>
        /// Gets or Sets PreferredMultiplayRecordAudio
        /// </summary>
        [DataMember(Name="preferredMultiplayRecordAudio", EmitDefaultValue=false)]
        public MusicRecordAudio PreferredMultiplayRecordAudio { get; set; }

        /// <summary>
        /// Gets or Sets PreferredRecordAudio
        /// </summary>
        [DataMember(Name="preferredRecordAudio", EmitDefaultValue=false)]
        public MusicRecordAudio PreferredRecordAudio { get; set; }

        /// <summary>
        /// Gets or Sets RadioEdit
        /// </summary>
        [DataMember(Name="radioEdit", EmitDefaultValue=true)]
        public bool RadioEdit { get; set; }

        /// <summary>
        /// Gets or Sets RecordAudio
        /// </summary>
        [DataMember(Name="recordAudio", EmitDefaultValue=false)]
        public List<MusicRecordAudio> RecordAudio { get; set; }

        /// <summary>
        /// Gets or Sets RecordImageHref
        /// </summary>
        [DataMember(Name="recordImageHref", EmitDefaultValue=false)]
        public string RecordImageHref { get; set; }

        /// <summary>
        /// Gets or Sets RecordImagePid
        /// </summary>
        [DataMember(Name="recordImagePid", EmitDefaultValue=false)]
        public string RecordImagePid { get; set; }

        /// <summary>
        /// Gets or Sets Score
        /// </summary>
        [Required]
        [DataMember(Name="score", EmitDefaultValue=true)]
        public int Score { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MusicPopularityTrack {\n");
            sb.Append("  Album: ").Append(Album).Append("\n");
            sb.Append("  ArtistGid: ").Append(ArtistGid).Append("\n");
            sb.Append("  ArtistName: ").Append(ArtistName).Append("\n");
            sb.Append("  Artists: ").Append(Artists).Append("\n");
            sb.Append("  BaseTitle: ").Append(BaseTitle).Append("\n");
            sb.Append("  Classical: ").Append(Classical).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  MergedIds: ").Append(MergedIds).Append("\n");
            sb.Append("  PreferredMultiplayRecordAudio: ").Append(PreferredMultiplayRecordAudio).Append("\n");
            sb.Append("  PreferredRecordAudio: ").Append(PreferredRecordAudio).Append("\n");
            sb.Append("  RadioEdit: ").Append(RadioEdit).Append("\n");
            sb.Append("  RecordAudio: ").Append(RecordAudio).Append("\n");
            sb.Append("  RecordImageHref: ").Append(RecordImageHref).Append("\n");
            sb.Append("  RecordImagePid: ").Append(RecordImagePid).Append("\n");
            sb.Append("  Score: ").Append(Score).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MusicPopularityTrack)obj);
        }

        /// <summary>
        /// Returns true if MusicPopularityTrack instances are equal
        /// </summary>
        /// <param name="other">Instance of MusicPopularityTrack to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(MusicPopularityTrack other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Album == other.Album ||
                    Album != null &&
                    Album.Equals(other.Album)
                ) && 
                (
                    ArtistGid == other.ArtistGid ||
                    ArtistGid != null &&
                    ArtistGid.Equals(other.ArtistGid)
                ) && 
                (
                    ArtistName == other.ArtistName ||
                    ArtistName != null &&
                    ArtistName.Equals(other.ArtistName)
                ) && 
                (
                    Artists == other.Artists ||
                    Artists != null &&
                    other.Artists != null &&
                    Artists.SequenceEqual(other.Artists)
                ) && 
                (
                    BaseTitle == other.BaseTitle ||
                    BaseTitle != null &&
                    BaseTitle.Equals(other.BaseTitle)
                ) && 
                (
                    Classical == other.Classical ||
                    
                    Classical.Equals(other.Classical)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    MergedIds == other.MergedIds ||
                    MergedIds != null &&
                    other.MergedIds != null &&
                    MergedIds.SequenceEqual(other.MergedIds)
                ) && 
                (
                    PreferredMultiplayRecordAudio == other.PreferredMultiplayRecordAudio ||
                    PreferredMultiplayRecordAudio != null &&
                    PreferredMultiplayRecordAudio.Equals(other.PreferredMultiplayRecordAudio)
                ) && 
                (
                    PreferredRecordAudio == other.PreferredRecordAudio ||
                    PreferredRecordAudio != null &&
                    PreferredRecordAudio.Equals(other.PreferredRecordAudio)
                ) && 
                (
                    RadioEdit == other.RadioEdit ||
                    
                    RadioEdit.Equals(other.RadioEdit)
                ) && 
                (
                    RecordAudio == other.RecordAudio ||
                    RecordAudio != null &&
                    other.RecordAudio != null &&
                    RecordAudio.SequenceEqual(other.RecordAudio)
                ) && 
                (
                    RecordImageHref == other.RecordImageHref ||
                    RecordImageHref != null &&
                    RecordImageHref.Equals(other.RecordImageHref)
                ) && 
                (
                    RecordImagePid == other.RecordImagePid ||
                    RecordImagePid != null &&
                    RecordImagePid.Equals(other.RecordImagePid)
                ) && 
                (
                    Score == other.Score ||
                    
                    Score.Equals(other.Score)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Album != null)
                    hashCode = hashCode * 59 + Album.GetHashCode();
                    if (ArtistGid != null)
                    hashCode = hashCode * 59 + ArtistGid.GetHashCode();
                    if (ArtistName != null)
                    hashCode = hashCode * 59 + ArtistName.GetHashCode();
                    if (Artists != null)
                    hashCode = hashCode * 59 + Artists.GetHashCode();
                    if (BaseTitle != null)
                    hashCode = hashCode * 59 + BaseTitle.GetHashCode();
                    
                    hashCode = hashCode * 59 + Classical.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (MergedIds != null)
                    hashCode = hashCode * 59 + MergedIds.GetHashCode();
                    if (PreferredMultiplayRecordAudio != null)
                    hashCode = hashCode * 59 + PreferredMultiplayRecordAudio.GetHashCode();
                    if (PreferredRecordAudio != null)
                    hashCode = hashCode * 59 + PreferredRecordAudio.GetHashCode();
                    
                    hashCode = hashCode * 59 + RadioEdit.GetHashCode();
                    if (RecordAudio != null)
                    hashCode = hashCode * 59 + RecordAudio.GetHashCode();
                    if (RecordImageHref != null)
                    hashCode = hashCode * 59 + RecordImageHref.GetHashCode();
                    if (RecordImagePid != null)
                    hashCode = hashCode * 59 + RecordImagePid.GetHashCode();
                    
                    hashCode = hashCode * 59 + Score.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MusicPopularityTrack left, MusicPopularityTrack right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MusicPopularityTrack left, MusicPopularityTrack right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
