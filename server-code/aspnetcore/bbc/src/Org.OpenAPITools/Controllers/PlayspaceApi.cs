/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PlayspaceApiController : ControllerBase
    { 
        /// <summary>
        /// Playspace Container by ID
        /// </summary>
        /// <remarks>Playspace Container by ID </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="id">Playspace Container ID</param>
        /// <response code="200">OK</response>
        /// <response code="401">There was an error with the supplied &#x60;Authorization&#x60; header.</response>
        /// <response code="404">No Playspace container with given ID could be found.</response>
        [HttpGet]
        [Route("/my/playspace/containers/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetContainer")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlayspaceContainer), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "There was an error with the supplied &#x60;Authorization&#x60; header.")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "No Playspace container with given ID could be found.")]
        public virtual IActionResult GetContainer([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PlayspaceContainer));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"members\" : [ {\n    \"version_pid\" : \"version_pid\",\n    \"image_url\" : \"image_url\",\n    \"description\" : \"description\",\n    \"pid\" : \"pid\",\n    \"title\" : \"title\",\n    \"type\" : \"type\"\n  }, {\n    \"version_pid\" : \"version_pid\",\n    \"image_url\" : \"image_url\",\n    \"description\" : \"description\",\n    \"pid\" : \"pid\",\n    \"title\" : \"title\",\n    \"type\" : \"type\"\n  } ],\n  \"id\" : \"id\",\n  \"title\" : \"title\",\n  \"type\" : \"type\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PlayspaceContainer>(exampleJson)
            : default(PlayspaceContainer);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Suggested Playspace Container
        /// </summary>
        /// <remarks>Suggested Playspace Container </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="previousPid">Clip or Episode PID of the previous or first content item in the Playspace stream.</param>
        /// <param name="previousContainer">Container ID of the previous container in the Playspace stream.</param>
        /// <response code="200">OK</response>
        /// <response code="401">There was an error with the supplied &#x60;Authorization&#x60; header.</response>
        [HttpGet]
        [Route("/my/playspace/containers/suggested")]
        [ValidateModelState]
        [SwaggerOperation("SuggestContainer")]
        [SwaggerResponse(statusCode: 200, type: typeof(PlayspaceContainer), description: "OK")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "There was an error with the supplied &#x60;Authorization&#x60; header.")]
        public virtual IActionResult SuggestContainer([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "previous_pid")][Required()]string previousPid, [FromQuery (Name = "previous_container")]string previousContainer)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PlayspaceContainer));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"members\" : [ {\n    \"version_pid\" : \"version_pid\",\n    \"image_url\" : \"image_url\",\n    \"description\" : \"description\",\n    \"pid\" : \"pid\",\n    \"title\" : \"title\",\n    \"type\" : \"type\"\n  }, {\n    \"version_pid\" : \"version_pid\",\n    \"image_url\" : \"image_url\",\n    \"description\" : \"description\",\n    \"pid\" : \"pid\",\n    \"title\" : \"title\",\n    \"type\" : \"type\"\n  } ],\n  \"id\" : \"id\",\n  \"title\" : \"title\",\n  \"type\" : \"type\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PlayspaceContainer>(exampleJson)
            : default(PlayspaceContainer);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
