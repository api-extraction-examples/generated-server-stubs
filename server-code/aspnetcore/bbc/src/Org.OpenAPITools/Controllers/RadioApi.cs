/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class RadioApiController : ControllerBase
    { 
        /// <summary>
        /// Favourite Episode or Clip
        /// </summary>
        /// <remarks>Remove User favourite </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
        /// <param name="pid">pid</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/my/radio/favourites/{type}/{pid}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePersonalisedRadioByActivityTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult DeletePersonalisedRadioByActivityTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brand or Series
        /// </summary>
        /// <remarks>Remove &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio follows types: Brands or Series</param>
        /// <param name="pid">pid</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/my/radio/follows/{type}/{pid}")]
        [ValidateModelState]
        [SwaggerOperation("DeletePersonalisedRadioFollowsByTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult DeletePersonalisedRadioFollowsByTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episode or Clip
        /// </summary>
        /// <remarks>Check to see if a single clip or episode entity is in a users favourites - determines UX of add button.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
        /// <param name="pid">pid</param>
        /// <param name="showAllActivity">Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39;</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/favourites/{type}/{pid}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioByActivityTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioByActivityTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid, [FromQuery (Name = "show_all_activity")]bool? showAllActivity)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episodes and Clips
        /// </summary>
        /// <remarks>List of favourited episodes and clips for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <param name="sort">Sort order for Personalised Radio results</param>
        /// <param name="showAllActivity">Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39;</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/favourites")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioFavourites")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioFavourites([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "sort")]string sort, [FromQuery (Name = "show_all_activity")]bool? showAllActivity)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episodes and Clips by Type
        /// </summary>
        /// <remarks>List of followed &#39;clips&#39; or &#39;episode&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
        /// <param name="sort">Sort order for Personalised Radio results</param>
        /// <param name="showAllActivity">Include items which have been &#39;soft&#39; unfavourited in response. I.e items with UAS type of &#39;unfavourited&#39;</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/favourites/{type}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioFavouritesByType")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioFavouritesByType([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromQuery (Name = "sort")]string sort, [FromQuery (Name = "show_all_activity")]bool? showAllActivity, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brands and Series
        /// </summary>
        /// <remarks>List of favourited brands and series for a given user for iPlayer Radio.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <param name="sort">Sort order for Personalised Radio results</param>
        /// <param name="showAllActivity">Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39;</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/follows")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioFollows")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioFollows([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "sort")]string sort, [FromQuery (Name = "show_all_activity")]bool? showAllActivity)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brands or Series by Type
        /// </summary>
        /// <remarks>List of followed &#39;brand&#39; or &#39;series&#39; items for a given iPlayer Radio user  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio follows types: Brands or Series</param>
        /// <param name="sort">Sort order for Personalised Radio results</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <param name="showAllActivity">Include items which have been &#39;soft&#39; unfollowed in response. I.e items with UAS type of &#39;unfollowed&#39;</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/follows/{type}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioFollowsByType")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioFollowsByType([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromQuery (Name = "sort")]string sort, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "show_all_activity")]bool? showAllActivity)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brand or Series
        /// </summary>
        /// <remarks>Check to see if a single brand or series entity is in a users follows - determines UX of add button. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio follows types: Brands or Series</param>
        /// <param name="pid">pid</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/follows/{type}/{pid}")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioFollowsByTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioFollowsByTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Played Episode or Clip
        /// </summary>
        /// <remarks>Returns mixed episode and clip plays for a given BBC iPlayer radio user.  N.B.  Swagger schemas cannot currently handle multiple combinations of object in an array i.e. a mix of Episode and Clip Summaries so we are defining data as a Programme Summary here.  This will be resolved in V3 with full support for  anyOf https://www.openapis.org/blog/2017/01/24/a-new-year-a-new-specification </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <param name="sort">Sort order for Personalised Radio results</param>
        /// <param name="showAllActivity">Include expired/unavailable items</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/radio/plays")]
        [ValidateModelState]
        [SwaggerOperation("GetPersonalisedRadioPlays")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetPersonalisedRadioPlays([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "sort")]string sort, [FromQuery (Name = "show_all_activity")]bool? showAllActivity)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  }, {\n    \"urn\" : \"urn\",\n    \"added_at\" : \"added_at\",\n    \"metadata\" : {\n      \"miscellaneous\" : {\n        \"title\" : \"title\"\n      },\n      \"origin\" : {\n        \"type\" : \"type\"\n      },\n      \"type\" : \"type\",\n      \"programme_type\" : \"programme_type\"\n    },\n    \"activity\" : \"activity\",\n    \"data\" : {\n      \"pid\" : \"pid\",\n      \"type\" : \"brand_summary\"\n    },\n    \"uas_type\" : \"uas_type\",\n    \"domain\" : \"domain\",\n    \"action\" : \"action\",\n    \"id\" : \"id\",\n    \"type\" : \"type\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioResponse>(exampleJson)
            : default(PersonalisedRadioResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episodes and Clips
        /// </summary>
        /// <remarks>Add User favourites  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body">Action favourited or unfavourited</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/radio/favourites")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostPersonalisedRadioBatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostPersonalisedRadioBatch([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]List<PersonalisedRadioBatchRequest> body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episode or Clip
        /// </summary>
        /// <remarks>Add User favourite  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
        /// <param name="pid">pid</param>
        /// <param name="body">Action favourited or unfavourited</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/radio/favourites/{type}/{pid}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostPersonalisedRadioByActivityTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostPersonalisedRadioByActivityTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid, [FromBody]PersonalisedRadioRequest body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brands and Series
        /// </summary>
        /// <remarks>Add &#39;brand&#39; or &#39;series&#39; items to a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body">Action followed or unfollowed</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/radio/follows")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostPersonalisedRadioFollowsBatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostPersonalisedRadioFollowsBatch([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]List<PersonalisedRadioBatchRequest> body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brand or Series
        /// </summary>
        /// <remarks>Add &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio follows types: Brands or Series</param>
        /// <param name="pid">pid</param>
        /// <param name="body">Action followed or unfollowed</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/radio/follows/{type}/{pid}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostPersonalisedRadioFollowsByTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostPersonalisedRadioFollowsByTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid, [FromBody]PersonalisedRadioRequest body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episodes and Clips
        /// </summary>
        /// <remarks>Update user favourites  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body">Action favourited or unfavourited</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/my/radio/favourites")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutPersonalisedRadioBatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PutPersonalisedRadioBatch([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]List<PersonalisedRadioBatchRequest> body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Favourite Episode or Clip
        /// </summary>
        /// <remarks>Update user favourite  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio favourite types: Clips or Episodes</param>
        /// <param name="pid">pid</param>
        /// <param name="body">Action favourited or unfavourited</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/my/radio/favourites/{type}/{pid}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutPersonalisedRadioByActivityTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PutPersonalisedRadioByActivityTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid, [FromBody]PersonalisedRadioRequest body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brands and Series
        /// </summary>
        /// <remarks>Update &#39;brands&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body">Action followed or unfollowed</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/my/radio/follows")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutPersonalisedRadioFollowsBatch")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PutPersonalisedRadioFollowsBatch([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]List<PersonalisedRadioBatchRequest> body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Followed Brand or Series
        /// </summary>
        /// <remarks>Update &#39;brand&#39; or &#39;series&#39; items from a users iPlayer Radio follows  N.B. Any HTML tags submitted in metadata will be removed </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="type">Supported Radio follows types: Brands or Series</param>
        /// <param name="pid">pid</param>
        /// <param name="body">Action followed or unfollowed</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/my/radio/follows/{type}/{pid}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutPersonalisedRadioFollowsByTypeById")]
        [SwaggerResponse(statusCode: 200, type: typeof(PersonalisedRadioSuccessResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(PersonalisedRadioErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PutPersonalisedRadioFollowsByTypeById([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "type")][Required]string type, [FromRoute (Name = "pid")][Required]string pid, [FromBody]PersonalisedRadioRequest body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(PersonalisedRadioSuccessResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(PersonalisedRadioErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"$schema\" : \"$schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<PersonalisedRadioSuccessResponse>(exampleJson)
            : default(PersonalisedRadioSuccessResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
