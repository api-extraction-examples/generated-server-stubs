/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MusicExportApiController : ControllerBase
    { 
        /// <summary>
        /// Music Export Preferences
        /// </summary>
        /// <remarks>Remove export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/my/music/preferences/export")]
        [ValidateModelState]
        [SwaggerOperation("DeleteMusicPreferencesExport")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportSuccess), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult DeleteMusicPreferencesExport([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportSuccess));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"schema\" : \"schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportSuccess>(exampleJson)
            : default(MusicExportSuccess);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Vendor Preferences
        /// </summary>
        /// <remarks>Remove Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="vendor">Supported 3rd Party Vendor</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpDelete]
        [Route("/my/music/preferences/export/{vendor}")]
        [ValidateModelState]
        [SwaggerOperation("DeleteMusicPreferencesExportVendor")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult DeleteMusicPreferencesExportVendor([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "vendor")][Required]string vendor)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Music Exports
        /// </summary>
        /// <remarks>Returns status of all previous third party export actions for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/music/export")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicExport")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportJob), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetMusicExport([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportJob));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"job_id\" : \"job_id\",\n  \"vendor\" : \"vendor\",\n  \"created_at\" : \"created_at\",\n  \"id\" : \"id\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportJob>(exampleJson)
            : default(MusicExportJob);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Jobs
        /// </summary>
        /// <remarks>All items associated to a users export request </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="over16">Boolean age check</param>
        /// <param name="vendor">Specify Vendor Jobs</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/music/exports/jobs")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicExportJobs")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportJob), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetMusicExportJobs([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "over16")][Required()]bool over16, [FromQuery (Name = "vendor")]string vendor)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportJob));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"job_id\" : \"job_id\",\n  \"vendor\" : \"vendor\",\n  \"created_at\" : \"created_at\",\n  \"id\" : \"id\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportJob>(exampleJson)
            : default(MusicExportJob);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Tracks
        /// </summary>
        /// <remarks>Retrieves vendor and status specific tracks </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="over16">Boolean age check</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <param name="vendor">Specify Vendor Tracks</param>
        /// <param name="status">Specify Track status</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/music/exports/tracks")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicExportTracks")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportJob), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetMusicExportTracks([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "over16")][Required()]bool over16, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "vendor")]string vendor, [FromQuery (Name = "status")]string status)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportJob));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"job_id\" : \"job_id\",\n  \"vendor\" : \"vendor\",\n  \"created_at\" : \"created_at\",\n  \"id\" : \"id\",\n  \"status\" : \"status\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportJob>(exampleJson)
            : default(MusicExportJob);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Preferences
        /// </summary>
        /// <remarks>Returns export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/music/preferences/export")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicPreferencesExport")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportPreferencesResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetMusicPreferencesExport([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportPreferencesResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"schema\" : \"schema\",\n  \"total\" : 0,\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"access_token\" : \"access_token\",\n    \"refresh_token\" : \"refresh_token\",\n    \"last_export\" : \"last_export\",\n    \"partner_id\" : \"partner_id\",\n    \"terms\" : true,\n    \"authorization_code\" : \"authorization_code\",\n    \"vendor\" : \"vendor\",\n    \"add_plus_export\" : true,\n    \"access_expires_at\" : \"access_expires_at\",\n    \"legacy_state\" : \"legacy_state\"\n  }, {\n    \"access_token\" : \"access_token\",\n    \"refresh_token\" : \"refresh_token\",\n    \"last_export\" : \"last_export\",\n    \"partner_id\" : \"partner_id\",\n    \"terms\" : true,\n    \"authorization_code\" : \"authorization_code\",\n    \"vendor\" : \"vendor\",\n    \"add_plus_export\" : true,\n    \"access_expires_at\" : \"access_expires_at\",\n    \"legacy_state\" : \"legacy_state\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportPreferencesResponse>(exampleJson)
            : default(MusicExportPreferencesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Vendor Preferences
        /// </summary>
        /// <remarks>Returns vendor specific export preferences for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="vendor">Supported 3rd Party Vendor</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/my/music/preferences/export/{vendor}")]
        [ValidateModelState]
        [SwaggerOperation("GetMusicPreferencesExportVendor")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportPreferencesResponse), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetMusicPreferencesExportVendor([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "vendor")][Required]string vendor)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportPreferencesResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"schema\" : \"schema\",\n  \"total\" : 0,\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\",\n  \"results\" : [ {\n    \"access_token\" : \"access_token\",\n    \"refresh_token\" : \"refresh_token\",\n    \"last_export\" : \"last_export\",\n    \"partner_id\" : \"partner_id\",\n    \"terms\" : true,\n    \"authorization_code\" : \"authorization_code\",\n    \"vendor\" : \"vendor\",\n    \"add_plus_export\" : true,\n    \"access_expires_at\" : \"access_expires_at\",\n    \"legacy_state\" : \"legacy_state\"\n  }, {\n    \"access_token\" : \"access_token\",\n    \"refresh_token\" : \"refresh_token\",\n    \"last_export\" : \"last_export\",\n    \"partner_id\" : \"partner_id\",\n    \"terms\" : true,\n    \"authorization_code\" : \"authorization_code\",\n    \"vendor\" : \"vendor\",\n    \"add_plus_export\" : true,\n    \"access_expires_at\" : \"access_expires_at\",\n    \"legacy_state\" : \"legacy_state\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportPreferencesResponse>(exampleJson)
            : default(MusicExportPreferencesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Jobs
        /// </summary>
        /// <remarks>Create Export Job for a user </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="over16">Boolean age check</param>
        /// <param name="body"></param>
        /// <param name="vendor">Specify Vendor Jobs</param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/music/exports/jobs")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostMusicExportJob")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportSuccess), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostMusicExportJob([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromQuery (Name = "over16")][Required()]bool over16, [FromBody]List<MusicExportJob> body, [FromQuery (Name = "vendor")]string vendor)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportSuccess));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"schema\" : \"schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportSuccess>(exampleJson)
            : default(MusicExportSuccess);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Preferences
        /// </summary>
        /// <remarks>Create export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/music/preferences/export")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostMusicPreferencesExport")]
        [SwaggerResponse(statusCode: 200, type: typeof(MusicExportSuccess), description: "OK")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostMusicPreferencesExport([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]MusicExportPreferences body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MusicExportSuccess));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"schema\" : \"schema\",\n  \"method\" : \"method\",\n  \"replied_at\" : \"replied_at\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MusicExportSuccess>(exampleJson)
            : default(MusicExportSuccess);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Music Export Vendor Preferences
        /// </summary>
        /// <remarks>Create Vendor specific export preferences (e.g. 3rd party vendors, partner id&#39;s) for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="vendor">Supported 3rd Party Vendor</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPost]
        [Route("/my/music/preferences/export/{vendor}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostMusicPreferencesExportVendor")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PostMusicPreferencesExportVendor([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "vendor")][Required]string vendor, [FromBody]MusicExportPreferences body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Music Export Vendor Preferences
        /// </summary>
        /// <remarks>Update vendor specific export preferences for a given BBC Music user. </remarks>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAuthenticationProvider">Authentication type</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="vendor">Supported 3rd Party Vendor</param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="0">Unexpected error</response>
        [HttpPut]
        [Route("/my/music/preferences/export/{vendor}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PutMusicPreferencesExportVendor")]
        [SwaggerResponse(statusCode: 0, type: typeof(MusicExportErrorResponse), description: "Unexpected error")]
        public virtual IActionResult PutMusicPreferencesExportVendor([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-Authentication-Provider")][Required()]string xAuthenticationProvider, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "vendor")][Required]string vendor, [FromBody]MusicExportPreferences body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(MusicExportErrorResponse));

            throw new NotImplementedException();
        }
    }
}
