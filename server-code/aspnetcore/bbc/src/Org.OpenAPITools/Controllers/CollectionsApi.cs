/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CollectionsApiController : ControllerBase
    { 
        /// <summary>
        /// Collection Members
        /// </summary>
        /// <remarks>Episodes and Clips from Collection </remarks>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="pid">pid</param>
        /// <param name="offset">Paginated results offset</param>
        /// <param name="limit">Paginated results limit</param>
        /// <response code="200">OK</response>
        /// <response code="404">Collection not found</response>
        /// <response code="0">Unexpected error</response>
        [HttpGet]
        [Route("/collections/{pid}/members")]
        [ValidateModelState]
        [SwaggerOperation("GetCollectionMembers")]
        [SwaggerResponse(statusCode: 200, type: typeof(ProgrammesResponse), description: "OK")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Collection not found")]
        [SwaggerResponse(statusCode: 0, type: typeof(ErrorResponse), description: "Unexpected error")]
        public virtual IActionResult GetCollectionMembers([FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromRoute (Name = "pid")][Required]string pid, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ProgrammesResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 0 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(0, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"total\" : 1,\n  \"$schema\" : \"$schema\",\n  \"offset\" : 6,\n  \"limit\" : 0,\n  \"results\" : [ {\n    \"pid\" : \"pid\",\n    \"type\" : \"brand_summary\"\n  }, {\n    \"pid\" : \"pid\",\n    \"type\" : \"brand_summary\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ProgrammesResponse>(exampleJson)
            : default(ProgrammesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
