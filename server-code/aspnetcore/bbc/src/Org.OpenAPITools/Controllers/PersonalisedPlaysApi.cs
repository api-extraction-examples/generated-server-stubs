/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class PersonalisedPlaysApiController : ControllerBase
    { 
        /// <summary>
        /// Write Play Event
        /// </summary>
        /// <param name="authorization">Bearer OAUTH_TOKEN</param>
        /// <param name="xAPIKey">API_KEY</param>
        /// <param name="body"></param>
        /// <response code="202">Request successfully sent to UAS.</response>
        /// <response code="400">The request was malformed.</response>
        /// <response code="401">There was an error with the supplied &#x60;Authorization&#x60; header.</response>
        [HttpPost]
        [Route("/my/plays")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("MyPlaysPost")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "The request was malformed.")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "There was an error with the supplied &#x60;Authorization&#x60; header.")]
        public virtual IActionResult MyPlaysPost([FromHeader (Name = "Authorization")][Required()]string authorization, [FromHeader (Name = "X-API-Key")][Required()]string xAPIKey, [FromBody]Body4 body)
        {

            //TODO: Uncomment the next line to return response 202 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(202);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
