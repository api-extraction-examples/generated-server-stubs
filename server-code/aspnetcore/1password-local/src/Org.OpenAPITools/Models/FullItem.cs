/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FullItem : IEquatable<FullItem>
    {

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CategoryEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            
            /// <summary>
            /// Enum LOGINEnum for LOGIN
            /// </summary>
            [EnumMember(Value = "LOGIN")]
            LOGINEnum = 1,
            
            /// <summary>
            /// Enum PASSWORDEnum for PASSWORD
            /// </summary>
            [EnumMember(Value = "PASSWORD")]
            PASSWORDEnum = 2,
            
            /// <summary>
            /// Enum APICREDENTIALEnum for API_CREDENTIAL
            /// </summary>
            [EnumMember(Value = "API_CREDENTIAL")]
            APICREDENTIALEnum = 3,
            
            /// <summary>
            /// Enum SERVEREnum for SERVER
            /// </summary>
            [EnumMember(Value = "SERVER")]
            SERVEREnum = 4,
            
            /// <summary>
            /// Enum DATABASEEnum for DATABASE
            /// </summary>
            [EnumMember(Value = "DATABASE")]
            DATABASEEnum = 5,
            
            /// <summary>
            /// Enum CREDITCARDEnum for CREDIT_CARD
            /// </summary>
            [EnumMember(Value = "CREDIT_CARD")]
            CREDITCARDEnum = 6,
            
            /// <summary>
            /// Enum MEMBERSHIPEnum for MEMBERSHIP
            /// </summary>
            [EnumMember(Value = "MEMBERSHIP")]
            MEMBERSHIPEnum = 7,
            
            /// <summary>
            /// Enum PASSPORTEnum for PASSPORT
            /// </summary>
            [EnumMember(Value = "PASSPORT")]
            PASSPORTEnum = 8,
            
            /// <summary>
            /// Enum SOFTWARELICENSEEnum for SOFTWARE_LICENSE
            /// </summary>
            [EnumMember(Value = "SOFTWARE_LICENSE")]
            SOFTWARELICENSEEnum = 9,
            
            /// <summary>
            /// Enum OUTDOORLICENSEEnum for OUTDOOR_LICENSE
            /// </summary>
            [EnumMember(Value = "OUTDOOR_LICENSE")]
            OUTDOORLICENSEEnum = 10,
            
            /// <summary>
            /// Enum SECURENOTEEnum for SECURE_NOTE
            /// </summary>
            [EnumMember(Value = "SECURE_NOTE")]
            SECURENOTEEnum = 11,
            
            /// <summary>
            /// Enum WIRELESSROUTEREnum for WIRELESS_ROUTER
            /// </summary>
            [EnumMember(Value = "WIRELESS_ROUTER")]
            WIRELESSROUTEREnum = 12,
            
            /// <summary>
            /// Enum BANKACCOUNTEnum for BANK_ACCOUNT
            /// </summary>
            [EnumMember(Value = "BANK_ACCOUNT")]
            BANKACCOUNTEnum = 13,
            
            /// <summary>
            /// Enum DRIVERLICENSEEnum for DRIVER_LICENSE
            /// </summary>
            [EnumMember(Value = "DRIVER_LICENSE")]
            DRIVERLICENSEEnum = 14,
            
            /// <summary>
            /// Enum IDENTITYEnum for IDENTITY
            /// </summary>
            [EnumMember(Value = "IDENTITY")]
            IDENTITYEnum = 15,
            
            /// <summary>
            /// Enum REWARDPROGRAMEnum for REWARD_PROGRAM
            /// </summary>
            [EnumMember(Value = "REWARD_PROGRAM")]
            REWARDPROGRAMEnum = 16,
            
            /// <summary>
            /// Enum DOCUMENTEnum for DOCUMENT
            /// </summary>
            [EnumMember(Value = "DOCUMENT")]
            DOCUMENTEnum = 17,
            
            /// <summary>
            /// Enum EMAILACCOUNTEnum for EMAIL_ACCOUNT
            /// </summary>
            [EnumMember(Value = "EMAIL_ACCOUNT")]
            EMAILACCOUNTEnum = 18,
            
            /// <summary>
            /// Enum SOCIALSECURITYNUMBEREnum for SOCIAL_SECURITY_NUMBER
            /// </summary>
            [EnumMember(Value = "SOCIAL_SECURITY_NUMBER")]
            SOCIALSECURITYNUMBEREnum = 19,
            
            /// <summary>
            /// Enum MEDICALRECORDEnum for MEDICAL_RECORD
            /// </summary>
            [EnumMember(Value = "MEDICAL_RECORD")]
            MEDICALRECORDEnum = 20,
            
            /// <summary>
            /// Enum SSHKEYEnum for SSH_KEY
            /// </summary>
            [EnumMember(Value = "SSH_KEY")]
            SSHKEYEnum = 21,
            
            /// <summary>
            /// Enum CUSTOMEnum for CUSTOM
            /// </summary>
            [EnumMember(Value = "CUSTOM")]
            CUSTOMEnum = 22
        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [Required]
        [DataMember(Name="category", EmitDefaultValue=true)]
        public CategoryEnum Category { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        [DataMember(Name="createdAt", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Favorite
        /// </summary>
        [DataMember(Name="favorite", EmitDefaultValue=true)]
        public bool Favorite { get; set; } = false;

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [RegularExpression("^[\\da-z]{26}$")]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastEditedBy
        /// </summary>
        [DataMember(Name="lastEditedBy", EmitDefaultValue=false)]
        public string LastEditedBy { get; set; }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<StateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum ARCHIVEDEnum for ARCHIVED
            /// </summary>
            [EnumMember(Value = "ARCHIVED")]
            ARCHIVEDEnum = 1,
            
            /// <summary>
            /// Enum DELETEDEnum for DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETEDEnum = 2
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public StateEnum State { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedAt
        /// </summary>
        [DataMember(Name="updatedAt", EmitDefaultValue=false)]
        public DateTime UpdatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Urls
        /// </summary>
        /// <example>[{href&#x3D;https://example.com, primary&#x3D;true}, {href&#x3D;https://example.org}]</example>
        [DataMember(Name="urls", EmitDefaultValue=false)]
        public List<ItemUrlsInner> Urls { get; set; }

        /// <summary>
        /// Gets or Sets Vault
        /// </summary>
        [Required]
        [DataMember(Name="vault", EmitDefaultValue=false)]
        public ItemVault Vault { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets Fields
        /// </summary>
        [DataMember(Name="fields", EmitDefaultValue=false)]
        public List<Field> Fields { get; set; }

        /// <summary>
        /// Gets or Sets Files
        /// </summary>
        [DataMember(Name="files", EmitDefaultValue=false)]
        public List<File> Files { get; set; }

        /// <summary>
        /// Gets or Sets Sections
        /// </summary>
        [DataMember(Name="sections", EmitDefaultValue=false)]
        public List<FullItemAllOfSections> Sections { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FullItem {\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Favorite: ").Append(Favorite).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastEditedBy: ").Append(LastEditedBy).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UpdatedAt: ").Append(UpdatedAt).Append("\n");
            sb.Append("  Urls: ").Append(Urls).Append("\n");
            sb.Append("  Vault: ").Append(Vault).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Fields: ").Append(Fields).Append("\n");
            sb.Append("  Files: ").Append(Files).Append("\n");
            sb.Append("  Sections: ").Append(Sections).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FullItem)obj);
        }

        /// <summary>
        /// Returns true if FullItem instances are equal
        /// </summary>
        /// <param name="other">Instance of FullItem to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FullItem other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Category == other.Category ||
                    
                    Category.Equals(other.Category)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Favorite == other.Favorite ||
                    
                    Favorite.Equals(other.Favorite)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastEditedBy == other.LastEditedBy ||
                    LastEditedBy != null &&
                    LastEditedBy.Equals(other.LastEditedBy)
                ) && 
                (
                    State == other.State ||
                    
                    State.Equals(other.State)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    UpdatedAt == other.UpdatedAt ||
                    UpdatedAt != null &&
                    UpdatedAt.Equals(other.UpdatedAt)
                ) && 
                (
                    Urls == other.Urls ||
                    Urls != null &&
                    other.Urls != null &&
                    Urls.SequenceEqual(other.Urls)
                ) && 
                (
                    Vault == other.Vault ||
                    Vault != null &&
                    Vault.Equals(other.Vault)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    Fields == other.Fields ||
                    Fields != null &&
                    other.Fields != null &&
                    Fields.SequenceEqual(other.Fields)
                ) && 
                (
                    Files == other.Files ||
                    Files != null &&
                    other.Files != null &&
                    Files.SequenceEqual(other.Files)
                ) && 
                (
                    Sections == other.Sections ||
                    Sections != null &&
                    other.Sections != null &&
                    Sections.SequenceEqual(other.Sections)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Favorite.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastEditedBy != null)
                    hashCode = hashCode * 59 + LastEditedBy.GetHashCode();
                    
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (UpdatedAt != null)
                    hashCode = hashCode * 59 + UpdatedAt.GetHashCode();
                    if (Urls != null)
                    hashCode = hashCode * 59 + Urls.GetHashCode();
                    if (Vault != null)
                    hashCode = hashCode * 59 + Vault.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (Fields != null)
                    hashCode = hashCode * 59 + Fields.GetHashCode();
                    if (Files != null)
                    hashCode = hashCode * 59 + Files.GetHashCode();
                    if (Sections != null)
                    hashCode = hashCode * 59 + Sections.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FullItem left, FullItem right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FullItem left, FullItem right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
