/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * The version of the OpenAPI document: 1.5.7
 * Contact: support@1password.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The recipe is used in conjunction with the \&quot;generate\&quot; property to set the character set used to generate a new secure value
    /// </summary>
    [DataContract]
    public partial class GeneratorRecipe : IEquatable<GeneratorRecipe>
    {

        /// <summary>
        /// Gets or Sets CharacterSets
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<CharacterSetsEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CharacterSetsEnum
        {
            
            /// <summary>
            /// Enum LETTERSEnum for LETTERS
            /// </summary>
            [EnumMember(Value = "LETTERS")]
            LETTERSEnum = 1,
            
            /// <summary>
            /// Enum DIGITSEnum for DIGITS
            /// </summary>
            [EnumMember(Value = "DIGITS")]
            DIGITSEnum = 2,
            
            /// <summary>
            /// Enum SYMBOLSEnum for SYMBOLS
            /// </summary>
            [EnumMember(Value = "SYMBOLS")]
            SYMBOLSEnum = 3
        }

        /// <summary>
        /// Gets or Sets CharacterSets
        /// </summary>
        [DataMember(Name="characterSets", EmitDefaultValue=false)]
        public List<GeneratorRecipe.CharacterSetsEnum> CharacterSets { get; set; }

        /// <summary>
        /// List of all characters that should be excluded from generated passwords.
        /// </summary>
        /// <value>List of all characters that should be excluded from generated passwords.</value>
        /// <example>abc1</example>
        [DataMember(Name="excludeCharacters", EmitDefaultValue=false)]
        public string ExcludeCharacters { get; set; }

        /// <summary>
        /// Length of the generated value
        /// </summary>
        /// <value>Length of the generated value</value>
        [Range(1, 64)]
        [DataMember(Name="length", EmitDefaultValue=true)]
        public int Length { get; set; } = 32;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GeneratorRecipe {\n");
            sb.Append("  CharacterSets: ").Append(CharacterSets).Append("\n");
            sb.Append("  ExcludeCharacters: ").Append(ExcludeCharacters).Append("\n");
            sb.Append("  Length: ").Append(Length).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GeneratorRecipe)obj);
        }

        /// <summary>
        /// Returns true if GeneratorRecipe instances are equal
        /// </summary>
        /// <param name="other">Instance of GeneratorRecipe to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GeneratorRecipe other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CharacterSets == other.CharacterSets ||
                    CharacterSets != null &&
                    other.CharacterSets != null &&
                    CharacterSets.SequenceEqual(other.CharacterSets)
                ) && 
                (
                    ExcludeCharacters == other.ExcludeCharacters ||
                    ExcludeCharacters != null &&
                    ExcludeCharacters.Equals(other.ExcludeCharacters)
                ) && 
                (
                    Length == other.Length ||
                    
                    Length.Equals(other.Length)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CharacterSets != null)
                    hashCode = hashCode * 59 + CharacterSets.GetHashCode();
                    if (ExcludeCharacters != null)
                    hashCode = hashCode * 59 + ExcludeCharacters.GetHashCode();
                    
                    hashCode = hashCode * 59 + Length.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GeneratorRecipe left, GeneratorRecipe right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GeneratorRecipe left, GeneratorRecipe right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
