/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Detail information about a ride
    /// </summary>
    [DataContract]
    public partial class RideDetail : IEquatable<RideDetail>
    {
        /// <summary>
        /// Hex color code of the driver AMP device.
        /// </summary>
        /// <value>Hex color code of the driver AMP device.</value>
        [DataMember(Name="beacon_color", EmitDefaultValue=false)]
        public string BeaconColor { get; set; }


        /// <summary>
        /// The array of actors who may cancel the ride at this point
        /// </summary>
        /// <value>The array of actors who may cancel the ride at this point</value>
        [TypeConverter(typeof(CustomEnumConverter<CanCancelEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CanCancelEnum
        {
            
            /// <summary>
            /// Enum DriverEnum for driver
            /// </summary>
            [EnumMember(Value = "driver")]
            DriverEnum = 1,
            
            /// <summary>
            /// Enum PassengerEnum for passenger
            /// </summary>
            [EnumMember(Value = "passenger")]
            PassengerEnum = 2,
            
            /// <summary>
            /// Enum DispatcherEnum for dispatcher
            /// </summary>
            [EnumMember(Value = "dispatcher")]
            DispatcherEnum = 3
        }

        /// <summary>
        /// Gets or Sets CanCancel
        /// </summary>
        [DataMember(Name="can_cancel", EmitDefaultValue=false)]
        public List<RideDetail.CanCancelEnum> CanCancel { get; set; }

        /// <summary>
        /// The role of user who canceled the ride (if applicable)
        /// </summary>
        /// <value>The role of user who canceled the ride (if applicable)</value>
        [DataMember(Name="canceled_by", EmitDefaultValue=false)]
        public string CanceledBy { get; set; }

        /// <summary>
        /// Gets or Sets CancellationPrice
        /// </summary>
        [DataMember(Name="cancellation_price", EmitDefaultValue=false)]
        public CancellationCost CancellationPrice { get; set; }

        /// <summary>
        /// Gets or Sets Destination
        /// </summary>
        [DataMember(Name="destination", EmitDefaultValue=false)]
        public RideLocation Destination { get; set; }

        /// <summary>
        /// The distance, in miles, that this ride traveled. This field is only present after drop-off
        /// </summary>
        /// <value>The distance, in miles, that this ride traveled. This field is only present after drop-off</value>
        [DataMember(Name="distance_miles", EmitDefaultValue=true)]
        public float DistanceMiles { get; set; }

        /// <summary>
        /// Gets or Sets Driver
        /// </summary>
        [DataMember(Name="driver", EmitDefaultValue=false)]
        public DriverDetail Driver { get; set; }

        /// <summary>
        /// Gets or Sets Dropoff
        /// </summary>
        [DataMember(Name="dropoff", EmitDefaultValue=false)]
        public PickupDropoffLocation Dropoff { get; set; }

        /// <summary>
        /// Duration of the ride in seconds from pickup to drop-off. This field is only present after drop-off.
        /// </summary>
        /// <value>Duration of the ride in seconds from pickup to drop-off. This field is only present after drop-off.</value>
        [DataMember(Name="duration_seconds", EmitDefaultValue=true)]
        public int DurationSeconds { get; set; }

        /// <summary>
        /// The written feedback the user left for this ride
        /// </summary>
        /// <value>The written feedback the user left for this ride</value>
        [DataMember(Name="feedback", EmitDefaultValue=false)]
        public string Feedback { get; set; }

        /// <summary>
        /// The request timestamp in date and time
        /// </summary>
        /// <value>The request timestamp in date and time</value>
        [DataMember(Name="generated_at", EmitDefaultValue=false)]
        public DateTime GeneratedAt { get; set; }

        /// <summary>
        /// The break down of cost
        /// </summary>
        /// <value>The break down of cost</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Location
        /// </summary>
        [DataMember(Name="location", EmitDefaultValue=false)]
        public CurrentRideLocation Location { get; set; }

        /// <summary>
        /// Gets or Sets Origin
        /// </summary>
        [DataMember(Name="origin", EmitDefaultValue=false)]
        public RideLocation Origin { get; set; }

        /// <summary>
        /// Gets or Sets Passenger
        /// </summary>
        [DataMember(Name="passenger", EmitDefaultValue=false)]
        public PassengerDetail Passenger { get; set; }

        /// <summary>
        /// Gets or Sets Pickup
        /// </summary>
        [DataMember(Name="pickup", EmitDefaultValue=false)]
        public PickupDropoffLocation Pickup { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Cost Price { get; set; }

        /// <summary>
        /// The web view showing the pricing structure for the geographic area where the ride was taken 
        /// </summary>
        /// <value>The web view showing the pricing structure for the geographic area where the ride was taken </value>
        [DataMember(Name="pricing_details_url", EmitDefaultValue=false)]
        public string PricingDetailsUrl { get; set; }

        /// <summary>
        /// The Prime Time percentage applied to the base price
        /// </summary>
        /// <value>The Prime Time percentage applied to the base price</value>
        [DataMember(Name="primetime_percentage", EmitDefaultValue=false)]
        public string PrimetimePercentage { get; set; }

        /// <summary>
        /// The rating the user left for this ride, from 1 to 5
        /// </summary>
        /// <value>The rating the user left for this ride, from 1 to 5</value>
        [DataMember(Name="rating", EmitDefaultValue=true)]
        public int Rating { get; set; }

        /// <summary>
        /// The ride requested timestamp in date and time
        /// </summary>
        /// <value>The ride requested timestamp in date and time</value>
        [DataMember(Name="requested_at", EmitDefaultValue=false)]
        public DateTime RequestedAt { get; set; }

        /// <summary>
        /// The unique ID of this ride
        /// </summary>
        /// <value>The unique ID of this ride</value>
        [DataMember(Name="ride_id", EmitDefaultValue=false)]
        public string RideId { get; set; }

        /// <summary>
        /// Gets or Sets RideProfile
        /// </summary>
        [DataMember(Name="ride_profile", EmitDefaultValue=true)]
        public RideProfileEnum RideProfile { get; set; }

        /// <summary>
        /// Gets or Sets RideType
        /// </summary>
        [DataMember(Name="ride_type", EmitDefaultValue=true)]
        public RideTypeEnumWithOther RideType { get; set; }

        /// <summary>
        /// The web view showing the passenger, driver, and route for this ride. This field will only be present for rides created through this API, or that have been shared through the \&quot;Share my Route\&quot; feature 
        /// </summary>
        /// <value>The web view showing the passenger, driver, and route for this ride. This field will only be present for rides created through this API, or that have been shared through the \&quot;Share my Route\&quot; feature </value>
        [DataMember(Name="route_url", EmitDefaultValue=false)]
        public string RouteUrl { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public RideStatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Vehicle
        /// </summary>
        [DataMember(Name="vehicle", EmitDefaultValue=false)]
        public VehicleDetail Vehicle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RideDetail {\n");
            sb.Append("  BeaconColor: ").Append(BeaconColor).Append("\n");
            sb.Append("  CanCancel: ").Append(CanCancel).Append("\n");
            sb.Append("  CanceledBy: ").Append(CanceledBy).Append("\n");
            sb.Append("  CancellationPrice: ").Append(CancellationPrice).Append("\n");
            sb.Append("  Destination: ").Append(Destination).Append("\n");
            sb.Append("  DistanceMiles: ").Append(DistanceMiles).Append("\n");
            sb.Append("  Driver: ").Append(Driver).Append("\n");
            sb.Append("  Dropoff: ").Append(Dropoff).Append("\n");
            sb.Append("  DurationSeconds: ").Append(DurationSeconds).Append("\n");
            sb.Append("  Feedback: ").Append(Feedback).Append("\n");
            sb.Append("  GeneratedAt: ").Append(GeneratedAt).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Location: ").Append(Location).Append("\n");
            sb.Append("  Origin: ").Append(Origin).Append("\n");
            sb.Append("  Passenger: ").Append(Passenger).Append("\n");
            sb.Append("  Pickup: ").Append(Pickup).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  PricingDetailsUrl: ").Append(PricingDetailsUrl).Append("\n");
            sb.Append("  PrimetimePercentage: ").Append(PrimetimePercentage).Append("\n");
            sb.Append("  Rating: ").Append(Rating).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  RideId: ").Append(RideId).Append("\n");
            sb.Append("  RideProfile: ").Append(RideProfile).Append("\n");
            sb.Append("  RideType: ").Append(RideType).Append("\n");
            sb.Append("  RouteUrl: ").Append(RouteUrl).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Vehicle: ").Append(Vehicle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RideDetail)obj);
        }

        /// <summary>
        /// Returns true if RideDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of RideDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RideDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BeaconColor == other.BeaconColor ||
                    BeaconColor != null &&
                    BeaconColor.Equals(other.BeaconColor)
                ) && 
                (
                    CanCancel == other.CanCancel ||
                    CanCancel != null &&
                    other.CanCancel != null &&
                    CanCancel.SequenceEqual(other.CanCancel)
                ) && 
                (
                    CanceledBy == other.CanceledBy ||
                    CanceledBy != null &&
                    CanceledBy.Equals(other.CanceledBy)
                ) && 
                (
                    CancellationPrice == other.CancellationPrice ||
                    CancellationPrice != null &&
                    CancellationPrice.Equals(other.CancellationPrice)
                ) && 
                (
                    Destination == other.Destination ||
                    Destination != null &&
                    Destination.Equals(other.Destination)
                ) && 
                (
                    DistanceMiles == other.DistanceMiles ||
                    
                    DistanceMiles.Equals(other.DistanceMiles)
                ) && 
                (
                    Driver == other.Driver ||
                    Driver != null &&
                    Driver.Equals(other.Driver)
                ) && 
                (
                    Dropoff == other.Dropoff ||
                    Dropoff != null &&
                    Dropoff.Equals(other.Dropoff)
                ) && 
                (
                    DurationSeconds == other.DurationSeconds ||
                    
                    DurationSeconds.Equals(other.DurationSeconds)
                ) && 
                (
                    Feedback == other.Feedback ||
                    Feedback != null &&
                    Feedback.Equals(other.Feedback)
                ) && 
                (
                    GeneratedAt == other.GeneratedAt ||
                    GeneratedAt != null &&
                    GeneratedAt.Equals(other.GeneratedAt)
                ) && 
                (
                    LineItems == other.LineItems ||
                    LineItems != null &&
                    other.LineItems != null &&
                    LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    Location == other.Location ||
                    Location != null &&
                    Location.Equals(other.Location)
                ) && 
                (
                    Origin == other.Origin ||
                    Origin != null &&
                    Origin.Equals(other.Origin)
                ) && 
                (
                    Passenger == other.Passenger ||
                    Passenger != null &&
                    Passenger.Equals(other.Passenger)
                ) && 
                (
                    Pickup == other.Pickup ||
                    Pickup != null &&
                    Pickup.Equals(other.Pickup)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    PricingDetailsUrl == other.PricingDetailsUrl ||
                    PricingDetailsUrl != null &&
                    PricingDetailsUrl.Equals(other.PricingDetailsUrl)
                ) && 
                (
                    PrimetimePercentage == other.PrimetimePercentage ||
                    PrimetimePercentage != null &&
                    PrimetimePercentage.Equals(other.PrimetimePercentage)
                ) && 
                (
                    Rating == other.Rating ||
                    
                    Rating.Equals(other.Rating)
                ) && 
                (
                    RequestedAt == other.RequestedAt ||
                    RequestedAt != null &&
                    RequestedAt.Equals(other.RequestedAt)
                ) && 
                (
                    RideId == other.RideId ||
                    RideId != null &&
                    RideId.Equals(other.RideId)
                ) && 
                (
                    RideProfile == other.RideProfile ||
                    
                    RideProfile.Equals(other.RideProfile)
                ) && 
                (
                    RideType == other.RideType ||
                    
                    RideType.Equals(other.RideType)
                ) && 
                (
                    RouteUrl == other.RouteUrl ||
                    RouteUrl != null &&
                    RouteUrl.Equals(other.RouteUrl)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Vehicle == other.Vehicle ||
                    Vehicle != null &&
                    Vehicle.Equals(other.Vehicle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (BeaconColor != null)
                    hashCode = hashCode * 59 + BeaconColor.GetHashCode();
                    if (CanCancel != null)
                    hashCode = hashCode * 59 + CanCancel.GetHashCode();
                    if (CanceledBy != null)
                    hashCode = hashCode * 59 + CanceledBy.GetHashCode();
                    if (CancellationPrice != null)
                    hashCode = hashCode * 59 + CancellationPrice.GetHashCode();
                    if (Destination != null)
                    hashCode = hashCode * 59 + Destination.GetHashCode();
                    
                    hashCode = hashCode * 59 + DistanceMiles.GetHashCode();
                    if (Driver != null)
                    hashCode = hashCode * 59 + Driver.GetHashCode();
                    if (Dropoff != null)
                    hashCode = hashCode * 59 + Dropoff.GetHashCode();
                    
                    hashCode = hashCode * 59 + DurationSeconds.GetHashCode();
                    if (Feedback != null)
                    hashCode = hashCode * 59 + Feedback.GetHashCode();
                    if (GeneratedAt != null)
                    hashCode = hashCode * 59 + GeneratedAt.GetHashCode();
                    if (LineItems != null)
                    hashCode = hashCode * 59 + LineItems.GetHashCode();
                    if (Location != null)
                    hashCode = hashCode * 59 + Location.GetHashCode();
                    if (Origin != null)
                    hashCode = hashCode * 59 + Origin.GetHashCode();
                    if (Passenger != null)
                    hashCode = hashCode * 59 + Passenger.GetHashCode();
                    if (Pickup != null)
                    hashCode = hashCode * 59 + Pickup.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (PricingDetailsUrl != null)
                    hashCode = hashCode * 59 + PricingDetailsUrl.GetHashCode();
                    if (PrimetimePercentage != null)
                    hashCode = hashCode * 59 + PrimetimePercentage.GetHashCode();
                    
                    hashCode = hashCode * 59 + Rating.GetHashCode();
                    if (RequestedAt != null)
                    hashCode = hashCode * 59 + RequestedAt.GetHashCode();
                    if (RideId != null)
                    hashCode = hashCode * 59 + RideId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RideProfile.GetHashCode();
                    
                    hashCode = hashCode * 59 + RideType.GetHashCode();
                    if (RouteUrl != null)
                    hashCode = hashCode * 59 + RouteUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Vehicle != null)
                    hashCode = hashCode * 59 + Vehicle.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RideDetail left, RideDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RideDetail left, RideDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
