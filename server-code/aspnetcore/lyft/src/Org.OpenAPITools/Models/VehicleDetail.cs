/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class VehicleDetail : IEquatable<VehicleDetail>
    {
        /// <summary>
        /// The vehicle&#39;s color
        /// </summary>
        /// <value>The vehicle&#39;s color</value>
        [Required]
        [DataMember(Name="color", EmitDefaultValue=false)]
        public string Color { get; set; }

        /// <summary>
        /// The vehicle&#39;s image url
        /// </summary>
        /// <value>The vehicle&#39;s image url</value>
        [Required]
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// The vehicle&#39;s license plate
        /// </summary>
        /// <value>The vehicle&#39;s license plate</value>
        [Required]
        [DataMember(Name="license_plate", EmitDefaultValue=false)]
        public string LicensePlate { get; set; }

        /// <summary>
        /// The vehicle&#39;s license plate state
        /// </summary>
        /// <value>The vehicle&#39;s license plate state</value>
        [Required]
        [DataMember(Name="license_plate_state", EmitDefaultValue=false)]
        public string LicensePlateState { get; set; }

        /// <summary>
        /// The vehicle&#39;s maker
        /// </summary>
        /// <value>The vehicle&#39;s maker</value>
        [Required]
        [DataMember(Name="make", EmitDefaultValue=false)]
        public string Make { get; set; }

        /// <summary>
        /// The vehicle&#39;s model
        /// </summary>
        /// <value>The vehicle&#39;s model</value>
        [Required]
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// The vehicle&#39;s model year
        /// </summary>
        /// <value>The vehicle&#39;s model year</value>
        [Required]
        [DataMember(Name="year", EmitDefaultValue=true)]
        public int Year { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class VehicleDetail {\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  LicensePlate: ").Append(LicensePlate).Append("\n");
            sb.Append("  LicensePlateState: ").Append(LicensePlateState).Append("\n");
            sb.Append("  Make: ").Append(Make).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((VehicleDetail)obj);
        }

        /// <summary>
        /// Returns true if VehicleDetail instances are equal
        /// </summary>
        /// <param name="other">Instance of VehicleDetail to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(VehicleDetail other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Color == other.Color ||
                    Color != null &&
                    Color.Equals(other.Color)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    LicensePlate == other.LicensePlate ||
                    LicensePlate != null &&
                    LicensePlate.Equals(other.LicensePlate)
                ) && 
                (
                    LicensePlateState == other.LicensePlateState ||
                    LicensePlateState != null &&
                    LicensePlateState.Equals(other.LicensePlateState)
                ) && 
                (
                    Make == other.Make ||
                    Make != null &&
                    Make.Equals(other.Make)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Year == other.Year ||
                    
                    Year.Equals(other.Year)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Color != null)
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (LicensePlate != null)
                    hashCode = hashCode * 59 + LicensePlate.GetHashCode();
                    if (LicensePlateState != null)
                    hashCode = hashCode * 59 + LicensePlateState.GetHashCode();
                    if (Make != null)
                    hashCode = hashCode * 59 + Make.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    
                    hashCode = hashCode * 59 + Year.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(VehicleDetail left, VehicleDetail right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(VehicleDetail left, VehicleDetail right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
