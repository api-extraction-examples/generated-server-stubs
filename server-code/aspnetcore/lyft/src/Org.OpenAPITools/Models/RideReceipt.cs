/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Receipt information of a processed ride.
    /// </summary>
    [DataContract]
    public partial class RideReceipt : IEquatable<RideReceipt>
    {
        /// <summary>
        /// The break down of charge method
        /// </summary>
        /// <value>The break down of charge method</value>
        [DataMember(Name="charges", EmitDefaultValue=false)]
        public List<Charge> Charges { get; set; }

        /// <summary>
        /// The break down of line items
        /// </summary>
        /// <value>The break down of line items</value>
        [DataMember(Name="line_items", EmitDefaultValue=false)]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Gets or Sets Price
        /// </summary>
        [DataMember(Name="price", EmitDefaultValue=false)]
        public Cost Price { get; set; }

        /// <summary>
        /// The ride requested timestamp in date and time
        /// </summary>
        /// <value>The ride requested timestamp in date and time</value>
        [DataMember(Name="requested_at", EmitDefaultValue=false)]
        public DateTime RequestedAt { get; set; }

        /// <summary>
        /// The unique ID of this ride
        /// </summary>
        /// <value>The unique ID of this ride</value>
        [DataMember(Name="ride_id", EmitDefaultValue=false)]
        public string RideId { get; set; }

        /// <summary>
        /// Gets or Sets RideProfile
        /// </summary>
        [DataMember(Name="ride_profile", EmitDefaultValue=true)]
        public RideProfileEnum RideProfile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RideReceipt {\n");
            sb.Append("  Charges: ").Append(Charges).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Price: ").Append(Price).Append("\n");
            sb.Append("  RequestedAt: ").Append(RequestedAt).Append("\n");
            sb.Append("  RideId: ").Append(RideId).Append("\n");
            sb.Append("  RideProfile: ").Append(RideProfile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RideReceipt)obj);
        }

        /// <summary>
        /// Returns true if RideReceipt instances are equal
        /// </summary>
        /// <param name="other">Instance of RideReceipt to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RideReceipt other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Charges == other.Charges ||
                    Charges != null &&
                    other.Charges != null &&
                    Charges.SequenceEqual(other.Charges)
                ) && 
                (
                    LineItems == other.LineItems ||
                    LineItems != null &&
                    other.LineItems != null &&
                    LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    Price == other.Price ||
                    Price != null &&
                    Price.Equals(other.Price)
                ) && 
                (
                    RequestedAt == other.RequestedAt ||
                    RequestedAt != null &&
                    RequestedAt.Equals(other.RequestedAt)
                ) && 
                (
                    RideId == other.RideId ||
                    RideId != null &&
                    RideId.Equals(other.RideId)
                ) && 
                (
                    RideProfile == other.RideProfile ||
                    
                    RideProfile.Equals(other.RideProfile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Charges != null)
                    hashCode = hashCode * 59 + Charges.GetHashCode();
                    if (LineItems != null)
                    hashCode = hashCode * 59 + LineItems.GetHashCode();
                    if (Price != null)
                    hashCode = hashCode * 59 + Price.GetHashCode();
                    if (RequestedAt != null)
                    hashCode = hashCode * 59 + RequestedAt.GetHashCode();
                    if (RideId != null)
                    hashCode = hashCode * 59 + RideId.GetHashCode();
                    
                    hashCode = hashCode * 59 + RideProfile.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RideReceipt left, RideReceipt right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RideReceipt left, RideReceipt right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
