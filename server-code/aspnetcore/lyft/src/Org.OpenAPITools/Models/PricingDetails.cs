/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PricingDetails : IEquatable<PricingDetails>
    {
        /// <summary>
        /// The base charge of the trip
        /// </summary>
        /// <value>The base charge of the trip</value>
        [DataMember(Name="base_charge", EmitDefaultValue=true)]
        public int BaseCharge { get; set; }

        /// <summary>
        /// The charge amount if cancel penalty is involved
        /// </summary>
        /// <value>The charge amount if cancel penalty is involved</value>
        [DataMember(Name="cancel_penalty_amount", EmitDefaultValue=true)]
        public int CancelPenaltyAmount { get; set; }

        /// <summary>
        /// The minimum charge for the trip
        /// </summary>
        /// <value>The minimum charge for the trip</value>
        [DataMember(Name="cost_minimum", EmitDefaultValue=true)]
        public int CostMinimum { get; set; }

        /// <summary>
        /// The cost per mile
        /// </summary>
        /// <value>The cost per mile</value>
        [DataMember(Name="cost_per_mile", EmitDefaultValue=true)]
        public int CostPerMile { get; set; }

        /// <summary>
        /// The cost per minute
        /// </summary>
        /// <value>The cost per minute</value>
        [DataMember(Name="cost_per_minute", EmitDefaultValue=true)]
        public int CostPerMinute { get; set; }

        /// <summary>
        /// The ISO 4217 currency code for the amount (e.g. USD)
        /// </summary>
        /// <value>The ISO 4217 currency code for the amount (e.g. USD)</value>
        [DataMember(Name="currency", EmitDefaultValue=false)]
        public string Currency { get; set; }

        /// <summary>
        /// Service fee
        /// </summary>
        /// <value>Service fee</value>
        [DataMember(Name="trust_and_service", EmitDefaultValue=true)]
        public int TrustAndService { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PricingDetails {\n");
            sb.Append("  BaseCharge: ").Append(BaseCharge).Append("\n");
            sb.Append("  CancelPenaltyAmount: ").Append(CancelPenaltyAmount).Append("\n");
            sb.Append("  CostMinimum: ").Append(CostMinimum).Append("\n");
            sb.Append("  CostPerMile: ").Append(CostPerMile).Append("\n");
            sb.Append("  CostPerMinute: ").Append(CostPerMinute).Append("\n");
            sb.Append("  Currency: ").Append(Currency).Append("\n");
            sb.Append("  TrustAndService: ").Append(TrustAndService).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PricingDetails)obj);
        }

        /// <summary>
        /// Returns true if PricingDetails instances are equal
        /// </summary>
        /// <param name="other">Instance of PricingDetails to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PricingDetails other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BaseCharge == other.BaseCharge ||
                    
                    BaseCharge.Equals(other.BaseCharge)
                ) && 
                (
                    CancelPenaltyAmount == other.CancelPenaltyAmount ||
                    
                    CancelPenaltyAmount.Equals(other.CancelPenaltyAmount)
                ) && 
                (
                    CostMinimum == other.CostMinimum ||
                    
                    CostMinimum.Equals(other.CostMinimum)
                ) && 
                (
                    CostPerMile == other.CostPerMile ||
                    
                    CostPerMile.Equals(other.CostPerMile)
                ) && 
                (
                    CostPerMinute == other.CostPerMinute ||
                    
                    CostPerMinute.Equals(other.CostPerMinute)
                ) && 
                (
                    Currency == other.Currency ||
                    Currency != null &&
                    Currency.Equals(other.Currency)
                ) && 
                (
                    TrustAndService == other.TrustAndService ||
                    
                    TrustAndService.Equals(other.TrustAndService)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BaseCharge.GetHashCode();
                    
                    hashCode = hashCode * 59 + CancelPenaltyAmount.GetHashCode();
                    
                    hashCode = hashCode * 59 + CostMinimum.GetHashCode();
                    
                    hashCode = hashCode * 59 + CostPerMile.GetHashCode();
                    
                    hashCode = hashCode * 59 + CostPerMinute.GetHashCode();
                    if (Currency != null)
                    hashCode = hashCode * 59 + Currency.GetHashCode();
                    
                    hashCode = hashCode * 59 + TrustAndService.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PricingDetails left, PricingDetails right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PricingDetails left, PricingDetails right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
