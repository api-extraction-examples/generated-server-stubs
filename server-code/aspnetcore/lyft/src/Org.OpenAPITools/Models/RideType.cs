/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class RideType : IEquatable<RideType>
    {
        /// <summary>
        /// A human readable description of the ride type
        /// </summary>
        /// <value>A human readable description of the ride type</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// The URL of an image representing this ride type
        /// </summary>
        /// <value>The URL of an image representing this ride type</value>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets PricingDetails
        /// </summary>
        [DataMember(Name="pricing_details", EmitDefaultValue=false)]
        public PricingDetails PricingDetails { get; set; }

        /// <summary>
        /// Gets or Sets VarRideType
        /// </summary>
        [DataMember(Name="ride_type", EmitDefaultValue=true)]
        public RideTypeEnum VarRideType { get; set; }

        /// <summary>
        /// Gets or Sets ScheduledPricingDetails
        /// </summary>
        [DataMember(Name="scheduled_pricing_details", EmitDefaultValue=false)]
        public PricingDetails ScheduledPricingDetails { get; set; }

        /// <summary>
        /// The maximum number of seats available for rides requested with this ride type
        /// </summary>
        /// <value>The maximum number of seats available for rides requested with this ride type</value>
        [DataMember(Name="seats", EmitDefaultValue=true)]
        public int Seats { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RideType {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  PricingDetails: ").Append(PricingDetails).Append("\n");
            sb.Append("  VarRideType: ").Append(VarRideType).Append("\n");
            sb.Append("  ScheduledPricingDetails: ").Append(ScheduledPricingDetails).Append("\n");
            sb.Append("  Seats: ").Append(Seats).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RideType)obj);
        }

        /// <summary>
        /// Returns true if RideType instances are equal
        /// </summary>
        /// <param name="other">Instance of RideType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RideType other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    PricingDetails == other.PricingDetails ||
                    PricingDetails != null &&
                    PricingDetails.Equals(other.PricingDetails)
                ) && 
                (
                    VarRideType == other.VarRideType ||
                    
                    VarRideType.Equals(other.VarRideType)
                ) && 
                (
                    ScheduledPricingDetails == other.ScheduledPricingDetails ||
                    ScheduledPricingDetails != null &&
                    ScheduledPricingDetails.Equals(other.ScheduledPricingDetails)
                ) && 
                (
                    Seats == other.Seats ||
                    
                    Seats.Equals(other.Seats)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    if (PricingDetails != null)
                    hashCode = hashCode * 59 + PricingDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarRideType.GetHashCode();
                    if (ScheduledPricingDetails != null)
                    hashCode = hashCode * 59 + ScheduledPricingDetails.GetHashCode();
                    
                    hashCode = hashCode * 59 + Seats.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RideType left, RideType right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RideType left, RideType right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
