/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Details about why a request failed, such as missing or invalid parameters
    /// </summary>
    [DataContract]
    public partial class RideRequestError : IEquatable<RideRequestError>
    {
        /// <summary>
        /// A token that confirms the user has accepted current Prime Time and/or fixed price charges
        /// </summary>
        /// <value>A token that confirms the user has accepted current Prime Time and/or fixed price charges</value>
        [DataMember(Name="cost_token", EmitDefaultValue=false)]
        public string CostToken { get; set; }

        /// <summary>
        /// A \&quot;slug\&quot; that serves as the error code (eg. \&quot;bad_parameter\&quot;)
        /// </summary>
        /// <value>A \&quot;slug\&quot; that serves as the error code (eg. \&quot;bad_parameter\&quot;)</value>
        [Required]
        [DataMember(Name="error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// A user-friendly description of the error (appropriate to show to an end-user)
        /// </summary>
        /// <value>A user-friendly description of the error (appropriate to show to an end-user)</value>
        [DataMember(Name="error_description", EmitDefaultValue=false)]
        public string ErrorDescription { get; set; }

        /// <summary>
        /// Gets or Sets ErrorDetail
        /// </summary>
        [DataMember(Name="error_detail", EmitDefaultValue=false)]
        public List<ErrorDetail> ErrorDetail { get; set; }

        /// <summary>
        /// When a user must go through another flow before requesting a ride, this URI specifies which flow to use (e.g. an account challenge flow in a web view)
        /// </summary>
        /// <value>When a user must go through another flow before requesting a ride, this URI specifies which flow to use (e.g. an account challenge flow in a web view)</value>
        [DataMember(Name="error_uri", EmitDefaultValue=false)]
        public string ErrorUri { get; set; }

        /// <summary>
        /// A token that confirms the user has accepted current Prime Time charges (Deprecated)
        /// </summary>
        /// <value>A token that confirms the user has accepted current Prime Time charges (Deprecated)</value>
        [DataMember(Name="primetime_confirmation_token", EmitDefaultValue=false)]
        public string PrimetimeConfirmationToken { get; set; }

        /// <summary>
        /// Current Prime Time multiplier (eg. if primetime_percentage is 100%, primetime_multiplier will be 2.0)
        /// </summary>
        /// <value>Current Prime Time multiplier (eg. if primetime_percentage is 100%, primetime_multiplier will be 2.0)</value>
        [DataMember(Name="primetime_multiplier", EmitDefaultValue=true)]
        public float PrimetimeMultiplier { get; set; }

        /// <summary>
        /// Current Prime Time percentage
        /// </summary>
        /// <value>Current Prime Time percentage</value>
        [DataMember(Name="primetime_percentage", EmitDefaultValue=false)]
        public string PrimetimePercentage { get; set; }

        /// <summary>
        /// Validity of the token in seconds
        /// </summary>
        /// <value>Validity of the token in seconds</value>
        [DataMember(Name="token_duration", EmitDefaultValue=false)]
        public string TokenDuration { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class RideRequestError {\n");
            sb.Append("  CostToken: ").Append(CostToken).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  ErrorDescription: ").Append(ErrorDescription).Append("\n");
            sb.Append("  ErrorDetail: ").Append(ErrorDetail).Append("\n");
            sb.Append("  ErrorUri: ").Append(ErrorUri).Append("\n");
            sb.Append("  PrimetimeConfirmationToken: ").Append(PrimetimeConfirmationToken).Append("\n");
            sb.Append("  PrimetimeMultiplier: ").Append(PrimetimeMultiplier).Append("\n");
            sb.Append("  PrimetimePercentage: ").Append(PrimetimePercentage).Append("\n");
            sb.Append("  TokenDuration: ").Append(TokenDuration).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((RideRequestError)obj);
        }

        /// <summary>
        /// Returns true if RideRequestError instances are equal
        /// </summary>
        /// <param name="other">Instance of RideRequestError to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(RideRequestError other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CostToken == other.CostToken ||
                    CostToken != null &&
                    CostToken.Equals(other.CostToken)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    ErrorDescription == other.ErrorDescription ||
                    ErrorDescription != null &&
                    ErrorDescription.Equals(other.ErrorDescription)
                ) && 
                (
                    ErrorDetail == other.ErrorDetail ||
                    ErrorDetail != null &&
                    other.ErrorDetail != null &&
                    ErrorDetail.SequenceEqual(other.ErrorDetail)
                ) && 
                (
                    ErrorUri == other.ErrorUri ||
                    ErrorUri != null &&
                    ErrorUri.Equals(other.ErrorUri)
                ) && 
                (
                    PrimetimeConfirmationToken == other.PrimetimeConfirmationToken ||
                    PrimetimeConfirmationToken != null &&
                    PrimetimeConfirmationToken.Equals(other.PrimetimeConfirmationToken)
                ) && 
                (
                    PrimetimeMultiplier == other.PrimetimeMultiplier ||
                    
                    PrimetimeMultiplier.Equals(other.PrimetimeMultiplier)
                ) && 
                (
                    PrimetimePercentage == other.PrimetimePercentage ||
                    PrimetimePercentage != null &&
                    PrimetimePercentage.Equals(other.PrimetimePercentage)
                ) && 
                (
                    TokenDuration == other.TokenDuration ||
                    TokenDuration != null &&
                    TokenDuration.Equals(other.TokenDuration)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CostToken != null)
                    hashCode = hashCode * 59 + CostToken.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    if (ErrorDescription != null)
                    hashCode = hashCode * 59 + ErrorDescription.GetHashCode();
                    if (ErrorDetail != null)
                    hashCode = hashCode * 59 + ErrorDetail.GetHashCode();
                    if (ErrorUri != null)
                    hashCode = hashCode * 59 + ErrorUri.GetHashCode();
                    if (PrimetimeConfirmationToken != null)
                    hashCode = hashCode * 59 + PrimetimeConfirmationToken.GetHashCode();
                    
                    hashCode = hashCode * 59 + PrimetimeMultiplier.GetHashCode();
                    if (PrimetimePercentage != null)
                    hashCode = hashCode * 59 + PrimetimePercentage.GetHashCode();
                    if (TokenDuration != null)
                    hashCode = hashCode * 59 + TokenDuration.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(RideRequestError left, RideRequestError right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(RideRequestError left, RideRequestError right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
