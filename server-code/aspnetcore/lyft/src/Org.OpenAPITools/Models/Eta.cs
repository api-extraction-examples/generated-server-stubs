/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Estimated Time of Arrival
    /// </summary>
    [DataContract]
    public partial class Eta : IEquatable<Eta>
    {
        /// <summary>
        /// A human readable description of the ride type
        /// </summary>
        /// <value>A human readable description of the ride type</value>
        [DataMember(Name="display_name", EmitDefaultValue=false)]
        public string DisplayName { get; set; }

        /// <summary>
        /// Estimated seconds for a driver to arrive
        /// </summary>
        /// <value>Estimated seconds for a driver to arrive</value>
        [DataMember(Name="eta_seconds", EmitDefaultValue=true)]
        public int EtaSeconds { get; set; }

        /// <summary>
        /// Estimated upper bound of seconds for a driver to arrive
        /// </summary>
        /// <value>Estimated upper bound of seconds for a driver to arrive</value>
        [DataMember(Name="eta_seconds_max", EmitDefaultValue=true)]
        public int EtaSecondsMax { get; set; }

        /// <summary>
        /// The validity of the ETA estimate returned
        /// </summary>
        /// <value>The validity of the ETA estimate returned</value>
        [DataMember(Name="is_valid_estimate", EmitDefaultValue=true)]
        public bool IsValidEstimate { get; set; }

        /// <summary>
        /// Gets or Sets RideType
        /// </summary>
        [DataMember(Name="ride_type", EmitDefaultValue=true)]
        public RideTypeEnum RideType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Eta {\n");
            sb.Append("  DisplayName: ").Append(DisplayName).Append("\n");
            sb.Append("  EtaSeconds: ").Append(EtaSeconds).Append("\n");
            sb.Append("  EtaSecondsMax: ").Append(EtaSecondsMax).Append("\n");
            sb.Append("  IsValidEstimate: ").Append(IsValidEstimate).Append("\n");
            sb.Append("  RideType: ").Append(RideType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Eta)obj);
        }

        /// <summary>
        /// Returns true if Eta instances are equal
        /// </summary>
        /// <param name="other">Instance of Eta to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Eta other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DisplayName == other.DisplayName ||
                    DisplayName != null &&
                    DisplayName.Equals(other.DisplayName)
                ) && 
                (
                    EtaSeconds == other.EtaSeconds ||
                    
                    EtaSeconds.Equals(other.EtaSeconds)
                ) && 
                (
                    EtaSecondsMax == other.EtaSecondsMax ||
                    
                    EtaSecondsMax.Equals(other.EtaSecondsMax)
                ) && 
                (
                    IsValidEstimate == other.IsValidEstimate ||
                    
                    IsValidEstimate.Equals(other.IsValidEstimate)
                ) && 
                (
                    RideType == other.RideType ||
                    
                    RideType.Equals(other.RideType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DisplayName != null)
                    hashCode = hashCode * 59 + DisplayName.GetHashCode();
                    
                    hashCode = hashCode * 59 + EtaSeconds.GetHashCode();
                    
                    hashCode = hashCode * 59 + EtaSecondsMax.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsValidEstimate.GetHashCode();
                    
                    hashCode = hashCode * 59 + RideType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Eta left, Eta right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Eta left, Eta right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
