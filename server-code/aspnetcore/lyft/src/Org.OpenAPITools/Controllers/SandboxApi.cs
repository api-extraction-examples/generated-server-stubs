/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class SandboxApiController : ControllerBase
    { 
        /// <summary>
        /// Preset Prime Time percentage
        /// </summary>
        /// <remarks>Preset a Prime Time percentage in the region surrounding the specified location. This Prime Time percentage will be applied when requesting cost, or when requesting a ride in sandbox mode. </remarks>
        /// <param name="request">Prime Time to be preset in the region surrounding the lat, lng</param>
        /// <response code="204">Successfully applied Prime Time in sandbox</response>
        /// <response code="400">Validation error occurred</response>
        [HttpPut]
        [Route("/v1/sandbox/primetime")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetPrimeTime")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Validation error occurred")]
        public virtual IActionResult SetPrimeTime([FromBody]SandboxPrimetime request)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Propagate ride through ride status
        /// </summary>
        /// <remarks>Propagate a sandbox-ride through various ride status </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <param name="request">status to propagate the ride into</param>
        /// <response code="200">An object with the Ride ID and the new status</response>
        /// <response code="400">Validation error occurred</response>
        /// <response code="403">User or client does not have permission to complete this request</response>
        [HttpPut]
        [Route("/v1/sandbox/rides/{id}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRideStatus")]
        [SwaggerResponse(statusCode: 200, type: typeof(SandboxRideUpdate), description: "An object with the Ride ID and the new status")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Validation error occurred")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request")]
        public virtual IActionResult SetRideStatus([FromRoute (Name = "id")][Required]string id, [FromBody]SandboxRideStatus request)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SandboxRideUpdate));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ride_id\" : 123456789,\n  \"status\" : \"accepted\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SandboxRideUpdate>(exampleJson)
            : default(SandboxRideUpdate);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Driver availability for processing ride request
        /// </summary>
        /// <remarks>Set driver availability for the provided ride_type in the city/region surrounding the specified location </remarks>
        /// <param name="rideType"></param>
        /// <param name="request">Driver availability to be preset in the region surrounding the lat, lng</param>
        /// <response code="204">Successfully set driver availability in sandbox</response>
        /// <response code="400">Validation error occurred</response>
        /// <response code="404">ride_type provided in the path is not supported in the current area</response>
        [HttpPut]
        [Route("/v1/sandbox/ridetypes/{ride_type}")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRideTypeAvailability")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Validation error occurred")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiError), description: "ride_type provided in the path is not supported in the current area")]
        public virtual IActionResult SetRideTypeAvailability([FromRoute (Name = "ride_type")][Required]string rideType, [FromBody]SandboxDriverAvailability request)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Preset types of rides for sandbox
        /// </summary>
        /// <remarks>The sandbox-ridetypes endpoint allows you to preset the ridetypes in the region surrounding the specified latitude and longitude to allow testing different scenarios </remarks>
        /// <param name="request">Ridetypes to be preset in the region surrounding the lat, lng</param>
        /// <response code="200">An object listing the ridetypes at a given location</response>
        /// <response code="400">Validation error occurred</response>
        [HttpPut]
        [Route("/v1/sandbox/ridetypes")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRideTypes")]
        [SwaggerResponse(statusCode: 200, type: typeof(SandboxRideType), description: "An object listing the ridetypes at a given location")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "Validation error occurred")]
        public virtual IActionResult SetRideTypes([FromBody]SandboxRideType request)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(SandboxRideType));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"lat\" : 37.7833,\n  \"lng\" : -122.4167,\n  \"ride_types\" : [ \"lyft\", \"lyft_line\", \"lyft_plus\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<SandboxRideType>(exampleJson)
            : default(SandboxRideType);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
