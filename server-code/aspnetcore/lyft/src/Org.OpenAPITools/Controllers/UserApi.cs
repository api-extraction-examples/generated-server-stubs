/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Cancel a ongoing requested ride
        /// </summary>
        /// <remarks>Cancel a ongoing ride which was requested earlier by providing the ride id. </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <param name="request"></param>
        /// <response code="204">Successfully canceled the ride</response>
        /// <response code="400">Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired </response>
        /// <response code="403">User or client does not have permission to complete this request</response>
        /// <response code="404">No ride found with provided ride ID</response>
        /// <response code="409">You cannot cancel this ride</response>
        [HttpPost]
        [Route("/v1/rides/{id}/cancel")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CancelRide")]
        [SwaggerResponse(statusCode: 400, type: typeof(CancellationCostError), description: "Cancellation token required  * &#x60;cancel_confirmation_required&#x60;: a cancelation fee applies which the user must accept  * &#x60;invalid_cancel_confirmation&#x60;: provided token was invalid or expired ")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiError), description: "No ride found with provided ride ID")]
        [SwaggerResponse(statusCode: 409, type: typeof(ApiError), description: "You cannot cancel this ride")]
        public virtual IActionResult CancelRide([FromRoute (Name = "id")][Required]string id, [FromBody]CancellationRequest request)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(CancellationCostError));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiError));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ApiError));

            throw new NotImplementedException();
        }

        /// <summary>
        /// The user&#39;s general info
        /// </summary>
        /// <remarks>The v1 of this endpoint returns the user&#39;s ID, v2 will return more general info about the user. We require authentication for this endpoint, so we extract the user ID from the access token. </remarks>
        /// <response code="200">User ID was found and returned</response>
        [HttpGet]
        [Route("/v1/profile")]
        [ValidateModelState]
        [SwaggerOperation("GetProfile")]
        [SwaggerResponse(statusCode: 200, type: typeof(Profile), description: "User ID was found and returned")]
        public virtual IActionResult GetProfile()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Profile));
            string exampleJson = null;
            exampleJson = "{\n  \"has_taken_a_ride\" : true,\n  \"last_name\" : \"last_name\",\n  \"id\" : \"id\",\n  \"first_name\" : \"first_name\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Profile>(exampleJson)
            : default(Profile);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the ride detail of a given ride ID
        /// </summary>
        /// <remarks>Get the status of a ride along with information about the driver, vehicle and price of a given ride ID </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <response code="200">Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price </response>
        /// <response code="403">User or client does not have permission to complete this request</response>
        /// <response code="404">No ride found with provided ride ID</response>
        [HttpGet]
        [Route("/v1/rides/{id}")]
        [ValidateModelState]
        [SwaggerOperation("GetRide")]
        [SwaggerResponse(statusCode: 200, type: typeof(RideDetail), description: "Detailed ride information including ride status, driver information, passenger information, vehicle information, location information and price ")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiError), description: "No ride found with provided ride ID")]
        public virtual IActionResult GetRide([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RideDetail));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"beacon_color\" : \"#FFFFFF\",\n  \"destination\" : {\n    \"address\" : \"987 Second St, Anytown, CA\",\n    \"lat\" : 36.9453452,\n    \"lng\" : -123.8642521\n  },\n  \"distance_miles\" : 16.2,\n  \"driver\" : {\n    \"first_name\" : \"Joe\",\n    \"image_url\" : \"http://example.com/lyft.png\",\n    \"phone_number\" : \"+15554445111\",\n    \"rating\" : \"4.9\"\n  },\n  \"dropoff\" : {\n    \"address\" : \"987 Second St, Anytown, CA\",\n    \"lat\" : 36.9453452,\n    \"lng\" : -123.8642521,\n    \"time\" : \"2015-09-24T23:28:25+00:00\"\n  },\n  \"duration_seconds\" : 1620,\n  \"line_items\" : [ {\n    \"amount\" : 500,\n    \"currency\" : \"USD\",\n    \"type\" : \"Ride\"\n  }, {\n    \"amount\" : 250,\n    \"currency\" : \"USD\",\n    \"type\" : \"Prime Time\"\n  }, {\n    \"amount\" : 155,\n    \"currency\" : \"USD\",\n    \"type\" : \"Service fee\"\n  } ],\n  \"location\" : {\n    \"address\" : \"987 Second St, Anytown, CA\",\n    \"lat\" : 36.9453452,\n    \"lng\" : -123.8642521\n  },\n  \"origin\" : {\n    \"address\" : \"123 Main St, Anytown, CA\",\n    \"lat\" : 36.9442175,\n    \"lng\" : -123.8679133\n  },\n  \"passenger\" : {\n    \"first_name\" : \"Jane\",\n    \"phone_number\" : \"+15554445000\",\n    \"user_id\" : \"776630198662493392\"\n  },\n  \"pickup\" : {\n    \"address\" : \"123 Main St, Anytown, CA\",\n    \"lat\" : 36.9442175,\n    \"lng\" : -123.8679133,\n    \"time\" : \"2015-09-24T23:27:25+00:00\"\n  },\n  \"price\" : {\n    \"amount\" : 905,\n    \"currency\" : \"USD\",\n    \"description\" : \"Total ride price\"\n  },\n  \"primetime_percentage\" : \"50%\",\n  \"requested_at\" : \"2015-09-24T23:26:25+00:00\",\n  \"ride_id\" : 123456789,\n  \"ride_profile\" : \"personal\",\n  \"ride_type\" : \"lyft\",\n  \"status\" : \"droppedOff\",\n  \"vehicle\" : {\n    \"color\" : \"black\",\n    \"image_url\" : \"http://example.com/lyft.png\",\n    \"license_plate\" : \"AAAAAAA\",\n    \"make\" : \"Audi\",\n    \"model\" : \"A4\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RideDetail>(exampleJson)
            : default(RideDetail);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get the receipt of the rides.
        /// </summary>
        /// <remarks>Get the receipt information of a processed ride by providing the ride id. Receipts will only be available to view once the payment has been processed. In the case of canceled ride, cancellation penalty is included if applicable. </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <response code="200">Detailed ride receipt information including cancel penalty if applicable.</response>
        /// <response code="403">User or client does not have permission to complete this request</response>
        /// <response code="404">No ride receipt found with provided ride ID</response>
        [HttpGet]
        [Route("/v1/rides/{id}/receipt")]
        [ValidateModelState]
        [SwaggerOperation("GetRideReceipt")]
        [SwaggerResponse(statusCode: 200, type: typeof(RideReceipt), description: "Detailed ride receipt information including cancel penalty if applicable.")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiError), description: "No ride receipt found with provided ride ID")]
        public virtual IActionResult GetRideReceipt([FromRoute (Name = "id")][Required]string id)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RideReceipt));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"charges\" : [ {\n    \"amount\" : 500,\n    \"currency\" : \"USD\",\n    \"payment_method\" : \"Card\"\n  }, {\n    \"amount\" : 405,\n    \"currency\" : \"USD\",\n    \"payment_method\" : \"Lyft Credit\"\n  } ],\n  \"line_items\" : [ {\n    \"amount\" : 500,\n    \"currency\" : \"USD\",\n    \"type\" : \"Ride\"\n  }, {\n    \"amount\" : 250,\n    \"currency\" : \"USD\",\n    \"type\" : \"Prime Time\"\n  }, {\n    \"amount\" : 155,\n    \"currency\" : \"USD\",\n    \"type\" : \"Service fee\"\n  } ],\n  \"price\" : {\n    \"amount\" : 905,\n    \"currency\" : \"USD\",\n    \"description\" : \"Total ride price\"\n  },\n  \"requested_at\" : \"2015-09-24T23:26:25+00:00\",\n  \"ride_id\" : 123456789,\n  \"ride_profile\" : \"personal\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RideReceipt>(exampleJson)
            : default(RideReceipt);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List rides
        /// </summary>
        /// <remarks>Get a list of past &amp; current rides for this passenger. </remarks>
        /// <param name="startTime">Restrict to rides starting after this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 </param>
        /// <param name="endTime">Restrict to rides starting before this point in time. The earliest supported date is 2015-01-01T00:00:00+00:00 </param>
        /// <param name="limit">The maximum number of rides to return. The default limit is 10 if not specified. The maximum allowed value is 50, an integer greater that 50 will return at most 50 results. </param>
        /// <response code="200">An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;. </response>
        /// <response code="400">A validation error occurred</response>
        [HttpGet]
        [Route("/v1/rides")]
        [ValidateModelState]
        [SwaggerOperation("GetRides")]
        [SwaggerResponse(statusCode: 200, type: typeof(RidesResponse), description: "An object with an array of up to &#x60;limit&#x60; rides taken by the user between &#x60;start_time&#x60; and &#x60;end_time&#x60;. ")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "A validation error occurred")]
        public virtual IActionResult GetRides([FromQuery (Name = "start_time")][Required()]DateTime startTime, [FromQuery (Name = "end_time")]DateTime? endTime, [FromQuery (Name = "limit")][Range(0, 50)]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RidesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"ride_history\" : [ {\n    \"beacon_color\" : \"#FFFFFF\",\n    \"destination\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521\n    },\n    \"distance_miles\" : 16.2,\n    \"driver\" : {\n      \"first_name\" : \"Joe\",\n      \"image_url\" : \"http://example.com/lyft.png\",\n      \"phone_number\" : \"+15554445111\",\n      \"rating\" : \"4.9\"\n    },\n    \"dropoff\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521,\n      \"time\" : \"2015-09-24T23:28:25+00:00\"\n    },\n    \"duration_seconds\" : 1620,\n    \"line_items\" : [ {\n      \"amount\" : 500,\n      \"currency\" : \"USD\",\n      \"type\" : \"Ride\"\n    }, {\n      \"amount\" : 250,\n      \"currency\" : \"USD\",\n      \"type\" : \"Prime Time\"\n    }, {\n      \"amount\" : 155,\n      \"currency\" : \"USD\",\n      \"type\" : \"Service fee\"\n    } ],\n    \"location\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521\n    },\n    \"origin\" : {\n      \"address\" : \"123 Main St, Anytown, CA\",\n      \"lat\" : 36.9442175,\n      \"lng\" : -123.8679133\n    },\n    \"passenger\" : {\n      \"first_name\" : \"Jane\",\n      \"phone_number\" : \"+15554445000\",\n      \"user_id\" : \"776630198662493392\"\n    },\n    \"pickup\" : {\n      \"address\" : \"123 Main St, Anytown, CA\",\n      \"lat\" : 36.9442175,\n      \"lng\" : -123.8679133,\n      \"time\" : \"2015-09-24T23:27:25+00:00\"\n    },\n    \"price\" : {\n      \"amount\" : 905,\n      \"currency\" : \"USD\",\n      \"description\" : \"Total ride price\"\n    },\n    \"primetime_percentage\" : \"50%\",\n    \"requested_at\" : \"2015-09-24T23:26:25+00:00\",\n    \"ride_id\" : 123456789,\n    \"ride_profile\" : \"personal\",\n    \"ride_type\" : \"lyft\",\n    \"status\" : \"droppedOff\",\n    \"vehicle\" : {\n      \"color\" : \"black\",\n      \"image_url\" : \"http://example.com/lyft.png\",\n      \"license_plate\" : \"AAAAAAA\",\n      \"make\" : \"Audi\",\n      \"model\" : \"A4\"\n    }\n  }, {\n    \"beacon_color\" : \"#FFFFFF\",\n    \"destination\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521\n    },\n    \"distance_miles\" : 16.2,\n    \"driver\" : {\n      \"first_name\" : \"Joe\",\n      \"image_url\" : \"http://example.com/lyft.png\",\n      \"phone_number\" : \"+15554445111\",\n      \"rating\" : \"4.9\"\n    },\n    \"dropoff\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521,\n      \"time\" : \"2015-09-24T23:28:25+00:00\"\n    },\n    \"duration_seconds\" : 1620,\n    \"line_items\" : [ {\n      \"amount\" : 500,\n      \"currency\" : \"USD\",\n      \"type\" : \"Ride\"\n    }, {\n      \"amount\" : 250,\n      \"currency\" : \"USD\",\n      \"type\" : \"Prime Time\"\n    }, {\n      \"amount\" : 155,\n      \"currency\" : \"USD\",\n      \"type\" : \"Service fee\"\n    } ],\n    \"location\" : {\n      \"address\" : \"987 Second St, Anytown, CA\",\n      \"lat\" : 36.9453452,\n      \"lng\" : -123.8642521\n    },\n    \"origin\" : {\n      \"address\" : \"123 Main St, Anytown, CA\",\n      \"lat\" : 36.9442175,\n      \"lng\" : -123.8679133\n    },\n    \"passenger\" : {\n      \"first_name\" : \"Jane\",\n      \"phone_number\" : \"+15554445000\",\n      \"user_id\" : \"776630198662493392\"\n    },\n    \"pickup\" : {\n      \"address\" : \"123 Main St, Anytown, CA\",\n      \"lat\" : 36.9442175,\n      \"lng\" : -123.8679133,\n      \"time\" : \"2015-09-24T23:27:25+00:00\"\n    },\n    \"price\" : {\n      \"amount\" : 905,\n      \"currency\" : \"USD\",\n      \"description\" : \"Total ride price\"\n    },\n    \"primetime_percentage\" : \"50%\",\n    \"requested_at\" : \"2015-09-24T23:26:25+00:00\",\n    \"ride_id\" : 123456789,\n    \"ride_profile\" : \"personal\",\n    \"ride_type\" : \"lyft\",\n    \"status\" : \"droppedOff\",\n    \"vehicle\" : {\n      \"color\" : \"black\",\n      \"image_url\" : \"http://example.com/lyft.png\",\n      \"license_plate\" : \"AAAAAAA\",\n      \"make\" : \"Audi\",\n      \"model\" : \"A4\"\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RidesResponse>(exampleJson)
            : default(RidesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Request a Lyft
        /// </summary>
        /// <remarks>Request a Lyft come pick you up at the given location. </remarks>
        /// <param name="request">Ride request information</param>
        /// <response code="201">An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details.</response>
        /// <response code="400">The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field </response>
        /// <response code="403">User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app </response>
        /// <response code="409">The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride </response>
        [HttpPost]
        [Route("/v1/rides")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("NewRide")]
        [SwaggerResponse(statusCode: 201, type: typeof(RideRequest), description: "An object with high level ride information. Use &#x60;GET /v1/rides/{id}&#x60; for more details.")]
        [SwaggerResponse(statusCode: 400, type: typeof(RideRequestError), description: "The &#39;error&#39; field can be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;no_service_in_area&#x60;: origin is not within a Lyft service area  * &#x60;ridetype_unavailable_in_region&#x60;: ridetype not supported at origin  * &#x60;primetime_confirmation_required&#x60;: user must accept primetime. A primetime confirmation token and details will be included in the response  * &#x60;invalid_primetime_confirmation&#x60;: supplied token is invalid or expired  * &#x60;destination_prohibited&#x60;: Lyft is not allowed to drop off at that destination (e.g. some airports).  User-displayable details in the &#39;error_description&#39; field  * &#x60;client_error&#x60;: an uncategorized error. Details in the &#39;error_description&#39; field ")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request. Specific errors include:  * &#x60;user_payment_required&#x60;: The user does not have a valid payment method on file.  They must use the Lyft app to add or update one.  * &#x60;account_disabled&#x60;: The user&#39;s account has been suspended, and they must contact Lyft support.  * &#x60;user_in_driver_mode&#x60;: The user is logged in as a driver and can&#39;t request rides until they log out  * &#x60;verified_phone_required&#x60;: The user has not provided or verified their phone number.  They can add one in the Lyft app ")]
        [SwaggerResponse(statusCode: 409, type: typeof(ApiError), description: "The &#39;error&#39; field will be one of the following:  * &#x60;no_drivers_available&#x60;: No drivers are available right now  * &#x60;user_already_in_ride&#x60;: User cannot request a ride while in a ride ")]
        public virtual IActionResult NewRide([FromBody]Ride request)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(RideRequest));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(RideRequestError));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ApiError));
            string exampleJson = null;
            exampleJson = "{\n  \"destination\" : {\n    \"address\" : \"123 Main St, Anytown, CA\",\n    \"lat\" : 36.9442175,\n    \"lng\" : -123.8679133\n  },\n  \"origin\" : {\n    \"address\" : \"123 Main St, Anytown, CA\",\n    \"lat\" : 36.9442175,\n    \"lng\" : -123.8679133\n  },\n  \"passenger\" : {\n    \"first_name\" : \"Jane\",\n    \"image_url\" : \"https://public-api.lyft.com/static/images/user.png\",\n    \"rating\" : 4.9,\n    \"user_id\" : \"776630198662493392\"\n  },\n  \"ride_id\" : 123456789,\n  \"status\" : \"pending\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RideRequest>(exampleJson)
            : default(RideRequest);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update the destination of the ride
        /// </summary>
        /// <remarks>Add or update the ride&#39;s destination. Note that the ride must still be active (not droppedOff or canceled), and that destinations on Lyft Line rides can not be changed. </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <param name="request">The coordinates and optional address of the destination</param>
        /// <response code="200">Successfully updated the destination. Returns the new destination.</response>
        /// <response code="400">The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed </response>
        /// <response code="403">User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;) </response>
        /// <response code="404">No ride found with provided ride ID</response>
        [HttpPut]
        [Route("/v1/rides/{id}/destination")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRideDestination")]
        [SwaggerResponse(statusCode: 200, type: typeof(Location), description: "Successfully updated the destination. Returns the new destination.")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;invalid_destination&#x60;: Destination is generally invalid (eg. not in a Lyft service area)  * &#x60;destination_prohibited&#x60;: Lyft drop-offs are not permitted at this location (eg. some airports).  The &#39;error_description&#39; field will contain an explaination suitable to display to the user.  * &#x60;ride_is_lyft_line&#x60;: Cannot change the destination on Line rides  * &#x60;ride_is_finished&#x60;: Ride has already been completed ")]
        [SwaggerResponse(statusCode: 403, type: typeof(ApiError), description: "User or client does not have permission to complete this request (&#x60;ride_does_not_belong_to_user&#x60;) ")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiError), description: "No ride found with provided ride ID")]
        public virtual IActionResult SetRideDestination([FromRoute (Name = "id")][Required]string id, [FromBody]Location request)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Location));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ApiError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiError));
            string exampleJson = null;
            exampleJson = "null";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Location>(exampleJson)
            : default(Location);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Add the passenger&#39;s rating, feedback, and tip
        /// </summary>
        /// <remarks>Add the passenger&#39;s 1 to 5 star rating of the ride, optional written feedback, and optional tip amount in minor units and currency. The ride must already be dropped off, and ratings must be given within 24 hours of drop off. For purposes of display, 5 is considered the default rating. When this endpoint is successfully called, payment processing will begin. </remarks>
        /// <param name="id">The ID of the ride</param>
        /// <param name="request">The rating and optional feedback</param>
        /// <response code="204">Successfully added the rating</response>
        /// <response code="400">The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted </response>
        /// <response code="409">The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status) </response>
        [HttpPut]
        [Route("/v1/rides/{id}/rating")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("SetRideRating")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiError), description: "The &#39;error&#39; field will be one of the following:  * &#x60;bad_parameter&#x60;: A validation error occurred  * &#x60;user_cannot_rate_this_ride&#x60;: Rides can only be rated once, within 24 hours of drop-off, and before  the user starts another ride  * &#x60;tip_too_large&#x60;: tip amount is too large for this ride  * &#x60;tip_currency_not_accepted&#x60;: That tip currency is not accepted ")]
        [SwaggerResponse(statusCode: 409, type: typeof(ApiError), description: "The &#39;error&#39; field will be:  * &#x60;ride_not_finished&#x60;: Ride is still in progress (not yet in the droppedOff status) ")]
        public virtual IActionResult SetRideRating([FromRoute (Name = "id")][Required]string id, [FromBody]RatingRequest request)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiError));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ApiError));

            throw new NotImplementedException();
        }
    }
}
