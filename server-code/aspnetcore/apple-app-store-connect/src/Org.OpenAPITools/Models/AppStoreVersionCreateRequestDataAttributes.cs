/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppStoreVersionCreateRequestDataAttributes : IEquatable<AppStoreVersionCreateRequestDataAttributes>
    {
        /// <summary>
        /// Gets or Sets Copyright
        /// </summary>
        [DataMember(Name="copyright", EmitDefaultValue=false)]
        public string Copyright { get; set; }

        /// <summary>
        /// Gets or Sets EarliestReleaseDate
        /// </summary>
        [DataMember(Name="earliestReleaseDate", EmitDefaultValue=false)]
        public DateTime EarliestReleaseDate { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [Required]
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public Platform Platform { get; set; }


        /// <summary>
        /// Gets or Sets ReleaseType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ReleaseTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ReleaseTypeEnum
        {
            
            /// <summary>
            /// Enum MANUALEnum for MANUAL
            /// </summary>
            [EnumMember(Value = "MANUAL")]
            MANUALEnum = 1,
            
            /// <summary>
            /// Enum AFTERAPPROVALEnum for AFTER_APPROVAL
            /// </summary>
            [EnumMember(Value = "AFTER_APPROVAL")]
            AFTERAPPROVALEnum = 2,
            
            /// <summary>
            /// Enum SCHEDULEDEnum for SCHEDULED
            /// </summary>
            [EnumMember(Value = "SCHEDULED")]
            SCHEDULEDEnum = 3
        }

        /// <summary>
        /// Gets or Sets ReleaseType
        /// </summary>
        [DataMember(Name="releaseType", EmitDefaultValue=true)]
        public ReleaseTypeEnum ReleaseType { get; set; }

        /// <summary>
        /// Gets or Sets UsesIdfa
        /// </summary>
        [DataMember(Name="usesIdfa", EmitDefaultValue=true)]
        public bool UsesIdfa { get; set; }

        /// <summary>
        /// Gets or Sets VersionString
        /// </summary>
        [Required]
        [DataMember(Name="versionString", EmitDefaultValue=false)]
        public string VersionString { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppStoreVersionCreateRequestDataAttributes {\n");
            sb.Append("  Copyright: ").Append(Copyright).Append("\n");
            sb.Append("  EarliestReleaseDate: ").Append(EarliestReleaseDate).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ReleaseType: ").Append(ReleaseType).Append("\n");
            sb.Append("  UsesIdfa: ").Append(UsesIdfa).Append("\n");
            sb.Append("  VersionString: ").Append(VersionString).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppStoreVersionCreateRequestDataAttributes)obj);
        }

        /// <summary>
        /// Returns true if AppStoreVersionCreateRequestDataAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of AppStoreVersionCreateRequestDataAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreVersionCreateRequestDataAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Copyright == other.Copyright ||
                    Copyright != null &&
                    Copyright.Equals(other.Copyright)
                ) && 
                (
                    EarliestReleaseDate == other.EarliestReleaseDate ||
                    EarliestReleaseDate != null &&
                    EarliestReleaseDate.Equals(other.EarliestReleaseDate)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                ) && 
                (
                    ReleaseType == other.ReleaseType ||
                    
                    ReleaseType.Equals(other.ReleaseType)
                ) && 
                (
                    UsesIdfa == other.UsesIdfa ||
                    
                    UsesIdfa.Equals(other.UsesIdfa)
                ) && 
                (
                    VersionString == other.VersionString ||
                    VersionString != null &&
                    VersionString.Equals(other.VersionString)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Copyright != null)
                    hashCode = hashCode * 59 + Copyright.GetHashCode();
                    if (EarliestReleaseDate != null)
                    hashCode = hashCode * 59 + EarliestReleaseDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReleaseType.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesIdfa.GetHashCode();
                    if (VersionString != null)
                    hashCode = hashCode * 59 + VersionString.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppStoreVersionCreateRequestDataAttributes left, AppStoreVersionCreateRequestDataAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppStoreVersionCreateRequestDataAttributes left, AppStoreVersionCreateRequestDataAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
