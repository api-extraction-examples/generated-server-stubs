/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppResponseIncludedInner : IEquatable<AppResponseIncludedInner>
    {
        /// <summary>
        /// Gets or Sets Attributes
        /// </summary>
        [DataMember(Name="attributes", EmitDefaultValue=false)]
        public PerfPowerMetricAttributes Attributes { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [Required]
        [DataMember(Name="links", EmitDefaultValue=false)]
        public ResourceLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets Relationships
        /// </summary>
        [DataMember(Name="relationships", EmitDefaultValue=false)]
        public GameCenterEnabledVersionRelationships Relationships { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum BetaGroupsEnum for betaGroups
            /// </summary>
            [EnumMember(Value = "betaGroups")]
            BetaGroupsEnum = 1,
            
            /// <summary>
            /// Enum AppStoreVersionsEnum for appStoreVersions
            /// </summary>
            [EnumMember(Value = "appStoreVersions")]
            AppStoreVersionsEnum = 2,
            
            /// <summary>
            /// Enum PreReleaseVersionsEnum for preReleaseVersions
            /// </summary>
            [EnumMember(Value = "preReleaseVersions")]
            PreReleaseVersionsEnum = 3,
            
            /// <summary>
            /// Enum BetaAppLocalizationsEnum for betaAppLocalizations
            /// </summary>
            [EnumMember(Value = "betaAppLocalizations")]
            BetaAppLocalizationsEnum = 4,
            
            /// <summary>
            /// Enum BuildsEnum for builds
            /// </summary>
            [EnumMember(Value = "builds")]
            BuildsEnum = 5,
            
            /// <summary>
            /// Enum BetaLicenseAgreementsEnum for betaLicenseAgreements
            /// </summary>
            [EnumMember(Value = "betaLicenseAgreements")]
            BetaLicenseAgreementsEnum = 6,
            
            /// <summary>
            /// Enum BetaAppReviewDetailsEnum for betaAppReviewDetails
            /// </summary>
            [EnumMember(Value = "betaAppReviewDetails")]
            BetaAppReviewDetailsEnum = 7,
            
            /// <summary>
            /// Enum AppInfosEnum for appInfos
            /// </summary>
            [EnumMember(Value = "appInfos")]
            AppInfosEnum = 8,
            
            /// <summary>
            /// Enum EndUserLicenseAgreementsEnum for endUserLicenseAgreements
            /// </summary>
            [EnumMember(Value = "endUserLicenseAgreements")]
            EndUserLicenseAgreementsEnum = 9,
            
            /// <summary>
            /// Enum AppPreOrdersEnum for appPreOrders
            /// </summary>
            [EnumMember(Value = "appPreOrders")]
            AppPreOrdersEnum = 10,
            
            /// <summary>
            /// Enum AppPricesEnum for appPrices
            /// </summary>
            [EnumMember(Value = "appPrices")]
            AppPricesEnum = 11,
            
            /// <summary>
            /// Enum TerritoriesEnum for territories
            /// </summary>
            [EnumMember(Value = "territories")]
            TerritoriesEnum = 12,
            
            /// <summary>
            /// Enum InAppPurchasesEnum for inAppPurchases
            /// </summary>
            [EnumMember(Value = "inAppPurchases")]
            InAppPurchasesEnum = 13,
            
            /// <summary>
            /// Enum GameCenterEnabledVersionsEnum for gameCenterEnabledVersions
            /// </summary>
            [EnumMember(Value = "gameCenterEnabledVersions")]
            GameCenterEnabledVersionsEnum = 14,
            
            /// <summary>
            /// Enum PerfPowerMetricsEnum for perfPowerMetrics
            /// </summary>
            [EnumMember(Value = "perfPowerMetrics")]
            PerfPowerMetricsEnum = 15
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [Required]
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppResponseIncludedInner {\n");
            sb.Append("  Attributes: ").Append(Attributes).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Relationships: ").Append(Relationships).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppResponseIncludedInner)obj);
        }

        /// <summary>
        /// Returns true if AppResponseIncludedInner instances are equal
        /// </summary>
        /// <param name="other">Instance of AppResponseIncludedInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppResponseIncludedInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Attributes == other.Attributes ||
                    Attributes != null &&
                    Attributes.Equals(other.Attributes)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Relationships == other.Relationships ||
                    Relationships != null &&
                    Relationships.Equals(other.Relationships)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Attributes != null)
                    hashCode = hashCode * 59 + Attributes.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Relationships != null)
                    hashCode = hashCode * 59 + Relationships.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppResponseIncludedInner left, AppResponseIncludedInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppResponseIncludedInner left, AppResponseIncludedInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
