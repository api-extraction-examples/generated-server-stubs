/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CapabilityOption : IEquatable<CapabilityOption>
    {
        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Enabled
        /// </summary>
        [DataMember(Name="enabled", EmitDefaultValue=true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// Gets or Sets EnabledByDefault
        /// </summary>
        [DataMember(Name="enabledByDefault", EmitDefaultValue=true)]
        public bool EnabledByDefault { get; set; }


        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<KeyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum KeyEnum
        {
            
            /// <summary>
            /// Enum XCODE5Enum for XCODE_5
            /// </summary>
            [EnumMember(Value = "XCODE_5")]
            XCODE5Enum = 1,
            
            /// <summary>
            /// Enum XCODE6Enum for XCODE_6
            /// </summary>
            [EnumMember(Value = "XCODE_6")]
            XCODE6Enum = 2,
            
            /// <summary>
            /// Enum COMPLETEPROTECTIONEnum for COMPLETE_PROTECTION
            /// </summary>
            [EnumMember(Value = "COMPLETE_PROTECTION")]
            COMPLETEPROTECTIONEnum = 3,
            
            /// <summary>
            /// Enum PROTECTEDUNLESSOPENEnum for PROTECTED_UNLESS_OPEN
            /// </summary>
            [EnumMember(Value = "PROTECTED_UNLESS_OPEN")]
            PROTECTEDUNLESSOPENEnum = 4,
            
            /// <summary>
            /// Enum PROTECTEDUNTILFIRSTUSERAUTHEnum for PROTECTED_UNTIL_FIRST_USER_AUTH
            /// </summary>
            [EnumMember(Value = "PROTECTED_UNTIL_FIRST_USER_AUTH")]
            PROTECTEDUNTILFIRSTUSERAUTHEnum = 5,
            
            /// <summary>
            /// Enum PRIMARYAPPCONSENTEnum for PRIMARY_APP_CONSENT
            /// </summary>
            [EnumMember(Value = "PRIMARY_APP_CONSENT")]
            PRIMARYAPPCONSENTEnum = 6
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public KeyEnum Key { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets SupportsWildcard
        /// </summary>
        [DataMember(Name="supportsWildcard", EmitDefaultValue=true)]
        public bool SupportsWildcard { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CapabilityOption {\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnabledByDefault: ").Append(EnabledByDefault).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  SupportsWildcard: ").Append(SupportsWildcard).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CapabilityOption)obj);
        }

        /// <summary>
        /// Returns true if CapabilityOption instances are equal
        /// </summary>
        /// <param name="other">Instance of CapabilityOption to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CapabilityOption other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Enabled == other.Enabled ||
                    
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    EnabledByDefault == other.EnabledByDefault ||
                    
                    EnabledByDefault.Equals(other.EnabledByDefault)
                ) && 
                (
                    Key == other.Key ||
                    
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    SupportsWildcard == other.SupportsWildcard ||
                    
                    SupportsWildcard.Equals(other.SupportsWildcard)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnabledByDefault.GetHashCode();
                    
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + SupportsWildcard.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CapabilityOption left, CapabilityOption right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CapabilityOption left, CapabilityOption right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
