/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeviceAttributes : IEquatable<DeviceAttributes>
    {
        /// <summary>
        /// Gets or Sets AddedDate
        /// </summary>
        [DataMember(Name="addedDate", EmitDefaultValue=false)]
        public DateTime AddedDate { get; set; }


        /// <summary>
        /// Gets or Sets DeviceClass
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<DeviceClassEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DeviceClassEnum
        {
            
            /// <summary>
            /// Enum APPLEWATCHEnum for APPLE_WATCH
            /// </summary>
            [EnumMember(Value = "APPLE_WATCH")]
            APPLEWATCHEnum = 1,
            
            /// <summary>
            /// Enum IPADEnum for IPAD
            /// </summary>
            [EnumMember(Value = "IPAD")]
            IPADEnum = 2,
            
            /// <summary>
            /// Enum IPHONEEnum for IPHONE
            /// </summary>
            [EnumMember(Value = "IPHONE")]
            IPHONEEnum = 3,
            
            /// <summary>
            /// Enum IPODEnum for IPOD
            /// </summary>
            [EnumMember(Value = "IPOD")]
            IPODEnum = 4,
            
            /// <summary>
            /// Enum APPLETVEnum for APPLE_TV
            /// </summary>
            [EnumMember(Value = "APPLE_TV")]
            APPLETVEnum = 5,
            
            /// <summary>
            /// Enum MACEnum for MAC
            /// </summary>
            [EnumMember(Value = "MAC")]
            MACEnum = 6
        }

        /// <summary>
        /// Gets or Sets DeviceClass
        /// </summary>
        [DataMember(Name="deviceClass", EmitDefaultValue=true)]
        public DeviceClassEnum DeviceClass { get; set; }

        /// <summary>
        /// Gets or Sets Model
        /// </summary>
        [DataMember(Name="model", EmitDefaultValue=false)]
        public string Model { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public BundleIdPlatform Platform { get; set; }


        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum ENABLEDEnum for ENABLED
            /// </summary>
            [EnumMember(Value = "ENABLED")]
            ENABLEDEnum = 1,
            
            /// <summary>
            /// Enum DISABLEDEnum for DISABLED
            /// </summary>
            [EnumMember(Value = "DISABLED")]
            DISABLEDEnum = 2
        }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Gets or Sets Udid
        /// </summary>
        [DataMember(Name="udid", EmitDefaultValue=false)]
        public string Udid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceAttributes {\n");
            sb.Append("  AddedDate: ").Append(AddedDate).Append("\n");
            sb.Append("  DeviceClass: ").Append(DeviceClass).Append("\n");
            sb.Append("  Model: ").Append(Model).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Udid: ").Append(Udid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DeviceAttributes)obj);
        }

        /// <summary>
        /// Returns true if DeviceAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AddedDate == other.AddedDate ||
                    AddedDate != null &&
                    AddedDate.Equals(other.AddedDate)
                ) && 
                (
                    DeviceClass == other.DeviceClass ||
                    
                    DeviceClass.Equals(other.DeviceClass)
                ) && 
                (
                    Model == other.Model ||
                    Model != null &&
                    Model.Equals(other.Model)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                ) && 
                (
                    Udid == other.Udid ||
                    Udid != null &&
                    Udid.Equals(other.Udid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AddedDate != null)
                    hashCode = hashCode * 59 + AddedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + DeviceClass.GetHashCode();
                    if (Model != null)
                    hashCode = hashCode * 59 + Model.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (Udid != null)
                    hashCode = hashCode * 59 + Udid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DeviceAttributes left, DeviceAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DeviceAttributes left, DeviceAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
