/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProfileAttributes : IEquatable<ProfileAttributes>
    {
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        [DataMember(Name="createdDate", EmitDefaultValue=false)]
        public DateTime CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public BundleIdPlatform Platform { get; set; }

        /// <summary>
        /// Gets or Sets ProfileContent
        /// </summary>
        [DataMember(Name="profileContent", EmitDefaultValue=false)]
        public string ProfileContent { get; set; }


        /// <summary>
        /// Gets or Sets ProfileState
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ProfileStateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProfileStateEnum
        {
            
            /// <summary>
            /// Enum ACTIVEEnum for ACTIVE
            /// </summary>
            [EnumMember(Value = "ACTIVE")]
            ACTIVEEnum = 1,
            
            /// <summary>
            /// Enum INVALIDEnum for INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALIDEnum = 2
        }

        /// <summary>
        /// Gets or Sets ProfileState
        /// </summary>
        [DataMember(Name="profileState", EmitDefaultValue=true)]
        public ProfileStateEnum ProfileState { get; set; }


        /// <summary>
        /// Gets or Sets ProfileType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ProfileTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProfileTypeEnum
        {
            
            /// <summary>
            /// Enum IOSAPPDEVELOPMENTEnum for IOS_APP_DEVELOPMENT
            /// </summary>
            [EnumMember(Value = "IOS_APP_DEVELOPMENT")]
            IOSAPPDEVELOPMENTEnum = 1,
            
            /// <summary>
            /// Enum IOSAPPSTOREEnum for IOS_APP_STORE
            /// </summary>
            [EnumMember(Value = "IOS_APP_STORE")]
            IOSAPPSTOREEnum = 2,
            
            /// <summary>
            /// Enum IOSAPPADHOCEnum for IOS_APP_ADHOC
            /// </summary>
            [EnumMember(Value = "IOS_APP_ADHOC")]
            IOSAPPADHOCEnum = 3,
            
            /// <summary>
            /// Enum IOSAPPINHOUSEEnum for IOS_APP_INHOUSE
            /// </summary>
            [EnumMember(Value = "IOS_APP_INHOUSE")]
            IOSAPPINHOUSEEnum = 4,
            
            /// <summary>
            /// Enum MACAPPDEVELOPMENTEnum for MAC_APP_DEVELOPMENT
            /// </summary>
            [EnumMember(Value = "MAC_APP_DEVELOPMENT")]
            MACAPPDEVELOPMENTEnum = 5,
            
            /// <summary>
            /// Enum MACAPPSTOREEnum for MAC_APP_STORE
            /// </summary>
            [EnumMember(Value = "MAC_APP_STORE")]
            MACAPPSTOREEnum = 6,
            
            /// <summary>
            /// Enum MACAPPDIRECTEnum for MAC_APP_DIRECT
            /// </summary>
            [EnumMember(Value = "MAC_APP_DIRECT")]
            MACAPPDIRECTEnum = 7,
            
            /// <summary>
            /// Enum TVOSAPPDEVELOPMENTEnum for TVOS_APP_DEVELOPMENT
            /// </summary>
            [EnumMember(Value = "TVOS_APP_DEVELOPMENT")]
            TVOSAPPDEVELOPMENTEnum = 8,
            
            /// <summary>
            /// Enum TVOSAPPSTOREEnum for TVOS_APP_STORE
            /// </summary>
            [EnumMember(Value = "TVOS_APP_STORE")]
            TVOSAPPSTOREEnum = 9,
            
            /// <summary>
            /// Enum TVOSAPPADHOCEnum for TVOS_APP_ADHOC
            /// </summary>
            [EnumMember(Value = "TVOS_APP_ADHOC")]
            TVOSAPPADHOCEnum = 10,
            
            /// <summary>
            /// Enum TVOSAPPINHOUSEEnum for TVOS_APP_INHOUSE
            /// </summary>
            [EnumMember(Value = "TVOS_APP_INHOUSE")]
            TVOSAPPINHOUSEEnum = 11,
            
            /// <summary>
            /// Enum MACCATALYSTAPPDEVELOPMENTEnum for MAC_CATALYST_APP_DEVELOPMENT
            /// </summary>
            [EnumMember(Value = "MAC_CATALYST_APP_DEVELOPMENT")]
            MACCATALYSTAPPDEVELOPMENTEnum = 12,
            
            /// <summary>
            /// Enum MACCATALYSTAPPSTOREEnum for MAC_CATALYST_APP_STORE
            /// </summary>
            [EnumMember(Value = "MAC_CATALYST_APP_STORE")]
            MACCATALYSTAPPSTOREEnum = 13,
            
            /// <summary>
            /// Enum MACCATALYSTAPPDIRECTEnum for MAC_CATALYST_APP_DIRECT
            /// </summary>
            [EnumMember(Value = "MAC_CATALYST_APP_DIRECT")]
            MACCATALYSTAPPDIRECTEnum = 14
        }

        /// <summary>
        /// Gets or Sets ProfileType
        /// </summary>
        [DataMember(Name="profileType", EmitDefaultValue=true)]
        public ProfileTypeEnum ProfileType { get; set; }

        /// <summary>
        /// Gets or Sets Uuid
        /// </summary>
        [DataMember(Name="uuid", EmitDefaultValue=false)]
        public string Uuid { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProfileAttributes {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  ProfileContent: ").Append(ProfileContent).Append("\n");
            sb.Append("  ProfileState: ").Append(ProfileState).Append("\n");
            sb.Append("  ProfileType: ").Append(ProfileType).Append("\n");
            sb.Append("  Uuid: ").Append(Uuid).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProfileAttributes)obj);
        }

        /// <summary>
        /// Returns true if ProfileAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of ProfileAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProfileAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                ) && 
                (
                    ProfileContent == other.ProfileContent ||
                    ProfileContent != null &&
                    ProfileContent.Equals(other.ProfileContent)
                ) && 
                (
                    ProfileState == other.ProfileState ||
                    
                    ProfileState.Equals(other.ProfileState)
                ) && 
                (
                    ProfileType == other.ProfileType ||
                    
                    ProfileType.Equals(other.ProfileType)
                ) && 
                (
                    Uuid == other.Uuid ||
                    Uuid != null &&
                    Uuid.Equals(other.Uuid)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (ProfileContent != null)
                    hashCode = hashCode * 59 + ProfileContent.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProfileState.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProfileType.GetHashCode();
                    if (Uuid != null)
                    hashCode = hashCode * 59 + Uuid.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProfileAttributes left, ProfileAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProfileAttributes left, ProfileAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
