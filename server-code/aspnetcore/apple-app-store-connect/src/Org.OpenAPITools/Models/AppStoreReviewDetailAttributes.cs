/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppStoreReviewDetailAttributes : IEquatable<AppStoreReviewDetailAttributes>
    {
        /// <summary>
        /// Gets or Sets ContactEmail
        /// </summary>
        [DataMember(Name="contactEmail", EmitDefaultValue=false)]
        public string ContactEmail { get; set; }

        /// <summary>
        /// Gets or Sets ContactFirstName
        /// </summary>
        [DataMember(Name="contactFirstName", EmitDefaultValue=false)]
        public string ContactFirstName { get; set; }

        /// <summary>
        /// Gets or Sets ContactLastName
        /// </summary>
        [DataMember(Name="contactLastName", EmitDefaultValue=false)]
        public string ContactLastName { get; set; }

        /// <summary>
        /// Gets or Sets ContactPhone
        /// </summary>
        [DataMember(Name="contactPhone", EmitDefaultValue=false)]
        public string ContactPhone { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountName
        /// </summary>
        [DataMember(Name="demoAccountName", EmitDefaultValue=false)]
        public string DemoAccountName { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountPassword
        /// </summary>
        [DataMember(Name="demoAccountPassword", EmitDefaultValue=false)]
        public string DemoAccountPassword { get; set; }

        /// <summary>
        /// Gets or Sets DemoAccountRequired
        /// </summary>
        [DataMember(Name="demoAccountRequired", EmitDefaultValue=true)]
        public bool DemoAccountRequired { get; set; }

        /// <summary>
        /// Gets or Sets Notes
        /// </summary>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppStoreReviewDetailAttributes {\n");
            sb.Append("  ContactEmail: ").Append(ContactEmail).Append("\n");
            sb.Append("  ContactFirstName: ").Append(ContactFirstName).Append("\n");
            sb.Append("  ContactLastName: ").Append(ContactLastName).Append("\n");
            sb.Append("  ContactPhone: ").Append(ContactPhone).Append("\n");
            sb.Append("  DemoAccountName: ").Append(DemoAccountName).Append("\n");
            sb.Append("  DemoAccountPassword: ").Append(DemoAccountPassword).Append("\n");
            sb.Append("  DemoAccountRequired: ").Append(DemoAccountRequired).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppStoreReviewDetailAttributes)obj);
        }

        /// <summary>
        /// Returns true if AppStoreReviewDetailAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of AppStoreReviewDetailAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppStoreReviewDetailAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ContactEmail == other.ContactEmail ||
                    ContactEmail != null &&
                    ContactEmail.Equals(other.ContactEmail)
                ) && 
                (
                    ContactFirstName == other.ContactFirstName ||
                    ContactFirstName != null &&
                    ContactFirstName.Equals(other.ContactFirstName)
                ) && 
                (
                    ContactLastName == other.ContactLastName ||
                    ContactLastName != null &&
                    ContactLastName.Equals(other.ContactLastName)
                ) && 
                (
                    ContactPhone == other.ContactPhone ||
                    ContactPhone != null &&
                    ContactPhone.Equals(other.ContactPhone)
                ) && 
                (
                    DemoAccountName == other.DemoAccountName ||
                    DemoAccountName != null &&
                    DemoAccountName.Equals(other.DemoAccountName)
                ) && 
                (
                    DemoAccountPassword == other.DemoAccountPassword ||
                    DemoAccountPassword != null &&
                    DemoAccountPassword.Equals(other.DemoAccountPassword)
                ) && 
                (
                    DemoAccountRequired == other.DemoAccountRequired ||
                    
                    DemoAccountRequired.Equals(other.DemoAccountRequired)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ContactEmail != null)
                    hashCode = hashCode * 59 + ContactEmail.GetHashCode();
                    if (ContactFirstName != null)
                    hashCode = hashCode * 59 + ContactFirstName.GetHashCode();
                    if (ContactLastName != null)
                    hashCode = hashCode * 59 + ContactLastName.GetHashCode();
                    if (ContactPhone != null)
                    hashCode = hashCode * 59 + ContactPhone.GetHashCode();
                    if (DemoAccountName != null)
                    hashCode = hashCode * 59 + DemoAccountName.GetHashCode();
                    if (DemoAccountPassword != null)
                    hashCode = hashCode * 59 + DemoAccountPassword.GetHashCode();
                    
                    hashCode = hashCode * 59 + DemoAccountRequired.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppStoreReviewDetailAttributes left, AppStoreReviewDetailAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppStoreReviewDetailAttributes left, AppStoreReviewDetailAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
