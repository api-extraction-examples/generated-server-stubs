/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppEncryptionDeclarationAttributes : IEquatable<AppEncryptionDeclarationAttributes>
    {
        /// <summary>
        /// Gets or Sets AppEncryptionDeclarationState
        /// </summary>
        [DataMember(Name="appEncryptionDeclarationState", EmitDefaultValue=true)]
        public AppEncryptionDeclarationState AppEncryptionDeclarationState { get; set; }

        /// <summary>
        /// Gets or Sets AvailableOnFrenchStore
        /// </summary>
        [DataMember(Name="availableOnFrenchStore", EmitDefaultValue=true)]
        public bool AvailableOnFrenchStore { get; set; }

        /// <summary>
        /// Gets or Sets CodeValue
        /// </summary>
        [DataMember(Name="codeValue", EmitDefaultValue=false)]
        public string CodeValue { get; set; }

        /// <summary>
        /// Gets or Sets ContainsProprietaryCryptography
        /// </summary>
        [DataMember(Name="containsProprietaryCryptography", EmitDefaultValue=true)]
        public bool ContainsProprietaryCryptography { get; set; }

        /// <summary>
        /// Gets or Sets ContainsThirdPartyCryptography
        /// </summary>
        [DataMember(Name="containsThirdPartyCryptography", EmitDefaultValue=true)]
        public bool ContainsThirdPartyCryptography { get; set; }

        /// <summary>
        /// Gets or Sets DocumentName
        /// </summary>
        [DataMember(Name="documentName", EmitDefaultValue=false)]
        public string DocumentName { get; set; }

        /// <summary>
        /// Gets or Sets DocumentType
        /// </summary>
        [DataMember(Name="documentType", EmitDefaultValue=false)]
        public string DocumentType { get; set; }

        /// <summary>
        /// Gets or Sets DocumentUrl
        /// </summary>
        [DataMember(Name="documentUrl", EmitDefaultValue=false)]
        public string DocumentUrl { get; set; }

        /// <summary>
        /// Gets or Sets Exempt
        /// </summary>
        [DataMember(Name="exempt", EmitDefaultValue=true)]
        public bool Exempt { get; set; }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public Platform Platform { get; set; }

        /// <summary>
        /// Gets or Sets UploadedDate
        /// </summary>
        [DataMember(Name="uploadedDate", EmitDefaultValue=false)]
        public DateTime UploadedDate { get; set; }

        /// <summary>
        /// Gets or Sets UsesEncryption
        /// </summary>
        [DataMember(Name="usesEncryption", EmitDefaultValue=true)]
        public bool UsesEncryption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppEncryptionDeclarationAttributes {\n");
            sb.Append("  AppEncryptionDeclarationState: ").Append(AppEncryptionDeclarationState).Append("\n");
            sb.Append("  AvailableOnFrenchStore: ").Append(AvailableOnFrenchStore).Append("\n");
            sb.Append("  CodeValue: ").Append(CodeValue).Append("\n");
            sb.Append("  ContainsProprietaryCryptography: ").Append(ContainsProprietaryCryptography).Append("\n");
            sb.Append("  ContainsThirdPartyCryptography: ").Append(ContainsThirdPartyCryptography).Append("\n");
            sb.Append("  DocumentName: ").Append(DocumentName).Append("\n");
            sb.Append("  DocumentType: ").Append(DocumentType).Append("\n");
            sb.Append("  DocumentUrl: ").Append(DocumentUrl).Append("\n");
            sb.Append("  Exempt: ").Append(Exempt).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("  UploadedDate: ").Append(UploadedDate).Append("\n");
            sb.Append("  UsesEncryption: ").Append(UsesEncryption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppEncryptionDeclarationAttributes)obj);
        }

        /// <summary>
        /// Returns true if AppEncryptionDeclarationAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of AppEncryptionDeclarationAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppEncryptionDeclarationAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AppEncryptionDeclarationState == other.AppEncryptionDeclarationState ||
                    
                    AppEncryptionDeclarationState.Equals(other.AppEncryptionDeclarationState)
                ) && 
                (
                    AvailableOnFrenchStore == other.AvailableOnFrenchStore ||
                    
                    AvailableOnFrenchStore.Equals(other.AvailableOnFrenchStore)
                ) && 
                (
                    CodeValue == other.CodeValue ||
                    CodeValue != null &&
                    CodeValue.Equals(other.CodeValue)
                ) && 
                (
                    ContainsProprietaryCryptography == other.ContainsProprietaryCryptography ||
                    
                    ContainsProprietaryCryptography.Equals(other.ContainsProprietaryCryptography)
                ) && 
                (
                    ContainsThirdPartyCryptography == other.ContainsThirdPartyCryptography ||
                    
                    ContainsThirdPartyCryptography.Equals(other.ContainsThirdPartyCryptography)
                ) && 
                (
                    DocumentName == other.DocumentName ||
                    DocumentName != null &&
                    DocumentName.Equals(other.DocumentName)
                ) && 
                (
                    DocumentType == other.DocumentType ||
                    DocumentType != null &&
                    DocumentType.Equals(other.DocumentType)
                ) && 
                (
                    DocumentUrl == other.DocumentUrl ||
                    DocumentUrl != null &&
                    DocumentUrl.Equals(other.DocumentUrl)
                ) && 
                (
                    Exempt == other.Exempt ||
                    
                    Exempt.Equals(other.Exempt)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                ) && 
                (
                    UploadedDate == other.UploadedDate ||
                    UploadedDate != null &&
                    UploadedDate.Equals(other.UploadedDate)
                ) && 
                (
                    UsesEncryption == other.UsesEncryption ||
                    
                    UsesEncryption.Equals(other.UsesEncryption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AppEncryptionDeclarationState.GetHashCode();
                    
                    hashCode = hashCode * 59 + AvailableOnFrenchStore.GetHashCode();
                    if (CodeValue != null)
                    hashCode = hashCode * 59 + CodeValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContainsProprietaryCryptography.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContainsThirdPartyCryptography.GetHashCode();
                    if (DocumentName != null)
                    hashCode = hashCode * 59 + DocumentName.GetHashCode();
                    if (DocumentType != null)
                    hashCode = hashCode * 59 + DocumentType.GetHashCode();
                    if (DocumentUrl != null)
                    hashCode = hashCode * 59 + DocumentUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + Exempt.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                    if (UploadedDate != null)
                    hashCode = hashCode * 59 + UploadedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesEncryption.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppEncryptionDeclarationAttributes left, AppEncryptionDeclarationAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppEncryptionDeclarationAttributes left, AppEncryptionDeclarationAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
