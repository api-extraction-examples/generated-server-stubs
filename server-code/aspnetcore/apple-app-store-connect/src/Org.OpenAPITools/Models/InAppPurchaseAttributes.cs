/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class InAppPurchaseAttributes : IEquatable<InAppPurchaseAttributes>
    {

        /// <summary>
        /// Gets or Sets InAppPurchaseType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<InAppPurchaseTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum InAppPurchaseTypeEnum
        {
            
            /// <summary>
            /// Enum AUTOMATICALLYRENEWABLESUBSCRIPTIONEnum for AUTOMATICALLY_RENEWABLE_SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "AUTOMATICALLY_RENEWABLE_SUBSCRIPTION")]
            AUTOMATICALLYRENEWABLESUBSCRIPTIONEnum = 1,
            
            /// <summary>
            /// Enum NONCONSUMABLEEnum for NON_CONSUMABLE
            /// </summary>
            [EnumMember(Value = "NON_CONSUMABLE")]
            NONCONSUMABLEEnum = 2,
            
            /// <summary>
            /// Enum CONSUMABLEEnum for CONSUMABLE
            /// </summary>
            [EnumMember(Value = "CONSUMABLE")]
            CONSUMABLEEnum = 3,
            
            /// <summary>
            /// Enum NONRENEWINGSUBSCRIPTIONEnum for NON_RENEWING_SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "NON_RENEWING_SUBSCRIPTION")]
            NONRENEWINGSUBSCRIPTIONEnum = 4,
            
            /// <summary>
            /// Enum FREESUBSCRIPTIONEnum for FREE_SUBSCRIPTION
            /// </summary>
            [EnumMember(Value = "FREE_SUBSCRIPTION")]
            FREESUBSCRIPTIONEnum = 5
        }

        /// <summary>
        /// Gets or Sets InAppPurchaseType
        /// </summary>
        [DataMember(Name="inAppPurchaseType", EmitDefaultValue=true)]
        public InAppPurchaseTypeEnum InAppPurchaseType { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        [DataMember(Name="productId", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceName
        /// </summary>
        [DataMember(Name="referenceName", EmitDefaultValue=false)]
        public string ReferenceName { get; set; }


        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<StateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            
            /// <summary>
            /// Enum CREATEDEnum for CREATED
            /// </summary>
            [EnumMember(Value = "CREATED")]
            CREATEDEnum = 1,
            
            /// <summary>
            /// Enum DEVELOPERSIGNEDOFFEnum for DEVELOPER_SIGNED_OFF
            /// </summary>
            [EnumMember(Value = "DEVELOPER_SIGNED_OFF")]
            DEVELOPERSIGNEDOFFEnum = 2,
            
            /// <summary>
            /// Enum DEVELOPERACTIONNEEDEDEnum for DEVELOPER_ACTION_NEEDED
            /// </summary>
            [EnumMember(Value = "DEVELOPER_ACTION_NEEDED")]
            DEVELOPERACTIONNEEDEDEnum = 3,
            
            /// <summary>
            /// Enum DELETIONINPROGRESSEnum for DELETION_IN_PROGRESS
            /// </summary>
            [EnumMember(Value = "DELETION_IN_PROGRESS")]
            DELETIONINPROGRESSEnum = 4,
            
            /// <summary>
            /// Enum APPROVEDEnum for APPROVED
            /// </summary>
            [EnumMember(Value = "APPROVED")]
            APPROVEDEnum = 5,
            
            /// <summary>
            /// Enum DELETEDEnum for DELETED
            /// </summary>
            [EnumMember(Value = "DELETED")]
            DELETEDEnum = 6,
            
            /// <summary>
            /// Enum REMOVEDFROMSALEEnum for REMOVED_FROM_SALE
            /// </summary>
            [EnumMember(Value = "REMOVED_FROM_SALE")]
            REMOVEDFROMSALEEnum = 7,
            
            /// <summary>
            /// Enum DEVELOPERREMOVEDFROMSALEEnum for DEVELOPER_REMOVED_FROM_SALE
            /// </summary>
            [EnumMember(Value = "DEVELOPER_REMOVED_FROM_SALE")]
            DEVELOPERREMOVEDFROMSALEEnum = 8,
            
            /// <summary>
            /// Enum WAITINGFORUPLOADEnum for WAITING_FOR_UPLOAD
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_UPLOAD")]
            WAITINGFORUPLOADEnum = 9,
            
            /// <summary>
            /// Enum PROCESSINGCONTENTEnum for PROCESSING_CONTENT
            /// </summary>
            [EnumMember(Value = "PROCESSING_CONTENT")]
            PROCESSINGCONTENTEnum = 10,
            
            /// <summary>
            /// Enum REPLACEDEnum for REPLACED
            /// </summary>
            [EnumMember(Value = "REPLACED")]
            REPLACEDEnum = 11,
            
            /// <summary>
            /// Enum REJECTEDEnum for REJECTED
            /// </summary>
            [EnumMember(Value = "REJECTED")]
            REJECTEDEnum = 12,
            
            /// <summary>
            /// Enum WAITINGFORSCREENSHOTEnum for WAITING_FOR_SCREENSHOT
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_SCREENSHOT")]
            WAITINGFORSCREENSHOTEnum = 13,
            
            /// <summary>
            /// Enum PREPAREFORSUBMISSIONEnum for PREPARE_FOR_SUBMISSION
            /// </summary>
            [EnumMember(Value = "PREPARE_FOR_SUBMISSION")]
            PREPAREFORSUBMISSIONEnum = 14,
            
            /// <summary>
            /// Enum MISSINGMETADATAEnum for MISSING_METADATA
            /// </summary>
            [EnumMember(Value = "MISSING_METADATA")]
            MISSINGMETADATAEnum = 15,
            
            /// <summary>
            /// Enum READYTOSUBMITEnum for READY_TO_SUBMIT
            /// </summary>
            [EnumMember(Value = "READY_TO_SUBMIT")]
            READYTOSUBMITEnum = 16,
            
            /// <summary>
            /// Enum WAITINGFORREVIEWEnum for WAITING_FOR_REVIEW
            /// </summary>
            [EnumMember(Value = "WAITING_FOR_REVIEW")]
            WAITINGFORREVIEWEnum = 17,
            
            /// <summary>
            /// Enum INREVIEWEnum for IN_REVIEW
            /// </summary>
            [EnumMember(Value = "IN_REVIEW")]
            INREVIEWEnum = 18,
            
            /// <summary>
            /// Enum PENDINGDEVELOPERRELEASEEnum for PENDING_DEVELOPER_RELEASE
            /// </summary>
            [EnumMember(Value = "PENDING_DEVELOPER_RELEASE")]
            PENDINGDEVELOPERRELEASEEnum = 19
        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [DataMember(Name="state", EmitDefaultValue=true)]
        public StateEnum State { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InAppPurchaseAttributes {\n");
            sb.Append("  InAppPurchaseType: ").Append(InAppPurchaseType).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ReferenceName: ").Append(ReferenceName).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((InAppPurchaseAttributes)obj);
        }

        /// <summary>
        /// Returns true if InAppPurchaseAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of InAppPurchaseAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InAppPurchaseAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    InAppPurchaseType == other.InAppPurchaseType ||
                    
                    InAppPurchaseType.Equals(other.InAppPurchaseType)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    ReferenceName == other.ReferenceName ||
                    ReferenceName != null &&
                    ReferenceName.Equals(other.ReferenceName)
                ) && 
                (
                    State == other.State ||
                    
                    State.Equals(other.State)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + InAppPurchaseType.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (ReferenceName != null)
                    hashCode = hashCode * 59 + ReferenceName.GetHashCode();
                    
                    hashCode = hashCode * 59 + State.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(InAppPurchaseAttributes left, InAppPurchaseAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(InAppPurchaseAttributes left, InAppPurchaseAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
