/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BuildAttributes : IEquatable<BuildAttributes>
    {
        /// <summary>
        /// Gets or Sets ExpirationDate
        /// </summary>
        [DataMember(Name="expirationDate", EmitDefaultValue=false)]
        public DateTime ExpirationDate { get; set; }

        /// <summary>
        /// Gets or Sets Expired
        /// </summary>
        [DataMember(Name="expired", EmitDefaultValue=true)]
        public bool Expired { get; set; }

        /// <summary>
        /// Gets or Sets IconAssetToken
        /// </summary>
        [DataMember(Name="iconAssetToken", EmitDefaultValue=false)]
        public ImageAsset IconAssetToken { get; set; }

        /// <summary>
        /// Gets or Sets MinOsVersion
        /// </summary>
        [DataMember(Name="minOsVersion", EmitDefaultValue=false)]
        public string MinOsVersion { get; set; }


        /// <summary>
        /// Gets or Sets ProcessingState
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<ProcessingStateEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ProcessingStateEnum
        {
            
            /// <summary>
            /// Enum PROCESSINGEnum for PROCESSING
            /// </summary>
            [EnumMember(Value = "PROCESSING")]
            PROCESSINGEnum = 1,
            
            /// <summary>
            /// Enum FAILEDEnum for FAILED
            /// </summary>
            [EnumMember(Value = "FAILED")]
            FAILEDEnum = 2,
            
            /// <summary>
            /// Enum INVALIDEnum for INVALID
            /// </summary>
            [EnumMember(Value = "INVALID")]
            INVALIDEnum = 3,
            
            /// <summary>
            /// Enum VALIDEnum for VALID
            /// </summary>
            [EnumMember(Value = "VALID")]
            VALIDEnum = 4
        }

        /// <summary>
        /// Gets or Sets ProcessingState
        /// </summary>
        [DataMember(Name="processingState", EmitDefaultValue=true)]
        public ProcessingStateEnum ProcessingState { get; set; }

        /// <summary>
        /// Gets or Sets UploadedDate
        /// </summary>
        [DataMember(Name="uploadedDate", EmitDefaultValue=false)]
        public DateTime UploadedDate { get; set; }

        /// <summary>
        /// Gets or Sets UsesNonExemptEncryption
        /// </summary>
        [DataMember(Name="usesNonExemptEncryption", EmitDefaultValue=true)]
        public bool UsesNonExemptEncryption { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BuildAttributes {\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  Expired: ").Append(Expired).Append("\n");
            sb.Append("  IconAssetToken: ").Append(IconAssetToken).Append("\n");
            sb.Append("  MinOsVersion: ").Append(MinOsVersion).Append("\n");
            sb.Append("  ProcessingState: ").Append(ProcessingState).Append("\n");
            sb.Append("  UploadedDate: ").Append(UploadedDate).Append("\n");
            sb.Append("  UsesNonExemptEncryption: ").Append(UsesNonExemptEncryption).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BuildAttributes)obj);
        }

        /// <summary>
        /// Returns true if BuildAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of BuildAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BuildAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ExpirationDate == other.ExpirationDate ||
                    ExpirationDate != null &&
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    Expired == other.Expired ||
                    
                    Expired.Equals(other.Expired)
                ) && 
                (
                    IconAssetToken == other.IconAssetToken ||
                    IconAssetToken != null &&
                    IconAssetToken.Equals(other.IconAssetToken)
                ) && 
                (
                    MinOsVersion == other.MinOsVersion ||
                    MinOsVersion != null &&
                    MinOsVersion.Equals(other.MinOsVersion)
                ) && 
                (
                    ProcessingState == other.ProcessingState ||
                    
                    ProcessingState.Equals(other.ProcessingState)
                ) && 
                (
                    UploadedDate == other.UploadedDate ||
                    UploadedDate != null &&
                    UploadedDate.Equals(other.UploadedDate)
                ) && 
                (
                    UsesNonExemptEncryption == other.UsesNonExemptEncryption ||
                    
                    UsesNonExemptEncryption.Equals(other.UsesNonExemptEncryption)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ExpirationDate != null)
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + Expired.GetHashCode();
                    if (IconAssetToken != null)
                    hashCode = hashCode * 59 + IconAssetToken.GetHashCode();
                    if (MinOsVersion != null)
                    hashCode = hashCode * 59 + MinOsVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + ProcessingState.GetHashCode();
                    if (UploadedDate != null)
                    hashCode = hashCode * 59 + UploadedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + UsesNonExemptEncryption.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BuildAttributes left, BuildAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BuildAttributes left, BuildAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
