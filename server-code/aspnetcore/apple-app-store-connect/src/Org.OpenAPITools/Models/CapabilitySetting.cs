/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CapabilitySetting : IEquatable<CapabilitySetting>
    {

        /// <summary>
        /// Gets or Sets AllowedInstances
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<AllowedInstancesEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AllowedInstancesEnum
        {
            
            /// <summary>
            /// Enum ENTRYEnum for ENTRY
            /// </summary>
            [EnumMember(Value = "ENTRY")]
            ENTRYEnum = 1,
            
            /// <summary>
            /// Enum SINGLEEnum for SINGLE
            /// </summary>
            [EnumMember(Value = "SINGLE")]
            SINGLEEnum = 2,
            
            /// <summary>
            /// Enum MULTIPLEEnum for MULTIPLE
            /// </summary>
            [EnumMember(Value = "MULTIPLE")]
            MULTIPLEEnum = 3
        }

        /// <summary>
        /// Gets or Sets AllowedInstances
        /// </summary>
        [DataMember(Name="allowedInstances", EmitDefaultValue=true)]
        public AllowedInstancesEnum AllowedInstances { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets EnabledByDefault
        /// </summary>
        [DataMember(Name="enabledByDefault", EmitDefaultValue=true)]
        public bool EnabledByDefault { get; set; }


        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<KeyEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum KeyEnum
        {
            
            /// <summary>
            /// Enum ICLOUDVERSIONEnum for ICLOUD_VERSION
            /// </summary>
            [EnumMember(Value = "ICLOUD_VERSION")]
            ICLOUDVERSIONEnum = 1,
            
            /// <summary>
            /// Enum DATAPROTECTIONPERMISSIONLEVELEnum for DATA_PROTECTION_PERMISSION_LEVEL
            /// </summary>
            [EnumMember(Value = "DATA_PROTECTION_PERMISSION_LEVEL")]
            DATAPROTECTIONPERMISSIONLEVELEnum = 2,
            
            /// <summary>
            /// Enum APPLEIDAUTHAPPCONSENTEnum for APPLE_ID_AUTH_APP_CONSENT
            /// </summary>
            [EnumMember(Value = "APPLE_ID_AUTH_APP_CONSENT")]
            APPLEIDAUTHAPPCONSENTEnum = 3
        }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=true)]
        public KeyEnum Key { get; set; }

        /// <summary>
        /// Gets or Sets MinInstances
        /// </summary>
        [DataMember(Name="minInstances", EmitDefaultValue=true)]
        public int MinInstances { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Options
        /// </summary>
        [DataMember(Name="options", EmitDefaultValue=false)]
        public List<CapabilityOption> Options { get; set; }

        /// <summary>
        /// Gets or Sets Visible
        /// </summary>
        [DataMember(Name="visible", EmitDefaultValue=true)]
        public bool Visible { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CapabilitySetting {\n");
            sb.Append("  AllowedInstances: ").Append(AllowedInstances).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  EnabledByDefault: ").Append(EnabledByDefault).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  MinInstances: ").Append(MinInstances).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Options: ").Append(Options).Append("\n");
            sb.Append("  Visible: ").Append(Visible).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CapabilitySetting)obj);
        }

        /// <summary>
        /// Returns true if CapabilitySetting instances are equal
        /// </summary>
        /// <param name="other">Instance of CapabilitySetting to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CapabilitySetting other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowedInstances == other.AllowedInstances ||
                    
                    AllowedInstances.Equals(other.AllowedInstances)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    EnabledByDefault == other.EnabledByDefault ||
                    
                    EnabledByDefault.Equals(other.EnabledByDefault)
                ) && 
                (
                    Key == other.Key ||
                    
                    Key.Equals(other.Key)
                ) && 
                (
                    MinInstances == other.MinInstances ||
                    
                    MinInstances.Equals(other.MinInstances)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Options == other.Options ||
                    Options != null &&
                    other.Options != null &&
                    Options.SequenceEqual(other.Options)
                ) && 
                (
                    Visible == other.Visible ||
                    
                    Visible.Equals(other.Visible)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AllowedInstances.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + EnabledByDefault.GetHashCode();
                    
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinInstances.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Options != null)
                    hashCode = hashCode * 59 + Options.GetHashCode();
                    
                    hashCode = hashCode * 59 + Visible.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CapabilitySetting left, CapabilitySetting right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CapabilitySetting left, CapabilitySetting right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
