/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AppPriceRelationships : IEquatable<AppPriceRelationships>
    {
        /// <summary>
        /// Gets or Sets App
        /// </summary>
        [DataMember(Name="app", EmitDefaultValue=false)]
        public AppEncryptionDeclarationRelationshipsApp App { get; set; }

        /// <summary>
        /// Gets or Sets PriceTier
        /// </summary>
        [DataMember(Name="priceTier", EmitDefaultValue=false)]
        public AppPriceRelationshipsPriceTier PriceTier { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AppPriceRelationships {\n");
            sb.Append("  App: ").Append(App).Append("\n");
            sb.Append("  PriceTier: ").Append(PriceTier).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AppPriceRelationships)obj);
        }

        /// <summary>
        /// Returns true if AppPriceRelationships instances are equal
        /// </summary>
        /// <param name="other">Instance of AppPriceRelationships to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AppPriceRelationships other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    App == other.App ||
                    App != null &&
                    App.Equals(other.App)
                ) && 
                (
                    PriceTier == other.PriceTier ||
                    PriceTier != null &&
                    PriceTier.Equals(other.PriceTier)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (App != null)
                    hashCode = hashCode * 59 + App.GetHashCode();
                    if (PriceTier != null)
                    hashCode = hashCode * 59 + PriceTier.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AppPriceRelationships left, AppPriceRelationships right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AppPriceRelationships left, AppPriceRelationships right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
