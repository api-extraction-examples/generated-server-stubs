/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PerfPowerMetricAttributes : IEquatable<PerfPowerMetricAttributes>
    {
        /// <summary>
        /// Gets or Sets DeviceType
        /// </summary>
        [DataMember(Name="deviceType", EmitDefaultValue=false)]
        public string DeviceType { get; set; }


        /// <summary>
        /// Gets or Sets MetricType
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<MetricTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum MetricTypeEnum
        {
            
            /// <summary>
            /// Enum DISKEnum for DISK
            /// </summary>
            [EnumMember(Value = "DISK")]
            DISKEnum = 1,
            
            /// <summary>
            /// Enum HANGEnum for HANG
            /// </summary>
            [EnumMember(Value = "HANG")]
            HANGEnum = 2,
            
            /// <summary>
            /// Enum BATTERYEnum for BATTERY
            /// </summary>
            [EnumMember(Value = "BATTERY")]
            BATTERYEnum = 3,
            
            /// <summary>
            /// Enum LAUNCHEnum for LAUNCH
            /// </summary>
            [EnumMember(Value = "LAUNCH")]
            LAUNCHEnum = 4,
            
            /// <summary>
            /// Enum MEMORYEnum for MEMORY
            /// </summary>
            [EnumMember(Value = "MEMORY")]
            MEMORYEnum = 5,
            
            /// <summary>
            /// Enum ANIMATIONEnum for ANIMATION
            /// </summary>
            [EnumMember(Value = "ANIMATION")]
            ANIMATIONEnum = 6,
            
            /// <summary>
            /// Enum TERMINATIONEnum for TERMINATION
            /// </summary>
            [EnumMember(Value = "TERMINATION")]
            TERMINATIONEnum = 7
        }

        /// <summary>
        /// Gets or Sets MetricType
        /// </summary>
        [DataMember(Name="metricType", EmitDefaultValue=true)]
        public MetricTypeEnum MetricType { get; set; }


        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<PlatformEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PlatformEnum
        {
            
            /// <summary>
            /// Enum IOSEnum for IOS
            /// </summary>
            [EnumMember(Value = "IOS")]
            IOSEnum = 1
        }

        /// <summary>
        /// Gets or Sets Platform
        /// </summary>
        [DataMember(Name="platform", EmitDefaultValue=true)]
        public PlatformEnum Platform { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PerfPowerMetricAttributes {\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  MetricType: ").Append(MetricType).Append("\n");
            sb.Append("  Platform: ").Append(Platform).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PerfPowerMetricAttributes)obj);
        }

        /// <summary>
        /// Returns true if PerfPowerMetricAttributes instances are equal
        /// </summary>
        /// <param name="other">Instance of PerfPowerMetricAttributes to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PerfPowerMetricAttributes other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DeviceType == other.DeviceType ||
                    DeviceType != null &&
                    DeviceType.Equals(other.DeviceType)
                ) && 
                (
                    MetricType == other.MetricType ||
                    
                    MetricType.Equals(other.MetricType)
                ) && 
                (
                    Platform == other.Platform ||
                    
                    Platform.Equals(other.Platform)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DeviceType != null)
                    hashCode = hashCode * 59 + DeviceType.GetHashCode();
                    
                    hashCode = hashCode * 59 + MetricType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Platform.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PerfPowerMetricAttributes left, PerfPowerMetricAttributes right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PerfPowerMetricAttributes left, PerfPowerMetricAttributes right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
