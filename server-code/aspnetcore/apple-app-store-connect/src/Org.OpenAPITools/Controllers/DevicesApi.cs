/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.4.1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DevicesApiController : ControllerBase
    { 
        /// <summary>
        /// 
        /// </summary>
        /// <param name="deviceCreateRequest">Device representation</param>
        /// <response code="201">Single Device</response>
        /// <response code="400">Parameter error(s)</response>
        /// <response code="403">Forbidden error</response>
        /// <response code="409">Request entity error(s)</response>
        [HttpPost]
        [Route("/v1/devices")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DevicesCreateInstance")]
        [SwaggerResponse(statusCode: 201, type: typeof(DeviceResponse), description: "Single Device")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Parameter error(s)")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden error")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Request entity error(s)")]
        public virtual IActionResult DevicesCreateInstance([FromBody]DeviceCreateRequest deviceCreateRequest)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(DeviceResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"attributes\" : {\n      \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"deviceClass\" : \"APPLE_WATCH\",\n      \"model\" : \"model\",\n      \"udid\" : \"udid\",\n      \"status\" : \"ENABLED\"\n    },\n    \"links\" : {\n      \"self\" : \"self\"\n    },\n    \"id\" : \"id\",\n    \"type\" : \"devices\"\n  },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceResponse>(exampleJson)
            : default(DeviceResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="filterName">filter by attribute &#39;name&#39;</param>
        /// <param name="filterPlatform">filter by attribute &#39;platform&#39;</param>
        /// <param name="filterStatus">filter by attribute &#39;status&#39;</param>
        /// <param name="filterUdid">filter by attribute &#39;udid&#39;</param>
        /// <param name="filterId">filter by id(s)</param>
        /// <param name="sort">comma-separated list of sort expressions; resources will be sorted as specified</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices</param>
        /// <param name="limit">maximum resources per page</param>
        /// <response code="200">List of Devices</response>
        /// <response code="400">Parameter error(s)</response>
        /// <response code="403">Forbidden error</response>
        [HttpGet]
        [Route("/v1/devices")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DevicesGetCollection")]
        [SwaggerResponse(statusCode: 200, type: typeof(DevicesResponse), description: "List of Devices")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Parameter error(s)")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden error")]
        public virtual IActionResult DevicesGetCollection([FromQuery (Name = "filter[name]")]List<string> filterName, [FromQuery (Name = "filter[platform]")]List<string> filterPlatform, [FromQuery (Name = "filter[status]")]List<string> filterStatus, [FromQuery (Name = "filter[udid]")]List<string> filterUdid, [FromQuery (Name = "filter[id]")]List<string> filterId, [FromQuery (Name = "sort")]List<string> sort, [FromQuery (Name = "fields[devices]")]List<string> fieldsDevices, [FromQuery (Name = "limit")]int? limit)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DevicesResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : [ {\n    \"attributes\" : {\n      \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"deviceClass\" : \"APPLE_WATCH\",\n      \"model\" : \"model\",\n      \"udid\" : \"udid\",\n      \"status\" : \"ENABLED\"\n    },\n    \"links\" : {\n      \"self\" : \"self\"\n    },\n    \"id\" : \"id\",\n    \"type\" : \"devices\"\n  }, {\n    \"attributes\" : {\n      \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"deviceClass\" : \"APPLE_WATCH\",\n      \"model\" : \"model\",\n      \"udid\" : \"udid\",\n      \"status\" : \"ENABLED\"\n    },\n    \"links\" : {\n      \"self\" : \"self\"\n    },\n    \"id\" : \"id\",\n    \"type\" : \"devices\"\n  } ],\n  \"meta\" : {\n    \"paging\" : {\n      \"total\" : 6,\n      \"limit\" : 0\n    }\n  },\n  \"links\" : {\n    \"next\" : \"next\",\n    \"self\" : \"self\",\n    \"first\" : \"first\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DevicesResponse>(exampleJson)
            : default(DevicesResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="fieldsDevices">the fields to include for returned resources of type devices</param>
        /// <response code="200">Single Device</response>
        /// <response code="400">Parameter error(s)</response>
        /// <response code="403">Forbidden error</response>
        /// <response code="404">Not found error</response>
        [HttpGet]
        [Route("/v1/devices/{id}")]
        [Authorize]
        [ValidateModelState]
        [SwaggerOperation("DevicesGetInstance")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeviceResponse), description: "Single Device")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Parameter error(s)")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not found error")]
        public virtual IActionResult DevicesGetInstance([FromRoute (Name = "id")][Required]string id, [FromQuery (Name = "fields[devices]")]List<string> fieldsDevices)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeviceResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"attributes\" : {\n      \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"deviceClass\" : \"APPLE_WATCH\",\n      \"model\" : \"model\",\n      \"udid\" : \"udid\",\n      \"status\" : \"ENABLED\"\n    },\n    \"links\" : {\n      \"self\" : \"self\"\n    },\n    \"id\" : \"id\",\n    \"type\" : \"devices\"\n  },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceResponse>(exampleJson)
            : default(DeviceResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// 
        /// </summary>
        /// <param name="id">the id of the requested resource</param>
        /// <param name="deviceUpdateRequest">Device representation</param>
        /// <response code="200">Single Device</response>
        /// <response code="400">Parameter error(s)</response>
        /// <response code="403">Forbidden error</response>
        /// <response code="404">Not found error</response>
        /// <response code="409">Request entity error(s)</response>
        [HttpPatch]
        [Route("/v1/devices/{id}")]
        [Authorize]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("DevicesUpdateInstance")]
        [SwaggerResponse(statusCode: 200, type: typeof(DeviceResponse), description: "Single Device")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Parameter error(s)")]
        [SwaggerResponse(statusCode: 403, type: typeof(ErrorResponse), description: "Forbidden error")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not found error")]
        [SwaggerResponse(statusCode: 409, type: typeof(ErrorResponse), description: "Request entity error(s)")]
        public virtual IActionResult DevicesUpdateInstance([FromRoute (Name = "id")][Required]string id, [FromBody]DeviceUpdateRequest deviceUpdateRequest)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(DeviceResponse));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409, default(ErrorResponse));
            string exampleJson = null;
            exampleJson = "{\n  \"data\" : {\n    \"attributes\" : {\n      \"addedDate\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"name\" : \"name\",\n      \"deviceClass\" : \"APPLE_WATCH\",\n      \"model\" : \"model\",\n      \"udid\" : \"udid\",\n      \"status\" : \"ENABLED\"\n    },\n    \"links\" : {\n      \"self\" : \"self\"\n    },\n    \"id\" : \"id\",\n    \"type\" : \"devices\"\n  },\n  \"links\" : {\n    \"self\" : \"self\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<DeviceResponse>(exampleJson)
            : default(DeviceResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
