/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ResponseInspectionApiController : ControllerBase
    { 
        /// <summary>
        /// Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
        /// </summary>
        /// <param name="ifModifiedSince"></param>
        /// <param name="ifNoneMatch"></param>
        /// <response code="200">Cached response</response>
        /// <response code="304">Modified</response>
        [HttpGet]
        [Route("/cache")]
        [ValidateModelState]
        [SwaggerOperation("CacheGet")]
        public virtual IActionResult CacheGet([FromHeader (Name = "If-Modified-Since")]string ifModifiedSince, [FromHeader (Name = "If-None-Match")]string ifNoneMatch)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 304 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(304);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Sets a Cache-Control header for n seconds.
        /// </summary>
        /// <param name="value"></param>
        /// <response code="200">Cache control set</response>
        [HttpGet]
        [Route("/cache/{value}")]
        [ValidateModelState]
        [SwaggerOperation("CacheValueGet")]
        public virtual IActionResult CacheValueGet([FromRoute (Name = "value")][Required]int value)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
        /// </summary>
        /// <param name="etag">Automatically added</param>
        /// <param name="ifNoneMatch"></param>
        /// <param name="ifMatch"></param>
        /// <response code="200">Normal response</response>
        /// <response code="412">match</response>
        [HttpGet]
        [Route("/etag/{etag}")]
        [ValidateModelState]
        [SwaggerOperation("EtagEtagGet")]
        public virtual IActionResult EtagEtagGet([FromRoute (Name = "etag")][Required]string etag, [FromHeader (Name = "If-None-Match")]string ifNoneMatch, [FromHeader (Name = "If-Match")]string ifMatch)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 412 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(412);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a set of response headers from the query string.
        /// </summary>
        /// <param name="freeform"></param>
        /// <response code="200">Response headers</response>
        [HttpGet]
        [Route("/response-headers")]
        [ValidateModelState]
        [SwaggerOperation("ResponseHeadersGet")]
        public virtual IActionResult ResponseHeadersGet([FromQuery (Name = "freeform")]Dictionary<string, string> freeform)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a set of response headers from the query string.
        /// </summary>
        /// <param name="freeform"></param>
        /// <response code="200">Response headers</response>
        [HttpPost]
        [Route("/response-headers")]
        [ValidateModelState]
        [SwaggerOperation("ResponseHeadersPost")]
        public virtual IActionResult ResponseHeadersPost([FromQuery (Name = "freeform")]Dictionary<string, string> freeform)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
