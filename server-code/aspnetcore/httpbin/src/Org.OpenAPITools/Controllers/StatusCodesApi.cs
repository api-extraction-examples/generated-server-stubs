/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class StatusCodesApiController : ControllerBase
    { 
        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpDelete]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesDelete")]
        public virtual IActionResult StatusCodesDelete([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpGet]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesGet")]
        public virtual IActionResult StatusCodesGet([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpPatch]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesPatch")]
        public virtual IActionResult StatusCodesPatch([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpPost]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesPost")]
        public virtual IActionResult StatusCodesPost([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpPut]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesPut")]
        public virtual IActionResult StatusCodesPut([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return status code or random status code if more than one are given
        /// </summary>
        /// <param name="codes"></param>
        /// <response code="100">Informational responses</response>
        /// <response code="200">Success</response>
        /// <response code="300">Redirection</response>
        /// <response code="400">Client Errors</response>
        /// <response code="500">Server Errors</response>
        [HttpTrace]
        [Route("/status/{codes}")]
        [ValidateModelState]
        [SwaggerOperation("StatusCodesTrace")]
        public virtual IActionResult StatusCodesTrace([FromRoute (Name = "codes")][Required]string codes)
        {

            //TODO: Uncomment the next line to return response 100 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(100);
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 300 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(300);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);

            throw new NotImplementedException();
        }
    }
}
