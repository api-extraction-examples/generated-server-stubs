/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * The version of the OpenAPI document: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DynamicDataApiController : ControllerBase
    { 
        /// <summary>
        /// Decodes base64url-encoded string.
        /// </summary>
        /// <param name="value"></param>
        /// <response code="200">Decoded base64 content.</response>
        [HttpGet]
        [Route("/base64/{value}")]
        [ValidateModelState]
        [SwaggerOperation("Base64ValueGet")]
        public virtual IActionResult Base64ValueGet([FromRoute (Name = "value")][Required]string value)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns n random bytes generated with given seed
        /// </summary>
        /// <param name="n"></param>
        /// <response code="200">Bytes.</response>
        [HttpGet]
        [Route("/bytes/{n}")]
        [ValidateModelState]
        [SwaggerOperation("BytesNGet")]
        public virtual IActionResult BytesNGet([FromRoute (Name = "n")][Required]int n)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpDelete]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayDelete")]
        public virtual IActionResult DelayDelayDelete([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpGet]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayGet")]
        public virtual IActionResult DelayDelayGet([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpPatch]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayPatch")]
        public virtual IActionResult DelayDelayPatch([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpPost]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayPost")]
        public virtual IActionResult DelayDelayPost([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpPut]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayPut")]
        public virtual IActionResult DelayDelayPut([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Returns a delayed response (max of 10 seconds).
        /// </summary>
        /// <param name="delay"></param>
        /// <response code="200">A delayed response.</response>
        [HttpTrace]
        [Route("/delay/{delay}")]
        [ValidateModelState]
        [SwaggerOperation("DelayDelayTrace")]
        public virtual IActionResult DelayDelayTrace([FromRoute (Name = "delay")][Required]int delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Drips data over a duration after an optional initial delay.
        /// </summary>
        /// <param name="duration">The amount of time (in seconds) over which to drip each byte</param>
        /// <param name="numbytes">The number of bytes to respond with</param>
        /// <param name="code">The response code that will be returned</param>
        /// <param name="delay">The amount of time (in seconds) to delay before responding</param>
        /// <response code="200">A dripped response.</response>
        [HttpGet]
        [Route("/drip")]
        [ValidateModelState]
        [SwaggerOperation("DripGet")]
        public virtual IActionResult DripGet([FromQuery (Name = "duration")]decimal? duration, [FromQuery (Name = "numbytes")]int? numbytes, [FromQuery (Name = "code")]int? code, [FromQuery (Name = "delay")]decimal? delay)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Generate a page containing n links to other pages which do the same.
        /// </summary>
        /// <param name="n"></param>
        /// <param name="offset"></param>
        /// <response code="200">HTML links.</response>
        [HttpGet]
        [Route("/links/{n}/{offset}")]
        [ValidateModelState]
        [SwaggerOperation("LinksNOffsetGet")]
        public virtual IActionResult LinksNOffsetGet([FromRoute (Name = "n")][Required]int n, [FromRoute (Name = "offset")][Required]int offset)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Streams n random bytes generated with given seed, at given chunk size per packet.
        /// </summary>
        /// <param name="numbytes"></param>
        /// <response code="200">Bytes.</response>
        [HttpGet]
        [Route("/range/{numbytes}")]
        [ValidateModelState]
        [SwaggerOperation("RangeNumbytesGet")]
        public virtual IActionResult RangeNumbytesGet([FromRoute (Name = "numbytes")][Required]int numbytes)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Streams n random bytes generated with given seed, at given chunk size per packet.
        /// </summary>
        /// <param name="n"></param>
        /// <response code="200">Bytes.</response>
        [HttpGet]
        [Route("/stream-bytes/{n}")]
        [ValidateModelState]
        [SwaggerOperation("StreamBytesNGet")]
        public virtual IActionResult StreamBytesNGet([FromRoute (Name = "n")][Required]int n)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Stream n JSON responses
        /// </summary>
        /// <param name="n"></param>
        /// <response code="200">Streamed JSON responses.</response>
        [HttpGet]
        [Route("/stream/{n}")]
        [ValidateModelState]
        [SwaggerOperation("StreamNGet")]
        public virtual IActionResult StreamNGet([FromRoute (Name = "n")][Required]int n)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Return a UUID4.
        /// </summary>
        /// <response code="200">A UUID4.</response>
        [HttpGet]
        [Route("/uuid")]
        [ValidateModelState]
        [SwaggerOperation("UuidGet")]
        public virtual IActionResult UuidGet()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            throw new NotImplementedException();
        }
    }
}
