/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class AmendmentMember : IEquatable<AmendmentMember>
    {
        /// <summary>
        /// Gets or Sets House
        /// </summary>
        [DataMember(Name="house", EmitDefaultValue=true)]
        public House House { get; set; }

        /// <summary>
        /// Gets or Sets IsLead
        /// </summary>
        [DataMember(Name="isLead", EmitDefaultValue=true)]
        public bool IsLead { get; set; }

        /// <summary>
        /// Gets or Sets MemberFrom
        /// </summary>
        [DataMember(Name="memberFrom", EmitDefaultValue=true)]
        public string MemberFrom { get; set; }

        /// <summary>
        /// Gets or Sets MemberId
        /// </summary>
        [DataMember(Name="memberId", EmitDefaultValue=true)]
        public int MemberId { get; set; }

        /// <summary>
        /// Gets or Sets MemberPage
        /// </summary>
        [DataMember(Name="memberPage", EmitDefaultValue=true)]
        public string MemberPage { get; set; }

        /// <summary>
        /// Gets or Sets MemberPhoto
        /// </summary>
        [DataMember(Name="memberPhoto", EmitDefaultValue=true)]
        public string MemberPhoto { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Party
        /// </summary>
        [DataMember(Name="party", EmitDefaultValue=true)]
        public string Party { get; set; }

        /// <summary>
        /// Gets or Sets PartyColour
        /// </summary>
        [DataMember(Name="partyColour", EmitDefaultValue=true)]
        public string PartyColour { get; set; }

        /// <summary>
        /// Gets or Sets SortOrder
        /// </summary>
        [DataMember(Name="sortOrder", EmitDefaultValue=true)]
        public int SortOrder { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AmendmentMember {\n");
            sb.Append("  House: ").Append(House).Append("\n");
            sb.Append("  IsLead: ").Append(IsLead).Append("\n");
            sb.Append("  MemberFrom: ").Append(MemberFrom).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  MemberPage: ").Append(MemberPage).Append("\n");
            sb.Append("  MemberPhoto: ").Append(MemberPhoto).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Party: ").Append(Party).Append("\n");
            sb.Append("  PartyColour: ").Append(PartyColour).Append("\n");
            sb.Append("  SortOrder: ").Append(SortOrder).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AmendmentMember)obj);
        }

        /// <summary>
        /// Returns true if AmendmentMember instances are equal
        /// </summary>
        /// <param name="other">Instance of AmendmentMember to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AmendmentMember other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    House == other.House ||
                    
                    House.Equals(other.House)
                ) && 
                (
                    IsLead == other.IsLead ||
                    
                    IsLead.Equals(other.IsLead)
                ) && 
                (
                    MemberFrom == other.MemberFrom ||
                    MemberFrom != null &&
                    MemberFrom.Equals(other.MemberFrom)
                ) && 
                (
                    MemberId == other.MemberId ||
                    
                    MemberId.Equals(other.MemberId)
                ) && 
                (
                    MemberPage == other.MemberPage ||
                    MemberPage != null &&
                    MemberPage.Equals(other.MemberPage)
                ) && 
                (
                    MemberPhoto == other.MemberPhoto ||
                    MemberPhoto != null &&
                    MemberPhoto.Equals(other.MemberPhoto)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Party == other.Party ||
                    Party != null &&
                    Party.Equals(other.Party)
                ) && 
                (
                    PartyColour == other.PartyColour ||
                    PartyColour != null &&
                    PartyColour.Equals(other.PartyColour)
                ) && 
                (
                    SortOrder == other.SortOrder ||
                    
                    SortOrder.Equals(other.SortOrder)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + House.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLead.GetHashCode();
                    if (MemberFrom != null)
                    hashCode = hashCode * 59 + MemberFrom.GetHashCode();
                    
                    hashCode = hashCode * 59 + MemberId.GetHashCode();
                    if (MemberPage != null)
                    hashCode = hashCode * 59 + MemberPage.GetHashCode();
                    if (MemberPhoto != null)
                    hashCode = hashCode * 59 + MemberPhoto.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Party != null)
                    hashCode = hashCode * 59 + Party.GetHashCode();
                    if (PartyColour != null)
                    hashCode = hashCode * 59 + PartyColour.GetHashCode();
                    
                    hashCode = hashCode * 59 + SortOrder.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AmendmentMember left, AmendmentMember right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AmendmentMember left, AmendmentMember right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
