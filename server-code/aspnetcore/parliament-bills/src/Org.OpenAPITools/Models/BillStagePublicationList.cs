/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillStagePublicationList : IEquatable<BillStagePublicationList>
    {
        /// <summary>
        /// Gets or Sets BillStageId
        /// </summary>
        [DataMember(Name="billStageId", EmitDefaultValue=true)]
        public int BillStageId { get; set; }

        /// <summary>
        /// Gets or Sets Publications
        /// </summary>
        [DataMember(Name="publications", EmitDefaultValue=true)]
        public List<Publication> Publications { get; set; }

        /// <summary>
        /// Gets or Sets Sittings
        /// </summary>
        [DataMember(Name="sittings", EmitDefaultValue=true)]
        public List<BillStageSittingPublicationList> Sittings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillStagePublicationList {\n");
            sb.Append("  BillStageId: ").Append(BillStageId).Append("\n");
            sb.Append("  Publications: ").Append(Publications).Append("\n");
            sb.Append("  Sittings: ").Append(Sittings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillStagePublicationList)obj);
        }

        /// <summary>
        /// Returns true if BillStagePublicationList instances are equal
        /// </summary>
        /// <param name="other">Instance of BillStagePublicationList to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillStagePublicationList other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BillStageId == other.BillStageId ||
                    
                    BillStageId.Equals(other.BillStageId)
                ) && 
                (
                    Publications == other.Publications ||
                    Publications != null &&
                    other.Publications != null &&
                    Publications.SequenceEqual(other.Publications)
                ) && 
                (
                    Sittings == other.Sittings ||
                    Sittings != null &&
                    other.Sittings != null &&
                    Sittings.SequenceEqual(other.Sittings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BillStageId.GetHashCode();
                    if (Publications != null)
                    hashCode = hashCode * 59 + Publications.GetHashCode();
                    if (Sittings != null)
                    hashCode = hashCode * 59 + Sittings.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillStagePublicationList left, BillStagePublicationList right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillStagePublicationList left, BillStagePublicationList right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
