/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * The version of the OpenAPI document: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class BillSummary : IEquatable<BillSummary>
    {
        /// <summary>
        /// Gets or Sets BillId
        /// </summary>
        [DataMember(Name="billId", EmitDefaultValue=true)]
        public int BillId { get; set; }

        /// <summary>
        /// Gets or Sets BillTypeId
        /// </summary>
        [DataMember(Name="billTypeId", EmitDefaultValue=true)]
        public int BillTypeId { get; set; }

        /// <summary>
        /// Gets or Sets BillWithdrawn
        /// </summary>
        [DataMember(Name="billWithdrawn", EmitDefaultValue=true)]
        public DateTime? BillWithdrawn { get; set; }

        /// <summary>
        /// Gets or Sets CurrentHouse
        /// </summary>
        [DataMember(Name="currentHouse", EmitDefaultValue=true)]
        public House CurrentHouse { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStage
        /// </summary>
        [DataMember(Name="currentStage", EmitDefaultValue=false)]
        public StageSummary CurrentStage { get; set; }

        /// <summary>
        /// Gets or Sets IncludedSessionIds
        /// </summary>
        [DataMember(Name="includedSessionIds", EmitDefaultValue=true)]
        public List<int> IncludedSessionIds { get; set; }

        /// <summary>
        /// Gets or Sets IntroducedSessionId
        /// </summary>
        [DataMember(Name="introducedSessionId", EmitDefaultValue=true)]
        public int IntroducedSessionId { get; set; }

        /// <summary>
        /// Gets or Sets IsAct
        /// </summary>
        [DataMember(Name="isAct", EmitDefaultValue=true)]
        public bool IsAct { get; set; }

        /// <summary>
        /// Gets or Sets IsDefeated
        /// </summary>
        [DataMember(Name="isDefeated", EmitDefaultValue=true)]
        public bool IsDefeated { get; set; }

        /// <summary>
        /// Gets or Sets LastUpdate
        /// </summary>
        [DataMember(Name="lastUpdate", EmitDefaultValue=false)]
        public DateTime LastUpdate { get; set; }

        /// <summary>
        /// Gets or Sets OriginatingHouse
        /// </summary>
        [DataMember(Name="originatingHouse", EmitDefaultValue=true)]
        public House OriginatingHouse { get; set; }

        /// <summary>
        /// Gets or Sets ShortTitle
        /// </summary>
        [DataMember(Name="shortTitle", EmitDefaultValue=true)]
        public string ShortTitle { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class BillSummary {\n");
            sb.Append("  BillId: ").Append(BillId).Append("\n");
            sb.Append("  BillTypeId: ").Append(BillTypeId).Append("\n");
            sb.Append("  BillWithdrawn: ").Append(BillWithdrawn).Append("\n");
            sb.Append("  CurrentHouse: ").Append(CurrentHouse).Append("\n");
            sb.Append("  CurrentStage: ").Append(CurrentStage).Append("\n");
            sb.Append("  IncludedSessionIds: ").Append(IncludedSessionIds).Append("\n");
            sb.Append("  IntroducedSessionId: ").Append(IntroducedSessionId).Append("\n");
            sb.Append("  IsAct: ").Append(IsAct).Append("\n");
            sb.Append("  IsDefeated: ").Append(IsDefeated).Append("\n");
            sb.Append("  LastUpdate: ").Append(LastUpdate).Append("\n");
            sb.Append("  OriginatingHouse: ").Append(OriginatingHouse).Append("\n");
            sb.Append("  ShortTitle: ").Append(ShortTitle).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((BillSummary)obj);
        }

        /// <summary>
        /// Returns true if BillSummary instances are equal
        /// </summary>
        /// <param name="other">Instance of BillSummary to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(BillSummary other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    BillId == other.BillId ||
                    
                    BillId.Equals(other.BillId)
                ) && 
                (
                    BillTypeId == other.BillTypeId ||
                    
                    BillTypeId.Equals(other.BillTypeId)
                ) && 
                (
                    BillWithdrawn == other.BillWithdrawn ||
                    BillWithdrawn != null &&
                    BillWithdrawn.Equals(other.BillWithdrawn)
                ) && 
                (
                    CurrentHouse == other.CurrentHouse ||
                    
                    CurrentHouse.Equals(other.CurrentHouse)
                ) && 
                (
                    CurrentStage == other.CurrentStage ||
                    CurrentStage != null &&
                    CurrentStage.Equals(other.CurrentStage)
                ) && 
                (
                    IncludedSessionIds == other.IncludedSessionIds ||
                    IncludedSessionIds != null &&
                    other.IncludedSessionIds != null &&
                    IncludedSessionIds.SequenceEqual(other.IncludedSessionIds)
                ) && 
                (
                    IntroducedSessionId == other.IntroducedSessionId ||
                    
                    IntroducedSessionId.Equals(other.IntroducedSessionId)
                ) && 
                (
                    IsAct == other.IsAct ||
                    
                    IsAct.Equals(other.IsAct)
                ) && 
                (
                    IsDefeated == other.IsDefeated ||
                    
                    IsDefeated.Equals(other.IsDefeated)
                ) && 
                (
                    LastUpdate == other.LastUpdate ||
                    LastUpdate != null &&
                    LastUpdate.Equals(other.LastUpdate)
                ) && 
                (
                    OriginatingHouse == other.OriginatingHouse ||
                    
                    OriginatingHouse.Equals(other.OriginatingHouse)
                ) && 
                (
                    ShortTitle == other.ShortTitle ||
                    ShortTitle != null &&
                    ShortTitle.Equals(other.ShortTitle)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + BillId.GetHashCode();
                    
                    hashCode = hashCode * 59 + BillTypeId.GetHashCode();
                    if (BillWithdrawn != null)
                    hashCode = hashCode * 59 + BillWithdrawn.GetHashCode();
                    
                    hashCode = hashCode * 59 + CurrentHouse.GetHashCode();
                    if (CurrentStage != null)
                    hashCode = hashCode * 59 + CurrentStage.GetHashCode();
                    if (IncludedSessionIds != null)
                    hashCode = hashCode * 59 + IncludedSessionIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + IntroducedSessionId.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAct.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsDefeated.GetHashCode();
                    if (LastUpdate != null)
                    hashCode = hashCode * 59 + LastUpdate.GetHashCode();
                    
                    hashCode = hashCode * 59 + OriginatingHouse.GetHashCode();
                    if (ShortTitle != null)
                    hashCode = hashCode * 59 + ShortTitle.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(BillSummary left, BillSummary right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(BillSummary left, BillSummary right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
