/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo : IEquatable<PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo>
    {
        /// <summary>
        /// Identification of ASPSP
        /// </summary>
        /// <value>Identification of ASPSP</value>
        /// <example>b806ae68-a45b-49d6-b25a-69fdb81dede6</example>
        [Required]
        [RegularExpression("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [DataMember(Name="aspspId", EmitDefaultValue=false)]
        public string AspspId { get; set; }


        /// <summary>
        /// Gets or Sets Flags
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<FlagsEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FlagsEnum
        {
            
            /// <summary>
            /// Enum ReturnRawConsentEnum for Return.Raw.Consent
            /// </summary>
            [EnumMember(Value = "Return.Raw.Consent")]
            ReturnRawConsentEnum = 1
        }

        /// <summary>
        /// Request information flags which can influence the behaviour or returned data
        /// </summary>
        /// <value>Request information flags which can influence the behaviour or returned data</value>
        [DataMember(Name="flags", EmitDefaultValue=false)]
        public List<PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo.FlagsEnum> Flags { get; set; }

        /// <summary>
        /// Gets or Sets Merchant
        /// </summary>
        [DataMember(Name="merchant", EmitDefaultValue=false)]
        public Merchant Merchant { get; set; }

        /// <summary>
        /// Call back uri
        /// </summary>
        /// <value>Call back uri</value>
        /// <example>https://tpp-ob.com/callback</example>
        [Required]
        [StringLength(256, MinimumLength=1)]
        [DataMember(Name="tppRedirectURI", EmitDefaultValue=false)]
        public string TppRedirectURI { get; set; }

        /// <summary>
        /// Request id given by the client
        /// </summary>
        /// <value>Request id given by the client</value>
        /// <example>123e4567-e89b-12d3-a456-426655440000</example>
        [Required]
        [RegularExpression("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")]
        [DataMember(Name="xRequestId", EmitDefaultValue=false)]
        public string XRequestId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo {\n");
            sb.Append("  AspspId: ").Append(AspspId).Append("\n");
            sb.Append("  Flags: ").Append(Flags).Append("\n");
            sb.Append("  Merchant: ").Append(Merchant).Append("\n");
            sb.Append("  TppRedirectURI: ").Append(TppRedirectURI).Append("\n");
            sb.Append("  XRequestId: ").Append(XRequestId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo)obj);
        }

        /// <summary>
        /// Returns true if PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AspspId == other.AspspId ||
                    AspspId != null &&
                    AspspId.Equals(other.AspspId)
                ) && 
                (
                    Flags == other.Flags ||
                    Flags != null &&
                    other.Flags != null &&
                    Flags.SequenceEqual(other.Flags)
                ) && 
                (
                    Merchant == other.Merchant ||
                    Merchant != null &&
                    Merchant.Equals(other.Merchant)
                ) && 
                (
                    TppRedirectURI == other.TppRedirectURI ||
                    TppRedirectURI != null &&
                    TppRedirectURI.Equals(other.TppRedirectURI)
                ) && 
                (
                    XRequestId == other.XRequestId ||
                    XRequestId != null &&
                    XRequestId.Equals(other.XRequestId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AspspId != null)
                    hashCode = hashCode * 59 + AspspId.GetHashCode();
                    if (Flags != null)
                    hashCode = hashCode * 59 + Flags.GetHashCode();
                    if (Merchant != null)
                    hashCode = hashCode * 59 + Merchant.GetHashCode();
                    if (TppRedirectURI != null)
                    hashCode = hashCode * 59 + TppRedirectURI.GetHashCode();
                    if (XRequestId != null)
                    hashCode = hashCode * 59 + XRequestId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo left, PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo left, PostPaymentsSepaCreditTransfersConsentsParamsBodyRequestInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
