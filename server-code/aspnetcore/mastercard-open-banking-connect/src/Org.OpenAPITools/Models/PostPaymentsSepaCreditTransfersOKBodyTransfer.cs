/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PostPaymentsSepaCreditTransfersOKBodyTransfer : IEquatable<PostPaymentsSepaCreditTransfersOKBodyTransfer>
    {
        /// <summary>
        /// PI / Transfer identification
        /// </summary>
        /// <value>PI / Transfer identification</value>
        /// <example>trasnferIdentificaion1</example>
        [Required]
        [DataMember(Name="paymentId", EmitDefaultValue=false)]
        public string PaymentId { get; set; }

        /// <summary>
        /// Rejection reson code
        /// </summary>
        /// <value>Rejection reson code</value>
        /// <example>AM04</example>
        [DataMember(Name="statusReasonCode", EmitDefaultValue=false)]
        public string StatusReasonCode { get; set; }


        /// <summary>
        /// Status of the payment
        /// </summary>
        /// <value>Status of the payment</value>
        [TypeConverter(typeof(CustomEnumConverter<TransactionStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TransactionStatusEnum
        {
            
            /// <summary>
            /// Enum ACCPEnum for ACCP
            /// </summary>
            [EnumMember(Value = "ACCP")]
            ACCPEnum = 1,
            
            /// <summary>
            /// Enum ACSCEnum for ACSC
            /// </summary>
            [EnumMember(Value = "ACSC")]
            ACSCEnum = 2,
            
            /// <summary>
            /// Enum ACSPEnum for ACSP
            /// </summary>
            [EnumMember(Value = "ACSP")]
            ACSPEnum = 3,
            
            /// <summary>
            /// Enum ACTCEnum for ACTC
            /// </summary>
            [EnumMember(Value = "ACTC")]
            ACTCEnum = 4,
            
            /// <summary>
            /// Enum ACWCEnum for ACWC
            /// </summary>
            [EnumMember(Value = "ACWC")]
            ACWCEnum = 5,
            
            /// <summary>
            /// Enum ACWPEnum for ACWP
            /// </summary>
            [EnumMember(Value = "ACWP")]
            ACWPEnum = 6,
            
            /// <summary>
            /// Enum PDNGEnum for PDNG
            /// </summary>
            [EnumMember(Value = "PDNG")]
            PDNGEnum = 7,
            
            /// <summary>
            /// Enum RCVDEnum for RCVD
            /// </summary>
            [EnumMember(Value = "RCVD")]
            RCVDEnum = 8,
            
            /// <summary>
            /// Enum RJCTEnum for RJCT
            /// </summary>
            [EnumMember(Value = "RJCT")]
            RJCTEnum = 9,
            
            /// <summary>
            /// Enum CANCEnum for CANC
            /// </summary>
            [EnumMember(Value = "CANC")]
            CANCEnum = 10
        }

        /// <summary>
        /// Status of the payment
        /// </summary>
        /// <value>Status of the payment</value>
        [Required]
        [DataMember(Name="transactionStatus", EmitDefaultValue=true)]
        public TransactionStatusEnum TransactionStatus { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostPaymentsSepaCreditTransfersOKBodyTransfer {\n");
            sb.Append("  PaymentId: ").Append(PaymentId).Append("\n");
            sb.Append("  StatusReasonCode: ").Append(StatusReasonCode).Append("\n");
            sb.Append("  TransactionStatus: ").Append(TransactionStatus).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostPaymentsSepaCreditTransfersOKBodyTransfer)obj);
        }

        /// <summary>
        /// Returns true if PostPaymentsSepaCreditTransfersOKBodyTransfer instances are equal
        /// </summary>
        /// <param name="other">Instance of PostPaymentsSepaCreditTransfersOKBodyTransfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostPaymentsSepaCreditTransfersOKBodyTransfer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PaymentId == other.PaymentId ||
                    PaymentId != null &&
                    PaymentId.Equals(other.PaymentId)
                ) && 
                (
                    StatusReasonCode == other.StatusReasonCode ||
                    StatusReasonCode != null &&
                    StatusReasonCode.Equals(other.StatusReasonCode)
                ) && 
                (
                    TransactionStatus == other.TransactionStatus ||
                    
                    TransactionStatus.Equals(other.TransactionStatus)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PaymentId != null)
                    hashCode = hashCode * 59 + PaymentId.GetHashCode();
                    if (StatusReasonCode != null)
                    hashCode = hashCode * 59 + StatusReasonCode.GetHashCode();
                    
                    hashCode = hashCode * 59 + TransactionStatus.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostPaymentsSepaCreditTransfersOKBodyTransfer left, PostPaymentsSepaCreditTransfersOKBodyTransfer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostPaymentsSepaCreditTransfersOKBodyTransfer left, PostPaymentsSepaCreditTransfersOKBodyTransfer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
