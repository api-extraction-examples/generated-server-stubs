/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * The version of the OpenAPI document: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PostAspspsOKBodyAspspsItems : IEquatable<PostAspspsOKBodyAspspsItems>
    {

        /// <summary>
        /// Gets or Sets AspspServices
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<AspspServicesEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AspspServicesEnum
        {
            
            /// <summary>
            /// Enum AISEnum for AIS
            /// </summary>
            [EnumMember(Value = "AIS")]
            AISEnum = 1,
            
            /// <summary>
            /// Enum PISEnum for PIS
            /// </summary>
            [EnumMember(Value = "PIS")]
            PISEnum = 2,
            
            /// <summary>
            /// Enum COFEnum for COF
            /// </summary>
            [EnumMember(Value = "COF")]
            COFEnum = 3
        }

        /// <summary>
        /// Provided services, AIS - account information, PIS - payment initiation
        /// </summary>
        /// <value>Provided services, AIS - account information, PIS - payment initiation</value>
        /// <example>[AIS, PIS, COF]</example>
        [DataMember(Name="aspspServices", EmitDefaultValue=false)]
        public List<PostAspspsOKBodyAspspsItems.AspspServicesEnum> AspspServices { get; set; }

        /// <summary>
        /// Capabilities related to api profile assigned to ASPSP
        /// </summary>
        /// <value>Capabilities related to api profile assigned to ASPSP</value>
        /// <example>{delete_ais_consent&#x3D;true, obtain_ais_consent&#x3D;true, retrieve_accounts&#x3D;true}</example>
        [DataMember(Name="capabilities", EmitDefaultValue=false)]
        public Dictionary<string, bool> Capabilities { get; set; }

        /// <summary>
        /// Country code
        /// </summary>
        /// <value>Country code</value>
        /// <example>UK</example>
        [DataMember(Name="country", EmitDefaultValue=false)]
        public string Country { get; set; }

        /// <summary>
        /// Identification of the ASPSP
        /// </summary>
        /// <value>Identification of the ASPSP</value>
        /// <example>123e4567-e89b-12d3-a456-426655440000</example>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Logo
        /// </summary>
        [DataMember(Name="logo", EmitDefaultValue=false)]
        public LogoObject Logo { get; set; }

        /// <summary>
        /// Name of the ASPSP
        /// </summary>
        /// <value>Name of the ASPSP</value>
        /// <example>Wood bank</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// ASPSP profile
        /// </summary>
        /// <value>ASPSP profile</value>
        /// <example>CMA9</example>
        [DataMember(Name="profile", EmitDefaultValue=false)]
        public string Profile { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostAspspsOKBodyAspspsItems {\n");
            sb.Append("  AspspServices: ").Append(AspspServices).Append("\n");
            sb.Append("  Capabilities: ").Append(Capabilities).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Logo: ").Append(Logo).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Profile: ").Append(Profile).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostAspspsOKBodyAspspsItems)obj);
        }

        /// <summary>
        /// Returns true if PostAspspsOKBodyAspspsItems instances are equal
        /// </summary>
        /// <param name="other">Instance of PostAspspsOKBodyAspspsItems to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostAspspsOKBodyAspspsItems other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AspspServices == other.AspspServices ||
                    AspspServices != null &&
                    other.AspspServices != null &&
                    AspspServices.SequenceEqual(other.AspspServices)
                ) && 
                (
                    Capabilities == other.Capabilities ||
                    Capabilities != null &&
                    other.Capabilities != null &&
                    Capabilities.SequenceEqual(other.Capabilities)
                ) && 
                (
                    Country == other.Country ||
                    Country != null &&
                    Country.Equals(other.Country)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Logo == other.Logo ||
                    Logo != null &&
                    Logo.Equals(other.Logo)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Profile == other.Profile ||
                    Profile != null &&
                    Profile.Equals(other.Profile)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AspspServices != null)
                    hashCode = hashCode * 59 + AspspServices.GetHashCode();
                    if (Capabilities != null)
                    hashCode = hashCode * 59 + Capabilities.GetHashCode();
                    if (Country != null)
                    hashCode = hashCode * 59 + Country.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Logo != null)
                    hashCode = hashCode * 59 + Logo.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Profile != null)
                    hashCode = hashCode * 59 + Profile.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostAspspsOKBodyAspspsItems left, PostAspspsOKBodyAspspsItems right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostAspspsOKBodyAspspsItems left, PostAspspsOKBodyAspspsItems right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
