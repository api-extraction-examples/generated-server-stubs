/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etc… 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class MiscApiController : ControllerBase
    { 
        /// <summary>
        /// Get Latest Posts
        /// </summary>
        /// <remarks>Returns a list of latest posts (&#x60;article_ids&#x60;) for a topic/niche (as classified by the Medium platform). Example of a topic/niche can be: * blockchain * relationships * mental-health, etc …  These are known as &#x60;topic_slugs&#x60;. At any given moment, this endpoint will return a list of 25 articles (&#x60;article_ids&#x60;). </remarks>
        /// <param name="topicSlug">It&#39;s a unique string, usually hyphen-separated, representing a topic/niche, as classified by Medium.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/latestposts/{topic_slug}")]
        [ValidateModelState]
        [SwaggerOperation("LatestpostsTopicSlugGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(LatestpostsTopicSlugGet200Response), description: "OK")]
        public virtual IActionResult LatestpostsTopicSlugGet([FromRoute (Name = "topic_slug")][Required]string topicSlug)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(LatestpostsTopicSlugGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"latestposts\" : [ \"67fa62fc1971\", \"67fa62fc1971\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<LatestpostsTopicSlugGet200Response>(exampleJson)
            : default(LatestpostsTopicSlugGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Related Tags
        /// </summary>
        /// <remarks>Returns a list of &#x60;related_tags&#x60; for the given &#x60;tag&#x60;. </remarks>
        /// <param name="tag">It&#39;s a unique string, usually hyphen-separated, representing a class of content.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/related_tags/{tag}")]
        [ValidateModelState]
        [SwaggerOperation("RelatedTagsTagGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(RelatedTagsTagGet200Response), description: "OK")]
        public virtual IActionResult RelatedTagsTagGet([FromRoute (Name = "tag")][Required]string tag)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(RelatedTagsTagGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"related_tags\" : [ \"cryptocurrency\", \"cryptocurrency\" ],\n  \"given_tag\" : \"blockchain\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<RelatedTagsTagGet200Response>(exampleJson)
            : default(RelatedTagsTagGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Top Writers
        /// </summary>
        /// <remarks>Returns a list of top writers (&#x60;user_ids&#x60;) within a particular topic/niche (&#x60;topic_slug&#x60;).  e.g.  - blockchain - relationships - artificial-intelligence, etc ...  **Note:** You can use optional &#x60;count&#x60; query parameter to limit the number of results.  The maximum number of top writers within a topic/niche will be 250. </remarks>
        /// <param name="topicSlug">It&#39;s a unique string, usually hyphen-separated, representing a topic/niche, as classified by Medium.</param>
        /// <param name="count">Limits the number of &#x60;article_ids&#x60; in the result.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/top_writer/{topic_slug}")]
        [ValidateModelState]
        [SwaggerOperation("TopWriterTopicSlugGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(TopWriterTopicSlugGet200Response), description: "OK")]
        public virtual IActionResult TopWriterTopicSlugGet([FromRoute (Name = "topic_slug")][Required]string topicSlug, [FromQuery (Name = "count")]int? count)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TopWriterTopicSlugGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"top_writers\" : [ \"1985b61817c3\", \"1985b61817c3\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TopWriterTopicSlugGet200Response>(exampleJson)
            : default(TopWriterTopicSlugGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Topfeeds
        /// </summary>
        /// <remarks>Returns a list of &#x60;article_ids&#x60; (length: 25) for the given &#x60;tag&#x60; and &#x60;mode&#x60;. </remarks>
        /// <param name="tag">It&#39;s a unique string, usually hyphen-separated, representing a class of content.</param>
        /// <param name="mode">Mode:    - &#x60;hot&#x60; : For getting trending articles   - &#x60;new&#x60; : For getting latest articles   - &#x60;top_year&#x60; : For getting best articles of the year   - &#x60;top_month&#x60; : For getting best articles of the month   - &#x60;top_week&#x60; : For getting best articles of the week   - &#x60;top_all_time&#x60;: For getting best article of all time </param>
        /// <param name="after">To get the subsequent top feeds. (&#x60;after&#x60; &amp;lt; 250)</param>
        /// <param name="count">To limit the number of top feeds. (&#x60;count&#x60; &amp;lt; 25)</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/topfeeds/{tag}/{mode}")]
        [ValidateModelState]
        [SwaggerOperation("TopfeedsTagModeGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(TopfeedsTagModeGet200Response), description: "OK")]
        public virtual IActionResult TopfeedsTagModeGet([FromRoute (Name = "tag")][Required]string tag, [FromRoute (Name = "mode")][Required]string mode, [FromQuery (Name = "after")]int? after, [FromQuery (Name = "count")]int? count)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(TopfeedsTagModeGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"topfeeds\" : [ \"b2076afc4930\", \"b2076afc4930\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<TopfeedsTagModeGet200Response>(exampleJson)
            : default(TopfeedsTagModeGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
