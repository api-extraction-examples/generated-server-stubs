/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UserApiController : ControllerBase
    { 
        /// <summary>
        /// Get User ID
        /// </summary>
        /// <remarks>Returns the unique &#x60;user_id&#x60; for the given &#x60;username&#x60;.  **Note:** You can find the &#x60;username&#x60; from the user&#39;s/author&#39;s profile page URL.  - **username**.medium.com - medium.com/@**username** </remarks>
        /// <param name="username">It&#39;s a unique string chosen by every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/id_for/{username}")]
        [ValidateModelState]
        [SwaggerOperation("UserIdForUsernameGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserIdForUsernameGet200Response), description: "OK")]
        public virtual IActionResult UserIdForUsernameGet([FromRoute (Name = "username")][Required]string username)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserIdForUsernameGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"id\" : \"1985b61817c3\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserIdForUsernameGet200Response>(exampleJson)
            : default(UserIdForUsernameGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User&#39;s Articles
        /// </summary>
        /// <remarks>Returns the list of articles (&#x60;article_ids&#x60;) written by the user. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/articles")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdArticlesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdArticlesGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdArticlesGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdArticlesGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"associated_articles\" : [ \"562c5821b5f0\", \"562c5821b5f0\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdArticlesGet200Response>(exampleJson)
            : default(UserUserIdArticlesGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User Followers
        /// </summary>
        /// <remarks>Returns the list of &#x60;user_ids&#x60; of the user&#39;s followers.  **Note:** The length of this followers&#39; list might be different from what you get in  the \&quot;Get User Info\&quot; Endpoint. It&#39;s because, this list doesn&#39;t include Medium Users who  left the platform. If you really need the exact followers&#39; count, use this endpoint to get the followers&#39;  list and take its length as the exact followers&#39; count </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <param name="count">To limit the number of results. (count &amp;lt; 1500)</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/followers")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdFollowersGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdFollowersGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdFollowersGet([FromRoute (Name = "user_id")][Required]string userId, [FromQuery (Name = "count")]int? count)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdFollowersGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"followers\" : [ \"105e6602fb79\", \"105e6602fb79\" ],\n  \"id\" : \"14d5c41e0264\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdFollowersGet200Response>(exampleJson)
            : default(UserUserIdFollowersGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User Following
        /// </summary>
        /// <remarks>Returns the list of &#x60;user_ids&#x60; of the user&#39;s followings.  **Note:** Currently, this list does not contain the &#x60;publication_ids&#x60; of the publications that the user is following. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <param name="count">To limit the number of results. (count &amp;lt; 1500)</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/following")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdFollowingGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdFollowingGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdFollowingGet([FromRoute (Name = "user_id")][Required]string userId, [FromQuery (Name = "count")]int? count)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdFollowingGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"following\" : [ \"c61f93eeb8a5\", \"c61f93eeb8a5\" ],\n  \"id\" : \"14d5c41e0264\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdFollowingGet200Response>(exampleJson)
            : default(UserUserIdFollowingGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User Info
        /// </summary>
        /// <remarks>Returns user related information like *Full name, Bio, Followers count, Following count, Twitter username, Profile-image URL, User ID, etc...*   It takes &#x60;user_id&#x60; as the path parameter.  **Note:** If you don&#39;t know the &#x60;user_id&#x60;, then you can get it from the endpoint\\ &#39;/user/id_for/{&#x60;username&#x60;}&#39;. </remarks>
        /// <param name="userId">It&#39;s a unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"has_list\" : true,\n  \"allow_notes\" : true,\n  \"image_url\" : \"https://miro.medium.com/1*C92Hx7k9nRM7TPlrmhgW9w.jpeg\",\n  \"is_book_author\" : false,\n  \"top_writer_in\" : [ \"programming\", \"programming\" ],\n  \"twitter_username\" : \"one_anachronism\",\n  \"bio\" : \"Obsessed with Tech Biz Arts &amp; Words; Does NOT dumb down the writing; Skilled Wordsmith; Delivers the best\",\n  \"is_suspended\" : false,\n  \"medium_member_at\" : \"2020-06-24 16:05:46\",\n  \"following_count\" : 4,\n  \"is_writer_program_enrolled\" : true,\n  \"followers_count\" : 450,\n  \"fullname\" : \"Nishu Jain\",\n  \"id\" : \"1985b61817c3\",\n  \"username\" : \"nishu-jain\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdGet200Response>(exampleJson)
            : default(UserUserIdGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User&#39;s Interests
        /// </summary>
        /// <remarks>Returns a list of tags that the given user follows. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/interests")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdInterestsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdInterestsGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdInterestsGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdInterestsGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"tags_followed\" : [ \"software-engineering\", \"software-engineering\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdInterestsGet200Response>(exampleJson)
            : default(UserUserIdInterestsGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User&#39;s Lists
        /// </summary>
        /// <remarks>Returns an array of &#x60;list_ids&#x60; created by the user.  **Note:** You can check whether the use has created lists or not beforehand. Check the  &#x60;has_list&#x60; attribute in the \&quot;Article Info\&quot; endpoint. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/lists")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdListsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdListsGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdListsGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdListsGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"user_id\" : \"5142451174a3\",\n  \"lists\" : [ \"95b41261bee0\", \"95b41261bee0\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdListsGet200Response>(exampleJson)
            : default(UserUserIdListsGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User&#39;s Publications
        /// </summary>
        /// <remarks>Returns a list of &#x60;publication_ids&#x60; where the user is the editor and/or creator. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/publications")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdPublicationsGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdPublicationsGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdPublicationsGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdPublicationsGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"user_id\" : \"14d5c41e0264\",\n  \"publications\" : [ \"bff2346ccdf1\", \"bff2346ccdf1\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdPublicationsGet200Response>(exampleJson)
            : default(UserUserIdPublicationsGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get User&#39;s Top Articles
        /// </summary>
        /// <remarks>Returns a list of &#x60;article_ids&#x60; of the top 10 articles on the user&#39;s profile, for a given &#x60;user_id&#x60;. </remarks>
        /// <param name="userId">Unique hash id assigned to every single Medium user.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/user/{user_id}/top_articles")]
        [ValidateModelState]
        [SwaggerOperation("UserUserIdTopArticlesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserUserIdArticlesGet200Response), description: "OK")]
        public virtual IActionResult UserUserIdTopArticlesGet([FromRoute (Name = "user_id")][Required]string userId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserUserIdArticlesGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"associated_articles\" : [ \"562c5821b5f0\", \"562c5821b5f0\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserUserIdArticlesGet200Response>(exampleJson)
            : default(UserUserIdArticlesGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
