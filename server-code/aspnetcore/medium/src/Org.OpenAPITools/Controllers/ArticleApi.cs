/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etc… 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ArticleApiController : ControllerBase
    { 
        /// <summary>
        /// Get Article&#39;s Content
        /// </summary>
        /// <remarks>Returns the content of an article/story, for the corresponding &#x60;article_id&#x60; </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}/content")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdContentGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdContentGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdContentGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdContentGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"content\" : \"Article title\nArticle Subtitle\nArticle Content ....\n\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdContentGet200Response>(exampleJson)
            : default(ArticleArticleIdContentGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Article Fans
        /// </summary>
        /// <remarks>Returns a list of &#x60;user_ids&#x60; of the people who clapped on the article (a.k.a &#x60;voters&#x60;). </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}/fans")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdFansGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdFansGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdFansGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdFansGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"article_id\" : \"67fa62fc1971\",\n  \"voters\" : [ \"fa40650a485\", \"fa40650a485\" ],\n  \"count\" : 145\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdFansGet200Response>(exampleJson)
            : default(ArticleArticleIdFansGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Article Info
        /// </summary>
        /// <remarks>Returns the article related information such as *Title, Subtitle, Tags,  Topics* (assigned by Medium), *Publication, Published date and time,  Clap Count, Voter Count, Word Count, Reading Time, Language, etc…* </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"is_locked\" : true,\n  \"reading_time\" : 3.5720125786164,\n  \"responses_count\" : 10,\n  \"voters\" : 3,\n  \"author\" : \"1985b61817c3\",\n  \"image_url\" : \"https://miro.medium.com/1*W0wM9xIeeIR3_Oo0E_thaA.png\",\n  \"is_series\" : false,\n  \"topics\" : [ \"mental-health\", \"mental-health\" ],\n  \"title\" : \"4 Tips to Strengthen Your Bonds — Now\",\n  \"url\" : \"https://medium.com/age-of-awareness/re-energizing-your-relationship-in-the-midst-of-a-crisis-f06086080568\",\n  \"last_modified_at\" : \"2021-05-28 04:22:48\",\n  \"tags\" : [ \"relationships\", \"relationships\" ],\n  \"publication_id\" : \"e7040e67514c\",\n  \"word_count\" : 845,\n  \"subtitle\" : \"Re-energize your relationship in the midst of a crisis\",\n  \"id\" : \"f06086080568\",\n  \"lang\" : \"en\",\n  \"published_at\" : \"2020-08-25 11:08:18\",\n  \"claps\" : 53\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdGet200Response>(exampleJson)
            : default(ArticleArticleIdGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Article&#39;s Markdown
        /// </summary>
        /// <remarks>Returns the markdown of an article/story from Medium, for the corresponding &#x60;article_id&#x60; </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}/markdown")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdMarkdownGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdMarkdownGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdMarkdownGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdMarkdownGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"markdown\" : \"# Article title\n## Article Subtitle\nArticle **Content** with lot of _markups_ ....\n![Images Alt](Image URL)\n\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdMarkdownGet200Response>(exampleJson)
            : default(ArticleArticleIdMarkdownGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Related Articles
        /// </summary>
        /// <remarks>Returns a list of &#x60;article_ids&#x60; of the related posts. (Length &#x3D; 5)  **Note:** If the given article is self-published, related posts will belong to the same author,  else related posts will belong to the publication in which the article is published. </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}/related")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdRelatedGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdRelatedGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdRelatedGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdRelatedGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"related_articles\" : [ \"f393206c6626\", \"f393206c6626\" ],\n  \"id\" : \"67fa62fc1971\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdRelatedGet200Response>(exampleJson)
            : default(ArticleArticleIdRelatedGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get Article Responses
        /// </summary>
        /// <remarks>Returns a list of responses (&#x60;response_ids&#x60;, same as &#x60;article_ids&#x60;) for a given article (&#x60;article_id&#x60;) Note: To see the content of the response, use the \&quot;Get Article&#39;s Content\&quot; endpoint </remarks>
        /// <param name="articleId">It&#39;s a unique hash id assigned to every Medium Article.</param>
        /// <response code="200">OK</response>
        [HttpGet]
        [Route("/article/{article_id}/responses")]
        [ValidateModelState]
        [SwaggerOperation("ArticleArticleIdResponsesGet")]
        [SwaggerResponse(statusCode: 200, type: typeof(ArticleArticleIdResponsesGet200Response), description: "OK")]
        public virtual IActionResult ArticleArticleIdResponsesGet([FromRoute (Name = "article_id")][Required]string articleId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ArticleArticleIdResponsesGet200Response));
            string exampleJson = null;
            exampleJson = "{\n  \"responses\" : [ \"a9bbc22aa1e6\", \"a9bbc22aa1e6\" ],\n  \"id\" : \"67fa62fc1971\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ArticleArticleIdResponsesGet200Response>(exampleJson)
            : default(ArticleArticleIdResponsesGet200Response);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
