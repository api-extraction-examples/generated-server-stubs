/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserUserIdGet200Response : IEquatable<UserUserIdGet200Response>
    {
        /// <summary>
        /// Gets or Sets AllowNotes
        /// </summary>
        [DataMember(Name="allow_notes", EmitDefaultValue=true)]
        public bool AllowNotes { get; set; }

        /// <summary>
        /// Gets or Sets Bio
        /// </summary>
        /// <example>Obsessed with Tech Biz Arts &amp;amp; Words; Does NOT dumb down the writing; Skilled Wordsmith; Delivers the best</example>
        [DataMember(Name="bio", EmitDefaultValue=false)]
        public string Bio { get; set; }

        /// <summary>
        /// Gets or Sets FollowersCount
        /// </summary>
        /// <example>450</example>
        [DataMember(Name="followers_count", EmitDefaultValue=true)]
        public int FollowersCount { get; set; }

        /// <summary>
        /// Gets or Sets FollowingCount
        /// </summary>
        /// <example>4</example>
        [DataMember(Name="following_count", EmitDefaultValue=true)]
        public int FollowingCount { get; set; }

        /// <summary>
        /// Gets or Sets Fullname
        /// </summary>
        /// <example>Nishu Jain</example>
        [DataMember(Name="fullname", EmitDefaultValue=false)]
        public string Fullname { get; set; }

        /// <summary>
        /// Gets or Sets HasList
        /// </summary>
        /// <example>true</example>
        [DataMember(Name="has_list", EmitDefaultValue=true)]
        public bool HasList { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>1985b61817c3</example>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        /// <example>https://miro.medium.com/1*C92Hx7k9nRM7TPlrmhgW9w.jpeg</example>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsBookAuthor
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="is_book_author", EmitDefaultValue=true)]
        public bool IsBookAuthor { get; set; }

        /// <summary>
        /// Gets or Sets IsSuspended
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="is_suspended", EmitDefaultValue=true)]
        public bool IsSuspended { get; set; }

        /// <summary>
        /// Gets or Sets IsWriterProgramEnrolled
        /// </summary>
        [DataMember(Name="is_writer_program_enrolled", EmitDefaultValue=true)]
        public bool IsWriterProgramEnrolled { get; set; }

        /// <summary>
        /// Gets or Sets MediumMemberAt
        /// </summary>
        /// <example>2020-06-24 16:05:46</example>
        [DataMember(Name="medium_member_at", EmitDefaultValue=false)]
        public string MediumMemberAt { get; set; }

        /// <summary>
        /// Gets or Sets TopWriterIn
        /// </summary>
        [DataMember(Name="top_writer_in", EmitDefaultValue=false)]
        public List<string> TopWriterIn { get; set; }

        /// <summary>
        /// Gets or Sets TwitterUsername
        /// </summary>
        /// <example>one_anachronism</example>
        [DataMember(Name="twitter_username", EmitDefaultValue=false)]
        public string TwitterUsername { get; set; }

        /// <summary>
        /// Gets or Sets Username
        /// </summary>
        /// <example>nishu-jain</example>
        [DataMember(Name="username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserUserIdGet200Response {\n");
            sb.Append("  AllowNotes: ").Append(AllowNotes).Append("\n");
            sb.Append("  Bio: ").Append(Bio).Append("\n");
            sb.Append("  FollowersCount: ").Append(FollowersCount).Append("\n");
            sb.Append("  FollowingCount: ").Append(FollowingCount).Append("\n");
            sb.Append("  Fullname: ").Append(Fullname).Append("\n");
            sb.Append("  HasList: ").Append(HasList).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IsBookAuthor: ").Append(IsBookAuthor).Append("\n");
            sb.Append("  IsSuspended: ").Append(IsSuspended).Append("\n");
            sb.Append("  IsWriterProgramEnrolled: ").Append(IsWriterProgramEnrolled).Append("\n");
            sb.Append("  MediumMemberAt: ").Append(MediumMemberAt).Append("\n");
            sb.Append("  TopWriterIn: ").Append(TopWriterIn).Append("\n");
            sb.Append("  TwitterUsername: ").Append(TwitterUsername).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserUserIdGet200Response)obj);
        }

        /// <summary>
        /// Returns true if UserUserIdGet200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of UserUserIdGet200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserUserIdGet200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AllowNotes == other.AllowNotes ||
                    
                    AllowNotes.Equals(other.AllowNotes)
                ) && 
                (
                    Bio == other.Bio ||
                    Bio != null &&
                    Bio.Equals(other.Bio)
                ) && 
                (
                    FollowersCount == other.FollowersCount ||
                    
                    FollowersCount.Equals(other.FollowersCount)
                ) && 
                (
                    FollowingCount == other.FollowingCount ||
                    
                    FollowingCount.Equals(other.FollowingCount)
                ) && 
                (
                    Fullname == other.Fullname ||
                    Fullname != null &&
                    Fullname.Equals(other.Fullname)
                ) && 
                (
                    HasList == other.HasList ||
                    
                    HasList.Equals(other.HasList)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    IsBookAuthor == other.IsBookAuthor ||
                    
                    IsBookAuthor.Equals(other.IsBookAuthor)
                ) && 
                (
                    IsSuspended == other.IsSuspended ||
                    
                    IsSuspended.Equals(other.IsSuspended)
                ) && 
                (
                    IsWriterProgramEnrolled == other.IsWriterProgramEnrolled ||
                    
                    IsWriterProgramEnrolled.Equals(other.IsWriterProgramEnrolled)
                ) && 
                (
                    MediumMemberAt == other.MediumMemberAt ||
                    MediumMemberAt != null &&
                    MediumMemberAt.Equals(other.MediumMemberAt)
                ) && 
                (
                    TopWriterIn == other.TopWriterIn ||
                    TopWriterIn != null &&
                    other.TopWriterIn != null &&
                    TopWriterIn.SequenceEqual(other.TopWriterIn)
                ) && 
                (
                    TwitterUsername == other.TwitterUsername ||
                    TwitterUsername != null &&
                    TwitterUsername.Equals(other.TwitterUsername)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + AllowNotes.GetHashCode();
                    if (Bio != null)
                    hashCode = hashCode * 59 + Bio.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowersCount.GetHashCode();
                    
                    hashCode = hashCode * 59 + FollowingCount.GetHashCode();
                    if (Fullname != null)
                    hashCode = hashCode * 59 + Fullname.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasList.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsBookAuthor.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSuspended.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsWriterProgramEnrolled.GetHashCode();
                    if (MediumMemberAt != null)
                    hashCode = hashCode * 59 + MediumMemberAt.GetHashCode();
                    if (TopWriterIn != null)
                    hashCode = hashCode * 59 + TopWriterIn.GetHashCode();
                    if (TwitterUsername != null)
                    hashCode = hashCode * 59 + TwitterUsername.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserUserIdGet200Response left, UserUserIdGet200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserUserIdGet200Response left, UserUserIdGet200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
