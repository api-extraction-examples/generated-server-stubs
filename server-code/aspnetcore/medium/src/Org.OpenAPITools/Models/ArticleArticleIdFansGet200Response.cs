/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ArticleArticleIdFansGet200Response : IEquatable<ArticleArticleIdFansGet200Response>
    {
        /// <summary>
        /// Gets or Sets ArticleId
        /// </summary>
        /// <example>67fa62fc1971</example>
        [DataMember(Name="article_id", EmitDefaultValue=false)]
        public string ArticleId { get; set; }

        /// <summary>
        /// Gets or Sets Count
        /// </summary>
        /// <example>145</example>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets Voters
        /// </summary>
        [DataMember(Name="voters", EmitDefaultValue=false)]
        public List<string> Voters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleArticleIdFansGet200Response {\n");
            sb.Append("  ArticleId: ").Append(ArticleId).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  Voters: ").Append(Voters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticleArticleIdFansGet200Response)obj);
        }

        /// <summary>
        /// Returns true if ArticleArticleIdFansGet200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleArticleIdFansGet200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleArticleIdFansGet200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ArticleId == other.ArticleId ||
                    ArticleId != null &&
                    ArticleId.Equals(other.ArticleId)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    Voters == other.Voters ||
                    Voters != null &&
                    other.Voters != null &&
                    Voters.SequenceEqual(other.Voters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ArticleId != null)
                    hashCode = hashCode * 59 + ArticleId.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (Voters != null)
                    hashCode = hashCode * 59 + Voters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ArticleArticleIdFansGet200Response left, ArticleArticleIdFansGet200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticleArticleIdFansGet200Response left, ArticleArticleIdFansGet200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
