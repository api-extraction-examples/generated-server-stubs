/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etc… 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ArticleArticleIdGet200Response : IEquatable<ArticleArticleIdGet200Response>
    {
        /// <summary>
        /// Gets or Sets Author
        /// </summary>
        /// <example>1985b61817c3</example>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Claps
        /// </summary>
        /// <example>53</example>
        [DataMember(Name="claps", EmitDefaultValue=true)]
        public int Claps { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>f06086080568</example>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ImageUrl
        /// </summary>
        /// <example>https://miro.medium.com/1*W0wM9xIeeIR3_Oo0E_thaA.png</example>
        [DataMember(Name="image_url", EmitDefaultValue=false)]
        public string ImageUrl { get; set; }

        /// <summary>
        /// Gets or Sets IsLocked
        /// </summary>
        /// <example>true</example>
        [DataMember(Name="is_locked", EmitDefaultValue=true)]
        public bool IsLocked { get; set; }

        /// <summary>
        /// Gets or Sets IsSeries
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="is_series", EmitDefaultValue=true)]
        public bool IsSeries { get; set; }

        /// <summary>
        /// Gets or Sets Lang
        /// </summary>
        /// <example>en</example>
        [DataMember(Name="lang", EmitDefaultValue=false)]
        public string Lang { get; set; }

        /// <summary>
        /// Gets or Sets LastModifiedAt
        /// </summary>
        /// <example>2021-05-28 04:22:48</example>
        [DataMember(Name="last_modified_at", EmitDefaultValue=false)]
        public string LastModifiedAt { get; set; }

        /// <summary>
        /// Gets or Sets PublicationId
        /// </summary>
        /// <example>e7040e67514c</example>
        [DataMember(Name="publication_id", EmitDefaultValue=false)]
        public string PublicationId { get; set; }

        /// <summary>
        /// Gets or Sets PublishedAt
        /// </summary>
        /// <example>2020-08-25 11:08:18</example>
        [DataMember(Name="published_at", EmitDefaultValue=false)]
        public string PublishedAt { get; set; }

        /// <summary>
        /// Gets or Sets ReadingTime
        /// </summary>
        /// <example>3.5720125786164</example>
        [DataMember(Name="reading_time", EmitDefaultValue=true)]
        public decimal ReadingTime { get; set; }

        /// <summary>
        /// Gets or Sets ResponsesCount
        /// </summary>
        /// <example>10</example>
        [DataMember(Name="responses_count", EmitDefaultValue=true)]
        public int ResponsesCount { get; set; }

        /// <summary>
        /// Gets or Sets Subtitle
        /// </summary>
        /// <example>Re-energize your relationship in the midst of a crisis</example>
        [DataMember(Name="subtitle", EmitDefaultValue=false)]
        public string Subtitle { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Title
        /// </summary>
        /// <example>4 Tips to Strengthen Your Bonds — Now</example>
        [DataMember(Name="title", EmitDefaultValue=false)]
        public string Title { get; set; }

        /// <summary>
        /// Gets or Sets Topics
        /// </summary>
        [DataMember(Name="topics", EmitDefaultValue=false)]
        public List<string> Topics { get; set; }

        /// <summary>
        /// Gets or Sets Url
        /// </summary>
        /// <example>https://medium.com/age-of-awareness/re-energizing-your-relationship-in-the-midst-of-a-crisis-f06086080568</example>
        [DataMember(Name="url", EmitDefaultValue=false)]
        public string Url { get; set; }

        /// <summary>
        /// Gets or Sets Voters
        /// </summary>
        /// <example>3</example>
        [DataMember(Name="voters", EmitDefaultValue=true)]
        public int Voters { get; set; }

        /// <summary>
        /// Gets or Sets WordCount
        /// </summary>
        /// <example>845</example>
        [DataMember(Name="word_count", EmitDefaultValue=true)]
        public int WordCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ArticleArticleIdGet200Response {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Claps: ").Append(Claps).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ImageUrl: ").Append(ImageUrl).Append("\n");
            sb.Append("  IsLocked: ").Append(IsLocked).Append("\n");
            sb.Append("  IsSeries: ").Append(IsSeries).Append("\n");
            sb.Append("  Lang: ").Append(Lang).Append("\n");
            sb.Append("  LastModifiedAt: ").Append(LastModifiedAt).Append("\n");
            sb.Append("  PublicationId: ").Append(PublicationId).Append("\n");
            sb.Append("  PublishedAt: ").Append(PublishedAt).Append("\n");
            sb.Append("  ReadingTime: ").Append(ReadingTime).Append("\n");
            sb.Append("  ResponsesCount: ").Append(ResponsesCount).Append("\n");
            sb.Append("  Subtitle: ").Append(Subtitle).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  Topics: ").Append(Topics).Append("\n");
            sb.Append("  Url: ").Append(Url).Append("\n");
            sb.Append("  Voters: ").Append(Voters).Append("\n");
            sb.Append("  WordCount: ").Append(WordCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ArticleArticleIdGet200Response)obj);
        }

        /// <summary>
        /// Returns true if ArticleArticleIdGet200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ArticleArticleIdGet200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ArticleArticleIdGet200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.Equals(other.Author)
                ) && 
                (
                    Claps == other.Claps ||
                    
                    Claps.Equals(other.Claps)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ImageUrl == other.ImageUrl ||
                    ImageUrl != null &&
                    ImageUrl.Equals(other.ImageUrl)
                ) && 
                (
                    IsLocked == other.IsLocked ||
                    
                    IsLocked.Equals(other.IsLocked)
                ) && 
                (
                    IsSeries == other.IsSeries ||
                    
                    IsSeries.Equals(other.IsSeries)
                ) && 
                (
                    Lang == other.Lang ||
                    Lang != null &&
                    Lang.Equals(other.Lang)
                ) && 
                (
                    LastModifiedAt == other.LastModifiedAt ||
                    LastModifiedAt != null &&
                    LastModifiedAt.Equals(other.LastModifiedAt)
                ) && 
                (
                    PublicationId == other.PublicationId ||
                    PublicationId != null &&
                    PublicationId.Equals(other.PublicationId)
                ) && 
                (
                    PublishedAt == other.PublishedAt ||
                    PublishedAt != null &&
                    PublishedAt.Equals(other.PublishedAt)
                ) && 
                (
                    ReadingTime == other.ReadingTime ||
                    
                    ReadingTime.Equals(other.ReadingTime)
                ) && 
                (
                    ResponsesCount == other.ResponsesCount ||
                    
                    ResponsesCount.Equals(other.ResponsesCount)
                ) && 
                (
                    Subtitle == other.Subtitle ||
                    Subtitle != null &&
                    Subtitle.Equals(other.Subtitle)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Title == other.Title ||
                    Title != null &&
                    Title.Equals(other.Title)
                ) && 
                (
                    Topics == other.Topics ||
                    Topics != null &&
                    other.Topics != null &&
                    Topics.SequenceEqual(other.Topics)
                ) && 
                (
                    Url == other.Url ||
                    Url != null &&
                    Url.Equals(other.Url)
                ) && 
                (
                    Voters == other.Voters ||
                    
                    Voters.Equals(other.Voters)
                ) && 
                (
                    WordCount == other.WordCount ||
                    
                    WordCount.Equals(other.WordCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    
                    hashCode = hashCode * 59 + Claps.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ImageUrl != null)
                    hashCode = hashCode * 59 + ImageUrl.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsLocked.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsSeries.GetHashCode();
                    if (Lang != null)
                    hashCode = hashCode * 59 + Lang.GetHashCode();
                    if (LastModifiedAt != null)
                    hashCode = hashCode * 59 + LastModifiedAt.GetHashCode();
                    if (PublicationId != null)
                    hashCode = hashCode * 59 + PublicationId.GetHashCode();
                    if (PublishedAt != null)
                    hashCode = hashCode * 59 + PublishedAt.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReadingTime.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResponsesCount.GetHashCode();
                    if (Subtitle != null)
                    hashCode = hashCode * 59 + Subtitle.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Title != null)
                    hashCode = hashCode * 59 + Title.GetHashCode();
                    if (Topics != null)
                    hashCode = hashCode * 59 + Topics.GetHashCode();
                    if (Url != null)
                    hashCode = hashCode * 59 + Url.GetHashCode();
                    
                    hashCode = hashCode * 59 + Voters.GetHashCode();
                    
                    hashCode = hashCode * 59 + WordCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ArticleArticleIdGet200Response left, ArticleArticleIdGet200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ArticleArticleIdGet200Response left, ArticleArticleIdGet200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
