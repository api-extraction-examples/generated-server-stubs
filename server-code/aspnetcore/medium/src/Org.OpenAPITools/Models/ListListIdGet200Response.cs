/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * The version of the OpenAPI document: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ListListIdGet200Response : IEquatable<ListListIdGet200Response>
    {
        /// <summary>
        /// &#x60;user_id&#x60; of the author
        /// </summary>
        /// <value>&#x60;user_id&#x60; of the author</value>
        /// <example>1985b61817c3</example>
        [DataMember(Name="author", EmitDefaultValue=false)]
        public string Author { get; set; }

        /// <summary>
        /// Gets or Sets Claps
        /// </summary>
        /// <example>48</example>
        [DataMember(Name="claps", EmitDefaultValue=true)]
        public int Claps { get; set; }

        /// <summary>
        /// Number of articles in the list
        /// </summary>
        /// <value>Number of articles in the list</value>
        /// <example>18</example>
        [DataMember(Name="count", EmitDefaultValue=true)]
        public int Count { get; set; }

        /// <summary>
        /// Gets or Sets CreatedAt
        /// </summary>
        /// <example>2023-03-12 06:46:46</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public string CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        /// <example>Collections of all the articles and resources related to Medium API</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>38f9e0f9bea6</example>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets LastItemInsertedAt
        /// </summary>
        /// <example>2023-03-12 06:53:02</example>
        [DataMember(Name="last_item_inserted_at", EmitDefaultValue=false)]
        public string LastItemInsertedAt { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        /// <example>Medium API</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ResponsesCount
        /// </summary>
        /// <example>1</example>
        [DataMember(Name="responses_count", EmitDefaultValue=true)]
        public int ResponsesCount { get; set; }

        /// <summary>
        /// Image URL
        /// </summary>
        /// <value>Image URL</value>
        /// <example>https://miro.medium.com/0*8f634a2860234802375db89fbfcccb5cc717f3fd.jpeg</example>
        [DataMember(Name="thumbnail", EmitDefaultValue=false)]
        public string Thumbnail { get; set; }

        /// <summary>
        /// Gets or Sets Voters
        /// </summary>
        /// <example>1</example>
        [DataMember(Name="voters", EmitDefaultValue=true)]
        public int Voters { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ListListIdGet200Response {\n");
            sb.Append("  Author: ").Append(Author).Append("\n");
            sb.Append("  Claps: ").Append(Claps).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  LastItemInsertedAt: ").Append(LastItemInsertedAt).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResponsesCount: ").Append(ResponsesCount).Append("\n");
            sb.Append("  Thumbnail: ").Append(Thumbnail).Append("\n");
            sb.Append("  Voters: ").Append(Voters).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ListListIdGet200Response)obj);
        }

        /// <summary>
        /// Returns true if ListListIdGet200Response instances are equal
        /// </summary>
        /// <param name="other">Instance of ListListIdGet200Response to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ListListIdGet200Response other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Author == other.Author ||
                    Author != null &&
                    Author.Equals(other.Author)
                ) && 
                (
                    Claps == other.Claps ||
                    
                    Claps.Equals(other.Claps)
                ) && 
                (
                    Count == other.Count ||
                    
                    Count.Equals(other.Count)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    LastItemInsertedAt == other.LastItemInsertedAt ||
                    LastItemInsertedAt != null &&
                    LastItemInsertedAt.Equals(other.LastItemInsertedAt)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ResponsesCount == other.ResponsesCount ||
                    
                    ResponsesCount.Equals(other.ResponsesCount)
                ) && 
                (
                    Thumbnail == other.Thumbnail ||
                    Thumbnail != null &&
                    Thumbnail.Equals(other.Thumbnail)
                ) && 
                (
                    Voters == other.Voters ||
                    
                    Voters.Equals(other.Voters)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Author != null)
                    hashCode = hashCode * 59 + Author.GetHashCode();
                    
                    hashCode = hashCode * 59 + Claps.GetHashCode();
                    
                    hashCode = hashCode * 59 + Count.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (LastItemInsertedAt != null)
                    hashCode = hashCode * 59 + LastItemInsertedAt.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResponsesCount.GetHashCode();
                    if (Thumbnail != null)
                    hashCode = hashCode * 59 + Thumbnail.GetHashCode();
                    
                    hashCode = hashCode * 59 + Voters.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ListListIdGet200Response left, ListListIdGet200Response right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ListListIdGet200Response left, ListListIdGet200Response right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
