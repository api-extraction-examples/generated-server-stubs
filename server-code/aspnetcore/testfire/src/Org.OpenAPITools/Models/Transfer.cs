/*
 * AltoroJ REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.2
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Transfer : IEquatable<Transfer>
    {
        /// <summary>
        /// Gets or Sets FromAccount
        /// </summary>
        /// <example>800003</example>
        [Required]
        [DataMember(Name="fromAccount", EmitDefaultValue=false)]
        public string FromAccount { get; set; }

        /// <summary>
        /// Gets or Sets ToAccount
        /// </summary>
        /// <example>800002</example>
        [Required]
        [DataMember(Name="toAccount", EmitDefaultValue=false)]
        public string ToAccount { get; set; }

        /// <summary>
        /// Gets or Sets TransferAmount
        /// </summary>
        /// <example>200</example>
        [Required]
        [DataMember(Name="transferAmount", EmitDefaultValue=false)]
        public string TransferAmount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Transfer {\n");
            sb.Append("  FromAccount: ").Append(FromAccount).Append("\n");
            sb.Append("  ToAccount: ").Append(ToAccount).Append("\n");
            sb.Append("  TransferAmount: ").Append(TransferAmount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Transfer)obj);
        }

        /// <summary>
        /// Returns true if Transfer instances are equal
        /// </summary>
        /// <param name="other">Instance of Transfer to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Transfer other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    FromAccount == other.FromAccount ||
                    FromAccount != null &&
                    FromAccount.Equals(other.FromAccount)
                ) && 
                (
                    ToAccount == other.ToAccount ||
                    ToAccount != null &&
                    ToAccount.Equals(other.ToAccount)
                ) && 
                (
                    TransferAmount == other.TransferAmount ||
                    TransferAmount != null &&
                    TransferAmount.Equals(other.TransferAmount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (FromAccount != null)
                    hashCode = hashCode * 59 + FromAccount.GetHashCode();
                    if (ToAccount != null)
                    hashCode = hashCode * 59 + ToAccount.GetHashCode();
                    if (TransferAmount != null)
                    hashCode = hashCode * 59 + TransferAmount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Transfer left, Transfer right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Transfer left, Transfer right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
