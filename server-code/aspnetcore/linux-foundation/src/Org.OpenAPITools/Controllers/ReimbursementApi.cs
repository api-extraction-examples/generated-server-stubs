/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ReimbursementApiController : ControllerBase
    { 
        /// <summary>
        /// Create Reimbursement
        /// </summary>
        /// <remarks>Create a new Reimbursement policy</remarks>
        /// <param name="projectId"></param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="500">Server Error</response>
        [HttpPost]
        [Route("/v1/reimbursement/{projectId}")]
        [Authorize(Policy = "ApiKeyAuth")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("CreateReimbursement")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server Error")]
        public virtual IActionResult CreateReimbursement([FromRoute (Name = "projectId")][Required]string projectId, [FromBody]CreateReimbursementRequest body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update Reimbursement
        /// </summary>
        /// <remarks>Update an existing Reimbursement policy</remarks>
        /// <param name="projectId"></param>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">Invalid Request</response>
        /// <response code="401">Unauthorized</response>
        /// <response code="404">Not Found</response>
        /// <response code="500">Server Error</response>
        [HttpPatch]
        [Route("/v1/reimbursement/{projectId}")]
        [Authorize(Policy = "ApiKeyAuth")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("UpdateReimbursement")]
        [SwaggerResponse(statusCode: 400, type: typeof(ErrorResponse), description: "Invalid Request")]
        [SwaggerResponse(statusCode: 401, type: typeof(ErrorResponse), description: "Unauthorized")]
        [SwaggerResponse(statusCode: 404, type: typeof(ErrorResponse), description: "Not Found")]
        [SwaggerResponse(statusCode: 500, type: typeof(ErrorResponse), description: "Server Error")]
        public virtual IActionResult UpdateReimbursement([FromRoute (Name = "projectId")][Required]string projectId, [FromBody]PolicyUpdateInput body)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ErrorResponse));
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500, default(ErrorResponse));

            throw new NotImplementedException();
        }
    }
}
