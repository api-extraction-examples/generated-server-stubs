/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class HealthStatus : IEquatable<HealthStatus>
    {
        /// <summary>
        /// Service response time
        /// </summary>
        /// <value>Service response time</value>
        [DataMember(Name="Duration", EmitDefaultValue=false)]
        public string Duration { get; set; }

        /// <summary>
        /// Service Name
        /// </summary>
        /// <value>Service Name</value>
        [DataMember(Name="Error", EmitDefaultValue=false)]
        public string Error { get; set; }

        /// <summary>
        /// Service is healthy?
        /// </summary>
        /// <value>Service is healthy?</value>
        [DataMember(Name="Healthy", EmitDefaultValue=true)]
        public bool Healthy { get; set; }

        /// <summary>
        /// Service Name
        /// </summary>
        /// <value>Service Name</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Service&#39;s server time
        /// </summary>
        /// <value>Service&#39;s server time</value>
        /// <example>2019-06-07 15:37:43.131120884 +0000 UTC m&#x3D;+0.257965506</example>
        [DataMember(Name="TimeStamp", EmitDefaultValue=false)]
        public string TimeStamp { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class HealthStatus {\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Error: ").Append(Error).Append("\n");
            sb.Append("  Healthy: ").Append(Healthy).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  TimeStamp: ").Append(TimeStamp).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((HealthStatus)obj);
        }

        /// <summary>
        /// Returns true if HealthStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of HealthStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(HealthStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Duration == other.Duration ||
                    Duration != null &&
                    Duration.Equals(other.Duration)
                ) && 
                (
                    Error == other.Error ||
                    Error != null &&
                    Error.Equals(other.Error)
                ) && 
                (
                    Healthy == other.Healthy ||
                    
                    Healthy.Equals(other.Healthy)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    TimeStamp == other.TimeStamp ||
                    TimeStamp != null &&
                    TimeStamp.Equals(other.TimeStamp)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Duration != null)
                    hashCode = hashCode * 59 + Duration.GetHashCode();
                    if (Error != null)
                    hashCode = hashCode * 59 + Error.GetHashCode();
                    
                    hashCode = hashCode * 59 + Healthy.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (TimeStamp != null)
                    hashCode = hashCode * 59 + TimeStamp.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(HealthStatus left, HealthStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(HealthStatus left, HealthStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
