/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CreateReimbursementRequest : IEquatable<CreateReimbursementRequest>
    {
        /// <summary>
        /// Gets or Sets ProjectName
        /// </summary>
        /// <example>The Looney Tunes Show</example>
        [Required]
        [DataMember(Name="ProjectName", EmitDefaultValue=false)]
        public string ProjectName { get; set; }

        /// <summary>
        /// Gets or Sets Beneficiaries
        /// </summary>
        /// <example>[{EmailAddress&#x3D;DaffyDuck@example.org, Name&#x3D;Daffy Duck}, {EmailAddress&#x3D;PorkyPig@example.org, Name&#x3D;Porky Pik}]</example>
        [DataMember(Name="Beneficiaries", EmitDefaultValue=false)]
        public List<Contact> Beneficiaries { get; set; }

        /// <summary>
        /// Gets or Sets Categories
        /// </summary>
        /// <example>[Anvils, Carrots, Travel]</example>
        [Required]
        [DataMember(Name="Categories", EmitDefaultValue=false)]
        public List<string> Categories { get; set; }

        /// <summary>
        /// Gets or Sets EntityType
        /// </summary>
        /// <example>other</example>
        [DataMember(Name="EntityType", EmitDefaultValue=false)]
        public string EntityType { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [Required]
        [DataMember(Name="Owner", EmitDefaultValue=false)]
        public Contact Owner { get; set; }

        /// <summary>
        /// Gets or Sets ProjectURL
        /// </summary>
        /// <example>https://funding.dev.platform.linuxfoundation.org/projects/asp-net</example>
        [Required]
        [DataMember(Name="ProjectURL", EmitDefaultValue=false)]
        public string ProjectURL { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CreateReimbursementRequest {\n");
            sb.Append("  ProjectName: ").Append(ProjectName).Append("\n");
            sb.Append("  Beneficiaries: ").Append(Beneficiaries).Append("\n");
            sb.Append("  Categories: ").Append(Categories).Append("\n");
            sb.Append("  EntityType: ").Append(EntityType).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  ProjectURL: ").Append(ProjectURL).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CreateReimbursementRequest)obj);
        }

        /// <summary>
        /// Returns true if CreateReimbursementRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CreateReimbursementRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CreateReimbursementRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ProjectName == other.ProjectName ||
                    ProjectName != null &&
                    ProjectName.Equals(other.ProjectName)
                ) && 
                (
                    Beneficiaries == other.Beneficiaries ||
                    Beneficiaries != null &&
                    other.Beneficiaries != null &&
                    Beneficiaries.SequenceEqual(other.Beneficiaries)
                ) && 
                (
                    Categories == other.Categories ||
                    Categories != null &&
                    other.Categories != null &&
                    Categories.SequenceEqual(other.Categories)
                ) && 
                (
                    EntityType == other.EntityType ||
                    EntityType != null &&
                    EntityType.Equals(other.EntityType)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    ProjectURL == other.ProjectURL ||
                    ProjectURL != null &&
                    ProjectURL.Equals(other.ProjectURL)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ProjectName != null)
                    hashCode = hashCode * 59 + ProjectName.GetHashCode();
                    if (Beneficiaries != null)
                    hashCode = hashCode * 59 + Beneficiaries.GetHashCode();
                    if (Categories != null)
                    hashCode = hashCode * 59 + Categories.GetHashCode();
                    if (EntityType != null)
                    hashCode = hashCode * 59 + EntityType.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (ProjectURL != null)
                    hashCode = hashCode * 59 + ProjectURL.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CreateReimbursementRequest left, CreateReimbursementRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CreateReimbursementRequest left, CreateReimbursementRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
