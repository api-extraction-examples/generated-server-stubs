/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Expensify policy tag information
    /// </summary>
    [DataContract]
    public partial class PolicyTagInput : IEquatable<PolicyTagInput>
    {
        /// <summary>
        /// email of the individual or beneficiary
        /// </summary>
        /// <value>email of the individual or beneficiary</value>
        /// <example>john-doe@email.com</example>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Unique ID of the ticket - required for travel funds
        /// </summary>
        /// <value>Unique ID of the ticket - required for travel funds</value>
        /// <example>F11B6C1D67DC6A3D</example>
        [DataMember(Name="TicketID", EmitDefaultValue=false)]
        public string TicketID { get; set; }

        /// <summary>
        /// Type of transaction
        /// </summary>
        /// <value>Type of transaction</value>
        /// <example>Travel Fund</example>
        [DataMember(Name="TxnType", EmitDefaultValue=false)]
        public string TxnType { get; set; }

        /// <summary>
        /// Unique username or lfId of the individual
        /// </summary>
        /// <value>Unique username or lfId of the individual</value>
        /// <example>john_doe</example>
        [DataMember(Name="Username", EmitDefaultValue=false)]
        public string Username { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PolicyTagInput {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  TicketID: ").Append(TicketID).Append("\n");
            sb.Append("  TxnType: ").Append(TxnType).Append("\n");
            sb.Append("  Username: ").Append(Username).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PolicyTagInput)obj);
        }

        /// <summary>
        /// Returns true if PolicyTagInput instances are equal
        /// </summary>
        /// <param name="other">Instance of PolicyTagInput to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PolicyTagInput other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    TicketID == other.TicketID ||
                    TicketID != null &&
                    TicketID.Equals(other.TicketID)
                ) && 
                (
                    TxnType == other.TxnType ||
                    TxnType != null &&
                    TxnType.Equals(other.TxnType)
                ) && 
                (
                    Username == other.Username ||
                    Username != null &&
                    Username.Equals(other.Username)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (TicketID != null)
                    hashCode = hashCode * 59 + TicketID.GetHashCode();
                    if (TxnType != null)
                    hashCode = hashCode * 59 + TxnType.GetHashCode();
                    if (Username != null)
                    hashCode = hashCode * 59 + Username.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PolicyTagInput left, PolicyTagInput right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PolicyTagInput left, PolicyTagInput right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
