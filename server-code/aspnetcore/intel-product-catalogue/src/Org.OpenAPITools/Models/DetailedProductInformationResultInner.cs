/*
 * Intel Product Catalogue Service
 *
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedProductInformationResultInner : IEquatable<DetailedProductInformationResultInner>
    {
        /// <summary>
        /// Gets or Sets CreatedDate
        /// </summary>
        /// <example>2017-12-18T03:40:13:990-0500</example>
        [DataMember(Name="created_date", EmitDefaultValue=false)]
        public string CreatedDate { get; set; }

        /// <summary>
        /// Gets or Sets MediaAsset
        /// </summary>
        [DataMember(Name="media_asset", EmitDefaultValue=false)]
        public DetailedProductInformationResultInnerAllOfMediaAsset MediaAsset { get; set; }

        /// <summary>
        /// Gets or Sets MktgPrdType
        /// </summary>
        /// <example>18</example>
        [DataMember(Name="mktg_prd_type", EmitDefaultValue=false)]
        public string MktgPrdType { get; set; }

        /// <summary>
        /// Product category
        /// </summary>
        /// <value>Product category</value>
        [DataMember(Name="product_category", EmitDefaultValue=false)]
        public List<string> ProductCategory { get; set; }

        /// <summary>
        /// Gets or Sets ProductDescription
        /// </summary>
        /// <example>Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)</example>
        [DataMember(Name="product_description", EmitDefaultValue=false)]
        public string ProductDescription { get; set; }

        /// <summary>
        /// Gets or Sets ProductId
        /// </summary>
        /// <example>123003</example>
        [DataMember(Name="product_id", EmitDefaultValue=false)]
        public string ProductId { get; set; }

        /// <summary>
        /// Gets or Sets ProductManufacturer
        /// </summary>
        /// <example>Intel</example>
        [DataMember(Name="product_manufacturer", EmitDefaultValue=false)]
        public string ProductManufacturer { get; set; }

        /// <summary>
        /// Gets or Sets ProductName
        /// </summary>
        /// <example>Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)</example>
        [DataMember(Name="product_name", EmitDefaultValue=false)]
        public string ProductName { get; set; }

        /// <summary>
        /// Gets or Sets ProductNameRaw
        /// </summary>
        /// <example>Intel Atom® Processor C2316 (1M Cache, 1.50 GHz)</example>
        [DataMember(Name="product_name_raw", EmitDefaultValue=false)]
        public string ProductNameRaw { get; set; }

        /// <summary>
        /// Gets or Sets ProductOnMarketDate
        /// </summary>
        /// <example>2017-07-11T00:00:00:000-0400</example>
        [DataMember(Name="product_on_market_date", EmitDefaultValue=false)]
        public string ProductOnMarketDate { get; set; }

        /// <summary>
        /// Gets or Sets ProductPicture
        /// </summary>
        /// <example>https://www.intel.com/content/dam/www/global/ark/badges/36866_128.gif/jcr:content/renditions/_64.gif</example>
        [DataMember(Name="product_picture", EmitDefaultValue=false)]
        public string ProductPicture { get; set; }

        /// <summary>
        /// Gets or Sets Reference
        /// </summary>
        [DataMember(Name="reference", EmitDefaultValue=false)]
        public List<DetailedProductInformationResultInnerAllOfReferenceInner> Reference { get; set; }

        /// <summary>
        /// tech spec
        /// </summary>
        /// <value>tech spec</value>
        [DataMember(Name="tech_spec", EmitDefaultValue=false)]
        public List<DetailedProductInformationResultInnerAllOfTechSpecInner> TechSpec { get; set; }

        /// <summary>
        /// Gets or Sets UpdatedDate
        /// </summary>
        /// <example>2018-10-15T03:42:52:320-0400</example>
        [DataMember(Name="updated_date", EmitDefaultValue=false)]
        public string UpdatedDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedProductInformationResultInner {\n");
            sb.Append("  CreatedDate: ").Append(CreatedDate).Append("\n");
            sb.Append("  MediaAsset: ").Append(MediaAsset).Append("\n");
            sb.Append("  MktgPrdType: ").Append(MktgPrdType).Append("\n");
            sb.Append("  ProductCategory: ").Append(ProductCategory).Append("\n");
            sb.Append("  ProductDescription: ").Append(ProductDescription).Append("\n");
            sb.Append("  ProductId: ").Append(ProductId).Append("\n");
            sb.Append("  ProductManufacturer: ").Append(ProductManufacturer).Append("\n");
            sb.Append("  ProductName: ").Append(ProductName).Append("\n");
            sb.Append("  ProductNameRaw: ").Append(ProductNameRaw).Append("\n");
            sb.Append("  ProductOnMarketDate: ").Append(ProductOnMarketDate).Append("\n");
            sb.Append("  ProductPicture: ").Append(ProductPicture).Append("\n");
            sb.Append("  Reference: ").Append(Reference).Append("\n");
            sb.Append("  TechSpec: ").Append(TechSpec).Append("\n");
            sb.Append("  UpdatedDate: ").Append(UpdatedDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedProductInformationResultInner)obj);
        }

        /// <summary>
        /// Returns true if DetailedProductInformationResultInner instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedProductInformationResultInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedProductInformationResultInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CreatedDate == other.CreatedDate ||
                    CreatedDate != null &&
                    CreatedDate.Equals(other.CreatedDate)
                ) && 
                (
                    MediaAsset == other.MediaAsset ||
                    MediaAsset != null &&
                    MediaAsset.Equals(other.MediaAsset)
                ) && 
                (
                    MktgPrdType == other.MktgPrdType ||
                    MktgPrdType != null &&
                    MktgPrdType.Equals(other.MktgPrdType)
                ) && 
                (
                    ProductCategory == other.ProductCategory ||
                    ProductCategory != null &&
                    other.ProductCategory != null &&
                    ProductCategory.SequenceEqual(other.ProductCategory)
                ) && 
                (
                    ProductDescription == other.ProductDescription ||
                    ProductDescription != null &&
                    ProductDescription.Equals(other.ProductDescription)
                ) && 
                (
                    ProductId == other.ProductId ||
                    ProductId != null &&
                    ProductId.Equals(other.ProductId)
                ) && 
                (
                    ProductManufacturer == other.ProductManufacturer ||
                    ProductManufacturer != null &&
                    ProductManufacturer.Equals(other.ProductManufacturer)
                ) && 
                (
                    ProductName == other.ProductName ||
                    ProductName != null &&
                    ProductName.Equals(other.ProductName)
                ) && 
                (
                    ProductNameRaw == other.ProductNameRaw ||
                    ProductNameRaw != null &&
                    ProductNameRaw.Equals(other.ProductNameRaw)
                ) && 
                (
                    ProductOnMarketDate == other.ProductOnMarketDate ||
                    ProductOnMarketDate != null &&
                    ProductOnMarketDate.Equals(other.ProductOnMarketDate)
                ) && 
                (
                    ProductPicture == other.ProductPicture ||
                    ProductPicture != null &&
                    ProductPicture.Equals(other.ProductPicture)
                ) && 
                (
                    Reference == other.Reference ||
                    Reference != null &&
                    other.Reference != null &&
                    Reference.SequenceEqual(other.Reference)
                ) && 
                (
                    TechSpec == other.TechSpec ||
                    TechSpec != null &&
                    other.TechSpec != null &&
                    TechSpec.SequenceEqual(other.TechSpec)
                ) && 
                (
                    UpdatedDate == other.UpdatedDate ||
                    UpdatedDate != null &&
                    UpdatedDate.Equals(other.UpdatedDate)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CreatedDate != null)
                    hashCode = hashCode * 59 + CreatedDate.GetHashCode();
                    if (MediaAsset != null)
                    hashCode = hashCode * 59 + MediaAsset.GetHashCode();
                    if (MktgPrdType != null)
                    hashCode = hashCode * 59 + MktgPrdType.GetHashCode();
                    if (ProductCategory != null)
                    hashCode = hashCode * 59 + ProductCategory.GetHashCode();
                    if (ProductDescription != null)
                    hashCode = hashCode * 59 + ProductDescription.GetHashCode();
                    if (ProductId != null)
                    hashCode = hashCode * 59 + ProductId.GetHashCode();
                    if (ProductManufacturer != null)
                    hashCode = hashCode * 59 + ProductManufacturer.GetHashCode();
                    if (ProductName != null)
                    hashCode = hashCode * 59 + ProductName.GetHashCode();
                    if (ProductNameRaw != null)
                    hashCode = hashCode * 59 + ProductNameRaw.GetHashCode();
                    if (ProductOnMarketDate != null)
                    hashCode = hashCode * 59 + ProductOnMarketDate.GetHashCode();
                    if (ProductPicture != null)
                    hashCode = hashCode * 59 + ProductPicture.GetHashCode();
                    if (Reference != null)
                    hashCode = hashCode * 59 + Reference.GetHashCode();
                    if (TechSpec != null)
                    hashCode = hashCode * 59 + TechSpec.GetHashCode();
                    if (UpdatedDate != null)
                    hashCode = hashCode * 59 + UpdatedDate.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedProductInformationResultInner left, DetailedProductInformationResultInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedProductInformationResultInner left, DetailedProductInformationResultInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
