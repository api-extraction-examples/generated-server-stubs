/*
 * Intel Product Catalogue Service
 *
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProductListingLevelInfo : IEquatable<ProductListingLevelInfo>
    {
        /// <summary>
        /// Gets or Sets PageNo
        /// </summary>
        /// <example>1</example>
        [Required]
        [DataMember(Name="page_no", EmitDefaultValue=false)]
        public string PageNo { get; set; }

        /// <summary>
        /// Gets or Sets PerPage
        /// </summary>
        /// <example>10</example>
        [Required]
        [DataMember(Name="per_page", EmitDefaultValue=true)]
        public int PerPage { get; set; }

        /// <summary>
        /// Multiple objects with product data.
        /// </summary>
        /// <value>Multiple objects with product data.</value>
        [Required]
        [DataMember(Name="result", EmitDefaultValue=false)]
        public List<ProductListingLevelInfoResultInner> Result { get; set; }

        /// <summary>
        /// Gets or Sets Status
        /// </summary>
        /// <example>success</example>
        [Required]
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets TotalCount
        /// </summary>
        /// <example>230</example>
        [Required]
        [DataMember(Name="total_count", EmitDefaultValue=true)]
        public int TotalCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProductListingLevelInfo {\n");
            sb.Append("  PageNo: ").Append(PageNo).Append("\n");
            sb.Append("  PerPage: ").Append(PerPage).Append("\n");
            sb.Append("  Result: ").Append(Result).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  TotalCount: ").Append(TotalCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProductListingLevelInfo)obj);
        }

        /// <summary>
        /// Returns true if ProductListingLevelInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of ProductListingLevelInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProductListingLevelInfo other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    PageNo == other.PageNo ||
                    PageNo != null &&
                    PageNo.Equals(other.PageNo)
                ) && 
                (
                    PerPage == other.PerPage ||
                    
                    PerPage.Equals(other.PerPage)
                ) && 
                (
                    Result == other.Result ||
                    Result != null &&
                    other.Result != null &&
                    Result.SequenceEqual(other.Result)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    TotalCount == other.TotalCount ||
                    
                    TotalCount.Equals(other.TotalCount)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (PageNo != null)
                    hashCode = hashCode * 59 + PageNo.GetHashCode();
                    
                    hashCode = hashCode * 59 + PerPage.GetHashCode();
                    if (Result != null)
                    hashCode = hashCode * 59 + Result.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    
                    hashCode = hashCode * 59 + TotalCount.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProductListingLevelInfo left, ProductListingLevelInfo right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProductListingLevelInfo left, ProductListingLevelInfo right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
