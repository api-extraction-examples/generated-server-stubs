/*
 * Intel Product Catalogue Service
 *
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * The version of the OpenAPI document: 0.1.0
 * Contact: pim.360.team@intel.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DetailedProductInformationResultInnerAllOfReferenceInner : IEquatable<DetailedProductInformationResultInnerAllOfReferenceInner>
    {
        /// <summary>
        /// Array of category id&#39;s to which the product belong to.
        /// </summary>
        /// <value>Array of category id&#39;s to which the product belong to.</value>
        [DataMember(Name="category_id", EmitDefaultValue=false)]
        public List<string> CategoryId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceId
        /// </summary>
        /// <example>2345</example>
        [DataMember(Name="reference_id", EmitDefaultValue=false)]
        public string ReferenceId { get; set; }

        /// <summary>
        /// Gets or Sets ReferenceType
        /// </summary>
        /// <example>Compatible</example>
        [DataMember(Name="reference_type", EmitDefaultValue=false)]
        public string ReferenceType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetailedProductInformationResultInnerAllOfReferenceInner {\n");
            sb.Append("  CategoryId: ").Append(CategoryId).Append("\n");
            sb.Append("  ReferenceId: ").Append(ReferenceId).Append("\n");
            sb.Append("  ReferenceType: ").Append(ReferenceType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DetailedProductInformationResultInnerAllOfReferenceInner)obj);
        }

        /// <summary>
        /// Returns true if DetailedProductInformationResultInnerAllOfReferenceInner instances are equal
        /// </summary>
        /// <param name="other">Instance of DetailedProductInformationResultInnerAllOfReferenceInner to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetailedProductInformationResultInnerAllOfReferenceInner other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CategoryId == other.CategoryId ||
                    CategoryId != null &&
                    other.CategoryId != null &&
                    CategoryId.SequenceEqual(other.CategoryId)
                ) && 
                (
                    ReferenceId == other.ReferenceId ||
                    ReferenceId != null &&
                    ReferenceId.Equals(other.ReferenceId)
                ) && 
                (
                    ReferenceType == other.ReferenceType ||
                    ReferenceType != null &&
                    ReferenceType.Equals(other.ReferenceType)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (CategoryId != null)
                    hashCode = hashCode * 59 + CategoryId.GetHashCode();
                    if (ReferenceId != null)
                    hashCode = hashCode * 59 + ReferenceId.GetHashCode();
                    if (ReferenceType != null)
                    hashCode = hashCode * 59 + ReferenceType.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DetailedProductInformationResultInnerAllOfReferenceInner left, DetailedProductInformationResultInnerAllOfReferenceInner right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DetailedProductInformationResultInnerAllOfReferenceInner left, DetailedProductInformationResultInnerAllOfReferenceInner right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
