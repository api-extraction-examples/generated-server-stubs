/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The context from which this event originated.
    /// </summary>
    [DataContract]
    public partial class AuditLogEventContext : IEquatable<AuditLogEventContext>
    {

        /// <summary>
        /// The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.
        /// </summary>
        /// <value>The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ApiAuthenticationMethodEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApiAuthenticationMethodEnum
        {
            
            /// <summary>
            /// Enum CookieEnum for cookie
            /// </summary>
            [EnumMember(Value = "cookie")]
            CookieEnum = 1,
            
            /// <summary>
            /// Enum OauthEnum for oauth
            /// </summary>
            [EnumMember(Value = "oauth")]
            OauthEnum = 2,
            
            /// <summary>
            /// Enum PersonalAccessTokenEnum for personal_access_token
            /// </summary>
            [EnumMember(Value = "personal_access_token")]
            PersonalAccessTokenEnum = 3,
            
            /// <summary>
            /// Enum ServiceAccountEnum for service_account
            /// </summary>
            [EnumMember(Value = "service_account")]
            ServiceAccountEnum = 4
        }

        /// <summary>
        /// The authentication method used in the context of an API request. Only present if the &#x60;context_type&#x60; is &#x60;api&#x60;. Can be one of &#x60;cookie&#x60;, &#x60;oauth&#x60;, &#x60;personal_access_token&#x60;, or &#x60;service_account&#x60;.
        /// </summary>
        /// <value>The authentication method used in the context of an API request. Only present if the &#x60;context_type&#x60; is &#x60;api&#x60;. Can be one of &#x60;cookie&#x60;, &#x60;oauth&#x60;, &#x60;personal_access_token&#x60;, or &#x60;service_account&#x60;.</value>
        [DataMember(Name="api_authentication_method", EmitDefaultValue=true)]
        public ApiAuthenticationMethodEnum ApiAuthenticationMethod { get; set; }

        /// <summary>
        /// The IP address of the client that initiated the event, if applicable.
        /// </summary>
        /// <value>The IP address of the client that initiated the event, if applicable.</value>
        /// <example>1.1.1.1</example>
        [DataMember(Name="client_ip_address", EmitDefaultValue=false)]
        public string ClientIpAddress { get; set; }


        /// <summary>
        /// The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.
        /// </summary>
        /// <value>The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ContextTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ContextTypeEnum
        {
            
            /// <summary>
            /// Enum WebEnum for web
            /// </summary>
            [EnumMember(Value = "web")]
            WebEnum = 1,
            
            /// <summary>
            /// Enum DesktopEnum for desktop
            /// </summary>
            [EnumMember(Value = "desktop")]
            DesktopEnum = 2,
            
            /// <summary>
            /// Enum MobileEnum for mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            MobileEnum = 3,
            
            /// <summary>
            /// Enum AsanaSupportEnum for asana_support
            /// </summary>
            [EnumMember(Value = "asana_support")]
            AsanaSupportEnum = 4,
            
            /// <summary>
            /// Enum AsanaEnum for asana
            /// </summary>
            [EnumMember(Value = "asana")]
            AsanaEnum = 5,
            
            /// <summary>
            /// Enum EmailEnum for email
            /// </summary>
            [EnumMember(Value = "email")]
            EmailEnum = 6,
            
            /// <summary>
            /// Enum ApiEnum for api
            /// </summary>
            [EnumMember(Value = "api")]
            ApiEnum = 7
        }

        /// <summary>
        /// The type of context. Can be one of &#x60;web&#x60;, &#x60;desktop&#x60;, &#x60;mobile&#x60;, &#x60;asana_support&#x60;, &#x60;asana&#x60;, &#x60;email&#x60;, or &#x60;api&#x60;.
        /// </summary>
        /// <value>The type of context. Can be one of &#x60;web&#x60;, &#x60;desktop&#x60;, &#x60;mobile&#x60;, &#x60;asana_support&#x60;, &#x60;asana&#x60;, &#x60;email&#x60;, or &#x60;api&#x60;.</value>
        /// <example>web</example>
        [DataMember(Name="context_type", EmitDefaultValue=true)]
        public ContextTypeEnum ContextType { get; set; }

        /// <summary>
        /// The name of the OAuth App that initiated the event. Only present if the &#x60;api_authentication_method&#x60; is &#x60;oauth&#x60;.
        /// </summary>
        /// <value>The name of the OAuth App that initiated the event. Only present if the &#x60;api_authentication_method&#x60; is &#x60;oauth&#x60;.</value>
        [DataMember(Name="oauth_app_name", EmitDefaultValue=false)]
        public string OauthAppName { get; set; }

        /// <summary>
        /// The user agent of the client that initiated the event, if applicable.
        /// </summary>
        /// <value>The user agent of the client that initiated the event, if applicable.</value>
        /// <example>Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.103 Safari/537.36</example>
        [DataMember(Name="user_agent", EmitDefaultValue=false)]
        public string UserAgent { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogEventContext {\n");
            sb.Append("  ApiAuthenticationMethod: ").Append(ApiAuthenticationMethod).Append("\n");
            sb.Append("  ClientIpAddress: ").Append(ClientIpAddress).Append("\n");
            sb.Append("  ContextType: ").Append(ContextType).Append("\n");
            sb.Append("  OauthAppName: ").Append(OauthAppName).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuditLogEventContext)obj);
        }

        /// <summary>
        /// Returns true if AuditLogEventContext instances are equal
        /// </summary>
        /// <param name="other">Instance of AuditLogEventContext to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogEventContext other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApiAuthenticationMethod == other.ApiAuthenticationMethod ||
                    
                    ApiAuthenticationMethod.Equals(other.ApiAuthenticationMethod)
                ) && 
                (
                    ClientIpAddress == other.ClientIpAddress ||
                    ClientIpAddress != null &&
                    ClientIpAddress.Equals(other.ClientIpAddress)
                ) && 
                (
                    ContextType == other.ContextType ||
                    
                    ContextType.Equals(other.ContextType)
                ) && 
                (
                    OauthAppName == other.OauthAppName ||
                    OauthAppName != null &&
                    OauthAppName.Equals(other.OauthAppName)
                ) && 
                (
                    UserAgent == other.UserAgent ||
                    UserAgent != null &&
                    UserAgent.Equals(other.UserAgent)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ApiAuthenticationMethod.GetHashCode();
                    if (ClientIpAddress != null)
                    hashCode = hashCode * 59 + ClientIpAddress.GetHashCode();
                    
                    hashCode = hashCode * 59 + ContextType.GetHashCode();
                    if (OauthAppName != null)
                    hashCode = hashCode * 59 + OauthAppName.GetHashCode();
                    if (UserAgent != null)
                    hashCode = hashCode * 59 + UserAgent.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuditLogEventContext left, AuditLogEventContext right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuditLogEventContext left, AuditLogEventContext right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
