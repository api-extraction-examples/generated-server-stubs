/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TeamRequest : IEquatable<TeamRequest>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The name of the team.
        /// </summary>
        /// <value>The name of the team.</value>
        /// <example>Marketing</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The description of the team. 
        /// </summary>
        /// <value>The description of the team. </value>
        /// <example>All developers should be members of this team.</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The description of the team with formatting as HTML. 
        /// </summary>
        /// <value>The description of the team with formatting as HTML. </value>
        /// <example>&lt;body&gt;&lt;em&gt;All&lt;/em&gt; developers should be members of this team.&lt;/body&gt;</example>
        [DataMember(Name="html_description", EmitDefaultValue=false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. 
        /// </summary>
        /// <value>The organization/workspace the team belongs to. This must be the same organization you are in and cannot be changed once set. </value>
        /// <example>123456789</example>
        [DataMember(Name="organization", EmitDefaultValue=false)]
        public string Organization { get; set; }


        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [TypeConverter(typeof(CustomEnumConverter<VisibilityEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum VisibilityEnum
        {
            
            /// <summary>
            /// Enum SecretEnum for secret
            /// </summary>
            [EnumMember(Value = "secret")]
            SecretEnum = 1,
            
            /// <summary>
            /// Enum RequestToJoinEnum for request_to_join
            /// </summary>
            [EnumMember(Value = "request_to_join")]
            RequestToJoinEnum = 2,
            
            /// <summary>
            /// Enum PublicEnum for public
            /// </summary>
            [EnumMember(Value = "public")]
            PublicEnum = 3
        }

        /// <summary>
        /// The visibility of the team to users in the same organization 
        /// </summary>
        /// <value>The visibility of the team to users in the same organization </value>
        [DataMember(Name="visibility", EmitDefaultValue=true)]
        public VisibilityEnum Visibility { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TeamRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  Organization: ").Append(Organization).Append("\n");
            sb.Append("  Visibility: ").Append(Visibility).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TeamRequest)obj);
        }

        /// <summary>
        /// Returns true if TeamRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TeamRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TeamRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HtmlDescription == other.HtmlDescription ||
                    HtmlDescription != null &&
                    HtmlDescription.Equals(other.HtmlDescription)
                ) && 
                (
                    Organization == other.Organization ||
                    Organization != null &&
                    Organization.Equals(other.Organization)
                ) && 
                (
                    Visibility == other.Visibility ||
                    
                    Visibility.Equals(other.Visibility)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HtmlDescription != null)
                    hashCode = hashCode * 59 + HtmlDescription.GetHashCode();
                    if (Organization != null)
                    hashCode = hashCode * 59 + Organization.GetHashCode();
                    
                    hashCode = hashCode * 59 + Visibility.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TeamRequest left, TeamRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TeamRequest left, TeamRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
