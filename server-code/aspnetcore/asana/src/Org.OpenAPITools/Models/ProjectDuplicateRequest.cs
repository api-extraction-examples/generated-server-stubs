/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProjectDuplicateRequest : IEquatable<ProjectDuplicateRequest>
    {

        /// <summary>
        /// The elements that will be duplicated to the new project. Tasks are always included.
        /// </summary>
        /// <value>The elements that will be duplicated to the new project. Tasks are always included.</value>
        [TypeConverter(typeof(CustomEnumConverter<IncludeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IncludeEnum
        {
            
            /// <summary>
            /// Enum MembersEnum for members
            /// </summary>
            [EnumMember(Value = "members")]
            MembersEnum = 1,
            
            /// <summary>
            /// Enum NotesEnum for notes
            /// </summary>
            [EnumMember(Value = "notes")]
            NotesEnum = 2,
            
            /// <summary>
            /// Enum FormsEnum for forms
            /// </summary>
            [EnumMember(Value = "forms")]
            FormsEnum = 3,
            
            /// <summary>
            /// Enum TaskNotesEnum for task_notes
            /// </summary>
            [EnumMember(Value = "task_notes")]
            TaskNotesEnum = 4,
            
            /// <summary>
            /// Enum TaskAssigneeEnum for task_assignee
            /// </summary>
            [EnumMember(Value = "task_assignee")]
            TaskAssigneeEnum = 5,
            
            /// <summary>
            /// Enum TaskSubtasksEnum for task_subtasks
            /// </summary>
            [EnumMember(Value = "task_subtasks")]
            TaskSubtasksEnum = 6,
            
            /// <summary>
            /// Enum TaskAttachmentsEnum for task_attachments
            /// </summary>
            [EnumMember(Value = "task_attachments")]
            TaskAttachmentsEnum = 7,
            
            /// <summary>
            /// Enum TaskDatesEnum for task_dates
            /// </summary>
            [EnumMember(Value = "task_dates")]
            TaskDatesEnum = 8,
            
            /// <summary>
            /// Enum TaskDependenciesEnum for task_dependencies
            /// </summary>
            [EnumMember(Value = "task_dependencies")]
            TaskDependenciesEnum = 9,
            
            /// <summary>
            /// Enum TaskFollowersEnum for task_followers
            /// </summary>
            [EnumMember(Value = "task_followers")]
            TaskFollowersEnum = 10,
            
            /// <summary>
            /// Enum TaskTagsEnum for task_tags
            /// </summary>
            [EnumMember(Value = "task_tags")]
            TaskTagsEnum = 11,
            
            /// <summary>
            /// Enum TaskProjectsEnum for task_projects
            /// </summary>
            [EnumMember(Value = "task_projects")]
            TaskProjectsEnum = 12
        }

        /// <summary>
        /// The elements that will be duplicated to the new project. Tasks are always included.
        /// </summary>
        /// <value>The elements that will be duplicated to the new project. Tasks are always included.</value>
        /// <example>[&quot;members&quot;,&quot;task_notes&quot;]</example>
        [DataMember(Name="include", EmitDefaultValue=true)]
        public IncludeEnum Include { get; set; }

        /// <summary>
        /// The name of the new project.
        /// </summary>
        /// <value>The name of the new project.</value>
        /// <example>New Project Name</example>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ScheduleDates
        /// </summary>
        [DataMember(Name="schedule_dates", EmitDefaultValue=false)]
        public ProjectDuplicateRequestScheduleDates ScheduleDates { get; set; }

        /// <summary>
        /// Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.
        /// </summary>
        /// <value>Sets the team of the new project. If team is not defined, the new project will be in the same team as the the original project.</value>
        /// <example>12345</example>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public string Team { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDuplicateRequest {\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ScheduleDates: ").Append(ScheduleDates).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectDuplicateRequest)obj);
        }

        /// <summary>
        /// Returns true if ProjectDuplicateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectDuplicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDuplicateRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Include == other.Include ||
                    
                    Include.Equals(other.Include)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ScheduleDates == other.ScheduleDates ||
                    ScheduleDates != null &&
                    ScheduleDates.Equals(other.ScheduleDates)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Include.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ScheduleDates != null)
                    hashCode = hashCode * 59 + ScheduleDates.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectDuplicateRequest left, ProjectDuplicateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectDuplicateRequest left, ProjectDuplicateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
