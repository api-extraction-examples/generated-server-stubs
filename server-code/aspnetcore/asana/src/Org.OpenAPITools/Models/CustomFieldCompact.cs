/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomFieldCompact : IEquatable<CustomFieldCompact>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name="date_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        /// <example>blue</example>
        [DataMember(Name="display_value", EmitDefaultValue=true)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        /// <example>true</example>
        [DataMember(Name="enabled", EmitDefaultValue=true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).</value>
        [DataMember(Name="enum_options", EmitDefaultValue=false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name="enum_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfEnumValue EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name="multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        /// <example>Status</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        /// <example>5.2</example>
        [DataMember(Name="number_value", EmitDefaultValue=true)]
        public decimal NumberValue { get; set; }


        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [TypeConverter(typeof(CustomEnumConverter<ResourceSubtypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum EnumEnum for enum
            /// </summary>
            [EnumMember(Value = "enum")]
            EnumEnum = 2,
            
            /// <summary>
            /// Enum MultiEnumEnum for multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnumEnum = 3,
            
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 4,
            
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 5,
            
            /// <summary>
            /// Enum PeopleEnum for people
            /// </summary>
            [EnumMember(Value = "people")]
            PeopleEnum = 6
        }

        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        /// <example>text</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=true)]
        public ResourceSubtypeEnum ResourceSubtype { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        /// <example>Some Value</example>
        [DataMember(Name="text_value", EmitDefaultValue=false)]
        public string TextValue { get; set; }


        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum EnumEnum for enum
            /// </summary>
            [EnumMember(Value = "enum")]
            EnumEnum = 2,
            
            /// <summary>
            /// Enum MultiEnumEnum for multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnumEnum = 3,
            
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 4
        }

        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldCompact {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomFieldCompact)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldCompact instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldCompact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldCompact other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    DateValue == other.DateValue ||
                    DateValue != null &&
                    DateValue.Equals(other.DateValue)
                ) && 
                (
                    DisplayValue == other.DisplayValue ||
                    DisplayValue != null &&
                    DisplayValue.Equals(other.DisplayValue)
                ) && 
                (
                    Enabled == other.Enabled ||
                    
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    EnumOptions == other.EnumOptions ||
                    EnumOptions != null &&
                    other.EnumOptions != null &&
                    EnumOptions.SequenceEqual(other.EnumOptions)
                ) && 
                (
                    EnumValue == other.EnumValue ||
                    EnumValue != null &&
                    EnumValue.Equals(other.EnumValue)
                ) && 
                (
                    MultiEnumValues == other.MultiEnumValues ||
                    MultiEnumValues != null &&
                    other.MultiEnumValues != null &&
                    MultiEnumValues.SequenceEqual(other.MultiEnumValues)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberValue == other.NumberValue ||
                    
                    NumberValue.Equals(other.NumberValue)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    TextValue == other.TextValue ||
                    TextValue != null &&
                    TextValue.Equals(other.TextValue)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (DateValue != null)
                    hashCode = hashCode * 59 + DateValue.GetHashCode();
                    if (DisplayValue != null)
                    hashCode = hashCode * 59 + DisplayValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (EnumOptions != null)
                    hashCode = hashCode * 59 + EnumOptions.GetHashCode();
                    if (EnumValue != null)
                    hashCode = hashCode * 59 + EnumValue.GetHashCode();
                    if (MultiEnumValues != null)
                    hashCode = hashCode * 59 + MultiEnumValues.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    if (TextValue != null)
                    hashCode = hashCode * 59 + TextValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomFieldCompact left, CustomFieldCompact right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomFieldCompact left, CustomFieldCompact right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
