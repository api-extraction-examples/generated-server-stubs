/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProjectTemplateResponse : IEquatable<ProjectTemplateResponse>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Name of the project template.
        /// </summary>
        /// <value>Name of the project template.</value>
        /// <example>Packing list</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// Color of the project template.
        /// </summary>
        /// <value>Color of the project template.</value>
        [TypeConverter(typeof(CustomEnumConverter<ColorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ColorEnum
        {
            
            /// <summary>
            /// Enum DarkPinkEnum for dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPinkEnum = 1,
            
            /// <summary>
            /// Enum DarkGreenEnum for dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreenEnum = 2,
            
            /// <summary>
            /// Enum DarkBlueEnum for dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlueEnum = 3,
            
            /// <summary>
            /// Enum DarkRedEnum for dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRedEnum = 4,
            
            /// <summary>
            /// Enum DarkTealEnum for dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTealEnum = 5,
            
            /// <summary>
            /// Enum DarkBrownEnum for dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrownEnum = 6,
            
            /// <summary>
            /// Enum DarkOrangeEnum for dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrangeEnum = 7,
            
            /// <summary>
            /// Enum DarkPurpleEnum for dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurpleEnum = 8,
            
            /// <summary>
            /// Enum DarkWarmGrayEnum for dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGrayEnum = 9,
            
            /// <summary>
            /// Enum LightPinkEnum for light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPinkEnum = 10,
            
            /// <summary>
            /// Enum LightGreenEnum for light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreenEnum = 11,
            
            /// <summary>
            /// Enum LightBlueEnum for light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlueEnum = 12,
            
            /// <summary>
            /// Enum LightRedEnum for light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRedEnum = 13,
            
            /// <summary>
            /// Enum LightTealEnum for light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTealEnum = 14,
            
            /// <summary>
            /// Enum LightBrownEnum for light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrownEnum = 15,
            
            /// <summary>
            /// Enum LightOrangeEnum for light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrangeEnum = 16,
            
            /// <summary>
            /// Enum LightPurpleEnum for light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurpleEnum = 17,
            
            /// <summary>
            /// Enum LightWarmGrayEnum for light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGrayEnum = 18
        }

        /// <summary>
        /// Color of the project template.
        /// </summary>
        /// <value>Color of the project template.</value>
        /// <example>light-green</example>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public ColorEnum? Color { get; set; }

        /// <summary>
        /// Free-form textual information associated with the project template
        /// </summary>
        /// <value>Free-form textual information associated with the project template</value>
        /// <example>These are things we need to pack for a trip.</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// The description of the project template with formatting as HTML.
        /// </summary>
        /// <value>The description of the project template with formatting as HTML.</value>
        /// <example>&lt;body&gt;These are things we need to pack for a trip.&lt;/body&gt;</example>
        [DataMember(Name="html_description", EmitDefaultValue=false)]
        public string HtmlDescription { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=true)]
        public ProjectTemplateBaseAllOfOwner Owner { get; set; }

        /// <summary>
        /// True if the project template is public to its team.
        /// </summary>
        /// <value>True if the project template is public to its team.</value>
        /// <example>false</example>
        [DataMember(Name="public", EmitDefaultValue=true)]
        public bool VarPublic { get; set; }

        /// <summary>
        /// Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.
        /// </summary>
        /// <value>Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.</value>
        [DataMember(Name="requested_dates", EmitDefaultValue=false)]
        public List<DateVariableCompact> RequestedDates { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public ProjectTemplateBaseAllOfTeam Team { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectTemplateResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  HtmlDescription: ").Append(HtmlDescription).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  VarPublic: ").Append(VarPublic).Append("\n");
            sb.Append("  RequestedDates: ").Append(RequestedDates).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectTemplateResponse)obj);
        }

        /// <summary>
        /// Returns true if ProjectTemplateResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectTemplateResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectTemplateResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Color == other.Color ||
                    
                    Color.Equals(other.Color)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    HtmlDescription == other.HtmlDescription ||
                    HtmlDescription != null &&
                    HtmlDescription.Equals(other.HtmlDescription)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    VarPublic == other.VarPublic ||
                    
                    VarPublic.Equals(other.VarPublic)
                ) && 
                (
                    RequestedDates == other.RequestedDates ||
                    RequestedDates != null &&
                    other.RequestedDates != null &&
                    RequestedDates.SequenceEqual(other.RequestedDates)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (HtmlDescription != null)
                    hashCode = hashCode * 59 + HtmlDescription.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarPublic.GetHashCode();
                    if (RequestedDates != null)
                    hashCode = hashCode * 59 + RequestedDates.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectTemplateResponse left, ProjectTemplateResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectTemplateResponse left, ProjectTemplateResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
