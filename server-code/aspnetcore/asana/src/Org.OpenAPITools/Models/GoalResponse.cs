/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class GoalResponse : IEquatable<GoalResponse>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The localized day on which this goal is due. This takes a date with format &#x60;YYYY-MM-DD&#x60;.
        /// </summary>
        /// <value>The localized day on which this goal is due. This takes a date with format &#x60;YYYY-MM-DD&#x60;.</value>
        /// <example>2019-09-15</example>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        public string DueOn { get; set; }

        /// <summary>
        /// The notes of the goal with formatting as HTML.
        /// </summary>
        /// <value>The notes of the goal with formatting as HTML.</value>
        /// <example>&lt;body&gt;Start building brand awareness.&lt;/body&gt;</example>
        [DataMember(Name="html_notes", EmitDefaultValue=false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// *Conditional*. This property is only present when the &#x60;workspace&#x60; provided is an organization. Whether the goal belongs to the &#x60;workspace&#x60; (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
        /// </summary>
        /// <value>*Conditional*. This property is only present when the &#x60;workspace&#x60; provided is an organization. Whether the goal belongs to the &#x60;workspace&#x60; (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.</value>
        /// <example>true</example>
        [DataMember(Name="is_workspace_level", EmitDefaultValue=true)]
        public bool IsWorkspaceLevel { get; set; }

        /// <summary>
        /// True if the goal is liked by the authorized user, false if not.
        /// </summary>
        /// <value>True if the goal is liked by the authorized user, false if not.</value>
        /// <example>false</example>
        [DataMember(Name="liked", EmitDefaultValue=true)]
        public bool Liked { get; set; }

        /// <summary>
        /// The name of the goal.
        /// </summary>
        /// <value>The name of the goal.</value>
        /// <example>Grow web traffic by 30%</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Free-form textual information associated with the goal (i.e. its description).
        /// </summary>
        /// <value>Free-form textual information associated with the goal (i.e. its description).</value>
        /// <example>Start building brand awareness.</example>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format, and cannot be set unless there is an accompanying due date.
        /// </summary>
        /// <value>The day on which work for this goal begins, or null if the goal has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format, and cannot be set unless there is an accompanying due date.</value>
        /// <example>2019-09-14</example>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        public string StartOn { get; set; }

        /// <summary>
        /// The current status of this goal. When the goal is open, its status can be &#x60;green&#x60;, &#x60;yellow&#x60;, and &#x60;red&#x60; to reflect \&quot;On Track\&quot;, \&quot;At Risk\&quot;, and \&quot;Off Track\&quot;, respectively. When the goal is closed, the value can be &#x60;missed&#x60;, &#x60;achieved&#x60;, &#x60;partial&#x60;, or &#x60;dropped&#x60;. *Note* you can only write to this property if &#x60;metric&#x60; is set.
        /// </summary>
        /// <value>The current status of this goal. When the goal is open, its status can be &#x60;green&#x60;, &#x60;yellow&#x60;, and &#x60;red&#x60; to reflect \&quot;On Track\&quot;, \&quot;At Risk\&quot;, and \&quot;Off Track\&quot;, respectively. When the goal is closed, the value can be &#x60;missed&#x60;, &#x60;achieved&#x60;, &#x60;partial&#x60;, or &#x60;dropped&#x60;. *Note* you can only write to this property if &#x60;metric&#x60; is set.</value>
        /// <example>green</example>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public string Status { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatusUpdate
        /// </summary>
        [DataMember(Name="current_status_update", EmitDefaultValue=true)]
        public GoalResponseAllOfCurrentStatusUpdate CurrentStatusUpdate { get; set; }

        /// <summary>
        /// Array of users who are members of this goal.
        /// </summary>
        /// <value>Array of users who are members of this goal.</value>
        [DataMember(Name="followers", EmitDefaultValue=false)]
        public List<UserCompact> Followers { get; set; }

        /// <summary>
        /// Array of likes for users who have liked this goal.
        /// </summary>
        /// <value>Array of likes for users who have liked this goal.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; set; }

        /// <summary>
        /// Gets or Sets Metric
        /// </summary>
        [DataMember(Name="metric", EmitDefaultValue=false)]
        public GoalResponseAllOfMetric Metric { get; set; }

        /// <summary>
        /// The number of users who have liked this goal.
        /// </summary>
        /// <value>The number of users who have liked this goal.</value>
        /// <example>5</example>
        [DataMember(Name="num_likes", EmitDefaultValue=true)]
        public int NumLikes { get; set; }

        /// <summary>
        /// Gets or Sets Owner
        /// </summary>
        [DataMember(Name="owner", EmitDefaultValue=false)]
        public GoalResponseAllOfOwner Owner { get; set; }

        /// <summary>
        /// Gets or Sets Team
        /// </summary>
        [DataMember(Name="team", EmitDefaultValue=false)]
        public GoalResponseAllOfTeam Team { get; set; }

        /// <summary>
        /// Gets or Sets TimePeriod
        /// </summary>
        [DataMember(Name="time_period", EmitDefaultValue=false)]
        public GoalResponseAllOfTimePeriod TimePeriod { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public GoalResponseAllOfWorkspace Workspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class GoalResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  IsWorkspaceLevel: ").Append(IsWorkspaceLevel).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  CurrentStatusUpdate: ").Append(CurrentStatusUpdate).Append("\n");
            sb.Append("  Followers: ").Append(Followers).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Metric: ").Append(Metric).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  Owner: ").Append(Owner).Append("\n");
            sb.Append("  Team: ").Append(Team).Append("\n");
            sb.Append("  TimePeriod: ").Append(TimePeriod).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((GoalResponse)obj);
        }

        /// <summary>
        /// Returns true if GoalResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of GoalResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(GoalResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    DueOn == other.DueOn ||
                    DueOn != null &&
                    DueOn.Equals(other.DueOn)
                ) && 
                (
                    HtmlNotes == other.HtmlNotes ||
                    HtmlNotes != null &&
                    HtmlNotes.Equals(other.HtmlNotes)
                ) && 
                (
                    IsWorkspaceLevel == other.IsWorkspaceLevel ||
                    
                    IsWorkspaceLevel.Equals(other.IsWorkspaceLevel)
                ) && 
                (
                    Liked == other.Liked ||
                    
                    Liked.Equals(other.Liked)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                ) && 
                (
                    Status == other.Status ||
                    Status != null &&
                    Status.Equals(other.Status)
                ) && 
                (
                    CurrentStatusUpdate == other.CurrentStatusUpdate ||
                    CurrentStatusUpdate != null &&
                    CurrentStatusUpdate.Equals(other.CurrentStatusUpdate)
                ) && 
                (
                    Followers == other.Followers ||
                    Followers != null &&
                    other.Followers != null &&
                    Followers.SequenceEqual(other.Followers)
                ) && 
                (
                    Likes == other.Likes ||
                    Likes != null &&
                    other.Likes != null &&
                    Likes.SequenceEqual(other.Likes)
                ) && 
                (
                    Metric == other.Metric ||
                    Metric != null &&
                    Metric.Equals(other.Metric)
                ) && 
                (
                    NumLikes == other.NumLikes ||
                    
                    NumLikes.Equals(other.NumLikes)
                ) && 
                (
                    Owner == other.Owner ||
                    Owner != null &&
                    Owner.Equals(other.Owner)
                ) && 
                (
                    Team == other.Team ||
                    Team != null &&
                    Team.Equals(other.Team)
                ) && 
                (
                    TimePeriod == other.TimePeriod ||
                    TimePeriod != null &&
                    TimePeriod.Equals(other.TimePeriod)
                ) && 
                (
                    Workspace == other.Workspace ||
                    Workspace != null &&
                    Workspace.Equals(other.Workspace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (DueOn != null)
                    hashCode = hashCode * 59 + DueOn.GetHashCode();
                    if (HtmlNotes != null)
                    hashCode = hashCode * 59 + HtmlNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsWorkspaceLevel.GetHashCode();
                    
                    hashCode = hashCode * 59 + Liked.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                    if (Status != null)
                    hashCode = hashCode * 59 + Status.GetHashCode();
                    if (CurrentStatusUpdate != null)
                    hashCode = hashCode * 59 + CurrentStatusUpdate.GetHashCode();
                    if (Followers != null)
                    hashCode = hashCode * 59 + Followers.GetHashCode();
                    if (Likes != null)
                    hashCode = hashCode * 59 + Likes.GetHashCode();
                    if (Metric != null)
                    hashCode = hashCode * 59 + Metric.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumLikes.GetHashCode();
                    if (Owner != null)
                    hashCode = hashCode * 59 + Owner.GetHashCode();
                    if (Team != null)
                    hashCode = hashCode * 59 + Team.GetHashCode();
                    if (TimePeriod != null)
                    hashCode = hashCode * 59 + TimePeriod.GetHashCode();
                    if (Workspace != null)
                    hashCode = hashCode * 59 + Workspace.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(GoalResponse left, GoalResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(GoalResponse left, GoalResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
