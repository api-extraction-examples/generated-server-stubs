/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class EnumOptionInsertRequest : IEquatable<EnumOptionInsertRequest>
    {
        /// <summary>
        /// An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field after which the new enum option should be inserted. Cannot be provided together with before_enum_option.</value>
        /// <example>12345</example>
        [DataMember(Name="after_enum_option", EmitDefaultValue=false)]
        public string AfterEnumOption { get; set; }

        /// <summary>
        /// An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.
        /// </summary>
        /// <value>An existing enum option within this custom field before which the new enum option should be inserted. Cannot be provided together with after_enum_option.</value>
        /// <example>12345</example>
        [DataMember(Name="before_enum_option", EmitDefaultValue=false)]
        public string BeforeEnumOption { get; set; }

        /// <summary>
        /// The gid of the enum option to relocate.
        /// </summary>
        /// <value>The gid of the enum option to relocate.</value>
        /// <example>97285</example>
        [Required]
        [DataMember(Name="enum_option", EmitDefaultValue=false)]
        public string EnumOption { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnumOptionInsertRequest {\n");
            sb.Append("  AfterEnumOption: ").Append(AfterEnumOption).Append("\n");
            sb.Append("  BeforeEnumOption: ").Append(BeforeEnumOption).Append("\n");
            sb.Append("  EnumOption: ").Append(EnumOption).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnumOptionInsertRequest)obj);
        }

        /// <summary>
        /// Returns true if EnumOptionInsertRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of EnumOptionInsertRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnumOptionInsertRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    AfterEnumOption == other.AfterEnumOption ||
                    AfterEnumOption != null &&
                    AfterEnumOption.Equals(other.AfterEnumOption)
                ) && 
                (
                    BeforeEnumOption == other.BeforeEnumOption ||
                    BeforeEnumOption != null &&
                    BeforeEnumOption.Equals(other.BeforeEnumOption)
                ) && 
                (
                    EnumOption == other.EnumOption ||
                    EnumOption != null &&
                    EnumOption.Equals(other.EnumOption)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (AfterEnumOption != null)
                    hashCode = hashCode * 59 + AfterEnumOption.GetHashCode();
                    if (BeforeEnumOption != null)
                    hashCode = hashCode * 59 + BeforeEnumOption.GetHashCode();
                    if (EnumOption != null)
                    hashCode = hashCode * 59 + EnumOption.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnumOptionInsertRequest left, EnumOptionInsertRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnumOptionInsertRequest left, EnumOptionInsertRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
