/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class JobCompact : IEquatable<JobCompact>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets NewProject
        /// </summary>
        [DataMember(Name="new_project", EmitDefaultValue=false)]
        public ProjectCompact NewProject { get; set; }

        /// <summary>
        /// Gets or Sets NewProjectTemplate
        /// </summary>
        [DataMember(Name="new_project_template", EmitDefaultValue=false)]
        public ProjectTemplateCompact NewProjectTemplate { get; set; }

        /// <summary>
        /// Gets or Sets NewTask
        /// </summary>
        [DataMember(Name="new_task", EmitDefaultValue=false)]
        public TaskCompact NewTask { get; set; }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        /// <example>duplicate_task</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public string ResourceSubtype { get; set; }


        /// <summary>
        /// The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.
        /// </summary>
        /// <value>The current status of this job. The value is one of: `not_started`, `in_progress`, `succeeded`, or `failed`.</value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum NotStartedEnum for not_started
            /// </summary>
            [EnumMember(Value = "not_started")]
            NotStartedEnum = 1,
            
            /// <summary>
            /// Enum InProgressEnum for in_progress
            /// </summary>
            [EnumMember(Value = "in_progress")]
            InProgressEnum = 2,
            
            /// <summary>
            /// Enum SucceededEnum for succeeded
            /// </summary>
            [EnumMember(Value = "succeeded")]
            SucceededEnum = 3,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4
        }

        /// <summary>
        /// The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.
        /// </summary>
        /// <value>The current status of this job. The value is one of: &#x60;not_started&#x60;, &#x60;in_progress&#x60;, &#x60;succeeded&#x60;, or &#x60;failed&#x60;.</value>
        /// <example>in_progress</example>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class JobCompact {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  NewProject: ").Append(NewProject).Append("\n");
            sb.Append("  NewProjectTemplate: ").Append(NewProjectTemplate).Append("\n");
            sb.Append("  NewTask: ").Append(NewTask).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((JobCompact)obj);
        }

        /// <summary>
        /// Returns true if JobCompact instances are equal
        /// </summary>
        /// <param name="other">Instance of JobCompact to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(JobCompact other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    NewProject == other.NewProject ||
                    NewProject != null &&
                    NewProject.Equals(other.NewProject)
                ) && 
                (
                    NewProjectTemplate == other.NewProjectTemplate ||
                    NewProjectTemplate != null &&
                    NewProjectTemplate.Equals(other.NewProjectTemplate)
                ) && 
                (
                    NewTask == other.NewTask ||
                    NewTask != null &&
                    NewTask.Equals(other.NewTask)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    ResourceSubtype != null &&
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (NewProject != null)
                    hashCode = hashCode * 59 + NewProject.GetHashCode();
                    if (NewProjectTemplate != null)
                    hashCode = hashCode * 59 + NewProjectTemplate.GetHashCode();
                    if (NewTask != null)
                    hashCode = hashCode * 59 + NewTask.GetHashCode();
                    if (ResourceSubtype != null)
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(JobCompact left, JobCompact right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(JobCompact left, JobCompact right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
