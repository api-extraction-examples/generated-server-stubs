/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// *Conditional*. Only relevant for custom fields of type &#x60;date&#x60;. This object reflects the chosen date (and optionally, time) value of a &#x60;date&#x60; custom field. If no date is selected, the value of &#x60;date_value&#x60; will be &#x60;null&#x60;.
    /// </summary>
    [DataContract]
    public partial class CustomFieldCompactAllOfDateValue : IEquatable<CustomFieldCompactAllOfDateValue>
    {
        /// <summary>
        /// A string representing the date in YYYY-MM-DD format.
        /// </summary>
        /// <value>A string representing the date in YYYY-MM-DD format.</value>
        /// <example>2024-08-23</example>
        [DataMember(Name="date", EmitDefaultValue=false)]
        public string Date { get; set; }

        /// <summary>
        /// A string representing the date in ISO 8601 format. If no time value is selected, the value of &#x60;date-time&#x60; will be &#x60;null&#x60;.
        /// </summary>
        /// <value>A string representing the date in ISO 8601 format. If no time value is selected, the value of &#x60;date-time&#x60; will be &#x60;null&#x60;.</value>
        /// <example>2024-08-23T22:00:00.000Z</example>
        [DataMember(Name="date_time", EmitDefaultValue=false)]
        public string DateTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldCompactAllOfDateValue {\n");
            sb.Append("  Date: ").Append(Date).Append("\n");
            sb.Append("  DateTime: ").Append(DateTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomFieldCompactAllOfDateValue)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldCompactAllOfDateValue instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldCompactAllOfDateValue to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldCompactAllOfDateValue other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Date == other.Date ||
                    Date != null &&
                    Date.Equals(other.Date)
                ) && 
                (
                    DateTime == other.DateTime ||
                    DateTime != null &&
                    DateTime.Equals(other.DateTime)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Date != null)
                    hashCode = hashCode * 59 + Date.GetHashCode();
                    if (DateTime != null)
                    hashCode = hashCode * 59 + DateTime.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomFieldCompactAllOfDateValue left, CustomFieldCompactAllOfDateValue right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomFieldCompactAllOfDateValue left, CustomFieldCompactAllOfDateValue right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
