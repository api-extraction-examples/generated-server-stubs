/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StoryBase : IEquatable<StoryBase>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.</value>
        /// <example>&lt;body&gt;This is a comment.&lt;/body&gt;</example>
        [DataMember(Name="html_text", EmitDefaultValue=false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// *Conditional*. Whether the story should be pinned on the resource.
        /// </summary>
        /// <value>*Conditional*. Whether the story should be pinned on the resource.</value>
        /// <example>false</example>
        [DataMember(Name="is_pinned", EmitDefaultValue=true)]
        public bool IsPinned { get; set; }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        /// <example>comment_added</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public string ResourceSubtype { get; set; }


        /// <summary>
        /// The name of the sticker in this story. `null` if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. `null` if there is no sticker.</value>
        [TypeConverter(typeof(CustomEnumConverter<StickerNameEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StickerNameEnum
        {
            
            /// <summary>
            /// Enum GreenCheckmarkEnum for green_checkmark
            /// </summary>
            [EnumMember(Value = "green_checkmark")]
            GreenCheckmarkEnum = 1,
            
            /// <summary>
            /// Enum PeopleDancingEnum for people_dancing
            /// </summary>
            [EnumMember(Value = "people_dancing")]
            PeopleDancingEnum = 2,
            
            /// <summary>
            /// Enum DancingUnicornEnum for dancing_unicorn
            /// </summary>
            [EnumMember(Value = "dancing_unicorn")]
            DancingUnicornEnum = 3,
            
            /// <summary>
            /// Enum HeartEnum for heart
            /// </summary>
            [EnumMember(Value = "heart")]
            HeartEnum = 4,
            
            /// <summary>
            /// Enum PartyPopperEnum for party_popper
            /// </summary>
            [EnumMember(Value = "party_popper")]
            PartyPopperEnum = 5,
            
            /// <summary>
            /// Enum PeopleWavingFlagsEnum for people_waving_flags
            /// </summary>
            [EnumMember(Value = "people_waving_flags")]
            PeopleWavingFlagsEnum = 6,
            
            /// <summary>
            /// Enum SplashingNarwhalEnum for splashing_narwhal
            /// </summary>
            [EnumMember(Value = "splashing_narwhal")]
            SplashingNarwhalEnum = 7,
            
            /// <summary>
            /// Enum TrophyEnum for trophy
            /// </summary>
            [EnumMember(Value = "trophy")]
            TrophyEnum = 8,
            
            /// <summary>
            /// Enum YetiRidingUnicornEnum for yeti_riding_unicorn
            /// </summary>
            [EnumMember(Value = "yeti_riding_unicorn")]
            YetiRidingUnicornEnum = 9,
            
            /// <summary>
            /// Enum CelebratingPeopleEnum for celebrating_people
            /// </summary>
            [EnumMember(Value = "celebrating_people")]
            CelebratingPeopleEnum = 10,
            
            /// <summary>
            /// Enum DeterminedClimbersEnum for determined_climbers
            /// </summary>
            [EnumMember(Value = "determined_climbers")]
            DeterminedClimbersEnum = 11,
            
            /// <summary>
            /// Enum PhoenixSpreadingLoveEnum for phoenix_spreading_love
            /// </summary>
            [EnumMember(Value = "phoenix_spreading_love")]
            PhoenixSpreadingLoveEnum = 12
        }

        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        /// <example>dancing_unicorn</example>
        [DataMember(Name="sticker_name", EmitDefaultValue=true)]
        public StickerNameEnum StickerName { get; set; }

        /// <summary>
        /// The plain text of the comment to add. Cannot be used with html_text.
        /// </summary>
        /// <value>The plain text of the comment to add. Cannot be used with html_text.</value>
        /// <example>This is a comment.</example>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  IsPinned: ").Append(IsPinned).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  StickerName: ").Append(StickerName).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StoryBase)obj);
        }

        /// <summary>
        /// Returns true if StoryBase instances are equal
        /// </summary>
        /// <param name="other">Instance of StoryBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    HtmlText == other.HtmlText ||
                    HtmlText != null &&
                    HtmlText.Equals(other.HtmlText)
                ) && 
                (
                    IsPinned == other.IsPinned ||
                    
                    IsPinned.Equals(other.IsPinned)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    ResourceSubtype != null &&
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    StickerName == other.StickerName ||
                    
                    StickerName.Equals(other.StickerName)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (HtmlText != null)
                    hashCode = hashCode * 59 + HtmlText.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPinned.GetHashCode();
                    if (ResourceSubtype != null)
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    
                    hashCode = hashCode * 59 + StickerName.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StoryBase left, StoryBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StoryBase left, StoryBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
