/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// A dictionary of options to auto-shift dates. &#x60;task_dates&#x60; must be included to use this option. Requires either &#x60;start_on&#x60; or &#x60;due_on&#x60;, but not both.
    /// </summary>
    [DataContract]
    public partial class ProjectDuplicateRequestScheduleDates : IEquatable<ProjectDuplicateRequestScheduleDates>
    {
        /// <summary>
        /// Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.
        /// </summary>
        /// <value>Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.</value>
        /// <example>2019-05-21</example>
        [DataMember(Name="due_on", EmitDefaultValue=false)]
        public string DueOn { get; set; }

        /// <summary>
        /// Determines if the auto-shifted dates should skip weekends.
        /// </summary>
        /// <value>Determines if the auto-shifted dates should skip weekends.</value>
        /// <example>true</example>
        [Required]
        [DataMember(Name="should_skip_weekends", EmitDefaultValue=true)]
        public bool ShouldSkipWeekends { get; set; }

        /// <summary>
        /// Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.
        /// </summary>
        /// <value>Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.</value>
        /// <example>2019-05-21</example>
        [DataMember(Name="start_on", EmitDefaultValue=false)]
        public string StartOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectDuplicateRequestScheduleDates {\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  ShouldSkipWeekends: ").Append(ShouldSkipWeekends).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectDuplicateRequestScheduleDates)obj);
        }

        /// <summary>
        /// Returns true if ProjectDuplicateRequestScheduleDates instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectDuplicateRequestScheduleDates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectDuplicateRequestScheduleDates other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    DueOn == other.DueOn ||
                    DueOn != null &&
                    DueOn.Equals(other.DueOn)
                ) && 
                (
                    ShouldSkipWeekends == other.ShouldSkipWeekends ||
                    
                    ShouldSkipWeekends.Equals(other.ShouldSkipWeekends)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (DueOn != null)
                    hashCode = hashCode * 59 + DueOn.GetHashCode();
                    
                    hashCode = hashCode * 59 + ShouldSkipWeekends.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectDuplicateRequestScheduleDates left, ProjectDuplicateRequestScheduleDates right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectDuplicateRequestScheduleDates left, ProjectDuplicateRequestScheduleDates right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
