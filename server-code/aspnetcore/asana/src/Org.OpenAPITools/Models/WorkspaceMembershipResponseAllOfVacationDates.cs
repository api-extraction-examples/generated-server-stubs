/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Contains keys &#x60;start_on&#x60; and &#x60;end_on&#x60; for the vacation dates for the user in this workspace. If &#x60;start_on&#x60; is null, the entire &#x60;vacation_dates&#x60; object will be null. If &#x60;end_on&#x60; is before today, the entire &#x60;vacation_dates&#x60; object will be null.
    /// </summary>
    [DataContract]
    public partial class WorkspaceMembershipResponseAllOfVacationDates : IEquatable<WorkspaceMembershipResponseAllOfVacationDates>
    {
        /// <summary>
        /// The day on which the user&#39;s vacation in this workspace ends, or null if there is no end date. This is a date with &#x60;YYYY-MM-DD&#x60; format.
        /// </summary>
        /// <value>The day on which the user&#39;s vacation in this workspace ends, or null if there is no end date. This is a date with &#x60;YYYY-MM-DD&#x60; format.</value>
        /// <example>2022-11-07</example>
        [DataMember(Name="end_on", EmitDefaultValue=true)]
        public string EndOn { get; set; }

        /// <summary>
        /// The day on which the user&#39;s vacation in this workspace starts. This is a date with &#x60;YYYY-MM-DD&#x60; format.
        /// </summary>
        /// <value>The day on which the user&#39;s vacation in this workspace starts. This is a date with &#x60;YYYY-MM-DD&#x60; format.</value>
        /// <example>2022-11-05</example>
        [DataMember(Name="start_on", EmitDefaultValue=false)]
        public string StartOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspaceMembershipResponseAllOfVacationDates {\n");
            sb.Append("  EndOn: ").Append(EndOn).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkspaceMembershipResponseAllOfVacationDates)obj);
        }

        /// <summary>
        /// Returns true if WorkspaceMembershipResponseAllOfVacationDates instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkspaceMembershipResponseAllOfVacationDates to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceMembershipResponseAllOfVacationDates other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EndOn == other.EndOn ||
                    EndOn != null &&
                    EndOn.Equals(other.EndOn)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EndOn != null)
                    hashCode = hashCode * 59 + EndOn.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkspaceMembershipResponseAllOfVacationDates left, WorkspaceMembershipResponseAllOfVacationDates right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkspaceMembershipResponseAllOfVacationDates left, WorkspaceMembershipResponseAllOfVacationDates right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
