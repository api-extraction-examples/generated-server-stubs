/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ProjectBase : IEquatable<ProjectBase>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
        /// </summary>
        /// <value>Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.</value>
        /// <example>Stuff to buy</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
        /// </summary>
        /// <value>True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.</value>
        /// <example>false</example>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }


        /// <summary>
        /// Color of the project.
        /// </summary>
        /// <value>Color of the project.</value>
        [TypeConverter(typeof(CustomEnumConverter<ColorEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ColorEnum
        {
            
            /// <summary>
            /// Enum DarkPinkEnum for dark-pink
            /// </summary>
            [EnumMember(Value = "dark-pink")]
            DarkPinkEnum = 1,
            
            /// <summary>
            /// Enum DarkGreenEnum for dark-green
            /// </summary>
            [EnumMember(Value = "dark-green")]
            DarkGreenEnum = 2,
            
            /// <summary>
            /// Enum DarkBlueEnum for dark-blue
            /// </summary>
            [EnumMember(Value = "dark-blue")]
            DarkBlueEnum = 3,
            
            /// <summary>
            /// Enum DarkRedEnum for dark-red
            /// </summary>
            [EnumMember(Value = "dark-red")]
            DarkRedEnum = 4,
            
            /// <summary>
            /// Enum DarkTealEnum for dark-teal
            /// </summary>
            [EnumMember(Value = "dark-teal")]
            DarkTealEnum = 5,
            
            /// <summary>
            /// Enum DarkBrownEnum for dark-brown
            /// </summary>
            [EnumMember(Value = "dark-brown")]
            DarkBrownEnum = 6,
            
            /// <summary>
            /// Enum DarkOrangeEnum for dark-orange
            /// </summary>
            [EnumMember(Value = "dark-orange")]
            DarkOrangeEnum = 7,
            
            /// <summary>
            /// Enum DarkPurpleEnum for dark-purple
            /// </summary>
            [EnumMember(Value = "dark-purple")]
            DarkPurpleEnum = 8,
            
            /// <summary>
            /// Enum DarkWarmGrayEnum for dark-warm-gray
            /// </summary>
            [EnumMember(Value = "dark-warm-gray")]
            DarkWarmGrayEnum = 9,
            
            /// <summary>
            /// Enum LightPinkEnum for light-pink
            /// </summary>
            [EnumMember(Value = "light-pink")]
            LightPinkEnum = 10,
            
            /// <summary>
            /// Enum LightGreenEnum for light-green
            /// </summary>
            [EnumMember(Value = "light-green")]
            LightGreenEnum = 11,
            
            /// <summary>
            /// Enum LightBlueEnum for light-blue
            /// </summary>
            [EnumMember(Value = "light-blue")]
            LightBlueEnum = 12,
            
            /// <summary>
            /// Enum LightRedEnum for light-red
            /// </summary>
            [EnumMember(Value = "light-red")]
            LightRedEnum = 13,
            
            /// <summary>
            /// Enum LightTealEnum for light-teal
            /// </summary>
            [EnumMember(Value = "light-teal")]
            LightTealEnum = 14,
            
            /// <summary>
            /// Enum LightBrownEnum for light-brown
            /// </summary>
            [EnumMember(Value = "light-brown")]
            LightBrownEnum = 15,
            
            /// <summary>
            /// Enum LightOrangeEnum for light-orange
            /// </summary>
            [EnumMember(Value = "light-orange")]
            LightOrangeEnum = 16,
            
            /// <summary>
            /// Enum LightPurpleEnum for light-purple
            /// </summary>
            [EnumMember(Value = "light-purple")]
            LightPurpleEnum = 17,
            
            /// <summary>
            /// Enum LightWarmGrayEnum for light-warm-gray
            /// </summary>
            [EnumMember(Value = "light-warm-gray")]
            LightWarmGrayEnum = 18
        }

        /// <summary>
        /// Color of the project.
        /// </summary>
        /// <value>Color of the project.</value>
        /// <example>light-green</example>
        [DataMember(Name="color", EmitDefaultValue=true)]
        public ColorEnum? Color { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatus
        /// </summary>
        [DataMember(Name="current_status", EmitDefaultValue=true)]
        public ProjectBaseAllOfCurrentStatus CurrentStatus { get; set; }

        /// <summary>
        /// Gets or Sets CurrentStatusUpdate
        /// </summary>
        [DataMember(Name="current_status_update", EmitDefaultValue=true)]
        public ProjectBaseAllOfCurrentStatusUpdate CurrentStatusUpdate { get; set; }

        /// <summary>
        /// Array of Custom Field Settings (in compact form).
        /// </summary>
        /// <value>Array of Custom Field Settings (in compact form).</value>
        [DataMember(Name="custom_field_settings", EmitDefaultValue=false)]
        public List<CustomFieldSettingResponse> CustomFieldSettings { get; set; }


        /// <summary>
        /// The default view (list, board, calendar, or timeline) of a project.
        /// </summary>
        /// <value>The default view (list, board, calendar, or timeline) of a project.</value>
        [TypeConverter(typeof(CustomEnumConverter<DefaultViewEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum DefaultViewEnum
        {
            
            /// <summary>
            /// Enum ListEnum for list
            /// </summary>
            [EnumMember(Value = "list")]
            ListEnum = 1,
            
            /// <summary>
            /// Enum BoardEnum for board
            /// </summary>
            [EnumMember(Value = "board")]
            BoardEnum = 2,
            
            /// <summary>
            /// Enum CalendarEnum for calendar
            /// </summary>
            [EnumMember(Value = "calendar")]
            CalendarEnum = 3,
            
            /// <summary>
            /// Enum TimelineEnum for timeline
            /// </summary>
            [EnumMember(Value = "timeline")]
            TimelineEnum = 4
        }

        /// <summary>
        /// The default view (list, board, calendar, or timeline) of a project.
        /// </summary>
        /// <value>The default view (list, board, calendar, or timeline) of a project.</value>
        /// <example>calendar</example>
        [DataMember(Name="default_view", EmitDefaultValue=true)]
        public DefaultViewEnum DefaultView { get; set; }

        /// <summary>
        /// *Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the &#x60;due_on&#x60; field.*</value>
        [DataMember(Name="due_date", EmitDefaultValue=true)]
        public DateTime? DueDate { get; set; }

        /// <summary>
        /// The day on which this project is due. This takes a date with format YYYY-MM-DD.
        /// </summary>
        /// <value>The day on which this project is due. This takes a date with format YYYY-MM-DD.</value>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.</value>
        /// <example>&lt;body&gt;These are things we need to purchase.&lt;/body&gt;</example>
        [DataMember(Name="html_notes", EmitDefaultValue=false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.</value>
        /// <example>false</example>
        [DataMember(Name="is_template", EmitDefaultValue=true)]
        public bool IsTemplate { get; set; }

        /// <summary>
        /// Array of users who are members of this project.
        /// </summary>
        /// <value>Array of users who are members of this project.</value>
        [DataMember(Name="members", EmitDefaultValue=false)]
        public List<UserCompact> Members { get; set; }

        /// <summary>
        /// The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
        /// </summary>
        /// <value>The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="modified_at", EmitDefaultValue=false)]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Free-form textual information associated with the project (ie., its description).
        /// </summary>
        /// <value>Free-form textual information associated with the project (ie., its description).</value>
        /// <example>These are things we need to purchase.</example>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// True if the project is public to its team.
        /// </summary>
        /// <value>True if the project is public to its team.</value>
        /// <example>false</example>
        [DataMember(Name="public", EmitDefaultValue=true)]
        public bool VarPublic { get; set; }

        /// <summary>
        /// The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*
        /// </summary>
        /// <value>The day on which work for this project begins, or null if the project has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter. Additionally, &#x60;start_on&#x60; and &#x60;due_on&#x60; cannot be the same date.*</value>
        /// <example>Fri Sep 13 20:00:00 AST 2019</example>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        public DateTime? StartOn { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public ProjectBaseAllOfWorkspace Workspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ProjectBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Color: ").Append(Color).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  CurrentStatus: ").Append(CurrentStatus).Append("\n");
            sb.Append("  CurrentStatusUpdate: ").Append(CurrentStatusUpdate).Append("\n");
            sb.Append("  CustomFieldSettings: ").Append(CustomFieldSettings).Append("\n");
            sb.Append("  DefaultView: ").Append(DefaultView).Append("\n");
            sb.Append("  DueDate: ").Append(DueDate).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  IsTemplate: ").Append(IsTemplate).Append("\n");
            sb.Append("  Members: ").Append(Members).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  VarPublic: ").Append(VarPublic).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ProjectBase)obj);
        }

        /// <summary>
        /// Returns true if ProjectBase instances are equal
        /// </summary>
        /// <param name="other">Instance of ProjectBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ProjectBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    Color == other.Color ||
                    
                    Color.Equals(other.Color)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    CurrentStatus == other.CurrentStatus ||
                    CurrentStatus != null &&
                    CurrentStatus.Equals(other.CurrentStatus)
                ) && 
                (
                    CurrentStatusUpdate == other.CurrentStatusUpdate ||
                    CurrentStatusUpdate != null &&
                    CurrentStatusUpdate.Equals(other.CurrentStatusUpdate)
                ) && 
                (
                    CustomFieldSettings == other.CustomFieldSettings ||
                    CustomFieldSettings != null &&
                    other.CustomFieldSettings != null &&
                    CustomFieldSettings.SequenceEqual(other.CustomFieldSettings)
                ) && 
                (
                    DefaultView == other.DefaultView ||
                    
                    DefaultView.Equals(other.DefaultView)
                ) && 
                (
                    DueDate == other.DueDate ||
                    DueDate != null &&
                    DueDate.Equals(other.DueDate)
                ) && 
                (
                    DueOn == other.DueOn ||
                    DueOn != null &&
                    DueOn.Equals(other.DueOn)
                ) && 
                (
                    HtmlNotes == other.HtmlNotes ||
                    HtmlNotes != null &&
                    HtmlNotes.Equals(other.HtmlNotes)
                ) && 
                (
                    IsTemplate == other.IsTemplate ||
                    
                    IsTemplate.Equals(other.IsTemplate)
                ) && 
                (
                    Members == other.Members ||
                    Members != null &&
                    other.Members != null &&
                    Members.SequenceEqual(other.Members)
                ) && 
                (
                    ModifiedAt == other.ModifiedAt ||
                    ModifiedAt != null &&
                    ModifiedAt.Equals(other.ModifiedAt)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    VarPublic == other.VarPublic ||
                    
                    VarPublic.Equals(other.VarPublic)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                ) && 
                (
                    Workspace == other.Workspace ||
                    Workspace != null &&
                    Workspace.Equals(other.Workspace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    
                    hashCode = hashCode * 59 + Color.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (CurrentStatus != null)
                    hashCode = hashCode * 59 + CurrentStatus.GetHashCode();
                    if (CurrentStatusUpdate != null)
                    hashCode = hashCode * 59 + CurrentStatusUpdate.GetHashCode();
                    if (CustomFieldSettings != null)
                    hashCode = hashCode * 59 + CustomFieldSettings.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefaultView.GetHashCode();
                    if (DueDate != null)
                    hashCode = hashCode * 59 + DueDate.GetHashCode();
                    if (DueOn != null)
                    hashCode = hashCode * 59 + DueOn.GetHashCode();
                    if (HtmlNotes != null)
                    hashCode = hashCode * 59 + HtmlNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsTemplate.GetHashCode();
                    if (Members != null)
                    hashCode = hashCode * 59 + Members.GetHashCode();
                    if (ModifiedAt != null)
                    hashCode = hashCode * 59 + ModifiedAt.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarPublic.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                    if (Workspace != null)
                    hashCode = hashCode * 59 + Workspace.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ProjectBase left, ProjectBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ProjectBase left, ProjectBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
