/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WebhookResponse : IEquatable<WebhookResponse>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// If true, the webhook will send events - if false it is considered inactive and will not generate events.
        /// </summary>
        /// <value>If true, the webhook will send events - if false it is considered inactive and will not generate events.</value>
        /// <example>false</example>
        [DataMember(Name="active", EmitDefaultValue=true)]
        public bool Active { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public AsanaNamedResource Resource { get; set; }

        /// <summary>
        /// The URL to receive the HTTP POST.
        /// </summary>
        /// <value>The URL to receive the HTTP POST.</value>
        /// <example>https://example.com/receive-webhook/7654</example>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public string Target { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.
        /// </summary>
        /// <value>Whitelist of filters to apply to events from this webhook. If a webhook event passes any of the filters the event will be delivered; otherwise no event will be sent to the receiving server.</value>
        [DataMember(Name="filters", EmitDefaultValue=false)]
        public List<WebhookResponseAllOfFilters> Filters { get; set; }

        /// <summary>
        /// The timestamp when the webhook last received an error when sending an event to the target.
        /// </summary>
        /// <value>The timestamp when the webhook last received an error when sending an event to the target.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="last_failure_at", EmitDefaultValue=false)]
        public DateTime LastFailureAt { get; set; }

        /// <summary>
        /// The contents of the last error response sent to the webhook when attempting to deliver events to the target.
        /// </summary>
        /// <value>The contents of the last error response sent to the webhook when attempting to deliver events to the target.</value>
        /// <example>500 Server Error\n\nCould not complete the request</example>
        [DataMember(Name="last_failure_content", EmitDefaultValue=false)]
        public string LastFailureContent { get; set; }

        /// <summary>
        /// The timestamp when the webhook last successfully sent an event to the target.
        /// </summary>
        /// <value>The timestamp when the webhook last successfully sent an event to the target.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="last_success_at", EmitDefaultValue=false)]
        public DateTime LastSuccessAt { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WebhookResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Active: ").Append(Active).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Filters: ").Append(Filters).Append("\n");
            sb.Append("  LastFailureAt: ").Append(LastFailureAt).Append("\n");
            sb.Append("  LastFailureContent: ").Append(LastFailureContent).Append("\n");
            sb.Append("  LastSuccessAt: ").Append(LastSuccessAt).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WebhookResponse)obj);
        }

        /// <summary>
        /// Returns true if WebhookResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of WebhookResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WebhookResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Active == other.Active ||
                    
                    Active.Equals(other.Active)
                ) && 
                (
                    Resource == other.Resource ||
                    Resource != null &&
                    Resource.Equals(other.Resource)
                ) && 
                (
                    Target == other.Target ||
                    Target != null &&
                    Target.Equals(other.Target)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Filters == other.Filters ||
                    Filters != null &&
                    other.Filters != null &&
                    Filters.SequenceEqual(other.Filters)
                ) && 
                (
                    LastFailureAt == other.LastFailureAt ||
                    LastFailureAt != null &&
                    LastFailureAt.Equals(other.LastFailureAt)
                ) && 
                (
                    LastFailureContent == other.LastFailureContent ||
                    LastFailureContent != null &&
                    LastFailureContent.Equals(other.LastFailureContent)
                ) && 
                (
                    LastSuccessAt == other.LastSuccessAt ||
                    LastSuccessAt != null &&
                    LastSuccessAt.Equals(other.LastSuccessAt)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    
                    hashCode = hashCode * 59 + Active.GetHashCode();
                    if (Resource != null)
                    hashCode = hashCode * 59 + Resource.GetHashCode();
                    if (Target != null)
                    hashCode = hashCode * 59 + Target.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Filters != null)
                    hashCode = hashCode * 59 + Filters.GetHashCode();
                    if (LastFailureAt != null)
                    hashCode = hashCode * 59 + LastFailureAt.GetHashCode();
                    if (LastFailureContent != null)
                    hashCode = hashCode * 59 + LastFailureContent.GetHashCode();
                    if (LastSuccessAt != null)
                    hashCode = hashCode * 59 + LastSuccessAt.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WebhookResponse left, WebhookResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WebhookResponse left, WebhookResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
