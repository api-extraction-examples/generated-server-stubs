/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An *event* is an object representing a change to a resource that was observed by an event subscription or delivered asynchronously to the target location of an active webhook.  The event may be triggered by a different &#x60;user&#x60; than the subscriber. For example, if user A subscribes to a task and user B modified it, the eventâ€™s user will be user B. Note: Some events are generated by the system, and will have &#x60;null&#x60; as the user. API consumers should make sure to handle this case.  The &#x60;resource&#x60; that triggered the event may be different from the one that the events were requested for or the webhook is subscribed to. For example, a subscription to a project will contain events for tasks contained within the project.  **Note:** pay close attention to the relationship between the fields &#x60;Event.action&#x60; and &#x60;Event.change.action&#x60;. &#x60;Event.action&#x60; represents the action taken on the resource itself, and &#x60;Event.change.action&#x60; represents how the information within the resource&#39;s fields have been modified.  For instance, consider these scenarios:   * When at task is added to a project, &#x60;Event.action&#x60; will be &#x60;added&#x60;, &#x60;Event.parent&#x60; will be an object with the &#x60;id&#x60; and &#x60;type&#x60; of the project, and there will be no &#x60;change&#x60; field.   * When an assignee is set on the task, &#x60;Event.parent&#x60; will be &#x60;null&#x60;, &#x60;Event.action&#x60; will be &#x60;changed&#x60;, &#x60;Event.change.action&#x60; will be &#x60;changed&#x60;, and &#x60;new_value&#x60; will be an object with the user&#39;s &#x60;id&#x60; and &#x60;type&#x60;.   * When a collaborator is added to the task, &#x60;Event.parent&#x60; will be &#x60;null&#x60;, &#x60;Event.action&#x60; will be &#x60;changed&#x60;, &#x60;Event.change.action&#x60; will be &#x60;added&#x60;, and &#x60;added_value&#x60; will be an object with the user&#39;s &#x60;id&#x60; and &#x60;type&#x60;.
    /// </summary>
    [DataContract]
    public partial class EventResponse : IEquatable<EventResponse>
    {
        /// <summary>
        /// The type of action taken on the **resource** that triggered the event.  This can be one of &#x60;changed&#x60;, &#x60;added&#x60;, &#x60;removed&#x60;, &#x60;deleted&#x60;, or &#x60;undeleted&#x60; depending on the nature of the event.
        /// </summary>
        /// <value>The type of action taken on the **resource** that triggered the event.  This can be one of &#x60;changed&#x60;, &#x60;added&#x60;, &#x60;removed&#x60;, &#x60;deleted&#x60;, or &#x60;undeleted&#x60; depending on the nature of the event.</value>
        /// <example>changed</example>
        [DataMember(Name="action", EmitDefaultValue=false)]
        public string Action { get; set; }

        /// <summary>
        /// Gets or Sets Change
        /// </summary>
        [DataMember(Name="change", EmitDefaultValue=false)]
        public EventResponseChange Change { get; set; }

        /// <summary>
        /// The timestamp when the event occurred.
        /// </summary>
        /// <value>The timestamp when the event occurred.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Gets or Sets Parent
        /// </summary>
        [DataMember(Name="parent", EmitDefaultValue=false)]
        public EventResponseParent Parent { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public EventResponseResource Resource { get; set; }

        /// <summary>
        /// *Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.
        /// </summary>
        /// <value>*Deprecated: Refer to the resource_type of the resource.* The type of the resource that generated the event.</value>
        /// <example>task</example>
        [DataMember(Name="type", EmitDefaultValue=false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public EventResponseUser User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EventResponse {\n");
            sb.Append("  Action: ").Append(Action).Append("\n");
            sb.Append("  Change: ").Append(Change).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Parent: ").Append(Parent).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EventResponse)obj);
        }

        /// <summary>
        /// Returns true if EventResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of EventResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EventResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Action == other.Action ||
                    Action != null &&
                    Action.Equals(other.Action)
                ) && 
                (
                    Change == other.Change ||
                    Change != null &&
                    Change.Equals(other.Change)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Parent == other.Parent ||
                    Parent != null &&
                    Parent.Equals(other.Parent)
                ) && 
                (
                    Resource == other.Resource ||
                    Resource != null &&
                    Resource.Equals(other.Resource)
                ) && 
                (
                    Type == other.Type ||
                    Type != null &&
                    Type.Equals(other.Type)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Action != null)
                    hashCode = hashCode * 59 + Action.GetHashCode();
                    if (Change != null)
                    hashCode = hashCode * 59 + Change.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Parent != null)
                    hashCode = hashCode * 59 + Parent.GetHashCode();
                    if (Resource != null)
                    hashCode = hashCode * 59 + Resource.GetHashCode();
                    if (Type != null)
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EventResponse left, EventResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EventResponse left, EventResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
