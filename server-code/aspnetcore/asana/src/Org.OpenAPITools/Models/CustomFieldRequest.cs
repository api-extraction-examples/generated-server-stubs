/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CustomFieldRequest : IEquatable<CustomFieldRequest>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets DateValue
        /// </summary>
        [DataMember(Name="date_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfDateValue DateValue { get; set; }

        /// <summary>
        /// A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.
        /// </summary>
        /// <value>A string representation for the value of the custom field. Integrations that don&#39;t require the underlying type should use this field to read values. Using this field will future-proof an app against new custom field types.</value>
        /// <example>blue</example>
        [DataMember(Name="display_value", EmitDefaultValue=true)]
        public string DisplayValue { get; set; }

        /// <summary>
        /// *Conditional*. Determines if the custom field is enabled or not.
        /// </summary>
        /// <value>*Conditional*. Determines if the custom field is enabled or not.</value>
        /// <example>true</example>
        [DataMember(Name="enabled", EmitDefaultValue=true)]
        public bool Enabled { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;enum&#x60;. This array specifies the possible values which an &#x60;enum&#x60; custom field can adopt. To modify the enum options, refer to [working with enum options](/docs/create-an-enum-option).</value>
        [DataMember(Name="enum_options", EmitDefaultValue=false)]
        public List<EnumOption> EnumOptions { get; set; }

        /// <summary>
        /// Gets or Sets EnumValue
        /// </summary>
        [DataMember(Name="enum_value", EmitDefaultValue=false)]
        public CustomFieldCompactAllOfEnumValue EnumValue { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;multi_enum&#x60;. This object is the chosen values of a &#x60;multi_enum&#x60; custom field.</value>
        [DataMember(Name="multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> MultiEnumValues { get; set; }

        /// <summary>
        /// The name of the custom field.
        /// </summary>
        /// <value>The name of the custom field.</value>
        /// <example>Status</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// *Conditional*. This number is the value of a &#x60;number&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This number is the value of a &#x60;number&#x60; custom field.</value>
        /// <example>5.2</example>
        [DataMember(Name="number_value", EmitDefaultValue=true)]
        public decimal NumberValue { get; set; }


        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        [TypeConverter(typeof(CustomEnumConverter<ResourceSubtypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum EnumEnum for enum
            /// </summary>
            [EnumMember(Value = "enum")]
            EnumEnum = 2,
            
            /// <summary>
            /// Enum MultiEnumEnum for multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnumEnum = 3,
            
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 4,
            
            /// <summary>
            /// Enum DateEnum for date
            /// </summary>
            [EnumMember(Value = "date")]
            DateEnum = 5,
            
            /// <summary>
            /// Enum PeopleEnum for people
            /// </summary>
            [EnumMember(Value = "people")]
            PeopleEnum = 6
        }

        /// <summary>
        /// The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>The type of the custom field. Must be one of the given values. </value>
        /// <example>text</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=true)]
        public ResourceSubtypeEnum ResourceSubtype { get; set; }

        /// <summary>
        /// *Conditional*. This string is the value of a &#x60;text&#x60; custom field.
        /// </summary>
        /// <value>*Conditional*. This string is the value of a &#x60;text&#x60; custom field.</value>
        /// <example>Some Value</example>
        [DataMember(Name="text_value", EmitDefaultValue=false)]
        public string TextValue { get; set; }


        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum TextEnum for text
            /// </summary>
            [EnumMember(Value = "text")]
            TextEnum = 1,
            
            /// <summary>
            /// Enum EnumEnum for enum
            /// </summary>
            [EnumMember(Value = "enum")]
            EnumEnum = 2,
            
            /// <summary>
            /// Enum MultiEnumEnum for multi_enum
            /// </summary>
            [EnumMember(Value = "multi_enum")]
            MultiEnumEnum = 3,
            
            /// <summary>
            /// Enum NumberEnum for number
            /// </summary>
            [EnumMember(Value = "number")]
            NumberEnum = 4
        }

        /// <summary>
        /// *Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. 
        /// </summary>
        /// <value>*Deprecated: new integrations should prefer the resource_subtype field.* The type of the custom field. Must be one of the given values. </value>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }


        /// <summary>
        /// *Conditional*. A unique identifier to associate this field with the template source of truth.
        /// </summary>
        /// <value>*Conditional*. A unique identifier to associate this field with the template source of truth.</value>
        [TypeConverter(typeof(CustomEnumConverter<AsanaCreatedFieldEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AsanaCreatedFieldEnum
        {
            
            /// <summary>
            /// Enum AVRequirementsEnum for a_v_requirements
            /// </summary>
            [EnumMember(Value = "a_v_requirements")]
            AVRequirementsEnum = 1,
            
            /// <summary>
            /// Enum AccountNameEnum for account_name
            /// </summary>
            [EnumMember(Value = "account_name")]
            AccountNameEnum = 2,
            
            /// <summary>
            /// Enum ActionableEnum for actionable
            /// </summary>
            [EnumMember(Value = "actionable")]
            ActionableEnum = 3,
            
            /// <summary>
            /// Enum AlignShippingLinkEnum for align_shipping_link
            /// </summary>
            [EnumMember(Value = "align_shipping_link")]
            AlignShippingLinkEnum = 4,
            
            /// <summary>
            /// Enum AlignStatusEnum for align_status
            /// </summary>
            [EnumMember(Value = "align_status")]
            AlignStatusEnum = 5,
            
            /// <summary>
            /// Enum AllottedTimeEnum for allotted_time
            /// </summary>
            [EnumMember(Value = "allotted_time")]
            AllottedTimeEnum = 6,
            
            /// <summary>
            /// Enum AppointmentEnum for appointment
            /// </summary>
            [EnumMember(Value = "appointment")]
            AppointmentEnum = 7,
            
            /// <summary>
            /// Enum ApprovalStageEnum for approval_stage
            /// </summary>
            [EnumMember(Value = "approval_stage")]
            ApprovalStageEnum = 8,
            
            /// <summary>
            /// Enum ApprovedEnum for approved
            /// </summary>
            [EnumMember(Value = "approved")]
            ApprovedEnum = 9,
            
            /// <summary>
            /// Enum ArticleSeriesEnum for article_series
            /// </summary>
            [EnumMember(Value = "article_series")]
            ArticleSeriesEnum = 10,
            
            /// <summary>
            /// Enum BoardCommitteeEnum for board_committee
            /// </summary>
            [EnumMember(Value = "board_committee")]
            BoardCommitteeEnum = 11,
            
            /// <summary>
            /// Enum BrowserEnum for browser
            /// </summary>
            [EnumMember(Value = "browser")]
            BrowserEnum = 12,
            
            /// <summary>
            /// Enum CampaignAudienceEnum for campaign_audience
            /// </summary>
            [EnumMember(Value = "campaign_audience")]
            CampaignAudienceEnum = 13,
            
            /// <summary>
            /// Enum CampaignProjectStatusEnum for campaign_project_status
            /// </summary>
            [EnumMember(Value = "campaign_project_status")]
            CampaignProjectStatusEnum = 14,
            
            /// <summary>
            /// Enum CampaignRegionsEnum for campaign_regions
            /// </summary>
            [EnumMember(Value = "campaign_regions")]
            CampaignRegionsEnum = 15,
            
            /// <summary>
            /// Enum ChannelPrimaryEnum for channel_primary
            /// </summary>
            [EnumMember(Value = "channel_primary")]
            ChannelPrimaryEnum = 16,
            
            /// <summary>
            /// Enum ClientTopicTypeEnum for client_topic_type
            /// </summary>
            [EnumMember(Value = "client_topic_type")]
            ClientTopicTypeEnum = 17,
            
            /// <summary>
            /// Enum CompleteByEnum for complete_by
            /// </summary>
            [EnumMember(Value = "complete_by")]
            CompleteByEnum = 18,
            
            /// <summary>
            /// Enum ContactEnum for contact
            /// </summary>
            [EnumMember(Value = "contact")]
            ContactEnum = 19,
            
            /// <summary>
            /// Enum ContactEmailAddressEnum for contact_email_address
            /// </summary>
            [EnumMember(Value = "contact_email_address")]
            ContactEmailAddressEnum = 20,
            
            /// <summary>
            /// Enum ContentChannelsEnum for content_channels
            /// </summary>
            [EnumMember(Value = "content_channels")]
            ContentChannelsEnum = 21,
            
            /// <summary>
            /// Enum ContentChannelsNeededEnum for content_channels_needed
            /// </summary>
            [EnumMember(Value = "content_channels_needed")]
            ContentChannelsNeededEnum = 22,
            
            /// <summary>
            /// Enum ContentStageEnum for content_stage
            /// </summary>
            [EnumMember(Value = "content_stage")]
            ContentStageEnum = 23,
            
            /// <summary>
            /// Enum ContentTypeEnum for content_type
            /// </summary>
            [EnumMember(Value = "content_type")]
            ContentTypeEnum = 24,
            
            /// <summary>
            /// Enum ContractEnum for contract
            /// </summary>
            [EnumMember(Value = "contract")]
            ContractEnum = 25,
            
            /// <summary>
            /// Enum ContractStatusEnum for contract_status
            /// </summary>
            [EnumMember(Value = "contract_status")]
            ContractStatusEnum = 26,
            
            /// <summary>
            /// Enum CostEnum for cost
            /// </summary>
            [EnumMember(Value = "cost")]
            CostEnum = 27,
            
            /// <summary>
            /// Enum CreationStageEnum for creation_stage
            /// </summary>
            [EnumMember(Value = "creation_stage")]
            CreationStageEnum = 28,
            
            /// <summary>
            /// Enum CreativeChannelEnum for creative_channel
            /// </summary>
            [EnumMember(Value = "creative_channel")]
            CreativeChannelEnum = 29,
            
            /// <summary>
            /// Enum CreativeNeededEnum for creative_needed
            /// </summary>
            [EnumMember(Value = "creative_needed")]
            CreativeNeededEnum = 30,
            
            /// <summary>
            /// Enum CreativeNeedsEnum for creative_needs
            /// </summary>
            [EnumMember(Value = "creative_needs")]
            CreativeNeedsEnum = 31,
            
            /// <summary>
            /// Enum DataSensitivityEnum for data_sensitivity
            /// </summary>
            [EnumMember(Value = "data_sensitivity")]
            DataSensitivityEnum = 32,
            
            /// <summary>
            /// Enum DealSizeEnum for deal_size
            /// </summary>
            [EnumMember(Value = "deal_size")]
            DealSizeEnum = 33,
            
            /// <summary>
            /// Enum DeliveryApptEnum for delivery_appt
            /// </summary>
            [EnumMember(Value = "delivery_appt")]
            DeliveryApptEnum = 34,
            
            /// <summary>
            /// Enum DeliveryApptDateEnum for delivery_appt_date
            /// </summary>
            [EnumMember(Value = "delivery_appt_date")]
            DeliveryApptDateEnum = 35,
            
            /// <summary>
            /// Enum DepartmentEnum for department
            /// </summary>
            [EnumMember(Value = "department")]
            DepartmentEnum = 36,
            
            /// <summary>
            /// Enum DepartmentResponsibleEnum for department_responsible
            /// </summary>
            [EnumMember(Value = "department_responsible")]
            DepartmentResponsibleEnum = 37,
            
            /// <summary>
            /// Enum DesignRequestNeededEnum for design_request_needed
            /// </summary>
            [EnumMember(Value = "design_request_needed")]
            DesignRequestNeededEnum = 38,
            
            /// <summary>
            /// Enum DesignRequestTypeEnum for design_request_type
            /// </summary>
            [EnumMember(Value = "design_request_type")]
            DesignRequestTypeEnum = 39,
            
            /// <summary>
            /// Enum DiscussionCategoryEnum for discussion_category
            /// </summary>
            [EnumMember(Value = "discussion_category")]
            DiscussionCategoryEnum = 40,
            
            /// <summary>
            /// Enum DoThisTaskEnum for do_this_task
            /// </summary>
            [EnumMember(Value = "do_this_task")]
            DoThisTaskEnum = 41,
            
            /// <summary>
            /// Enum EditorialContentStatusEnum for editorial_content_status
            /// </summary>
            [EnumMember(Value = "editorial_content_status")]
            EditorialContentStatusEnum = 42,
            
            /// <summary>
            /// Enum EditorialContentTagEnum for editorial_content_tag
            /// </summary>
            [EnumMember(Value = "editorial_content_tag")]
            EditorialContentTagEnum = 43,
            
            /// <summary>
            /// Enum EditorialContentTypeEnum for editorial_content_type
            /// </summary>
            [EnumMember(Value = "editorial_content_type")]
            EditorialContentTypeEnum = 44,
            
            /// <summary>
            /// Enum EffortEnum for effort
            /// </summary>
            [EnumMember(Value = "effort")]
            EffortEnum = 45,
            
            /// <summary>
            /// Enum EffortLevelEnum for effort_level
            /// </summary>
            [EnumMember(Value = "effort_level")]
            EffortLevelEnum = 46,
            
            /// <summary>
            /// Enum EstCompletionDateEnum for est_completion_date
            /// </summary>
            [EnumMember(Value = "est_completion_date")]
            EstCompletionDateEnum = 47,
            
            /// <summary>
            /// Enum EstimatedTimeEnum for estimated_time
            /// </summary>
            [EnumMember(Value = "estimated_time")]
            EstimatedTimeEnum = 48,
            
            /// <summary>
            /// Enum EstimatedValueEnum for estimated_value
            /// </summary>
            [EnumMember(Value = "estimated_value")]
            EstimatedValueEnum = 49,
            
            /// <summary>
            /// Enum ExpectedCostEnum for expected_cost
            /// </summary>
            [EnumMember(Value = "expected_cost")]
            ExpectedCostEnum = 50,
            
            /// <summary>
            /// Enum ExternalStepsNeededEnum for external_steps_needed
            /// </summary>
            [EnumMember(Value = "external_steps_needed")]
            ExternalStepsNeededEnum = 51,
            
            /// <summary>
            /// Enum FavoriteIdeaEnum for favorite_idea
            /// </summary>
            [EnumMember(Value = "favorite_idea")]
            FavoriteIdeaEnum = 52,
            
            /// <summary>
            /// Enum FeedbackTypeEnum for feedback_type
            /// </summary>
            [EnumMember(Value = "feedback_type")]
            FeedbackTypeEnum = 53,
            
            /// <summary>
            /// Enum FinancialEnum for financial
            /// </summary>
            [EnumMember(Value = "financial")]
            FinancialEnum = 54,
            
            /// <summary>
            /// Enum FundingAmountEnum for funding_amount
            /// </summary>
            [EnumMember(Value = "funding_amount")]
            FundingAmountEnum = 55,
            
            /// <summary>
            /// Enum GrantApplicationProcessEnum for grant_application_process
            /// </summary>
            [EnumMember(Value = "grant_application_process")]
            GrantApplicationProcessEnum = 56,
            
            /// <summary>
            /// Enum HiringCandidateStatusEnum for hiring_candidate_status
            /// </summary>
            [EnumMember(Value = "hiring_candidate_status")]
            HiringCandidateStatusEnum = 57,
            
            /// <summary>
            /// Enum IdeaStatusEnum for idea_status
            /// </summary>
            [EnumMember(Value = "idea_status")]
            IdeaStatusEnum = 58,
            
            /// <summary>
            /// Enum IdsLinkEnum for ids_link
            /// </summary>
            [EnumMember(Value = "ids_link")]
            IdsLinkEnum = 59,
            
            /// <summary>
            /// Enum IdsPatientLinkEnum for ids_patient_link
            /// </summary>
            [EnumMember(Value = "ids_patient_link")]
            IdsPatientLinkEnum = 60,
            
            /// <summary>
            /// Enum ImplementationStageEnum for implementation_stage
            /// </summary>
            [EnumMember(Value = "implementation_stage")]
            ImplementationStageEnum = 61,
            
            /// <summary>
            /// Enum InsuranceEnum for insurance
            /// </summary>
            [EnumMember(Value = "insurance")]
            InsuranceEnum = 62,
            
            /// <summary>
            /// Enum InterviewAreaEnum for interview_area
            /// </summary>
            [EnumMember(Value = "interview_area")]
            InterviewAreaEnum = 63,
            
            /// <summary>
            /// Enum InterviewQuestionScoreEnum for interview_question_score
            /// </summary>
            [EnumMember(Value = "interview_question_score")]
            InterviewQuestionScoreEnum = 64,
            
            /// <summary>
            /// Enum IteroScanLinkEnum for itero_scan_link
            /// </summary>
            [EnumMember(Value = "itero_scan_link")]
            IteroScanLinkEnum = 65,
            
            /// <summary>
            /// Enum JobSAppliedToEnum for job_s_applied_to
            /// </summary>
            [EnumMember(Value = "job_s_applied_to")]
            JobSAppliedToEnum = 66,
            
            /// <summary>
            /// Enum LabEnum for lab
            /// </summary>
            [EnumMember(Value = "lab")]
            LabEnum = 67,
            
            /// <summary>
            /// Enum LaunchStatusEnum for launch_status
            /// </summary>
            [EnumMember(Value = "launch_status")]
            LaunchStatusEnum = 68,
            
            /// <summary>
            /// Enum LeadStatusEnum for lead_status
            /// </summary>
            [EnumMember(Value = "lead_status")]
            LeadStatusEnum = 69,
            
            /// <summary>
            /// Enum LocalizationLanguageEnum for localization_language
            /// </summary>
            [EnumMember(Value = "localization_language")]
            LocalizationLanguageEnum = 70,
            
            /// <summary>
            /// Enum LocalizationMarketTeamEnum for localization_market_team
            /// </summary>
            [EnumMember(Value = "localization_market_team")]
            LocalizationMarketTeamEnum = 71,
            
            /// <summary>
            /// Enum LocalizationStatusEnum for localization_status
            /// </summary>
            [EnumMember(Value = "localization_status")]
            LocalizationStatusEnum = 72,
            
            /// <summary>
            /// Enum MeetingMinutesEnum for meeting_minutes
            /// </summary>
            [EnumMember(Value = "meeting_minutes")]
            MeetingMinutesEnum = 73,
            
            /// <summary>
            /// Enum MeetingNeededEnum for meeting_needed
            /// </summary>
            [EnumMember(Value = "meeting_needed")]
            MeetingNeededEnum = 74,
            
            /// <summary>
            /// Enum MinutesEnum for minutes
            /// </summary>
            [EnumMember(Value = "minutes")]
            MinutesEnum = 75,
            
            /// <summary>
            /// Enum MrrEnum for mrr
            /// </summary>
            [EnumMember(Value = "mrr")]
            MrrEnum = 76,
            
            /// <summary>
            /// Enum MustLocalizeEnum for must_localize
            /// </summary>
            [EnumMember(Value = "must_localize")]
            MustLocalizeEnum = 77,
            
            /// <summary>
            /// Enum NameOfFoundationEnum for name_of_foundation
            /// </summary>
            [EnumMember(Value = "name_of_foundation")]
            NameOfFoundationEnum = 78,
            
            /// <summary>
            /// Enum NeedToFollowUpEnum for need_to_follow_up
            /// </summary>
            [EnumMember(Value = "need_to_follow_up")]
            NeedToFollowUpEnum = 79,
            
            /// <summary>
            /// Enum NextAppointmentEnum for next_appointment
            /// </summary>
            [EnumMember(Value = "next_appointment")]
            NextAppointmentEnum = 80,
            
            /// <summary>
            /// Enum NextStepsSalesEnum for next_steps_sales
            /// </summary>
            [EnumMember(Value = "next_steps_sales")]
            NextStepsSalesEnum = 81,
            
            /// <summary>
            /// Enum NumPeopleEnum for num_people
            /// </summary>
            [EnumMember(Value = "num_people")]
            NumPeopleEnum = 82,
            
            /// <summary>
            /// Enum NumberOfUserReportsEnum for number_of_user_reports
            /// </summary>
            [EnumMember(Value = "number_of_user_reports")]
            NumberOfUserReportsEnum = 83,
            
            /// <summary>
            /// Enum OfficeLocationEnum for office_location
            /// </summary>
            [EnumMember(Value = "office_location")]
            OfficeLocationEnum = 84,
            
            /// <summary>
            /// Enum OnboardingActivityEnum for onboarding_activity
            /// </summary>
            [EnumMember(Value = "onboarding_activity")]
            OnboardingActivityEnum = 85,
            
            /// <summary>
            /// Enum OwnerEnum for owner
            /// </summary>
            [EnumMember(Value = "owner")]
            OwnerEnum = 86,
            
            /// <summary>
            /// Enum ParticipantsNeededEnum for participants_needed
            /// </summary>
            [EnumMember(Value = "participants_needed")]
            ParticipantsNeededEnum = 87,
            
            /// <summary>
            /// Enum PatientDateOfBirthEnum for patient_date_of_birth
            /// </summary>
            [EnumMember(Value = "patient_date_of_birth")]
            PatientDateOfBirthEnum = 88,
            
            /// <summary>
            /// Enum PatientEmailEnum for patient_email
            /// </summary>
            [EnumMember(Value = "patient_email")]
            PatientEmailEnum = 89,
            
            /// <summary>
            /// Enum PatientPhoneEnum for patient_phone
            /// </summary>
            [EnumMember(Value = "patient_phone")]
            PatientPhoneEnum = 90,
            
            /// <summary>
            /// Enum PatientStatusEnum for patient_status
            /// </summary>
            [EnumMember(Value = "patient_status")]
            PatientStatusEnum = 91,
            
            /// <summary>
            /// Enum PhoneNumberEnum for phone_number
            /// </summary>
            [EnumMember(Value = "phone_number")]
            PhoneNumberEnum = 92,
            
            /// <summary>
            /// Enum PlanningCategoryEnum for planning_category
            /// </summary>
            [EnumMember(Value = "planning_category")]
            PlanningCategoryEnum = 93,
            
            /// <summary>
            /// Enum PointOfContactEnum for point_of_contact
            /// </summary>
            [EnumMember(Value = "point_of_contact")]
            PointOfContactEnum = 94,
            
            /// <summary>
            /// Enum PositionEnum for position
            /// </summary>
            [EnumMember(Value = "position")]
            PositionEnum = 95,
            
            /// <summary>
            /// Enum PostFormatEnum for post_format
            /// </summary>
            [EnumMember(Value = "post_format")]
            PostFormatEnum = 96,
            
            /// <summary>
            /// Enum PrescriptionEnum for prescription
            /// </summary>
            [EnumMember(Value = "prescription")]
            PrescriptionEnum = 97,
            
            /// <summary>
            /// Enum PriorityEnum for priority
            /// </summary>
            [EnumMember(Value = "priority")]
            PriorityEnum = 98,
            
            /// <summary>
            /// Enum PriorityLevelEnum for priority_level
            /// </summary>
            [EnumMember(Value = "priority_level")]
            PriorityLevelEnum = 99,
            
            /// <summary>
            /// Enum ProductEnum for product
            /// </summary>
            [EnumMember(Value = "product")]
            ProductEnum = 100,
            
            /// <summary>
            /// Enum ProductStageEnum for product_stage
            /// </summary>
            [EnumMember(Value = "product_stage")]
            ProductStageEnum = 101,
            
            /// <summary>
            /// Enum ProgressEnum for progress
            /// </summary>
            [EnumMember(Value = "progress")]
            ProgressEnum = 102,
            
            /// <summary>
            /// Enum ProjectSizeEnum for project_size
            /// </summary>
            [EnumMember(Value = "project_size")]
            ProjectSizeEnum = 103,
            
            /// <summary>
            /// Enum ProjectStatusEnum for project_status
            /// </summary>
            [EnumMember(Value = "project_status")]
            ProjectStatusEnum = 104,
            
            /// <summary>
            /// Enum ProposedBudgetEnum for proposed_budget
            /// </summary>
            [EnumMember(Value = "proposed_budget")]
            ProposedBudgetEnum = 105,
            
            /// <summary>
            /// Enum PublishStatusEnum for publish_status
            /// </summary>
            [EnumMember(Value = "publish_status")]
            PublishStatusEnum = 106,
            
            /// <summary>
            /// Enum ReasonForScanEnum for reason_for_scan
            /// </summary>
            [EnumMember(Value = "reason_for_scan")]
            ReasonForScanEnum = 107,
            
            /// <summary>
            /// Enum ReferralEnum for referral
            /// </summary>
            [EnumMember(Value = "referral")]
            ReferralEnum = 108,
            
            /// <summary>
            /// Enum RequestTypeEnum for request_type
            /// </summary>
            [EnumMember(Value = "request_type")]
            RequestTypeEnum = 109,
            
            /// <summary>
            /// Enum ResearchStatusEnum for research_status
            /// </summary>
            [EnumMember(Value = "research_status")]
            ResearchStatusEnum = 110,
            
            /// <summary>
            /// Enum ResponsibleDepartmentEnum for responsible_department
            /// </summary>
            [EnumMember(Value = "responsible_department")]
            ResponsibleDepartmentEnum = 111,
            
            /// <summary>
            /// Enum ResponsibleTeamEnum for responsible_team
            /// </summary>
            [EnumMember(Value = "responsible_team")]
            ResponsibleTeamEnum = 112,
            
            /// <summary>
            /// Enum RiskAssessmentStatusEnum for risk_assessment_status
            /// </summary>
            [EnumMember(Value = "risk_assessment_status")]
            RiskAssessmentStatusEnum = 113,
            
            /// <summary>
            /// Enum RoomNameEnum for room_name
            /// </summary>
            [EnumMember(Value = "room_name")]
            RoomNameEnum = 114,
            
            /// <summary>
            /// Enum SalesCounterpartEnum for sales_counterpart
            /// </summary>
            [EnumMember(Value = "sales_counterpart")]
            SalesCounterpartEnum = 115,
            
            /// <summary>
            /// Enum SentimentEnum for sentiment
            /// </summary>
            [EnumMember(Value = "sentiment")]
            SentimentEnum = 116,
            
            /// <summary>
            /// Enum ShippingLinkEnum for shipping_link
            /// </summary>
            [EnumMember(Value = "shipping_link")]
            ShippingLinkEnum = 117,
            
            /// <summary>
            /// Enum SocialChannelsEnum for social_channels
            /// </summary>
            [EnumMember(Value = "social_channels")]
            SocialChannelsEnum = 118,
            
            /// <summary>
            /// Enum StageEnum for stage
            /// </summary>
            [EnumMember(Value = "stage")]
            StageEnum = 119,
            
            /// <summary>
            /// Enum StatusEnum for status
            /// </summary>
            [EnumMember(Value = "status")]
            StatusEnum = 120,
            
            /// <summary>
            /// Enum StatusDesignEnum for status_design
            /// </summary>
            [EnumMember(Value = "status_design")]
            StatusDesignEnum = 121,
            
            /// <summary>
            /// Enum StatusOfInitiativeEnum for status_of_initiative
            /// </summary>
            [EnumMember(Value = "status_of_initiative")]
            StatusOfInitiativeEnum = 122,
            
            /// <summary>
            /// Enum SystemSetupEnum for system_setup
            /// </summary>
            [EnumMember(Value = "system_setup")]
            SystemSetupEnum = 123,
            
            /// <summary>
            /// Enum TaskProgressEnum for task_progress
            /// </summary>
            [EnumMember(Value = "task_progress")]
            TaskProgressEnum = 124,
            
            /// <summary>
            /// Enum TeamEnum for team
            /// </summary>
            [EnumMember(Value = "team")]
            TeamEnum = 125,
            
            /// <summary>
            /// Enum TeamMarketingEnum for team_marketing
            /// </summary>
            [EnumMember(Value = "team_marketing")]
            TeamMarketingEnum = 126,
            
            /// <summary>
            /// Enum TeamResponsibleEnum for team_responsible
            /// </summary>
            [EnumMember(Value = "team_responsible")]
            TeamResponsibleEnum = 127,
            
            /// <summary>
            /// Enum TimeItTakesToCompleteTasksEnum for time_it_takes_to_complete_tasks
            /// </summary>
            [EnumMember(Value = "time_it_takes_to_complete_tasks")]
            TimeItTakesToCompleteTasksEnum = 128,
            
            /// <summary>
            /// Enum TimeframeEnum for timeframe
            /// </summary>
            [EnumMember(Value = "timeframe")]
            TimeframeEnum = 129,
            
            /// <summary>
            /// Enum TreatmentTypeEnum for treatment_type
            /// </summary>
            [EnumMember(Value = "treatment_type")]
            TreatmentTypeEnum = 130,
            
            /// <summary>
            /// Enum TypeWorkRequestsItEnum for type_work_requests_it
            /// </summary>
            [EnumMember(Value = "type_work_requests_it")]
            TypeWorkRequestsItEnum = 131,
            
            /// <summary>
            /// Enum UseAgencyEnum for use_agency
            /// </summary>
            [EnumMember(Value = "use_agency")]
            UseAgencyEnum = 132,
            
            /// <summary>
            /// Enum UserNameEnum for user_name
            /// </summary>
            [EnumMember(Value = "user_name")]
            UserNameEnum = 133,
            
            /// <summary>
            /// Enum VendorCategoryEnum for vendor_category
            /// </summary>
            [EnumMember(Value = "vendor_category")]
            VendorCategoryEnum = 134,
            
            /// <summary>
            /// Enum VendorTypeEnum for vendor_type
            /// </summary>
            [EnumMember(Value = "vendor_type")]
            VendorTypeEnum = 135,
            
            /// <summary>
            /// Enum WordCountEnum for word_count
            /// </summary>
            [EnumMember(Value = "word_count")]
            WordCountEnum = 136
        }

        /// <summary>
        /// *Conditional*. A unique identifier to associate this field with the template source of truth.
        /// </summary>
        /// <value>*Conditional*. A unique identifier to associate this field with the template source of truth.</value>
        /// <example>priority</example>
        [DataMember(Name="asana_created_field", EmitDefaultValue=true)]
        public AsanaCreatedFieldEnum? AsanaCreatedField { get; set; }

        /// <summary>
        /// ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.
        /// </summary>
        /// <value>ISO 4217 currency code to format this custom field. This will be null if the &#x60;format&#x60; is not &#x60;currency&#x60;.</value>
        /// <example>EUR</example>
        [DataMember(Name="currency_code", EmitDefaultValue=true)]
        public string CurrencyCode { get; set; }

        /// <summary>
        /// This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>This is the string that appears next to the custom field value. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        /// <example>gold pieces</example>
        [DataMember(Name="custom_label", EmitDefaultValue=true)]
        public string CustomLabel { get; set; }


        /// <summary>
        /// Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.
        /// </summary>
        /// <value>Only relevant for custom fields with `custom` format. This depicts where to place the custom label. This will be null if the `format` is not `custom`.</value>
        [TypeConverter(typeof(CustomEnumConverter<CustomLabelPositionEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CustomLabelPositionEnum
        {
            
            /// <summary>
            /// Enum PrefixEnum for prefix
            /// </summary>
            [EnumMember(Value = "prefix")]
            PrefixEnum = 1,
            
            /// <summary>
            /// Enum SuffixEnum for suffix
            /// </summary>
            [EnumMember(Value = "suffix")]
            SuffixEnum = 2
        }

        /// <summary>
        /// Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.
        /// </summary>
        /// <value>Only relevant for custom fields with &#x60;custom&#x60; format. This depicts where to place the custom label. This will be null if the &#x60;format&#x60; is not &#x60;custom&#x60;.</value>
        /// <example>suffix</example>
        [DataMember(Name="custom_label_position", EmitDefaultValue=true)]
        public CustomLabelPositionEnum CustomLabelPosition { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The description of the custom field.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The description of the custom field.</value>
        /// <example>Development team priority</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }


        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        [TypeConverter(typeof(CustomEnumConverter<FormatEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum FormatEnum
        {
            
            /// <summary>
            /// Enum CurrencyEnum for currency
            /// </summary>
            [EnumMember(Value = "currency")]
            CurrencyEnum = 1,
            
            /// <summary>
            /// Enum IdentifierEnum for identifier
            /// </summary>
            [EnumMember(Value = "identifier")]
            IdentifierEnum = 2,
            
            /// <summary>
            /// Enum PercentageEnum for percentage
            /// </summary>
            [EnumMember(Value = "percentage")]
            PercentageEnum = 3,
            
            /// <summary>
            /// Enum CustomEnum for custom
            /// </summary>
            [EnumMember(Value = "custom")]
            CustomEnum = 4,
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 5
        }

        /// <summary>
        /// The format of this custom field.
        /// </summary>
        /// <value>The format of this custom field.</value>
        /// <example>custom</example>
        [DataMember(Name="format", EmitDefaultValue=true)]
        public FormatEnum Format { get; set; }

        /// <summary>
        /// *Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.
        /// </summary>
        /// <value>*Conditional*. This flag describes whether a follower of a task with this field should receive inbox notifications from changes to this field.</value>
        /// <example>true</example>
        [DataMember(Name="has_notifications_enabled", EmitDefaultValue=true)]
        public bool HasNotificationsEnabled { get; set; }

        /// <summary>
        /// This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.
        /// </summary>
        /// <value>This flag describes whether this custom field is available to every container in the workspace. Before project-specific custom fields, this field was always true.</value>
        /// <example>true</example>
        [DataMember(Name="is_global_to_workspace", EmitDefaultValue=true)]
        public bool IsGlobalToWorkspace { get; set; }

        /// <summary>
        /// Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.
        /// </summary>
        /// <value>Only relevant for custom fields of type ‘Number’. This field dictates the number of places after the decimal to round to, i.e. 0 is integer values, 1 rounds to the nearest tenth, and so on. Must be between 0 and 6, inclusive. For percentage format, this may be unintuitive, as a value of 0.25 has a precision of 0, while a value of 0.251 has a precision of 1. This is due to 0.25 being displayed as 25%. The identifier format will always have a precision of 0.</value>
        /// <example>2</example>
        [DataMember(Name="precision", EmitDefaultValue=true)]
        public int Precision { get; set; }

        /// <summary>
        /// *Conditional*. Only relevant for custom fields of type &#x60;people&#x60;. This array of user GIDs reflects the users to be written to a &#x60;people&#x60; custom field. Note that *write* operations will replace existing users (if any) in the custom field with the users specified in this array.
        /// </summary>
        /// <value>*Conditional*. Only relevant for custom fields of type &#x60;people&#x60;. This array of user GIDs reflects the users to be written to a &#x60;people&#x60; custom field. Note that *write* operations will replace existing users (if any) in the custom field with the users specified in this array.</value>
        /// <example>[&quot;12345&quot;]</example>
        [DataMember(Name="people_value", EmitDefaultValue=false)]
        public List<string> PeopleValue { get; set; }

        /// <summary>
        /// *Create-Only* The workspace to create a custom field in.
        /// </summary>
        /// <value>*Create-Only* The workspace to create a custom field in.</value>
        /// <example>1331</example>
        [Required]
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public string Workspace { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CustomFieldRequest {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  DateValue: ").Append(DateValue).Append("\n");
            sb.Append("  DisplayValue: ").Append(DisplayValue).Append("\n");
            sb.Append("  Enabled: ").Append(Enabled).Append("\n");
            sb.Append("  EnumOptions: ").Append(EnumOptions).Append("\n");
            sb.Append("  EnumValue: ").Append(EnumValue).Append("\n");
            sb.Append("  MultiEnumValues: ").Append(MultiEnumValues).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  NumberValue: ").Append(NumberValue).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  TextValue: ").Append(TextValue).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  AsanaCreatedField: ").Append(AsanaCreatedField).Append("\n");
            sb.Append("  CurrencyCode: ").Append(CurrencyCode).Append("\n");
            sb.Append("  CustomLabel: ").Append(CustomLabel).Append("\n");
            sb.Append("  CustomLabelPosition: ").Append(CustomLabelPosition).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Format: ").Append(Format).Append("\n");
            sb.Append("  HasNotificationsEnabled: ").Append(HasNotificationsEnabled).Append("\n");
            sb.Append("  IsGlobalToWorkspace: ").Append(IsGlobalToWorkspace).Append("\n");
            sb.Append("  Precision: ").Append(Precision).Append("\n");
            sb.Append("  PeopleValue: ").Append(PeopleValue).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CustomFieldRequest)obj);
        }

        /// <summary>
        /// Returns true if CustomFieldRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CustomFieldRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CustomFieldRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    DateValue == other.DateValue ||
                    DateValue != null &&
                    DateValue.Equals(other.DateValue)
                ) && 
                (
                    DisplayValue == other.DisplayValue ||
                    DisplayValue != null &&
                    DisplayValue.Equals(other.DisplayValue)
                ) && 
                (
                    Enabled == other.Enabled ||
                    
                    Enabled.Equals(other.Enabled)
                ) && 
                (
                    EnumOptions == other.EnumOptions ||
                    EnumOptions != null &&
                    other.EnumOptions != null &&
                    EnumOptions.SequenceEqual(other.EnumOptions)
                ) && 
                (
                    EnumValue == other.EnumValue ||
                    EnumValue != null &&
                    EnumValue.Equals(other.EnumValue)
                ) && 
                (
                    MultiEnumValues == other.MultiEnumValues ||
                    MultiEnumValues != null &&
                    other.MultiEnumValues != null &&
                    MultiEnumValues.SequenceEqual(other.MultiEnumValues)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    NumberValue == other.NumberValue ||
                    
                    NumberValue.Equals(other.NumberValue)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    TextValue == other.TextValue ||
                    TextValue != null &&
                    TextValue.Equals(other.TextValue)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                ) && 
                (
                    AsanaCreatedField == other.AsanaCreatedField ||
                    
                    AsanaCreatedField.Equals(other.AsanaCreatedField)
                ) && 
                (
                    CurrencyCode == other.CurrencyCode ||
                    CurrencyCode != null &&
                    CurrencyCode.Equals(other.CurrencyCode)
                ) && 
                (
                    CustomLabel == other.CustomLabel ||
                    CustomLabel != null &&
                    CustomLabel.Equals(other.CustomLabel)
                ) && 
                (
                    CustomLabelPosition == other.CustomLabelPosition ||
                    
                    CustomLabelPosition.Equals(other.CustomLabelPosition)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Format == other.Format ||
                    
                    Format.Equals(other.Format)
                ) && 
                (
                    HasNotificationsEnabled == other.HasNotificationsEnabled ||
                    
                    HasNotificationsEnabled.Equals(other.HasNotificationsEnabled)
                ) && 
                (
                    IsGlobalToWorkspace == other.IsGlobalToWorkspace ||
                    
                    IsGlobalToWorkspace.Equals(other.IsGlobalToWorkspace)
                ) && 
                (
                    Precision == other.Precision ||
                    
                    Precision.Equals(other.Precision)
                ) && 
                (
                    PeopleValue == other.PeopleValue ||
                    PeopleValue != null &&
                    other.PeopleValue != null &&
                    PeopleValue.SequenceEqual(other.PeopleValue)
                ) && 
                (
                    Workspace == other.Workspace ||
                    Workspace != null &&
                    Workspace.Equals(other.Workspace)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (DateValue != null)
                    hashCode = hashCode * 59 + DateValue.GetHashCode();
                    if (DisplayValue != null)
                    hashCode = hashCode * 59 + DisplayValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Enabled.GetHashCode();
                    if (EnumOptions != null)
                    hashCode = hashCode * 59 + EnumOptions.GetHashCode();
                    if (EnumValue != null)
                    hashCode = hashCode * 59 + EnumValue.GetHashCode();
                    if (MultiEnumValues != null)
                    hashCode = hashCode * 59 + MultiEnumValues.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumberValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    if (TextValue != null)
                    hashCode = hashCode * 59 + TextValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                    
                    hashCode = hashCode * 59 + AsanaCreatedField.GetHashCode();
                    if (CurrencyCode != null)
                    hashCode = hashCode * 59 + CurrencyCode.GetHashCode();
                    if (CustomLabel != null)
                    hashCode = hashCode * 59 + CustomLabel.GetHashCode();
                    
                    hashCode = hashCode * 59 + CustomLabelPosition.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + Format.GetHashCode();
                    
                    hashCode = hashCode * 59 + HasNotificationsEnabled.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsGlobalToWorkspace.GetHashCode();
                    
                    hashCode = hashCode * 59 + Precision.GetHashCode();
                    if (PeopleValue != null)
                    hashCode = hashCode * 59 + PeopleValue.GetHashCode();
                    if (Workspace != null)
                    hashCode = hashCode * 59 + Workspace.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CustomFieldRequest left, CustomFieldRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CustomFieldRequest left, CustomFieldRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
