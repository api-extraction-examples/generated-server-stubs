/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaskBase : IEquatable<TaskBase>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
        /// </summary>
        /// <value>Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.</value>
        /// <example>Buy catnip</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }


        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        [TypeConverter(typeof(CustomEnumConverter<ResourceSubtypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResourceSubtypeEnum
        {
            
            /// <summary>
            /// Enum DefaultTaskEnum for default_task
            /// </summary>
            [EnumMember(Value = "default_task")]
            DefaultTaskEnum = 1,
            
            /// <summary>
            /// Enum MilestoneEnum for milestone
            /// </summary>
            [EnumMember(Value = "milestone")]
            MilestoneEnum = 2,
            
            /// <summary>
            /// Enum SectionEnum for section
            /// </summary>
            [EnumMember(Value = "section")]
            SectionEnum = 3,
            
            /// <summary>
            /// Enum ApprovalEnum for approval
            /// </summary>
            [EnumMember(Value = "approval")]
            ApprovalEnum = 4
        }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype &#x60;milestone&#x60; represent a single moment in time. This means tasks with this subtype cannot have a start_date.</value>
        /// <example>default_task</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=true)]
        public ResourceSubtypeEnum ResourceSubtype { get; set; }

        /// <summary>
        /// This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.
        /// </summary>
        /// <value>This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.</value>
        /// <example>200</example>
        [DataMember(Name="actual_time_minutes", EmitDefaultValue=true)]
        public decimal? ActualTimeMinutes { get; set; }


        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ApprovalStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ApprovalStatusEnum
        {
            
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 1,
            
            /// <summary>
            /// Enum ApprovedEnum for approved
            /// </summary>
            [EnumMember(Value = "approved")]
            ApprovedEnum = 2,
            
            /// <summary>
            /// Enum RejectedEnum for rejected
            /// </summary>
            [EnumMember(Value = "rejected")]
            RejectedEnum = 3,
            
            /// <summary>
            /// Enum ChangesRequestedEnum for changes_requested
            /// </summary>
            [EnumMember(Value = "changes_requested")]
            ChangesRequestedEnum = 4
        }

        /// <summary>
        /// *Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.
        /// </summary>
        /// <value>*Conditional* Reflects the approval status of this task. This field is kept in sync with &#x60;completed&#x60;, meaning &#x60;pending&#x60; translates to false while &#x60;approved&#x60;, &#x60;rejected&#x60;, and &#x60;changes_requested&#x60; translate to true. If you set completed to true, this field will be set to &#x60;approved&#x60;.</value>
        /// <example>pending</example>
        [DataMember(Name="approval_status", EmitDefaultValue=true)]
        public ApprovalStatusEnum ApprovalStatus { get; set; }


        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.</value>
        [TypeConverter(typeof(CustomEnumConverter<AssigneeStatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum AssigneeStatusEnum
        {
            
            /// <summary>
            /// Enum TodayEnum for today
            /// </summary>
            [EnumMember(Value = "today")]
            TodayEnum = 1,
            
            /// <summary>
            /// Enum UpcomingEnum for upcoming
            /// </summary>
            [EnumMember(Value = "upcoming")]
            UpcomingEnum = 2,
            
            /// <summary>
            /// Enum LaterEnum for later
            /// </summary>
            [EnumMember(Value = "later")]
            LaterEnum = 3,
            
            /// <summary>
            /// Enum NewEnum for new
            /// </summary>
            [EnumMember(Value = "new")]
            NewEnum = 4,
            
            /// <summary>
            /// Enum InboxEnum for inbox
            /// </summary>
            [EnumMember(Value = "inbox")]
            InboxEnum = 5
        }

        /// <summary>
        /// *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.
        /// </summary>
        /// <value>*Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \&quot;inbox\&quot; or \&quot;upcoming\&quot; inserts it at the top of the section, while the other options will insert at the bottom.</value>
        /// <example>upcoming</example>
        [DataMember(Name="assignee_status", EmitDefaultValue=true)]
        public AssigneeStatusEnum AssigneeStatus { get; set; }

        /// <summary>
        /// True if the task is currently marked complete, false if not.
        /// </summary>
        /// <value>True if the task is currently marked complete, false if not.</value>
        /// <example>false</example>
        [DataMember(Name="completed", EmitDefaultValue=true)]
        public bool Completed { get; set; }

        /// <summary>
        /// The time at which this task was completed, or null if the task is incomplete.
        /// </summary>
        /// <value>The time at which this task was completed, or null if the task is incomplete.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="completed_at", EmitDefaultValue=true)]
        public DateTime? CompletedAt { get; set; }

        /// <summary>
        /// Gets or Sets CompletedBy
        /// </summary>
        [DataMember(Name="completed_by", EmitDefaultValue=false)]
        public UserCompact CompletedBy { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.</value>
        [DataMember(Name="dependencies", EmitDefaultValue=false)]
        public List<AsanaResource> Dependencies { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.</value>
        [DataMember(Name="dependents", EmitDefaultValue=false)]
        public List<AsanaResource> Dependents { get; set; }

        /// <summary>
        /// The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.
        /// </summary>
        /// <value>The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;due_on&#x60;.</value>
        [DataMember(Name="due_at", EmitDefaultValue=true)]
        public DateTime? DueAt { get; set; }

        /// <summary>
        /// The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.
        /// </summary>
        /// <value>The localized date on which this task is due, or null if the task has no due date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;due_at&#x60;.</value>
        /// <example>Sat Sep 14 20:00:00 AST 2019</example>
        [DataMember(Name="due_on", EmitDefaultValue=true)]
        public DateTime? DueOn { get; set; }

        /// <summary>
        /// Gets or Sets External
        /// </summary>
        [DataMember(Name="external", EmitDefaultValue=false)]
        public TaskBaseAllOfExternal External { get; set; }

        /// <summary>
        /// *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.</value>
        /// <example>true</example>
        [DataMember(Name="hearted", EmitDefaultValue=true)]
        public bool Hearted { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead* Array of likes for users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* Array of likes for users who have hearted this task.</value>
        [DataMember(Name="hearts", EmitDefaultValue=false)]
        public List<Like> Hearts { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.</value>
        /// <example>&lt;body&gt;Mittens &lt;em&gt;really&lt;/em&gt; likes the stuff from Humboldt.&lt;/body&gt;</example>
        [DataMember(Name="html_notes", EmitDefaultValue=false)]
        public string HtmlNotes { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true &#x60;section&#x60; objects. If a &#x60;task&#x60; object is rendered this way in any context it will have the property &#x60;is_rendered_as_separator&#x60; set to &#x60;true&#x60;.</value>
        /// <example>false</example>
        [DataMember(Name="is_rendered_as_separator", EmitDefaultValue=true)]
        public bool IsRenderedAsSeparator { get; set; }

        /// <summary>
        /// True if the task is liked by the authorized user, false if not.
        /// </summary>
        /// <value>True if the task is liked by the authorized user, false if not.</value>
        /// <example>true</example>
        [DataMember(Name="liked", EmitDefaultValue=true)]
        public bool Liked { get; set; }

        /// <summary>
        /// Array of likes for users who have liked this task.
        /// </summary>
        /// <value>Array of likes for users who have liked this task.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; set; }

        /// <summary>
        /// *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.
        /// </summary>
        /// <value>*Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the &#x60;addProject&#x60; and &#x60;removeProject&#x60; endpoints. Note that over time, more types of memberships may be added to this property.</value>
        [DataMember(Name="memberships", EmitDefaultValue=false)]
        public List<TaskBaseAllOfMemberships> Memberships { get; set; }

        /// <summary>
        /// The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*
        /// </summary>
        /// <value>The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="modified_at", EmitDefaultValue=false)]
        public DateTime ModifiedAt { get; set; }

        /// <summary>
        /// Free-form textual information associated with the task (i.e. its description).
        /// </summary>
        /// <value>Free-form textual information associated with the task (i.e. its description).</value>
        /// <example>Mittens really likes the stuff from Humboldt.</example>
        [DataMember(Name="notes", EmitDefaultValue=false)]
        public string Notes { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead* The number of users who have hearted this task.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* The number of users who have hearted this task.</value>
        /// <example>5</example>
        [DataMember(Name="num_hearts", EmitDefaultValue=true)]
        public int NumHearts { get; set; }

        /// <summary>
        /// The number of users who have liked this task.
        /// </summary>
        /// <value>The number of users who have liked this task.</value>
        /// <example>5</example>
        [DataMember(Name="num_likes", EmitDefaultValue=true)]
        public int NumLikes { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). The number of subtasks on this task. 
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). The number of subtasks on this task. </value>
        /// <example>3</example>
        [DataMember(Name="num_subtasks", EmitDefaultValue=true)]
        public int NumSubtasks { get; set; }

        /// <summary>
        /// Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*
        /// </summary>
        /// <value>Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with &#x60;start_on&#x60;. *Note: &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_at&#x60; parameter.*</value>
        [DataMember(Name="start_at", EmitDefaultValue=true)]
        public DateTime? StartAt { get; set; }

        /// <summary>
        /// The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*
        /// </summary>
        /// <value>The day on which work begins for the task , or null if the task has no start date. This takes a date with &#x60;YYYY-MM-DD&#x60; format and should not be used together with &#x60;start_at&#x60;. *Note: &#x60;due_on&#x60; or &#x60;due_at&#x60; must be present in the request when setting or unsetting the &#x60;start_on&#x60; parameter.*</value>
        /// <example>Fri Sep 13 20:00:00 AST 2019</example>
        [DataMember(Name="start_on", EmitDefaultValue=true)]
        public DateTime? StartOn { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskBase {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  ActualTimeMinutes: ").Append(ActualTimeMinutes).Append("\n");
            sb.Append("  ApprovalStatus: ").Append(ApprovalStatus).Append("\n");
            sb.Append("  AssigneeStatus: ").Append(AssigneeStatus).Append("\n");
            sb.Append("  Completed: ").Append(Completed).Append("\n");
            sb.Append("  CompletedAt: ").Append(CompletedAt).Append("\n");
            sb.Append("  CompletedBy: ").Append(CompletedBy).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Dependencies: ").Append(Dependencies).Append("\n");
            sb.Append("  Dependents: ").Append(Dependents).Append("\n");
            sb.Append("  DueAt: ").Append(DueAt).Append("\n");
            sb.Append("  DueOn: ").Append(DueOn).Append("\n");
            sb.Append("  External: ").Append(External).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  HtmlNotes: ").Append(HtmlNotes).Append("\n");
            sb.Append("  IsRenderedAsSeparator: ").Append(IsRenderedAsSeparator).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  Memberships: ").Append(Memberships).Append("\n");
            sb.Append("  ModifiedAt: ").Append(ModifiedAt).Append("\n");
            sb.Append("  Notes: ").Append(Notes).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  NumSubtasks: ").Append(NumSubtasks).Append("\n");
            sb.Append("  StartAt: ").Append(StartAt).Append("\n");
            sb.Append("  StartOn: ").Append(StartOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskBase)obj);
        }

        /// <summary>
        /// Returns true if TaskBase instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskBase to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskBase other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    ActualTimeMinutes == other.ActualTimeMinutes ||
                    ActualTimeMinutes != null &&
                    ActualTimeMinutes.Equals(other.ActualTimeMinutes)
                ) && 
                (
                    ApprovalStatus == other.ApprovalStatus ||
                    
                    ApprovalStatus.Equals(other.ApprovalStatus)
                ) && 
                (
                    AssigneeStatus == other.AssigneeStatus ||
                    
                    AssigneeStatus.Equals(other.AssigneeStatus)
                ) && 
                (
                    Completed == other.Completed ||
                    
                    Completed.Equals(other.Completed)
                ) && 
                (
                    CompletedAt == other.CompletedAt ||
                    CompletedAt != null &&
                    CompletedAt.Equals(other.CompletedAt)
                ) && 
                (
                    CompletedBy == other.CompletedBy ||
                    CompletedBy != null &&
                    CompletedBy.Equals(other.CompletedBy)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Dependencies == other.Dependencies ||
                    Dependencies != null &&
                    other.Dependencies != null &&
                    Dependencies.SequenceEqual(other.Dependencies)
                ) && 
                (
                    Dependents == other.Dependents ||
                    Dependents != null &&
                    other.Dependents != null &&
                    Dependents.SequenceEqual(other.Dependents)
                ) && 
                (
                    DueAt == other.DueAt ||
                    DueAt != null &&
                    DueAt.Equals(other.DueAt)
                ) && 
                (
                    DueOn == other.DueOn ||
                    DueOn != null &&
                    DueOn.Equals(other.DueOn)
                ) && 
                (
                    External == other.External ||
                    External != null &&
                    External.Equals(other.External)
                ) && 
                (
                    Hearted == other.Hearted ||
                    
                    Hearted.Equals(other.Hearted)
                ) && 
                (
                    Hearts == other.Hearts ||
                    Hearts != null &&
                    other.Hearts != null &&
                    Hearts.SequenceEqual(other.Hearts)
                ) && 
                (
                    HtmlNotes == other.HtmlNotes ||
                    HtmlNotes != null &&
                    HtmlNotes.Equals(other.HtmlNotes)
                ) && 
                (
                    IsRenderedAsSeparator == other.IsRenderedAsSeparator ||
                    
                    IsRenderedAsSeparator.Equals(other.IsRenderedAsSeparator)
                ) && 
                (
                    Liked == other.Liked ||
                    
                    Liked.Equals(other.Liked)
                ) && 
                (
                    Likes == other.Likes ||
                    Likes != null &&
                    other.Likes != null &&
                    Likes.SequenceEqual(other.Likes)
                ) && 
                (
                    Memberships == other.Memberships ||
                    Memberships != null &&
                    other.Memberships != null &&
                    Memberships.SequenceEqual(other.Memberships)
                ) && 
                (
                    ModifiedAt == other.ModifiedAt ||
                    ModifiedAt != null &&
                    ModifiedAt.Equals(other.ModifiedAt)
                ) && 
                (
                    Notes == other.Notes ||
                    Notes != null &&
                    Notes.Equals(other.Notes)
                ) && 
                (
                    NumHearts == other.NumHearts ||
                    
                    NumHearts.Equals(other.NumHearts)
                ) && 
                (
                    NumLikes == other.NumLikes ||
                    
                    NumLikes.Equals(other.NumLikes)
                ) && 
                (
                    NumSubtasks == other.NumSubtasks ||
                    
                    NumSubtasks.Equals(other.NumSubtasks)
                ) && 
                (
                    StartAt == other.StartAt ||
                    StartAt != null &&
                    StartAt.Equals(other.StartAt)
                ) && 
                (
                    StartOn == other.StartOn ||
                    StartOn != null &&
                    StartOn.Equals(other.StartOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    if (ActualTimeMinutes != null)
                    hashCode = hashCode * 59 + ActualTimeMinutes.GetHashCode();
                    
                    hashCode = hashCode * 59 + ApprovalStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + AssigneeStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + Completed.GetHashCode();
                    if (CompletedAt != null)
                    hashCode = hashCode * 59 + CompletedAt.GetHashCode();
                    if (CompletedBy != null)
                    hashCode = hashCode * 59 + CompletedBy.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Dependencies != null)
                    hashCode = hashCode * 59 + Dependencies.GetHashCode();
                    if (Dependents != null)
                    hashCode = hashCode * 59 + Dependents.GetHashCode();
                    if (DueAt != null)
                    hashCode = hashCode * 59 + DueAt.GetHashCode();
                    if (DueOn != null)
                    hashCode = hashCode * 59 + DueOn.GetHashCode();
                    if (External != null)
                    hashCode = hashCode * 59 + External.GetHashCode();
                    
                    hashCode = hashCode * 59 + Hearted.GetHashCode();
                    if (Hearts != null)
                    hashCode = hashCode * 59 + Hearts.GetHashCode();
                    if (HtmlNotes != null)
                    hashCode = hashCode * 59 + HtmlNotes.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsRenderedAsSeparator.GetHashCode();
                    
                    hashCode = hashCode * 59 + Liked.GetHashCode();
                    if (Likes != null)
                    hashCode = hashCode * 59 + Likes.GetHashCode();
                    if (Memberships != null)
                    hashCode = hashCode * 59 + Memberships.GetHashCode();
                    if (ModifiedAt != null)
                    hashCode = hashCode * 59 + ModifiedAt.GetHashCode();
                    if (Notes != null)
                    hashCode = hashCode * 59 + Notes.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumHearts.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumLikes.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumSubtasks.GetHashCode();
                    if (StartAt != null)
                    hashCode = hashCode * 59 + StartAt.GetHashCode();
                    if (StartOn != null)
                    hashCode = hashCode * 59 + StartOn.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskBase left, TaskBase right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskBase left, TaskBase right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
