/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaskDuplicateRequest : IEquatable<TaskDuplicateRequest>
    {

        /// <summary>
        /// The fields that will be duplicated to the new task.
        /// </summary>
        /// <value>The fields that will be duplicated to the new task.</value>
        [TypeConverter(typeof(CustomEnumConverter<IncludeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum IncludeEnum
        {
            
            /// <summary>
            /// Enum NotesEnum for notes
            /// </summary>
            [EnumMember(Value = "notes")]
            NotesEnum = 1,
            
            /// <summary>
            /// Enum AssigneeEnum for assignee
            /// </summary>
            [EnumMember(Value = "assignee")]
            AssigneeEnum = 2,
            
            /// <summary>
            /// Enum SubtasksEnum for subtasks
            /// </summary>
            [EnumMember(Value = "subtasks")]
            SubtasksEnum = 3,
            
            /// <summary>
            /// Enum AttachmentsEnum for attachments
            /// </summary>
            [EnumMember(Value = "attachments")]
            AttachmentsEnum = 4,
            
            /// <summary>
            /// Enum TagsEnum for tags
            /// </summary>
            [EnumMember(Value = "tags")]
            TagsEnum = 5,
            
            /// <summary>
            /// Enum FollowersEnum for followers
            /// </summary>
            [EnumMember(Value = "followers")]
            FollowersEnum = 6,
            
            /// <summary>
            /// Enum ProjectsEnum for projects
            /// </summary>
            [EnumMember(Value = "projects")]
            ProjectsEnum = 7,
            
            /// <summary>
            /// Enum DatesEnum for dates
            /// </summary>
            [EnumMember(Value = "dates")]
            DatesEnum = 8,
            
            /// <summary>
            /// Enum DependenciesEnum for dependencies
            /// </summary>
            [EnumMember(Value = "dependencies")]
            DependenciesEnum = 9,
            
            /// <summary>
            /// Enum ParentEnum for parent
            /// </summary>
            [EnumMember(Value = "parent")]
            ParentEnum = 10
        }

        /// <summary>
        /// The fields that will be duplicated to the new task.
        /// </summary>
        /// <value>The fields that will be duplicated to the new task.</value>
        /// <example>[&quot;notes&quot;,&quot;assignee&quot;]</example>
        [DataMember(Name="include", EmitDefaultValue=true)]
        public IncludeEnum Include { get; set; }

        /// <summary>
        /// The name of the new task.
        /// </summary>
        /// <value>The name of the new task.</value>
        /// <example>New Task Name</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskDuplicateRequest {\n");
            sb.Append("  Include: ").Append(Include).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((TaskDuplicateRequest)obj);
        }

        /// <summary>
        /// Returns true if TaskDuplicateRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskDuplicateRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskDuplicateRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Include == other.Include ||
                    
                    Include.Equals(other.Include)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + Include.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(TaskDuplicateRequest left, TaskDuplicateRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(TaskDuplicateRequest left, TaskDuplicateRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
