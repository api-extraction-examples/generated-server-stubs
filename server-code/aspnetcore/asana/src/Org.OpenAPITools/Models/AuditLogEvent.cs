/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// An object representing a single event within an Asana domain.  Every audit log event is comprised of an &#x60;event_type&#x60;, &#x60;actor&#x60;, &#x60;resource&#x60;, and &#x60;context&#x60;. Some events will include additional metadata about the event under &#x60;details&#x60;. See our [currently supported list of events](/docs/supported-auditlogevents) for more details.
    /// </summary>
    [DataContract]
    public partial class AuditLogEvent : IEquatable<AuditLogEvent>
    {
        /// <summary>
        /// Gets or Sets Actor
        /// </summary>
        [DataMember(Name="actor", EmitDefaultValue=false)]
        public AuditLogEventActor Actor { get; set; }

        /// <summary>
        /// Gets or Sets Context
        /// </summary>
        [DataMember(Name="context", EmitDefaultValue=false)]
        public AuditLogEventContext Context { get; set; }

        /// <summary>
        /// The time the event was created.
        /// </summary>
        /// <value>The time the event was created.</value>
        /// <example>2021-01-01T00:00Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// Event specific details. The schema will vary depending on the &#x60;event_type&#x60;.
        /// </summary>
        /// <value>Event specific details. The schema will vary depending on the &#x60;event_type&#x60;.</value>
        [DataMember(Name="details", EmitDefaultValue=false)]
        public Object Details { get; set; }

        /// <summary>
        /// The category that this &#x60;event_type&#x60; belongs to.
        /// </summary>
        /// <value>The category that this &#x60;event_type&#x60; belongs to.</value>
        /// <example>deletion</example>
        [DataMember(Name="event_category", EmitDefaultValue=false)]
        public string EventCategory { get; set; }

        /// <summary>
        /// The type of the event.
        /// </summary>
        /// <value>The type of the event.</value>
        /// <example>task_deleted</example>
        [DataMember(Name="event_type", EmitDefaultValue=false)]
        public string EventType { get; set; }

        /// <summary>
        /// Globally unique identifier of the &#x60;AuditLogEvent&#x60;, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the &#x60;AuditLogEvent&#x60;, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// Gets or Sets Resource
        /// </summary>
        [DataMember(Name="resource", EmitDefaultValue=false)]
        public AuditLogEventResource Resource { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogEvent {\n");
            sb.Append("  Actor: ").Append(Actor).Append("\n");
            sb.Append("  Context: ").Append(Context).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  Details: ").Append(Details).Append("\n");
            sb.Append("  EventCategory: ").Append(EventCategory).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Resource: ").Append(Resource).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuditLogEvent)obj);
        }

        /// <summary>
        /// Returns true if AuditLogEvent instances are equal
        /// </summary>
        /// <param name="other">Instance of AuditLogEvent to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogEvent other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Actor == other.Actor ||
                    Actor != null &&
                    Actor.Equals(other.Actor)
                ) && 
                (
                    Context == other.Context ||
                    Context != null &&
                    Context.Equals(other.Context)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    Details == other.Details ||
                    Details != null &&
                    Details.Equals(other.Details)
                ) && 
                (
                    EventCategory == other.EventCategory ||
                    EventCategory != null &&
                    EventCategory.Equals(other.EventCategory)
                ) && 
                (
                    EventType == other.EventType ||
                    EventType != null &&
                    EventType.Equals(other.EventType)
                ) && 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    Resource == other.Resource ||
                    Resource != null &&
                    Resource.Equals(other.Resource)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Actor != null)
                    hashCode = hashCode * 59 + Actor.GetHashCode();
                    if (Context != null)
                    hashCode = hashCode * 59 + Context.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (Details != null)
                    hashCode = hashCode * 59 + Details.GetHashCode();
                    if (EventCategory != null)
                    hashCode = hashCode * 59 + EventCategory.GetHashCode();
                    if (EventType != null)
                    hashCode = hashCode * 59 + EventType.GetHashCode();
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (Resource != null)
                    hashCode = hashCode * 59 + Resource.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuditLogEvent left, AuditLogEvent right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuditLogEvent left, AuditLogEvent right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
