/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class WorkspaceMembershipResponse : IEquatable<WorkspaceMembershipResponse>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public UserCompact User { get; set; }

        /// <summary>
        /// Gets or Sets Workspace
        /// </summary>
        [DataMember(Name="workspace", EmitDefaultValue=false)]
        public WorkspaceCompact Workspace { get; set; }

        /// <summary>
        /// Reflects if this user still a member of the workspace.
        /// </summary>
        /// <value>Reflects if this user still a member of the workspace.</value>
        [DataMember(Name="is_active", EmitDefaultValue=true)]
        public bool IsActive { get; set; }

        /// <summary>
        /// Reflects if this user is an admin of the workspace.
        /// </summary>
        /// <value>Reflects if this user is an admin of the workspace.</value>
        [DataMember(Name="is_admin", EmitDefaultValue=true)]
        public bool IsAdmin { get; set; }

        /// <summary>
        /// Reflects if this user is a guest of the workspace.
        /// </summary>
        /// <value>Reflects if this user is a guest of the workspace.</value>
        [DataMember(Name="is_guest", EmitDefaultValue=true)]
        public bool IsGuest { get; set; }

        /// <summary>
        /// Gets or Sets UserTaskList
        /// </summary>
        [DataMember(Name="user_task_list", EmitDefaultValue=false)]
        public UserTaskListCompact UserTaskList { get; set; }

        /// <summary>
        /// Gets or Sets VacationDates
        /// </summary>
        [DataMember(Name="vacation_dates", EmitDefaultValue=true)]
        public WorkspaceMembershipResponseAllOfVacationDates VacationDates { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class WorkspaceMembershipResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("  Workspace: ").Append(Workspace).Append("\n");
            sb.Append("  IsActive: ").Append(IsActive).Append("\n");
            sb.Append("  IsAdmin: ").Append(IsAdmin).Append("\n");
            sb.Append("  IsGuest: ").Append(IsGuest).Append("\n");
            sb.Append("  UserTaskList: ").Append(UserTaskList).Append("\n");
            sb.Append("  VacationDates: ").Append(VacationDates).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((WorkspaceMembershipResponse)obj);
        }

        /// <summary>
        /// Returns true if WorkspaceMembershipResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of WorkspaceMembershipResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(WorkspaceMembershipResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                ) && 
                (
                    Workspace == other.Workspace ||
                    Workspace != null &&
                    Workspace.Equals(other.Workspace)
                ) && 
                (
                    IsActive == other.IsActive ||
                    
                    IsActive.Equals(other.IsActive)
                ) && 
                (
                    IsAdmin == other.IsAdmin ||
                    
                    IsAdmin.Equals(other.IsAdmin)
                ) && 
                (
                    IsGuest == other.IsGuest ||
                    
                    IsGuest.Equals(other.IsGuest)
                ) && 
                (
                    UserTaskList == other.UserTaskList ||
                    UserTaskList != null &&
                    UserTaskList.Equals(other.UserTaskList)
                ) && 
                (
                    VacationDates == other.VacationDates ||
                    VacationDates != null &&
                    VacationDates.Equals(other.VacationDates)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                    if (Workspace != null)
                    hashCode = hashCode * 59 + Workspace.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsActive.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsAdmin.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsGuest.GetHashCode();
                    if (UserTaskList != null)
                    hashCode = hashCode * 59 + UserTaskList.GetHashCode();
                    if (VacationDates != null)
                    hashCode = hashCode * 59 + VacationDates.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(WorkspaceMembershipResponse left, WorkspaceMembershipResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(WorkspaceMembershipResponse left, WorkspaceMembershipResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
