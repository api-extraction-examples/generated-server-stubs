/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StoryResponse : IEquatable<StoryResponse>
    {
        /// <summary>
        /// Globally unique identifier of the resource, as a string.
        /// </summary>
        /// <value>Globally unique identifier of the resource, as a string.</value>
        /// <example>12345</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The base type of this resource.
        /// </summary>
        /// <value>The base type of this resource.</value>
        /// <example>task</example>
        [DataMember(Name="resource_type", EmitDefaultValue=false)]
        public string ResourceType { get; set; }

        /// <summary>
        /// The time at which this resource was created.
        /// </summary>
        /// <value>The time at which this resource was created.</value>
        /// <example>2012-02-22T02:06:58.147Z</example>
        [DataMember(Name="created_at", EmitDefaultValue=false)]
        public DateTime CreatedAt { get; set; }

        /// <summary>
        /// [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.
        /// </summary>
        /// <value>[Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.</value>
        /// <example>&lt;body&gt;This is a comment.&lt;/body&gt;</example>
        [DataMember(Name="html_text", EmitDefaultValue=false)]
        public string HtmlText { get; set; }

        /// <summary>
        /// *Conditional*. Whether the story should be pinned on the resource.
        /// </summary>
        /// <value>*Conditional*. Whether the story should be pinned on the resource.</value>
        /// <example>false</example>
        [DataMember(Name="is_pinned", EmitDefaultValue=true)]
        public bool IsPinned { get; set; }

        /// <summary>
        /// The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.
        /// </summary>
        /// <value>The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.</value>
        /// <example>comment_added</example>
        [DataMember(Name="resource_subtype", EmitDefaultValue=false)]
        public string ResourceSubtype { get; set; }


        /// <summary>
        /// The name of the sticker in this story. `null` if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. `null` if there is no sticker.</value>
        [TypeConverter(typeof(CustomEnumConverter<StickerNameEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StickerNameEnum
        {
            
            /// <summary>
            /// Enum GreenCheckmarkEnum for green_checkmark
            /// </summary>
            [EnumMember(Value = "green_checkmark")]
            GreenCheckmarkEnum = 1,
            
            /// <summary>
            /// Enum PeopleDancingEnum for people_dancing
            /// </summary>
            [EnumMember(Value = "people_dancing")]
            PeopleDancingEnum = 2,
            
            /// <summary>
            /// Enum DancingUnicornEnum for dancing_unicorn
            /// </summary>
            [EnumMember(Value = "dancing_unicorn")]
            DancingUnicornEnum = 3,
            
            /// <summary>
            /// Enum HeartEnum for heart
            /// </summary>
            [EnumMember(Value = "heart")]
            HeartEnum = 4,
            
            /// <summary>
            /// Enum PartyPopperEnum for party_popper
            /// </summary>
            [EnumMember(Value = "party_popper")]
            PartyPopperEnum = 5,
            
            /// <summary>
            /// Enum PeopleWavingFlagsEnum for people_waving_flags
            /// </summary>
            [EnumMember(Value = "people_waving_flags")]
            PeopleWavingFlagsEnum = 6,
            
            /// <summary>
            /// Enum SplashingNarwhalEnum for splashing_narwhal
            /// </summary>
            [EnumMember(Value = "splashing_narwhal")]
            SplashingNarwhalEnum = 7,
            
            /// <summary>
            /// Enum TrophyEnum for trophy
            /// </summary>
            [EnumMember(Value = "trophy")]
            TrophyEnum = 8,
            
            /// <summary>
            /// Enum YetiRidingUnicornEnum for yeti_riding_unicorn
            /// </summary>
            [EnumMember(Value = "yeti_riding_unicorn")]
            YetiRidingUnicornEnum = 9,
            
            /// <summary>
            /// Enum CelebratingPeopleEnum for celebrating_people
            /// </summary>
            [EnumMember(Value = "celebrating_people")]
            CelebratingPeopleEnum = 10,
            
            /// <summary>
            /// Enum DeterminedClimbersEnum for determined_climbers
            /// </summary>
            [EnumMember(Value = "determined_climbers")]
            DeterminedClimbersEnum = 11,
            
            /// <summary>
            /// Enum PhoenixSpreadingLoveEnum for phoenix_spreading_love
            /// </summary>
            [EnumMember(Value = "phoenix_spreading_love")]
            PhoenixSpreadingLoveEnum = 12
        }

        /// <summary>
        /// The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.
        /// </summary>
        /// <value>The name of the sticker in this story. &#x60;null&#x60; if there is no sticker.</value>
        /// <example>dancing_unicorn</example>
        [DataMember(Name="sticker_name", EmitDefaultValue=true)]
        public StickerNameEnum StickerName { get; set; }

        /// <summary>
        /// The plain text of the comment to add. Cannot be used with html_text.
        /// </summary>
        /// <value>The plain text of the comment to add. Cannot be used with html_text.</value>
        /// <example>This is a comment.</example>
        [DataMember(Name="text", EmitDefaultValue=false)]
        public string Text { get; set; }

        /// <summary>
        /// Gets or Sets Assignee
        /// </summary>
        [DataMember(Name="assignee", EmitDefaultValue=false)]
        public UserCompact Assignee { get; set; }

        /// <summary>
        /// Gets or Sets CreatedBy
        /// </summary>
        [DataMember(Name="created_by", EmitDefaultValue=false)]
        public UserCompact CreatedBy { get; set; }

        /// <summary>
        /// Gets or Sets CustomField
        /// </summary>
        [DataMember(Name="custom_field", EmitDefaultValue=false)]
        public CustomFieldCompact CustomField { get; set; }

        /// <summary>
        /// Gets or Sets Dependency
        /// </summary>
        [DataMember(Name="dependency", EmitDefaultValue=false)]
        public TaskCompact Dependency { get; set; }

        /// <summary>
        /// Gets or Sets DuplicateOf
        /// </summary>
        [DataMember(Name="duplicate_of", EmitDefaultValue=false)]
        public TaskCompact DuplicateOf { get; set; }

        /// <summary>
        /// Gets or Sets DuplicatedFrom
        /// </summary>
        [DataMember(Name="duplicated_from", EmitDefaultValue=false)]
        public TaskCompact DuplicatedFrom { get; set; }

        /// <summary>
        /// Gets or Sets Follower
        /// </summary>
        [DataMember(Name="follower", EmitDefaultValue=false)]
        public UserCompact Follower { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.
        /// </summary>
        /// <value>*Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.</value>
        /// <example>false</example>
        [DataMember(Name="hearted", EmitDefaultValue=true)]
        public bool Hearted { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.</value>
        [DataMember(Name="hearts", EmitDefaultValue=false)]
        public List<Like> Hearts { get; set; }

        /// <summary>
        /// *Conditional*. Whether the text of the story can be edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story can be edited after creation.</value>
        /// <example>false</example>
        [DataMember(Name="is_editable", EmitDefaultValue=true)]
        public bool IsEditable { get; set; }

        /// <summary>
        /// *Conditional*. Whether the text of the story has been edited after creation.
        /// </summary>
        /// <value>*Conditional*. Whether the text of the story has been edited after creation.</value>
        /// <example>false</example>
        [DataMember(Name="is_edited", EmitDefaultValue=true)]
        public bool IsEdited { get; set; }

        /// <summary>
        /// *Conditional*. True if the story is liked by the authorized user, false if not.
        /// </summary>
        /// <value>*Conditional*. True if the story is liked by the authorized user, false if not.</value>
        /// <example>false</example>
        [DataMember(Name="liked", EmitDefaultValue=true)]
        public bool Liked { get; set; }

        /// <summary>
        /// *Conditional*. Array of likes for users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. Array of likes for users who have liked this story.</value>
        [DataMember(Name="likes", EmitDefaultValue=false)]
        public List<Like> Likes { get; set; }

        /// <summary>
        /// *Conditional*. The new value of approval status.
        /// </summary>
        /// <value>*Conditional*. The new value of approval status.</value>
        /// <example>approved</example>
        [DataMember(Name="new_approval_status", EmitDefaultValue=false)]
        public string NewApprovalStatus { get; set; }

        /// <summary>
        /// Gets or Sets NewDateValue
        /// </summary>
        [DataMember(Name="new_date_value", EmitDefaultValue=false)]
        public StoryResponseAllOfNewDateValue NewDateValue { get; set; }

        /// <summary>
        /// Gets or Sets NewDates
        /// </summary>
        [DataMember(Name="new_dates", EmitDefaultValue=false)]
        public StoryResponseDates NewDates { get; set; }

        /// <summary>
        /// Gets or Sets NewEnumValue
        /// </summary>
        [DataMember(Name="new_enum_value", EmitDefaultValue=false)]
        public EnumOption NewEnumValue { get; set; }

        /// <summary>
        /// *Conditional*. The new value of a multi-enum custom field story.
        /// </summary>
        /// <value>*Conditional*. The new value of a multi-enum custom field story.</value>
        [DataMember(Name="new_multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> NewMultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This is the New Name</example>
        [DataMember(Name="new_name", EmitDefaultValue=false)]
        public string NewName { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>2</example>
        [DataMember(Name="new_number_value", EmitDefaultValue=true)]
        public int NewNumberValue { get; set; }

        /// <summary>
        /// *Conditional*. The new value of a people custom field story.
        /// </summary>
        /// <value>*Conditional*. The new value of a people custom field story.</value>
        [DataMember(Name="new_people_value", EmitDefaultValue=false)]
        public List<UserCompact> NewPeopleValue { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>milestone</example>
        [DataMember(Name="new_resource_subtype", EmitDefaultValue=false)]
        public string NewResourceSubtype { get; set; }

        /// <summary>
        /// Gets or Sets NewSection
        /// </summary>
        [DataMember(Name="new_section", EmitDefaultValue=false)]
        public SectionCompact NewSection { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This is the New Text</example>
        [DataMember(Name="new_text_value", EmitDefaultValue=false)]
        public string NewTextValue { get; set; }

        /// <summary>
        /// *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.
        /// </summary>
        /// <value>*Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.</value>
        /// <example>5</example>
        [DataMember(Name="num_hearts", EmitDefaultValue=true)]
        public int NumHearts { get; set; }

        /// <summary>
        /// *Conditional*. The number of users who have liked this story.
        /// </summary>
        /// <value>*Conditional*. The number of users who have liked this story.</value>
        /// <example>5</example>
        [DataMember(Name="num_likes", EmitDefaultValue=true)]
        public int NumLikes { get; set; }

        /// <summary>
        /// *Conditional*. The old value of approval status.
        /// </summary>
        /// <value>*Conditional*. The old value of approval status.</value>
        /// <example>pending</example>
        [DataMember(Name="old_approval_status", EmitDefaultValue=false)]
        public string OldApprovalStatus { get; set; }

        /// <summary>
        /// Gets or Sets OldDateValue
        /// </summary>
        [DataMember(Name="old_date_value", EmitDefaultValue=false)]
        public StoryResponseAllOfOldDateValue OldDateValue { get; set; }

        /// <summary>
        /// Gets or Sets OldDates
        /// </summary>
        [DataMember(Name="old_dates", EmitDefaultValue=false)]
        public StoryResponseDates OldDates { get; set; }

        /// <summary>
        /// Gets or Sets OldEnumValue
        /// </summary>
        [DataMember(Name="old_enum_value", EmitDefaultValue=false)]
        public EnumOption OldEnumValue { get; set; }

        /// <summary>
        /// *Conditional*. The old value of a multi-enum custom field story.
        /// </summary>
        /// <value>*Conditional*. The old value of a multi-enum custom field story.</value>
        [DataMember(Name="old_multi_enum_values", EmitDefaultValue=false)]
        public List<EnumOption> OldMultiEnumValues { get; set; }

        /// <summary>
        /// *Conditional*&#39;
        /// </summary>
        /// <value>*Conditional*&#39;</value>
        /// <example>This was the Old Name</example>
        [DataMember(Name="old_name", EmitDefaultValue=false)]
        public string OldName { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>1</example>
        [DataMember(Name="old_number_value", EmitDefaultValue=true)]
        public int OldNumberValue { get; set; }

        /// <summary>
        /// *Conditional*. The old value of a people custom field story.
        /// </summary>
        /// <value>*Conditional*. The old value of a people custom field story.</value>
        [DataMember(Name="old_people_value", EmitDefaultValue=false)]
        public List<UserCompact> OldPeopleValue { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>default_task</example>
        [DataMember(Name="old_resource_subtype", EmitDefaultValue=false)]
        public string OldResourceSubtype { get; set; }

        /// <summary>
        /// Gets or Sets OldSection
        /// </summary>
        [DataMember(Name="old_section", EmitDefaultValue=false)]
        public SectionCompact OldSection { get; set; }

        /// <summary>
        /// *Conditional*
        /// </summary>
        /// <value>*Conditional*</value>
        /// <example>This was the Old Text</example>
        [DataMember(Name="old_text_value", EmitDefaultValue=false)]
        public string OldTextValue { get; set; }

        /// <summary>
        /// *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*
        /// </summary>
        /// <value>*Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*</value>
        [DataMember(Name="previews", EmitDefaultValue=false)]
        public List<Preview> Previews { get; set; }

        /// <summary>
        /// Gets or Sets Project
        /// </summary>
        [DataMember(Name="project", EmitDefaultValue=false)]
        public ProjectCompact Project { get; set; }


        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        [TypeConverter(typeof(CustomEnumConverter<SourceEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum SourceEnum
        {
            
            /// <summary>
            /// Enum WebEnum for web
            /// </summary>
            [EnumMember(Value = "web")]
            WebEnum = 1,
            
            /// <summary>
            /// Enum EmailEnum for email
            /// </summary>
            [EnumMember(Value = "email")]
            EmailEnum = 2,
            
            /// <summary>
            /// Enum MobileEnum for mobile
            /// </summary>
            [EnumMember(Value = "mobile")]
            MobileEnum = 3,
            
            /// <summary>
            /// Enum ApiEnum for api
            /// </summary>
            [EnumMember(Value = "api")]
            ApiEnum = 4,
            
            /// <summary>
            /// Enum UnknownEnum for unknown
            /// </summary>
            [EnumMember(Value = "unknown")]
            UnknownEnum = 5
        }

        /// <summary>
        /// The component of the Asana product the user used to trigger the story.
        /// </summary>
        /// <value>The component of the Asana product the user used to trigger the story.</value>
        /// <example>web</example>
        [DataMember(Name="source", EmitDefaultValue=true)]
        public SourceEnum Source { get; set; }

        /// <summary>
        /// Gets or Sets Story
        /// </summary>
        [DataMember(Name="story", EmitDefaultValue=false)]
        public StoryCompact Story { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag", EmitDefaultValue=false)]
        public TagCompact Tag { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public StoryResponseAllOfTarget Target { get; set; }

        /// <summary>
        /// Gets or Sets Task
        /// </summary>
        [DataMember(Name="task", EmitDefaultValue=false)]
        public TaskCompact Task { get; set; }


        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [TypeConverter(typeof(CustomEnumConverter<TypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum TypeEnum
        {
            
            /// <summary>
            /// Enum CommentEnum for comment
            /// </summary>
            [EnumMember(Value = "comment")]
            CommentEnum = 1,
            
            /// <summary>
            /// Enum SystemEnum for system
            /// </summary>
            [EnumMember(Value = "system")]
            SystemEnum = 2
        }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        /// <example>comment</example>
        [DataMember(Name="type", EmitDefaultValue=true)]
        public TypeEnum Type { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StoryResponse {\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  ResourceType: ").Append(ResourceType).Append("\n");
            sb.Append("  CreatedAt: ").Append(CreatedAt).Append("\n");
            sb.Append("  HtmlText: ").Append(HtmlText).Append("\n");
            sb.Append("  IsPinned: ").Append(IsPinned).Append("\n");
            sb.Append("  ResourceSubtype: ").Append(ResourceSubtype).Append("\n");
            sb.Append("  StickerName: ").Append(StickerName).Append("\n");
            sb.Append("  Text: ").Append(Text).Append("\n");
            sb.Append("  Assignee: ").Append(Assignee).Append("\n");
            sb.Append("  CreatedBy: ").Append(CreatedBy).Append("\n");
            sb.Append("  CustomField: ").Append(CustomField).Append("\n");
            sb.Append("  Dependency: ").Append(Dependency).Append("\n");
            sb.Append("  DuplicateOf: ").Append(DuplicateOf).Append("\n");
            sb.Append("  DuplicatedFrom: ").Append(DuplicatedFrom).Append("\n");
            sb.Append("  Follower: ").Append(Follower).Append("\n");
            sb.Append("  Hearted: ").Append(Hearted).Append("\n");
            sb.Append("  Hearts: ").Append(Hearts).Append("\n");
            sb.Append("  IsEditable: ").Append(IsEditable).Append("\n");
            sb.Append("  IsEdited: ").Append(IsEdited).Append("\n");
            sb.Append("  Liked: ").Append(Liked).Append("\n");
            sb.Append("  Likes: ").Append(Likes).Append("\n");
            sb.Append("  NewApprovalStatus: ").Append(NewApprovalStatus).Append("\n");
            sb.Append("  NewDateValue: ").Append(NewDateValue).Append("\n");
            sb.Append("  NewDates: ").Append(NewDates).Append("\n");
            sb.Append("  NewEnumValue: ").Append(NewEnumValue).Append("\n");
            sb.Append("  NewMultiEnumValues: ").Append(NewMultiEnumValues).Append("\n");
            sb.Append("  NewName: ").Append(NewName).Append("\n");
            sb.Append("  NewNumberValue: ").Append(NewNumberValue).Append("\n");
            sb.Append("  NewPeopleValue: ").Append(NewPeopleValue).Append("\n");
            sb.Append("  NewResourceSubtype: ").Append(NewResourceSubtype).Append("\n");
            sb.Append("  NewSection: ").Append(NewSection).Append("\n");
            sb.Append("  NewTextValue: ").Append(NewTextValue).Append("\n");
            sb.Append("  NumHearts: ").Append(NumHearts).Append("\n");
            sb.Append("  NumLikes: ").Append(NumLikes).Append("\n");
            sb.Append("  OldApprovalStatus: ").Append(OldApprovalStatus).Append("\n");
            sb.Append("  OldDateValue: ").Append(OldDateValue).Append("\n");
            sb.Append("  OldDates: ").Append(OldDates).Append("\n");
            sb.Append("  OldEnumValue: ").Append(OldEnumValue).Append("\n");
            sb.Append("  OldMultiEnumValues: ").Append(OldMultiEnumValues).Append("\n");
            sb.Append("  OldName: ").Append(OldName).Append("\n");
            sb.Append("  OldNumberValue: ").Append(OldNumberValue).Append("\n");
            sb.Append("  OldPeopleValue: ").Append(OldPeopleValue).Append("\n");
            sb.Append("  OldResourceSubtype: ").Append(OldResourceSubtype).Append("\n");
            sb.Append("  OldSection: ").Append(OldSection).Append("\n");
            sb.Append("  OldTextValue: ").Append(OldTextValue).Append("\n");
            sb.Append("  Previews: ").Append(Previews).Append("\n");
            sb.Append("  Project: ").Append(Project).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Story: ").Append(Story).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("  Task: ").Append(Task).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StoryResponse)obj);
        }

        /// <summary>
        /// Returns true if StoryResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of StoryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StoryResponse other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    ResourceType == other.ResourceType ||
                    ResourceType != null &&
                    ResourceType.Equals(other.ResourceType)
                ) && 
                (
                    CreatedAt == other.CreatedAt ||
                    CreatedAt != null &&
                    CreatedAt.Equals(other.CreatedAt)
                ) && 
                (
                    HtmlText == other.HtmlText ||
                    HtmlText != null &&
                    HtmlText.Equals(other.HtmlText)
                ) && 
                (
                    IsPinned == other.IsPinned ||
                    
                    IsPinned.Equals(other.IsPinned)
                ) && 
                (
                    ResourceSubtype == other.ResourceSubtype ||
                    ResourceSubtype != null &&
                    ResourceSubtype.Equals(other.ResourceSubtype)
                ) && 
                (
                    StickerName == other.StickerName ||
                    
                    StickerName.Equals(other.StickerName)
                ) && 
                (
                    Text == other.Text ||
                    Text != null &&
                    Text.Equals(other.Text)
                ) && 
                (
                    Assignee == other.Assignee ||
                    Assignee != null &&
                    Assignee.Equals(other.Assignee)
                ) && 
                (
                    CreatedBy == other.CreatedBy ||
                    CreatedBy != null &&
                    CreatedBy.Equals(other.CreatedBy)
                ) && 
                (
                    CustomField == other.CustomField ||
                    CustomField != null &&
                    CustomField.Equals(other.CustomField)
                ) && 
                (
                    Dependency == other.Dependency ||
                    Dependency != null &&
                    Dependency.Equals(other.Dependency)
                ) && 
                (
                    DuplicateOf == other.DuplicateOf ||
                    DuplicateOf != null &&
                    DuplicateOf.Equals(other.DuplicateOf)
                ) && 
                (
                    DuplicatedFrom == other.DuplicatedFrom ||
                    DuplicatedFrom != null &&
                    DuplicatedFrom.Equals(other.DuplicatedFrom)
                ) && 
                (
                    Follower == other.Follower ||
                    Follower != null &&
                    Follower.Equals(other.Follower)
                ) && 
                (
                    Hearted == other.Hearted ||
                    
                    Hearted.Equals(other.Hearted)
                ) && 
                (
                    Hearts == other.Hearts ||
                    Hearts != null &&
                    other.Hearts != null &&
                    Hearts.SequenceEqual(other.Hearts)
                ) && 
                (
                    IsEditable == other.IsEditable ||
                    
                    IsEditable.Equals(other.IsEditable)
                ) && 
                (
                    IsEdited == other.IsEdited ||
                    
                    IsEdited.Equals(other.IsEdited)
                ) && 
                (
                    Liked == other.Liked ||
                    
                    Liked.Equals(other.Liked)
                ) && 
                (
                    Likes == other.Likes ||
                    Likes != null &&
                    other.Likes != null &&
                    Likes.SequenceEqual(other.Likes)
                ) && 
                (
                    NewApprovalStatus == other.NewApprovalStatus ||
                    NewApprovalStatus != null &&
                    NewApprovalStatus.Equals(other.NewApprovalStatus)
                ) && 
                (
                    NewDateValue == other.NewDateValue ||
                    NewDateValue != null &&
                    NewDateValue.Equals(other.NewDateValue)
                ) && 
                (
                    NewDates == other.NewDates ||
                    NewDates != null &&
                    NewDates.Equals(other.NewDates)
                ) && 
                (
                    NewEnumValue == other.NewEnumValue ||
                    NewEnumValue != null &&
                    NewEnumValue.Equals(other.NewEnumValue)
                ) && 
                (
                    NewMultiEnumValues == other.NewMultiEnumValues ||
                    NewMultiEnumValues != null &&
                    other.NewMultiEnumValues != null &&
                    NewMultiEnumValues.SequenceEqual(other.NewMultiEnumValues)
                ) && 
                (
                    NewName == other.NewName ||
                    NewName != null &&
                    NewName.Equals(other.NewName)
                ) && 
                (
                    NewNumberValue == other.NewNumberValue ||
                    
                    NewNumberValue.Equals(other.NewNumberValue)
                ) && 
                (
                    NewPeopleValue == other.NewPeopleValue ||
                    NewPeopleValue != null &&
                    other.NewPeopleValue != null &&
                    NewPeopleValue.SequenceEqual(other.NewPeopleValue)
                ) && 
                (
                    NewResourceSubtype == other.NewResourceSubtype ||
                    NewResourceSubtype != null &&
                    NewResourceSubtype.Equals(other.NewResourceSubtype)
                ) && 
                (
                    NewSection == other.NewSection ||
                    NewSection != null &&
                    NewSection.Equals(other.NewSection)
                ) && 
                (
                    NewTextValue == other.NewTextValue ||
                    NewTextValue != null &&
                    NewTextValue.Equals(other.NewTextValue)
                ) && 
                (
                    NumHearts == other.NumHearts ||
                    
                    NumHearts.Equals(other.NumHearts)
                ) && 
                (
                    NumLikes == other.NumLikes ||
                    
                    NumLikes.Equals(other.NumLikes)
                ) && 
                (
                    OldApprovalStatus == other.OldApprovalStatus ||
                    OldApprovalStatus != null &&
                    OldApprovalStatus.Equals(other.OldApprovalStatus)
                ) && 
                (
                    OldDateValue == other.OldDateValue ||
                    OldDateValue != null &&
                    OldDateValue.Equals(other.OldDateValue)
                ) && 
                (
                    OldDates == other.OldDates ||
                    OldDates != null &&
                    OldDates.Equals(other.OldDates)
                ) && 
                (
                    OldEnumValue == other.OldEnumValue ||
                    OldEnumValue != null &&
                    OldEnumValue.Equals(other.OldEnumValue)
                ) && 
                (
                    OldMultiEnumValues == other.OldMultiEnumValues ||
                    OldMultiEnumValues != null &&
                    other.OldMultiEnumValues != null &&
                    OldMultiEnumValues.SequenceEqual(other.OldMultiEnumValues)
                ) && 
                (
                    OldName == other.OldName ||
                    OldName != null &&
                    OldName.Equals(other.OldName)
                ) && 
                (
                    OldNumberValue == other.OldNumberValue ||
                    
                    OldNumberValue.Equals(other.OldNumberValue)
                ) && 
                (
                    OldPeopleValue == other.OldPeopleValue ||
                    OldPeopleValue != null &&
                    other.OldPeopleValue != null &&
                    OldPeopleValue.SequenceEqual(other.OldPeopleValue)
                ) && 
                (
                    OldResourceSubtype == other.OldResourceSubtype ||
                    OldResourceSubtype != null &&
                    OldResourceSubtype.Equals(other.OldResourceSubtype)
                ) && 
                (
                    OldSection == other.OldSection ||
                    OldSection != null &&
                    OldSection.Equals(other.OldSection)
                ) && 
                (
                    OldTextValue == other.OldTextValue ||
                    OldTextValue != null &&
                    OldTextValue.Equals(other.OldTextValue)
                ) && 
                (
                    Previews == other.Previews ||
                    Previews != null &&
                    other.Previews != null &&
                    Previews.SequenceEqual(other.Previews)
                ) && 
                (
                    Project == other.Project ||
                    Project != null &&
                    Project.Equals(other.Project)
                ) && 
                (
                    Source == other.Source ||
                    
                    Source.Equals(other.Source)
                ) && 
                (
                    Story == other.Story ||
                    Story != null &&
                    Story.Equals(other.Story)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                ) && 
                (
                    Target == other.Target ||
                    Target != null &&
                    Target.Equals(other.Target)
                ) && 
                (
                    Task == other.Task ||
                    Task != null &&
                    Task.Equals(other.Task)
                ) && 
                (
                    Type == other.Type ||
                    
                    Type.Equals(other.Type)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (ResourceType != null)
                    hashCode = hashCode * 59 + ResourceType.GetHashCode();
                    if (CreatedAt != null)
                    hashCode = hashCode * 59 + CreatedAt.GetHashCode();
                    if (HtmlText != null)
                    hashCode = hashCode * 59 + HtmlText.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsPinned.GetHashCode();
                    if (ResourceSubtype != null)
                    hashCode = hashCode * 59 + ResourceSubtype.GetHashCode();
                    
                    hashCode = hashCode * 59 + StickerName.GetHashCode();
                    if (Text != null)
                    hashCode = hashCode * 59 + Text.GetHashCode();
                    if (Assignee != null)
                    hashCode = hashCode * 59 + Assignee.GetHashCode();
                    if (CreatedBy != null)
                    hashCode = hashCode * 59 + CreatedBy.GetHashCode();
                    if (CustomField != null)
                    hashCode = hashCode * 59 + CustomField.GetHashCode();
                    if (Dependency != null)
                    hashCode = hashCode * 59 + Dependency.GetHashCode();
                    if (DuplicateOf != null)
                    hashCode = hashCode * 59 + DuplicateOf.GetHashCode();
                    if (DuplicatedFrom != null)
                    hashCode = hashCode * 59 + DuplicatedFrom.GetHashCode();
                    if (Follower != null)
                    hashCode = hashCode * 59 + Follower.GetHashCode();
                    
                    hashCode = hashCode * 59 + Hearted.GetHashCode();
                    if (Hearts != null)
                    hashCode = hashCode * 59 + Hearts.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEditable.GetHashCode();
                    
                    hashCode = hashCode * 59 + IsEdited.GetHashCode();
                    
                    hashCode = hashCode * 59 + Liked.GetHashCode();
                    if (Likes != null)
                    hashCode = hashCode * 59 + Likes.GetHashCode();
                    if (NewApprovalStatus != null)
                    hashCode = hashCode * 59 + NewApprovalStatus.GetHashCode();
                    if (NewDateValue != null)
                    hashCode = hashCode * 59 + NewDateValue.GetHashCode();
                    if (NewDates != null)
                    hashCode = hashCode * 59 + NewDates.GetHashCode();
                    if (NewEnumValue != null)
                    hashCode = hashCode * 59 + NewEnumValue.GetHashCode();
                    if (NewMultiEnumValues != null)
                    hashCode = hashCode * 59 + NewMultiEnumValues.GetHashCode();
                    if (NewName != null)
                    hashCode = hashCode * 59 + NewName.GetHashCode();
                    
                    hashCode = hashCode * 59 + NewNumberValue.GetHashCode();
                    if (NewPeopleValue != null)
                    hashCode = hashCode * 59 + NewPeopleValue.GetHashCode();
                    if (NewResourceSubtype != null)
                    hashCode = hashCode * 59 + NewResourceSubtype.GetHashCode();
                    if (NewSection != null)
                    hashCode = hashCode * 59 + NewSection.GetHashCode();
                    if (NewTextValue != null)
                    hashCode = hashCode * 59 + NewTextValue.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumHearts.GetHashCode();
                    
                    hashCode = hashCode * 59 + NumLikes.GetHashCode();
                    if (OldApprovalStatus != null)
                    hashCode = hashCode * 59 + OldApprovalStatus.GetHashCode();
                    if (OldDateValue != null)
                    hashCode = hashCode * 59 + OldDateValue.GetHashCode();
                    if (OldDates != null)
                    hashCode = hashCode * 59 + OldDates.GetHashCode();
                    if (OldEnumValue != null)
                    hashCode = hashCode * 59 + OldEnumValue.GetHashCode();
                    if (OldMultiEnumValues != null)
                    hashCode = hashCode * 59 + OldMultiEnumValues.GetHashCode();
                    if (OldName != null)
                    hashCode = hashCode * 59 + OldName.GetHashCode();
                    
                    hashCode = hashCode * 59 + OldNumberValue.GetHashCode();
                    if (OldPeopleValue != null)
                    hashCode = hashCode * 59 + OldPeopleValue.GetHashCode();
                    if (OldResourceSubtype != null)
                    hashCode = hashCode * 59 + OldResourceSubtype.GetHashCode();
                    if (OldSection != null)
                    hashCode = hashCode * 59 + OldSection.GetHashCode();
                    if (OldTextValue != null)
                    hashCode = hashCode * 59 + OldTextValue.GetHashCode();
                    if (Previews != null)
                    hashCode = hashCode * 59 + Previews.GetHashCode();
                    if (Project != null)
                    hashCode = hashCode * 59 + Project.GetHashCode();
                    
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Story != null)
                    hashCode = hashCode * 59 + Story.GetHashCode();
                    if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                    if (Target != null)
                    hashCode = hashCode * 59 + Target.GetHashCode();
                    if (Task != null)
                    hashCode = hashCode * 59 + Task.GetHashCode();
                    
                    hashCode = hashCode * 59 + Type.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StoryResponse left, StoryResponse right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StoryResponse left, StoryResponse right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
