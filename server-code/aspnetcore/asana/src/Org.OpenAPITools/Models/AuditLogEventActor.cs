/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * The version of the OpenAPI document: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// The entity that triggered the event. Will typically be a user.
    /// </summary>
    [DataContract]
    public partial class AuditLogEventActor : IEquatable<AuditLogEventActor>
    {

        /// <summary>
        /// The type of actor. Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.
        /// </summary>
        /// <value>The type of actor. Can be one of `user`, `asana`, `asana_support`, `anonymous`, or `external_administrator`.</value>
        [TypeConverter(typeof(CustomEnumConverter<ActorTypeEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ActorTypeEnum
        {
            
            /// <summary>
            /// Enum UserEnum for user
            /// </summary>
            [EnumMember(Value = "user")]
            UserEnum = 1,
            
            /// <summary>
            /// Enum AsanaEnum for asana
            /// </summary>
            [EnumMember(Value = "asana")]
            AsanaEnum = 2,
            
            /// <summary>
            /// Enum AsanaSupportEnum for asana_support
            /// </summary>
            [EnumMember(Value = "asana_support")]
            AsanaSupportEnum = 3,
            
            /// <summary>
            /// Enum AnonymousEnum for anonymous
            /// </summary>
            [EnumMember(Value = "anonymous")]
            AnonymousEnum = 4,
            
            /// <summary>
            /// Enum ExternalAdministratorEnum for external_administrator
            /// </summary>
            [EnumMember(Value = "external_administrator")]
            ExternalAdministratorEnum = 5
        }

        /// <summary>
        /// The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.
        /// </summary>
        /// <value>The type of actor. Can be one of &#x60;user&#x60;, &#x60;asana&#x60;, &#x60;asana_support&#x60;, &#x60;anonymous&#x60;, or &#x60;external_administrator&#x60;.</value>
        /// <example>user</example>
        [DataMember(Name="actor_type", EmitDefaultValue=true)]
        public ActorTypeEnum ActorType { get; set; }

        /// <summary>
        /// The email of the actor, if it is a user.
        /// </summary>
        /// <value>The email of the actor, if it is a user.</value>
        /// <example>gregsanchez@example.com</example>
        [DataMember(Name="email", EmitDefaultValue=false)]
        public string Email { get; set; }

        /// <summary>
        /// Globally unique identifier of the actor, if it is a user.
        /// </summary>
        /// <value>Globally unique identifier of the actor, if it is a user.</value>
        /// <example>1111</example>
        [DataMember(Name="gid", EmitDefaultValue=false)]
        public string Gid { get; set; }

        /// <summary>
        /// The name of the actor, if it is a user.
        /// </summary>
        /// <value>The name of the actor, if it is a user.</value>
        /// <example>Greg Sanchez</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class AuditLogEventActor {\n");
            sb.Append("  ActorType: ").Append(ActorType).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Gid: ").Append(Gid).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((AuditLogEventActor)obj);
        }

        /// <summary>
        /// Returns true if AuditLogEventActor instances are equal
        /// </summary>
        /// <param name="other">Instance of AuditLogEventActor to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(AuditLogEventActor other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ActorType == other.ActorType ||
                    
                    ActorType.Equals(other.ActorType)
                ) && 
                (
                    Email == other.Email ||
                    Email != null &&
                    Email.Equals(other.Email)
                ) && 
                (
                    Gid == other.Gid ||
                    Gid != null &&
                    Gid.Equals(other.Gid)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + ActorType.GetHashCode();
                    if (Email != null)
                    hashCode = hashCode * 59 + Email.GetHashCode();
                    if (Gid != null)
                    hashCode = hashCode * 59 + Gid.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(AuditLogEventActor left, AuditLogEventActor right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(AuditLogEventActor left, AuditLogEventActor right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
