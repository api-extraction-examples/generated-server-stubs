/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class WebhooksApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a webhook by ID.
        /// </summary>
        /// <param name="resourceId">The resource ID.</param>
        /// <response code="204">Action completed successfully.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpDelete]
        [Route("/api/v2/webhooks/{resourceId}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteWebhook")]
        public virtual IActionResult DeleteWebhook([FromRoute (Name = "resourceId")][Required]string resourceId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a webhook by ID.
        /// </summary>
        /// <param name="resourceId">The resource ID.</param>
        /// <response code="200">Webhook response.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpGet]
        [Route("/api/v2/webhooks/{resourceId}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(Webhook), description: "Webhook response.")]
        public virtual IActionResult GetWebhook([FromRoute (Name = "resourceId")][Required]string resourceId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Webhook));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"name\" : \"Example hook\",\n  \"true\" : true,\n  \"statements\" : [ {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  }, {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  } ],\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secret\" : \"frobozz\",\n  \"url\" : \"https://example.com/example\",\n  \"tags\" : [ \"\", \"\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhook>(exampleJson)
            : default(Webhook);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Fetch a list of all webhooks.
        /// </summary>
        /// <response code="200">Webhooks response.</response>
        /// <response code="401">Invalid access token.</response>
        [HttpGet]
        [Route("/api/v2/webhooks")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetWebhooks")]
        [SwaggerResponse(statusCode: 200, type: typeof(Webhooks), description: "Webhooks response.")]
        public virtual IActionResult GetWebhooks()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Webhooks));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"items\" : [ {\n    \"_links\" : {\n      \"next\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      },\n      \"self\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      }\n    },\n    \"name\" : \"Example hook\",\n    \"true\" : true,\n    \"statements\" : [ {\n      \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n      \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"effect\" : \"allow\",\n      \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"actions\" : [ \"updateOn\", \"updateOn\" ]\n    }, {\n      \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n      \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"effect\" : \"allow\",\n      \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"actions\" : [ \"updateOn\", \"updateOn\" ]\n    } ],\n    \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"secret\" : \"frobozz\",\n    \"url\" : \"https://example.com/example\",\n    \"tags\" : [ \"\", \"\" ]\n  }, {\n    \"_links\" : {\n      \"next\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      },\n      \"self\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      }\n    },\n    \"name\" : \"Example hook\",\n    \"true\" : true,\n    \"statements\" : [ {\n      \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n      \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"effect\" : \"allow\",\n      \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"actions\" : [ \"updateOn\", \"updateOn\" ]\n    }, {\n      \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n      \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"effect\" : \"allow\",\n      \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n      \"actions\" : [ \"updateOn\", \"updateOn\" ]\n    } ],\n    \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"secret\" : \"frobozz\",\n    \"url\" : \"https://example.com/example\",\n    \"tags\" : [ \"\", \"\" ]\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhooks>(exampleJson)
            : default(Webhooks);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify a webhook by ID.
        /// </summary>
        /// <param name="resourceId">The resource ID.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <response code="200">Webhook response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPatch]
        [Route("/api/v2/webhooks/{resourceId}")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchWebhook")]
        [SwaggerResponse(statusCode: 200, type: typeof(Webhook), description: "Webhook response.")]
        public virtual IActionResult PatchWebhook([FromRoute (Name = "resourceId")][Required]string resourceId, [FromBody]List<PatchOperation> patchDelta)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Webhook));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"name\" : \"Example hook\",\n  \"true\" : true,\n  \"statements\" : [ {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  }, {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  } ],\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secret\" : \"frobozz\",\n  \"url\" : \"https://example.com/example\",\n  \"tags\" : [ \"\", \"\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhook>(exampleJson)
            : default(Webhook);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a webhook.
        /// </summary>
        /// <param name="webhookBody">New webhook.</param>
        /// <response code="201">Webhook response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        [HttpPost]
        [Route("/api/v2/webhooks")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostWebhook")]
        [SwaggerResponse(statusCode: 201, type: typeof(Webhook), description: "Webhook response.")]
        public virtual IActionResult PostWebhook([FromBody]PostWebhookRequest webhookBody)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Webhook));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"name\" : \"Example hook\",\n  \"true\" : true,\n  \"statements\" : [ {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  }, {\n    \"notActions\" : [ \"updateOn\", \"updateOn\" ],\n    \"notResources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"effect\" : \"allow\",\n    \"resources\" : [ \"proj/*:env/*:flag/my-flag\", \"proj/*:env/*:flag/my-flag\" ],\n    \"actions\" : [ \"updateOn\", \"updateOn\" ]\n  } ],\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secret\" : \"frobozz\",\n  \"url\" : \"https://example.com/example\",\n  \"tags\" : [ \"\", \"\" ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Webhook>(exampleJson)
            : default(Webhook);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
