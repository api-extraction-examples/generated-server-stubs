/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class UsersApiController : ControllerBase
    { 
        /// <summary>
        /// Delete a user by ID.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <response code="204">Action completed successfully.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpDelete]
        [Route("/api/v2/users/{projectKey}/{environmentKey}/{userKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteUser")]
        public virtual IActionResult DeleteUser([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromRoute (Name = "userKey")][Required]string userKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly- - use the List users API resource.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="q">Search query.</param>
        /// <param name="limit">Pagination limit.</param>
        /// <param name="offset">Specifies the first item to return in the collection.</param>
        /// <param name="after">A timestamp filter, expressed as a Unix epoch time in milliseconds. All entries returned will have occurred after this timestamp.</param>
        /// <response code="200">Users response.</response>
        /// <response code="401">Invalid access token.</response>
        [HttpGet]
        [Route("/api/v2/user-search/{projectKey}/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetSearchUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(Users), description: "Users response.")]
        public virtual IActionResult GetSearchUsers([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromQuery (Name = "q")]string q, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "offset")]int? offset, [FromQuery (Name = "after")]long? after)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Users));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"totalCount\" : 3.0,\n  \"items\" : [ {\n    \"environmentId\" : \"54ac2d97de674204ddd61096\",\n    \"lastPing\" : \"2015-03-03T02:37:22.492Z\",\n    \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\",\n    \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"user\" : {\n      \"secondary\" : \"secondary\",\n      \"country\" : \"country\",\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"custom\" : {\n        \"company\" : \"example.com\"\n      },\n      \"ip\" : \"ip\",\n      \"name\" : \"Bob Loblaw\",\n      \"anonymous\" : true,\n      \"avatar\" : \"avatar\",\n      \"email\" : \"email\",\n      \"key\" : \"a00bea\"\n    }\n  }, {\n    \"environmentId\" : \"54ac2d97de674204ddd61096\",\n    \"lastPing\" : \"2015-03-03T02:37:22.492Z\",\n    \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\",\n    \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"user\" : {\n      \"secondary\" : \"secondary\",\n      \"country\" : \"country\",\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"custom\" : {\n        \"company\" : \"example.com\"\n      },\n      \"ip\" : \"ip\",\n      \"name\" : \"Bob Loblaw\",\n      \"anonymous\" : true,\n      \"avatar\" : \"avatar\",\n      \"email\" : \"email\",\n      \"key\" : \"a00bea\"\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Users>(exampleJson)
            : default(Users);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a user by key.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="userKey">The user&#39;s key.</param>
        /// <response code="200">User response.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpGet]
        [Route("/api/v2/users/{projectKey}/{environmentKey}/{userKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetUser")]
        [SwaggerResponse(statusCode: 200, type: typeof(UserRecord), description: "User response.")]
        public virtual IActionResult GetUser([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromRoute (Name = "userKey")][Required]string userKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(UserRecord));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"environmentId\" : \"54ac2d97de674204ddd61096\",\n  \"lastPing\" : \"2015-03-03T02:37:22.492Z\",\n  \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\",\n  \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"user\" : {\n    \"secondary\" : \"secondary\",\n    \"country\" : \"country\",\n    \"firstName\" : \"firstName\",\n    \"lastName\" : \"lastName\",\n    \"custom\" : {\n      \"company\" : \"example.com\"\n    },\n    \"ip\" : \"ip\",\n    \"name\" : \"Bob Loblaw\",\n    \"anonymous\" : true,\n    \"avatar\" : \"avatar\",\n    \"email\" : \"email\",\n    \"key\" : \"a00bea\"\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<UserRecord>(exampleJson)
            : default(UserRecord);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List all users in the environment. Includes the total count of users. In each page, there will be up to &#39;limit&#39; users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="limit">Pagination limit.</param>
        /// <param name="h">This parameter is required when following \&quot;next\&quot; links.</param>
        /// <param name="scrollId">This parameter is required when following \&quot;next\&quot; links.</param>
        /// <response code="200">Users response.</response>
        /// <response code="401">Invalid access token.</response>
        [HttpGet]
        [Route("/api/v2/users/{projectKey}/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetUsers")]
        [SwaggerResponse(statusCode: 200, type: typeof(Users), description: "Users response.")]
        public virtual IActionResult GetUsers([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromQuery (Name = "limit")]int? limit, [FromQuery (Name = "h")]string h, [FromQuery (Name = "scrollId")]string scrollId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Users));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"totalCount\" : 3.0,\n  \"items\" : [ {\n    \"environmentId\" : \"54ac2d97de674204ddd61096\",\n    \"lastPing\" : \"2015-03-03T02:37:22.492Z\",\n    \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\",\n    \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"user\" : {\n      \"secondary\" : \"secondary\",\n      \"country\" : \"country\",\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"custom\" : {\n        \"company\" : \"example.com\"\n      },\n      \"ip\" : \"ip\",\n      \"name\" : \"Bob Loblaw\",\n      \"anonymous\" : true,\n      \"avatar\" : \"avatar\",\n      \"email\" : \"email\",\n      \"key\" : \"a00bea\"\n    }\n  }, {\n    \"environmentId\" : \"54ac2d97de674204ddd61096\",\n    \"lastPing\" : \"2015-03-03T02:37:22.492Z\",\n    \"avatar\" : \"https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg\",\n    \"ownerId\" : \"5a580a01b4ff89217bdf9dc1\",\n    \"user\" : {\n      \"secondary\" : \"secondary\",\n      \"country\" : \"country\",\n      \"firstName\" : \"firstName\",\n      \"lastName\" : \"lastName\",\n      \"custom\" : {\n        \"company\" : \"example.com\"\n      },\n      \"ip\" : \"ip\",\n      \"name\" : \"Bob Loblaw\",\n      \"anonymous\" : true,\n      \"avatar\" : \"avatar\",\n      \"email\" : \"email\",\n      \"key\" : \"a00bea\"\n    }\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Users>(exampleJson)
            : default(Users);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
