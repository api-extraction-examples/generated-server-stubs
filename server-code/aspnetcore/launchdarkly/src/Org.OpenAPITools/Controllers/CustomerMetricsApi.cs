/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class CustomerMetricsApiController : ControllerBase
    { 
        /// <summary>
        /// Get events usage by event id and the feature flag key.
        /// </summary>
        /// <param name="envId">The environment id for the flag evaluations in question.</param>
        /// <param name="flagKey">The key of the flag we want metrics for.</param>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        /// <response code="404">The environment or flag you requested could not be found</response>
        [HttpGet]
        [Route("/api/v2/usage/evaluations/{envId}/{flagKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetEvaluations")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSDKVersion), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        [SwaggerResponse(statusCode: 404, type: typeof(EvaluationUsageError), description: "The environment or flag you requested could not be found")]
        public virtual IActionResult GetEvaluations([FromRoute (Name = "envId")][Required]string envId, [FromRoute (Name = "flagKey")][Required]string flagKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSDKVersion));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(EvaluationUsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"sdkVersions\" : [ {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StreamSDKVersion>(exampleJson)
            : default(StreamSDKVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get events usage by event type.
        /// </summary>
        /// <param name="type">The type of event we would like to track.</param>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        /// <response code="404">The stream source you requested could not be found</response>
        [HttpGet]
        [Route("/api/v2/usage/events/{type}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSDKVersion), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        [SwaggerResponse(statusCode: 404, type: typeof(StreamUsageError), description: "The stream source you requested could not be found")]
        public virtual IActionResult GetEvent([FromRoute (Name = "type")][Required]string type)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSDKVersion));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(StreamUsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"sdkVersions\" : [ {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StreamSDKVersion>(exampleJson)
            : default(StreamSDKVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get events usage endpoints.
        /// </summary>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        [HttpGet]
        [Route("/api/v2/usage/events")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetEvents")]
        [SwaggerResponse(statusCode: 200, type: typeof(Events), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        public virtual IActionResult GetEvents()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Events));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"subseries\" : [ {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }, {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    } ]\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Events>(exampleJson)
            : default(Events);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get monthly active user data.
        /// </summary>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        [HttpGet]
        [Route("/api/v2/usage/mau")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetMAU")]
        [SwaggerResponse(statusCode: 200, type: typeof(MAU), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        public virtual IActionResult GetMAU()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MAU));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : [ {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  } ],\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"subseries\" : [ {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }, {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    } ]\n  },\n  \"series\" : [ {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  }, {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MAU>(exampleJson)
            : default(MAU);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get monthly active user data by category.
        /// </summary>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        [HttpGet]
        [Route("/api/v2/usage/mau/bycategory")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetMAUByCategory")]
        [SwaggerResponse(statusCode: 200, type: typeof(MAUbyCategory), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        public virtual IActionResult GetMAUByCategory()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(MAUbyCategory));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : [ null, null ],\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"series\" : [ {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  }, {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<MAUbyCategory>(exampleJson)
            : default(MAUbyCategory);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a stream endpoint and return timeseries data.
        /// </summary>
        /// <param name="source">The source of where the stream comes from.</param>
        /// <response code="200">Responds with time series data on stream usage.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        /// <response code="404">The stream source you requested could not be found</response>
        [HttpGet]
        [Route("/api/v2/usage/streams/{source}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetStream")]
        [SwaggerResponse(statusCode: 200, type: typeof(Stream), description: "Responds with time series data on stream usage.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        [SwaggerResponse(statusCode: 404, type: typeof(StreamUsageError), description: "The stream source you requested could not be found")]
        public virtual IActionResult GetStream([FromRoute (Name = "source")][Required]string source)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Stream));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(StreamUsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : [ {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  } ],\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"subseries\" : [ {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }, {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    } ]\n  },\n  \"series\" : [ {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  }, {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Stream>(exampleJson)
            : default(Stream);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a stream timeseries data by source show sdk version metadata.
        /// </summary>
        /// <param name="source">The source of where the stream comes from.</param>
        /// <response code="200">Returns timeseries data and metadata on sdk version.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        /// <response code="404">The stream source you requested could not be found</response>
        [HttpGet]
        [Route("/api/v2/usage/streams/{source}/bysdkversion")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetStreamBySDK")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamBySDK), description: "Returns timeseries data and metadata on sdk version.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        [SwaggerResponse(statusCode: 404, type: typeof(StreamUsageError), description: "The stream source you requested could not be found")]
        public virtual IActionResult GetStreamBySDK([FromRoute (Name = "source")][Required]string source)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamBySDK));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(StreamUsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"metadata\" : [ {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"source\" : \"server\",\n    \"version\" : \"5.4.3\"\n  } ],\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"series\" : [ {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  }, {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StreamBySDK>(exampleJson)
            : default(StreamBySDK);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get a stream timeseries data by source and show all sdk version associated.
        /// </summary>
        /// <param name="source">The source of where the stream comes from.</param>
        /// <response code="200">Returns timeseries data and all sdk versions.</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        /// <response code="404">The stream source you requested could not be found</response>
        [HttpGet]
        [Route("/api/v2/usage/streams/{source}/sdkversions")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetStreamSDKVersion")]
        [SwaggerResponse(statusCode: 200, type: typeof(StreamSDKVersion), description: "Returns timeseries data and all sdk versions.")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        [SwaggerResponse(statusCode: 404, type: typeof(StreamUsageError), description: "The stream source you requested could not be found")]
        public virtual IActionResult GetStreamSDKVersion([FromRoute (Name = "source")][Required]string source)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(StreamSDKVersion));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(StreamUsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"sdkVersions\" : [ {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  }, {\n    \"sdk\" : \"ruby\",\n    \"version\" : \"5.4.3\"\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<StreamSDKVersion>(exampleJson)
            : default(StreamSDKVersion);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of all streams.
        /// </summary>
        /// <response code="200">Stream usage endpoints</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        [HttpGet]
        [Route("/api/v2/usage/streams")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetStreams")]
        [SwaggerResponse(statusCode: 200, type: typeof(Streams), description: "Stream usage endpoints")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        public virtual IActionResult GetStreams()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Streams));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"subseries\" : [ {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }, {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    } ]\n  }\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Streams>(exampleJson)
            : default(Streams);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns of the usage endpoints available.
        /// </summary>
        /// <response code="200">Usage endpoints</response>
        /// <response code="403">This is a beta API, you must pass beta in the LD-API-Version header to use it.</response>
        [HttpGet]
        [Route("/api/v2/usage")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetUsage")]
        [SwaggerResponse(statusCode: 200, type: typeof(Usage), description: "Usage endpoints")]
        [SwaggerResponse(statusCode: 403, type: typeof(UsageError), description: "This is a beta API, you must pass beta in the LD-API-Version header to use it.")]
        public virtual IActionResult GetUsage()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Usage));
            //TODO: Uncomment the next line to return response 403 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(403, default(UsageError));
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"parent\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"subseries\" : [ {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }, {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    } ]\n  },\n  \"series\" : [ {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  }, {\n    \"0\" : 0,\n    \"time\" : 1551740400000\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Usage>(exampleJson)
            : default(Usage);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
