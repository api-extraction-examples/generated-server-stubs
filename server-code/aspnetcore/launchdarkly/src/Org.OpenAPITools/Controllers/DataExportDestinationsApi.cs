/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DataExportDestinationsApiController : ControllerBase
    { 
        /// <summary>
        /// Get a single data export destination by ID
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="destinationId">The data export destination ID.</param>
        /// <response code="204">Action completed successfully.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpDelete]
        [Route("/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteDestination")]
        public virtual IActionResult DeleteDestination([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromRoute (Name = "destinationId")][Required]string destinationId)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get a single data export destination by ID
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="destinationId">The data export destination ID.</param>
        /// <response code="200">Destination response.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpGet]
        [Route("/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetDestination")]
        [SwaggerResponse(statusCode: 200, type: typeof(Destination), description: "Destination response.")]
        public virtual IActionResult GetDestination([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromRoute (Name = "destinationId")][Required]string destinationId)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Destination));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"kind\" : \"google-pubsub\",\n  \"name\" : \"Example Google Pub/Sub Destination\",\n  \"true\" : true,\n  \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\",\n  \"config\" : {\n    \"project\" : \"cool-project\",\n    \"topic\" : \"test\"\n  },\n  \"version\" : 2\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Destination>(exampleJson)
            : default(Destination);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Returns a list of all data export destinations.
        /// </summary>
        /// <response code="200">Destinations response.</response>
        /// <response code="401">Invalid access token.</response>
        [HttpGet]
        [Route("/api/v2/destinations")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetDestinations")]
        [SwaggerResponse(statusCode: 200, type: typeof(Destinations), description: "Destinations response.")]
        public virtual IActionResult GetDestinations()
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Destinations));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"items\" : [ {\n    \"_links\" : {\n      \"next\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      },\n      \"self\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      }\n    },\n    \"kind\" : \"google-pubsub\",\n    \"name\" : \"Example Google Pub/Sub Destination\",\n    \"true\" : true,\n    \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\",\n    \"config\" : {\n      \"project\" : \"cool-project\",\n      \"topic\" : \"test\"\n    },\n    \"version\" : 2\n  }, {\n    \"_links\" : {\n      \"next\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      },\n      \"self\" : {\n        \"href\" : \"/api/v2/endpoint\",\n        \"type\" : \"application/json\"\n      }\n    },\n    \"kind\" : \"google-pubsub\",\n    \"name\" : \"Example Google Pub/Sub Destination\",\n    \"true\" : true,\n    \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\",\n    \"config\" : {\n      \"project\" : \"cool-project\",\n      \"topic\" : \"test\"\n    },\n    \"version\" : 2\n  } ]\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Destinations>(exampleJson)
            : default(Destinations);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Perform a partial update to a data export destination.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="destinationId">The data export destination ID.</param>
        /// <param name="patchOnly">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39; Feature flag patches also support JSON Merge Patch format. &#39;https://tools.ietf.org/html/rfc7386&#39; The addition of comments is also supported.</param>
        /// <response code="200">Destination response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPatch]
        [Route("/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchDestination")]
        [SwaggerResponse(statusCode: 200, type: typeof(Destination), description: "Destination response.")]
        public virtual IActionResult PatchDestination([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromRoute (Name = "destinationId")][Required]string destinationId, [FromBody]List<PatchOperation> patchOnly)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Destination));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"kind\" : \"google-pubsub\",\n  \"name\" : \"Example Google Pub/Sub Destination\",\n  \"true\" : true,\n  \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\",\n  \"config\" : {\n    \"project\" : \"cool-project\",\n    \"topic\" : \"test\"\n  },\n  \"version\" : 2\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Destination>(exampleJson)
            : default(Destination);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new data export destination
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="destinationBody">Create a new data export destination.</param>
        /// <response code="201">Destination response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPost]
        [Route("/api/v2/destinations/{projectKey}/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostDestination")]
        [SwaggerResponse(statusCode: 201, type: typeof(Destination), description: "Destination response.")]
        public virtual IActionResult PostDestination([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromBody]PostDestinationRequest destinationBody)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Destination));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"kind\" : \"google-pubsub\",\n  \"name\" : \"Example Google Pub/Sub Destination\",\n  \"true\" : true,\n  \"_id\" : \"37ed9aad-de0a-4665-932e-41c35587aeea\",\n  \"config\" : {\n    \"project\" : \"cool-project\",\n    \"topic\" : \"test\"\n  },\n  \"version\" : 2\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<Destination>(exampleJson)
            : default(Destination);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
