/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EnvironmentsApiController : ControllerBase
    { 
        /// <summary>
        /// Delete an environment in a specific project.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <response code="204">Action completed successfully.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpDelete]
        [Route("/api/v2/projects/{projectKey}/environments/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("DeleteEnvironment")]
        public virtual IActionResult DeleteEnvironment([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey)
        {

            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get an environment given a project and key.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <response code="200">Environment response.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        [HttpGet]
        [Route("/api/v2/projects/{projectKey}/environments/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("GetEnvironment")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEnvironment), description: "Environment response.")]
        public virtual IActionResult GetEnvironment([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEnvironment));
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            string exampleJson = null;
            exampleJson = "{\n  \"approvalSettings\" : {\n    \"serviceKind\" : \"launchdarkly\",\n    \"canReviewOwnRequest\" : true,\n    \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ],\n    \"canApplyDeclinedChanges\" : true,\n    \"minNumApprovals\" : 2,\n    \"required\" : true\n  },\n  \"apiKey\" : \"XXX\",\n  \"color\" : \"417505\",\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"confirmChanges\" : false,\n  \"requireComments\" : false,\n  \"mobileKey\" : \"XXX\",\n  \"defaultTrackEvents\" : false,\n  \"tags\" : [ \"tags\", \"tags\" ],\n  \"defaultTtl\" : 0.0,\n  \"name\" : \"Production\",\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secureMode\" : false,\n  \"key\" : \"production\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelEnvironment>(exampleJson)
            : default(ModelEnvironment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="patchDelta">Requires a JSON Patch representation of the desired changes to the project. &#39;http://jsonpatch.com/&#39;</param>
        /// <response code="200">Environment response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="404">Invalid resource specifier.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPatch]
        [Route("/api/v2/projects/{projectKey}/environments/{environmentKey}")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PatchEnvironment")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEnvironment), description: "Environment response.")]
        public virtual IActionResult PatchEnvironment([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromBody]List<PatchOperation> patchDelta)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEnvironment));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"approvalSettings\" : {\n    \"serviceKind\" : \"launchdarkly\",\n    \"canReviewOwnRequest\" : true,\n    \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ],\n    \"canApplyDeclinedChanges\" : true,\n    \"minNumApprovals\" : 2,\n    \"required\" : true\n  },\n  \"apiKey\" : \"XXX\",\n  \"color\" : \"417505\",\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"confirmChanges\" : false,\n  \"requireComments\" : false,\n  \"mobileKey\" : \"XXX\",\n  \"defaultTrackEvents\" : false,\n  \"tags\" : [ \"tags\", \"tags\" ],\n  \"defaultTtl\" : 0.0,\n  \"name\" : \"Production\",\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secureMode\" : false,\n  \"key\" : \"production\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelEnvironment>(exampleJson)
            : default(ModelEnvironment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Create a new environment in a specified project with a given name, key, and swatch color.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentBody">New environment.</param>
        /// <response code="201">Environment response.</response>
        /// <response code="400">Invalid request body.</response>
        /// <response code="401">Invalid access token.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPost]
        [Route("/api/v2/projects/{projectKey}/environments")]
        [Authorize(Policy = "Token")]
        [Consumes("application/json")]
        [ValidateModelState]
        [SwaggerOperation("PostEnvironment")]
        [SwaggerResponse(statusCode: 201, type: typeof(ModelEnvironment), description: "Environment response.")]
        public virtual IActionResult PostEnvironment([FromRoute (Name = "projectKey")][Required]string projectKey, [FromBody]EnvironmentPost environmentBody)
        {

            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(ModelEnvironment));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"approvalSettings\" : {\n    \"serviceKind\" : \"launchdarkly\",\n    \"canReviewOwnRequest\" : true,\n    \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ],\n    \"canApplyDeclinedChanges\" : true,\n    \"minNumApprovals\" : 2,\n    \"required\" : true\n  },\n  \"apiKey\" : \"XXX\",\n  \"color\" : \"417505\",\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"confirmChanges\" : false,\n  \"requireComments\" : false,\n  \"mobileKey\" : \"XXX\",\n  \"defaultTrackEvents\" : false,\n  \"tags\" : [ \"tags\", \"tags\" ],\n  \"defaultTtl\" : 0.0,\n  \"name\" : \"Production\",\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secureMode\" : false,\n  \"key\" : \"production\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelEnvironment>(exampleJson)
            : default(ModelEnvironment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reset an environment&#39;s mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="expiry">The expiry parameter is deprecated for this endpoint, so the old mobile key will always expire immediately. This parameter will be removed in an upcoming major API client version.</param>
        /// <response code="200">Environment response.</response>
        /// <response code="404">Invalid resource specifier.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPost]
        [Route("/api/v2/projects/{projectKey}/environments/{environmentKey}/mobileKey")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("ResetEnvironmentMobileKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEnvironment), description: "Environment response.")]
        public virtual IActionResult ResetEnvironmentMobileKey([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromQuery (Name = "expiry")]long? expiry)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEnvironment));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"approvalSettings\" : {\n    \"serviceKind\" : \"launchdarkly\",\n    \"canReviewOwnRequest\" : true,\n    \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ],\n    \"canApplyDeclinedChanges\" : true,\n    \"minNumApprovals\" : 2,\n    \"required\" : true\n  },\n  \"apiKey\" : \"XXX\",\n  \"color\" : \"417505\",\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"confirmChanges\" : false,\n  \"requireComments\" : false,\n  \"mobileKey\" : \"XXX\",\n  \"defaultTrackEvents\" : false,\n  \"tags\" : [ \"tags\", \"tags\" ],\n  \"defaultTtl\" : 0.0,\n  \"name\" : \"Production\",\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secureMode\" : false,\n  \"key\" : \"production\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelEnvironment>(exampleJson)
            : default(ModelEnvironment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Reset an environment&#39;s SDK key with an optional expiry time for the old key.
        /// </summary>
        /// <param name="projectKey">The project key, used to tie the flags together under one project so they can be managed together.</param>
        /// <param name="environmentKey">The environment key, used to tie together flag configuration and users under one environment so they can be managed together.</param>
        /// <param name="expiry">An expiration time for the old environment SDK key, expressed as a Unix epoch time in milliseconds. By default, the key will expire immediately.</param>
        /// <response code="200">Environment response.</response>
        /// <response code="404">Invalid resource specifier.</response>
        /// <response code="409">Status conflict.</response>
        [HttpPost]
        [Route("/api/v2/projects/{projectKey}/environments/{environmentKey}/apiKey")]
        [Authorize(Policy = "Token")]
        [ValidateModelState]
        [SwaggerOperation("ResetEnvironmentSDKKey")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEnvironment), description: "Environment response.")]
        public virtual IActionResult ResetEnvironmentSDKKey([FromRoute (Name = "projectKey")][Required]string projectKey, [FromRoute (Name = "environmentKey")][Required]string environmentKey, [FromQuery (Name = "expiry")]long? expiry)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEnvironment));
            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            //TODO: Uncomment the next line to return response 409 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(409);
            string exampleJson = null;
            exampleJson = "{\n  \"approvalSettings\" : {\n    \"serviceKind\" : \"launchdarkly\",\n    \"canReviewOwnRequest\" : true,\n    \"requiredApprovalTags\" : [ \"requiredApprovalTags\", \"requiredApprovalTags\" ],\n    \"canApplyDeclinedChanges\" : true,\n    \"minNumApprovals\" : 2,\n    \"required\" : true\n  },\n  \"apiKey\" : \"XXX\",\n  \"color\" : \"417505\",\n  \"_links\" : {\n    \"next\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    },\n    \"self\" : {\n      \"href\" : \"/api/v2/endpoint\",\n      \"type\" : \"application/json\"\n    }\n  },\n  \"confirmChanges\" : false,\n  \"requireComments\" : false,\n  \"mobileKey\" : \"XXX\",\n  \"defaultTrackEvents\" : false,\n  \"tags\" : [ \"tags\", \"tags\" ],\n  \"defaultTtl\" : 0.0,\n  \"name\" : \"Production\",\n  \"_id\" : \"5a580a01b4ff89217bdf9dc1\",\n  \"secureMode\" : false,\n  \"key\" : \"production\"\n}";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ModelEnvironment>(exampleJson)
            : default(ModelEnvironment);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
