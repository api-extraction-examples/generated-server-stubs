/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// Approval settings for an environment. Only appears if the approvals feature is enabled.
    /// </summary>
    [DataContract]
    public partial class EnvironmentApprovalSettings : IEquatable<EnvironmentApprovalSettings>
    {
        /// <summary>
        /// Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.
        /// </summary>
        /// <value>Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.</value>
        [DataMember(Name="canApplyDeclinedChanges", EmitDefaultValue=true)]
        public bool CanApplyDeclinedChanges { get; set; }

        /// <summary>
        /// Whether requesters can approve or decline their own request. They may always comment.
        /// </summary>
        /// <value>Whether requesters can approve or decline their own request. They may always comment.</value>
        [DataMember(Name="canReviewOwnRequest", EmitDefaultValue=true)]
        public bool CanReviewOwnRequest { get; set; }

        /// <summary>
        /// The number of approvals required before an approval request can be applied.
        /// </summary>
        /// <value>The number of approvals required before an approval request can be applied.</value>
        /// <example>2</example>
        [DataMember(Name="minNumApprovals", EmitDefaultValue=true)]
        public long MinNumApprovals { get; set; }

        /// <summary>
        /// Whether any changes to flags in this environment will require approval. You may only set required or requiredApprovalTags, not both.
        /// </summary>
        /// <value>Whether any changes to flags in this environment will require approval. You may only set required or requiredApprovalTags, not both.</value>
        [DataMember(Name="required", EmitDefaultValue=true)]
        public bool Required { get; set; }

        /// <summary>
        /// An array of tags used to specify which flags with those tags require approval. You may only set requiredApprovalTags or required, not both.
        /// </summary>
        /// <value>An array of tags used to specify which flags with those tags require approval. You may only set requiredApprovalTags or required, not both.</value>
        [DataMember(Name="requiredApprovalTags", EmitDefaultValue=false)]
        public List<string> RequiredApprovalTags { get; set; }


        /// <summary>
        /// The approvals system used.
        /// </summary>
        /// <value>The approvals system used.</value>
        [TypeConverter(typeof(CustomEnumConverter<ServiceKindEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ServiceKindEnum
        {
            
            /// <summary>
            /// Enum LaunchdarklyEnum for launchdarkly
            /// </summary>
            [EnumMember(Value = "launchdarkly")]
            LaunchdarklyEnum = 1,
            
            /// <summary>
            /// Enum ServiceNowEnum for service-now
            /// </summary>
            [EnumMember(Value = "service-now")]
            ServiceNowEnum = 2
        }

        /// <summary>
        /// The approvals system used.
        /// </summary>
        /// <value>The approvals system used.</value>
        [DataMember(Name="serviceKind", EmitDefaultValue=true)]
        public ServiceKindEnum ServiceKind { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class EnvironmentApprovalSettings {\n");
            sb.Append("  CanApplyDeclinedChanges: ").Append(CanApplyDeclinedChanges).Append("\n");
            sb.Append("  CanReviewOwnRequest: ").Append(CanReviewOwnRequest).Append("\n");
            sb.Append("  MinNumApprovals: ").Append(MinNumApprovals).Append("\n");
            sb.Append("  Required: ").Append(Required).Append("\n");
            sb.Append("  RequiredApprovalTags: ").Append(RequiredApprovalTags).Append("\n");
            sb.Append("  ServiceKind: ").Append(ServiceKind).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((EnvironmentApprovalSettings)obj);
        }

        /// <summary>
        /// Returns true if EnvironmentApprovalSettings instances are equal
        /// </summary>
        /// <param name="other">Instance of EnvironmentApprovalSettings to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(EnvironmentApprovalSettings other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    CanApplyDeclinedChanges == other.CanApplyDeclinedChanges ||
                    
                    CanApplyDeclinedChanges.Equals(other.CanApplyDeclinedChanges)
                ) && 
                (
                    CanReviewOwnRequest == other.CanReviewOwnRequest ||
                    
                    CanReviewOwnRequest.Equals(other.CanReviewOwnRequest)
                ) && 
                (
                    MinNumApprovals == other.MinNumApprovals ||
                    
                    MinNumApprovals.Equals(other.MinNumApprovals)
                ) && 
                (
                    Required == other.Required ||
                    
                    Required.Equals(other.Required)
                ) && 
                (
                    RequiredApprovalTags == other.RequiredApprovalTags ||
                    RequiredApprovalTags != null &&
                    other.RequiredApprovalTags != null &&
                    RequiredApprovalTags.SequenceEqual(other.RequiredApprovalTags)
                ) && 
                (
                    ServiceKind == other.ServiceKind ||
                    
                    ServiceKind.Equals(other.ServiceKind)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    
                    hashCode = hashCode * 59 + CanApplyDeclinedChanges.GetHashCode();
                    
                    hashCode = hashCode * 59 + CanReviewOwnRequest.GetHashCode();
                    
                    hashCode = hashCode * 59 + MinNumApprovals.GetHashCode();
                    
                    hashCode = hashCode * 59 + Required.GetHashCode();
                    if (RequiredApprovalTags != null)
                    hashCode = hashCode * 59 + RequiredApprovalTags.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceKind.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(EnvironmentApprovalSettings left, EnvironmentApprovalSettings right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(EnvironmentApprovalSettings left, EnvironmentApprovalSettings right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
