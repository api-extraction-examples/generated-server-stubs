/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FeatureFlag : IEquatable<FeatureFlag>
    {
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Gets or Sets Maintainer
        /// </summary>
        [DataMember(Name="_maintainer", EmitDefaultValue=false)]
        public Member Maintainer { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /// <example>23</example>
        [DataMember(Name="_version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Whether or not this flag is archived.
        /// </summary>
        /// <value>Whether or not this flag is archived.</value>
        /// <example>false</example>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the archived time of this flag.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the archived time of this flag.</value>
        /// <example>1443652232590</example>
        [DataMember(Name="archivedDate", EmitDefaultValue=true)]
        public long ArchivedDate { get; set; }

        /// <summary>
        /// Gets or Sets ClientSideAvailability
        /// </summary>
        [DataMember(Name="clientSideAvailability", EmitDefaultValue=false)]
        public ClientSideAvailability ClientSideAvailability { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the creation time of this flag.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the creation time of this flag.</value>
        /// <example>1443652232590</example>
        [DataMember(Name="creationDate", EmitDefaultValue=true)]
        public long CreationDate { get; set; }

        /// <summary>
        /// A mapping of keys to CustomProperty entries.
        /// </summary>
        /// <value>A mapping of keys to CustomProperty entries.</value>
        /// <example>{&quot;bugs&quot;:{&quot;name&quot;:&quot;Issue tracker ids&quot;,&quot;value&quot;:[&quot;123&quot;,&quot;456&quot;]},&quot;deprecated&quot;:{&quot;name&quot;:&quot;Deprecated Date&quot;,&quot;value&quot;:[]}}</example>
        [DataMember(Name="customProperties", EmitDefaultValue=false)]
        public Dictionary<string, CustomProperty> CustomProperties { get; set; }

        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name="defaults", EmitDefaultValue=false)]
        public Defaults Defaults { get; set; }

        /// <summary>
        /// Description of the feature flag.
        /// </summary>
        /// <value>Description of the feature flag.</value>
        /// <example>This flag controls whether test feature is turned on or not.</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets Environments
        /// </summary>
        [DataMember(Name="environments", EmitDefaultValue=false)]
        public Dictionary<string, FeatureFlagConfig> Environments { get; set; }

        /// <summary>
        /// An array goals from all environments associated with this feature flag
        /// </summary>
        /// <value>An array goals from all environments associated with this feature flag</value>
        /// <example>[d7239405bd89c930e885aa76, 405bc930e88d7239d895aa76]</example>
        [DataMember(Name="goalIds", EmitDefaultValue=false)]
        public List<string> GoalIds { get; set; }

        /// <summary>
        /// Gets or Sets IncludeInSnippet
        /// </summary>
        /// <example>false</example>
        [DataMember(Name="includeInSnippet", EmitDefaultValue=true)]
        public bool IncludeInSnippet { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        /// <example>test-feature</example>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Whether the feature flag is a boolean flag or multivariate.
        /// </summary>
        /// <value>Whether the feature flag is a boolean flag or multivariate.</value>
        /// <example>boolean</example>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// The ID of the member that should maintain this flag.
        /// </summary>
        /// <value>The ID of the member that should maintain this flag.</value>
        /// <example>561c579cd8fd5c2704000001</example>
        [DataMember(Name="maintainerId", EmitDefaultValue=false)]
        public string MaintainerId { get; set; }

        /// <summary>
        /// Name of the feature flag.
        /// </summary>
        /// <value>Name of the feature flag.</value>
        /// <example>Test Feature</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// An array of tags for this feature flag.
        /// </summary>
        /// <value>An array of tags for this feature flag.</value>
        /// <example>[]</example>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Whether or not this flag is temporary.
        /// </summary>
        /// <value>Whether or not this flag is temporary.</value>
        /// <example>false</example>
        [DataMember(Name="temporary", EmitDefaultValue=true)]
        public bool Temporary { get; set; }

        /// <summary>
        /// The variations for this feature flag.
        /// </summary>
        /// <value>The variations for this feature flag.</value>
        /// <example>[{value&#x3D;a}, {value&#x3D;b}]</example>
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlag {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Maintainer: ").Append(Maintainer).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  ArchivedDate: ").Append(ArchivedDate).Append("\n");
            sb.Append("  ClientSideAvailability: ").Append(ClientSideAvailability).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  Environments: ").Append(Environments).Append("\n");
            sb.Append("  GoalIds: ").Append(GoalIds).Append("\n");
            sb.Append("  IncludeInSnippet: ").Append(IncludeInSnippet).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  MaintainerId: ").Append(MaintainerId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Temporary: ").Append(Temporary).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeatureFlag)obj);
        }

        /// <summary>
        /// Returns true if FeatureFlag instances are equal
        /// </summary>
        /// <param name="other">Instance of FeatureFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlag other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Maintainer == other.Maintainer ||
                    Maintainer != null &&
                    Maintainer.Equals(other.Maintainer)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    ArchivedDate == other.ArchivedDate ||
                    
                    ArchivedDate.Equals(other.ArchivedDate)
                ) && 
                (
                    ClientSideAvailability == other.ClientSideAvailability ||
                    ClientSideAvailability != null &&
                    ClientSideAvailability.Equals(other.ClientSideAvailability)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    CustomProperties == other.CustomProperties ||
                    CustomProperties != null &&
                    other.CustomProperties != null &&
                    CustomProperties.SequenceEqual(other.CustomProperties)
                ) && 
                (
                    Defaults == other.Defaults ||
                    Defaults != null &&
                    Defaults.Equals(other.Defaults)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    Environments == other.Environments ||
                    Environments != null &&
                    other.Environments != null &&
                    Environments.SequenceEqual(other.Environments)
                ) && 
                (
                    GoalIds == other.GoalIds ||
                    GoalIds != null &&
                    other.GoalIds != null &&
                    GoalIds.SequenceEqual(other.GoalIds)
                ) && 
                (
                    IncludeInSnippet == other.IncludeInSnippet ||
                    
                    IncludeInSnippet.Equals(other.IncludeInSnippet)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Kind == other.Kind ||
                    Kind != null &&
                    Kind.Equals(other.Kind)
                ) && 
                (
                    MaintainerId == other.MaintainerId ||
                    MaintainerId != null &&
                    MaintainerId.Equals(other.MaintainerId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Temporary == other.Temporary ||
                    
                    Temporary.Equals(other.Temporary)
                ) && 
                (
                    Variations == other.Variations ||
                    Variations != null &&
                    other.Variations != null &&
                    Variations.SequenceEqual(other.Variations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Maintainer != null)
                    hashCode = hashCode * 59 + Maintainer.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    
                    hashCode = hashCode * 59 + ArchivedDate.GetHashCode();
                    if (ClientSideAvailability != null)
                    hashCode = hashCode * 59 + ClientSideAvailability.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (CustomProperties != null)
                    hashCode = hashCode * 59 + CustomProperties.GetHashCode();
                    if (Defaults != null)
                    hashCode = hashCode * 59 + Defaults.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    if (Environments != null)
                    hashCode = hashCode * 59 + Environments.GetHashCode();
                    if (GoalIds != null)
                    hashCode = hashCode * 59 + GoalIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeInSnippet.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                    if (MaintainerId != null)
                    hashCode = hashCode * 59 + MaintainerId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    
                    hashCode = hashCode * 59 + Temporary.GetHashCode();
                    if (Variations != null)
                    hashCode = hashCode * 59 + Variations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeatureFlag left, FeatureFlag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeatureFlag left, FeatureFlag right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
