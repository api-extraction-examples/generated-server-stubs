/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class CopyFeatureFlagRequest : IEquatable<CopyFeatureFlagRequest>
    {
        /// <summary>
        /// comment will be included in audit log item for change.
        /// </summary>
        /// <value>comment will be included in audit log item for change.</value>
        /// <example>This is a comment string</example>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// Define the parts of the flag configuration that will not be copied.
        /// </summary>
        /// <value>Define the parts of the flag configuration that will not be copied.</value>
        [DataMember(Name="excludedActions", EmitDefaultValue=false)]
        public List<CopyActions> ExcludedActions { get; set; }

        /// <summary>
        /// Define the parts of the flag configuration that will be copied.
        /// </summary>
        /// <value>Define the parts of the flag configuration that will be copied.</value>
        [DataMember(Name="includedActions", EmitDefaultValue=false)]
        public List<CopyActions> IncludedActions { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public FeatureFlagCopyObject Source { get; set; }

        /// <summary>
        /// Gets or Sets Target
        /// </summary>
        [DataMember(Name="target", EmitDefaultValue=false)]
        public FeatureFlagCopyObject Target { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class CopyFeatureFlagRequest {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  ExcludedActions: ").Append(ExcludedActions).Append("\n");
            sb.Append("  IncludedActions: ").Append(IncludedActions).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  Target: ").Append(Target).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((CopyFeatureFlagRequest)obj);
        }

        /// <summary>
        /// Returns true if CopyFeatureFlagRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of CopyFeatureFlagRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(CopyFeatureFlagRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    ExcludedActions == other.ExcludedActions ||
                    ExcludedActions != null &&
                    other.ExcludedActions != null &&
                    ExcludedActions.SequenceEqual(other.ExcludedActions)
                ) && 
                (
                    IncludedActions == other.IncludedActions ||
                    IncludedActions != null &&
                    other.IncludedActions != null &&
                    IncludedActions.SequenceEqual(other.IncludedActions)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    Target == other.Target ||
                    Target != null &&
                    Target.Equals(other.Target)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (ExcludedActions != null)
                    hashCode = hashCode * 59 + ExcludedActions.GetHashCode();
                    if (IncludedActions != null)
                    hashCode = hashCode * 59 + IncludedActions.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (Target != null)
                    hashCode = hashCode * 59 + Target.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(CopyFeatureFlagRequest left, CopyFeatureFlagRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(CopyFeatureFlagRequest left, CopyFeatureFlagRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
