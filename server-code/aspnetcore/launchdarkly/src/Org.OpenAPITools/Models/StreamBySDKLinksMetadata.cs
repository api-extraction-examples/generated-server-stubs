/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class StreamBySDKLinksMetadata : IEquatable<StreamBySDKLinksMetadata>
    {
        /// <summary>
        /// Gets or Sets Sdk
        /// </summary>
        /// <example>ruby</example>
        [DataMember(Name="sdk", EmitDefaultValue=false)]
        public string Sdk { get; set; }

        /// <summary>
        /// Gets or Sets Source
        /// </summary>
        /// <example>server</example>
        [DataMember(Name="source", EmitDefaultValue=false)]
        public string Source { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /// <example>5.4.3</example>
        [DataMember(Name="version", EmitDefaultValue=false)]
        public string VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class StreamBySDKLinksMetadata {\n");
            sb.Append("  Sdk: ").Append(Sdk).Append("\n");
            sb.Append("  Source: ").Append(Source).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((StreamBySDKLinksMetadata)obj);
        }

        /// <summary>
        /// Returns true if StreamBySDKLinksMetadata instances are equal
        /// </summary>
        /// <param name="other">Instance of StreamBySDKLinksMetadata to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(StreamBySDKLinksMetadata other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Sdk == other.Sdk ||
                    Sdk != null &&
                    Sdk.Equals(other.Sdk)
                ) && 
                (
                    Source == other.Source ||
                    Source != null &&
                    Source.Equals(other.Source)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    VarVersion != null &&
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Sdk != null)
                    hashCode = hashCode * 59 + Sdk.GetHashCode();
                    if (Source != null)
                    hashCode = hashCode * 59 + Source.GetHashCode();
                    if (VarVersion != null)
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(StreamBySDKLinksMetadata left, StreamBySDKLinksMetadata right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(StreamBySDKLinksMetadata left, StreamBySDKLinksMetadata right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
