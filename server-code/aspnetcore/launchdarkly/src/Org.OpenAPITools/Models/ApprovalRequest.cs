/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ApprovalRequest : IEquatable<ApprovalRequest>
    {
        /// <summary>
        /// The unique resource id.
        /// </summary>
        /// <value>The unique resource id.</value>
        /// <example>5a580a01b4ff89217bdf9dc1</example>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="_version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Gets or Sets AllReviews
        /// </summary>
        [DataMember(Name="allReviews", EmitDefaultValue=false)]
        public List<ApprovalRequestReview> AllReviews { get; set; }

        /// <summary>
        /// The id of the member that applied the approval request
        /// </summary>
        /// <value>The id of the member that applied the approval request</value>
        [DataMember(Name="appliedByMemberID", EmitDefaultValue=false)]
        public string AppliedByMemberID { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the date the approval request was applied
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the date the approval request was applied</value>
        [DataMember(Name="appliedDate", EmitDefaultValue=true)]
        public int AppliedDate { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the date the approval request was requested
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the date the approval request was requested</value>
        [DataMember(Name="creationDate", EmitDefaultValue=true)]
        public int CreationDate { get; set; }

        /// <summary>
        /// Timestamp for when instructions will be executed
        /// </summary>
        /// <value>Timestamp for when instructions will be executed</value>
        [DataMember(Name="executionDate", EmitDefaultValue=true)]
        public long ExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public List<SemanticPatchInstructionInner> Instructions { get; set; }

        /// <summary>
        /// Gets or Sets NotifyMemberIds
        /// </summary>
        /// <example>[memberId, memberId2]</example>
        [DataMember(Name="notifyMemberIds", EmitDefaultValue=false)]
        public List<string> NotifyMemberIds { get; set; }

        /// <summary>
        /// ID of scheduled change to edit or delete
        /// </summary>
        /// <value>ID of scheduled change to edit or delete</value>
        [DataMember(Name="operatingOnId", EmitDefaultValue=false)]
        public string OperatingOnId { get; set; }

        /// <summary>
        /// The id of the member that requested the change
        /// </summary>
        /// <value>The id of the member that requested the change</value>
        [DataMember(Name="requestorId", EmitDefaultValue=false)]
        public string RequestorId { get; set; }

        /// <summary>
        /// Gets or Sets ReviewStatus
        /// </summary>
        [DataMember(Name="reviewStatus", EmitDefaultValue=true)]
        public ApprovalRequestReviewStatus ReviewStatus { get; set; }


        /// <summary>
        /// | Name      | Description | | - -- -- -- --:| - -- -- -- -- -- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully | 
        /// </summary>
        /// <value>| Name      | Description | | - -- -- -- --:| - -- -- -- -- -- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully | </value>
        [TypeConverter(typeof(CustomEnumConverter<StatusEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StatusEnum
        {
            
            /// <summary>
            /// Enum PendingEnum for pending
            /// </summary>
            [EnumMember(Value = "pending")]
            PendingEnum = 1,
            
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 2,
            
            /// <summary>
            /// Enum ScheduledEnum for scheduled
            /// </summary>
            [EnumMember(Value = "scheduled")]
            ScheduledEnum = 3,
            
            /// <summary>
            /// Enum FailedEnum for failed
            /// </summary>
            [EnumMember(Value = "failed")]
            FailedEnum = 4
        }

        /// <summary>
        /// | Name      | Description | | - -- -- -- --:| - -- -- -- -- -- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully | 
        /// </summary>
        /// <value>| Name      | Description | | - -- -- -- --:| - -- -- -- -- -- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully | </value>
        [DataMember(Name="status", EmitDefaultValue=true)]
        public StatusEnum Status { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ApprovalRequest {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  AllReviews: ").Append(AllReviews).Append("\n");
            sb.Append("  AppliedByMemberID: ").Append(AppliedByMemberID).Append("\n");
            sb.Append("  AppliedDate: ").Append(AppliedDate).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  ExecutionDate: ").Append(ExecutionDate).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  NotifyMemberIds: ").Append(NotifyMemberIds).Append("\n");
            sb.Append("  OperatingOnId: ").Append(OperatingOnId).Append("\n");
            sb.Append("  RequestorId: ").Append(RequestorId).Append("\n");
            sb.Append("  ReviewStatus: ").Append(ReviewStatus).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ApprovalRequest)obj);
        }

        /// <summary>
        /// Returns true if ApprovalRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of ApprovalRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ApprovalRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    AllReviews == other.AllReviews ||
                    AllReviews != null &&
                    other.AllReviews != null &&
                    AllReviews.SequenceEqual(other.AllReviews)
                ) && 
                (
                    AppliedByMemberID == other.AppliedByMemberID ||
                    AppliedByMemberID != null &&
                    AppliedByMemberID.Equals(other.AppliedByMemberID)
                ) && 
                (
                    AppliedDate == other.AppliedDate ||
                    
                    AppliedDate.Equals(other.AppliedDate)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    ExecutionDate == other.ExecutionDate ||
                    
                    ExecutionDate.Equals(other.ExecutionDate)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    other.Instructions != null &&
                    Instructions.SequenceEqual(other.Instructions)
                ) && 
                (
                    NotifyMemberIds == other.NotifyMemberIds ||
                    NotifyMemberIds != null &&
                    other.NotifyMemberIds != null &&
                    NotifyMemberIds.SequenceEqual(other.NotifyMemberIds)
                ) && 
                (
                    OperatingOnId == other.OperatingOnId ||
                    OperatingOnId != null &&
                    OperatingOnId.Equals(other.OperatingOnId)
                ) && 
                (
                    RequestorId == other.RequestorId ||
                    RequestorId != null &&
                    RequestorId.Equals(other.RequestorId)
                ) && 
                (
                    ReviewStatus == other.ReviewStatus ||
                    
                    ReviewStatus.Equals(other.ReviewStatus)
                ) && 
                (
                    Status == other.Status ||
                    
                    Status.Equals(other.Status)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    if (AllReviews != null)
                    hashCode = hashCode * 59 + AllReviews.GetHashCode();
                    if (AppliedByMemberID != null)
                    hashCode = hashCode * 59 + AppliedByMemberID.GetHashCode();
                    
                    hashCode = hashCode * 59 + AppliedDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExecutionDate.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                    if (NotifyMemberIds != null)
                    hashCode = hashCode * 59 + NotifyMemberIds.GetHashCode();
                    if (OperatingOnId != null)
                    hashCode = hashCode * 59 + OperatingOnId.GetHashCode();
                    if (RequestorId != null)
                    hashCode = hashCode * 59 + RequestorId.GetHashCode();
                    
                    hashCode = hashCode * 59 + ReviewStatus.GetHashCode();
                    
                    hashCode = hashCode * 59 + Status.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ApprovalRequest left, ApprovalRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ApprovalRequest left, ApprovalRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
