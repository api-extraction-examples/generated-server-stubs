/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserTargetingExpirationResourceIdForFlag : IEquatable<UserTargetingExpirationResourceIdForFlag>
    {
        /// <summary>
        /// Gets or Sets EnvironmentKey
        /// </summary>
        [DataMember(Name="environmentKey", EmitDefaultValue=false)]
        public string EnvironmentKey { get; set; }

        /// <summary>
        /// Gets or Sets FlagKey
        /// </summary>
        [DataMember(Name="flagKey", EmitDefaultValue=false)]
        public string FlagKey { get; set; }

        /// <summary>
        /// Gets or Sets Key
        /// </summary>
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// Gets or Sets Kind
        /// </summary>
        [DataMember(Name="kind", EmitDefaultValue=false)]
        public string Kind { get; set; }

        /// <summary>
        /// Gets or Sets ProjectKey
        /// </summary>
        [DataMember(Name="projectKey", EmitDefaultValue=false)]
        public string ProjectKey { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTargetingExpirationResourceIdForFlag {\n");
            sb.Append("  EnvironmentKey: ").Append(EnvironmentKey).Append("\n");
            sb.Append("  FlagKey: ").Append(FlagKey).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  ProjectKey: ").Append(ProjectKey).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserTargetingExpirationResourceIdForFlag)obj);
        }

        /// <summary>
        /// Returns true if UserTargetingExpirationResourceIdForFlag instances are equal
        /// </summary>
        /// <param name="other">Instance of UserTargetingExpirationResourceIdForFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTargetingExpirationResourceIdForFlag other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnvironmentKey == other.EnvironmentKey ||
                    EnvironmentKey != null &&
                    EnvironmentKey.Equals(other.EnvironmentKey)
                ) && 
                (
                    FlagKey == other.FlagKey ||
                    FlagKey != null &&
                    FlagKey.Equals(other.FlagKey)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Kind == other.Kind ||
                    Kind != null &&
                    Kind.Equals(other.Kind)
                ) && 
                (
                    ProjectKey == other.ProjectKey ||
                    ProjectKey != null &&
                    ProjectKey.Equals(other.ProjectKey)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnvironmentKey != null)
                    hashCode = hashCode * 59 + EnvironmentKey.GetHashCode();
                    if (FlagKey != null)
                    hashCode = hashCode * 59 + FlagKey.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Kind != null)
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                    if (ProjectKey != null)
                    hashCode = hashCode * 59 + ProjectKey.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserTargetingExpirationResourceIdForFlag left, UserTargetingExpirationResourceIdForFlag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserTargetingExpirationResourceIdForFlag left, UserTargetingExpirationResourceIdForFlag right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
