/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FeatureFlagStatus : IEquatable<FeatureFlagStatus>
    {
        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public FeatureFlagStatusLinks Links { get; set; }

        /// <summary>
        /// Gets or Sets VarDefault
        /// </summary>
        [DataMember(Name="default", EmitDefaultValue=false)]
        public Object VarDefault { get; set; }

        /// <summary>
        /// Gets or Sets LastRequested
        /// </summary>
        /// <example>2016-08-16T21:10:11.886Z</example>
        [DataMember(Name="lastRequested", EmitDefaultValue=false)]
        public string LastRequested { get; set; }


        /// <summary>
        /// | Name     | Description | | - -- -- -- -:| - -- -- -- -- -- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days | 
        /// </summary>
        /// <value>| Name     | Description | | - -- -- -- -:| - -- -- -- -- -- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days | </value>
        [TypeConverter(typeof(CustomEnumConverter<NameEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum NameEnum
        {
            
            /// <summary>
            /// Enum NewEnum for new
            /// </summary>
            [EnumMember(Value = "new")]
            NewEnum = 1,
            
            /// <summary>
            /// Enum ActiveEnum for active
            /// </summary>
            [EnumMember(Value = "active")]
            ActiveEnum = 2,
            
            /// <summary>
            /// Enum InactiveEnum for inactive
            /// </summary>
            [EnumMember(Value = "inactive")]
            InactiveEnum = 3,
            
            /// <summary>
            /// Enum LaunchedEnum for launched
            /// </summary>
            [EnumMember(Value = "launched")]
            LaunchedEnum = 4
        }

        /// <summary>
        /// | Name     | Description | | - -- -- -- -:| - -- -- -- -- -- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn&#39;t been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days | 
        /// </summary>
        /// <value>| Name     | Description | | - -- -- -- -:| - -- -- -- -- -- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn&#39;t been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days | </value>
        [DataMember(Name="name", EmitDefaultValue=true)]
        public NameEnum Name { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlagStatus {\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  VarDefault: ").Append(VarDefault).Append("\n");
            sb.Append("  LastRequested: ").Append(LastRequested).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeatureFlagStatus)obj);
        }

        /// <summary>
        /// Returns true if FeatureFlagStatus instances are equal
        /// </summary>
        /// <param name="other">Instance of FeatureFlagStatus to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlagStatus other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    VarDefault == other.VarDefault ||
                    VarDefault != null &&
                    VarDefault.Equals(other.VarDefault)
                ) && 
                (
                    LastRequested == other.LastRequested ||
                    LastRequested != null &&
                    LastRequested.Equals(other.LastRequested)
                ) && 
                (
                    Name == other.Name ||
                    
                    Name.Equals(other.Name)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (VarDefault != null)
                    hashCode = hashCode * 59 + VarDefault.GetHashCode();
                    if (LastRequested != null)
                    hashCode = hashCode * 59 + LastRequested.GetHashCode();
                    
                    hashCode = hashCode * 59 + Name.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeatureFlagStatus left, FeatureFlagStatus right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeatureFlagStatus left, FeatureFlagStatus right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
