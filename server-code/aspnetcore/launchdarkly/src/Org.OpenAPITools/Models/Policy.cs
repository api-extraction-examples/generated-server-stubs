/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Policy : IEquatable<Policy>
    {
        /// <summary>
        /// Gets or Sets Actions
        /// </summary>
        [DataMember(Name="actions", EmitDefaultValue=false)]
        public List<string> Actions { get; set; }

        /// <summary>
        /// Effect of the policy - allow or deny.
        /// </summary>
        /// <value>Effect of the policy - allow or deny.</value>
        /// <example>deny</example>
        [DataMember(Name="effect", EmitDefaultValue=false)]
        public string Effect { get; set; }

        /// <summary>
        /// Targeted actions will be those actions NOT in this list. The \&quot;actions\&quot; field must be empty to use this field.
        /// </summary>
        /// <value>Targeted actions will be those actions NOT in this list. The \&quot;actions\&quot; field must be empty to use this field.</value>
        [DataMember(Name="notActions", EmitDefaultValue=false)]
        public List<string> NotActions { get; set; }

        /// <summary>
        /// Targeted resource will be those resources NOT in this list. The \&quot;resources&#x60;\&quot; field must be empty to use this field.
        /// </summary>
        /// <value>Targeted resource will be those resources NOT in this list. The \&quot;resources&#x60;\&quot; field must be empty to use this field.</value>
        [DataMember(Name="notResources", EmitDefaultValue=false)]
        public List<string> NotResources { get; set; }

        /// <summary>
        /// Gets or Sets Resources
        /// </summary>
        [DataMember(Name="resources", EmitDefaultValue=false)]
        public List<string> Resources { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Policy {\n");
            sb.Append("  Actions: ").Append(Actions).Append("\n");
            sb.Append("  Effect: ").Append(Effect).Append("\n");
            sb.Append("  NotActions: ").Append(NotActions).Append("\n");
            sb.Append("  NotResources: ").Append(NotResources).Append("\n");
            sb.Append("  Resources: ").Append(Resources).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Policy)obj);
        }

        /// <summary>
        /// Returns true if Policy instances are equal
        /// </summary>
        /// <param name="other">Instance of Policy to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Policy other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Actions == other.Actions ||
                    Actions != null &&
                    other.Actions != null &&
                    Actions.SequenceEqual(other.Actions)
                ) && 
                (
                    Effect == other.Effect ||
                    Effect != null &&
                    Effect.Equals(other.Effect)
                ) && 
                (
                    NotActions == other.NotActions ||
                    NotActions != null &&
                    other.NotActions != null &&
                    NotActions.SequenceEqual(other.NotActions)
                ) && 
                (
                    NotResources == other.NotResources ||
                    NotResources != null &&
                    other.NotResources != null &&
                    NotResources.SequenceEqual(other.NotResources)
                ) && 
                (
                    Resources == other.Resources ||
                    Resources != null &&
                    other.Resources != null &&
                    Resources.SequenceEqual(other.Resources)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Actions != null)
                    hashCode = hashCode * 59 + Actions.GetHashCode();
                    if (Effect != null)
                    hashCode = hashCode * 59 + Effect.GetHashCode();
                    if (NotActions != null)
                    hashCode = hashCode * 59 + NotActions.GetHashCode();
                    if (NotResources != null)
                    hashCode = hashCode * 59 + NotResources.GetHashCode();
                    if (Resources != null)
                    hashCode = hashCode * 59 + Resources.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Policy left, Policy right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Policy left, Policy right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
