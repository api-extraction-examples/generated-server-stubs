/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserTargetingExpirationForFlag : IEquatable<UserTargetingExpirationForFlag>
    {
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Gets or Sets ResourceId
        /// </summary>
        [DataMember(Name="_resourceId", EmitDefaultValue=false)]
        public UserTargetingExpirationResourceIdForFlag ResourceId { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        [DataMember(Name="_version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Unix epoch time in milliseconds specifying the expiration date
        /// </summary>
        /// <value>Unix epoch time in milliseconds specifying the expiration date</value>
        /// <example>1735689600000</example>
        [DataMember(Name="expirationDate", EmitDefaultValue=true)]
        public long ExpirationDate { get; set; }

        /// <summary>
        /// Unique identifier for the user
        /// </summary>
        /// <value>Unique identifier for the user</value>
        [DataMember(Name="userKey", EmitDefaultValue=false)]
        public string UserKey { get; set; }

        /// <summary>
        /// the ID of the variation that the user is targeted on a flag
        /// </summary>
        /// <value>the ID of the variation that the user is targeted on a flag</value>
        [DataMember(Name="variationId", EmitDefaultValue=false)]
        public string VariationId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserTargetingExpirationForFlag {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  ResourceId: ").Append(ResourceId).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  ExpirationDate: ").Append(ExpirationDate).Append("\n");
            sb.Append("  UserKey: ").Append(UserKey).Append("\n");
            sb.Append("  VariationId: ").Append(VariationId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserTargetingExpirationForFlag)obj);
        }

        /// <summary>
        /// Returns true if UserTargetingExpirationForFlag instances are equal
        /// </summary>
        /// <param name="other">Instance of UserTargetingExpirationForFlag to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserTargetingExpirationForFlag other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    ResourceId == other.ResourceId ||
                    ResourceId != null &&
                    ResourceId.Equals(other.ResourceId)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                ) && 
                (
                    ExpirationDate == other.ExpirationDate ||
                    
                    ExpirationDate.Equals(other.ExpirationDate)
                ) && 
                (
                    UserKey == other.UserKey ||
                    UserKey != null &&
                    UserKey.Equals(other.UserKey)
                ) && 
                (
                    VariationId == other.VariationId ||
                    VariationId != null &&
                    VariationId.Equals(other.VariationId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (ResourceId != null)
                    hashCode = hashCode * 59 + ResourceId.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExpirationDate.GetHashCode();
                    if (UserKey != null)
                    hashCode = hashCode * 59 + UserKey.GetHashCode();
                    if (VariationId != null)
                    hashCode = hashCode * 59 + VariationId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserTargetingExpirationForFlag left, UserTargetingExpirationForFlag right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserTargetingExpirationForFlag left, UserTargetingExpirationForFlag right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
