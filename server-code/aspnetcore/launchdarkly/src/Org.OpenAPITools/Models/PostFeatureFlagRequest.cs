/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PostFeatureFlagRequest : IEquatable<PostFeatureFlagRequest>
    {
        /// <summary>
        /// Gets or Sets ClientSideAvailability
        /// </summary>
        [DataMember(Name="clientSideAvailability", EmitDefaultValue=false)]
        public ClientSideAvailability ClientSideAvailability { get; set; }

        /// <summary>
        /// Gets or Sets Defaults
        /// </summary>
        [DataMember(Name="defaults", EmitDefaultValue=false)]
        public Defaults Defaults { get; set; }

        /// <summary>
        /// A description of the feature flag.
        /// </summary>
        /// <value>A description of the feature flag.</value>
        /// <example>This flag controls whether test feature is turned on or not.</example>
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Whether or not this flag should be made available to the client-side JavaScript SDK.
        /// </summary>
        /// <value>Whether or not this flag should be made available to the client-side JavaScript SDK.</value>
        [DataMember(Name="includeInSnippet", EmitDefaultValue=true)]
        public bool IncludeInSnippet { get; set; }

        /// <summary>
        /// A unique key that will be used to reference the flag in your code.
        /// </summary>
        /// <value>A unique key that will be used to reference the flag in your code.</value>
        /// <example>new-test-flag</example>
        [Required]
        [DataMember(Name="key", EmitDefaultValue=false)]
        public string Key { get; set; }

        /// <summary>
        /// A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
        /// </summary>
        /// <value>A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.</value>
        /// <example>new test flag</example>
        [Required]
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Tags for the feature flag.
        /// </summary>
        /// <value>Tags for the feature flag.</value>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<string> Tags { get; set; }

        /// <summary>
        /// Whether or not the flag is a temporary flag.
        /// </summary>
        /// <value>Whether or not the flag is a temporary flag.</value>
        [DataMember(Name="temporary", EmitDefaultValue=true)]
        public bool Temporary { get; set; }

        /// <summary>
        /// An array of possible variations for the flag.
        /// </summary>
        /// <value>An array of possible variations for the flag.</value>
        [Required]
        [DataMember(Name="variations", EmitDefaultValue=false)]
        public List<Variation> Variations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostFeatureFlagRequest {\n");
            sb.Append("  ClientSideAvailability: ").Append(ClientSideAvailability).Append("\n");
            sb.Append("  Defaults: ").Append(Defaults).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  IncludeInSnippet: ").Append(IncludeInSnippet).Append("\n");
            sb.Append("  Key: ").Append(Key).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Temporary: ").Append(Temporary).Append("\n");
            sb.Append("  Variations: ").Append(Variations).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostFeatureFlagRequest)obj);
        }

        /// <summary>
        /// Returns true if PostFeatureFlagRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PostFeatureFlagRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostFeatureFlagRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ClientSideAvailability == other.ClientSideAvailability ||
                    ClientSideAvailability != null &&
                    ClientSideAvailability.Equals(other.ClientSideAvailability)
                ) && 
                (
                    Defaults == other.Defaults ||
                    Defaults != null &&
                    Defaults.Equals(other.Defaults)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    IncludeInSnippet == other.IncludeInSnippet ||
                    
                    IncludeInSnippet.Equals(other.IncludeInSnippet)
                ) && 
                (
                    Key == other.Key ||
                    Key != null &&
                    Key.Equals(other.Key)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    other.Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Temporary == other.Temporary ||
                    
                    Temporary.Equals(other.Temporary)
                ) && 
                (
                    Variations == other.Variations ||
                    Variations != null &&
                    other.Variations != null &&
                    Variations.SequenceEqual(other.Variations)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ClientSideAvailability != null)
                    hashCode = hashCode * 59 + ClientSideAvailability.GetHashCode();
                    if (Defaults != null)
                    hashCode = hashCode * 59 + Defaults.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + IncludeInSnippet.GetHashCode();
                    if (Key != null)
                    hashCode = hashCode * 59 + Key.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    
                    hashCode = hashCode * 59 + Temporary.GetHashCode();
                    if (Variations != null)
                    hashCode = hashCode * 59 + Variations.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostFeatureFlagRequest left, PostFeatureFlagRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostFeatureFlagRequest left, PostFeatureFlagRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
