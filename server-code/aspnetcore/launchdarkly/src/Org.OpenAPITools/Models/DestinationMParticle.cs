/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DestinationMParticle : IEquatable<DestinationMParticle>
    {
        /// <summary>
        /// Gets or Sets ApiKey
        /// </summary>
        /// <example>apiKeyfromMParticle</example>
        [DataMember(Name="apiKey", EmitDefaultValue=false)]
        public string ApiKey { get; set; }

        /// <summary>
        /// Gets or Sets VarEnvironment
        /// </summary>
        /// <example>production</example>
        [DataMember(Name="environment", EmitDefaultValue=false)]
        public string VarEnvironment { get; set; }

        /// <summary>
        /// Gets or Sets Secret
        /// </summary>
        /// <example>mParticleSecret</example>
        [DataMember(Name="secret", EmitDefaultValue=false)]
        public string Secret { get; set; }

        /// <summary>
        /// Gets or Sets UserIdentity
        /// </summary>
        /// <example>customer_id</example>
        [DataMember(Name="userIdentity", EmitDefaultValue=false)]
        public string UserIdentity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DestinationMParticle {\n");
            sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
            sb.Append("  VarEnvironment: ").Append(VarEnvironment).Append("\n");
            sb.Append("  Secret: ").Append(Secret).Append("\n");
            sb.Append("  UserIdentity: ").Append(UserIdentity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((DestinationMParticle)obj);
        }

        /// <summary>
        /// Returns true if DestinationMParticle instances are equal
        /// </summary>
        /// <param name="other">Instance of DestinationMParticle to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DestinationMParticle other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    ApiKey == other.ApiKey ||
                    ApiKey != null &&
                    ApiKey.Equals(other.ApiKey)
                ) && 
                (
                    VarEnvironment == other.VarEnvironment ||
                    VarEnvironment != null &&
                    VarEnvironment.Equals(other.VarEnvironment)
                ) && 
                (
                    Secret == other.Secret ||
                    Secret != null &&
                    Secret.Equals(other.Secret)
                ) && 
                (
                    UserIdentity == other.UserIdentity ||
                    UserIdentity != null &&
                    UserIdentity.Equals(other.UserIdentity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (ApiKey != null)
                    hashCode = hashCode * 59 + ApiKey.GetHashCode();
                    if (VarEnvironment != null)
                    hashCode = hashCode * 59 + VarEnvironment.GetHashCode();
                    if (Secret != null)
                    hashCode = hashCode * 59 + Secret.GetHashCode();
                    if (UserIdentity != null)
                    hashCode = hashCode * 59 + UserIdentity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(DestinationMParticle left, DestinationMParticle right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(DestinationMParticle left, DestinationMParticle right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
