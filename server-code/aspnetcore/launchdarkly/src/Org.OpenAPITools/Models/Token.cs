/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Token : IEquatable<Token>
    {
        /// <summary>
        /// The unique resource id.
        /// </summary>
        /// <value>The unique resource id.</value>
        /// <example>5a580a01b4ff89217bdf9dc1</example>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// Gets or Sets Member
        /// </summary>
        [DataMember(Name="_member", EmitDefaultValue=false)]
        public Member Member { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the creation time of this access token.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the creation time of this access token.</value>
        /// <example>1443652232590</example>
        [DataMember(Name="creationDate", EmitDefaultValue=true)]
        public long CreationDate { get; set; }

        /// <summary>
        /// A list of custom role IDs to use as access limits for the access token
        /// </summary>
        /// <value>A list of custom role IDs to use as access limits for the access token</value>
        [DataMember(Name="customRoleIds", EmitDefaultValue=false)]
        public List<string> CustomRoleIds { get; set; }

        /// <summary>
        /// The default API version for this token
        /// </summary>
        /// <value>The default API version for this token</value>
        [DataMember(Name="defaultApiVersion", EmitDefaultValue=true)]
        public int DefaultApiVersion { get; set; }

        /// <summary>
        /// Gets or Sets InlineRole
        /// </summary>
        [DataMember(Name="inlineRole", EmitDefaultValue=false)]
        public List<Statement> InlineRole { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the last time this access token was modified.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the last time this access token was modified.</value>
        /// <example>1469326565348</example>
        [DataMember(Name="lastModified", EmitDefaultValue=true)]
        public long LastModified { get; set; }

        /// <summary>
        /// A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.
        /// </summary>
        /// <value>A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.</value>
        /// <example>1469326565348</example>
        [DataMember(Name="lastUsed", EmitDefaultValue=true)]
        public long LastUsed { get; set; }

        /// <summary>
        /// The unique resource id.
        /// </summary>
        /// <value>The unique resource id.</value>
        /// <example>5a580a01b4ff89217bdf9dc1</example>
        [DataMember(Name="memberId", EmitDefaultValue=false)]
        public string MemberId { get; set; }

        /// <summary>
        /// A human-friendly name for the access token
        /// </summary>
        /// <value>A human-friendly name for the access token</value>
        /// <example>My access token</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// The unique resource id.
        /// </summary>
        /// <value>The unique resource id.</value>
        /// <example>5a580a01b4ff89217bdf9dc1</example>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// The name of a built-in role for the token
        /// </summary>
        /// <value>The name of a built-in role for the token</value>
        /// <example>writer</example>
        [DataMember(Name="role", EmitDefaultValue=false)]
        public string Role { get; set; }

        /// <summary>
        /// Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
        /// </summary>
        /// <value>Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens</value>
        [DataMember(Name="serviceToken", EmitDefaultValue=true)]
        public bool ServiceToken { get; set; }

        /// <summary>
        /// The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.
        /// </summary>
        /// <value>The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.</value>
        /// <example>3243</example>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string VarToken { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Token {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Member: ").Append(Member).Append("\n");
            sb.Append("  CreationDate: ").Append(CreationDate).Append("\n");
            sb.Append("  CustomRoleIds: ").Append(CustomRoleIds).Append("\n");
            sb.Append("  DefaultApiVersion: ").Append(DefaultApiVersion).Append("\n");
            sb.Append("  InlineRole: ").Append(InlineRole).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  LastUsed: ").Append(LastUsed).Append("\n");
            sb.Append("  MemberId: ").Append(MemberId).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  Role: ").Append(Role).Append("\n");
            sb.Append("  ServiceToken: ").Append(ServiceToken).Append("\n");
            sb.Append("  VarToken: ").Append(VarToken).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Token)obj);
        }

        /// <summary>
        /// Returns true if Token instances are equal
        /// </summary>
        /// <param name="other">Instance of Token to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Token other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Member == other.Member ||
                    Member != null &&
                    Member.Equals(other.Member)
                ) && 
                (
                    CreationDate == other.CreationDate ||
                    
                    CreationDate.Equals(other.CreationDate)
                ) && 
                (
                    CustomRoleIds == other.CustomRoleIds ||
                    CustomRoleIds != null &&
                    other.CustomRoleIds != null &&
                    CustomRoleIds.SequenceEqual(other.CustomRoleIds)
                ) && 
                (
                    DefaultApiVersion == other.DefaultApiVersion ||
                    
                    DefaultApiVersion.Equals(other.DefaultApiVersion)
                ) && 
                (
                    InlineRole == other.InlineRole ||
                    InlineRole != null &&
                    other.InlineRole != null &&
                    InlineRole.SequenceEqual(other.InlineRole)
                ) && 
                (
                    LastModified == other.LastModified ||
                    
                    LastModified.Equals(other.LastModified)
                ) && 
                (
                    LastUsed == other.LastUsed ||
                    
                    LastUsed.Equals(other.LastUsed)
                ) && 
                (
                    MemberId == other.MemberId ||
                    MemberId != null &&
                    MemberId.Equals(other.MemberId)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    Role == other.Role ||
                    Role != null &&
                    Role.Equals(other.Role)
                ) && 
                (
                    ServiceToken == other.ServiceToken ||
                    
                    ServiceToken.Equals(other.ServiceToken)
                ) && 
                (
                    VarToken == other.VarToken ||
                    VarToken != null &&
                    VarToken.Equals(other.VarToken)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Member != null)
                    hashCode = hashCode * 59 + Member.GetHashCode();
                    
                    hashCode = hashCode * 59 + CreationDate.GetHashCode();
                    if (CustomRoleIds != null)
                    hashCode = hashCode * 59 + CustomRoleIds.GetHashCode();
                    
                    hashCode = hashCode * 59 + DefaultApiVersion.GetHashCode();
                    if (InlineRole != null)
                    hashCode = hashCode * 59 + InlineRole.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastModified.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastUsed.GetHashCode();
                    if (MemberId != null)
                    hashCode = hashCode * 59 + MemberId.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (Role != null)
                    hashCode = hashCode * 59 + Role.GetHashCode();
                    
                    hashCode = hashCode * 59 + ServiceToken.GetHashCode();
                    if (VarToken != null)
                    hashCode = hashCode * 59 + VarToken.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Token left, Token right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Token left, Token right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
