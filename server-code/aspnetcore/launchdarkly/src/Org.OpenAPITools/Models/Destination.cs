/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Destination : IEquatable<Destination>
    {
        /// <summary>
        /// Unique destination ID.
        /// </summary>
        /// <value>Unique destination ID.</value>
        /// <example>37ed9aad-de0a-4665-932e-41c35587aeea</example>
        [DataMember(Name="_id", EmitDefaultValue=false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Links
        /// </summary>
        [DataMember(Name="_links", EmitDefaultValue=false)]
        public Links Links { get; set; }

        /// <summary>
        /// destination-specific configuration.
        /// </summary>
        /// <value>destination-specific configuration.</value>
        /// <example>{&quot;project&quot;:&quot;cool-project&quot;,&quot;topic&quot;:&quot;test&quot;}</example>
        [DataMember(Name="config", EmitDefaultValue=false)]
        public Object Config { get; set; }


        /// <summary>
        /// Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")
        /// </summary>
        /// <value>Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")</value>
        [TypeConverter(typeof(CustomEnumConverter<KindEnum>))]
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum KindEnum
        {
            
            /// <summary>
            /// Enum GooglePubsubEnum for google-pubsub
            /// </summary>
            [EnumMember(Value = "google-pubsub")]
            GooglePubsubEnum = 1,
            
            /// <summary>
            /// Enum KinesisEnum for kinesis
            /// </summary>
            [EnumMember(Value = "kinesis")]
            KinesisEnum = 2,
            
            /// <summary>
            /// Enum MparticleEnum for mparticle
            /// </summary>
            [EnumMember(Value = "mparticle")]
            MparticleEnum = 3,
            
            /// <summary>
            /// Enum SegmentEnum for segment
            /// </summary>
            [EnumMember(Value = "segment")]
            SegmentEnum = 4
        }

        /// <summary>
        /// Destination type (\&quot;google-pubsub\&quot;, \&quot;kinesis\&quot;, \&quot;mparticle\&quot;, or \&quot;segment\&quot;)
        /// </summary>
        /// <value>Destination type (\&quot;google-pubsub\&quot;, \&quot;kinesis\&quot;, \&quot;mparticle\&quot;, or \&quot;segment\&quot;)</value>
        /// <example>google-pubsub</example>
        [DataMember(Name="kind", EmitDefaultValue=true)]
        public KindEnum Kind { get; set; }

        /// <summary>
        /// The destination name
        /// </summary>
        /// <value>The destination name</value>
        /// <example>Example Google Pub/Sub Destination</example>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Whether the data export destination is on or not.
        /// </summary>
        /// <value>Whether the data export destination is on or not.</value>
        /// <example>true</example>
        [DataMember(Name="true", EmitDefaultValue=true)]
        public bool VarTrue { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /// <example>2</example>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Destination {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Links: ").Append(Links).Append("\n");
            sb.Append("  Config: ").Append(Config).Append("\n");
            sb.Append("  Kind: ").Append(Kind).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  VarTrue: ").Append(VarTrue).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Destination)obj);
        }

        /// <summary>
        /// Returns true if Destination instances are equal
        /// </summary>
        /// <param name="other">Instance of Destination to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Destination other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Links == other.Links ||
                    Links != null &&
                    Links.Equals(other.Links)
                ) && 
                (
                    Config == other.Config ||
                    Config != null &&
                    Config.Equals(other.Config)
                ) && 
                (
                    Kind == other.Kind ||
                    
                    Kind.Equals(other.Kind)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    VarTrue == other.VarTrue ||
                    
                    VarTrue.Equals(other.VarTrue)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Links != null)
                    hashCode = hashCode * 59 + Links.GetHashCode();
                    if (Config != null)
                    hashCode = hashCode * 59 + Config.GetHashCode();
                    
                    hashCode = hashCode * 59 + Kind.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarTrue.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Destination left, Destination right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Destination left, Destination right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
