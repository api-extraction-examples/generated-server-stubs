/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class PostApprovalRequestRequest : IEquatable<PostApprovalRequestRequest>
    {
        /// <summary>
        /// comment will be included in audit log item for change.
        /// </summary>
        /// <value>comment will be included in audit log item for change.</value>
        [DataMember(Name="comment", EmitDefaultValue=false)]
        public string Comment { get; set; }

        /// <summary>
        /// A name that describes the changes you would like to apply to a feature flag configuration
        /// </summary>
        /// <value>A name that describes the changes you would like to apply to a feature flag configuration</value>
        [Required]
        [DataMember(Name="description", EmitDefaultValue=false)]
        public string Description { get; set; }

        /// <summary>
        /// Timestamp for when instructions will be executed
        /// </summary>
        /// <value>Timestamp for when instructions will be executed</value>
        [DataMember(Name="executionDate", EmitDefaultValue=true)]
        public long ExecutionDate { get; set; }

        /// <summary>
        /// Gets or Sets Instructions
        /// </summary>
        [Required]
        [DataMember(Name="instructions", EmitDefaultValue=false)]
        public List<SemanticPatchInstructionInner> Instructions { get; set; }

        /// <summary>
        /// Gets or Sets NotifyMemberIds
        /// </summary>
        /// <example>[memberId, memberId2]</example>
        [Required]
        [DataMember(Name="notifyMemberIds", EmitDefaultValue=false)]
        public List<string> NotifyMemberIds { get; set; }

        /// <summary>
        /// ID of scheduled change to edit or delete
        /// </summary>
        /// <value>ID of scheduled change to edit or delete</value>
        [DataMember(Name="operatingOnId", EmitDefaultValue=false)]
        public string OperatingOnId { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class PostApprovalRequestRequest {\n");
            sb.Append("  Comment: ").Append(Comment).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  ExecutionDate: ").Append(ExecutionDate).Append("\n");
            sb.Append("  Instructions: ").Append(Instructions).Append("\n");
            sb.Append("  NotifyMemberIds: ").Append(NotifyMemberIds).Append("\n");
            sb.Append("  OperatingOnId: ").Append(OperatingOnId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((PostApprovalRequestRequest)obj);
        }

        /// <summary>
        /// Returns true if PostApprovalRequestRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of PostApprovalRequestRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(PostApprovalRequestRequest other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Comment == other.Comment ||
                    Comment != null &&
                    Comment.Equals(other.Comment)
                ) && 
                (
                    Description == other.Description ||
                    Description != null &&
                    Description.Equals(other.Description)
                ) && 
                (
                    ExecutionDate == other.ExecutionDate ||
                    
                    ExecutionDate.Equals(other.ExecutionDate)
                ) && 
                (
                    Instructions == other.Instructions ||
                    Instructions != null &&
                    other.Instructions != null &&
                    Instructions.SequenceEqual(other.Instructions)
                ) && 
                (
                    NotifyMemberIds == other.NotifyMemberIds ||
                    NotifyMemberIds != null &&
                    other.NotifyMemberIds != null &&
                    NotifyMemberIds.SequenceEqual(other.NotifyMemberIds)
                ) && 
                (
                    OperatingOnId == other.OperatingOnId ||
                    OperatingOnId != null &&
                    OperatingOnId.Equals(other.OperatingOnId)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Comment != null)
                    hashCode = hashCode * 59 + Comment.GetHashCode();
                    if (Description != null)
                    hashCode = hashCode * 59 + Description.GetHashCode();
                    
                    hashCode = hashCode * 59 + ExecutionDate.GetHashCode();
                    if (Instructions != null)
                    hashCode = hashCode * 59 + Instructions.GetHashCode();
                    if (NotifyMemberIds != null)
                    hashCode = hashCode * 59 + NotifyMemberIds.GetHashCode();
                    if (OperatingOnId != null)
                    hashCode = hashCode * 59 + OperatingOnId.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(PostApprovalRequestRequest left, PostApprovalRequestRequest right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(PostApprovalRequestRequest left, PostApprovalRequestRequest right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
