/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class UserRecord : IEquatable<UserRecord>
    {
        /// <summary>
        /// Gets or Sets Avatar
        /// </summary>
        /// <example>https://s3.amazonaws.com/uifaces/faces/twitter/shylockjoy/73.jpg</example>
        [DataMember(Name="avatar", EmitDefaultValue=false)]
        public string Avatar { get; set; }

        /// <summary>
        /// Gets or Sets EnvironmentId
        /// </summary>
        /// <example>54ac2d97de674204ddd61096</example>
        [DataMember(Name="environmentId", EmitDefaultValue=false)]
        public string EnvironmentId { get; set; }

        /// <summary>
        /// Gets or Sets LastPing
        /// </summary>
        /// <example>2015-03-03T02:37:22.492Z</example>
        [DataMember(Name="lastPing", EmitDefaultValue=false)]
        public string LastPing { get; set; }

        /// <summary>
        /// The unique resource id.
        /// </summary>
        /// <value>The unique resource id.</value>
        /// <example>5a580a01b4ff89217bdf9dc1</example>
        [DataMember(Name="ownerId", EmitDefaultValue=false)]
        public string OwnerId { get; set; }

        /// <summary>
        /// Gets or Sets User
        /// </summary>
        [DataMember(Name="user", EmitDefaultValue=false)]
        public User User { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class UserRecord {\n");
            sb.Append("  Avatar: ").Append(Avatar).Append("\n");
            sb.Append("  EnvironmentId: ").Append(EnvironmentId).Append("\n");
            sb.Append("  LastPing: ").Append(LastPing).Append("\n");
            sb.Append("  OwnerId: ").Append(OwnerId).Append("\n");
            sb.Append("  User: ").Append(User).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((UserRecord)obj);
        }

        /// <summary>
        /// Returns true if UserRecord instances are equal
        /// </summary>
        /// <param name="other">Instance of UserRecord to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(UserRecord other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Avatar == other.Avatar ||
                    Avatar != null &&
                    Avatar.Equals(other.Avatar)
                ) && 
                (
                    EnvironmentId == other.EnvironmentId ||
                    EnvironmentId != null &&
                    EnvironmentId.Equals(other.EnvironmentId)
                ) && 
                (
                    LastPing == other.LastPing ||
                    LastPing != null &&
                    LastPing.Equals(other.LastPing)
                ) && 
                (
                    OwnerId == other.OwnerId ||
                    OwnerId != null &&
                    OwnerId.Equals(other.OwnerId)
                ) && 
                (
                    User == other.User ||
                    User != null &&
                    User.Equals(other.User)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Avatar != null)
                    hashCode = hashCode * 59 + Avatar.GetHashCode();
                    if (EnvironmentId != null)
                    hashCode = hashCode * 59 + EnvironmentId.GetHashCode();
                    if (LastPing != null)
                    hashCode = hashCode * 59 + LastPing.GetHashCode();
                    if (OwnerId != null)
                    hashCode = hashCode * 59 + OwnerId.GetHashCode();
                    if (User != null)
                    hashCode = hashCode * 59 + User.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(UserRecord left, UserRecord right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(UserRecord left, UserRecord right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
