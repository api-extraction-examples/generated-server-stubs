/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * The version of the OpenAPI document: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.ComponentModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Org.OpenAPITools.Converters;

namespace Org.OpenAPITools.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class FeatureFlagConfig : IEquatable<FeatureFlagConfig>
    {
        /// <summary>
        /// Gets or Sets EnvironmentName
        /// </summary>
        [DataMember(Name="_environmentName", EmitDefaultValue=false)]
        public string EnvironmentName { get; set; }

        /// <summary>
        /// Gets or Sets Site
        /// </summary>
        [DataMember(Name="_site", EmitDefaultValue=false)]
        public Site Site { get; set; }

        /// <summary>
        /// Gets or Sets Archived
        /// </summary>
        [DataMember(Name="archived", EmitDefaultValue=true)]
        public bool Archived { get; set; }

        /// <summary>
        /// Gets or Sets Fallthrough
        /// </summary>
        [DataMember(Name="fallthrough", EmitDefaultValue=false)]
        public Fallthrough Fallthrough { get; set; }

        /// <summary>
        /// Gets or Sets LastModified
        /// </summary>
        /// <example>1469326565348</example>
        [DataMember(Name="lastModified", EmitDefaultValue=true)]
        public long LastModified { get; set; }

        /// <summary>
        /// Gets or Sets OffVariation
        /// </summary>
        [DataMember(Name="offVariation", EmitDefaultValue=true)]
        public int OffVariation { get; set; }

        /// <summary>
        /// Gets or Sets VarTrue
        /// </summary>
        [DataMember(Name="true", EmitDefaultValue=true)]
        public bool VarTrue { get; set; }

        /// <summary>
        /// Gets or Sets Prerequisites
        /// </summary>
        [DataMember(Name="prerequisites", EmitDefaultValue=false)]
        public List<Prerequisite> Prerequisites { get; set; }

        /// <summary>
        /// Gets or Sets Rules
        /// </summary>
        [DataMember(Name="rules", EmitDefaultValue=false)]
        public List<Rule> Rules { get; set; }

        /// <summary>
        /// Gets or Sets Salt
        /// </summary>
        /// <example>YWx0ZXJuYXRlLnBhZ2U&#x3D;</example>
        [DataMember(Name="salt", EmitDefaultValue=false)]
        public string Salt { get; set; }

        /// <summary>
        /// Gets or Sets Sel
        /// </summary>
        /// <example>45501b9314dc4641841af774cb038b96</example>
        [DataMember(Name="sel", EmitDefaultValue=false)]
        public string Sel { get; set; }

        /// <summary>
        /// Gets or Sets Targets
        /// </summary>
        [DataMember(Name="targets", EmitDefaultValue=false)]
        public List<Target> Targets { get; set; }

        /// <summary>
        /// Set to true to send detailed event information for this flag.
        /// </summary>
        /// <value>Set to true to send detailed event information for this flag.</value>
        /// <example>false</example>
        [DataMember(Name="trackEvents", EmitDefaultValue=true)]
        public bool TrackEvents { get; set; }

        /// <summary>
        /// Set to true to send detailed event information when targeting is enabled but no individual targeting rule is matched.
        /// </summary>
        /// <value>Set to true to send detailed event information when targeting is enabled but no individual targeting rule is matched.</value>
        /// <example>true</example>
        [DataMember(Name="trackEventsFallthrough", EmitDefaultValue=true)]
        public bool TrackEventsFallthrough { get; set; }

        /// <summary>
        /// Gets or Sets VarVersion
        /// </summary>
        /// <example>65</example>
        [DataMember(Name="version", EmitDefaultValue=true)]
        public int VarVersion { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FeatureFlagConfig {\n");
            sb.Append("  EnvironmentName: ").Append(EnvironmentName).Append("\n");
            sb.Append("  Site: ").Append(Site).Append("\n");
            sb.Append("  Archived: ").Append(Archived).Append("\n");
            sb.Append("  Fallthrough: ").Append(Fallthrough).Append("\n");
            sb.Append("  LastModified: ").Append(LastModified).Append("\n");
            sb.Append("  OffVariation: ").Append(OffVariation).Append("\n");
            sb.Append("  VarTrue: ").Append(VarTrue).Append("\n");
            sb.Append("  Prerequisites: ").Append(Prerequisites).Append("\n");
            sb.Append("  Rules: ").Append(Rules).Append("\n");
            sb.Append("  Salt: ").Append(Salt).Append("\n");
            sb.Append("  Sel: ").Append(Sel).Append("\n");
            sb.Append("  Targets: ").Append(Targets).Append("\n");
            sb.Append("  TrackEvents: ").Append(TrackEvents).Append("\n");
            sb.Append("  TrackEventsFallthrough: ").Append(TrackEventsFallthrough).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (obj is null) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((FeatureFlagConfig)obj);
        }

        /// <summary>
        /// Returns true if FeatureFlagConfig instances are equal
        /// </summary>
        /// <param name="other">Instance of FeatureFlagConfig to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FeatureFlagConfig other)
        {
            if (other is null) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    EnvironmentName == other.EnvironmentName ||
                    EnvironmentName != null &&
                    EnvironmentName.Equals(other.EnvironmentName)
                ) && 
                (
                    Site == other.Site ||
                    Site != null &&
                    Site.Equals(other.Site)
                ) && 
                (
                    Archived == other.Archived ||
                    
                    Archived.Equals(other.Archived)
                ) && 
                (
                    Fallthrough == other.Fallthrough ||
                    Fallthrough != null &&
                    Fallthrough.Equals(other.Fallthrough)
                ) && 
                (
                    LastModified == other.LastModified ||
                    
                    LastModified.Equals(other.LastModified)
                ) && 
                (
                    OffVariation == other.OffVariation ||
                    
                    OffVariation.Equals(other.OffVariation)
                ) && 
                (
                    VarTrue == other.VarTrue ||
                    
                    VarTrue.Equals(other.VarTrue)
                ) && 
                (
                    Prerequisites == other.Prerequisites ||
                    Prerequisites != null &&
                    other.Prerequisites != null &&
                    Prerequisites.SequenceEqual(other.Prerequisites)
                ) && 
                (
                    Rules == other.Rules ||
                    Rules != null &&
                    other.Rules != null &&
                    Rules.SequenceEqual(other.Rules)
                ) && 
                (
                    Salt == other.Salt ||
                    Salt != null &&
                    Salt.Equals(other.Salt)
                ) && 
                (
                    Sel == other.Sel ||
                    Sel != null &&
                    Sel.Equals(other.Sel)
                ) && 
                (
                    Targets == other.Targets ||
                    Targets != null &&
                    other.Targets != null &&
                    Targets.SequenceEqual(other.Targets)
                ) && 
                (
                    TrackEvents == other.TrackEvents ||
                    
                    TrackEvents.Equals(other.TrackEvents)
                ) && 
                (
                    TrackEventsFallthrough == other.TrackEventsFallthrough ||
                    
                    TrackEventsFallthrough.Equals(other.TrackEventsFallthrough)
                ) && 
                (
                    VarVersion == other.VarVersion ||
                    
                    VarVersion.Equals(other.VarVersion)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (EnvironmentName != null)
                    hashCode = hashCode * 59 + EnvironmentName.GetHashCode();
                    if (Site != null)
                    hashCode = hashCode * 59 + Site.GetHashCode();
                    
                    hashCode = hashCode * 59 + Archived.GetHashCode();
                    if (Fallthrough != null)
                    hashCode = hashCode * 59 + Fallthrough.GetHashCode();
                    
                    hashCode = hashCode * 59 + LastModified.GetHashCode();
                    
                    hashCode = hashCode * 59 + OffVariation.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarTrue.GetHashCode();
                    if (Prerequisites != null)
                    hashCode = hashCode * 59 + Prerequisites.GetHashCode();
                    if (Rules != null)
                    hashCode = hashCode * 59 + Rules.GetHashCode();
                    if (Salt != null)
                    hashCode = hashCode * 59 + Salt.GetHashCode();
                    if (Sel != null)
                    hashCode = hashCode * 59 + Sel.GetHashCode();
                    if (Targets != null)
                    hashCode = hashCode * 59 + Targets.GetHashCode();
                    
                    hashCode = hashCode * 59 + TrackEvents.GetHashCode();
                    
                    hashCode = hashCode * 59 + TrackEventsFallthrough.GetHashCode();
                    
                    hashCode = hashCode * 59 + VarVersion.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(FeatureFlagConfig left, FeatureFlagConfig right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(FeatureFlagConfig left, FeatureFlagConfig right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
