/*
 * Datasette API
 *
 * Execute SQL queries against a Datasette database and return the results as JSON
 *
 * The version of the OpenAPI document: v1
 * 
 * Generated by: https://openapi-generator.tech
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.Mvc;
using Microsoft.AspNetCore.Http;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using Org.OpenAPITools.Attributes;
using Org.OpenAPITools.Models;

namespace Org.OpenAPITools.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Execute a SQLite SQL query against the content database
        /// </summary>
        /// <remarks>Accepts SQLite SQL query, returns JSON. Does not allow PRAGMA statements.</remarks>
        /// <param name="sql">The SQL query to be executed</param>
        /// <param name="shape">The shape of the response data. Must be \&quot;array\&quot;</param>
        /// <response code="200">Successful SQL results</response>
        /// <response code="400">Bad request</response>
        /// <response code="500">Internal server error</response>
        [HttpGet]
        [Route("/content.json")]
        [ValidateModelState]
        [SwaggerOperation("Query")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Object>), description: "Successful SQL results")]
        public virtual IActionResult Query([FromQuery (Name = "sql")][Required()]string sql, [FromQuery (Name = "_shape")][Required()]string shape)
        {

            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Object>));
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);
            //TODO: Uncomment the next line to return response 500 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(500);
            string exampleJson = null;
            exampleJson = "[ \"{}\", \"{}\" ]";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Object>>(exampleJson)
            : default(List<Object>);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
