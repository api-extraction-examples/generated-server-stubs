from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ClearTaskInstances(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_run_id=None, dry_run=True, end_date=None, include_downstream=False, include_future=False, include_parentdag=None, include_past=False, include_subdags=None, include_upstream=False, only_failed=True, only_running=False, reset_dag_runs=None, start_date=None, task_ids=None):  # noqa: E501
        """ClearTaskInstances - a model defined in OpenAPI

        :param dag_run_id: The dag_run_id of this ClearTaskInstances.  # noqa: E501
        :type dag_run_id: str
        :param dry_run: The dry_run of this ClearTaskInstances.  # noqa: E501
        :type dry_run: bool
        :param end_date: The end_date of this ClearTaskInstances.  # noqa: E501
        :type end_date: str
        :param include_downstream: The include_downstream of this ClearTaskInstances.  # noqa: E501
        :type include_downstream: bool
        :param include_future: The include_future of this ClearTaskInstances.  # noqa: E501
        :type include_future: bool
        :param include_parentdag: The include_parentdag of this ClearTaskInstances.  # noqa: E501
        :type include_parentdag: bool
        :param include_past: The include_past of this ClearTaskInstances.  # noqa: E501
        :type include_past: bool
        :param include_subdags: The include_subdags of this ClearTaskInstances.  # noqa: E501
        :type include_subdags: bool
        :param include_upstream: The include_upstream of this ClearTaskInstances.  # noqa: E501
        :type include_upstream: bool
        :param only_failed: The only_failed of this ClearTaskInstances.  # noqa: E501
        :type only_failed: bool
        :param only_running: The only_running of this ClearTaskInstances.  # noqa: E501
        :type only_running: bool
        :param reset_dag_runs: The reset_dag_runs of this ClearTaskInstances.  # noqa: E501
        :type reset_dag_runs: bool
        :param start_date: The start_date of this ClearTaskInstances.  # noqa: E501
        :type start_date: str
        :param task_ids: The task_ids of this ClearTaskInstances.  # noqa: E501
        :type task_ids: List[str]
        """
        self.openapi_types = {
            'dag_run_id': str,
            'dry_run': bool,
            'end_date': str,
            'include_downstream': bool,
            'include_future': bool,
            'include_parentdag': bool,
            'include_past': bool,
            'include_subdags': bool,
            'include_upstream': bool,
            'only_failed': bool,
            'only_running': bool,
            'reset_dag_runs': bool,
            'start_date': str,
            'task_ids': List[str]
        }

        self.attribute_map = {
            'dag_run_id': 'dag_run_id',
            'dry_run': 'dry_run',
            'end_date': 'end_date',
            'include_downstream': 'include_downstream',
            'include_future': 'include_future',
            'include_parentdag': 'include_parentdag',
            'include_past': 'include_past',
            'include_subdags': 'include_subdags',
            'include_upstream': 'include_upstream',
            'only_failed': 'only_failed',
            'only_running': 'only_running',
            'reset_dag_runs': 'reset_dag_runs',
            'start_date': 'start_date',
            'task_ids': 'task_ids'
        }

        self._dag_run_id = dag_run_id
        self._dry_run = dry_run
        self._end_date = end_date
        self._include_downstream = include_downstream
        self._include_future = include_future
        self._include_parentdag = include_parentdag
        self._include_past = include_past
        self._include_subdags = include_subdags
        self._include_upstream = include_upstream
        self._only_failed = only_failed
        self._only_running = only_running
        self._reset_dag_runs = reset_dag_runs
        self._start_date = start_date
        self._task_ids = task_ids

    @classmethod
    def from_dict(cls, dikt) -> 'ClearTaskInstances':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ClearTaskInstances of this ClearTaskInstances.  # noqa: E501
        :rtype: ClearTaskInstances
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_run_id(self) -> str:
        """Gets the dag_run_id of this ClearTaskInstances.

        The DagRun ID for this task instance  # noqa: E501

        :return: The dag_run_id of this ClearTaskInstances.
        :rtype: str
        """
        return self._dag_run_id

    @dag_run_id.setter
    def dag_run_id(self, dag_run_id: str):
        """Sets the dag_run_id of this ClearTaskInstances.

        The DagRun ID for this task instance  # noqa: E501

        :param dag_run_id: The dag_run_id of this ClearTaskInstances.
        :type dag_run_id: str
        """

        self._dag_run_id = dag_run_id

    @property
    def dry_run(self) -> bool:
        """Gets the dry_run of this ClearTaskInstances.

        If set, don't actually run this operation. The response will contain a list of task instances planned to be cleaned, but not modified in any way.   # noqa: E501

        :return: The dry_run of this ClearTaskInstances.
        :rtype: bool
        """
        return self._dry_run

    @dry_run.setter
    def dry_run(self, dry_run: bool):
        """Sets the dry_run of this ClearTaskInstances.

        If set, don't actually run this operation. The response will contain a list of task instances planned to be cleaned, but not modified in any way.   # noqa: E501

        :param dry_run: The dry_run of this ClearTaskInstances.
        :type dry_run: bool
        """

        self._dry_run = dry_run

    @property
    def end_date(self) -> str:
        """Gets the end_date of this ClearTaskInstances.

        The maximum execution date to clear.  # noqa: E501

        :return: The end_date of this ClearTaskInstances.
        :rtype: str
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: str):
        """Sets the end_date of this ClearTaskInstances.

        The maximum execution date to clear.  # noqa: E501

        :param end_date: The end_date of this ClearTaskInstances.
        :type end_date: str
        """

        self._end_date = end_date

    @property
    def include_downstream(self) -> bool:
        """Gets the include_downstream of this ClearTaskInstances.

        If set to true, downstream tasks are also affected.  # noqa: E501

        :return: The include_downstream of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_downstream

    @include_downstream.setter
    def include_downstream(self, include_downstream: bool):
        """Sets the include_downstream of this ClearTaskInstances.

        If set to true, downstream tasks are also affected.  # noqa: E501

        :param include_downstream: The include_downstream of this ClearTaskInstances.
        :type include_downstream: bool
        """

        self._include_downstream = include_downstream

    @property
    def include_future(self) -> bool:
        """Gets the include_future of this ClearTaskInstances.

        If set to True, also tasks from future DAG Runs are affected.  # noqa: E501

        :return: The include_future of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_future

    @include_future.setter
    def include_future(self, include_future: bool):
        """Sets the include_future of this ClearTaskInstances.

        If set to True, also tasks from future DAG Runs are affected.  # noqa: E501

        :param include_future: The include_future of this ClearTaskInstances.
        :type include_future: bool
        """

        self._include_future = include_future

    @property
    def include_parentdag(self) -> bool:
        """Gets the include_parentdag of this ClearTaskInstances.

        Clear tasks in the parent dag of the subdag.  # noqa: E501

        :return: The include_parentdag of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_parentdag

    @include_parentdag.setter
    def include_parentdag(self, include_parentdag: bool):
        """Sets the include_parentdag of this ClearTaskInstances.

        Clear tasks in the parent dag of the subdag.  # noqa: E501

        :param include_parentdag: The include_parentdag of this ClearTaskInstances.
        :type include_parentdag: bool
        """

        self._include_parentdag = include_parentdag

    @property
    def include_past(self) -> bool:
        """Gets the include_past of this ClearTaskInstances.

        If set to True, also tasks from past DAG Runs are affected.  # noqa: E501

        :return: The include_past of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_past

    @include_past.setter
    def include_past(self, include_past: bool):
        """Sets the include_past of this ClearTaskInstances.

        If set to True, also tasks from past DAG Runs are affected.  # noqa: E501

        :param include_past: The include_past of this ClearTaskInstances.
        :type include_past: bool
        """

        self._include_past = include_past

    @property
    def include_subdags(self) -> bool:
        """Gets the include_subdags of this ClearTaskInstances.

        Clear tasks in subdags and clear external tasks indicated by ExternalTaskMarker.  # noqa: E501

        :return: The include_subdags of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_subdags

    @include_subdags.setter
    def include_subdags(self, include_subdags: bool):
        """Sets the include_subdags of this ClearTaskInstances.

        Clear tasks in subdags and clear external tasks indicated by ExternalTaskMarker.  # noqa: E501

        :param include_subdags: The include_subdags of this ClearTaskInstances.
        :type include_subdags: bool
        """

        self._include_subdags = include_subdags

    @property
    def include_upstream(self) -> bool:
        """Gets the include_upstream of this ClearTaskInstances.

        If set to true, upstream tasks are also affected.  # noqa: E501

        :return: The include_upstream of this ClearTaskInstances.
        :rtype: bool
        """
        return self._include_upstream

    @include_upstream.setter
    def include_upstream(self, include_upstream: bool):
        """Sets the include_upstream of this ClearTaskInstances.

        If set to true, upstream tasks are also affected.  # noqa: E501

        :param include_upstream: The include_upstream of this ClearTaskInstances.
        :type include_upstream: bool
        """

        self._include_upstream = include_upstream

    @property
    def only_failed(self) -> bool:
        """Gets the only_failed of this ClearTaskInstances.

        Only clear failed tasks.  # noqa: E501

        :return: The only_failed of this ClearTaskInstances.
        :rtype: bool
        """
        return self._only_failed

    @only_failed.setter
    def only_failed(self, only_failed: bool):
        """Sets the only_failed of this ClearTaskInstances.

        Only clear failed tasks.  # noqa: E501

        :param only_failed: The only_failed of this ClearTaskInstances.
        :type only_failed: bool
        """

        self._only_failed = only_failed

    @property
    def only_running(self) -> bool:
        """Gets the only_running of this ClearTaskInstances.

        Only clear running tasks.  # noqa: E501

        :return: The only_running of this ClearTaskInstances.
        :rtype: bool
        """
        return self._only_running

    @only_running.setter
    def only_running(self, only_running: bool):
        """Sets the only_running of this ClearTaskInstances.

        Only clear running tasks.  # noqa: E501

        :param only_running: The only_running of this ClearTaskInstances.
        :type only_running: bool
        """

        self._only_running = only_running

    @property
    def reset_dag_runs(self) -> bool:
        """Gets the reset_dag_runs of this ClearTaskInstances.

        Set state of DAG runs to RUNNING.  # noqa: E501

        :return: The reset_dag_runs of this ClearTaskInstances.
        :rtype: bool
        """
        return self._reset_dag_runs

    @reset_dag_runs.setter
    def reset_dag_runs(self, reset_dag_runs: bool):
        """Sets the reset_dag_runs of this ClearTaskInstances.

        Set state of DAG runs to RUNNING.  # noqa: E501

        :param reset_dag_runs: The reset_dag_runs of this ClearTaskInstances.
        :type reset_dag_runs: bool
        """

        self._reset_dag_runs = reset_dag_runs

    @property
    def start_date(self) -> str:
        """Gets the start_date of this ClearTaskInstances.

        The minimum execution date to clear.  # noqa: E501

        :return: The start_date of this ClearTaskInstances.
        :rtype: str
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: str):
        """Sets the start_date of this ClearTaskInstances.

        The minimum execution date to clear.  # noqa: E501

        :param start_date: The start_date of this ClearTaskInstances.
        :type start_date: str
        """

        self._start_date = start_date

    @property
    def task_ids(self) -> List[str]:
        """Gets the task_ids of this ClearTaskInstances.

        A list of task ids to clear.  *New in version 2.1.0*   # noqa: E501

        :return: The task_ids of this ClearTaskInstances.
        :rtype: List[str]
        """
        return self._task_ids

    @task_ids.setter
    def task_ids(self, task_ids: List[str]):
        """Sets the task_ids of this ClearTaskInstances.

        A list of task ids to clear.  *New in version 2.1.0*   # noqa: E501

        :param task_ids: The task_ids of this ClearTaskInstances.
        :type task_ids: List[str]
        """
        if task_ids is not None and len(task_ids) < 1:
            raise ValueError("Invalid value for `task_ids`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._task_ids = task_ids
