from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dag_state import DagState
from openapi_server import util

from openapi_server.models.dag_state import DagState  # noqa: E501

class DAGRun(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conf=None, dag_id=None, dag_run_id=None, data_interval_end=None, data_interval_start=None, end_date=None, execution_date=None, external_trigger=True, last_scheduling_decision=None, logical_date=None, note=None, run_type=None, start_date=None, state=None):  # noqa: E501
        """DAGRun - a model defined in OpenAPI

        :param conf: The conf of this DAGRun.  # noqa: E501
        :type conf: object
        :param dag_id: The dag_id of this DAGRun.  # noqa: E501
        :type dag_id: str
        :param dag_run_id: The dag_run_id of this DAGRun.  # noqa: E501
        :type dag_run_id: str
        :param data_interval_end: The data_interval_end of this DAGRun.  # noqa: E501
        :type data_interval_end: datetime
        :param data_interval_start: The data_interval_start of this DAGRun.  # noqa: E501
        :type data_interval_start: datetime
        :param end_date: The end_date of this DAGRun.  # noqa: E501
        :type end_date: datetime
        :param execution_date: The execution_date of this DAGRun.  # noqa: E501
        :type execution_date: datetime
        :param external_trigger: The external_trigger of this DAGRun.  # noqa: E501
        :type external_trigger: bool
        :param last_scheduling_decision: The last_scheduling_decision of this DAGRun.  # noqa: E501
        :type last_scheduling_decision: datetime
        :param logical_date: The logical_date of this DAGRun.  # noqa: E501
        :type logical_date: datetime
        :param note: The note of this DAGRun.  # noqa: E501
        :type note: str
        :param run_type: The run_type of this DAGRun.  # noqa: E501
        :type run_type: str
        :param start_date: The start_date of this DAGRun.  # noqa: E501
        :type start_date: datetime
        :param state: The state of this DAGRun.  # noqa: E501
        :type state: DagState
        """
        self.openapi_types = {
            'conf': object,
            'dag_id': str,
            'dag_run_id': str,
            'data_interval_end': datetime,
            'data_interval_start': datetime,
            'end_date': datetime,
            'execution_date': datetime,
            'external_trigger': bool,
            'last_scheduling_decision': datetime,
            'logical_date': datetime,
            'note': str,
            'run_type': str,
            'start_date': datetime,
            'state': DagState
        }

        self.attribute_map = {
            'conf': 'conf',
            'dag_id': 'dag_id',
            'dag_run_id': 'dag_run_id',
            'data_interval_end': 'data_interval_end',
            'data_interval_start': 'data_interval_start',
            'end_date': 'end_date',
            'execution_date': 'execution_date',
            'external_trigger': 'external_trigger',
            'last_scheduling_decision': 'last_scheduling_decision',
            'logical_date': 'logical_date',
            'note': 'note',
            'run_type': 'run_type',
            'start_date': 'start_date',
            'state': 'state'
        }

        self._conf = conf
        self._dag_id = dag_id
        self._dag_run_id = dag_run_id
        self._data_interval_end = data_interval_end
        self._data_interval_start = data_interval_start
        self._end_date = end_date
        self._execution_date = execution_date
        self._external_trigger = external_trigger
        self._last_scheduling_decision = last_scheduling_decision
        self._logical_date = logical_date
        self._note = note
        self._run_type = run_type
        self._start_date = start_date
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'DAGRun':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DAGRun of this DAGRun.  # noqa: E501
        :rtype: DAGRun
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conf(self) -> object:
        """Gets the conf of this DAGRun.

        JSON object describing additional configuration parameters.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.   # noqa: E501

        :return: The conf of this DAGRun.
        :rtype: object
        """
        return self._conf

    @conf.setter
    def conf(self, conf: object):
        """Sets the conf of this DAGRun.

        JSON object describing additional configuration parameters.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.   # noqa: E501

        :param conf: The conf of this DAGRun.
        :type conf: object
        """

        self._conf = conf

    @property
    def dag_id(self) -> str:
        """Gets the dag_id of this DAGRun.


        :return: The dag_id of this DAGRun.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id: str):
        """Sets the dag_id of this DAGRun.


        :param dag_id: The dag_id of this DAGRun.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def dag_run_id(self) -> str:
        """Gets the dag_run_id of this DAGRun.

        Run ID.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  If not provided, a value will be generated based on execution_date.  If the specified dag_run_id is in use, the creation request fails with an ALREADY_EXISTS error.  This together with DAG_ID are a unique key.   # noqa: E501

        :return: The dag_run_id of this DAGRun.
        :rtype: str
        """
        return self._dag_run_id

    @dag_run_id.setter
    def dag_run_id(self, dag_run_id: str):
        """Sets the dag_run_id of this DAGRun.

        Run ID.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  If not provided, a value will be generated based on execution_date.  If the specified dag_run_id is in use, the creation request fails with an ALREADY_EXISTS error.  This together with DAG_ID are a unique key.   # noqa: E501

        :param dag_run_id: The dag_run_id of this DAGRun.
        :type dag_run_id: str
        """

        self._dag_run_id = dag_run_id

    @property
    def data_interval_end(self) -> datetime:
        """Gets the data_interval_end of this DAGRun.


        :return: The data_interval_end of this DAGRun.
        :rtype: datetime
        """
        return self._data_interval_end

    @data_interval_end.setter
    def data_interval_end(self, data_interval_end: datetime):
        """Sets the data_interval_end of this DAGRun.


        :param data_interval_end: The data_interval_end of this DAGRun.
        :type data_interval_end: datetime
        """

        self._data_interval_end = data_interval_end

    @property
    def data_interval_start(self) -> datetime:
        """Gets the data_interval_start of this DAGRun.


        :return: The data_interval_start of this DAGRun.
        :rtype: datetime
        """
        return self._data_interval_start

    @data_interval_start.setter
    def data_interval_start(self, data_interval_start: datetime):
        """Sets the data_interval_start of this DAGRun.


        :param data_interval_start: The data_interval_start of this DAGRun.
        :type data_interval_start: datetime
        """

        self._data_interval_start = data_interval_start

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this DAGRun.


        :return: The end_date of this DAGRun.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this DAGRun.


        :param end_date: The end_date of this DAGRun.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def execution_date(self) -> datetime:
        """Gets the execution_date of this DAGRun.

        The execution date. This is the same as logical_date, kept for backwards compatibility. If both this field and logical_date are provided but with different values, the request will fail with an BAD_REQUEST error.  *Changed in version 2.2.0*&#58; Field becomes nullable.  *Deprecated since version 2.2.0*&#58; Use 'logical_date' instead.   # noqa: E501

        :return: The execution_date of this DAGRun.
        :rtype: datetime
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date: datetime):
        """Sets the execution_date of this DAGRun.

        The execution date. This is the same as logical_date, kept for backwards compatibility. If both this field and logical_date are provided but with different values, the request will fail with an BAD_REQUEST error.  *Changed in version 2.2.0*&#58; Field becomes nullable.  *Deprecated since version 2.2.0*&#58; Use 'logical_date' instead.   # noqa: E501

        :param execution_date: The execution_date of this DAGRun.
        :type execution_date: datetime
        """

        self._execution_date = execution_date

    @property
    def external_trigger(self) -> bool:
        """Gets the external_trigger of this DAGRun.


        :return: The external_trigger of this DAGRun.
        :rtype: bool
        """
        return self._external_trigger

    @external_trigger.setter
    def external_trigger(self, external_trigger: bool):
        """Sets the external_trigger of this DAGRun.


        :param external_trigger: The external_trigger of this DAGRun.
        :type external_trigger: bool
        """

        self._external_trigger = external_trigger

    @property
    def last_scheduling_decision(self) -> datetime:
        """Gets the last_scheduling_decision of this DAGRun.


        :return: The last_scheduling_decision of this DAGRun.
        :rtype: datetime
        """
        return self._last_scheduling_decision

    @last_scheduling_decision.setter
    def last_scheduling_decision(self, last_scheduling_decision: datetime):
        """Sets the last_scheduling_decision of this DAGRun.


        :param last_scheduling_decision: The last_scheduling_decision of this DAGRun.
        :type last_scheduling_decision: datetime
        """

        self._last_scheduling_decision = last_scheduling_decision

    @property
    def logical_date(self) -> datetime:
        """Gets the logical_date of this DAGRun.

        The logical date (previously called execution date). This is the time or interval covered by this DAG run, according to the DAG definition.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  This together with DAG_ID are a unique key.  *New in version 2.2.0*   # noqa: E501

        :return: The logical_date of this DAGRun.
        :rtype: datetime
        """
        return self._logical_date

    @logical_date.setter
    def logical_date(self, logical_date: datetime):
        """Sets the logical_date of this DAGRun.

        The logical date (previously called execution date). This is the time or interval covered by this DAG run, according to the DAG definition.  The value of this field can be set only when creating the object. If you try to modify the field of an existing object, the request fails with an BAD_REQUEST error.  This together with DAG_ID are a unique key.  *New in version 2.2.0*   # noqa: E501

        :param logical_date: The logical_date of this DAGRun.
        :type logical_date: datetime
        """

        self._logical_date = logical_date

    @property
    def note(self) -> str:
        """Gets the note of this DAGRun.

        Contains manually entered notes by the user about the DagRun.  *New in version 2.5.0*   # noqa: E501

        :return: The note of this DAGRun.
        :rtype: str
        """
        return self._note

    @note.setter
    def note(self, note: str):
        """Sets the note of this DAGRun.

        Contains manually entered notes by the user about the DagRun.  *New in version 2.5.0*   # noqa: E501

        :param note: The note of this DAGRun.
        :type note: str
        """

        self._note = note

    @property
    def run_type(self) -> str:
        """Gets the run_type of this DAGRun.


        :return: The run_type of this DAGRun.
        :rtype: str
        """
        return self._run_type

    @run_type.setter
    def run_type(self, run_type: str):
        """Sets the run_type of this DAGRun.


        :param run_type: The run_type of this DAGRun.
        :type run_type: str
        """
        allowed_values = ["backfill", "manual", "scheduled", "dataset_triggered"]  # noqa: E501
        if run_type not in allowed_values:
            raise ValueError(
                "Invalid value for `run_type` ({0}), must be one of {1}"
                .format(run_type, allowed_values)
            )

        self._run_type = run_type

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this DAGRun.

        The start time. The time when DAG run was actually created.  *Changed in version 2.1.3*&#58; Field becomes nullable.   # noqa: E501

        :return: The start_date of this DAGRun.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this DAGRun.

        The start time. The time when DAG run was actually created.  *Changed in version 2.1.3*&#58; Field becomes nullable.   # noqa: E501

        :param start_date: The start_date of this DAGRun.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def state(self) -> DagState:
        """Gets the state of this DAGRun.


        :return: The state of this DAGRun.
        :rtype: DagState
        """
        return self._state

    @state.setter
    def state(self, state: DagState):
        """Sets the state of this DAGRun.


        :param state: The state of this DAGRun.
        :type state: DagState
        """

        self._state = state
