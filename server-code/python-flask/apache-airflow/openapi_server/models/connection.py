from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Connection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conn_type=None, connection_id=None, description=None, host=None, login=None, port=None, _schema=None, extra=None, password=None):  # noqa: E501
        """Connection - a model defined in OpenAPI

        :param conn_type: The conn_type of this Connection.  # noqa: E501
        :type conn_type: str
        :param connection_id: The connection_id of this Connection.  # noqa: E501
        :type connection_id: str
        :param description: The description of this Connection.  # noqa: E501
        :type description: str
        :param host: The host of this Connection.  # noqa: E501
        :type host: str
        :param login: The login of this Connection.  # noqa: E501
        :type login: str
        :param port: The port of this Connection.  # noqa: E501
        :type port: int
        :param _schema: The _schema of this Connection.  # noqa: E501
        :type _schema: str
        :param extra: The extra of this Connection.  # noqa: E501
        :type extra: str
        :param password: The password of this Connection.  # noqa: E501
        :type password: str
        """
        self.openapi_types = {
            'conn_type': str,
            'connection_id': str,
            'description': str,
            'host': str,
            'login': str,
            'port': int,
            '_schema': str,
            'extra': str,
            'password': str
        }

        self.attribute_map = {
            'conn_type': 'conn_type',
            'connection_id': 'connection_id',
            'description': 'description',
            'host': 'host',
            'login': 'login',
            'port': 'port',
            '_schema': 'schema',
            'extra': 'extra',
            'password': 'password'
        }

        self._conn_type = conn_type
        self._connection_id = connection_id
        self._description = description
        self._host = host
        self._login = login
        self._port = port
        self.__schema = _schema
        self._extra = extra
        self._password = password

    @classmethod
    def from_dict(cls, dikt) -> 'Connection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Connection of this Connection.  # noqa: E501
        :rtype: Connection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conn_type(self) -> str:
        """Gets the conn_type of this Connection.

        The connection type.  # noqa: E501

        :return: The conn_type of this Connection.
        :rtype: str
        """
        return self._conn_type

    @conn_type.setter
    def conn_type(self, conn_type: str):
        """Sets the conn_type of this Connection.

        The connection type.  # noqa: E501

        :param conn_type: The conn_type of this Connection.
        :type conn_type: str
        """

        self._conn_type = conn_type

    @property
    def connection_id(self) -> str:
        """Gets the connection_id of this Connection.

        The connection ID.  # noqa: E501

        :return: The connection_id of this Connection.
        :rtype: str
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id: str):
        """Sets the connection_id of this Connection.

        The connection ID.  # noqa: E501

        :param connection_id: The connection_id of this Connection.
        :type connection_id: str
        """

        self._connection_id = connection_id

    @property
    def description(self) -> str:
        """Gets the description of this Connection.

        The description of the connection.  # noqa: E501

        :return: The description of this Connection.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Connection.

        The description of the connection.  # noqa: E501

        :param description: The description of this Connection.
        :type description: str
        """

        self._description = description

    @property
    def host(self) -> str:
        """Gets the host of this Connection.

        Host of the connection.  # noqa: E501

        :return: The host of this Connection.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this Connection.

        Host of the connection.  # noqa: E501

        :param host: The host of this Connection.
        :type host: str
        """

        self._host = host

    @property
    def login(self) -> str:
        """Gets the login of this Connection.

        Login of the connection.  # noqa: E501

        :return: The login of this Connection.
        :rtype: str
        """
        return self._login

    @login.setter
    def login(self, login: str):
        """Sets the login of this Connection.

        Login of the connection.  # noqa: E501

        :param login: The login of this Connection.
        :type login: str
        """

        self._login = login

    @property
    def port(self) -> int:
        """Gets the port of this Connection.

        Port of the connection.  # noqa: E501

        :return: The port of this Connection.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port: int):
        """Sets the port of this Connection.

        Port of the connection.  # noqa: E501

        :param port: The port of this Connection.
        :type port: int
        """

        self._port = port

    @property
    def _schema(self) -> str:
        """Gets the _schema of this Connection.

        Schema of the connection.  # noqa: E501

        :return: The _schema of this Connection.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: str):
        """Sets the _schema of this Connection.

        Schema of the connection.  # noqa: E501

        :param _schema: The _schema of this Connection.
        :type _schema: str
        """

        self.__schema = _schema

    @property
    def extra(self) -> str:
        """Gets the extra of this Connection.

        Other values that cannot be put into another field, e.g. RSA keys.  # noqa: E501

        :return: The extra of this Connection.
        :rtype: str
        """
        return self._extra

    @extra.setter
    def extra(self, extra: str):
        """Sets the extra of this Connection.

        Other values that cannot be put into another field, e.g. RSA keys.  # noqa: E501

        :param extra: The extra of this Connection.
        :type extra: str
        """

        self._extra = extra

    @property
    def password(self) -> str:
        """Gets the password of this Connection.

        Password of the connection.  # noqa: E501

        :return: The password of this Connection.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this Connection.

        Password of the connection.  # noqa: E501

        :param password: The password of this Connection.
        :type password: str
        """

        self._password = password
