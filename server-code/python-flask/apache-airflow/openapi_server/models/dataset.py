from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dag_schedule_dataset_reference import DagScheduleDatasetReference
from openapi_server.models.task_outlet_dataset_reference import TaskOutletDatasetReference
from openapi_server import util

from openapi_server.models.dag_schedule_dataset_reference import DagScheduleDatasetReference  # noqa: E501
from openapi_server.models.task_outlet_dataset_reference import TaskOutletDatasetReference  # noqa: E501

class Dataset(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, consuming_dags=None, created_at=None, extra=None, id=None, producing_tasks=None, updated_at=None, uri=None):  # noqa: E501
        """Dataset - a model defined in OpenAPI

        :param consuming_dags: The consuming_dags of this Dataset.  # noqa: E501
        :type consuming_dags: List[DagScheduleDatasetReference]
        :param created_at: The created_at of this Dataset.  # noqa: E501
        :type created_at: str
        :param extra: The extra of this Dataset.  # noqa: E501
        :type extra: object
        :param id: The id of this Dataset.  # noqa: E501
        :type id: int
        :param producing_tasks: The producing_tasks of this Dataset.  # noqa: E501
        :type producing_tasks: List[TaskOutletDatasetReference]
        :param updated_at: The updated_at of this Dataset.  # noqa: E501
        :type updated_at: str
        :param uri: The uri of this Dataset.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'consuming_dags': List[DagScheduleDatasetReference],
            'created_at': str,
            'extra': object,
            'id': int,
            'producing_tasks': List[TaskOutletDatasetReference],
            'updated_at': str,
            'uri': str
        }

        self.attribute_map = {
            'consuming_dags': 'consuming_dags',
            'created_at': 'created_at',
            'extra': 'extra',
            'id': 'id',
            'producing_tasks': 'producing_tasks',
            'updated_at': 'updated_at',
            'uri': 'uri'
        }

        self._consuming_dags = consuming_dags
        self._created_at = created_at
        self._extra = extra
        self._id = id
        self._producing_tasks = producing_tasks
        self._updated_at = updated_at
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'Dataset':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dataset of this Dataset.  # noqa: E501
        :rtype: Dataset
        """
        return util.deserialize_model(dikt, cls)

    @property
    def consuming_dags(self) -> List[DagScheduleDatasetReference]:
        """Gets the consuming_dags of this Dataset.


        :return: The consuming_dags of this Dataset.
        :rtype: List[DagScheduleDatasetReference]
        """
        return self._consuming_dags

    @consuming_dags.setter
    def consuming_dags(self, consuming_dags: List[DagScheduleDatasetReference]):
        """Sets the consuming_dags of this Dataset.


        :param consuming_dags: The consuming_dags of this Dataset.
        :type consuming_dags: List[DagScheduleDatasetReference]
        """

        self._consuming_dags = consuming_dags

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Dataset.

        The dataset creation time  # noqa: E501

        :return: The created_at of this Dataset.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Dataset.

        The dataset creation time  # noqa: E501

        :param created_at: The created_at of this Dataset.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def extra(self) -> object:
        """Gets the extra of this Dataset.

        The dataset extra  # noqa: E501

        :return: The extra of this Dataset.
        :rtype: object
        """
        return self._extra

    @extra.setter
    def extra(self, extra: object):
        """Sets the extra of this Dataset.

        The dataset extra  # noqa: E501

        :param extra: The extra of this Dataset.
        :type extra: object
        """

        self._extra = extra

    @property
    def id(self) -> int:
        """Gets the id of this Dataset.

        The dataset id  # noqa: E501

        :return: The id of this Dataset.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Dataset.

        The dataset id  # noqa: E501

        :param id: The id of this Dataset.
        :type id: int
        """

        self._id = id

    @property
    def producing_tasks(self) -> List[TaskOutletDatasetReference]:
        """Gets the producing_tasks of this Dataset.


        :return: The producing_tasks of this Dataset.
        :rtype: List[TaskOutletDatasetReference]
        """
        return self._producing_tasks

    @producing_tasks.setter
    def producing_tasks(self, producing_tasks: List[TaskOutletDatasetReference]):
        """Sets the producing_tasks of this Dataset.


        :param producing_tasks: The producing_tasks of this Dataset.
        :type producing_tasks: List[TaskOutletDatasetReference]
        """

        self._producing_tasks = producing_tasks

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this Dataset.

        The dataset update time  # noqa: E501

        :return: The updated_at of this Dataset.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this Dataset.

        The dataset update time  # noqa: E501

        :param updated_at: The updated_at of this Dataset.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def uri(self) -> str:
        """Gets the uri of this Dataset.

        The dataset uri  # noqa: E501

        :return: The uri of this Dataset.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this Dataset.

        The dataset uri  # noqa: E501

        :param uri: The uri of this Dataset.
        :type uri: str
        """

        self._uri = uri
