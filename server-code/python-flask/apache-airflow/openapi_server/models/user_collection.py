from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user_collection_item import UserCollectionItem
from openapi_server import util

from openapi_server.models.user_collection_item import UserCollectionItem  # noqa: E501

class UserCollection(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, total_entries=None, users=None):  # noqa: E501
        """UserCollection - a model defined in OpenAPI

        :param total_entries: The total_entries of this UserCollection.  # noqa: E501
        :type total_entries: int
        :param users: The users of this UserCollection.  # noqa: E501
        :type users: List[UserCollectionItem]
        """
        self.openapi_types = {
            'total_entries': int,
            'users': List[UserCollectionItem]
        }

        self.attribute_map = {
            'total_entries': 'total_entries',
            'users': 'users'
        }

        self._total_entries = total_entries
        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'UserCollection':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserCollection of this UserCollection.  # noqa: E501
        :rtype: UserCollection
        """
        return util.deserialize_model(dikt, cls)

    @property
    def total_entries(self) -> int:
        """Gets the total_entries of this UserCollection.

        Count of total objects in the current result set before pagination parameters (limit, offset) are applied.   # noqa: E501

        :return: The total_entries of this UserCollection.
        :rtype: int
        """
        return self._total_entries

    @total_entries.setter
    def total_entries(self, total_entries: int):
        """Sets the total_entries of this UserCollection.

        Count of total objects in the current result set before pagination parameters (limit, offset) are applied.   # noqa: E501

        :param total_entries: The total_entries of this UserCollection.
        :type total_entries: int
        """

        self._total_entries = total_entries

    @property
    def users(self) -> List[UserCollectionItem]:
        """Gets the users of this UserCollection.


        :return: The users of this UserCollection.
        :rtype: List[UserCollectionItem]
        """
        return self._users

    @users.setter
    def users(self, users: List[UserCollectionItem]):
        """Sets the users of this UserCollection.


        :param users: The users of this UserCollection.
        :type users: List[UserCollectionItem]
        """

        self._users = users
