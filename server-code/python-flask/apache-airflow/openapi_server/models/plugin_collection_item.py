from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PluginCollectionItem(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, appbuilder_menu_items=None, appbuilder_views=None, executors=None, flask_blueprints=None, global_operator_extra_links=None, hooks=None, macros=None, name=None, operator_extra_links=None, source=None):  # noqa: E501
        """PluginCollectionItem - a model defined in OpenAPI

        :param appbuilder_menu_items: The appbuilder_menu_items of this PluginCollectionItem.  # noqa: E501
        :type appbuilder_menu_items: List[object]
        :param appbuilder_views: The appbuilder_views of this PluginCollectionItem.  # noqa: E501
        :type appbuilder_views: List[object]
        :param executors: The executors of this PluginCollectionItem.  # noqa: E501
        :type executors: List[str]
        :param flask_blueprints: The flask_blueprints of this PluginCollectionItem.  # noqa: E501
        :type flask_blueprints: List[object]
        :param global_operator_extra_links: The global_operator_extra_links of this PluginCollectionItem.  # noqa: E501
        :type global_operator_extra_links: List[object]
        :param hooks: The hooks of this PluginCollectionItem.  # noqa: E501
        :type hooks: List[str]
        :param macros: The macros of this PluginCollectionItem.  # noqa: E501
        :type macros: List[object]
        :param name: The name of this PluginCollectionItem.  # noqa: E501
        :type name: str
        :param operator_extra_links: The operator_extra_links of this PluginCollectionItem.  # noqa: E501
        :type operator_extra_links: List[object]
        :param source: The source of this PluginCollectionItem.  # noqa: E501
        :type source: str
        """
        self.openapi_types = {
            'appbuilder_menu_items': List[object],
            'appbuilder_views': List[object],
            'executors': List[str],
            'flask_blueprints': List[object],
            'global_operator_extra_links': List[object],
            'hooks': List[str],
            'macros': List[object],
            'name': str,
            'operator_extra_links': List[object],
            'source': str
        }

        self.attribute_map = {
            'appbuilder_menu_items': 'appbuilder_menu_items',
            'appbuilder_views': 'appbuilder_views',
            'executors': 'executors',
            'flask_blueprints': 'flask_blueprints',
            'global_operator_extra_links': 'global_operator_extra_links',
            'hooks': 'hooks',
            'macros': 'macros',
            'name': 'name',
            'operator_extra_links': 'operator_extra_links',
            'source': 'source'
        }

        self._appbuilder_menu_items = appbuilder_menu_items
        self._appbuilder_views = appbuilder_views
        self._executors = executors
        self._flask_blueprints = flask_blueprints
        self._global_operator_extra_links = global_operator_extra_links
        self._hooks = hooks
        self._macros = macros
        self._name = name
        self._operator_extra_links = operator_extra_links
        self._source = source

    @classmethod
    def from_dict(cls, dikt) -> 'PluginCollectionItem':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PluginCollectionItem of this PluginCollectionItem.  # noqa: E501
        :rtype: PluginCollectionItem
        """
        return util.deserialize_model(dikt, cls)

    @property
    def appbuilder_menu_items(self) -> List[object]:
        """Gets the appbuilder_menu_items of this PluginCollectionItem.

        The Flask Appbuilder menu items  # noqa: E501

        :return: The appbuilder_menu_items of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._appbuilder_menu_items

    @appbuilder_menu_items.setter
    def appbuilder_menu_items(self, appbuilder_menu_items: List[object]):
        """Sets the appbuilder_menu_items of this PluginCollectionItem.

        The Flask Appbuilder menu items  # noqa: E501

        :param appbuilder_menu_items: The appbuilder_menu_items of this PluginCollectionItem.
        :type appbuilder_menu_items: List[object]
        """

        self._appbuilder_menu_items = appbuilder_menu_items

    @property
    def appbuilder_views(self) -> List[object]:
        """Gets the appbuilder_views of this PluginCollectionItem.

        The appuilder views  # noqa: E501

        :return: The appbuilder_views of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._appbuilder_views

    @appbuilder_views.setter
    def appbuilder_views(self, appbuilder_views: List[object]):
        """Sets the appbuilder_views of this PluginCollectionItem.

        The appuilder views  # noqa: E501

        :param appbuilder_views: The appbuilder_views of this PluginCollectionItem.
        :type appbuilder_views: List[object]
        """

        self._appbuilder_views = appbuilder_views

    @property
    def executors(self) -> List[str]:
        """Gets the executors of this PluginCollectionItem.

        The plugin executors  # noqa: E501

        :return: The executors of this PluginCollectionItem.
        :rtype: List[str]
        """
        return self._executors

    @executors.setter
    def executors(self, executors: List[str]):
        """Sets the executors of this PluginCollectionItem.

        The plugin executors  # noqa: E501

        :param executors: The executors of this PluginCollectionItem.
        :type executors: List[str]
        """

        self._executors = executors

    @property
    def flask_blueprints(self) -> List[object]:
        """Gets the flask_blueprints of this PluginCollectionItem.

        The flask blueprints  # noqa: E501

        :return: The flask_blueprints of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._flask_blueprints

    @flask_blueprints.setter
    def flask_blueprints(self, flask_blueprints: List[object]):
        """Sets the flask_blueprints of this PluginCollectionItem.

        The flask blueprints  # noqa: E501

        :param flask_blueprints: The flask_blueprints of this PluginCollectionItem.
        :type flask_blueprints: List[object]
        """

        self._flask_blueprints = flask_blueprints

    @property
    def global_operator_extra_links(self) -> List[object]:
        """Gets the global_operator_extra_links of this PluginCollectionItem.

        The global operator extra links  # noqa: E501

        :return: The global_operator_extra_links of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._global_operator_extra_links

    @global_operator_extra_links.setter
    def global_operator_extra_links(self, global_operator_extra_links: List[object]):
        """Sets the global_operator_extra_links of this PluginCollectionItem.

        The global operator extra links  # noqa: E501

        :param global_operator_extra_links: The global_operator_extra_links of this PluginCollectionItem.
        :type global_operator_extra_links: List[object]
        """

        self._global_operator_extra_links = global_operator_extra_links

    @property
    def hooks(self) -> List[str]:
        """Gets the hooks of this PluginCollectionItem.

        The plugin hooks  # noqa: E501

        :return: The hooks of this PluginCollectionItem.
        :rtype: List[str]
        """
        return self._hooks

    @hooks.setter
    def hooks(self, hooks: List[str]):
        """Sets the hooks of this PluginCollectionItem.

        The plugin hooks  # noqa: E501

        :param hooks: The hooks of this PluginCollectionItem.
        :type hooks: List[str]
        """

        self._hooks = hooks

    @property
    def macros(self) -> List[object]:
        """Gets the macros of this PluginCollectionItem.

        The plugin macros  # noqa: E501

        :return: The macros of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._macros

    @macros.setter
    def macros(self, macros: List[object]):
        """Sets the macros of this PluginCollectionItem.

        The plugin macros  # noqa: E501

        :param macros: The macros of this PluginCollectionItem.
        :type macros: List[object]
        """

        self._macros = macros

    @property
    def name(self) -> str:
        """Gets the name of this PluginCollectionItem.

        The name of the plugin  # noqa: E501

        :return: The name of this PluginCollectionItem.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PluginCollectionItem.

        The name of the plugin  # noqa: E501

        :param name: The name of this PluginCollectionItem.
        :type name: str
        """

        self._name = name

    @property
    def operator_extra_links(self) -> List[object]:
        """Gets the operator_extra_links of this PluginCollectionItem.

        Operator extra links  # noqa: E501

        :return: The operator_extra_links of this PluginCollectionItem.
        :rtype: List[object]
        """
        return self._operator_extra_links

    @operator_extra_links.setter
    def operator_extra_links(self, operator_extra_links: List[object]):
        """Sets the operator_extra_links of this PluginCollectionItem.

        Operator extra links  # noqa: E501

        :param operator_extra_links: The operator_extra_links of this PluginCollectionItem.
        :type operator_extra_links: List[object]
        """

        self._operator_extra_links = operator_extra_links

    @property
    def source(self) -> str:
        """Gets the source of this PluginCollectionItem.

        The plugin source  # noqa: E501

        :return: The source of this PluginCollectionItem.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this PluginCollectionItem.

        The plugin source  # noqa: E501

        :param source: The source of this PluginCollectionItem.
        :type source: str
        """

        self._source = source
