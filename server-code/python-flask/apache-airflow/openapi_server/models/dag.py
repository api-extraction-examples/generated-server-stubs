from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.schedule_interval import ScheduleInterval
from openapi_server.models.tag import Tag
from openapi_server import util

from openapi_server.models.schedule_interval import ScheduleInterval  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501

class DAG(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dag_id=None, default_view=None, description=None, file_token=None, fileloc=None, has_import_errors=None, has_task_concurrency_limits=None, is_active=None, is_paused=None, is_subdag=None, last_expired=None, last_parsed_time=None, last_pickled=None, max_active_runs=None, max_active_tasks=None, next_dagrun=None, next_dagrun_create_after=None, next_dagrun_data_interval_end=None, next_dagrun_data_interval_start=None, owners=None, pickle_id=None, root_dag_id=None, schedule_interval=None, scheduler_lock=None, tags=None, timetable_description=None):  # noqa: E501
        """DAG - a model defined in OpenAPI

        :param dag_id: The dag_id of this DAG.  # noqa: E501
        :type dag_id: str
        :param default_view: The default_view of this DAG.  # noqa: E501
        :type default_view: str
        :param description: The description of this DAG.  # noqa: E501
        :type description: str
        :param file_token: The file_token of this DAG.  # noqa: E501
        :type file_token: str
        :param fileloc: The fileloc of this DAG.  # noqa: E501
        :type fileloc: str
        :param has_import_errors: The has_import_errors of this DAG.  # noqa: E501
        :type has_import_errors: bool
        :param has_task_concurrency_limits: The has_task_concurrency_limits of this DAG.  # noqa: E501
        :type has_task_concurrency_limits: bool
        :param is_active: The is_active of this DAG.  # noqa: E501
        :type is_active: bool
        :param is_paused: The is_paused of this DAG.  # noqa: E501
        :type is_paused: bool
        :param is_subdag: The is_subdag of this DAG.  # noqa: E501
        :type is_subdag: bool
        :param last_expired: The last_expired of this DAG.  # noqa: E501
        :type last_expired: datetime
        :param last_parsed_time: The last_parsed_time of this DAG.  # noqa: E501
        :type last_parsed_time: datetime
        :param last_pickled: The last_pickled of this DAG.  # noqa: E501
        :type last_pickled: datetime
        :param max_active_runs: The max_active_runs of this DAG.  # noqa: E501
        :type max_active_runs: int
        :param max_active_tasks: The max_active_tasks of this DAG.  # noqa: E501
        :type max_active_tasks: int
        :param next_dagrun: The next_dagrun of this DAG.  # noqa: E501
        :type next_dagrun: datetime
        :param next_dagrun_create_after: The next_dagrun_create_after of this DAG.  # noqa: E501
        :type next_dagrun_create_after: datetime
        :param next_dagrun_data_interval_end: The next_dagrun_data_interval_end of this DAG.  # noqa: E501
        :type next_dagrun_data_interval_end: datetime
        :param next_dagrun_data_interval_start: The next_dagrun_data_interval_start of this DAG.  # noqa: E501
        :type next_dagrun_data_interval_start: datetime
        :param owners: The owners of this DAG.  # noqa: E501
        :type owners: List[str]
        :param pickle_id: The pickle_id of this DAG.  # noqa: E501
        :type pickle_id: str
        :param root_dag_id: The root_dag_id of this DAG.  # noqa: E501
        :type root_dag_id: str
        :param schedule_interval: The schedule_interval of this DAG.  # noqa: E501
        :type schedule_interval: ScheduleInterval
        :param scheduler_lock: The scheduler_lock of this DAG.  # noqa: E501
        :type scheduler_lock: bool
        :param tags: The tags of this DAG.  # noqa: E501
        :type tags: List[Tag]
        :param timetable_description: The timetable_description of this DAG.  # noqa: E501
        :type timetable_description: str
        """
        self.openapi_types = {
            'dag_id': str,
            'default_view': str,
            'description': str,
            'file_token': str,
            'fileloc': str,
            'has_import_errors': bool,
            'has_task_concurrency_limits': bool,
            'is_active': bool,
            'is_paused': bool,
            'is_subdag': bool,
            'last_expired': datetime,
            'last_parsed_time': datetime,
            'last_pickled': datetime,
            'max_active_runs': int,
            'max_active_tasks': int,
            'next_dagrun': datetime,
            'next_dagrun_create_after': datetime,
            'next_dagrun_data_interval_end': datetime,
            'next_dagrun_data_interval_start': datetime,
            'owners': List[str],
            'pickle_id': str,
            'root_dag_id': str,
            'schedule_interval': ScheduleInterval,
            'scheduler_lock': bool,
            'tags': List[Tag],
            'timetable_description': str
        }

        self.attribute_map = {
            'dag_id': 'dag_id',
            'default_view': 'default_view',
            'description': 'description',
            'file_token': 'file_token',
            'fileloc': 'fileloc',
            'has_import_errors': 'has_import_errors',
            'has_task_concurrency_limits': 'has_task_concurrency_limits',
            'is_active': 'is_active',
            'is_paused': 'is_paused',
            'is_subdag': 'is_subdag',
            'last_expired': 'last_expired',
            'last_parsed_time': 'last_parsed_time',
            'last_pickled': 'last_pickled',
            'max_active_runs': 'max_active_runs',
            'max_active_tasks': 'max_active_tasks',
            'next_dagrun': 'next_dagrun',
            'next_dagrun_create_after': 'next_dagrun_create_after',
            'next_dagrun_data_interval_end': 'next_dagrun_data_interval_end',
            'next_dagrun_data_interval_start': 'next_dagrun_data_interval_start',
            'owners': 'owners',
            'pickle_id': 'pickle_id',
            'root_dag_id': 'root_dag_id',
            'schedule_interval': 'schedule_interval',
            'scheduler_lock': 'scheduler_lock',
            'tags': 'tags',
            'timetable_description': 'timetable_description'
        }

        self._dag_id = dag_id
        self._default_view = default_view
        self._description = description
        self._file_token = file_token
        self._fileloc = fileloc
        self._has_import_errors = has_import_errors
        self._has_task_concurrency_limits = has_task_concurrency_limits
        self._is_active = is_active
        self._is_paused = is_paused
        self._is_subdag = is_subdag
        self._last_expired = last_expired
        self._last_parsed_time = last_parsed_time
        self._last_pickled = last_pickled
        self._max_active_runs = max_active_runs
        self._max_active_tasks = max_active_tasks
        self._next_dagrun = next_dagrun
        self._next_dagrun_create_after = next_dagrun_create_after
        self._next_dagrun_data_interval_end = next_dagrun_data_interval_end
        self._next_dagrun_data_interval_start = next_dagrun_data_interval_start
        self._owners = owners
        self._pickle_id = pickle_id
        self._root_dag_id = root_dag_id
        self._schedule_interval = schedule_interval
        self._scheduler_lock = scheduler_lock
        self._tags = tags
        self._timetable_description = timetable_description

    @classmethod
    def from_dict(cls, dikt) -> 'DAG':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DAG of this DAG.  # noqa: E501
        :rtype: DAG
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dag_id(self) -> str:
        """Gets the dag_id of this DAG.

        The ID of the DAG.  # noqa: E501

        :return: The dag_id of this DAG.
        :rtype: str
        """
        return self._dag_id

    @dag_id.setter
    def dag_id(self, dag_id: str):
        """Sets the dag_id of this DAG.

        The ID of the DAG.  # noqa: E501

        :param dag_id: The dag_id of this DAG.
        :type dag_id: str
        """

        self._dag_id = dag_id

    @property
    def default_view(self) -> str:
        """Gets the default_view of this DAG.

        Default view of the DAG inside the webserver  *New in version 2.3.0*   # noqa: E501

        :return: The default_view of this DAG.
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view: str):
        """Sets the default_view of this DAG.

        Default view of the DAG inside the webserver  *New in version 2.3.0*   # noqa: E501

        :param default_view: The default_view of this DAG.
        :type default_view: str
        """

        self._default_view = default_view

    @property
    def description(self) -> str:
        """Gets the description of this DAG.

        User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.   # noqa: E501

        :return: The description of this DAG.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DAG.

        User-provided DAG description, which can consist of several sentences or paragraphs that describe DAG contents.   # noqa: E501

        :param description: The description of this DAG.
        :type description: str
        """

        self._description = description

    @property
    def file_token(self) -> str:
        """Gets the file_token of this DAG.

        The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.   # noqa: E501

        :return: The file_token of this DAG.
        :rtype: str
        """
        return self._file_token

    @file_token.setter
    def file_token(self, file_token: str):
        """Sets the file_token of this DAG.

        The key containing the encrypted path to the file. Encryption and decryption take place only on the server. This prevents the client from reading an non-DAG file. This also ensures API extensibility, because the format of encrypted data may change.   # noqa: E501

        :param file_token: The file_token of this DAG.
        :type file_token: str
        """

        self._file_token = file_token

    @property
    def fileloc(self) -> str:
        """Gets the fileloc of this DAG.

        The absolute path to the file.  # noqa: E501

        :return: The fileloc of this DAG.
        :rtype: str
        """
        return self._fileloc

    @fileloc.setter
    def fileloc(self, fileloc: str):
        """Sets the fileloc of this DAG.

        The absolute path to the file.  # noqa: E501

        :param fileloc: The fileloc of this DAG.
        :type fileloc: str
        """

        self._fileloc = fileloc

    @property
    def has_import_errors(self) -> bool:
        """Gets the has_import_errors of this DAG.

        Whether the DAG has import errors  *New in version 2.3.0*   # noqa: E501

        :return: The has_import_errors of this DAG.
        :rtype: bool
        """
        return self._has_import_errors

    @has_import_errors.setter
    def has_import_errors(self, has_import_errors: bool):
        """Sets the has_import_errors of this DAG.

        Whether the DAG has import errors  *New in version 2.3.0*   # noqa: E501

        :param has_import_errors: The has_import_errors of this DAG.
        :type has_import_errors: bool
        """

        self._has_import_errors = has_import_errors

    @property
    def has_task_concurrency_limits(self) -> bool:
        """Gets the has_task_concurrency_limits of this DAG.

        Whether the DAG has task concurrency limits  *New in version 2.3.0*   # noqa: E501

        :return: The has_task_concurrency_limits of this DAG.
        :rtype: bool
        """
        return self._has_task_concurrency_limits

    @has_task_concurrency_limits.setter
    def has_task_concurrency_limits(self, has_task_concurrency_limits: bool):
        """Sets the has_task_concurrency_limits of this DAG.

        Whether the DAG has task concurrency limits  *New in version 2.3.0*   # noqa: E501

        :param has_task_concurrency_limits: The has_task_concurrency_limits of this DAG.
        :type has_task_concurrency_limits: bool
        """

        self._has_task_concurrency_limits = has_task_concurrency_limits

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this DAG.

        Whether the DAG is currently seen by the scheduler(s).  *New in version 2.1.1*  *Changed in version 2.2.0*&#58; Field is read-only.   # noqa: E501

        :return: The is_active of this DAG.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this DAG.

        Whether the DAG is currently seen by the scheduler(s).  *New in version 2.1.1*  *Changed in version 2.2.0*&#58; Field is read-only.   # noqa: E501

        :param is_active: The is_active of this DAG.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def is_paused(self) -> bool:
        """Gets the is_paused of this DAG.

        Whether the DAG is paused.  # noqa: E501

        :return: The is_paused of this DAG.
        :rtype: bool
        """
        return self._is_paused

    @is_paused.setter
    def is_paused(self, is_paused: bool):
        """Sets the is_paused of this DAG.

        Whether the DAG is paused.  # noqa: E501

        :param is_paused: The is_paused of this DAG.
        :type is_paused: bool
        """

        self._is_paused = is_paused

    @property
    def is_subdag(self) -> bool:
        """Gets the is_subdag of this DAG.

        Whether the DAG is SubDAG.  # noqa: E501

        :return: The is_subdag of this DAG.
        :rtype: bool
        """
        return self._is_subdag

    @is_subdag.setter
    def is_subdag(self, is_subdag: bool):
        """Sets the is_subdag of this DAG.

        Whether the DAG is SubDAG.  # noqa: E501

        :param is_subdag: The is_subdag of this DAG.
        :type is_subdag: bool
        """

        self._is_subdag = is_subdag

    @property
    def last_expired(self) -> datetime:
        """Gets the last_expired of this DAG.

        Time when the DAG last received a refresh signal (e.g. the DAG's \"refresh\" button was clicked in the web UI)  *New in version 2.3.0*   # noqa: E501

        :return: The last_expired of this DAG.
        :rtype: datetime
        """
        return self._last_expired

    @last_expired.setter
    def last_expired(self, last_expired: datetime):
        """Sets the last_expired of this DAG.

        Time when the DAG last received a refresh signal (e.g. the DAG's \"refresh\" button was clicked in the web UI)  *New in version 2.3.0*   # noqa: E501

        :param last_expired: The last_expired of this DAG.
        :type last_expired: datetime
        """

        self._last_expired = last_expired

    @property
    def last_parsed_time(self) -> datetime:
        """Gets the last_parsed_time of this DAG.

        The last time the DAG was parsed.  *New in version 2.3.0*   # noqa: E501

        :return: The last_parsed_time of this DAG.
        :rtype: datetime
        """
        return self._last_parsed_time

    @last_parsed_time.setter
    def last_parsed_time(self, last_parsed_time: datetime):
        """Sets the last_parsed_time of this DAG.

        The last time the DAG was parsed.  *New in version 2.3.0*   # noqa: E501

        :param last_parsed_time: The last_parsed_time of this DAG.
        :type last_parsed_time: datetime
        """

        self._last_parsed_time = last_parsed_time

    @property
    def last_pickled(self) -> datetime:
        """Gets the last_pickled of this DAG.

        The last time the DAG was pickled.  *New in version 2.3.0*   # noqa: E501

        :return: The last_pickled of this DAG.
        :rtype: datetime
        """
        return self._last_pickled

    @last_pickled.setter
    def last_pickled(self, last_pickled: datetime):
        """Sets the last_pickled of this DAG.

        The last time the DAG was pickled.  *New in version 2.3.0*   # noqa: E501

        :param last_pickled: The last_pickled of this DAG.
        :type last_pickled: datetime
        """

        self._last_pickled = last_pickled

    @property
    def max_active_runs(self) -> int:
        """Gets the max_active_runs of this DAG.

        Maximum number of active DAG runs for the DAG  *New in version 2.3.0*   # noqa: E501

        :return: The max_active_runs of this DAG.
        :rtype: int
        """
        return self._max_active_runs

    @max_active_runs.setter
    def max_active_runs(self, max_active_runs: int):
        """Sets the max_active_runs of this DAG.

        Maximum number of active DAG runs for the DAG  *New in version 2.3.0*   # noqa: E501

        :param max_active_runs: The max_active_runs of this DAG.
        :type max_active_runs: int
        """

        self._max_active_runs = max_active_runs

    @property
    def max_active_tasks(self) -> int:
        """Gets the max_active_tasks of this DAG.

        Maximum number of active tasks that can be run on the DAG  *New in version 2.3.0*   # noqa: E501

        :return: The max_active_tasks of this DAG.
        :rtype: int
        """
        return self._max_active_tasks

    @max_active_tasks.setter
    def max_active_tasks(self, max_active_tasks: int):
        """Sets the max_active_tasks of this DAG.

        Maximum number of active tasks that can be run on the DAG  *New in version 2.3.0*   # noqa: E501

        :param max_active_tasks: The max_active_tasks of this DAG.
        :type max_active_tasks: int
        """

        self._max_active_tasks = max_active_tasks

    @property
    def next_dagrun(self) -> datetime:
        """Gets the next_dagrun of this DAG.

        The logical date of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :return: The next_dagrun of this DAG.
        :rtype: datetime
        """
        return self._next_dagrun

    @next_dagrun.setter
    def next_dagrun(self, next_dagrun: datetime):
        """Sets the next_dagrun of this DAG.

        The logical date of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :param next_dagrun: The next_dagrun of this DAG.
        :type next_dagrun: datetime
        """

        self._next_dagrun = next_dagrun

    @property
    def next_dagrun_create_after(self) -> datetime:
        """Gets the next_dagrun_create_after of this DAG.

        Earliest time at which this ``next_dagrun`` can be created.  *New in version 2.3.0*   # noqa: E501

        :return: The next_dagrun_create_after of this DAG.
        :rtype: datetime
        """
        return self._next_dagrun_create_after

    @next_dagrun_create_after.setter
    def next_dagrun_create_after(self, next_dagrun_create_after: datetime):
        """Sets the next_dagrun_create_after of this DAG.

        Earliest time at which this ``next_dagrun`` can be created.  *New in version 2.3.0*   # noqa: E501

        :param next_dagrun_create_after: The next_dagrun_create_after of this DAG.
        :type next_dagrun_create_after: datetime
        """

        self._next_dagrun_create_after = next_dagrun_create_after

    @property
    def next_dagrun_data_interval_end(self) -> datetime:
        """Gets the next_dagrun_data_interval_end of this DAG.

        The end of the interval of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :return: The next_dagrun_data_interval_end of this DAG.
        :rtype: datetime
        """
        return self._next_dagrun_data_interval_end

    @next_dagrun_data_interval_end.setter
    def next_dagrun_data_interval_end(self, next_dagrun_data_interval_end: datetime):
        """Sets the next_dagrun_data_interval_end of this DAG.

        The end of the interval of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :param next_dagrun_data_interval_end: The next_dagrun_data_interval_end of this DAG.
        :type next_dagrun_data_interval_end: datetime
        """

        self._next_dagrun_data_interval_end = next_dagrun_data_interval_end

    @property
    def next_dagrun_data_interval_start(self) -> datetime:
        """Gets the next_dagrun_data_interval_start of this DAG.

        The start of the interval of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :return: The next_dagrun_data_interval_start of this DAG.
        :rtype: datetime
        """
        return self._next_dagrun_data_interval_start

    @next_dagrun_data_interval_start.setter
    def next_dagrun_data_interval_start(self, next_dagrun_data_interval_start: datetime):
        """Sets the next_dagrun_data_interval_start of this DAG.

        The start of the interval of the next dag run.  *New in version 2.3.0*   # noqa: E501

        :param next_dagrun_data_interval_start: The next_dagrun_data_interval_start of this DAG.
        :type next_dagrun_data_interval_start: datetime
        """

        self._next_dagrun_data_interval_start = next_dagrun_data_interval_start

    @property
    def owners(self) -> List[str]:
        """Gets the owners of this DAG.


        :return: The owners of this DAG.
        :rtype: List[str]
        """
        return self._owners

    @owners.setter
    def owners(self, owners: List[str]):
        """Sets the owners of this DAG.


        :param owners: The owners of this DAG.
        :type owners: List[str]
        """

        self._owners = owners

    @property
    def pickle_id(self) -> str:
        """Gets the pickle_id of this DAG.

        Foreign key to the latest pickle_id  *New in version 2.3.0*   # noqa: E501

        :return: The pickle_id of this DAG.
        :rtype: str
        """
        return self._pickle_id

    @pickle_id.setter
    def pickle_id(self, pickle_id: str):
        """Sets the pickle_id of this DAG.

        Foreign key to the latest pickle_id  *New in version 2.3.0*   # noqa: E501

        :param pickle_id: The pickle_id of this DAG.
        :type pickle_id: str
        """

        self._pickle_id = pickle_id

    @property
    def root_dag_id(self) -> str:
        """Gets the root_dag_id of this DAG.

        If the DAG is SubDAG then it is the top level DAG identifier. Otherwise, null.  # noqa: E501

        :return: The root_dag_id of this DAG.
        :rtype: str
        """
        return self._root_dag_id

    @root_dag_id.setter
    def root_dag_id(self, root_dag_id: str):
        """Sets the root_dag_id of this DAG.

        If the DAG is SubDAG then it is the top level DAG identifier. Otherwise, null.  # noqa: E501

        :param root_dag_id: The root_dag_id of this DAG.
        :type root_dag_id: str
        """

        self._root_dag_id = root_dag_id

    @property
    def schedule_interval(self) -> ScheduleInterval:
        """Gets the schedule_interval of this DAG.


        :return: The schedule_interval of this DAG.
        :rtype: ScheduleInterval
        """
        return self._schedule_interval

    @schedule_interval.setter
    def schedule_interval(self, schedule_interval: ScheduleInterval):
        """Sets the schedule_interval of this DAG.


        :param schedule_interval: The schedule_interval of this DAG.
        :type schedule_interval: ScheduleInterval
        """

        self._schedule_interval = schedule_interval

    @property
    def scheduler_lock(self) -> bool:
        """Gets the scheduler_lock of this DAG.

        Whether (one of) the scheduler is scheduling this DAG at the moment  *New in version 2.3.0*   # noqa: E501

        :return: The scheduler_lock of this DAG.
        :rtype: bool
        """
        return self._scheduler_lock

    @scheduler_lock.setter
    def scheduler_lock(self, scheduler_lock: bool):
        """Sets the scheduler_lock of this DAG.

        Whether (one of) the scheduler is scheduling this DAG at the moment  *New in version 2.3.0*   # noqa: E501

        :param scheduler_lock: The scheduler_lock of this DAG.
        :type scheduler_lock: bool
        """

        self._scheduler_lock = scheduler_lock

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this DAG.

        List of tags.  # noqa: E501

        :return: The tags of this DAG.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this DAG.

        List of tags.  # noqa: E501

        :param tags: The tags of this DAG.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def timetable_description(self) -> str:
        """Gets the timetable_description of this DAG.

        Timetable/Schedule Interval description.  *New in version 2.3.0*   # noqa: E501

        :return: The timetable_description of this DAG.
        :rtype: str
        """
        return self._timetable_description

    @timetable_description.setter
    def timetable_description(self, timetable_description: str):
        """Sets the timetable_description of this DAG.

        Timetable/Schedule Interval description.  *New in version 2.3.0*   # noqa: E501

        :param timetable_description: The timetable_description of this DAG.
        :type timetable_description: str
        """

        self._timetable_description = timetable_description
