from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class MusicExportJob(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at=None, id=None, job_id=None, status=None, vendor=None):  # noqa: E501
        """MusicExportJob - a model defined in OpenAPI

        :param created_at: The created_at of this MusicExportJob.  # noqa: E501
        :type created_at: str
        :param id: The id of this MusicExportJob.  # noqa: E501
        :type id: str
        :param job_id: The job_id of this MusicExportJob.  # noqa: E501
        :type job_id: str
        :param status: The status of this MusicExportJob.  # noqa: E501
        :type status: str
        :param vendor: The vendor of this MusicExportJob.  # noqa: E501
        :type vendor: str
        """
        self.openapi_types = {
            'created_at': str,
            'id': str,
            'job_id': str,
            'status': str,
            'vendor': str
        }

        self.attribute_map = {
            'created_at': 'created_at',
            'id': 'id',
            'job_id': 'job_id',
            'status': 'status',
            'vendor': 'vendor'
        }

        self._created_at = created_at
        self._id = id
        self._job_id = job_id
        self._status = status
        self._vendor = vendor

    @classmethod
    def from_dict(cls, dikt) -> 'MusicExportJob':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicExportJob of this MusicExportJob.  # noqa: E501
        :rtype: MusicExportJob
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this MusicExportJob.


        :return: The created_at of this MusicExportJob.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this MusicExportJob.


        :param created_at: The created_at of this MusicExportJob.
        :type created_at: str
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def id(self) -> str:
        """Gets the id of this MusicExportJob.


        :return: The id of this MusicExportJob.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MusicExportJob.


        :param id: The id of this MusicExportJob.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def job_id(self) -> str:
        """Gets the job_id of this MusicExportJob.


        :return: The job_id of this MusicExportJob.
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id: str):
        """Sets the job_id of this MusicExportJob.


        :param job_id: The job_id of this MusicExportJob.
        :type job_id: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def status(self) -> str:
        """Gets the status of this MusicExportJob.


        :return: The status of this MusicExportJob.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this MusicExportJob.


        :param status: The status of this MusicExportJob.
        :type status: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")  # noqa: E501

        self._status = status

    @property
    def vendor(self) -> str:
        """Gets the vendor of this MusicExportJob.


        :return: The vendor of this MusicExportJob.
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor: str):
        """Sets the vendor of this MusicExportJob.


        :param vendor: The vendor of this MusicExportJob.
        :type vendor: str
        """
        if vendor is None:
            raise ValueError("Invalid value for `vendor`, must not be `None`")  # noqa: E501

        self._vendor = vendor
