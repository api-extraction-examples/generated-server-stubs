from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.music_popularity_artist import MusicPopularityArtist
from openapi_server import util

from openapi_server.models.music_popularity_artist import MusicPopularityArtist  # noqa: E501

class MusicPopularityArtists(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit=None, method=None, offset=None, replied_at=None, results=None, _schema=None, total=None):  # noqa: E501
        """MusicPopularityArtists - a model defined in OpenAPI

        :param limit: The limit of this MusicPopularityArtists.  # noqa: E501
        :type limit: int
        :param method: The method of this MusicPopularityArtists.  # noqa: E501
        :type method: str
        :param offset: The offset of this MusicPopularityArtists.  # noqa: E501
        :type offset: int
        :param replied_at: The replied_at of this MusicPopularityArtists.  # noqa: E501
        :type replied_at: str
        :param results: The results of this MusicPopularityArtists.  # noqa: E501
        :type results: List[MusicPopularityArtist]
        :param _schema: The _schema of this MusicPopularityArtists.  # noqa: E501
        :type _schema: str
        :param total: The total of this MusicPopularityArtists.  # noqa: E501
        :type total: int
        """
        self.openapi_types = {
            'limit': int,
            'method': str,
            'offset': int,
            'replied_at': str,
            'results': List[MusicPopularityArtist],
            '_schema': str,
            'total': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'method': 'method',
            'offset': 'offset',
            'replied_at': 'repliedAt',
            'results': 'results',
            '_schema': 'schema',
            'total': 'total'
        }

        self._limit = limit
        self._method = method
        self._offset = offset
        self._replied_at = replied_at
        self._results = results
        self.__schema = _schema
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'MusicPopularityArtists':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicPopularityArtists of this MusicPopularityArtists.  # noqa: E501
        :rtype: MusicPopularityArtists
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self) -> int:
        """Gets the limit of this MusicPopularityArtists.


        :return: The limit of this MusicPopularityArtists.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this MusicPopularityArtists.


        :param limit: The limit of this MusicPopularityArtists.
        :type limit: int
        """

        self._limit = limit

    @property
    def method(self) -> str:
        """Gets the method of this MusicPopularityArtists.


        :return: The method of this MusicPopularityArtists.
        :rtype: str
        """
        return self._method

    @method.setter
    def method(self, method: str):
        """Sets the method of this MusicPopularityArtists.


        :param method: The method of this MusicPopularityArtists.
        :type method: str
        """
        if method is None:
            raise ValueError("Invalid value for `method`, must not be `None`")  # noqa: E501

        self._method = method

    @property
    def offset(self) -> int:
        """Gets the offset of this MusicPopularityArtists.


        :return: The offset of this MusicPopularityArtists.
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset: int):
        """Sets the offset of this MusicPopularityArtists.


        :param offset: The offset of this MusicPopularityArtists.
        :type offset: int
        """

        self._offset = offset

    @property
    def replied_at(self) -> str:
        """Gets the replied_at of this MusicPopularityArtists.


        :return: The replied_at of this MusicPopularityArtists.
        :rtype: str
        """
        return self._replied_at

    @replied_at.setter
    def replied_at(self, replied_at: str):
        """Sets the replied_at of this MusicPopularityArtists.


        :param replied_at: The replied_at of this MusicPopularityArtists.
        :type replied_at: str
        """
        if replied_at is None:
            raise ValueError("Invalid value for `replied_at`, must not be `None`")  # noqa: E501

        self._replied_at = replied_at

    @property
    def results(self) -> List[MusicPopularityArtist]:
        """Gets the results of this MusicPopularityArtists.


        :return: The results of this MusicPopularityArtists.
        :rtype: List[MusicPopularityArtist]
        """
        return self._results

    @results.setter
    def results(self, results: List[MusicPopularityArtist]):
        """Sets the results of this MusicPopularityArtists.


        :param results: The results of this MusicPopularityArtists.
        :type results: List[MusicPopularityArtist]
        """
        if results is None:
            raise ValueError("Invalid value for `results`, must not be `None`")  # noqa: E501

        self._results = results

    @property
    def _schema(self) -> str:
        """Gets the _schema of this MusicPopularityArtists.


        :return: The _schema of this MusicPopularityArtists.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: str):
        """Sets the _schema of this MusicPopularityArtists.


        :param _schema: The _schema of this MusicPopularityArtists.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")  # noqa: E501

        self.__schema = _schema

    @property
    def total(self) -> int:
        """Gets the total of this MusicPopularityArtists.


        :return: The total of this MusicPopularityArtists.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this MusicPopularityArtists.


        :param total: The total of this MusicPopularityArtists.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total
