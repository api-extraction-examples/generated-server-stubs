from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class MusicRecordAudio(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_type=None, duration=None, identifier=None, resource_type=None):  # noqa: E501
        """MusicRecordAudio - a model defined in OpenAPI

        :param audio_type: The audio_type of this MusicRecordAudio.  # noqa: E501
        :type audio_type: str
        :param duration: The duration of this MusicRecordAudio.  # noqa: E501
        :type duration: int
        :param identifier: The identifier of this MusicRecordAudio.  # noqa: E501
        :type identifier: str
        :param resource_type: The resource_type of this MusicRecordAudio.  # noqa: E501
        :type resource_type: str
        """
        self.openapi_types = {
            'audio_type': str,
            'duration': int,
            'identifier': str,
            'resource_type': str
        }

        self.attribute_map = {
            'audio_type': 'audioType',
            'duration': 'duration',
            'identifier': 'identifier',
            'resource_type': 'resourceType'
        }

        self._audio_type = audio_type
        self._duration = duration
        self._identifier = identifier
        self._resource_type = resource_type

    @classmethod
    def from_dict(cls, dikt) -> 'MusicRecordAudio':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicRecordAudio of this MusicRecordAudio.  # noqa: E501
        :rtype: MusicRecordAudio
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_type(self) -> str:
        """Gets the audio_type of this MusicRecordAudio.


        :return: The audio_type of this MusicRecordAudio.
        :rtype: str
        """
        return self._audio_type

    @audio_type.setter
    def audio_type(self, audio_type: str):
        """Sets the audio_type of this MusicRecordAudio.


        :param audio_type: The audio_type of this MusicRecordAudio.
        :type audio_type: str
        """
        if audio_type is None:
            raise ValueError("Invalid value for `audio_type`, must not be `None`")  # noqa: E501

        self._audio_type = audio_type

    @property
    def duration(self) -> int:
        """Gets the duration of this MusicRecordAudio.


        :return: The duration of this MusicRecordAudio.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this MusicRecordAudio.


        :param duration: The duration of this MusicRecordAudio.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def identifier(self) -> str:
        """Gets the identifier of this MusicRecordAudio.


        :return: The identifier of this MusicRecordAudio.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this MusicRecordAudio.


        :param identifier: The identifier of this MusicRecordAudio.
        :type identifier: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this MusicRecordAudio.


        :return: The resource_type of this MusicRecordAudio.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this MusicRecordAudio.


        :param resource_type: The resource_type of this MusicRecordAudio.
        :type resource_type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")  # noqa: E501

        self._resource_type = resource_type
