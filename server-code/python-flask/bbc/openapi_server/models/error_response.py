from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.error import Error
from openapi_server import util

from openapi_server.models.error import Error  # noqa: E501

class ErrorResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _schema=None, errors=None):  # noqa: E501
        """ErrorResponse - a model defined in OpenAPI

        :param _schema: The _schema of this ErrorResponse.  # noqa: E501
        :type _schema: str
        :param errors: The errors of this ErrorResponse.  # noqa: E501
        :type errors: List[Error]
        """
        self.openapi_types = {
            '_schema': str,
            'errors': List[Error]
        }

        self.attribute_map = {
            '_schema': '$schema',
            'errors': 'errors'
        }

        self.__schema = _schema
        self._errors = errors

    @classmethod
    def from_dict(cls, dikt) -> 'ErrorResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ErrorResponse of this ErrorResponse.  # noqa: E501
        :rtype: ErrorResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _schema(self) -> str:
        """Gets the _schema of this ErrorResponse.


        :return: The _schema of this ErrorResponse.
        :rtype: str
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: str):
        """Sets the _schema of this ErrorResponse.


        :param _schema: The _schema of this ErrorResponse.
        :type _schema: str
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")  # noqa: E501

        self.__schema = _schema

    @property
    def errors(self) -> List[Error]:
        """Gets the errors of this ErrorResponse.


        :return: The errors of this ErrorResponse.
        :rtype: List[Error]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[Error]):
        """Sets the errors of this ErrorResponse.


        :param errors: The errors of this ErrorResponse.
        :type errors: List[Error]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors
