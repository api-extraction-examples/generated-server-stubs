from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.date_range import DateRange
from openapi_server import util

from openapi_server.models.date_range import DateRange  # noqa: E501

class Service(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, coverage=None, date_ranges=None, default=None, default_language=None, id=None, region=None, short_title=None, title=None, type=None):  # noqa: E501
        """Service - a model defined in OpenAPI

        :param active: The active of this Service.  # noqa: E501
        :type active: bool
        :param coverage: The coverage of this Service.  # noqa: E501
        :type coverage: str
        :param date_ranges: The date_ranges of this Service.  # noqa: E501
        :type date_ranges: List[DateRange]
        :param default: The default of this Service.  # noqa: E501
        :type default: bool
        :param default_language: The default_language of this Service.  # noqa: E501
        :type default_language: str
        :param id: The id of this Service.  # noqa: E501
        :type id: str
        :param region: The region of this Service.  # noqa: E501
        :type region: str
        :param short_title: The short_title of this Service.  # noqa: E501
        :type short_title: str
        :param title: The title of this Service.  # noqa: E501
        :type title: str
        :param type: The type of this Service.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'active': bool,
            'coverage': str,
            'date_ranges': List[DateRange],
            'default': bool,
            'default_language': str,
            'id': str,
            'region': str,
            'short_title': str,
            'title': str,
            'type': str
        }

        self.attribute_map = {
            'active': 'active',
            'coverage': 'coverage',
            'date_ranges': 'date_ranges',
            'default': 'default',
            'default_language': 'default_language',
            'id': 'id',
            'region': 'region',
            'short_title': 'short_title',
            'title': 'title',
            'type': 'type'
        }

        self._active = active
        self._coverage = coverage
        self._date_ranges = date_ranges
        self._default = default
        self._default_language = default_language
        self._id = id
        self._region = region
        self._short_title = short_title
        self._title = title
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Service':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service of this Service.  # noqa: E501
        :rtype: Service
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this Service.


        :return: The active of this Service.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this Service.


        :param active: The active of this Service.
        :type active: bool
        """
        if active is None:
            raise ValueError("Invalid value for `active`, must not be `None`")  # noqa: E501

        self._active = active

    @property
    def coverage(self) -> str:
        """Gets the coverage of this Service.


        :return: The coverage of this Service.
        :rtype: str
        """
        return self._coverage

    @coverage.setter
    def coverage(self, coverage: str):
        """Sets the coverage of this Service.


        :param coverage: The coverage of this Service.
        :type coverage: str
        """
        if coverage is None:
            raise ValueError("Invalid value for `coverage`, must not be `None`")  # noqa: E501

        self._coverage = coverage

    @property
    def date_ranges(self) -> List[DateRange]:
        """Gets the date_ranges of this Service.


        :return: The date_ranges of this Service.
        :rtype: List[DateRange]
        """
        return self._date_ranges

    @date_ranges.setter
    def date_ranges(self, date_ranges: List[DateRange]):
        """Sets the date_ranges of this Service.


        :param date_ranges: The date_ranges of this Service.
        :type date_ranges: List[DateRange]
        """
        if date_ranges is None:
            raise ValueError("Invalid value for `date_ranges`, must not be `None`")  # noqa: E501

        self._date_ranges = date_ranges

    @property
    def default(self) -> bool:
        """Gets the default of this Service.


        :return: The default of this Service.
        :rtype: bool
        """
        return self._default

    @default.setter
    def default(self, default: bool):
        """Sets the default of this Service.


        :param default: The default of this Service.
        :type default: bool
        """
        if default is None:
            raise ValueError("Invalid value for `default`, must not be `None`")  # noqa: E501

        self._default = default

    @property
    def default_language(self) -> str:
        """Gets the default_language of this Service.


        :return: The default_language of this Service.
        :rtype: str
        """
        return self._default_language

    @default_language.setter
    def default_language(self, default_language: str):
        """Sets the default_language of this Service.


        :param default_language: The default_language of this Service.
        :type default_language: str
        """
        if default_language is None:
            raise ValueError("Invalid value for `default_language`, must not be `None`")  # noqa: E501

        self._default_language = default_language

    @property
    def id(self) -> str:
        """Gets the id of this Service.


        :return: The id of this Service.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Service.


        :param id: The id of this Service.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def region(self) -> str:
        """Gets the region of this Service.


        :return: The region of this Service.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this Service.


        :param region: The region of this Service.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def short_title(self) -> str:
        """Gets the short_title of this Service.


        :return: The short_title of this Service.
        :rtype: str
        """
        return self._short_title

    @short_title.setter
    def short_title(self, short_title: str):
        """Sets the short_title of this Service.


        :param short_title: The short_title of this Service.
        :type short_title: str
        """
        if short_title is None:
            raise ValueError("Invalid value for `short_title`, must not be `None`")  # noqa: E501

        self._short_title = short_title

    @property
    def title(self) -> str:
        """Gets the title of this Service.


        :return: The title of this Service.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Service.


        :param title: The title of this Service.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self) -> str:
        """Gets the type of this Service.


        :return: The type of this Service.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Service.


        :param type: The type of this Service.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
