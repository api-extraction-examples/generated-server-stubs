from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.personalised_music_track_image import PersonalisedMusicTrackImage
from openapi_server import util

from openapi_server.models.personalised_music_track_image import PersonalisedMusicTrackImage  # noqa: E501

class PersonalisedMusicTrackContribution(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, images=None, name=None, role=None):  # noqa: E501
        """PersonalisedMusicTrackContribution - a model defined in OpenAPI

        :param id: The id of this PersonalisedMusicTrackContribution.  # noqa: E501
        :type id: str
        :param images: The images of this PersonalisedMusicTrackContribution.  # noqa: E501
        :type images: List[PersonalisedMusicTrackImage]
        :param name: The name of this PersonalisedMusicTrackContribution.  # noqa: E501
        :type name: str
        :param role: The role of this PersonalisedMusicTrackContribution.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'id': str,
            'images': List[PersonalisedMusicTrackImage],
            'name': str,
            'role': str
        }

        self.attribute_map = {
            'id': 'id',
            'images': 'images',
            'name': 'name',
            'role': 'role'
        }

        self._id = id
        self._images = images
        self._name = name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'PersonalisedMusicTrackContribution':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PersonalisedMusicTrackContribution of this PersonalisedMusicTrackContribution.  # noqa: E501
        :rtype: PersonalisedMusicTrackContribution
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PersonalisedMusicTrackContribution.


        :return: The id of this PersonalisedMusicTrackContribution.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PersonalisedMusicTrackContribution.


        :param id: The id of this PersonalisedMusicTrackContribution.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def images(self) -> List[PersonalisedMusicTrackImage]:
        """Gets the images of this PersonalisedMusicTrackContribution.


        :return: The images of this PersonalisedMusicTrackContribution.
        :rtype: List[PersonalisedMusicTrackImage]
        """
        return self._images

    @images.setter
    def images(self, images: List[PersonalisedMusicTrackImage]):
        """Sets the images of this PersonalisedMusicTrackContribution.


        :param images: The images of this PersonalisedMusicTrackContribution.
        :type images: List[PersonalisedMusicTrackImage]
        """
        if images is None:
            raise ValueError("Invalid value for `images`, must not be `None`")  # noqa: E501

        self._images = images

    @property
    def name(self) -> str:
        """Gets the name of this PersonalisedMusicTrackContribution.


        :return: The name of this PersonalisedMusicTrackContribution.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PersonalisedMusicTrackContribution.


        :param name: The name of this PersonalisedMusicTrackContribution.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def role(self) -> str:
        """Gets the role of this PersonalisedMusicTrackContribution.


        :return: The role of this PersonalisedMusicTrackContribution.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this PersonalisedMusicTrackContribution.


        :param role: The role of this PersonalisedMusicTrackContribution.
        :type role: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role
