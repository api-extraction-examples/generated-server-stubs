from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Contact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, handle=None, name=None, service=None, url=None):  # noqa: E501
        """Contact - a model defined in OpenAPI

        :param handle: The handle of this Contact.  # noqa: E501
        :type handle: str
        :param name: The name of this Contact.  # noqa: E501
        :type name: str
        :param service: The service of this Contact.  # noqa: E501
        :type service: str
        :param url: The url of this Contact.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'handle': str,
            'name': str,
            'service': str,
            'url': str
        }

        self.attribute_map = {
            'handle': 'handle',
            'name': 'name',
            'service': 'service',
            'url': 'url'
        }

        self._handle = handle
        self._name = name
        self._service = service
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Contact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Contact of this Contact.  # noqa: E501
        :rtype: Contact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def handle(self) -> str:
        """Gets the handle of this Contact.


        :return: The handle of this Contact.
        :rtype: str
        """
        return self._handle

    @handle.setter
    def handle(self, handle: str):
        """Sets the handle of this Contact.


        :param handle: The handle of this Contact.
        :type handle: str
        """
        if handle is None:
            raise ValueError("Invalid value for `handle`, must not be `None`")  # noqa: E501

        self._handle = handle

    @property
    def name(self) -> str:
        """Gets the name of this Contact.


        :return: The name of this Contact.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Contact.


        :param name: The name of this Contact.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def service(self) -> str:
        """Gets the service of this Contact.


        :return: The service of this Contact.
        :rtype: str
        """
        return self._service

    @service.setter
    def service(self, service: str):
        """Sets the service of this Contact.


        :param service: The service of this Contact.
        :type service: str
        """
        if service is None:
            raise ValueError("Invalid value for `service`, must not be `None`")  # noqa: E501

        self._service = service

    @property
    def url(self) -> str:
        """Gets the url of this Contact.


        :return: The url of this Contact.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Contact.


        :param url: The url of this Contact.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
