from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.external_partner import ExternalPartner
from openapi_server import util

from openapi_server.models.external_partner import ExternalPartner  # noqa: E501

class MusicPopularityPlaylist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories=None, comments_enabled=None, description=None, external_partners=None, genre=None, id=None, image_pid=None, image_url=None, kind=None, mood=None, one_off=None, playlist_playback_type=None, score=None, service_id=None, title=None, updated_at=None, visibility=None, wide_image_pid=None, wide_image_url=None):  # noqa: E501
        """MusicPopularityPlaylist - a model defined in OpenAPI

        :param categories: The categories of this MusicPopularityPlaylist.  # noqa: E501
        :type categories: List[str]
        :param comments_enabled: The comments_enabled of this MusicPopularityPlaylist.  # noqa: E501
        :type comments_enabled: bool
        :param description: The description of this MusicPopularityPlaylist.  # noqa: E501
        :type description: str
        :param external_partners: The external_partners of this MusicPopularityPlaylist.  # noqa: E501
        :type external_partners: List[ExternalPartner]
        :param genre: The genre of this MusicPopularityPlaylist.  # noqa: E501
        :type genre: str
        :param id: The id of this MusicPopularityPlaylist.  # noqa: E501
        :type id: str
        :param image_pid: The image_pid of this MusicPopularityPlaylist.  # noqa: E501
        :type image_pid: str
        :param image_url: The image_url of this MusicPopularityPlaylist.  # noqa: E501
        :type image_url: str
        :param kind: The kind of this MusicPopularityPlaylist.  # noqa: E501
        :type kind: str
        :param mood: The mood of this MusicPopularityPlaylist.  # noqa: E501
        :type mood: str
        :param one_off: The one_off of this MusicPopularityPlaylist.  # noqa: E501
        :type one_off: bool
        :param playlist_playback_type: The playlist_playback_type of this MusicPopularityPlaylist.  # noqa: E501
        :type playlist_playback_type: str
        :param score: The score of this MusicPopularityPlaylist.  # noqa: E501
        :type score: int
        :param service_id: The service_id of this MusicPopularityPlaylist.  # noqa: E501
        :type service_id: str
        :param title: The title of this MusicPopularityPlaylist.  # noqa: E501
        :type title: str
        :param updated_at: The updated_at of this MusicPopularityPlaylist.  # noqa: E501
        :type updated_at: str
        :param visibility: The visibility of this MusicPopularityPlaylist.  # noqa: E501
        :type visibility: str
        :param wide_image_pid: The wide_image_pid of this MusicPopularityPlaylist.  # noqa: E501
        :type wide_image_pid: str
        :param wide_image_url: The wide_image_url of this MusicPopularityPlaylist.  # noqa: E501
        :type wide_image_url: str
        """
        self.openapi_types = {
            'categories': List[str],
            'comments_enabled': bool,
            'description': str,
            'external_partners': List[ExternalPartner],
            'genre': str,
            'id': str,
            'image_pid': str,
            'image_url': str,
            'kind': str,
            'mood': str,
            'one_off': bool,
            'playlist_playback_type': str,
            'score': int,
            'service_id': str,
            'title': str,
            'updated_at': str,
            'visibility': str,
            'wide_image_pid': str,
            'wide_image_url': str
        }

        self.attribute_map = {
            'categories': 'categories',
            'comments_enabled': 'commentsEnabled',
            'description': 'description',
            'external_partners': 'externalPartners',
            'genre': 'genre',
            'id': 'id',
            'image_pid': 'imagePid',
            'image_url': 'imageUrl',
            'kind': 'kind',
            'mood': 'mood',
            'one_off': 'oneOff',
            'playlist_playback_type': 'playlistPlaybackType',
            'score': 'score',
            'service_id': 'serviceId',
            'title': 'title',
            'updated_at': 'updatedAt',
            'visibility': 'visibility',
            'wide_image_pid': 'wideImagePid',
            'wide_image_url': 'wideImageUrl'
        }

        self._categories = categories
        self._comments_enabled = comments_enabled
        self._description = description
        self._external_partners = external_partners
        self._genre = genre
        self._id = id
        self._image_pid = image_pid
        self._image_url = image_url
        self._kind = kind
        self._mood = mood
        self._one_off = one_off
        self._playlist_playback_type = playlist_playback_type
        self._score = score
        self._service_id = service_id
        self._title = title
        self._updated_at = updated_at
        self._visibility = visibility
        self._wide_image_pid = wide_image_pid
        self._wide_image_url = wide_image_url

    @classmethod
    def from_dict(cls, dikt) -> 'MusicPopularityPlaylist':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicPopularityPlaylist of this MusicPopularityPlaylist.  # noqa: E501
        :rtype: MusicPopularityPlaylist
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self) -> List[str]:
        """Gets the categories of this MusicPopularityPlaylist.


        :return: The categories of this MusicPopularityPlaylist.
        :rtype: List[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: List[str]):
        """Sets the categories of this MusicPopularityPlaylist.


        :param categories: The categories of this MusicPopularityPlaylist.
        :type categories: List[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")  # noqa: E501

        self._categories = categories

    @property
    def comments_enabled(self) -> bool:
        """Gets the comments_enabled of this MusicPopularityPlaylist.


        :return: The comments_enabled of this MusicPopularityPlaylist.
        :rtype: bool
        """
        return self._comments_enabled

    @comments_enabled.setter
    def comments_enabled(self, comments_enabled: bool):
        """Sets the comments_enabled of this MusicPopularityPlaylist.


        :param comments_enabled: The comments_enabled of this MusicPopularityPlaylist.
        :type comments_enabled: bool
        """
        if comments_enabled is None:
            raise ValueError("Invalid value for `comments_enabled`, must not be `None`")  # noqa: E501

        self._comments_enabled = comments_enabled

    @property
    def description(self) -> str:
        """Gets the description of this MusicPopularityPlaylist.


        :return: The description of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this MusicPopularityPlaylist.


        :param description: The description of this MusicPopularityPlaylist.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def external_partners(self) -> List[ExternalPartner]:
        """Gets the external_partners of this MusicPopularityPlaylist.


        :return: The external_partners of this MusicPopularityPlaylist.
        :rtype: List[ExternalPartner]
        """
        return self._external_partners

    @external_partners.setter
    def external_partners(self, external_partners: List[ExternalPartner]):
        """Sets the external_partners of this MusicPopularityPlaylist.


        :param external_partners: The external_partners of this MusicPopularityPlaylist.
        :type external_partners: List[ExternalPartner]
        """
        if external_partners is None:
            raise ValueError("Invalid value for `external_partners`, must not be `None`")  # noqa: E501

        self._external_partners = external_partners

    @property
    def genre(self) -> str:
        """Gets the genre of this MusicPopularityPlaylist.


        :return: The genre of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._genre

    @genre.setter
    def genre(self, genre: str):
        """Sets the genre of this MusicPopularityPlaylist.


        :param genre: The genre of this MusicPopularityPlaylist.
        :type genre: str
        """
        if genre is None:
            raise ValueError("Invalid value for `genre`, must not be `None`")  # noqa: E501

        self._genre = genre

    @property
    def id(self) -> str:
        """Gets the id of this MusicPopularityPlaylist.


        :return: The id of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MusicPopularityPlaylist.


        :param id: The id of this MusicPopularityPlaylist.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_pid(self) -> str:
        """Gets the image_pid of this MusicPopularityPlaylist.


        :return: The image_pid of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._image_pid

    @image_pid.setter
    def image_pid(self, image_pid: str):
        """Sets the image_pid of this MusicPopularityPlaylist.


        :param image_pid: The image_pid of this MusicPopularityPlaylist.
        :type image_pid: str
        """
        if image_pid is None:
            raise ValueError("Invalid value for `image_pid`, must not be `None`")  # noqa: E501

        self._image_pid = image_pid

    @property
    def image_url(self) -> str:
        """Gets the image_url of this MusicPopularityPlaylist.


        :return: The image_url of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this MusicPopularityPlaylist.


        :param image_url: The image_url of this MusicPopularityPlaylist.
        :type image_url: str
        """
        if image_url is None:
            raise ValueError("Invalid value for `image_url`, must not be `None`")  # noqa: E501

        self._image_url = image_url

    @property
    def kind(self) -> str:
        """Gets the kind of this MusicPopularityPlaylist.


        :return: The kind of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this MusicPopularityPlaylist.


        :param kind: The kind of this MusicPopularityPlaylist.
        :type kind: str
        """
        if kind is None:
            raise ValueError("Invalid value for `kind`, must not be `None`")  # noqa: E501

        self._kind = kind

    @property
    def mood(self) -> str:
        """Gets the mood of this MusicPopularityPlaylist.


        :return: The mood of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._mood

    @mood.setter
    def mood(self, mood: str):
        """Sets the mood of this MusicPopularityPlaylist.


        :param mood: The mood of this MusicPopularityPlaylist.
        :type mood: str
        """
        if mood is None:
            raise ValueError("Invalid value for `mood`, must not be `None`")  # noqa: E501

        self._mood = mood

    @property
    def one_off(self) -> bool:
        """Gets the one_off of this MusicPopularityPlaylist.


        :return: The one_off of this MusicPopularityPlaylist.
        :rtype: bool
        """
        return self._one_off

    @one_off.setter
    def one_off(self, one_off: bool):
        """Sets the one_off of this MusicPopularityPlaylist.


        :param one_off: The one_off of this MusicPopularityPlaylist.
        :type one_off: bool
        """
        if one_off is None:
            raise ValueError("Invalid value for `one_off`, must not be `None`")  # noqa: E501

        self._one_off = one_off

    @property
    def playlist_playback_type(self) -> str:
        """Gets the playlist_playback_type of this MusicPopularityPlaylist.


        :return: The playlist_playback_type of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._playlist_playback_type

    @playlist_playback_type.setter
    def playlist_playback_type(self, playlist_playback_type: str):
        """Sets the playlist_playback_type of this MusicPopularityPlaylist.


        :param playlist_playback_type: The playlist_playback_type of this MusicPopularityPlaylist.
        :type playlist_playback_type: str
        """
        if playlist_playback_type is None:
            raise ValueError("Invalid value for `playlist_playback_type`, must not be `None`")  # noqa: E501

        self._playlist_playback_type = playlist_playback_type

    @property
    def score(self) -> int:
        """Gets the score of this MusicPopularityPlaylist.


        :return: The score of this MusicPopularityPlaylist.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this MusicPopularityPlaylist.


        :param score: The score of this MusicPopularityPlaylist.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def service_id(self) -> str:
        """Gets the service_id of this MusicPopularityPlaylist.


        :return: The service_id of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this MusicPopularityPlaylist.


        :param service_id: The service_id of this MusicPopularityPlaylist.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def title(self) -> str:
        """Gets the title of this MusicPopularityPlaylist.


        :return: The title of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this MusicPopularityPlaylist.


        :param title: The title of this MusicPopularityPlaylist.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this MusicPopularityPlaylist.


        :return: The updated_at of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this MusicPopularityPlaylist.


        :param updated_at: The updated_at of this MusicPopularityPlaylist.
        :type updated_at: str
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def visibility(self) -> str:
        """Gets the visibility of this MusicPopularityPlaylist.


        :return: The visibility of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this MusicPopularityPlaylist.


        :param visibility: The visibility of this MusicPopularityPlaylist.
        :type visibility: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def wide_image_pid(self) -> str:
        """Gets the wide_image_pid of this MusicPopularityPlaylist.


        :return: The wide_image_pid of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._wide_image_pid

    @wide_image_pid.setter
    def wide_image_pid(self, wide_image_pid: str):
        """Sets the wide_image_pid of this MusicPopularityPlaylist.


        :param wide_image_pid: The wide_image_pid of this MusicPopularityPlaylist.
        :type wide_image_pid: str
        """
        if wide_image_pid is None:
            raise ValueError("Invalid value for `wide_image_pid`, must not be `None`")  # noqa: E501

        self._wide_image_pid = wide_image_pid

    @property
    def wide_image_url(self) -> str:
        """Gets the wide_image_url of this MusicPopularityPlaylist.


        :return: The wide_image_url of this MusicPopularityPlaylist.
        :rtype: str
        """
        return self._wide_image_url

    @wide_image_url.setter
    def wide_image_url(self, wide_image_url: str):
        """Sets the wide_image_url of this MusicPopularityPlaylist.


        :param wide_image_url: The wide_image_url of this MusicPopularityPlaylist.
        :type wide_image_url: str
        """
        if wide_image_url is None:
            raise ValueError("Invalid value for `wide_image_url`, must not be `None`")  # noqa: E501

        self._wide_image_url = wide_image_url
