from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Body2(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, platform=None, service_id=None):  # noqa: E501
        """Body2 - a model defined in OpenAPI

        :param platform: The platform of this Body2.  # noqa: E501
        :type platform: str
        :param service_id: The service_id of this Body2.  # noqa: E501
        :type service_id: str
        """
        self.openapi_types = {
            'platform': str,
            'service_id': str
        }

        self.attribute_map = {
            'platform': 'platform',
            'service_id': 'service_id'
        }

        self._platform = platform
        self._service_id = service_id

    @classmethod
    def from_dict(cls, dikt) -> 'Body2':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Body_2 of this Body2.  # noqa: E501
        :rtype: Body2
        """
        return util.deserialize_model(dikt, cls)

    @property
    def platform(self) -> str:
        """Gets the platform of this Body2.


        :return: The platform of this Body2.
        :rtype: str
        """
        return self._platform

    @platform.setter
    def platform(self, platform: str):
        """Sets the platform of this Body2.


        :param platform: The platform of this Body2.
        :type platform: str
        """
        allowed_values = ["responsiveweb", "app"]  # noqa: E501
        if platform not in allowed_values:
            raise ValueError(
                "Invalid value for `platform` ({0}), must be one of {1}"
                .format(platform, allowed_values)
            )

        self._platform = platform

    @property
    def service_id(self) -> str:
        """Gets the service_id of this Body2.


        :return: The service_id of this Body2.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this Body2.


        :param service_id: The service_id of this Body2.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id
