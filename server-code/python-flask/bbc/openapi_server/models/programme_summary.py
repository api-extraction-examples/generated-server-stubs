from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProgrammeSummary(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, pid=None, type=None):  # noqa: E501
        """ProgrammeSummary - a model defined in OpenAPI

        :param pid: The pid of this ProgrammeSummary.  # noqa: E501
        :type pid: str
        :param type: The type of this ProgrammeSummary.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'pid': str,
            'type': str
        }

        self.attribute_map = {
            'pid': 'pid',
            'type': 'type'
        }

        self._pid = pid
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'ProgrammeSummary':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProgrammeSummary of this ProgrammeSummary.  # noqa: E501
        :rtype: ProgrammeSummary
        """
        return util.deserialize_model(dikt, cls)

    @property
    def pid(self) -> str:
        """Gets the pid of this ProgrammeSummary.


        :return: The pid of this ProgrammeSummary.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid: str):
        """Sets the pid of this ProgrammeSummary.


        :param pid: The pid of this ProgrammeSummary.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def type(self) -> str:
        """Gets the type of this ProgrammeSummary.


        :return: The type of this ProgrammeSummary.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ProgrammeSummary.


        :param type: The type of this ProgrammeSummary.
        :type type: str
        """
        allowed_values = ["brand_summary", "series_summary", "episode_summary", "clip_summary"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
