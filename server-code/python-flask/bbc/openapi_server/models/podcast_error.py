from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PodcastError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href=None, id=None, message=None, replied_at=None, status=None):  # noqa: E501
        """PodcastError - a model defined in OpenAPI

        :param href: The href of this PodcastError.  # noqa: E501
        :type href: str
        :param id: The id of this PodcastError.  # noqa: E501
        :type id: str
        :param message: The message of this PodcastError.  # noqa: E501
        :type message: str
        :param replied_at: The replied_at of this PodcastError.  # noqa: E501
        :type replied_at: str
        :param status: The status of this PodcastError.  # noqa: E501
        :type status: float
        """
        self.openapi_types = {
            'href': str,
            'id': str,
            'message': str,
            'replied_at': str,
            'status': float
        }

        self.attribute_map = {
            'href': 'href',
            'id': 'id',
            'message': 'message',
            'replied_at': 'replied_at',
            'status': 'status'
        }

        self._href = href
        self._id = id
        self._message = message
        self._replied_at = replied_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'PodcastError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PodcastError of this PodcastError.  # noqa: E501
        :rtype: PodcastError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self) -> str:
        """Gets the href of this PodcastError.


        :return: The href of this PodcastError.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this PodcastError.


        :param href: The href of this PodcastError.
        :type href: str
        """

        self._href = href

    @property
    def id(self) -> str:
        """Gets the id of this PodcastError.


        :return: The id of this PodcastError.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PodcastError.


        :param id: The id of this PodcastError.
        :type id: str
        """

        self._id = id

    @property
    def message(self) -> str:
        """Gets the message of this PodcastError.


        :return: The message of this PodcastError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this PodcastError.


        :param message: The message of this PodcastError.
        :type message: str
        """

        self._message = message

    @property
    def replied_at(self) -> str:
        """Gets the replied_at of this PodcastError.


        :return: The replied_at of this PodcastError.
        :rtype: str
        """
        return self._replied_at

    @replied_at.setter
    def replied_at(self, replied_at: str):
        """Sets the replied_at of this PodcastError.


        :param replied_at: The replied_at of this PodcastError.
        :type replied_at: str
        """

        self._replied_at = replied_at

    @property
    def status(self) -> float:
        """Gets the status of this PodcastError.


        :return: The status of this PodcastError.
        :rtype: float
        """
        return self._status

    @status.setter
    def status(self, status: float):
        """Sets the status of this PodcastError.


        :param status: The status of this PodcastError.
        :type status: float
        """

        self._status = status
