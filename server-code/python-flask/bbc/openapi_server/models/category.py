from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.child_category import ChildCategory
from openapi_server import util

from openapi_server.models.child_category import ChildCategory  # noqa: E501

class Category(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category_type=None, child_categories=None, depth=None, id=None, pip_id=None, title=None, type=None, url_key=None):  # noqa: E501
        """Category - a model defined in OpenAPI

        :param category_type: The category_type of this Category.  # noqa: E501
        :type category_type: str
        :param child_categories: The child_categories of this Category.  # noqa: E501
        :type child_categories: List[ChildCategory]
        :param depth: The depth of this Category.  # noqa: E501
        :type depth: int
        :param id: The id of this Category.  # noqa: E501
        :type id: str
        :param pip_id: The pip_id of this Category.  # noqa: E501
        :type pip_id: str
        :param title: The title of this Category.  # noqa: E501
        :type title: str
        :param type: The type of this Category.  # noqa: E501
        :type type: str
        :param url_key: The url_key of this Category.  # noqa: E501
        :type url_key: str
        """
        self.openapi_types = {
            'category_type': str,
            'child_categories': List[ChildCategory],
            'depth': int,
            'id': str,
            'pip_id': str,
            'title': str,
            'type': str,
            'url_key': str
        }

        self.attribute_map = {
            'category_type': 'category_type',
            'child_categories': 'child_categories',
            'depth': 'depth',
            'id': 'id',
            'pip_id': 'pip_id',
            'title': 'title',
            'type': 'type',
            'url_key': 'url_key'
        }

        self._category_type = category_type
        self._child_categories = child_categories
        self._depth = depth
        self._id = id
        self._pip_id = pip_id
        self._title = title
        self._type = type
        self._url_key = url_key

    @classmethod
    def from_dict(cls, dikt) -> 'Category':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Category of this Category.  # noqa: E501
        :rtype: Category
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category_type(self) -> str:
        """Gets the category_type of this Category.


        :return: The category_type of this Category.
        :rtype: str
        """
        return self._category_type

    @category_type.setter
    def category_type(self, category_type: str):
        """Sets the category_type of this Category.


        :param category_type: The category_type of this Category.
        :type category_type: str
        """
        if category_type is None:
            raise ValueError("Invalid value for `category_type`, must not be `None`")  # noqa: E501

        self._category_type = category_type

    @property
    def child_categories(self) -> List[ChildCategory]:
        """Gets the child_categories of this Category.


        :return: The child_categories of this Category.
        :rtype: List[ChildCategory]
        """
        return self._child_categories

    @child_categories.setter
    def child_categories(self, child_categories: List[ChildCategory]):
        """Sets the child_categories of this Category.


        :param child_categories: The child_categories of this Category.
        :type child_categories: List[ChildCategory]
        """
        if child_categories is None:
            raise ValueError("Invalid value for `child_categories`, must not be `None`")  # noqa: E501

        self._child_categories = child_categories

    @property
    def depth(self) -> int:
        """Gets the depth of this Category.


        :return: The depth of this Category.
        :rtype: int
        """
        return self._depth

    @depth.setter
    def depth(self, depth: int):
        """Sets the depth of this Category.


        :param depth: The depth of this Category.
        :type depth: int
        """
        if depth is None:
            raise ValueError("Invalid value for `depth`, must not be `None`")  # noqa: E501

        self._depth = depth

    @property
    def id(self) -> str:
        """Gets the id of this Category.


        :return: The id of this Category.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Category.


        :param id: The id of this Category.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def pip_id(self) -> str:
        """Gets the pip_id of this Category.


        :return: The pip_id of this Category.
        :rtype: str
        """
        return self._pip_id

    @pip_id.setter
    def pip_id(self, pip_id: str):
        """Sets the pip_id of this Category.


        :param pip_id: The pip_id of this Category.
        :type pip_id: str
        """
        if pip_id is None:
            raise ValueError("Invalid value for `pip_id`, must not be `None`")  # noqa: E501

        self._pip_id = pip_id

    @property
    def title(self) -> str:
        """Gets the title of this Category.


        :return: The title of this Category.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Category.


        :param title: The title of this Category.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def type(self) -> str:
        """Gets the type of this Category.


        :return: The type of this Category.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Category.


        :param type: The type of this Category.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def url_key(self) -> str:
        """Gets the url_key of this Category.


        :return: The url_key of this Category.
        :rtype: str
        """
        return self._url_key

    @url_key.setter
    def url_key(self, url_key: str):
        """Sets the url_key of this Category.


        :param url_key: The url_key of this Category.
        :type url_key: str
        """
        if url_key is None:
            raise ValueError("Invalid value for `url_key`, must not be `None`")  # noqa: E501

        self._url_key = url_key
