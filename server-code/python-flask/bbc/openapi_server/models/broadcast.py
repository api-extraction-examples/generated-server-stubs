from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.programme_summary import ProgrammeSummary
from openapi_server import util

from openapi_server.models.programme_summary import ProgrammeSummary  # noqa: E501

class Broadcast(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, duration=None, end=None, is_audio_described=None, is_blanked=None, is_critical=None, is_live=None, is_repeat=None, is_webcast=None, pid=None, programme=None, service_id=None, start=None, type=None, version_pid=None):  # noqa: E501
        """Broadcast - a model defined in OpenAPI

        :param duration: The duration of this Broadcast.  # noqa: E501
        :type duration: int
        :param end: The end of this Broadcast.  # noqa: E501
        :type end: str
        :param is_audio_described: The is_audio_described of this Broadcast.  # noqa: E501
        :type is_audio_described: bool
        :param is_blanked: The is_blanked of this Broadcast.  # noqa: E501
        :type is_blanked: bool
        :param is_critical: The is_critical of this Broadcast.  # noqa: E501
        :type is_critical: bool
        :param is_live: The is_live of this Broadcast.  # noqa: E501
        :type is_live: bool
        :param is_repeat: The is_repeat of this Broadcast.  # noqa: E501
        :type is_repeat: bool
        :param is_webcast: The is_webcast of this Broadcast.  # noqa: E501
        :type is_webcast: bool
        :param pid: The pid of this Broadcast.  # noqa: E501
        :type pid: str
        :param programme: The programme of this Broadcast.  # noqa: E501
        :type programme: ProgrammeSummary
        :param service_id: The service_id of this Broadcast.  # noqa: E501
        :type service_id: str
        :param start: The start of this Broadcast.  # noqa: E501
        :type start: str
        :param type: The type of this Broadcast.  # noqa: E501
        :type type: str
        :param version_pid: The version_pid of this Broadcast.  # noqa: E501
        :type version_pid: str
        """
        self.openapi_types = {
            'duration': int,
            'end': str,
            'is_audio_described': bool,
            'is_blanked': bool,
            'is_critical': bool,
            'is_live': bool,
            'is_repeat': bool,
            'is_webcast': bool,
            'pid': str,
            'programme': ProgrammeSummary,
            'service_id': str,
            'start': str,
            'type': str,
            'version_pid': str
        }

        self.attribute_map = {
            'duration': 'duration',
            'end': 'end',
            'is_audio_described': 'is_audio_described',
            'is_blanked': 'is_blanked',
            'is_critical': 'is_critical',
            'is_live': 'is_live',
            'is_repeat': 'is_repeat',
            'is_webcast': 'is_webcast',
            'pid': 'pid',
            'programme': 'programme',
            'service_id': 'service_id',
            'start': 'start',
            'type': 'type',
            'version_pid': 'version_pid'
        }

        self._duration = duration
        self._end = end
        self._is_audio_described = is_audio_described
        self._is_blanked = is_blanked
        self._is_critical = is_critical
        self._is_live = is_live
        self._is_repeat = is_repeat
        self._is_webcast = is_webcast
        self._pid = pid
        self._programme = programme
        self._service_id = service_id
        self._start = start
        self._type = type
        self._version_pid = version_pid

    @classmethod
    def from_dict(cls, dikt) -> 'Broadcast':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Broadcast of this Broadcast.  # noqa: E501
        :rtype: Broadcast
        """
        return util.deserialize_model(dikt, cls)

    @property
    def duration(self) -> int:
        """Gets the duration of this Broadcast.


        :return: The duration of this Broadcast.
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration: int):
        """Sets the duration of this Broadcast.


        :param duration: The duration of this Broadcast.
        :type duration: int
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def end(self) -> str:
        """Gets the end of this Broadcast.


        :return: The end of this Broadcast.
        :rtype: str
        """
        return self._end

    @end.setter
    def end(self, end: str):
        """Sets the end of this Broadcast.


        :param end: The end of this Broadcast.
        :type end: str
        """
        if end is None:
            raise ValueError("Invalid value for `end`, must not be `None`")  # noqa: E501

        self._end = end

    @property
    def is_audio_described(self) -> bool:
        """Gets the is_audio_described of this Broadcast.


        :return: The is_audio_described of this Broadcast.
        :rtype: bool
        """
        return self._is_audio_described

    @is_audio_described.setter
    def is_audio_described(self, is_audio_described: bool):
        """Sets the is_audio_described of this Broadcast.


        :param is_audio_described: The is_audio_described of this Broadcast.
        :type is_audio_described: bool
        """
        if is_audio_described is None:
            raise ValueError("Invalid value for `is_audio_described`, must not be `None`")  # noqa: E501

        self._is_audio_described = is_audio_described

    @property
    def is_blanked(self) -> bool:
        """Gets the is_blanked of this Broadcast.


        :return: The is_blanked of this Broadcast.
        :rtype: bool
        """
        return self._is_blanked

    @is_blanked.setter
    def is_blanked(self, is_blanked: bool):
        """Sets the is_blanked of this Broadcast.


        :param is_blanked: The is_blanked of this Broadcast.
        :type is_blanked: bool
        """
        if is_blanked is None:
            raise ValueError("Invalid value for `is_blanked`, must not be `None`")  # noqa: E501

        self._is_blanked = is_blanked

    @property
    def is_critical(self) -> bool:
        """Gets the is_critical of this Broadcast.


        :return: The is_critical of this Broadcast.
        :rtype: bool
        """
        return self._is_critical

    @is_critical.setter
    def is_critical(self, is_critical: bool):
        """Sets the is_critical of this Broadcast.


        :param is_critical: The is_critical of this Broadcast.
        :type is_critical: bool
        """
        if is_critical is None:
            raise ValueError("Invalid value for `is_critical`, must not be `None`")  # noqa: E501

        self._is_critical = is_critical

    @property
    def is_live(self) -> bool:
        """Gets the is_live of this Broadcast.


        :return: The is_live of this Broadcast.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live: bool):
        """Sets the is_live of this Broadcast.


        :param is_live: The is_live of this Broadcast.
        :type is_live: bool
        """
        if is_live is None:
            raise ValueError("Invalid value for `is_live`, must not be `None`")  # noqa: E501

        self._is_live = is_live

    @property
    def is_repeat(self) -> bool:
        """Gets the is_repeat of this Broadcast.


        :return: The is_repeat of this Broadcast.
        :rtype: bool
        """
        return self._is_repeat

    @is_repeat.setter
    def is_repeat(self, is_repeat: bool):
        """Sets the is_repeat of this Broadcast.


        :param is_repeat: The is_repeat of this Broadcast.
        :type is_repeat: bool
        """
        if is_repeat is None:
            raise ValueError("Invalid value for `is_repeat`, must not be `None`")  # noqa: E501

        self._is_repeat = is_repeat

    @property
    def is_webcast(self) -> bool:
        """Gets the is_webcast of this Broadcast.


        :return: The is_webcast of this Broadcast.
        :rtype: bool
        """
        return self._is_webcast

    @is_webcast.setter
    def is_webcast(self, is_webcast: bool):
        """Sets the is_webcast of this Broadcast.


        :param is_webcast: The is_webcast of this Broadcast.
        :type is_webcast: bool
        """
        if is_webcast is None:
            raise ValueError("Invalid value for `is_webcast`, must not be `None`")  # noqa: E501

        self._is_webcast = is_webcast

    @property
    def pid(self) -> str:
        """Gets the pid of this Broadcast.


        :return: The pid of this Broadcast.
        :rtype: str
        """
        return self._pid

    @pid.setter
    def pid(self, pid: str):
        """Sets the pid of this Broadcast.


        :param pid: The pid of this Broadcast.
        :type pid: str
        """
        if pid is None:
            raise ValueError("Invalid value for `pid`, must not be `None`")  # noqa: E501

        self._pid = pid

    @property
    def programme(self) -> ProgrammeSummary:
        """Gets the programme of this Broadcast.


        :return: The programme of this Broadcast.
        :rtype: ProgrammeSummary
        """
        return self._programme

    @programme.setter
    def programme(self, programme: ProgrammeSummary):
        """Sets the programme of this Broadcast.


        :param programme: The programme of this Broadcast.
        :type programme: ProgrammeSummary
        """

        self._programme = programme

    @property
    def service_id(self) -> str:
        """Gets the service_id of this Broadcast.


        :return: The service_id of this Broadcast.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this Broadcast.


        :param service_id: The service_id of this Broadcast.
        :type service_id: str
        """
        if service_id is None:
            raise ValueError("Invalid value for `service_id`, must not be `None`")  # noqa: E501

        self._service_id = service_id

    @property
    def start(self) -> str:
        """Gets the start of this Broadcast.


        :return: The start of this Broadcast.
        :rtype: str
        """
        return self._start

    @start.setter
    def start(self, start: str):
        """Sets the start of this Broadcast.


        :param start: The start of this Broadcast.
        :type start: str
        """
        if start is None:
            raise ValueError("Invalid value for `start`, must not be `None`")  # noqa: E501

        self._start = start

    @property
    def type(self) -> str:
        """Gets the type of this Broadcast.


        :return: The type of this Broadcast.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Broadcast.


        :param type: The type of this Broadcast.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version_pid(self) -> str:
        """Gets the version_pid of this Broadcast.


        :return: The version_pid of this Broadcast.
        :rtype: str
        """
        return self._version_pid

    @version_pid.setter
    def version_pid(self, version_pid: str):
        """Sets the version_pid of this Broadcast.


        :param version_pid: The version_pid of this Broadcast.
        :type version_pid: str
        """
        if version_pid is None:
            raise ValueError("Invalid value for `version_pid`, must not be `None`")  # noqa: E501

        self._version_pid = version_pid
