from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class MusicPopularityArtist(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, id=None, image_pid=None, name=None, score=None, sort_name=None):  # noqa: E501
        """MusicPopularityArtist - a model defined in OpenAPI

        :param gid: The gid of this MusicPopularityArtist.  # noqa: E501
        :type gid: str
        :param id: The id of this MusicPopularityArtist.  # noqa: E501
        :type id: str
        :param image_pid: The image_pid of this MusicPopularityArtist.  # noqa: E501
        :type image_pid: str
        :param name: The name of this MusicPopularityArtist.  # noqa: E501
        :type name: str
        :param score: The score of this MusicPopularityArtist.  # noqa: E501
        :type score: int
        :param sort_name: The sort_name of this MusicPopularityArtist.  # noqa: E501
        :type sort_name: str
        """
        self.openapi_types = {
            'gid': str,
            'id': str,
            'image_pid': str,
            'name': str,
            'score': int,
            'sort_name': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'id': 'id',
            'image_pid': 'imagePid',
            'name': 'name',
            'score': 'score',
            'sort_name': 'sortName'
        }

        self._gid = gid
        self._id = id
        self._image_pid = image_pid
        self._name = name
        self._score = score
        self._sort_name = sort_name

    @classmethod
    def from_dict(cls, dikt) -> 'MusicPopularityArtist':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MusicPopularityArtist of this MusicPopularityArtist.  # noqa: E501
        :rtype: MusicPopularityArtist
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this MusicPopularityArtist.


        :return: The gid of this MusicPopularityArtist.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this MusicPopularityArtist.


        :param gid: The gid of this MusicPopularityArtist.
        :type gid: str
        """
        if gid is None:
            raise ValueError("Invalid value for `gid`, must not be `None`")  # noqa: E501

        self._gid = gid

    @property
    def id(self) -> str:
        """Gets the id of this MusicPopularityArtist.


        :return: The id of this MusicPopularityArtist.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this MusicPopularityArtist.


        :param id: The id of this MusicPopularityArtist.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def image_pid(self) -> str:
        """Gets the image_pid of this MusicPopularityArtist.


        :return: The image_pid of this MusicPopularityArtist.
        :rtype: str
        """
        return self._image_pid

    @image_pid.setter
    def image_pid(self, image_pid: str):
        """Sets the image_pid of this MusicPopularityArtist.


        :param image_pid: The image_pid of this MusicPopularityArtist.
        :type image_pid: str
        """
        if image_pid is None:
            raise ValueError("Invalid value for `image_pid`, must not be `None`")  # noqa: E501

        self._image_pid = image_pid

    @property
    def name(self) -> str:
        """Gets the name of this MusicPopularityArtist.


        :return: The name of this MusicPopularityArtist.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MusicPopularityArtist.


        :param name: The name of this MusicPopularityArtist.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def score(self) -> int:
        """Gets the score of this MusicPopularityArtist.


        :return: The score of this MusicPopularityArtist.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this MusicPopularityArtist.


        :param score: The score of this MusicPopularityArtist.
        :type score: int
        """
        if score is None:
            raise ValueError("Invalid value for `score`, must not be `None`")  # noqa: E501

        self._score = score

    @property
    def sort_name(self) -> str:
        """Gets the sort_name of this MusicPopularityArtist.


        :return: The sort_name of this MusicPopularityArtist.
        :rtype: str
        """
        return self._sort_name

    @sort_name.setter
    def sort_name(self, sort_name: str):
        """Sets the sort_name of this MusicPopularityArtist.


        :param sort_name: The sort_name of this MusicPopularityArtist.
        :type sort_name: str
        """
        if sort_name is None:
            raise ValueError("Invalid value for `sort_name`, must not be `None`")  # noqa: E501

        self._sort_name = sort_name
