from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableVersions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, available=None, available_from_date=None, available_to_date=None, duration=None, has_guidance=None, media_set=None, type=None, version_pid=None, version_type=None):  # noqa: E501
        """AvailableVersions - a model defined in OpenAPI

        :param available: The available of this AvailableVersions.  # noqa: E501
        :type available: str
        :param available_from_date: The available_from_date of this AvailableVersions.  # noqa: E501
        :type available_from_date: str
        :param available_to_date: The available_to_date of this AvailableVersions.  # noqa: E501
        :type available_to_date: str
        :param duration: The duration of this AvailableVersions.  # noqa: E501
        :type duration: str
        :param has_guidance: The has_guidance of this AvailableVersions.  # noqa: E501
        :type has_guidance: bool
        :param media_set: The media_set of this AvailableVersions.  # noqa: E501
        :type media_set: str
        :param type: The type of this AvailableVersions.  # noqa: E501
        :type type: str
        :param version_pid: The version_pid of this AvailableVersions.  # noqa: E501
        :type version_pid: str
        :param version_type: The version_type of this AvailableVersions.  # noqa: E501
        :type version_type: str
        """
        self.openapi_types = {
            'available': str,
            'available_from_date': str,
            'available_to_date': str,
            'duration': str,
            'has_guidance': bool,
            'media_set': str,
            'type': str,
            'version_pid': str,
            'version_type': str
        }

        self.attribute_map = {
            'available': 'available',
            'available_from_date': 'available_from_date',
            'available_to_date': 'available_to_date',
            'duration': 'duration',
            'has_guidance': 'has_guidance',
            'media_set': 'media_set',
            'type': 'type',
            'version_pid': 'version_pid',
            'version_type': 'version_type'
        }

        self._available = available
        self._available_from_date = available_from_date
        self._available_to_date = available_to_date
        self._duration = duration
        self._has_guidance = has_guidance
        self._media_set = media_set
        self._type = type
        self._version_pid = version_pid
        self._version_type = version_type

    @classmethod
    def from_dict(cls, dikt) -> 'AvailableVersions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AvailableVersions of this AvailableVersions.  # noqa: E501
        :rtype: AvailableVersions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def available(self) -> str:
        """Gets the available of this AvailableVersions.


        :return: The available of this AvailableVersions.
        :rtype: str
        """
        return self._available

    @available.setter
    def available(self, available: str):
        """Sets the available of this AvailableVersions.


        :param available: The available of this AvailableVersions.
        :type available: str
        """
        if available is None:
            raise ValueError("Invalid value for `available`, must not be `None`")  # noqa: E501

        self._available = available

    @property
    def available_from_date(self) -> str:
        """Gets the available_from_date of this AvailableVersions.


        :return: The available_from_date of this AvailableVersions.
        :rtype: str
        """
        return self._available_from_date

    @available_from_date.setter
    def available_from_date(self, available_from_date: str):
        """Sets the available_from_date of this AvailableVersions.


        :param available_from_date: The available_from_date of this AvailableVersions.
        :type available_from_date: str
        """
        if available_from_date is None:
            raise ValueError("Invalid value for `available_from_date`, must not be `None`")  # noqa: E501

        self._available_from_date = available_from_date

    @property
    def available_to_date(self) -> str:
        """Gets the available_to_date of this AvailableVersions.


        :return: The available_to_date of this AvailableVersions.
        :rtype: str
        """
        return self._available_to_date

    @available_to_date.setter
    def available_to_date(self, available_to_date: str):
        """Sets the available_to_date of this AvailableVersions.


        :param available_to_date: The available_to_date of this AvailableVersions.
        :type available_to_date: str
        """
        if available_to_date is None:
            raise ValueError("Invalid value for `available_to_date`, must not be `None`")  # noqa: E501

        self._available_to_date = available_to_date

    @property
    def duration(self) -> str:
        """Gets the duration of this AvailableVersions.


        :return: The duration of this AvailableVersions.
        :rtype: str
        """
        return self._duration

    @duration.setter
    def duration(self, duration: str):
        """Sets the duration of this AvailableVersions.


        :param duration: The duration of this AvailableVersions.
        :type duration: str
        """
        if duration is None:
            raise ValueError("Invalid value for `duration`, must not be `None`")  # noqa: E501

        self._duration = duration

    @property
    def has_guidance(self) -> bool:
        """Gets the has_guidance of this AvailableVersions.


        :return: The has_guidance of this AvailableVersions.
        :rtype: bool
        """
        return self._has_guidance

    @has_guidance.setter
    def has_guidance(self, has_guidance: bool):
        """Sets the has_guidance of this AvailableVersions.


        :param has_guidance: The has_guidance of this AvailableVersions.
        :type has_guidance: bool
        """
        if has_guidance is None:
            raise ValueError("Invalid value for `has_guidance`, must not be `None`")  # noqa: E501

        self._has_guidance = has_guidance

    @property
    def media_set(self) -> str:
        """Gets the media_set of this AvailableVersions.


        :return: The media_set of this AvailableVersions.
        :rtype: str
        """
        return self._media_set

    @media_set.setter
    def media_set(self, media_set: str):
        """Sets the media_set of this AvailableVersions.


        :param media_set: The media_set of this AvailableVersions.
        :type media_set: str
        """
        if media_set is None:
            raise ValueError("Invalid value for `media_set`, must not be `None`")  # noqa: E501

        self._media_set = media_set

    @property
    def type(self) -> str:
        """Gets the type of this AvailableVersions.


        :return: The type of this AvailableVersions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AvailableVersions.


        :param type: The type of this AvailableVersions.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def version_pid(self) -> str:
        """Gets the version_pid of this AvailableVersions.


        :return: The version_pid of this AvailableVersions.
        :rtype: str
        """
        return self._version_pid

    @version_pid.setter
    def version_pid(self, version_pid: str):
        """Sets the version_pid of this AvailableVersions.


        :param version_pid: The version_pid of this AvailableVersions.
        :type version_pid: str
        """
        if version_pid is None:
            raise ValueError("Invalid value for `version_pid`, must not be `None`")  # noqa: E501

        self._version_pid = version_pid

    @property
    def version_type(self) -> str:
        """Gets the version_type of this AvailableVersions.


        :return: The version_type of this AvailableVersions.
        :rtype: str
        """
        return self._version_type

    @version_type.setter
    def version_type(self, version_type: str):
        """Sets the version_type of this AvailableVersions.


        :param version_type: The version_type of this AvailableVersions.
        :type version_type: str
        """
        if version_type is None:
            raise ValueError("Invalid value for `version_type`, must not be `None`")  # noqa: E501

        self._version_type = version_type
