from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.history import History
from openapi_server import util

from openapi_server.models.history import History  # noqa: E501

class Tag(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, history=None, name=None, url=None):  # noqa: E501
        """Tag - a model defined in OpenAPI

        :param history: The history of this Tag.  # noqa: E501
        :type history: List[History]
        :param name: The name of this Tag.  # noqa: E501
        :type name: str
        :param url: The url of this Tag.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'history': List[History],
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'history': 'history',
            'name': 'name',
            'url': 'url'
        }

        self._history = history
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Tag':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Tag of this Tag.  # noqa: E501
        :rtype: Tag
        """
        return util.deserialize_model(dikt, cls)

    @property
    def history(self) -> List[History]:
        """Gets the history of this Tag.

        Usage statistics for given days.  # noqa: E501

        :return: The history of this Tag.
        :rtype: List[History]
        """
        return self._history

    @history.setter
    def history(self, history: List[History]):
        """Sets the history of this Tag.

        Usage statistics for given days.  # noqa: E501

        :param history: The history of this Tag.
        :type history: List[History]
        """

        self._history = history

    @property
    def name(self) -> str:
        """Gets the name of this Tag.

        The value of the hashtag after the `#` sign.  # noqa: E501

        :return: The name of this Tag.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Tag.

        The value of the hashtag after the `#` sign.  # noqa: E501

        :param name: The name of this Tag.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def url(self) -> str:
        """Gets the url of this Tag.

        A link to the hashtag on the instance.  # noqa: E501

        :return: The url of this Tag.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Tag.

        A link to the hashtag on the instance.  # noqa: E501

        :param url: The url of this Tag.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
