from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Preferences(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, postingdefaultlanguage=None, postingdefaultsensitive=None, postingdefaultvisibility=None, readingexpandmedia=None, readingexpandspoilers=None):  # noqa: E501
        """Preferences - a model defined in OpenAPI

        :param postingdefaultlanguage: The postingdefaultlanguage of this Preferences.  # noqa: E501
        :type postingdefaultlanguage: str
        :param postingdefaultsensitive: The postingdefaultsensitive of this Preferences.  # noqa: E501
        :type postingdefaultsensitive: bool
        :param postingdefaultvisibility: The postingdefaultvisibility of this Preferences.  # noqa: E501
        :type postingdefaultvisibility: str
        :param readingexpandmedia: The readingexpandmedia of this Preferences.  # noqa: E501
        :type readingexpandmedia: str
        :param readingexpandspoilers: The readingexpandspoilers of this Preferences.  # noqa: E501
        :type readingexpandspoilers: bool
        """
        self.openapi_types = {
            'postingdefaultlanguage': str,
            'postingdefaultsensitive': bool,
            'postingdefaultvisibility': str,
            'readingexpandmedia': str,
            'readingexpandspoilers': bool
        }

        self.attribute_map = {
            'postingdefaultlanguage': 'posting:default:language',
            'postingdefaultsensitive': 'posting:default:sensitive',
            'postingdefaultvisibility': 'posting:default:visibility',
            'readingexpandmedia': 'reading:expand:media',
            'readingexpandspoilers': 'reading:expand:spoilers'
        }

        self._postingdefaultlanguage = postingdefaultlanguage
        self._postingdefaultsensitive = postingdefaultsensitive
        self._postingdefaultvisibility = postingdefaultvisibility
        self._readingexpandmedia = readingexpandmedia
        self._readingexpandspoilers = readingexpandspoilers

    @classmethod
    def from_dict(cls, dikt) -> 'Preferences':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Preferences of this Preferences.  # noqa: E501
        :rtype: Preferences
        """
        return util.deserialize_model(dikt, cls)

    @property
    def postingdefaultlanguage(self) -> str:
        """Gets the postingdefaultlanguage of this Preferences.

        Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null  # noqa: E501

        :return: The postingdefaultlanguage of this Preferences.
        :rtype: str
        """
        return self._postingdefaultlanguage

    @postingdefaultlanguage.setter
    def postingdefaultlanguage(self, postingdefaultlanguage: str):
        """Sets the postingdefaultlanguage of this Preferences.

        Default language for new posts. Equivalent to [Source#language](https://docs.joinmastodon.org/entities/source/#language). ISO 639-1 language two-letter code, or null  # noqa: E501

        :param postingdefaultlanguage: The postingdefaultlanguage of this Preferences.
        :type postingdefaultlanguage: str
        """

        self._postingdefaultlanguage = postingdefaultlanguage

    @property
    def postingdefaultsensitive(self) -> bool:
        """Gets the postingdefaultsensitive of this Preferences.

        Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).  # noqa: E501

        :return: The postingdefaultsensitive of this Preferences.
        :rtype: bool
        """
        return self._postingdefaultsensitive

    @postingdefaultsensitive.setter
    def postingdefaultsensitive(self, postingdefaultsensitive: bool):
        """Sets the postingdefaultsensitive of this Preferences.

        Default sensitivity flag for new posts. Equivalent to [Source#sensitive](https://docs.joinmastodon.org/entities/source/#sensitive).  # noqa: E501

        :param postingdefaultsensitive: The postingdefaultsensitive of this Preferences.
        :type postingdefaultsensitive: bool
        """

        self._postingdefaultsensitive = postingdefaultsensitive

    @property
    def postingdefaultvisibility(self) -> str:
        """Gets the postingdefaultvisibility of this Preferences.

        Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).  # noqa: E501

        :return: The postingdefaultvisibility of this Preferences.
        :rtype: str
        """
        return self._postingdefaultvisibility

    @postingdefaultvisibility.setter
    def postingdefaultvisibility(self, postingdefaultvisibility: str):
        """Sets the postingdefaultvisibility of this Preferences.

        Default visibility for new posts. Equivalent to [Source#privacy](https://docs.joinmastodon.org/entities/source/#privacy).  # noqa: E501

        :param postingdefaultvisibility: The postingdefaultvisibility of this Preferences.
        :type postingdefaultvisibility: str
        """
        allowed_values = ["public", "unlisted", "private", "direct"]  # noqa: E501
        if postingdefaultvisibility not in allowed_values:
            raise ValueError(
                "Invalid value for `postingdefaultvisibility` ({0}), must be one of {1}"
                .format(postingdefaultvisibility, allowed_values)
            )

        self._postingdefaultvisibility = postingdefaultvisibility

    @property
    def readingexpandmedia(self) -> str:
        """Gets the readingexpandmedia of this Preferences.

        Whether media attachments should be automatically displayed or blurred/hidden.  # noqa: E501

        :return: The readingexpandmedia of this Preferences.
        :rtype: str
        """
        return self._readingexpandmedia

    @readingexpandmedia.setter
    def readingexpandmedia(self, readingexpandmedia: str):
        """Sets the readingexpandmedia of this Preferences.

        Whether media attachments should be automatically displayed or blurred/hidden.  # noqa: E501

        :param readingexpandmedia: The readingexpandmedia of this Preferences.
        :type readingexpandmedia: str
        """
        allowed_values = ["default", "show_all", "hide_all"]  # noqa: E501
        if readingexpandmedia not in allowed_values:
            raise ValueError(
                "Invalid value for `readingexpandmedia` ({0}), must be one of {1}"
                .format(readingexpandmedia, allowed_values)
            )

        self._readingexpandmedia = readingexpandmedia

    @property
    def readingexpandspoilers(self) -> bool:
        """Gets the readingexpandspoilers of this Preferences.

        Whether CWs should be expanded by default.  # noqa: E501

        :return: The readingexpandspoilers of this Preferences.
        :rtype: bool
        """
        return self._readingexpandspoilers

    @readingexpandspoilers.setter
    def readingexpandspoilers(self, readingexpandspoilers: bool):
        """Sets the readingexpandspoilers of this Preferences.

        Whether CWs should be expanded by default.  # noqa: E501

        :param readingexpandspoilers: The readingexpandspoilers of this Preferences.
        :type readingexpandspoilers: bool
        """

        self._readingexpandspoilers = readingexpandspoilers
