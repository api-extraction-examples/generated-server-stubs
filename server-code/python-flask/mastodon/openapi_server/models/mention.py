from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Mention(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, acct=None, id=None, url=None, username=None):  # noqa: E501
        """Mention - a model defined in OpenAPI

        :param acct: The acct of this Mention.  # noqa: E501
        :type acct: str
        :param id: The id of this Mention.  # noqa: E501
        :type id: str
        :param url: The url of this Mention.  # noqa: E501
        :type url: str
        :param username: The username of this Mention.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'acct': str,
            'id': str,
            'url': str,
            'username': str
        }

        self.attribute_map = {
            'acct': 'acct',
            'id': 'id',
            'url': 'url',
            'username': 'username'
        }

        self._acct = acct
        self._id = id
        self._url = url
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'Mention':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mention of this Mention.  # noqa: E501
        :rtype: Mention
        """
        return util.deserialize_model(dikt, cls)

    @property
    def acct(self) -> str:
        """Gets the acct of this Mention.

        The webfinger acct URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.  # noqa: E501

        :return: The acct of this Mention.
        :rtype: str
        """
        return self._acct

    @acct.setter
    def acct(self, acct: str):
        """Sets the acct of this Mention.

        The webfinger acct URI of the mentioned user. Equivalent to `username` for local users, or `username@domain` for remote users.  # noqa: E501

        :param acct: The acct of this Mention.
        :type acct: str
        """
        if acct is None:
            raise ValueError("Invalid value for `acct`, must not be `None`")  # noqa: E501

        self._acct = acct

    @property
    def id(self) -> str:
        """Gets the id of this Mention.

        The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number  # noqa: E501

        :return: The id of this Mention.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Mention.

        The account id of the mentioned user. Cast from an integer, but not guaranteed to be a number  # noqa: E501

        :param id: The id of this Mention.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def url(self) -> str:
        """Gets the url of this Mention.

        The location of the mentioned user's profile.  # noqa: E501

        :return: The url of this Mention.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Mention.

        The location of the mentioned user's profile.  # noqa: E501

        :param url: The url of this Mention.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url

    @property
    def username(self) -> str:
        """Gets the username of this Mention.

        The username of the mentioned user.  # noqa: E501

        :return: The username of this Mention.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Mention.

        The username of the mentioned user.  # noqa: E501

        :param username: The username of this Mention.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
