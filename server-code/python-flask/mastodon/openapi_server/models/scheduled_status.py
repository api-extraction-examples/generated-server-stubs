from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.attachment import Attachment
from openapi_server.models.status_params import StatusParams
from openapi_server import util

from openapi_server.models.attachment import Attachment  # noqa: E501
from openapi_server.models.status_params import StatusParams  # noqa: E501

class ScheduledStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, media_attachments=None, params=None, scheduled_at=None):  # noqa: E501
        """ScheduledStatus - a model defined in OpenAPI

        :param id: The id of this ScheduledStatus.  # noqa: E501
        :type id: str
        :param media_attachments: The media_attachments of this ScheduledStatus.  # noqa: E501
        :type media_attachments: List[Attachment]
        :param params: The params of this ScheduledStatus.  # noqa: E501
        :type params: StatusParams
        :param scheduled_at: The scheduled_at of this ScheduledStatus.  # noqa: E501
        :type scheduled_at: datetime
        """
        self.openapi_types = {
            'id': str,
            'media_attachments': List[Attachment],
            'params': StatusParams,
            'scheduled_at': datetime
        }

        self.attribute_map = {
            'id': 'id',
            'media_attachments': 'media_attachments',
            'params': 'params',
            'scheduled_at': 'scheduled_at'
        }

        self._id = id
        self._media_attachments = media_attachments
        self._params = params
        self._scheduled_at = scheduled_at

    @classmethod
    def from_dict(cls, dikt) -> 'ScheduledStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScheduledStatus of this ScheduledStatus.  # noqa: E501
        :rtype: ScheduledStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ScheduledStatus.

        ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this ScheduledStatus.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ScheduledStatus.

        ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this ScheduledStatus.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def media_attachments(self) -> List[Attachment]:
        """Gets the media_attachments of this ScheduledStatus.

        Array of attachements  # noqa: E501

        :return: The media_attachments of this ScheduledStatus.
        :rtype: List[Attachment]
        """
        return self._media_attachments

    @media_attachments.setter
    def media_attachments(self, media_attachments: List[Attachment]):
        """Sets the media_attachments of this ScheduledStatus.

        Array of attachements  # noqa: E501

        :param media_attachments: The media_attachments of this ScheduledStatus.
        :type media_attachments: List[Attachment]
        """
        if media_attachments is None:
            raise ValueError("Invalid value for `media_attachments`, must not be `None`")  # noqa: E501

        self._media_attachments = media_attachments

    @property
    def params(self) -> StatusParams:
        """Gets the params of this ScheduledStatus.


        :return: The params of this ScheduledStatus.
        :rtype: StatusParams
        """
        return self._params

    @params.setter
    def params(self, params: StatusParams):
        """Sets the params of this ScheduledStatus.


        :param params: The params of this ScheduledStatus.
        :type params: StatusParams
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def scheduled_at(self) -> datetime:
        """Gets the scheduled_at of this ScheduledStatus.

        ID of the status in the database. ISO 8601 Datetime.  # noqa: E501

        :return: The scheduled_at of this ScheduledStatus.
        :rtype: datetime
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at: datetime):
        """Sets the scheduled_at of this ScheduledStatus.

        ID of the status in the database. ISO 8601 Datetime.  # noqa: E501

        :param scheduled_at: The scheduled_at of this ScheduledStatus.
        :type scheduled_at: datetime
        """
        if scheduled_at is None:
            raise ValueError("Invalid value for `scheduled_at`, must not be `None`")  # noqa: E501

        self._scheduled_at = scheduled_at
