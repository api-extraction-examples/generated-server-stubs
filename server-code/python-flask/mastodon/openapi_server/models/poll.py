from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.emoji import Emoji
from openapi_server import util

from openapi_server.models.emoji import Emoji  # noqa: E501

class Poll(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, emojis=None, expired=None, expires_at=None, id=None, multiple=None, options=None, own_votes=None, voted=None, voters_count=None, votes_count=None):  # noqa: E501
        """Poll - a model defined in OpenAPI

        :param emojis: The emojis of this Poll.  # noqa: E501
        :type emojis: List[Emoji]
        :param expired: The expired of this Poll.  # noqa: E501
        :type expired: bool
        :param expires_at: The expires_at of this Poll.  # noqa: E501
        :type expires_at: datetime
        :param id: The id of this Poll.  # noqa: E501
        :type id: str
        :param multiple: The multiple of this Poll.  # noqa: E501
        :type multiple: bool
        :param options: The options of this Poll.  # noqa: E501
        :type options: List[object]
        :param own_votes: The own_votes of this Poll.  # noqa: E501
        :type own_votes: List[int]
        :param voted: The voted of this Poll.  # noqa: E501
        :type voted: bool
        :param voters_count: The voters_count of this Poll.  # noqa: E501
        :type voters_count: int
        :param votes_count: The votes_count of this Poll.  # noqa: E501
        :type votes_count: int
        """
        self.openapi_types = {
            'emojis': List[Emoji],
            'expired': bool,
            'expires_at': datetime,
            'id': str,
            'multiple': bool,
            'options': List[object],
            'own_votes': List[int],
            'voted': bool,
            'voters_count': int,
            'votes_count': int
        }

        self.attribute_map = {
            'emojis': 'emojis',
            'expired': 'expired',
            'expires_at': 'expires_at',
            'id': 'id',
            'multiple': 'multiple',
            'options': 'options',
            'own_votes': 'own_votes',
            'voted': 'voted',
            'voters_count': 'voters_count',
            'votes_count': 'votes_count'
        }

        self._emojis = emojis
        self._expired = expired
        self._expires_at = expires_at
        self._id = id
        self._multiple = multiple
        self._options = options
        self._own_votes = own_votes
        self._voted = voted
        self._voters_count = voters_count
        self._votes_count = votes_count

    @classmethod
    def from_dict(cls, dikt) -> 'Poll':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Poll of this Poll.  # noqa: E501
        :rtype: Poll
        """
        return util.deserialize_model(dikt, cls)

    @property
    def emojis(self) -> List[Emoji]:
        """Gets the emojis of this Poll.

        Custom emoji to be used for rendering poll options.  # noqa: E501

        :return: The emojis of this Poll.
        :rtype: List[Emoji]
        """
        return self._emojis

    @emojis.setter
    def emojis(self, emojis: List[Emoji]):
        """Sets the emojis of this Poll.

        Custom emoji to be used for rendering poll options.  # noqa: E501

        :param emojis: The emojis of this Poll.
        :type emojis: List[Emoji]
        """

        self._emojis = emojis

    @property
    def expired(self) -> bool:
        """Gets the expired of this Poll.

        Is the poll currently expired?  # noqa: E501

        :return: The expired of this Poll.
        :rtype: bool
        """
        return self._expired

    @expired.setter
    def expired(self, expired: bool):
        """Sets the expired of this Poll.

        Is the poll currently expired?  # noqa: E501

        :param expired: The expired of this Poll.
        :type expired: bool
        """

        self._expired = expired

    @property
    def expires_at(self) -> datetime:
        """Gets the expires_at of this Poll.

        When the poll ends. ISO 8601 Datetime, or null if the poll does not end.  # noqa: E501

        :return: The expires_at of this Poll.
        :rtype: datetime
        """
        return self._expires_at

    @expires_at.setter
    def expires_at(self, expires_at: datetime):
        """Sets the expires_at of this Poll.

        When the poll ends. ISO 8601 Datetime, or null if the poll does not end.  # noqa: E501

        :param expires_at: The expires_at of this Poll.
        :type expires_at: datetime
        """

        self._expires_at = expires_at

    @property
    def id(self) -> str:
        """Gets the id of this Poll.

        The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this Poll.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Poll.

        The ID of the poll in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this Poll.
        :type id: str
        """

        self._id = id

    @property
    def multiple(self) -> bool:
        """Gets the multiple of this Poll.

        Does the poll allow multiple-choice answers?  # noqa: E501

        :return: The multiple of this Poll.
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple: bool):
        """Sets the multiple of this Poll.

        Does the poll allow multiple-choice answers?  # noqa: E501

        :param multiple: The multiple of this Poll.
        :type multiple: bool
        """

        self._multiple = multiple

    @property
    def options(self) -> List[object]:
        """Gets the options of this Poll.

        Possible answers for the poll.  # noqa: E501

        :return: The options of this Poll.
        :rtype: List[object]
        """
        return self._options

    @options.setter
    def options(self, options: List[object]):
        """Sets the options of this Poll.

        Possible answers for the poll.  # noqa: E501

        :param options: The options of this Poll.
        :type options: List[object]
        """

        self._options = options

    @property
    def own_votes(self) -> List[int]:
        """Gets the own_votes of this Poll.

        When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user  # noqa: E501

        :return: The own_votes of this Poll.
        :rtype: List[int]
        """
        return self._own_votes

    @own_votes.setter
    def own_votes(self, own_votes: List[int]):
        """Sets the own_votes of this Poll.

        When called with a user token, which options has the authorized user chosen? Contains an array of index values for `options`. Array of Number, or null if no current user  # noqa: E501

        :param own_votes: The own_votes of this Poll.
        :type own_votes: List[int]
        """

        self._own_votes = own_votes

    @property
    def voted(self) -> bool:
        """Gets the voted of this Poll.

        When called with a user token, has the authorized user voted? Boolean, or null if no current user  # noqa: E501

        :return: The voted of this Poll.
        :rtype: bool
        """
        return self._voted

    @voted.setter
    def voted(self, voted: bool):
        """Sets the voted of this Poll.

        When called with a user token, has the authorized user voted? Boolean, or null if no current user  # noqa: E501

        :param voted: The voted of this Poll.
        :type voted: bool
        """

        self._voted = voted

    @property
    def voters_count(self) -> int:
        """Gets the voters_count of this Poll.

        How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.  # noqa: E501

        :return: The voters_count of this Poll.
        :rtype: int
        """
        return self._voters_count

    @voters_count.setter
    def voters_count(self, voters_count: int):
        """Sets the voters_count of this Poll.

        How many unique accounts have voted on a multiple-choice poll. Number, or null if `multiple` is false.  # noqa: E501

        :param voters_count: The voters_count of this Poll.
        :type voters_count: int
        """

        self._voters_count = voters_count

    @property
    def votes_count(self) -> int:
        """Gets the votes_count of this Poll.

        How many votes have been received.  # noqa: E501

        :return: The votes_count of this Poll.
        :rtype: int
        """
        return self._votes_count

    @votes_count.setter
    def votes_count(self, votes_count: int):
        """Sets the votes_count of this Poll.

        How many votes have been received.  # noqa: E501

        :param votes_count: The votes_count of this Poll.
        :type votes_count: int
        """

        self._votes_count = votes_count
