from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnouncementReaction(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, me=None, name=None, static_url=None, url=None):  # noqa: E501
        """AnnouncementReaction - a model defined in OpenAPI

        :param count: The count of this AnnouncementReaction.  # noqa: E501
        :type count: int
        :param me: The me of this AnnouncementReaction.  # noqa: E501
        :type me: bool
        :param name: The name of this AnnouncementReaction.  # noqa: E501
        :type name: str
        :param static_url: The static_url of this AnnouncementReaction.  # noqa: E501
        :type static_url: str
        :param url: The url of this AnnouncementReaction.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'count': int,
            'me': bool,
            'name': str,
            'static_url': str,
            'url': str
        }

        self.attribute_map = {
            'count': 'count',
            'me': 'me',
            'name': 'name',
            'static_url': 'static_url',
            'url': 'url'
        }

        self._count = count
        self._me = me
        self._name = name
        self._static_url = static_url
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'AnnouncementReaction':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnnouncementReaction of this AnnouncementReaction.  # noqa: E501
        :rtype: AnnouncementReaction
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self) -> int:
        """Gets the count of this AnnouncementReaction.

        The total number of users who have added this reaction.  # noqa: E501

        :return: The count of this AnnouncementReaction.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this AnnouncementReaction.

        The total number of users who have added this reaction.  # noqa: E501

        :param count: The count of this AnnouncementReaction.
        :type count: int
        """

        self._count = count

    @property
    def me(self) -> bool:
        """Gets the me of this AnnouncementReaction.

        Whether the authorized user has added this reaction to the announcement.  # noqa: E501

        :return: The me of this AnnouncementReaction.
        :rtype: bool
        """
        return self._me

    @me.setter
    def me(self, me: bool):
        """Sets the me of this AnnouncementReaction.

        Whether the authorized user has added this reaction to the announcement.  # noqa: E501

        :param me: The me of this AnnouncementReaction.
        :type me: bool
        """

        self._me = me

    @property
    def name(self) -> str:
        """Gets the name of this AnnouncementReaction.

        The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.  # noqa: E501

        :return: The name of this AnnouncementReaction.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AnnouncementReaction.

        The emoji used for the reaction. Either a unicode emoji, or a custom emoji's shortcode.  # noqa: E501

        :param name: The name of this AnnouncementReaction.
        :type name: str
        """

        self._name = name

    @property
    def static_url(self) -> str:
        """Gets the static_url of this AnnouncementReaction.

        A link to a non-animated version of the custom emoji (URL).  # noqa: E501

        :return: The static_url of this AnnouncementReaction.
        :rtype: str
        """
        return self._static_url

    @static_url.setter
    def static_url(self, static_url: str):
        """Sets the static_url of this AnnouncementReaction.

        A link to a non-animated version of the custom emoji (URL).  # noqa: E501

        :param static_url: The static_url of this AnnouncementReaction.
        :type static_url: str
        """

        self._static_url = static_url

    @property
    def url(self) -> str:
        """Gets the url of this AnnouncementReaction.

        A link to the custom emoji (URL).  # noqa: E501

        :return: The url of this AnnouncementReaction.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this AnnouncementReaction.

        A link to the custom emoji (URL).  # noqa: E501

        :param url: The url of this AnnouncementReaction.
        :type url: str
        """

        self._url = url
