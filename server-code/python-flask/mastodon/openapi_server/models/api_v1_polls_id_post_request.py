from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiV1PollsIdPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, choices=None):  # noqa: E501
        """ApiV1PollsIdPostRequest - a model defined in OpenAPI

        :param choices: The choices of this ApiV1PollsIdPostRequest.  # noqa: E501
        :type choices: List[str]
        """
        self.openapi_types = {
            'choices': List[str]
        }

        self.attribute_map = {
            'choices': 'choices'
        }

        self._choices = choices

    @classmethod
    def from_dict(cls, dikt) -> 'ApiV1PollsIdPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_v1_polls__id__post_request of this ApiV1PollsIdPostRequest.  # noqa: E501
        :rtype: ApiV1PollsIdPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def choices(self) -> List[str]:
        """Gets the choices of this ApiV1PollsIdPostRequest.


        :return: The choices of this ApiV1PollsIdPostRequest.
        :rtype: List[str]
        """
        return self._choices

    @choices.setter
    def choices(self, choices: List[str]):
        """Sets the choices of this ApiV1PollsIdPostRequest.


        :param choices: The choices of this ApiV1PollsIdPostRequest.
        :type choices: List[str]
        """
        if choices is None:
            raise ValueError("Invalid value for `choices`, must not be `None`")  # noqa: E501

        self._choices = choices
