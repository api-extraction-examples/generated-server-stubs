from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiV1AccountsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, agreement=None, email=None, locale=None, password=None, reason=None, username=None):  # noqa: E501
        """ApiV1AccountsPostRequest - a model defined in OpenAPI

        :param agreement: The agreement of this ApiV1AccountsPostRequest.  # noqa: E501
        :type agreement: bool
        :param email: The email of this ApiV1AccountsPostRequest.  # noqa: E501
        :type email: str
        :param locale: The locale of this ApiV1AccountsPostRequest.  # noqa: E501
        :type locale: str
        :param password: The password of this ApiV1AccountsPostRequest.  # noqa: E501
        :type password: str
        :param reason: The reason of this ApiV1AccountsPostRequest.  # noqa: E501
        :type reason: str
        :param username: The username of this ApiV1AccountsPostRequest.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'agreement': bool,
            'email': str,
            'locale': str,
            'password': str,
            'reason': str,
            'username': str
        }

        self.attribute_map = {
            'agreement': 'agreement',
            'email': 'email',
            'locale': 'locale',
            'password': 'password',
            'reason': 'reason',
            'username': 'username'
        }

        self._agreement = agreement
        self._email = email
        self._locale = locale
        self._password = password
        self._reason = reason
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'ApiV1AccountsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_v1_accounts_post_request of this ApiV1AccountsPostRequest.  # noqa: E501
        :rtype: ApiV1AccountsPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def agreement(self) -> bool:
        """Gets the agreement of this ApiV1AccountsPostRequest.

        Whether the user agrees to the local rules, terms, and policies. These should be presented to the user in order to allow them to consent before setting this parameter to TRUE.  # noqa: E501

        :return: The agreement of this ApiV1AccountsPostRequest.
        :rtype: bool
        """
        return self._agreement

    @agreement.setter
    def agreement(self, agreement: bool):
        """Sets the agreement of this ApiV1AccountsPostRequest.

        Whether the user agrees to the local rules, terms, and policies. These should be presented to the user in order to allow them to consent before setting this parameter to TRUE.  # noqa: E501

        :param agreement: The agreement of this ApiV1AccountsPostRequest.
        :type agreement: bool
        """
        if agreement is None:
            raise ValueError("Invalid value for `agreement`, must not be `None`")  # noqa: E501

        self._agreement = agreement

    @property
    def email(self) -> str:
        """Gets the email of this ApiV1AccountsPostRequest.

        The email address to be used for login  # noqa: E501

        :return: The email of this ApiV1AccountsPostRequest.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this ApiV1AccountsPostRequest.

        The email address to be used for login  # noqa: E501

        :param email: The email of this ApiV1AccountsPostRequest.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def locale(self) -> str:
        """Gets the locale of this ApiV1AccountsPostRequest.

        The language of the confirmation email that will be sent  # noqa: E501

        :return: The locale of this ApiV1AccountsPostRequest.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale: str):
        """Sets the locale of this ApiV1AccountsPostRequest.

        The language of the confirmation email that will be sent  # noqa: E501

        :param locale: The locale of this ApiV1AccountsPostRequest.
        :type locale: str
        """
        if locale is None:
            raise ValueError("Invalid value for `locale`, must not be `None`")  # noqa: E501

        self._locale = locale

    @property
    def password(self) -> str:
        """Gets the password of this ApiV1AccountsPostRequest.

        The password to be used for login  # noqa: E501

        :return: The password of this ApiV1AccountsPostRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this ApiV1AccountsPostRequest.

        The password to be used for login  # noqa: E501

        :param password: The password of this ApiV1AccountsPostRequest.
        :type password: str
        """
        if password is None:
            raise ValueError("Invalid value for `password`, must not be `None`")  # noqa: E501

        self._password = password

    @property
    def reason(self) -> str:
        """Gets the reason of this ApiV1AccountsPostRequest.

        Text that will be reviewed by moderators if registrations require manual approval.  # noqa: E501

        :return: The reason of this ApiV1AccountsPostRequest.
        :rtype: str
        """
        return self._reason

    @reason.setter
    def reason(self, reason: str):
        """Sets the reason of this ApiV1AccountsPostRequest.

        Text that will be reviewed by moderators if registrations require manual approval.  # noqa: E501

        :param reason: The reason of this ApiV1AccountsPostRequest.
        :type reason: str
        """

        self._reason = reason

    @property
    def username(self) -> str:
        """Gets the username of this ApiV1AccountsPostRequest.

        The desired username for the account  # noqa: E501

        :return: The username of this ApiV1AccountsPostRequest.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this ApiV1AccountsPostRequest.

        The desired username for the account  # noqa: E501

        :param username: The username of this ApiV1AccountsPostRequest.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
