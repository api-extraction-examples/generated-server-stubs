from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server import util

from openapi_server.models.account import Account  # noqa: E501

class AdminAccount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, approved=None, confirmed=None, created_at=None, created_by_application_id=None, disabled=None, email=None, id=None, invite_request=None, invited_by_account_id=None, ip=None, locale=None, role=None, silenced=None, suspended=None, username=None):  # noqa: E501
        """AdminAccount - a model defined in OpenAPI

        :param account: The account of this AdminAccount.  # noqa: E501
        :type account: Account
        :param approved: The approved of this AdminAccount.  # noqa: E501
        :type approved: bool
        :param confirmed: The confirmed of this AdminAccount.  # noqa: E501
        :type confirmed: bool
        :param created_at: The created_at of this AdminAccount.  # noqa: E501
        :type created_at: datetime
        :param created_by_application_id: The created_by_application_id of this AdminAccount.  # noqa: E501
        :type created_by_application_id: str
        :param disabled: The disabled of this AdminAccount.  # noqa: E501
        :type disabled: bool
        :param email: The email of this AdminAccount.  # noqa: E501
        :type email: str
        :param id: The id of this AdminAccount.  # noqa: E501
        :type id: str
        :param invite_request: The invite_request of this AdminAccount.  # noqa: E501
        :type invite_request: str
        :param invited_by_account_id: The invited_by_account_id of this AdminAccount.  # noqa: E501
        :type invited_by_account_id: str
        :param ip: The ip of this AdminAccount.  # noqa: E501
        :type ip: str
        :param locale: The locale of this AdminAccount.  # noqa: E501
        :type locale: str
        :param role: The role of this AdminAccount.  # noqa: E501
        :type role: str
        :param silenced: The silenced of this AdminAccount.  # noqa: E501
        :type silenced: bool
        :param suspended: The suspended of this AdminAccount.  # noqa: E501
        :type suspended: bool
        :param username: The username of this AdminAccount.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'account': Account,
            'approved': bool,
            'confirmed': bool,
            'created_at': datetime,
            'created_by_application_id': str,
            'disabled': bool,
            'email': str,
            'id': str,
            'invite_request': str,
            'invited_by_account_id': str,
            'ip': str,
            'locale': str,
            'role': str,
            'silenced': bool,
            'suspended': bool,
            'username': str
        }

        self.attribute_map = {
            'account': 'account',
            'approved': 'approved',
            'confirmed': 'confirmed',
            'created_at': 'created_at',
            'created_by_application_id': 'created_by_application_id',
            'disabled': 'disabled',
            'email': 'email',
            'id': 'id',
            'invite_request': 'invite_request',
            'invited_by_account_id': 'invited_by_account_id',
            'ip': 'ip',
            'locale': 'locale',
            'role': 'role',
            'silenced': 'silenced',
            'suspended': 'suspended',
            'username': 'username'
        }

        self._account = account
        self._approved = approved
        self._confirmed = confirmed
        self._created_at = created_at
        self._created_by_application_id = created_by_application_id
        self._disabled = disabled
        self._email = email
        self._id = id
        self._invite_request = invite_request
        self._invited_by_account_id = invited_by_account_id
        self._ip = ip
        self._locale = locale
        self._role = role
        self._silenced = silenced
        self._suspended = suspended
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'AdminAccount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AdminAccount of this AdminAccount.  # noqa: E501
        :rtype: AdminAccount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self) -> Account:
        """Gets the account of this AdminAccount.


        :return: The account of this AdminAccount.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account: Account):
        """Sets the account of this AdminAccount.


        :param account: The account of this AdminAccount.
        :type account: Account
        """

        self._account = account

    @property
    def approved(self) -> bool:
        """Gets the approved of this AdminAccount.

        Whether the account is currently approved.  # noqa: E501

        :return: The approved of this AdminAccount.
        :rtype: bool
        """
        return self._approved

    @approved.setter
    def approved(self, approved: bool):
        """Sets the approved of this AdminAccount.

        Whether the account is currently approved.  # noqa: E501

        :param approved: The approved of this AdminAccount.
        :type approved: bool
        """

        self._approved = approved

    @property
    def confirmed(self) -> bool:
        """Gets the confirmed of this AdminAccount.

        Whether the account has confirmed their email address.  # noqa: E501

        :return: The confirmed of this AdminAccount.
        :rtype: bool
        """
        return self._confirmed

    @confirmed.setter
    def confirmed(self, confirmed: bool):
        """Sets the confirmed of this AdminAccount.

        Whether the account has confirmed their email address.  # noqa: E501

        :param confirmed: The confirmed of this AdminAccount.
        :type confirmed: bool
        """

        self._confirmed = confirmed

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this AdminAccount.

        When the account was first discovered.  # noqa: E501

        :return: The created_at of this AdminAccount.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this AdminAccount.

        When the account was first discovered.  # noqa: E501

        :param created_at: The created_at of this AdminAccount.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def created_by_application_id(self) -> str:
        """Gets the created_by_application_id of this AdminAccount.

        The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The created_by_application_id of this AdminAccount.
        :rtype: str
        """
        return self._created_by_application_id

    @created_by_application_id.setter
    def created_by_application_id(self, created_by_application_id: str):
        """Sets the created_by_application_id of this AdminAccount.

        The ID of the application that created this account. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param created_by_application_id: The created_by_application_id of this AdminAccount.
        :type created_by_application_id: str
        """

        self._created_by_application_id = created_by_application_id

    @property
    def disabled(self) -> bool:
        """Gets the disabled of this AdminAccount.

        Whether the account is currently disabled.  # noqa: E501

        :return: The disabled of this AdminAccount.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled: bool):
        """Sets the disabled of this AdminAccount.

        Whether the account is currently disabled.  # noqa: E501

        :param disabled: The disabled of this AdminAccount.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def email(self) -> str:
        """Gets the email of this AdminAccount.

        The email address associated with the account.  # noqa: E501

        :return: The email of this AdminAccount.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this AdminAccount.

        The email address associated with the account.  # noqa: E501

        :param email: The email of this AdminAccount.
        :type email: str
        """

        self._email = email

    @property
    def id(self) -> str:
        """Gets the id of this AdminAccount.

        The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this AdminAccount.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AdminAccount.

        The ID of the account in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this AdminAccount.
        :type id: str
        """

        self._id = id

    @property
    def invite_request(self) -> str:
        """Gets the invite_request of this AdminAccount.

        Invite request text ???  # noqa: E501

        :return: The invite_request of this AdminAccount.
        :rtype: str
        """
        return self._invite_request

    @invite_request.setter
    def invite_request(self, invite_request: str):
        """Sets the invite_request of this AdminAccount.

        Invite request text ???  # noqa: E501

        :param invite_request: The invite_request of this AdminAccount.
        :type invite_request: str
        """

        self._invite_request = invite_request

    @property
    def invited_by_account_id(self) -> str:
        """Gets the invited_by_account_id of this AdminAccount.

        The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The invited_by_account_id of this AdminAccount.
        :rtype: str
        """
        return self._invited_by_account_id

    @invited_by_account_id.setter
    def invited_by_account_id(self, invited_by_account_id: str):
        """Sets the invited_by_account_id of this AdminAccount.

        The ID of the account that invited this user. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param invited_by_account_id: The invited_by_account_id of this AdminAccount.
        :type invited_by_account_id: str
        """

        self._invited_by_account_id = invited_by_account_id

    @property
    def ip(self) -> str:
        """Gets the ip of this AdminAccount.

        The IP address last used to login to this account.  # noqa: E501

        :return: The ip of this AdminAccount.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this AdminAccount.

        The IP address last used to login to this account.  # noqa: E501

        :param ip: The ip of this AdminAccount.
        :type ip: str
        """

        self._ip = ip

    @property
    def locale(self) -> str:
        """Gets the locale of this AdminAccount.

        The locale of the account. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :return: The locale of this AdminAccount.
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale: str):
        """Sets the locale of this AdminAccount.

        The locale of the account. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :param locale: The locale of this AdminAccount.
        :type locale: str
        """

        self._locale = locale

    @property
    def role(self) -> str:
        """Gets the role of this AdminAccount.

        The current role of the account. Enumerable oneOf.  # noqa: E501

        :return: The role of this AdminAccount.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this AdminAccount.

        The current role of the account. Enumerable oneOf.  # noqa: E501

        :param role: The role of this AdminAccount.
        :type role: str
        """

        self._role = role

    @property
    def silenced(self) -> bool:
        """Gets the silenced of this AdminAccount.

        Whether the account is currently silenced.  # noqa: E501

        :return: The silenced of this AdminAccount.
        :rtype: bool
        """
        return self._silenced

    @silenced.setter
    def silenced(self, silenced: bool):
        """Sets the silenced of this AdminAccount.

        Whether the account is currently silenced.  # noqa: E501

        :param silenced: The silenced of this AdminAccount.
        :type silenced: bool
        """

        self._silenced = silenced

    @property
    def suspended(self) -> bool:
        """Gets the suspended of this AdminAccount.

        Whether the account is currently suspended.  # noqa: E501

        :return: The suspended of this AdminAccount.
        :rtype: bool
        """
        return self._suspended

    @suspended.setter
    def suspended(self, suspended: bool):
        """Sets the suspended of this AdminAccount.

        Whether the account is currently suspended.  # noqa: E501

        :param suspended: The suspended of this AdminAccount.
        :type suspended: bool
        """

        self._suspended = suspended

    @property
    def username(self) -> str:
        """Gets the username of this AdminAccount.

        The username of the account.  # noqa: E501

        :return: The username of this AdminAccount.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this AdminAccount.

        The username of the account.  # noqa: E501

        :param username: The username of this AdminAccount.
        :type username: str
        """

        self._username = username
