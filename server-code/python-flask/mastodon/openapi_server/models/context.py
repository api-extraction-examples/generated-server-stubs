from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.status import Status
from openapi_server import util

from openapi_server.models.status import Status  # noqa: E501

class Context(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ancestors=None, descendants=None):  # noqa: E501
        """Context - a model defined in OpenAPI

        :param ancestors: The ancestors of this Context.  # noqa: E501
        :type ancestors: List[Status]
        :param descendants: The descendants of this Context.  # noqa: E501
        :type descendants: List[Status]
        """
        self.openapi_types = {
            'ancestors': List[Status],
            'descendants': List[Status]
        }

        self.attribute_map = {
            'ancestors': 'ancestors',
            'descendants': 'descendants'
        }

        self._ancestors = ancestors
        self._descendants = descendants

    @classmethod
    def from_dict(cls, dikt) -> 'Context':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Context of this Context.  # noqa: E501
        :rtype: Context
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ancestors(self) -> List[Status]:
        """Gets the ancestors of this Context.

        Parents in the thread.  # noqa: E501

        :return: The ancestors of this Context.
        :rtype: List[Status]
        """
        return self._ancestors

    @ancestors.setter
    def ancestors(self, ancestors: List[Status]):
        """Sets the ancestors of this Context.

        Parents in the thread.  # noqa: E501

        :param ancestors: The ancestors of this Context.
        :type ancestors: List[Status]
        """
        if ancestors is None:
            raise ValueError("Invalid value for `ancestors`, must not be `None`")  # noqa: E501

        self._ancestors = ancestors

    @property
    def descendants(self) -> List[Status]:
        """Gets the descendants of this Context.

        Children in the thread.  # noqa: E501

        :return: The descendants of this Context.
        :rtype: List[Status]
        """
        return self._descendants

    @descendants.setter
    def descendants(self, descendants: List[Status]):
        """Sets the descendants of this Context.

        Children in the thread.  # noqa: E501

        :param descendants: The descendants of this Context.
        :type descendants: List[Status]
        """
        if descendants is None:
            raise ValueError("Invalid value for `descendants`, must not be `None`")  # noqa: E501

        self._descendants = descendants
