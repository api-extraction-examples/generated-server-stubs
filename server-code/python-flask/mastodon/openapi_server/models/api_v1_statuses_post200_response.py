from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.account import Account
from openapi_server.models.application import Application
from openapi_server.models.attachment import Attachment
from openapi_server.models.card import Card
from openapi_server.models.emoji import Emoji
from openapi_server.models.mention import Mention
from openapi_server.models.poll import Poll
from openapi_server.models.scheduled_status import ScheduledStatus
from openapi_server.models.status import Status
from openapi_server.models.status_params import StatusParams
from openapi_server.models.tag import Tag
from openapi_server import util

from openapi_server.models.account import Account  # noqa: E501
from openapi_server.models.application import Application  # noqa: E501
from openapi_server.models.attachment import Attachment  # noqa: E501
from openapi_server.models.card import Card  # noqa: E501
from openapi_server.models.emoji import Emoji  # noqa: E501
from openapi_server.models.mention import Mention  # noqa: E501
from openapi_server.models.poll import Poll  # noqa: E501
from openapi_server.models.scheduled_status import ScheduledStatus  # noqa: E501
from openapi_server.models.status import Status  # noqa: E501
from openapi_server.models.status_params import StatusParams  # noqa: E501
from openapi_server.models.tag import Tag  # noqa: E501

class ApiV1StatusesPost200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account=None, application=None, bookmarked=None, card=None, content=None, created_at=None, emojis=None, favourited=None, favourites_count=None, id=None, in_reply_to_account_id=None, in_reply_to_id=None, language=None, media_attachments=None, mentions=None, muted=None, pinned=None, poll=None, reblog=None, reblogged=None, reblogs_count=None, replies_count=None, sensitive=None, spoiler_text=None, tags=None, text=None, uri=None, url=None, visibility=None, params=None, scheduled_at=None):  # noqa: E501
        """ApiV1StatusesPost200Response - a model defined in OpenAPI

        :param account: The account of this ApiV1StatusesPost200Response.  # noqa: E501
        :type account: Account
        :param application: The application of this ApiV1StatusesPost200Response.  # noqa: E501
        :type application: Application
        :param bookmarked: The bookmarked of this ApiV1StatusesPost200Response.  # noqa: E501
        :type bookmarked: bool
        :param card: The card of this ApiV1StatusesPost200Response.  # noqa: E501
        :type card: Card
        :param content: The content of this ApiV1StatusesPost200Response.  # noqa: E501
        :type content: str
        :param created_at: The created_at of this ApiV1StatusesPost200Response.  # noqa: E501
        :type created_at: datetime
        :param emojis: The emojis of this ApiV1StatusesPost200Response.  # noqa: E501
        :type emojis: List[Emoji]
        :param favourited: The favourited of this ApiV1StatusesPost200Response.  # noqa: E501
        :type favourited: bool
        :param favourites_count: The favourites_count of this ApiV1StatusesPost200Response.  # noqa: E501
        :type favourites_count: int
        :param id: The id of this ApiV1StatusesPost200Response.  # noqa: E501
        :type id: str
        :param in_reply_to_account_id: The in_reply_to_account_id of this ApiV1StatusesPost200Response.  # noqa: E501
        :type in_reply_to_account_id: str
        :param in_reply_to_id: The in_reply_to_id of this ApiV1StatusesPost200Response.  # noqa: E501
        :type in_reply_to_id: str
        :param language: The language of this ApiV1StatusesPost200Response.  # noqa: E501
        :type language: str
        :param media_attachments: The media_attachments of this ApiV1StatusesPost200Response.  # noqa: E501
        :type media_attachments: List[Attachment]
        :param mentions: The mentions of this ApiV1StatusesPost200Response.  # noqa: E501
        :type mentions: List[Mention]
        :param muted: The muted of this ApiV1StatusesPost200Response.  # noqa: E501
        :type muted: bool
        :param pinned: The pinned of this ApiV1StatusesPost200Response.  # noqa: E501
        :type pinned: bool
        :param poll: The poll of this ApiV1StatusesPost200Response.  # noqa: E501
        :type poll: Poll
        :param reblog: The reblog of this ApiV1StatusesPost200Response.  # noqa: E501
        :type reblog: Status
        :param reblogged: The reblogged of this ApiV1StatusesPost200Response.  # noqa: E501
        :type reblogged: bool
        :param reblogs_count: The reblogs_count of this ApiV1StatusesPost200Response.  # noqa: E501
        :type reblogs_count: int
        :param replies_count: The replies_count of this ApiV1StatusesPost200Response.  # noqa: E501
        :type replies_count: int
        :param sensitive: The sensitive of this ApiV1StatusesPost200Response.  # noqa: E501
        :type sensitive: bool
        :param spoiler_text: The spoiler_text of this ApiV1StatusesPost200Response.  # noqa: E501
        :type spoiler_text: str
        :param tags: The tags of this ApiV1StatusesPost200Response.  # noqa: E501
        :type tags: List[Tag]
        :param text: The text of this ApiV1StatusesPost200Response.  # noqa: E501
        :type text: str
        :param uri: The uri of this ApiV1StatusesPost200Response.  # noqa: E501
        :type uri: str
        :param url: The url of this ApiV1StatusesPost200Response.  # noqa: E501
        :type url: str
        :param visibility: The visibility of this ApiV1StatusesPost200Response.  # noqa: E501
        :type visibility: str
        :param params: The params of this ApiV1StatusesPost200Response.  # noqa: E501
        :type params: StatusParams
        :param scheduled_at: The scheduled_at of this ApiV1StatusesPost200Response.  # noqa: E501
        :type scheduled_at: datetime
        """
        self.openapi_types = {
            'account': Account,
            'application': Application,
            'bookmarked': bool,
            'card': Card,
            'content': str,
            'created_at': datetime,
            'emojis': List[Emoji],
            'favourited': bool,
            'favourites_count': int,
            'id': str,
            'in_reply_to_account_id': str,
            'in_reply_to_id': str,
            'language': str,
            'media_attachments': List[Attachment],
            'mentions': List[Mention],
            'muted': bool,
            'pinned': bool,
            'poll': Poll,
            'reblog': Status,
            'reblogged': bool,
            'reblogs_count': int,
            'replies_count': int,
            'sensitive': bool,
            'spoiler_text': str,
            'tags': List[Tag],
            'text': str,
            'uri': str,
            'url': str,
            'visibility': str,
            'params': StatusParams,
            'scheduled_at': datetime
        }

        self.attribute_map = {
            'account': 'account',
            'application': 'application',
            'bookmarked': 'bookmarked',
            'card': 'card',
            'content': 'content',
            'created_at': 'created_at',
            'emojis': 'emojis',
            'favourited': 'favourited',
            'favourites_count': 'favourites_count',
            'id': 'id',
            'in_reply_to_account_id': 'in_reply_to_account_id',
            'in_reply_to_id': 'in_reply_to_id',
            'language': 'language',
            'media_attachments': 'media_attachments',
            'mentions': 'mentions',
            'muted': 'muted',
            'pinned': 'pinned',
            'poll': 'poll',
            'reblog': 'reblog',
            'reblogged': 'reblogged',
            'reblogs_count': 'reblogs_count',
            'replies_count': 'replies_count',
            'sensitive': 'sensitive',
            'spoiler_text': 'spoiler_text',
            'tags': 'tags',
            'text': 'text',
            'uri': 'uri',
            'url': 'url',
            'visibility': 'visibility',
            'params': 'params',
            'scheduled_at': 'scheduled_at'
        }

        self._account = account
        self._application = application
        self._bookmarked = bookmarked
        self._card = card
        self._content = content
        self._created_at = created_at
        self._emojis = emojis
        self._favourited = favourited
        self._favourites_count = favourites_count
        self._id = id
        self._in_reply_to_account_id = in_reply_to_account_id
        self._in_reply_to_id = in_reply_to_id
        self._language = language
        self._media_attachments = media_attachments
        self._mentions = mentions
        self._muted = muted
        self._pinned = pinned
        self._poll = poll
        self._reblog = reblog
        self._reblogged = reblogged
        self._reblogs_count = reblogs_count
        self._replies_count = replies_count
        self._sensitive = sensitive
        self._spoiler_text = spoiler_text
        self._tags = tags
        self._text = text
        self._uri = uri
        self._url = url
        self._visibility = visibility
        self._params = params
        self._scheduled_at = scheduled_at

    @classmethod
    def from_dict(cls, dikt) -> 'ApiV1StatusesPost200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_v1_statuses_post_200_response of this ApiV1StatusesPost200Response.  # noqa: E501
        :rtype: ApiV1StatusesPost200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account(self) -> Account:
        """Gets the account of this ApiV1StatusesPost200Response.


        :return: The account of this ApiV1StatusesPost200Response.
        :rtype: Account
        """
        return self._account

    @account.setter
    def account(self, account: Account):
        """Sets the account of this ApiV1StatusesPost200Response.


        :param account: The account of this ApiV1StatusesPost200Response.
        :type account: Account
        """

        self._account = account

    @property
    def application(self) -> Application:
        """Gets the application of this ApiV1StatusesPost200Response.


        :return: The application of this ApiV1StatusesPost200Response.
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application: Application):
        """Sets the application of this ApiV1StatusesPost200Response.


        :param application: The application of this ApiV1StatusesPost200Response.
        :type application: Application
        """

        self._application = application

    @property
    def bookmarked(self) -> bool:
        """Gets the bookmarked of this ApiV1StatusesPost200Response.

        Have you bookmarked this status?  # noqa: E501

        :return: The bookmarked of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._bookmarked

    @bookmarked.setter
    def bookmarked(self, bookmarked: bool):
        """Sets the bookmarked of this ApiV1StatusesPost200Response.

        Have you bookmarked this status?  # noqa: E501

        :param bookmarked: The bookmarked of this ApiV1StatusesPost200Response.
        :type bookmarked: bool
        """

        self._bookmarked = bookmarked

    @property
    def card(self) -> Card:
        """Gets the card of this ApiV1StatusesPost200Response.


        :return: The card of this ApiV1StatusesPost200Response.
        :rtype: Card
        """
        return self._card

    @card.setter
    def card(self, card: Card):
        """Sets the card of this ApiV1StatusesPost200Response.


        :param card: The card of this ApiV1StatusesPost200Response.
        :type card: Card
        """

        self._card = card

    @property
    def content(self) -> str:
        """Gets the content of this ApiV1StatusesPost200Response.

        HTML-encoded status content.  # noqa: E501

        :return: The content of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this ApiV1StatusesPost200Response.

        HTML-encoded status content.  # noqa: E501

        :param content: The content of this ApiV1StatusesPost200Response.
        :type content: str
        """

        self._content = content

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ApiV1StatusesPost200Response.

        The date when this status was created.  # noqa: E501

        :return: The created_at of this ApiV1StatusesPost200Response.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ApiV1StatusesPost200Response.

        The date when this status was created.  # noqa: E501

        :param created_at: The created_at of this ApiV1StatusesPost200Response.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def emojis(self) -> List[Emoji]:
        """Gets the emojis of this ApiV1StatusesPost200Response.

        Custom emoji to be used when rendering status content.  # noqa: E501

        :return: The emojis of this ApiV1StatusesPost200Response.
        :rtype: List[Emoji]
        """
        return self._emojis

    @emojis.setter
    def emojis(self, emojis: List[Emoji]):
        """Sets the emojis of this ApiV1StatusesPost200Response.

        Custom emoji to be used when rendering status content.  # noqa: E501

        :param emojis: The emojis of this ApiV1StatusesPost200Response.
        :type emojis: List[Emoji]
        """

        self._emojis = emojis

    @property
    def favourited(self) -> bool:
        """Gets the favourited of this ApiV1StatusesPost200Response.

        Have you favourited this status?  # noqa: E501

        :return: The favourited of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._favourited

    @favourited.setter
    def favourited(self, favourited: bool):
        """Sets the favourited of this ApiV1StatusesPost200Response.

        Have you favourited this status?  # noqa: E501

        :param favourited: The favourited of this ApiV1StatusesPost200Response.
        :type favourited: bool
        """

        self._favourited = favourited

    @property
    def favourites_count(self) -> int:
        """Gets the favourites_count of this ApiV1StatusesPost200Response.

        How many favourites this status has received.  # noqa: E501

        :return: The favourites_count of this ApiV1StatusesPost200Response.
        :rtype: int
        """
        return self._favourites_count

    @favourites_count.setter
    def favourites_count(self, favourites_count: int):
        """Sets the favourites_count of this ApiV1StatusesPost200Response.

        How many favourites this status has received.  # noqa: E501

        :param favourites_count: The favourites_count of this ApiV1StatusesPost200Response.
        :type favourites_count: int
        """

        self._favourites_count = favourites_count

    @property
    def id(self) -> str:
        """Gets the id of this ApiV1StatusesPost200Response.

        ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :return: The id of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApiV1StatusesPost200Response.

        ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.  # noqa: E501

        :param id: The id of this ApiV1StatusesPost200Response.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def in_reply_to_account_id(self) -> str:
        """Gets the in_reply_to_account_id of this ApiV1StatusesPost200Response.

        ID of the account being replied to.  # noqa: E501

        :return: The in_reply_to_account_id of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._in_reply_to_account_id

    @in_reply_to_account_id.setter
    def in_reply_to_account_id(self, in_reply_to_account_id: str):
        """Sets the in_reply_to_account_id of this ApiV1StatusesPost200Response.

        ID of the account being replied to.  # noqa: E501

        :param in_reply_to_account_id: The in_reply_to_account_id of this ApiV1StatusesPost200Response.
        :type in_reply_to_account_id: str
        """

        self._in_reply_to_account_id = in_reply_to_account_id

    @property
    def in_reply_to_id(self) -> str:
        """Gets the in_reply_to_id of this ApiV1StatusesPost200Response.

        ID of the status being replied. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :return: The in_reply_to_id of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._in_reply_to_id

    @in_reply_to_id.setter
    def in_reply_to_id(self, in_reply_to_id: str):
        """Sets the in_reply_to_id of this ApiV1StatusesPost200Response.

        ID of the status being replied. Cast from an integer but not guaranteed to be a number.  # noqa: E501

        :param in_reply_to_id: The in_reply_to_id of this ApiV1StatusesPost200Response.
        :type in_reply_to_id: str
        """

        self._in_reply_to_id = in_reply_to_id

    @property
    def language(self) -> str:
        """Gets the language of this ApiV1StatusesPost200Response.

        Primary language of this status. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :return: The language of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ApiV1StatusesPost200Response.

        Primary language of this status. ISO 639 Part 1 two-letter language code.  # noqa: E501

        :param language: The language of this ApiV1StatusesPost200Response.
        :type language: str
        """

        self._language = language

    @property
    def media_attachments(self) -> List[Attachment]:
        """Gets the media_attachments of this ApiV1StatusesPost200Response.

        Array of attachements  # noqa: E501

        :return: The media_attachments of this ApiV1StatusesPost200Response.
        :rtype: List[Attachment]
        """
        return self._media_attachments

    @media_attachments.setter
    def media_attachments(self, media_attachments: List[Attachment]):
        """Sets the media_attachments of this ApiV1StatusesPost200Response.

        Array of attachements  # noqa: E501

        :param media_attachments: The media_attachments of this ApiV1StatusesPost200Response.
        :type media_attachments: List[Attachment]
        """
        if media_attachments is None:
            raise ValueError("Invalid value for `media_attachments`, must not be `None`")  # noqa: E501

        self._media_attachments = media_attachments

    @property
    def mentions(self) -> List[Mention]:
        """Gets the mentions of this ApiV1StatusesPost200Response.

        Mentions of users within the status content.  # noqa: E501

        :return: The mentions of this ApiV1StatusesPost200Response.
        :rtype: List[Mention]
        """
        return self._mentions

    @mentions.setter
    def mentions(self, mentions: List[Mention]):
        """Sets the mentions of this ApiV1StatusesPost200Response.

        Mentions of users within the status content.  # noqa: E501

        :param mentions: The mentions of this ApiV1StatusesPost200Response.
        :type mentions: List[Mention]
        """

        self._mentions = mentions

    @property
    def muted(self) -> bool:
        """Gets the muted of this ApiV1StatusesPost200Response.

        Have you muted notifications for this status's conversation?  # noqa: E501

        :return: The muted of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._muted

    @muted.setter
    def muted(self, muted: bool):
        """Sets the muted of this ApiV1StatusesPost200Response.

        Have you muted notifications for this status's conversation?  # noqa: E501

        :param muted: The muted of this ApiV1StatusesPost200Response.
        :type muted: bool
        """

        self._muted = muted

    @property
    def pinned(self) -> bool:
        """Gets the pinned of this ApiV1StatusesPost200Response.

        Have you pinned this status? Only appears if the status is pinnable.  # noqa: E501

        :return: The pinned of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._pinned

    @pinned.setter
    def pinned(self, pinned: bool):
        """Sets the pinned of this ApiV1StatusesPost200Response.

        Have you pinned this status? Only appears if the status is pinnable.  # noqa: E501

        :param pinned: The pinned of this ApiV1StatusesPost200Response.
        :type pinned: bool
        """

        self._pinned = pinned

    @property
    def poll(self) -> Poll:
        """Gets the poll of this ApiV1StatusesPost200Response.


        :return: The poll of this ApiV1StatusesPost200Response.
        :rtype: Poll
        """
        return self._poll

    @poll.setter
    def poll(self, poll: Poll):
        """Sets the poll of this ApiV1StatusesPost200Response.


        :param poll: The poll of this ApiV1StatusesPost200Response.
        :type poll: Poll
        """

        self._poll = poll

    @property
    def reblog(self) -> Status:
        """Gets the reblog of this ApiV1StatusesPost200Response.


        :return: The reblog of this ApiV1StatusesPost200Response.
        :rtype: Status
        """
        return self._reblog

    @reblog.setter
    def reblog(self, reblog: Status):
        """Sets the reblog of this ApiV1StatusesPost200Response.


        :param reblog: The reblog of this ApiV1StatusesPost200Response.
        :type reblog: Status
        """

        self._reblog = reblog

    @property
    def reblogged(self) -> bool:
        """Gets the reblogged of this ApiV1StatusesPost200Response.

        Have you boosted this status?  # noqa: E501

        :return: The reblogged of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._reblogged

    @reblogged.setter
    def reblogged(self, reblogged: bool):
        """Sets the reblogged of this ApiV1StatusesPost200Response.

        Have you boosted this status?  # noqa: E501

        :param reblogged: The reblogged of this ApiV1StatusesPost200Response.
        :type reblogged: bool
        """

        self._reblogged = reblogged

    @property
    def reblogs_count(self) -> int:
        """Gets the reblogs_count of this ApiV1StatusesPost200Response.

        How many boosts this status has received.  # noqa: E501

        :return: The reblogs_count of this ApiV1StatusesPost200Response.
        :rtype: int
        """
        return self._reblogs_count

    @reblogs_count.setter
    def reblogs_count(self, reblogs_count: int):
        """Sets the reblogs_count of this ApiV1StatusesPost200Response.

        How many boosts this status has received.  # noqa: E501

        :param reblogs_count: The reblogs_count of this ApiV1StatusesPost200Response.
        :type reblogs_count: int
        """

        self._reblogs_count = reblogs_count

    @property
    def replies_count(self) -> int:
        """Gets the replies_count of this ApiV1StatusesPost200Response.

        How many replies this status has received.  # noqa: E501

        :return: The replies_count of this ApiV1StatusesPost200Response.
        :rtype: int
        """
        return self._replies_count

    @replies_count.setter
    def replies_count(self, replies_count: int):
        """Sets the replies_count of this ApiV1StatusesPost200Response.

        How many replies this status has received.  # noqa: E501

        :param replies_count: The replies_count of this ApiV1StatusesPost200Response.
        :type replies_count: int
        """

        self._replies_count = replies_count

    @property
    def sensitive(self) -> bool:
        """Gets the sensitive of this ApiV1StatusesPost200Response.

        Is this status marked as sensitive content?  # noqa: E501

        :return: The sensitive of this ApiV1StatusesPost200Response.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive: bool):
        """Sets the sensitive of this ApiV1StatusesPost200Response.

        Is this status marked as sensitive content?  # noqa: E501

        :param sensitive: The sensitive of this ApiV1StatusesPost200Response.
        :type sensitive: bool
        """

        self._sensitive = sensitive

    @property
    def spoiler_text(self) -> str:
        """Gets the spoiler_text of this ApiV1StatusesPost200Response.

        Subject or summary line, below which status content is collapsed until expanded.  # noqa: E501

        :return: The spoiler_text of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._spoiler_text

    @spoiler_text.setter
    def spoiler_text(self, spoiler_text: str):
        """Sets the spoiler_text of this ApiV1StatusesPost200Response.

        Subject or summary line, below which status content is collapsed until expanded.  # noqa: E501

        :param spoiler_text: The spoiler_text of this ApiV1StatusesPost200Response.
        :type spoiler_text: str
        """

        self._spoiler_text = spoiler_text

    @property
    def tags(self) -> List[Tag]:
        """Gets the tags of this ApiV1StatusesPost200Response.

        Hashtags used within the status content.  # noqa: E501

        :return: The tags of this ApiV1StatusesPost200Response.
        :rtype: List[Tag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[Tag]):
        """Sets the tags of this ApiV1StatusesPost200Response.

        Hashtags used within the status content.  # noqa: E501

        :param tags: The tags of this ApiV1StatusesPost200Response.
        :type tags: List[Tag]
        """

        self._tags = tags

    @property
    def text(self) -> str:
        """Gets the text of this ApiV1StatusesPost200Response.

        Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.  # noqa: E501

        :return: The text of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this ApiV1StatusesPost200Response.

        Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.  # noqa: E501

        :param text: The text of this ApiV1StatusesPost200Response.
        :type text: str
        """

        self._text = text

    @property
    def uri(self) -> str:
        """Gets the uri of this ApiV1StatusesPost200Response.

        URI of the status used for federation.  # noqa: E501

        :return: The uri of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this ApiV1StatusesPost200Response.

        URI of the status used for federation.  # noqa: E501

        :param uri: The uri of this ApiV1StatusesPost200Response.
        :type uri: str
        """

        self._uri = uri

    @property
    def url(self) -> str:
        """Gets the url of this ApiV1StatusesPost200Response.

        A link to the status's HTML representation.  # noqa: E501

        :return: The url of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this ApiV1StatusesPost200Response.

        A link to the status's HTML representation.  # noqa: E501

        :param url: The url of this ApiV1StatusesPost200Response.
        :type url: str
        """

        self._url = url

    @property
    def visibility(self) -> str:
        """Gets the visibility of this ApiV1StatusesPost200Response.

        Visibility of this status.  # noqa: E501

        :return: The visibility of this ApiV1StatusesPost200Response.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this ApiV1StatusesPost200Response.

        Visibility of this status.  # noqa: E501

        :param visibility: The visibility of this ApiV1StatusesPost200Response.
        :type visibility: str
        """
        allowed_values = ["public", "unlisted", "private", "direct"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility

    @property
    def params(self) -> StatusParams:
        """Gets the params of this ApiV1StatusesPost200Response.


        :return: The params of this ApiV1StatusesPost200Response.
        :rtype: StatusParams
        """
        return self._params

    @params.setter
    def params(self, params: StatusParams):
        """Sets the params of this ApiV1StatusesPost200Response.


        :param params: The params of this ApiV1StatusesPost200Response.
        :type params: StatusParams
        """
        if params is None:
            raise ValueError("Invalid value for `params`, must not be `None`")  # noqa: E501

        self._params = params

    @property
    def scheduled_at(self) -> datetime:
        """Gets the scheduled_at of this ApiV1StatusesPost200Response.

        ID of the status in the database. ISO 8601 Datetime.  # noqa: E501

        :return: The scheduled_at of this ApiV1StatusesPost200Response.
        :rtype: datetime
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at: datetime):
        """Sets the scheduled_at of this ApiV1StatusesPost200Response.

        ID of the status in the database. ISO 8601 Datetime.  # noqa: E501

        :param scheduled_at: The scheduled_at of this ApiV1StatusesPost200Response.
        :type scheduled_at: datetime
        """
        if scheduled_at is None:
            raise ValueError("Invalid value for `scheduled_at`, must not be `None`")  # noqa: E501

        self._scheduled_at = scheduled_at
