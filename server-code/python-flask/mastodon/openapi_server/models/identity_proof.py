from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IdentityProof(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, profile_url=None, proof_url=None, provider=None, provider_username=None, updated_at=None):  # noqa: E501
        """IdentityProof - a model defined in OpenAPI

        :param profile_url: The profile_url of this IdentityProof.  # noqa: E501
        :type profile_url: str
        :param proof_url: The proof_url of this IdentityProof.  # noqa: E501
        :type proof_url: str
        :param provider: The provider of this IdentityProof.  # noqa: E501
        :type provider: str
        :param provider_username: The provider_username of this IdentityProof.  # noqa: E501
        :type provider_username: str
        :param updated_at: The updated_at of this IdentityProof.  # noqa: E501
        :type updated_at: str
        """
        self.openapi_types = {
            'profile_url': str,
            'proof_url': str,
            'provider': str,
            'provider_username': str,
            'updated_at': str
        }

        self.attribute_map = {
            'profile_url': 'profile_url',
            'proof_url': 'proof_url',
            'provider': 'provider',
            'provider_username': 'provider_username',
            'updated_at': 'updated_at'
        }

        self._profile_url = profile_url
        self._proof_url = proof_url
        self._provider = provider
        self._provider_username = provider_username
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'IdentityProof':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IdentityProof of this IdentityProof.  # noqa: E501
        :rtype: IdentityProof
        """
        return util.deserialize_model(dikt, cls)

    @property
    def profile_url(self) -> str:
        """Gets the profile_url of this IdentityProof.

        The account owner's profile URL on the identity provider.  # noqa: E501

        :return: The profile_url of this IdentityProof.
        :rtype: str
        """
        return self._profile_url

    @profile_url.setter
    def profile_url(self, profile_url: str):
        """Sets the profile_url of this IdentityProof.

        The account owner's profile URL on the identity provider.  # noqa: E501

        :param profile_url: The profile_url of this IdentityProof.
        :type profile_url: str
        """

        self._profile_url = profile_url

    @property
    def proof_url(self) -> str:
        """Gets the proof_url of this IdentityProof.

        A link to a statement of identity proof, hosted by the identity provider.  # noqa: E501

        :return: The proof_url of this IdentityProof.
        :rtype: str
        """
        return self._proof_url

    @proof_url.setter
    def proof_url(self, proof_url: str):
        """Sets the proof_url of this IdentityProof.

        A link to a statement of identity proof, hosted by the identity provider.  # noqa: E501

        :param proof_url: The proof_url of this IdentityProof.
        :type proof_url: str
        """

        self._proof_url = proof_url

    @property
    def provider(self) -> str:
        """Gets the provider of this IdentityProof.

        The name of the identity provider.  # noqa: E501

        :return: The provider of this IdentityProof.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider: str):
        """Sets the provider of this IdentityProof.

        The name of the identity provider.  # noqa: E501

        :param provider: The provider of this IdentityProof.
        :type provider: str
        """

        self._provider = provider

    @property
    def provider_username(self) -> str:
        """Gets the provider_username of this IdentityProof.

        The account owner's username on the identity provider's service.  # noqa: E501

        :return: The provider_username of this IdentityProof.
        :rtype: str
        """
        return self._provider_username

    @provider_username.setter
    def provider_username(self, provider_username: str):
        """Sets the provider_username of this IdentityProof.

        The account owner's username on the identity provider's service.  # noqa: E501

        :param provider_username: The provider_username of this IdentityProof.
        :type provider_username: str
        """

        self._provider_username = provider_username

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this IdentityProof.

        When the identity proof was last updated. ISO 8601 Datetime.  # noqa: E501

        :return: The updated_at of this IdentityProof.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this IdentityProof.

        When the identity proof was last updated. ISO 8601 Datetime.  # noqa: E501

        :param updated_at: The updated_at of this IdentityProof.
        :type updated_at: str
        """

        self._updated_at = updated_at
