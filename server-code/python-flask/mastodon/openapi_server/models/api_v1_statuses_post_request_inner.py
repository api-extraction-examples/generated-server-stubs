from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiV1StatusesPostRequestInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, in_reply_to_id=None, language=None, media_ids=None, poll=None, scheduled_at=None, sensitive=None, spoiler_text=None, status=None, visibility=None):  # noqa: E501
        """ApiV1StatusesPostRequestInner - a model defined in OpenAPI

        :param in_reply_to_id: The in_reply_to_id of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type in_reply_to_id: str
        :param language: The language of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type language: str
        :param media_ids: The media_ids of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type media_ids: List[str]
        :param poll: The poll of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type poll: Dict[object]
        :param scheduled_at: The scheduled_at of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type scheduled_at: str
        :param sensitive: The sensitive of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type sensitive: bool
        :param spoiler_text: The spoiler_text of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type spoiler_text: str
        :param status: The status of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type status: str
        :param visibility: The visibility of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :type visibility: str
        """
        self.openapi_types = {
            'in_reply_to_id': str,
            'language': str,
            'media_ids': List[str],
            'poll': Dict[object],
            'scheduled_at': str,
            'sensitive': bool,
            'spoiler_text': str,
            'status': str,
            'visibility': str
        }

        self.attribute_map = {
            'in_reply_to_id': 'in_reply_to_id',
            'language': 'language',
            'media_ids': 'media_ids',
            'poll': 'poll',
            'scheduled_at': 'scheduled_at',
            'sensitive': 'sensitive',
            'spoiler_text': 'spoiler_text',
            'status': 'status',
            'visibility': 'visibility'
        }

        self._in_reply_to_id = in_reply_to_id
        self._language = language
        self._media_ids = media_ids
        self._poll = poll
        self._scheduled_at = scheduled_at
        self._sensitive = sensitive
        self._spoiler_text = spoiler_text
        self._status = status
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt) -> 'ApiV1StatusesPostRequestInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_v1_statuses_post_request_inner of this ApiV1StatusesPostRequestInner.  # noqa: E501
        :rtype: ApiV1StatusesPostRequestInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def in_reply_to_id(self) -> str:
        """Gets the in_reply_to_id of this ApiV1StatusesPostRequestInner.

        ID of the status being replied to, if status is a reply  # noqa: E501

        :return: The in_reply_to_id of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._in_reply_to_id

    @in_reply_to_id.setter
    def in_reply_to_id(self, in_reply_to_id: str):
        """Sets the in_reply_to_id of this ApiV1StatusesPostRequestInner.

        ID of the status being replied to, if status is a reply  # noqa: E501

        :param in_reply_to_id: The in_reply_to_id of this ApiV1StatusesPostRequestInner.
        :type in_reply_to_id: str
        """

        self._in_reply_to_id = in_reply_to_id

    @property
    def language(self) -> str:
        """Gets the language of this ApiV1StatusesPostRequestInner.

        ISO 639 language code for this status.  # noqa: E501

        :return: The language of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this ApiV1StatusesPostRequestInner.

        ISO 639 language code for this status.  # noqa: E501

        :param language: The language of this ApiV1StatusesPostRequestInner.
        :type language: str
        """

        self._language = language

    @property
    def media_ids(self) -> List[str]:
        """Gets the media_ids of this ApiV1StatusesPostRequestInner.

        Array of Attachment ids to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.  # noqa: E501

        :return: The media_ids of this ApiV1StatusesPostRequestInner.
        :rtype: List[str]
        """
        return self._media_ids

    @media_ids.setter
    def media_ids(self, media_ids: List[str]):
        """Sets the media_ids of this ApiV1StatusesPostRequestInner.

        Array of Attachment ids to be attached as media. If provided, `status` becomes optional, and `poll` cannot be used.  # noqa: E501

        :param media_ids: The media_ids of this ApiV1StatusesPostRequestInner.
        :type media_ids: List[str]
        """

        self._media_ids = media_ids

    @property
    def poll(self) -> Dict[object]:
        """Gets the poll of this ApiV1StatusesPostRequestInner.


        :return: The poll of this ApiV1StatusesPostRequestInner.
        :rtype: Dict[object]
        """
        return self._poll

    @poll.setter
    def poll(self, poll: Dict[object]):
        """Sets the poll of this ApiV1StatusesPostRequestInner.


        :param poll: The poll of this ApiV1StatusesPostRequestInner.
        :type poll: Dict[object]
        """

        self._poll = poll

    @property
    def scheduled_at(self) -> str:
        """Gets the scheduled_at of this ApiV1StatusesPostRequestInner.

        ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.  # noqa: E501

        :return: The scheduled_at of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._scheduled_at

    @scheduled_at.setter
    def scheduled_at(self, scheduled_at: str):
        """Sets the scheduled_at of this ApiV1StatusesPostRequestInner.

        ISO 8601 Datetime at which to schedule a status. Providing this paramter will cause ScheduledStatus to be returned instead of Status. Must be at least 5 minutes in the future.  # noqa: E501

        :param scheduled_at: The scheduled_at of this ApiV1StatusesPostRequestInner.
        :type scheduled_at: str
        """

        self._scheduled_at = scheduled_at

    @property
    def sensitive(self) -> bool:
        """Gets the sensitive of this ApiV1StatusesPostRequestInner.

        Mark status and attached media as sensitive?  # noqa: E501

        :return: The sensitive of this ApiV1StatusesPostRequestInner.
        :rtype: bool
        """
        return self._sensitive

    @sensitive.setter
    def sensitive(self, sensitive: bool):
        """Sets the sensitive of this ApiV1StatusesPostRequestInner.

        Mark status and attached media as sensitive?  # noqa: E501

        :param sensitive: The sensitive of this ApiV1StatusesPostRequestInner.
        :type sensitive: bool
        """

        self._sensitive = sensitive

    @property
    def spoiler_text(self) -> str:
        """Gets the spoiler_text of this ApiV1StatusesPostRequestInner.

        Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.  # noqa: E501

        :return: The spoiler_text of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._spoiler_text

    @spoiler_text.setter
    def spoiler_text(self, spoiler_text: str):
        """Sets the spoiler_text of this ApiV1StatusesPostRequestInner.

        Text to be shown as a warning or subject before the actual content. Statuses are generally collapsed behind this field.  # noqa: E501

        :param spoiler_text: The spoiler_text of this ApiV1StatusesPostRequestInner.
        :type spoiler_text: str
        """

        self._spoiler_text = spoiler_text

    @property
    def status(self) -> str:
        """Gets the status of this ApiV1StatusesPostRequestInner.

        Text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.  # noqa: E501

        :return: The status of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ApiV1StatusesPostRequestInner.

        Text content of the status. If `media_ids` is provided, this becomes optional. Attaching a `poll` is optional while `status` is provided.  # noqa: E501

        :param status: The status of this ApiV1StatusesPostRequestInner.
        :type status: str
        """

        self._status = status

    @property
    def visibility(self) -> str:
        """Gets the visibility of this ApiV1StatusesPostRequestInner.

        Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.  # noqa: E501

        :return: The visibility of this ApiV1StatusesPostRequestInner.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this ApiV1StatusesPostRequestInner.

        Visibility of the posted status. Enumerable oneOf public, unlisted, private, direct.  # noqa: E501

        :param visibility: The visibility of this ApiV1StatusesPostRequestInner.
        :type visibility: str
        """
        allowed_values = ["public", "unlisted", "private", "direct"]  # noqa: E501
        if visibility not in allowed_values:
            raise ValueError(
                "Invalid value for `visibility` ({0}), must be one of {1}"
                .format(visibility, allowed_values)
            )

        self._visibility = visibility
