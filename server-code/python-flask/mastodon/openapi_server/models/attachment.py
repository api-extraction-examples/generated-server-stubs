from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Attachment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blurhash=None, description=None, id=None, meta=None, preview_url=None, remote_url=None, text_url=None, type=None, url=None):  # noqa: E501
        """Attachment - a model defined in OpenAPI

        :param blurhash: The blurhash of this Attachment.  # noqa: E501
        :type blurhash: str
        :param description: The description of this Attachment.  # noqa: E501
        :type description: str
        :param id: The id of this Attachment.  # noqa: E501
        :type id: str
        :param meta: The meta of this Attachment.  # noqa: E501
        :type meta: object
        :param preview_url: The preview_url of this Attachment.  # noqa: E501
        :type preview_url: str
        :param remote_url: The remote_url of this Attachment.  # noqa: E501
        :type remote_url: str
        :param text_url: The text_url of this Attachment.  # noqa: E501
        :type text_url: str
        :param type: The type of this Attachment.  # noqa: E501
        :type type: str
        :param url: The url of this Attachment.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'blurhash': str,
            'description': str,
            'id': str,
            'meta': object,
            'preview_url': str,
            'remote_url': str,
            'text_url': str,
            'type': str,
            'url': str
        }

        self.attribute_map = {
            'blurhash': 'blurhash',
            'description': 'description',
            'id': 'id',
            'meta': 'meta',
            'preview_url': 'preview_url',
            'remote_url': 'remote_url',
            'text_url': 'text_url',
            'type': 'type',
            'url': 'url'
        }

        self._blurhash = blurhash
        self._description = description
        self._id = id
        self._meta = meta
        self._preview_url = preview_url
        self._remote_url = remote_url
        self._text_url = text_url
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Attachment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Attachment of this Attachment.  # noqa: E501
        :rtype: Attachment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blurhash(self) -> str:
        """Gets the blurhash of this Attachment.

        A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :return: The blurhash of this Attachment.
        :rtype: str
        """
        return self._blurhash

    @blurhash.setter
    def blurhash(self, blurhash: str):
        """Sets the blurhash of this Attachment.

        A hash computed by the [BlurHash algorithm](https://github.com/woltapp/blurhash), for generating colorful preview thumbnails when media has not been downloaded yet.  # noqa: E501

        :param blurhash: The blurhash of this Attachment.
        :type blurhash: str
        """

        self._blurhash = blurhash

    @property
    def description(self) -> str:
        """Gets the description of this Attachment.

        Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.  # noqa: E501

        :return: The description of this Attachment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Attachment.

        Alternate text that describes what is in the media attachment, to be used for the visually impaired or when media attachments do not load.  # noqa: E501

        :param description: The description of this Attachment.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this Attachment.

        The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number  # noqa: E501

        :return: The id of this Attachment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Attachment.

        The ID of the attachment in the database. Cast from an integer but not guaranteed to be a number  # noqa: E501

        :param id: The id of this Attachment.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def meta(self) -> object:
        """Gets the meta of this Attachment.

        Metadata returned by Paperclip.  # noqa: E501

        :return: The meta of this Attachment.
        :rtype: object
        """
        return self._meta

    @meta.setter
    def meta(self, meta: object):
        """Sets the meta of this Attachment.

        Metadata returned by Paperclip.  # noqa: E501

        :param meta: The meta of this Attachment.
        :type meta: object
        """

        self._meta = meta

    @property
    def preview_url(self) -> str:
        """Gets the preview_url of this Attachment.

        The location of a scaled-down preview of the attachment.  # noqa: E501

        :return: The preview_url of this Attachment.
        :rtype: str
        """
        return self._preview_url

    @preview_url.setter
    def preview_url(self, preview_url: str):
        """Sets the preview_url of this Attachment.

        The location of a scaled-down preview of the attachment.  # noqa: E501

        :param preview_url: The preview_url of this Attachment.
        :type preview_url: str
        """
        if preview_url is None:
            raise ValueError("Invalid value for `preview_url`, must not be `None`")  # noqa: E501

        self._preview_url = preview_url

    @property
    def remote_url(self) -> str:
        """Gets the remote_url of this Attachment.

        The location of the full-size original attachment on the remote website. String or null if the attachment is local.  # noqa: E501

        :return: The remote_url of this Attachment.
        :rtype: str
        """
        return self._remote_url

    @remote_url.setter
    def remote_url(self, remote_url: str):
        """Sets the remote_url of this Attachment.

        The location of the full-size original attachment on the remote website. String or null if the attachment is local.  # noqa: E501

        :param remote_url: The remote_url of this Attachment.
        :type remote_url: str
        """

        self._remote_url = remote_url

    @property
    def text_url(self) -> str:
        """Gets the text_url of this Attachment.

        A shorter URL for the attachment.  # noqa: E501

        :return: The text_url of this Attachment.
        :rtype: str
        """
        return self._text_url

    @text_url.setter
    def text_url(self, text_url: str):
        """Sets the text_url of this Attachment.

        A shorter URL for the attachment.  # noqa: E501

        :param text_url: The text_url of this Attachment.
        :type text_url: str
        """

        self._text_url = text_url

    @property
    def type(self) -> str:
        """Gets the type of this Attachment.

        The type of the attachment.  # noqa: E501

        :return: The type of this Attachment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Attachment.

        The type of the attachment.  # noqa: E501

        :param type: The type of this Attachment.
        :type type: str
        """
        allowed_values = ["unknown", "image", "gifv", "video", "audio"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def url(self) -> str:
        """Gets the url of this Attachment.

        The location of the original full-size attachment.  # noqa: E501

        :return: The url of this Attachment.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Attachment.

        The location of the original full-size attachment.  # noqa: E501

        :param url: The url of this Attachment.
        :type url: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")  # noqa: E501

        self._url = url
