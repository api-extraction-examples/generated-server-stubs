from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ApiV1ReportsPostRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, comment=None, forward=None, status_ids=None):  # noqa: E501
        """ApiV1ReportsPostRequest - a model defined in OpenAPI

        :param account_id: The account_id of this ApiV1ReportsPostRequest.  # noqa: E501
        :type account_id: str
        :param comment: The comment of this ApiV1ReportsPostRequest.  # noqa: E501
        :type comment: str
        :param forward: The forward of this ApiV1ReportsPostRequest.  # noqa: E501
        :type forward: bool
        :param status_ids: The status_ids of this ApiV1ReportsPostRequest.  # noqa: E501
        :type status_ids: List[str]
        """
        self.openapi_types = {
            'account_id': str,
            'comment': str,
            'forward': bool,
            'status_ids': List[str]
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'comment': 'comment',
            'forward': 'forward',
            'status_ids': 'status_ids'
        }

        self._account_id = account_id
        self._comment = comment
        self._forward = forward
        self._status_ids = status_ids

    @classmethod
    def from_dict(cls, dikt) -> 'ApiV1ReportsPostRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _api_v1_reports_post_request of this ApiV1ReportsPostRequest.  # noqa: E501
        :rtype: ApiV1ReportsPostRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this ApiV1ReportsPostRequest.

        ID of the account to report  # noqa: E501

        :return: The account_id of this ApiV1ReportsPostRequest.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this ApiV1ReportsPostRequest.

        ID of the account to report  # noqa: E501

        :param account_id: The account_id of this ApiV1ReportsPostRequest.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def comment(self) -> str:
        """Gets the comment of this ApiV1ReportsPostRequest.

        Reason for the report (default max 1000 characters)  # noqa: E501

        :return: The comment of this ApiV1ReportsPostRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this ApiV1ReportsPostRequest.

        Reason for the report (default max 1000 characters)  # noqa: E501

        :param comment: The comment of this ApiV1ReportsPostRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def forward(self) -> bool:
        """Gets the forward of this ApiV1ReportsPostRequest.

        If the account is remote, should the report be forwarded to the remote admin?  # noqa: E501

        :return: The forward of this ApiV1ReportsPostRequest.
        :rtype: bool
        """
        return self._forward

    @forward.setter
    def forward(self, forward: bool):
        """Sets the forward of this ApiV1ReportsPostRequest.

        If the account is remote, should the report be forwarded to the remote admin?  # noqa: E501

        :param forward: The forward of this ApiV1ReportsPostRequest.
        :type forward: bool
        """

        self._forward = forward

    @property
    def status_ids(self) -> List[str]:
        """Gets the status_ids of this ApiV1ReportsPostRequest.

        Array of Statuses to attach to the report, for context  # noqa: E501

        :return: The status_ids of this ApiV1ReportsPostRequest.
        :rtype: List[str]
        """
        return self._status_ids

    @status_ids.setter
    def status_ids(self, status_ids: List[str]):
        """Sets the status_ids of this ApiV1ReportsPostRequest.

        Array of Statuses to attach to the report, for context  # noqa: E501

        :param status_ids: The status_ids of this ApiV1ReportsPostRequest.
        :type status_ids: List[str]
        """

        self._status_ids = status_ids
