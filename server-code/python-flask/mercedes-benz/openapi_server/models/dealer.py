from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.brand_code import BrandCode
from openapi_server.models.communication_channels import CommunicationChannels
from openapi_server.models.function import Function
from openapi_server.models.function_opening_hours import FunctionOpeningHours
from openapi_server.models.geo_coordinates import GeoCoordinates
from openapi_server.models.region_representation import RegionRepresentation
from openapi_server.models.self_link import SelfLink
from openapi_server.models.the_distance import TheDistance
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501
from openapi_server.models.brand_code import BrandCode  # noqa: E501
from openapi_server.models.communication_channels import CommunicationChannels  # noqa: E501
from openapi_server.models.function import Function  # noqa: E501
from openapi_server.models.function_opening_hours import FunctionOpeningHours  # noqa: E501
from openapi_server.models.geo_coordinates import GeoCoordinates  # noqa: E501
from openapi_server.models.region_representation import RegionRepresentation  # noqa: E501
from openapi_server.models.self_link import SelfLink  # noqa: E501
from openapi_server.models.the_distance import TheDistance  # noqa: E501

class Dealer(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, address=None, brand_codes=None, communication=None, dealer_id=None, distance=None, functions=None, geo_coordinates=None, legal_name=None, name_addition=None, opening_hours=None, region=None):  # noqa: E501
        """Dealer - a model defined in OpenAPI

        :param links: The links of this Dealer.  # noqa: E501
        :type links: SelfLink
        :param address: The address of this Dealer.  # noqa: E501
        :type address: Address
        :param brand_codes: The brand_codes of this Dealer.  # noqa: E501
        :type brand_codes: List[BrandCode]
        :param communication: The communication of this Dealer.  # noqa: E501
        :type communication: CommunicationChannels
        :param dealer_id: The dealer_id of this Dealer.  # noqa: E501
        :type dealer_id: str
        :param distance: The distance of this Dealer.  # noqa: E501
        :type distance: TheDistance
        :param functions: The functions of this Dealer.  # noqa: E501
        :type functions: list[Function]
        :param geo_coordinates: The geo_coordinates of this Dealer.  # noqa: E501
        :type geo_coordinates: GeoCoordinates
        :param legal_name: The legal_name of this Dealer.  # noqa: E501
        :type legal_name: str
        :param name_addition: The name_addition of this Dealer.  # noqa: E501
        :type name_addition: str
        :param opening_hours: The opening_hours of this Dealer.  # noqa: E501
        :type opening_hours: list[FunctionOpeningHours]
        :param region: The region of this Dealer.  # noqa: E501
        :type region: RegionRepresentation
        """
        self.openapi_types = {
            'links': SelfLink,
            'address': Address,
            'brand_codes': List[BrandCode],
            'communication': CommunicationChannels,
            'dealer_id': str,
            'distance': TheDistance,
            'functions': list[Function],
            'geo_coordinates': GeoCoordinates,
            'legal_name': str,
            'name_addition': str,
            'opening_hours': list[FunctionOpeningHours],
            'region': RegionRepresentation
        }

        self.attribute_map = {
            'links': '_links',
            'address': 'address',
            'brand_codes': 'brandCodes',
            'communication': 'communication',
            'dealer_id': 'dealerId',
            'distance': 'distance',
            'functions': 'functions',
            'geo_coordinates': 'geoCoordinates',
            'legal_name': 'legalName',
            'name_addition': 'nameAddition',
            'opening_hours': 'openingHours',
            'region': 'region'
        }

        self._links = links
        self._address = address
        self._brand_codes = brand_codes
        self._communication = communication
        self._dealer_id = dealer_id
        self._distance = distance
        self._functions = functions
        self._geo_coordinates = geo_coordinates
        self._legal_name = legal_name
        self._name_addition = name_addition
        self._opening_hours = opening_hours
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> 'Dealer':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dealer of this Dealer.  # noqa: E501
        :rtype: Dealer
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> SelfLink:
        """Gets the links of this Dealer.


        :return: The links of this Dealer.
        :rtype: SelfLink
        """
        return self._links

    @links.setter
    def links(self, links: SelfLink):
        """Sets the links of this Dealer.


        :param links: The links of this Dealer.
        :type links: SelfLink
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def address(self) -> Address:
        """Gets the address of this Dealer.


        :return: The address of this Dealer.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address: Address):
        """Sets the address of this Dealer.


        :param address: The address of this Dealer.
        :type address: Address
        """

        self._address = address

    @property
    def brand_codes(self) -> List[BrandCode]:
        """Gets the brand_codes of this Dealer.

        network brand codes of the dealer, dealer numbers  # noqa: E501

        :return: The brand_codes of this Dealer.
        :rtype: List[BrandCode]
        """
        return self._brand_codes

    @brand_codes.setter
    def brand_codes(self, brand_codes: List[BrandCode]):
        """Sets the brand_codes of this Dealer.

        network brand codes of the dealer, dealer numbers  # noqa: E501

        :param brand_codes: The brand_codes of this Dealer.
        :type brand_codes: List[BrandCode]
        """

        self._brand_codes = brand_codes

    @property
    def communication(self) -> CommunicationChannels:
        """Gets the communication of this Dealer.


        :return: The communication of this Dealer.
        :rtype: CommunicationChannels
        """
        return self._communication

    @communication.setter
    def communication(self, communication: CommunicationChannels):
        """Sets the communication of this Dealer.


        :param communication: The communication of this Dealer.
        :type communication: CommunicationChannels
        """

        self._communication = communication

    @property
    def dealer_id(self) -> str:
        """Gets the dealer_id of this Dealer.

        GSSN unique ID, main identifier  # noqa: E501

        :return: The dealer_id of this Dealer.
        :rtype: str
        """
        return self._dealer_id

    @dealer_id.setter
    def dealer_id(self, dealer_id: str):
        """Sets the dealer_id of this Dealer.

        GSSN unique ID, main identifier  # noqa: E501

        :param dealer_id: The dealer_id of this Dealer.
        :type dealer_id: str
        """
        if dealer_id is None:
            raise ValueError("Invalid value for `dealer_id`, must not be `None`")  # noqa: E501

        self._dealer_id = dealer_id

    @property
    def distance(self) -> TheDistance:
        """Gets the distance of this Dealer.


        :return: The distance of this Dealer.
        :rtype: TheDistance
        """
        return self._distance

    @distance.setter
    def distance(self, distance: TheDistance):
        """Sets the distance of this Dealer.


        :param distance: The distance of this Dealer.
        :type distance: TheDistance
        """

        self._distance = distance

    @property
    def functions(self) -> list[Function]:
        """Gets the functions of this Dealer.

        list of functions for the dealer  # noqa: E501

        :return: The functions of this Dealer.
        :rtype: list[Function]
        """
        return self._functions

    @functions.setter
    def functions(self, functions: list[Function]):
        """Sets the functions of this Dealer.

        list of functions for the dealer  # noqa: E501

        :param functions: The functions of this Dealer.
        :type functions: list[Function]
        """

        self._functions = functions

    @property
    def geo_coordinates(self) -> GeoCoordinates:
        """Gets the geo_coordinates of this Dealer.


        :return: The geo_coordinates of this Dealer.
        :rtype: GeoCoordinates
        """
        return self._geo_coordinates

    @geo_coordinates.setter
    def geo_coordinates(self, geo_coordinates: GeoCoordinates):
        """Sets the geo_coordinates of this Dealer.


        :param geo_coordinates: The geo_coordinates of this Dealer.
        :type geo_coordinates: GeoCoordinates
        """

        self._geo_coordinates = geo_coordinates

    @property
    def legal_name(self) -> str:
        """Gets the legal_name of this Dealer.

        legal name of the company  # noqa: E501

        :return: The legal_name of this Dealer.
        :rtype: str
        """
        return self._legal_name

    @legal_name.setter
    def legal_name(self, legal_name: str):
        """Sets the legal_name of this Dealer.

        legal name of the company  # noqa: E501

        :param legal_name: The legal_name of this Dealer.
        :type legal_name: str
        """
        if legal_name is None:
            raise ValueError("Invalid value for `legal_name`, must not be `None`")  # noqa: E501

        self._legal_name = legal_name

    @property
    def name_addition(self) -> str:
        """Gets the name_addition of this Dealer.

        name addition, country specific use  # noqa: E501

        :return: The name_addition of this Dealer.
        :rtype: str
        """
        return self._name_addition

    @name_addition.setter
    def name_addition(self, name_addition: str):
        """Sets the name_addition of this Dealer.

        name addition, country specific use  # noqa: E501

        :param name_addition: The name_addition of this Dealer.
        :type name_addition: str
        """

        self._name_addition = name_addition

    @property
    def opening_hours(self) -> list[FunctionOpeningHours]:
        """Gets the opening_hours of this Dealer.

        List of opening hours for each customer relevant function for each day   # noqa: E501

        :return: The opening_hours of this Dealer.
        :rtype: list[FunctionOpeningHours]
        """
        return self._opening_hours

    @opening_hours.setter
    def opening_hours(self, opening_hours: list[FunctionOpeningHours]):
        """Sets the opening_hours of this Dealer.

        List of opening hours for each customer relevant function for each day   # noqa: E501

        :param opening_hours: The opening_hours of this Dealer.
        :type opening_hours: list[FunctionOpeningHours]
        """

        self._opening_hours = opening_hours

    @property
    def region(self) -> RegionRepresentation:
        """Gets the region of this Dealer.


        :return: The region of this Dealer.
        :rtype: RegionRepresentation
        """
        return self._region

    @region.setter
    def region(self, region: RegionRepresentation):
        """Sets the region of this Dealer.


        :param region: The region of this Dealer.
        :type region: RegionRepresentation
        """

        self._region = region
