from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RegionRepresentation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region=None, sub_region=None):  # noqa: E501
        """RegionRepresentation - a model defined in OpenAPI

        :param region: The region of this RegionRepresentation.  # noqa: E501
        :type region: str
        :param sub_region: The sub_region of this RegionRepresentation.  # noqa: E501
        :type sub_region: str
        """
        self.openapi_types = {
            'region': str,
            'sub_region': str
        }

        self.attribute_map = {
            'region': 'region',
            'sub_region': 'subRegion'
        }

        self._region = region
        self._sub_region = sub_region

    @classmethod
    def from_dict(cls, dikt) -> 'RegionRepresentation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegionRepresentation of this RegionRepresentation.  # noqa: E501
        :rtype: RegionRepresentation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region(self) -> str:
        """Gets the region of this RegionRepresentation.

        region  # noqa: E501

        :return: The region of this RegionRepresentation.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this RegionRepresentation.

        region  # noqa: E501

        :param region: The region of this RegionRepresentation.
        :type region: str
        """

        self._region = region

    @property
    def sub_region(self) -> str:
        """Gets the sub_region of this RegionRepresentation.

        subregion  # noqa: E501

        :return: The sub_region of this RegionRepresentation.
        :rtype: str
        """
        return self._sub_region

    @sub_region.setter
    def sub_region(self, sub_region: str):
        """Sets the sub_region of this RegionRepresentation.

        subregion  # noqa: E501

        :param sub_region: The sub_region of this RegionRepresentation.
        :type sub_region: str
        """

        self._sub_region = sub_region
