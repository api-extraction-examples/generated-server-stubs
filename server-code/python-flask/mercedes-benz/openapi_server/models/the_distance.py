from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TheDistance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, unit=None, value=None):  # noqa: E501
        """TheDistance - a model defined in OpenAPI

        :param unit: The unit of this TheDistance.  # noqa: E501
        :type unit: str
        :param value: The value of this TheDistance.  # noqa: E501
        :type value: float
        """
        self.openapi_types = {
            'unit': str,
            'value': float
        }

        self.attribute_map = {
            'unit': 'unit',
            'value': 'value'
        }

        self._unit = unit
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'TheDistance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TheDistance of this TheDistance.  # noqa: E501
        :rtype: TheDistance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def unit(self) -> str:
        """Gets the unit of this TheDistance.

        unit of length  # noqa: E501

        :return: The unit of this TheDistance.
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit: str):
        """Sets the unit of this TheDistance.

        unit of length  # noqa: E501

        :param unit: The unit of this TheDistance.
        :type unit: str
        """
        allowed_values = ["M", "KM", "MILE"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"
                .format(unit, allowed_values)
            )

        self._unit = unit

    @property
    def value(self) -> float:
        """Gets the value of this TheDistance.

        numeric amount of distance  # noqa: E501

        :return: The value of this TheDistance.
        :rtype: float
        """
        return self._value

    @value.setter
    def value(self, value: float):
        """Sets the value of this TheDistance.

        numeric amount of distance  # noqa: E501

        :param value: The value of this TheDistance.
        :type value: float
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
