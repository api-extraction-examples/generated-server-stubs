from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.activity_of_a_function import ActivityOfAFunction
from openapi_server.models.brand import Brand
from openapi_server.models.product_group_of_a_function import ProductGroupOfAFunction
from openapi_server import util

from openapi_server.models.activity_of_a_function import ActivityOfAFunction  # noqa: E501
from openapi_server.models.brand import Brand  # noqa: E501
from openapi_server.models.product_group_of_a_function import ProductGroupOfAFunction  # noqa: E501

class Function(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, activity=None, brand=None, product_group=None):  # noqa: E501
        """Function - a model defined in OpenAPI

        :param activity: The activity of this Function.  # noqa: E501
        :type activity: ActivityOfAFunction
        :param brand: The brand of this Function.  # noqa: E501
        :type brand: Brand
        :param product_group: The product_group of this Function.  # noqa: E501
        :type product_group: ProductGroupOfAFunction
        """
        self.openapi_types = {
            'activity': ActivityOfAFunction,
            'brand': Brand,
            'product_group': ProductGroupOfAFunction
        }

        self.attribute_map = {
            'activity': 'activity',
            'brand': 'brand',
            'product_group': 'productGroup'
        }

        self._activity = activity
        self._brand = brand
        self._product_group = product_group

    @classmethod
    def from_dict(cls, dikt) -> 'Function':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Function of this Function.  # noqa: E501
        :rtype: Function
        """
        return util.deserialize_model(dikt, cls)

    @property
    def activity(self) -> ActivityOfAFunction:
        """Gets the activity of this Function.


        :return: The activity of this Function.
        :rtype: ActivityOfAFunction
        """
        return self._activity

    @activity.setter
    def activity(self, activity: ActivityOfAFunction):
        """Sets the activity of this Function.


        :param activity: The activity of this Function.
        :type activity: ActivityOfAFunction
        """
        if activity is None:
            raise ValueError("Invalid value for `activity`, must not be `None`")  # noqa: E501

        self._activity = activity

    @property
    def brand(self) -> Brand:
        """Gets the brand of this Function.


        :return: The brand of this Function.
        :rtype: Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand: Brand):
        """Sets the brand of this Function.


        :param brand: The brand of this Function.
        :type brand: Brand
        """
        if brand is None:
            raise ValueError("Invalid value for `brand`, must not be `None`")  # noqa: E501

        self._brand = brand

    @property
    def product_group(self) -> ProductGroupOfAFunction:
        """Gets the product_group of this Function.


        :return: The product_group of this Function.
        :rtype: ProductGroupOfAFunction
        """
        return self._product_group

    @product_group.setter
    def product_group(self, product_group: ProductGroupOfAFunction):
        """Sets the product_group of this Function.


        :param product_group: The product_group of this Function.
        :type product_group: ProductGroupOfAFunction
        """
        if product_group is None:
            raise ValueError("Invalid value for `product_group`, must not be `None`")  # noqa: E501

        self._product_group = product_group
