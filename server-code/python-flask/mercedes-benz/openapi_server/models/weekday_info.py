from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.periods import Periods
from openapi_server import util

from openapi_server.models.periods import Periods  # noqa: E501

class WeekdayInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, periods=None, status=None):  # noqa: E501
        """WeekdayInfo - a model defined in OpenAPI

        :param periods: The periods of this WeekdayInfo.  # noqa: E501
        :type periods: List[Periods]
        :param status: The status of this WeekdayInfo.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'periods': List[Periods],
            'status': str
        }

        self.attribute_map = {
            'periods': 'periods',
            'status': 'status'
        }

        self._periods = periods
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'WeekdayInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WeekdayInfo of this WeekdayInfo.  # noqa: E501
        :rtype: WeekdayInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def periods(self) -> List[Periods]:
        """Gets the periods of this WeekdayInfo.

        time periods  # noqa: E501

        :return: The periods of this WeekdayInfo.
        :rtype: List[Periods]
        """
        return self._periods

    @periods.setter
    def periods(self, periods: List[Periods]):
        """Sets the periods of this WeekdayInfo.

        time periods  # noqa: E501

        :param periods: The periods of this WeekdayInfo.
        :type periods: List[Periods]
        """

        self._periods = periods

    @property
    def status(self) -> str:
        """Gets the status of this WeekdayInfo.

        status (OPEN or CLOSED)  # noqa: E501

        :return: The status of this WeekdayInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this WeekdayInfo.

        status (OPEN or CLOSED)  # noqa: E501

        :param status: The status of this WeekdayInfo.
        :type status: str
        """
        allowed_values = ["OPEN", "CLOSED"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
