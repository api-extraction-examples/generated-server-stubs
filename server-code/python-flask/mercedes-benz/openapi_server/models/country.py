from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Country(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_id=None, iso_code=None, name=None):  # noqa: E501
        """Country - a model defined in OpenAPI

        :param country_id: The country_id of this Country.  # noqa: E501
        :type country_id: str
        :param iso_code: The iso_code of this Country.  # noqa: E501
        :type iso_code: str
        :param name: The name of this Country.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'country_id': str,
            'iso_code': str,
            'name': str
        }

        self.attribute_map = {
            'country_id': 'countryId',
            'iso_code': 'isoCode',
            'name': 'name'
        }

        self._country_id = country_id
        self._iso_code = iso_code
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Country':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Country of this Country.  # noqa: E501
        :rtype: Country
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_id(self) -> str:
        """Gets the country_id of this Country.

        the country id  # noqa: E501

        :return: The country_id of this Country.
        :rtype: str
        """
        return self._country_id

    @country_id.setter
    def country_id(self, country_id: str):
        """Sets the country_id of this Country.

        the country id  # noqa: E501

        :param country_id: The country_id of this Country.
        :type country_id: str
        """
        if country_id is None:
            raise ValueError("Invalid value for `country_id`, must not be `None`")  # noqa: E501

        self._country_id = country_id

    @property
    def iso_code(self) -> str:
        """Gets the iso_code of this Country.

        the country iso code  # noqa: E501

        :return: The iso_code of this Country.
        :rtype: str
        """
        return self._iso_code

    @iso_code.setter
    def iso_code(self, iso_code: str):
        """Sets the iso_code of this Country.

        the country iso code  # noqa: E501

        :param iso_code: The iso_code of this Country.
        :type iso_code: str
        """
        if iso_code is None:
            raise ValueError("Invalid value for `iso_code`, must not be `None`")  # noqa: E501

        self._iso_code = iso_code

    @property
    def name(self) -> str:
        """Gets the name of this Country.

        the country name  # noqa: E501

        :return: The name of this Country.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Country.

        the country name  # noqa: E501

        :param name: The name of this Country.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
