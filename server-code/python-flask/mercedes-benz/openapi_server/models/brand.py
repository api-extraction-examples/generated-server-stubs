from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Brand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, code=None, name=None):  # noqa: E501
        """Brand - a model defined in OpenAPI

        :param code: The code of this Brand.  # noqa: E501
        :type code: str
        :param name: The name of this Brand.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'code': str,
            'name': str
        }

        self.attribute_map = {
            'code': 'code',
            'name': 'name'
        }

        self._code = code
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Brand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Brand of this Brand.  # noqa: E501
        :rtype: Brand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def code(self) -> str:
        """Gets the code of this Brand.

        brand qualifier  # noqa: E501

        :return: The code of this Brand.
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code: str):
        """Sets the code of this Brand.

        brand qualifier  # noqa: E501

        :param code: The code of this Brand.
        :type code: str
        """
        if code is None:
            raise ValueError("Invalid value for `code`, must not be `None`")  # noqa: E501

        self._code = code

    @property
    def name(self) -> str:
        """Gets the name of this Brand.

        brand name  # noqa: E501

        :return: The name of this Brand.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Brand.

        brand name  # noqa: E501

        :param name: The name of this Brand.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
