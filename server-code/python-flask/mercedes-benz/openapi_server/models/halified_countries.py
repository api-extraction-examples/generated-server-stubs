from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.country import Country
from openapi_server.models.default_links import DefaultLinks
from openapi_server import util

from openapi_server.models.country import Country  # noqa: E501
from openapi_server.models.default_links import DefaultLinks  # noqa: E501

class HalifiedCountries(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, countries=None):  # noqa: E501
        """HalifiedCountries - a model defined in OpenAPI

        :param links: The links of this HalifiedCountries.  # noqa: E501
        :type links: DefaultLinks
        :param countries: The countries of this HalifiedCountries.  # noqa: E501
        :type countries: List[Country]
        """
        self.openapi_types = {
            'links': DefaultLinks,
            'countries': List[Country]
        }

        self.attribute_map = {
            'links': '_links',
            'countries': 'countries'
        }

        self._links = links
        self._countries = countries

    @classmethod
    def from_dict(cls, dikt) -> 'HalifiedCountries':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HalifiedCountries of this HalifiedCountries.  # noqa: E501
        :rtype: HalifiedCountries
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> DefaultLinks:
        """Gets the links of this HalifiedCountries.


        :return: The links of this HalifiedCountries.
        :rtype: DefaultLinks
        """
        return self._links

    @links.setter
    def links(self, links: DefaultLinks):
        """Sets the links of this HalifiedCountries.


        :param links: The links of this HalifiedCountries.
        :type links: DefaultLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def countries(self) -> List[Country]:
        """Gets the countries of this HalifiedCountries.

        countries  # noqa: E501

        :return: The countries of this HalifiedCountries.
        :rtype: List[Country]
        """
        return self._countries

    @countries.setter
    def countries(self, countries: List[Country]):
        """Sets the countries of this HalifiedCountries.

        countries  # noqa: E501

        :param countries: The countries of this HalifiedCountries.
        :type countries: List[Country]
        """

        self._countries = countries
