from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
import re
from openapi_server import util

import re  # noqa: E501

class Vault(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attribute_version=None, content_version=None, created_at=None, description=None, id=None, items=None, name=None, type=None, updated_at=None):  # noqa: E501
        """Vault - a model defined in OpenAPI

        :param attribute_version: The attribute_version of this Vault.  # noqa: E501
        :type attribute_version: int
        :param content_version: The content_version of this Vault.  # noqa: E501
        :type content_version: int
        :param created_at: The created_at of this Vault.  # noqa: E501
        :type created_at: datetime
        :param description: The description of this Vault.  # noqa: E501
        :type description: str
        :param id: The id of this Vault.  # noqa: E501
        :type id: str
        :param items: The items of this Vault.  # noqa: E501
        :type items: int
        :param name: The name of this Vault.  # noqa: E501
        :type name: str
        :param type: The type of this Vault.  # noqa: E501
        :type type: str
        :param updated_at: The updated_at of this Vault.  # noqa: E501
        :type updated_at: datetime
        """
        self.openapi_types = {
            'attribute_version': int,
            'content_version': int,
            'created_at': datetime,
            'description': str,
            'id': str,
            'items': int,
            'name': str,
            'type': str,
            'updated_at': datetime
        }

        self.attribute_map = {
            'attribute_version': 'attributeVersion',
            'content_version': 'contentVersion',
            'created_at': 'createdAt',
            'description': 'description',
            'id': 'id',
            'items': 'items',
            'name': 'name',
            'type': 'type',
            'updated_at': 'updatedAt'
        }

        self._attribute_version = attribute_version
        self._content_version = content_version
        self._created_at = created_at
        self._description = description
        self._id = id
        self._items = items
        self._name = name
        self._type = type
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'Vault':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Vault of this Vault.  # noqa: E501
        :rtype: Vault
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attribute_version(self) -> int:
        """Gets the attribute_version of this Vault.

        The vault version  # noqa: E501

        :return: The attribute_version of this Vault.
        :rtype: int
        """
        return self._attribute_version

    @attribute_version.setter
    def attribute_version(self, attribute_version: int):
        """Sets the attribute_version of this Vault.

        The vault version  # noqa: E501

        :param attribute_version: The attribute_version of this Vault.
        :type attribute_version: int
        """

        self._attribute_version = attribute_version

    @property
    def content_version(self) -> int:
        """Gets the content_version of this Vault.

        The version of the vault contents  # noqa: E501

        :return: The content_version of this Vault.
        :rtype: int
        """
        return self._content_version

    @content_version.setter
    def content_version(self, content_version: int):
        """Sets the content_version of this Vault.

        The version of the vault contents  # noqa: E501

        :param content_version: The content_version of this Vault.
        :type content_version: int
        """

        self._content_version = content_version

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this Vault.


        :return: The created_at of this Vault.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this Vault.


        :param created_at: The created_at of this Vault.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def description(self) -> str:
        """Gets the description of this Vault.


        :return: The description of this Vault.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Vault.


        :param description: The description of this Vault.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this Vault.


        :return: The id of this Vault.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Vault.


        :param id: The id of this Vault.
        :type id: str
        """
        if id is not None and not re.search(r'^[\da-z]{26}$', id):  # noqa: E501
            raise ValueError("Invalid value for `id`, must be a follow pattern or equal to `/^[\da-z]{26}$/`")  # noqa: E501

        self._id = id

    @property
    def items(self) -> int:
        """Gets the items of this Vault.

        Number of active items in the vault  # noqa: E501

        :return: The items of this Vault.
        :rtype: int
        """
        return self._items

    @items.setter
    def items(self, items: int):
        """Sets the items of this Vault.

        Number of active items in the vault  # noqa: E501

        :param items: The items of this Vault.
        :type items: int
        """

        self._items = items

    @property
    def name(self) -> str:
        """Gets the name of this Vault.


        :return: The name of this Vault.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Vault.


        :param name: The name of this Vault.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this Vault.


        :return: The type of this Vault.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Vault.


        :param type: The type of this Vault.
        :type type: str
        """
        allowed_values = ["USER_CREATED", "PERSONAL", "EVERYONE", "TRANSFER"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this Vault.


        :return: The updated_at of this Vault.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this Vault.


        :param updated_at: The updated_at of this Vault.
        :type updated_at: datetime
        """

        self._updated_at = updated_at
