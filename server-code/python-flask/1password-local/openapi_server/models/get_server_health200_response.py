from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.service_dependency import ServiceDependency
from openapi_server import util

from openapi_server.models.service_dependency import ServiceDependency  # noqa: E501

class GetServerHealth200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dependencies=None, name=None, version=None):  # noqa: E501
        """GetServerHealth200Response - a model defined in OpenAPI

        :param dependencies: The dependencies of this GetServerHealth200Response.  # noqa: E501
        :type dependencies: List[ServiceDependency]
        :param name: The name of this GetServerHealth200Response.  # noqa: E501
        :type name: str
        :param version: The version of this GetServerHealth200Response.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'dependencies': List[ServiceDependency],
            'name': str,
            'version': str
        }

        self.attribute_map = {
            'dependencies': 'dependencies',
            'name': 'name',
            'version': 'version'
        }

        self._dependencies = dependencies
        self._name = name
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'GetServerHealth200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetServerHealth_200_response of this GetServerHealth200Response.  # noqa: E501
        :rtype: GetServerHealth200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dependencies(self) -> List[ServiceDependency]:
        """Gets the dependencies of this GetServerHealth200Response.


        :return: The dependencies of this GetServerHealth200Response.
        :rtype: List[ServiceDependency]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies: List[ServiceDependency]):
        """Sets the dependencies of this GetServerHealth200Response.


        :param dependencies: The dependencies of this GetServerHealth200Response.
        :type dependencies: List[ServiceDependency]
        """

        self._dependencies = dependencies

    @property
    def name(self) -> str:
        """Gets the name of this GetServerHealth200Response.


        :return: The name of this GetServerHealth200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this GetServerHealth200Response.


        :param name: The name of this GetServerHealth200Response.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def version(self) -> str:
        """Gets the version of this GetServerHealth200Response.

        The Connect server's version  # noqa: E501

        :return: The version of this GetServerHealth200Response.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this GetServerHealth200Response.

        The Connect server's version  # noqa: E501

        :param version: The version of this GetServerHealth200Response.
        :type version: str
        """
        if version is None:
            raise ValueError("Invalid value for `version`, must not be `None`")  # noqa: E501

        self._version = version
