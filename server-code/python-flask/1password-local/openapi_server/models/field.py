from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.field_section import FieldSection
from openapi_server.models.generator_recipe import GeneratorRecipe
from openapi_server import util

from openapi_server.models.field_section import FieldSection  # noqa: E501
from openapi_server.models.generator_recipe import GeneratorRecipe  # noqa: E501

class Field(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entropy=None, generate=False, id=None, label=None, purpose=None, recipe=None, section=None, type='STRING', value=None):  # noqa: E501
        """Field - a model defined in OpenAPI

        :param entropy: The entropy of this Field.  # noqa: E501
        :type entropy: float
        :param generate: The generate of this Field.  # noqa: E501
        :type generate: bool
        :param id: The id of this Field.  # noqa: E501
        :type id: str
        :param label: The label of this Field.  # noqa: E501
        :type label: str
        :param purpose: The purpose of this Field.  # noqa: E501
        :type purpose: str
        :param recipe: The recipe of this Field.  # noqa: E501
        :type recipe: GeneratorRecipe
        :param section: The section of this Field.  # noqa: E501
        :type section: FieldSection
        :param type: The type of this Field.  # noqa: E501
        :type type: str
        :param value: The value of this Field.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'entropy': float,
            'generate': bool,
            'id': str,
            'label': str,
            'purpose': str,
            'recipe': GeneratorRecipe,
            'section': FieldSection,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'entropy': 'entropy',
            'generate': 'generate',
            'id': 'id',
            'label': 'label',
            'purpose': 'purpose',
            'recipe': 'recipe',
            'section': 'section',
            'type': 'type',
            'value': 'value'
        }

        self._entropy = entropy
        self._generate = generate
        self._id = id
        self._label = label
        self._purpose = purpose
        self._recipe = recipe
        self._section = section
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Field':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Field of this Field.  # noqa: E501
        :rtype: Field
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entropy(self) -> float:
        """Gets the entropy of this Field.

        For fields with a purpose of `PASSWORD` this is the entropy of the value  # noqa: E501

        :return: The entropy of this Field.
        :rtype: float
        """
        return self._entropy

    @entropy.setter
    def entropy(self, entropy: float):
        """Sets the entropy of this Field.

        For fields with a purpose of `PASSWORD` this is the entropy of the value  # noqa: E501

        :param entropy: The entropy of this Field.
        :type entropy: float
        """

        self._entropy = entropy

    @property
    def generate(self) -> bool:
        """Gets the generate of this Field.

        If value is not present then a new value should be generated for this field  # noqa: E501

        :return: The generate of this Field.
        :rtype: bool
        """
        return self._generate

    @generate.setter
    def generate(self, generate: bool):
        """Sets the generate of this Field.

        If value is not present then a new value should be generated for this field  # noqa: E501

        :param generate: The generate of this Field.
        :type generate: bool
        """

        self._generate = generate

    @property
    def id(self) -> str:
        """Gets the id of this Field.


        :return: The id of this Field.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Field.


        :param id: The id of this Field.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def label(self) -> str:
        """Gets the label of this Field.


        :return: The label of this Field.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this Field.


        :param label: The label of this Field.
        :type label: str
        """

        self._label = label

    @property
    def purpose(self) -> str:
        """Gets the purpose of this Field.

        Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.  # noqa: E501

        :return: The purpose of this Field.
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose: str):
        """Sets the purpose of this Field.

        Some item types, Login and Password, have fields used for autofill. This property indicates that purpose and is required for some item types.  # noqa: E501

        :param purpose: The purpose of this Field.
        :type purpose: str
        """
        allowed_values = ["", "USERNAME", "PASSWORD", "NOTES"]  # noqa: E501
        if purpose not in allowed_values:
            raise ValueError(
                "Invalid value for `purpose` ({0}), must be one of {1}"
                .format(purpose, allowed_values)
            )

        self._purpose = purpose

    @property
    def recipe(self) -> GeneratorRecipe:
        """Gets the recipe of this Field.


        :return: The recipe of this Field.
        :rtype: GeneratorRecipe
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe: GeneratorRecipe):
        """Sets the recipe of this Field.


        :param recipe: The recipe of this Field.
        :type recipe: GeneratorRecipe
        """

        self._recipe = recipe

    @property
    def section(self) -> FieldSection:
        """Gets the section of this Field.


        :return: The section of this Field.
        :rtype: FieldSection
        """
        return self._section

    @section.setter
    def section(self, section: FieldSection):
        """Sets the section of this Field.


        :param section: The section of this Field.
        :type section: FieldSection
        """

        self._section = section

    @property
    def type(self) -> str:
        """Gets the type of this Field.


        :return: The type of this Field.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Field.


        :param type: The type of this Field.
        :type type: str
        """
        allowed_values = ["STRING", "EMAIL", "CONCEALED", "URL", "TOTP", "DATE", "MONTH_YEAR", "MENU"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def value(self) -> str:
        """Gets the value of this Field.


        :return: The value of this Field.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this Field.


        :param value: The value of this Field.
        :type value: str
        """

        self._value = value
