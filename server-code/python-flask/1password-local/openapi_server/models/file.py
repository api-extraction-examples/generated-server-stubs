from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.file_section import FileSection
from openapi_server import util

from openapi_server.models.file_section import FileSection  # noqa: E501

class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content=None, content_path=None, id=None, name=None, section=None, size=None):  # noqa: E501
        """File - a model defined in OpenAPI

        :param content: The content of this File.  # noqa: E501
        :type content: str
        :param content_path: The content_path of this File.  # noqa: E501
        :type content_path: str
        :param id: The id of this File.  # noqa: E501
        :type id: str
        :param name: The name of this File.  # noqa: E501
        :type name: str
        :param section: The section of this File.  # noqa: E501
        :type section: FileSection
        :param size: The size of this File.  # noqa: E501
        :type size: int
        """
        self.openapi_types = {
            'content': str,
            'content_path': str,
            'id': str,
            'name': str,
            'section': FileSection,
            'size': int
        }

        self.attribute_map = {
            'content': 'content',
            'content_path': 'content_path',
            'id': 'id',
            'name': 'name',
            'section': 'section',
            'size': 'size'
        }

        self._content = content
        self._content_path = content_path
        self._id = id
        self._name = name
        self._section = section
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The File of this File.  # noqa: E501
        :rtype: File
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content(self) -> str:
        """Gets the content of this File.

        Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.  # noqa: E501

        :return: The content of this File.
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content: str):
        """Sets the content of this File.

        Base64-encoded contents of the file. Only set if size <= OP_MAX_INLINE_FILE_SIZE_KB kb and `inline_files` is set to `true`.  # noqa: E501

        :param content: The content of this File.
        :type content: str
        """

        self._content = content

    @property
    def content_path(self) -> str:
        """Gets the content_path of this File.

        Path of the Connect API that can be used to download the contents of this file.  # noqa: E501

        :return: The content_path of this File.
        :rtype: str
        """
        return self._content_path

    @content_path.setter
    def content_path(self, content_path: str):
        """Sets the content_path of this File.

        Path of the Connect API that can be used to download the contents of this file.  # noqa: E501

        :param content_path: The content_path of this File.
        :type content_path: str
        """

        self._content_path = content_path

    @property
    def id(self) -> str:
        """Gets the id of this File.

        ID of the file  # noqa: E501

        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this File.

        ID of the file  # noqa: E501

        :param id: The id of this File.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this File.

        Name of the file  # noqa: E501

        :return: The name of this File.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this File.

        Name of the file  # noqa: E501

        :param name: The name of this File.
        :type name: str
        """

        self._name = name

    @property
    def section(self) -> FileSection:
        """Gets the section of this File.


        :return: The section of this File.
        :rtype: FileSection
        """
        return self._section

    @section.setter
    def section(self, section: FileSection):
        """Sets the section of this File.


        :param section: The section of this File.
        :type section: FileSection
        """

        self._section = section

    @property
    def size(self) -> int:
        """Gets the size of this File.

        Size in bytes of the file  # noqa: E501

        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this File.

        Size in bytes of the file  # noqa: E501

        :param size: The size of this File.
        :type size: int
        """

        self._size = size
