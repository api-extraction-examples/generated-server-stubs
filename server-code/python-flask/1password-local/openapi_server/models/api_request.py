from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.api_request_actor import APIRequestActor
from openapi_server.models.api_request_resource import APIRequestResource
from openapi_server import util

from openapi_server.models.api_request_actor import APIRequestActor  # noqa: E501
from openapi_server.models.api_request_resource import APIRequestResource  # noqa: E501

class APIRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, actor=None, request_id=None, resource=None, result=None, timestamp=None):  # noqa: E501
        """APIRequest - a model defined in OpenAPI

        :param action: The action of this APIRequest.  # noqa: E501
        :type action: str
        :param actor: The actor of this APIRequest.  # noqa: E501
        :type actor: APIRequestActor
        :param request_id: The request_id of this APIRequest.  # noqa: E501
        :type request_id: str
        :param resource: The resource of this APIRequest.  # noqa: E501
        :type resource: APIRequestResource
        :param result: The result of this APIRequest.  # noqa: E501
        :type result: str
        :param timestamp: The timestamp of this APIRequest.  # noqa: E501
        :type timestamp: datetime
        """
        self.openapi_types = {
            'action': str,
            'actor': APIRequestActor,
            'request_id': str,
            'resource': APIRequestResource,
            'result': str,
            'timestamp': datetime
        }

        self.attribute_map = {
            'action': 'action',
            'actor': 'actor',
            'request_id': 'requestId',
            'resource': 'resource',
            'result': 'result',
            'timestamp': 'timestamp'
        }

        self._action = action
        self._actor = actor
        self._request_id = request_id
        self._resource = resource
        self._result = result
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'APIRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The APIRequest of this APIRequest.  # noqa: E501
        :rtype: APIRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self) -> str:
        """Gets the action of this APIRequest.


        :return: The action of this APIRequest.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this APIRequest.


        :param action: The action of this APIRequest.
        :type action: str
        """
        allowed_values = ["READ", "CREATE", "UPDATE", "DELETE"]  # noqa: E501
        if action not in allowed_values:
            raise ValueError(
                "Invalid value for `action` ({0}), must be one of {1}"
                .format(action, allowed_values)
            )

        self._action = action

    @property
    def actor(self) -> APIRequestActor:
        """Gets the actor of this APIRequest.


        :return: The actor of this APIRequest.
        :rtype: APIRequestActor
        """
        return self._actor

    @actor.setter
    def actor(self, actor: APIRequestActor):
        """Sets the actor of this APIRequest.


        :param actor: The actor of this APIRequest.
        :type actor: APIRequestActor
        """

        self._actor = actor

    @property
    def request_id(self) -> str:
        """Gets the request_id of this APIRequest.

        The unique id used to identify a single request.  # noqa: E501

        :return: The request_id of this APIRequest.
        :rtype: str
        """
        return self._request_id

    @request_id.setter
    def request_id(self, request_id: str):
        """Sets the request_id of this APIRequest.

        The unique id used to identify a single request.  # noqa: E501

        :param request_id: The request_id of this APIRequest.
        :type request_id: str
        """

        self._request_id = request_id

    @property
    def resource(self) -> APIRequestResource:
        """Gets the resource of this APIRequest.


        :return: The resource of this APIRequest.
        :rtype: APIRequestResource
        """
        return self._resource

    @resource.setter
    def resource(self, resource: APIRequestResource):
        """Sets the resource of this APIRequest.


        :param resource: The resource of this APIRequest.
        :type resource: APIRequestResource
        """

        self._resource = resource

    @property
    def result(self) -> str:
        """Gets the result of this APIRequest.


        :return: The result of this APIRequest.
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result: str):
        """Sets the result of this APIRequest.


        :param result: The result of this APIRequest.
        :type result: str
        """
        allowed_values = ["SUCCESS", "DENY"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def timestamp(self) -> datetime:
        """Gets the timestamp of this APIRequest.

        The time at which the request was processed by the server.  # noqa: E501

        :return: The timestamp of this APIRequest.
        :rtype: datetime
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: datetime):
        """Sets the timestamp of this APIRequest.

        The time at which the request was processed by the server.  # noqa: E501

        :param timestamp: The timestamp of this APIRequest.
        :type timestamp: datetime
        """

        self._timestamp = timestamp
