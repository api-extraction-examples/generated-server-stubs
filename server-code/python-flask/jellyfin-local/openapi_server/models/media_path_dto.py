from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.media_path_info import MediaPathInfo
from openapi_server import util

from openapi_server.models.media_path_info import MediaPathInfo  # noqa: E501

class MediaPathDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, path=None, path_info=None):  # noqa: E501
        """MediaPathDto - a model defined in OpenAPI

        :param name: The name of this MediaPathDto.  # noqa: E501
        :type name: str
        :param path: The path of this MediaPathDto.  # noqa: E501
        :type path: str
        :param path_info: The path_info of this MediaPathDto.  # noqa: E501
        :type path_info: MediaPathInfo
        """
        self.openapi_types = {
            'name': str,
            'path': str,
            'path_info': MediaPathInfo
        }

        self.attribute_map = {
            'name': 'Name',
            'path': 'Path',
            'path_info': 'PathInfo'
        }

        self._name = name
        self._path = path
        self._path_info = path_info

    @classmethod
    def from_dict(cls, dikt) -> 'MediaPathDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaPathDto of this MediaPathDto.  # noqa: E501
        :rtype: MediaPathDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this MediaPathDto.

        Gets or sets the name of the library.  # noqa: E501

        :return: The name of this MediaPathDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MediaPathDto.

        Gets or sets the name of the library.  # noqa: E501

        :param name: The name of this MediaPathDto.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self) -> str:
        """Gets the path of this MediaPathDto.

        Gets or sets the path to add.  # noqa: E501

        :return: The path of this MediaPathDto.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this MediaPathDto.

        Gets or sets the path to add.  # noqa: E501

        :param path: The path of this MediaPathDto.
        :type path: str
        """

        self._path = path

    @property
    def path_info(self) -> MediaPathInfo:
        """Gets the path_info of this MediaPathDto.


        :return: The path_info of this MediaPathDto.
        :rtype: MediaPathInfo
        """
        return self._path_info

    @path_info.setter
    def path_info(self, path_info: MediaPathInfo):
        """Sets the path_info of this MediaPathDto.


        :param path_info: The path_info of this MediaPathDto.
        :type path_info: MediaPathInfo
        """

        self._path_info = path_info
