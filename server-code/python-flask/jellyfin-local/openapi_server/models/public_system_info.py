from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PublicSystemInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, local_address=None, operating_system=None, product_name=None, server_name=None, startup_wizard_completed=None, version=None):  # noqa: E501
        """PublicSystemInfo - a model defined in OpenAPI

        :param id: The id of this PublicSystemInfo.  # noqa: E501
        :type id: str
        :param local_address: The local_address of this PublicSystemInfo.  # noqa: E501
        :type local_address: str
        :param operating_system: The operating_system of this PublicSystemInfo.  # noqa: E501
        :type operating_system: str
        :param product_name: The product_name of this PublicSystemInfo.  # noqa: E501
        :type product_name: str
        :param server_name: The server_name of this PublicSystemInfo.  # noqa: E501
        :type server_name: str
        :param startup_wizard_completed: The startup_wizard_completed of this PublicSystemInfo.  # noqa: E501
        :type startup_wizard_completed: bool
        :param version: The version of this PublicSystemInfo.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'id': str,
            'local_address': str,
            'operating_system': str,
            'product_name': str,
            'server_name': str,
            'startup_wizard_completed': bool,
            'version': str
        }

        self.attribute_map = {
            'id': 'Id',
            'local_address': 'LocalAddress',
            'operating_system': 'OperatingSystem',
            'product_name': 'ProductName',
            'server_name': 'ServerName',
            'startup_wizard_completed': 'StartupWizardCompleted',
            'version': 'Version'
        }

        self._id = id
        self._local_address = local_address
        self._operating_system = operating_system
        self._product_name = product_name
        self._server_name = server_name
        self._startup_wizard_completed = startup_wizard_completed
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'PublicSystemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PublicSystemInfo of this PublicSystemInfo.  # noqa: E501
        :rtype: PublicSystemInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this PublicSystemInfo.

        Gets or sets the id.  # noqa: E501

        :return: The id of this PublicSystemInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PublicSystemInfo.

        Gets or sets the id.  # noqa: E501

        :param id: The id of this PublicSystemInfo.
        :type id: str
        """

        self._id = id

    @property
    def local_address(self) -> str:
        """Gets the local_address of this PublicSystemInfo.

        Gets or sets the local address.  # noqa: E501

        :return: The local_address of this PublicSystemInfo.
        :rtype: str
        """
        return self._local_address

    @local_address.setter
    def local_address(self, local_address: str):
        """Sets the local_address of this PublicSystemInfo.

        Gets or sets the local address.  # noqa: E501

        :param local_address: The local_address of this PublicSystemInfo.
        :type local_address: str
        """

        self._local_address = local_address

    @property
    def operating_system(self) -> str:
        """Gets the operating_system of this PublicSystemInfo.

        Gets or sets the operating system.  # noqa: E501

        :return: The operating_system of this PublicSystemInfo.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system: str):
        """Sets the operating_system of this PublicSystemInfo.

        Gets or sets the operating system.  # noqa: E501

        :param operating_system: The operating_system of this PublicSystemInfo.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def product_name(self) -> str:
        """Gets the product_name of this PublicSystemInfo.

        Gets or sets the product name. This is the AssemblyProduct name.  # noqa: E501

        :return: The product_name of this PublicSystemInfo.
        :rtype: str
        """
        return self._product_name

    @product_name.setter
    def product_name(self, product_name: str):
        """Sets the product_name of this PublicSystemInfo.

        Gets or sets the product name. This is the AssemblyProduct name.  # noqa: E501

        :param product_name: The product_name of this PublicSystemInfo.
        :type product_name: str
        """

        self._product_name = product_name

    @property
    def server_name(self) -> str:
        """Gets the server_name of this PublicSystemInfo.

        Gets or sets the name of the server.  # noqa: E501

        :return: The server_name of this PublicSystemInfo.
        :rtype: str
        """
        return self._server_name

    @server_name.setter
    def server_name(self, server_name: str):
        """Sets the server_name of this PublicSystemInfo.

        Gets or sets the name of the server.  # noqa: E501

        :param server_name: The server_name of this PublicSystemInfo.
        :type server_name: str
        """

        self._server_name = server_name

    @property
    def startup_wizard_completed(self) -> bool:
        """Gets the startup_wizard_completed of this PublicSystemInfo.

        Gets or sets a value indicating whether the startup wizard is completed.  # noqa: E501

        :return: The startup_wizard_completed of this PublicSystemInfo.
        :rtype: bool
        """
        return self._startup_wizard_completed

    @startup_wizard_completed.setter
    def startup_wizard_completed(self, startup_wizard_completed: bool):
        """Sets the startup_wizard_completed of this PublicSystemInfo.

        Gets or sets a value indicating whether the startup wizard is completed.  # noqa: E501

        :param startup_wizard_completed: The startup_wizard_completed of this PublicSystemInfo.
        :type startup_wizard_completed: bool
        """

        self._startup_wizard_completed = startup_wizard_completed

    @property
    def version(self) -> str:
        """Gets the version of this PublicSystemInfo.

        Gets or sets the server version.  # noqa: E501

        :return: The version of this PublicSystemInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this PublicSystemInfo.

        Gets or sets the server version.  # noqa: E501

        :param version: The version of this PublicSystemInfo.
        :type version: str
        """

        self._version = version
