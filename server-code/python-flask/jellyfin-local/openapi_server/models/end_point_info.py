from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EndPointInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_in_network=None, is_local=None):  # noqa: E501
        """EndPointInfo - a model defined in OpenAPI

        :param is_in_network: The is_in_network of this EndPointInfo.  # noqa: E501
        :type is_in_network: bool
        :param is_local: The is_local of this EndPointInfo.  # noqa: E501
        :type is_local: bool
        """
        self.openapi_types = {
            'is_in_network': bool,
            'is_local': bool
        }

        self.attribute_map = {
            'is_in_network': 'IsInNetwork',
            'is_local': 'IsLocal'
        }

        self._is_in_network = is_in_network
        self._is_local = is_local

    @classmethod
    def from_dict(cls, dikt) -> 'EndPointInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EndPointInfo of this EndPointInfo.  # noqa: E501
        :rtype: EndPointInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_in_network(self) -> bool:
        """Gets the is_in_network of this EndPointInfo.


        :return: The is_in_network of this EndPointInfo.
        :rtype: bool
        """
        return self._is_in_network

    @is_in_network.setter
    def is_in_network(self, is_in_network: bool):
        """Sets the is_in_network of this EndPointInfo.


        :param is_in_network: The is_in_network of this EndPointInfo.
        :type is_in_network: bool
        """

        self._is_in_network = is_in_network

    @property
    def is_local(self) -> bool:
        """Gets the is_local of this EndPointInfo.


        :return: The is_local of this EndPointInfo.
        :rtype: bool
        """
        return self._is_local

    @is_local.setter
    def is_local(self, is_local: bool):
        """Sets the is_local of this EndPointInfo.


        :param is_local: The is_local of this EndPointInfo.
        :type is_local: bool
        """

        self._is_local = is_local
