from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class QueryFiltersLegacy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, genres=None, official_ratings=None, tags=None, years=None):  # noqa: E501
        """QueryFiltersLegacy - a model defined in OpenAPI

        :param genres: The genres of this QueryFiltersLegacy.  # noqa: E501
        :type genres: List[str]
        :param official_ratings: The official_ratings of this QueryFiltersLegacy.  # noqa: E501
        :type official_ratings: List[str]
        :param tags: The tags of this QueryFiltersLegacy.  # noqa: E501
        :type tags: List[str]
        :param years: The years of this QueryFiltersLegacy.  # noqa: E501
        :type years: List[int]
        """
        self.openapi_types = {
            'genres': List[str],
            'official_ratings': List[str],
            'tags': List[str],
            'years': List[int]
        }

        self.attribute_map = {
            'genres': 'Genres',
            'official_ratings': 'OfficialRatings',
            'tags': 'Tags',
            'years': 'Years'
        }

        self._genres = genres
        self._official_ratings = official_ratings
        self._tags = tags
        self._years = years

    @classmethod
    def from_dict(cls, dikt) -> 'QueryFiltersLegacy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryFiltersLegacy of this QueryFiltersLegacy.  # noqa: E501
        :rtype: QueryFiltersLegacy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def genres(self) -> List[str]:
        """Gets the genres of this QueryFiltersLegacy.


        :return: The genres of this QueryFiltersLegacy.
        :rtype: List[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres: List[str]):
        """Sets the genres of this QueryFiltersLegacy.


        :param genres: The genres of this QueryFiltersLegacy.
        :type genres: List[str]
        """

        self._genres = genres

    @property
    def official_ratings(self) -> List[str]:
        """Gets the official_ratings of this QueryFiltersLegacy.


        :return: The official_ratings of this QueryFiltersLegacy.
        :rtype: List[str]
        """
        return self._official_ratings

    @official_ratings.setter
    def official_ratings(self, official_ratings: List[str]):
        """Sets the official_ratings of this QueryFiltersLegacy.


        :param official_ratings: The official_ratings of this QueryFiltersLegacy.
        :type official_ratings: List[str]
        """

        self._official_ratings = official_ratings

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this QueryFiltersLegacy.


        :return: The tags of this QueryFiltersLegacy.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this QueryFiltersLegacy.


        :param tags: The tags of this QueryFiltersLegacy.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def years(self) -> List[int]:
        """Gets the years of this QueryFiltersLegacy.


        :return: The years of this QueryFiltersLegacy.
        :rtype: List[int]
        """
        return self._years

    @years.setter
    def years(self, years: List[int]):
        """Sets the years of this QueryFiltersLegacy.


        :param years: The years of this QueryFiltersLegacy.
        :type years: List[int]
        """

        self._years = years
