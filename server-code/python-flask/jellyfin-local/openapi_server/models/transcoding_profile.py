from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dlna_profile_type import DlnaProfileType
from openapi_server.models.encoding_context import EncodingContext
from openapi_server.models.transcode_seek_info import TranscodeSeekInfo
from openapi_server import util

from openapi_server.models.dlna_profile_type import DlnaProfileType  # noqa: E501
from openapi_server.models.encoding_context import EncodingContext  # noqa: E501
from openapi_server.models.transcode_seek_info import TranscodeSeekInfo  # noqa: E501

class TranscodingProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_codec=None, break_on_non_key_frames=None, container=None, context=None, copy_timestamps=None, enable_mpegts_m2_ts_mode=None, enable_subtitles_in_manifest=None, estimate_content_length=None, max_audio_channels=None, min_segments=None, protocol=None, segment_length=None, transcode_seek_info=None, type=None, video_codec=None):  # noqa: E501
        """TranscodingProfile - a model defined in OpenAPI

        :param audio_codec: The audio_codec of this TranscodingProfile.  # noqa: E501
        :type audio_codec: str
        :param break_on_non_key_frames: The break_on_non_key_frames of this TranscodingProfile.  # noqa: E501
        :type break_on_non_key_frames: bool
        :param container: The container of this TranscodingProfile.  # noqa: E501
        :type container: str
        :param context: The context of this TranscodingProfile.  # noqa: E501
        :type context: EncodingContext
        :param copy_timestamps: The copy_timestamps of this TranscodingProfile.  # noqa: E501
        :type copy_timestamps: bool
        :param enable_mpegts_m2_ts_mode: The enable_mpegts_m2_ts_mode of this TranscodingProfile.  # noqa: E501
        :type enable_mpegts_m2_ts_mode: bool
        :param enable_subtitles_in_manifest: The enable_subtitles_in_manifest of this TranscodingProfile.  # noqa: E501
        :type enable_subtitles_in_manifest: bool
        :param estimate_content_length: The estimate_content_length of this TranscodingProfile.  # noqa: E501
        :type estimate_content_length: bool
        :param max_audio_channels: The max_audio_channels of this TranscodingProfile.  # noqa: E501
        :type max_audio_channels: str
        :param min_segments: The min_segments of this TranscodingProfile.  # noqa: E501
        :type min_segments: int
        :param protocol: The protocol of this TranscodingProfile.  # noqa: E501
        :type protocol: str
        :param segment_length: The segment_length of this TranscodingProfile.  # noqa: E501
        :type segment_length: int
        :param transcode_seek_info: The transcode_seek_info of this TranscodingProfile.  # noqa: E501
        :type transcode_seek_info: TranscodeSeekInfo
        :param type: The type of this TranscodingProfile.  # noqa: E501
        :type type: DlnaProfileType
        :param video_codec: The video_codec of this TranscodingProfile.  # noqa: E501
        :type video_codec: str
        """
        self.openapi_types = {
            'audio_codec': str,
            'break_on_non_key_frames': bool,
            'container': str,
            'context': EncodingContext,
            'copy_timestamps': bool,
            'enable_mpegts_m2_ts_mode': bool,
            'enable_subtitles_in_manifest': bool,
            'estimate_content_length': bool,
            'max_audio_channels': str,
            'min_segments': int,
            'protocol': str,
            'segment_length': int,
            'transcode_seek_info': TranscodeSeekInfo,
            'type': DlnaProfileType,
            'video_codec': str
        }

        self.attribute_map = {
            'audio_codec': 'AudioCodec',
            'break_on_non_key_frames': 'BreakOnNonKeyFrames',
            'container': 'Container',
            'context': 'Context',
            'copy_timestamps': 'CopyTimestamps',
            'enable_mpegts_m2_ts_mode': 'EnableMpegtsM2TsMode',
            'enable_subtitles_in_manifest': 'EnableSubtitlesInManifest',
            'estimate_content_length': 'EstimateContentLength',
            'max_audio_channels': 'MaxAudioChannels',
            'min_segments': 'MinSegments',
            'protocol': 'Protocol',
            'segment_length': 'SegmentLength',
            'transcode_seek_info': 'TranscodeSeekInfo',
            'type': 'Type',
            'video_codec': 'VideoCodec'
        }

        self._audio_codec = audio_codec
        self._break_on_non_key_frames = break_on_non_key_frames
        self._container = container
        self._context = context
        self._copy_timestamps = copy_timestamps
        self._enable_mpegts_m2_ts_mode = enable_mpegts_m2_ts_mode
        self._enable_subtitles_in_manifest = enable_subtitles_in_manifest
        self._estimate_content_length = estimate_content_length
        self._max_audio_channels = max_audio_channels
        self._min_segments = min_segments
        self._protocol = protocol
        self._segment_length = segment_length
        self._transcode_seek_info = transcode_seek_info
        self._type = type
        self._video_codec = video_codec

    @classmethod
    def from_dict(cls, dikt) -> 'TranscodingProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TranscodingProfile of this TranscodingProfile.  # noqa: E501
        :rtype: TranscodingProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_codec(self) -> str:
        """Gets the audio_codec of this TranscodingProfile.


        :return: The audio_codec of this TranscodingProfile.
        :rtype: str
        """
        return self._audio_codec

    @audio_codec.setter
    def audio_codec(self, audio_codec: str):
        """Sets the audio_codec of this TranscodingProfile.


        :param audio_codec: The audio_codec of this TranscodingProfile.
        :type audio_codec: str
        """

        self._audio_codec = audio_codec

    @property
    def break_on_non_key_frames(self) -> bool:
        """Gets the break_on_non_key_frames of this TranscodingProfile.


        :return: The break_on_non_key_frames of this TranscodingProfile.
        :rtype: bool
        """
        return self._break_on_non_key_frames

    @break_on_non_key_frames.setter
    def break_on_non_key_frames(self, break_on_non_key_frames: bool):
        """Sets the break_on_non_key_frames of this TranscodingProfile.


        :param break_on_non_key_frames: The break_on_non_key_frames of this TranscodingProfile.
        :type break_on_non_key_frames: bool
        """

        self._break_on_non_key_frames = break_on_non_key_frames

    @property
    def container(self) -> str:
        """Gets the container of this TranscodingProfile.


        :return: The container of this TranscodingProfile.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this TranscodingProfile.


        :param container: The container of this TranscodingProfile.
        :type container: str
        """

        self._container = container

    @property
    def context(self) -> EncodingContext:
        """Gets the context of this TranscodingProfile.


        :return: The context of this TranscodingProfile.
        :rtype: EncodingContext
        """
        return self._context

    @context.setter
    def context(self, context: EncodingContext):
        """Sets the context of this TranscodingProfile.


        :param context: The context of this TranscodingProfile.
        :type context: EncodingContext
        """

        self._context = context

    @property
    def copy_timestamps(self) -> bool:
        """Gets the copy_timestamps of this TranscodingProfile.


        :return: The copy_timestamps of this TranscodingProfile.
        :rtype: bool
        """
        return self._copy_timestamps

    @copy_timestamps.setter
    def copy_timestamps(self, copy_timestamps: bool):
        """Sets the copy_timestamps of this TranscodingProfile.


        :param copy_timestamps: The copy_timestamps of this TranscodingProfile.
        :type copy_timestamps: bool
        """

        self._copy_timestamps = copy_timestamps

    @property
    def enable_mpegts_m2_ts_mode(self) -> bool:
        """Gets the enable_mpegts_m2_ts_mode of this TranscodingProfile.


        :return: The enable_mpegts_m2_ts_mode of this TranscodingProfile.
        :rtype: bool
        """
        return self._enable_mpegts_m2_ts_mode

    @enable_mpegts_m2_ts_mode.setter
    def enable_mpegts_m2_ts_mode(self, enable_mpegts_m2_ts_mode: bool):
        """Sets the enable_mpegts_m2_ts_mode of this TranscodingProfile.


        :param enable_mpegts_m2_ts_mode: The enable_mpegts_m2_ts_mode of this TranscodingProfile.
        :type enable_mpegts_m2_ts_mode: bool
        """

        self._enable_mpegts_m2_ts_mode = enable_mpegts_m2_ts_mode

    @property
    def enable_subtitles_in_manifest(self) -> bool:
        """Gets the enable_subtitles_in_manifest of this TranscodingProfile.


        :return: The enable_subtitles_in_manifest of this TranscodingProfile.
        :rtype: bool
        """
        return self._enable_subtitles_in_manifest

    @enable_subtitles_in_manifest.setter
    def enable_subtitles_in_manifest(self, enable_subtitles_in_manifest: bool):
        """Sets the enable_subtitles_in_manifest of this TranscodingProfile.


        :param enable_subtitles_in_manifest: The enable_subtitles_in_manifest of this TranscodingProfile.
        :type enable_subtitles_in_manifest: bool
        """

        self._enable_subtitles_in_manifest = enable_subtitles_in_manifest

    @property
    def estimate_content_length(self) -> bool:
        """Gets the estimate_content_length of this TranscodingProfile.


        :return: The estimate_content_length of this TranscodingProfile.
        :rtype: bool
        """
        return self._estimate_content_length

    @estimate_content_length.setter
    def estimate_content_length(self, estimate_content_length: bool):
        """Sets the estimate_content_length of this TranscodingProfile.


        :param estimate_content_length: The estimate_content_length of this TranscodingProfile.
        :type estimate_content_length: bool
        """

        self._estimate_content_length = estimate_content_length

    @property
    def max_audio_channels(self) -> str:
        """Gets the max_audio_channels of this TranscodingProfile.


        :return: The max_audio_channels of this TranscodingProfile.
        :rtype: str
        """
        return self._max_audio_channels

    @max_audio_channels.setter
    def max_audio_channels(self, max_audio_channels: str):
        """Sets the max_audio_channels of this TranscodingProfile.


        :param max_audio_channels: The max_audio_channels of this TranscodingProfile.
        :type max_audio_channels: str
        """

        self._max_audio_channels = max_audio_channels

    @property
    def min_segments(self) -> int:
        """Gets the min_segments of this TranscodingProfile.


        :return: The min_segments of this TranscodingProfile.
        :rtype: int
        """
        return self._min_segments

    @min_segments.setter
    def min_segments(self, min_segments: int):
        """Sets the min_segments of this TranscodingProfile.


        :param min_segments: The min_segments of this TranscodingProfile.
        :type min_segments: int
        """

        self._min_segments = min_segments

    @property
    def protocol(self) -> str:
        """Gets the protocol of this TranscodingProfile.


        :return: The protocol of this TranscodingProfile.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this TranscodingProfile.


        :param protocol: The protocol of this TranscodingProfile.
        :type protocol: str
        """

        self._protocol = protocol

    @property
    def segment_length(self) -> int:
        """Gets the segment_length of this TranscodingProfile.


        :return: The segment_length of this TranscodingProfile.
        :rtype: int
        """
        return self._segment_length

    @segment_length.setter
    def segment_length(self, segment_length: int):
        """Sets the segment_length of this TranscodingProfile.


        :param segment_length: The segment_length of this TranscodingProfile.
        :type segment_length: int
        """

        self._segment_length = segment_length

    @property
    def transcode_seek_info(self) -> TranscodeSeekInfo:
        """Gets the transcode_seek_info of this TranscodingProfile.


        :return: The transcode_seek_info of this TranscodingProfile.
        :rtype: TranscodeSeekInfo
        """
        return self._transcode_seek_info

    @transcode_seek_info.setter
    def transcode_seek_info(self, transcode_seek_info: TranscodeSeekInfo):
        """Sets the transcode_seek_info of this TranscodingProfile.


        :param transcode_seek_info: The transcode_seek_info of this TranscodingProfile.
        :type transcode_seek_info: TranscodeSeekInfo
        """

        self._transcode_seek_info = transcode_seek_info

    @property
    def type(self) -> DlnaProfileType:
        """Gets the type of this TranscodingProfile.


        :return: The type of this TranscodingProfile.
        :rtype: DlnaProfileType
        """
        return self._type

    @type.setter
    def type(self, type: DlnaProfileType):
        """Sets the type of this TranscodingProfile.


        :param type: The type of this TranscodingProfile.
        :type type: DlnaProfileType
        """

        self._type = type

    @property
    def video_codec(self) -> str:
        """Gets the video_codec of this TranscodingProfile.


        :return: The video_codec of this TranscodingProfile.
        :rtype: str
        """
        return self._video_codec

    @video_codec.setter
    def video_codec(self, video_codec: str):
        """Sets the video_codec of this TranscodingProfile.


        :param video_codec: The video_codec of this TranscodingProfile.
        :type video_codec: str
        """

        self._video_codec = video_codec
