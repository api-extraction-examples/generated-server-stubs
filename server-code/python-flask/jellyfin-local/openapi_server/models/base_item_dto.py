from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.base_item_dto_image_blur_hashes import BaseItemDtoImageBlurHashes
from openapi_server.models.base_item_person import BaseItemPerson
from openapi_server.models.channel_type import ChannelType
from openapi_server.models.chapter_info import ChapterInfo
from openapi_server.models.day_of_week import DayOfWeek
from openapi_server.models.external_url import ExternalUrl
from openapi_server.models.image_orientation import ImageOrientation
from openapi_server.models.iso_type import IsoType
from openapi_server.models.location_type import LocationType
from openapi_server.models.media_source_info import MediaSourceInfo
from openapi_server.models.media_stream import MediaStream
from openapi_server.models.media_url import MediaUrl
from openapi_server.models.metadata_field import MetadataField
from openapi_server.models.name_guid_pair import NameGuidPair
from openapi_server.models.play_access import PlayAccess
from openapi_server.models.program_audio import ProgramAudio
from openapi_server.models.user_item_data_dto import UserItemDataDto
from openapi_server.models.video3_d_format import Video3DFormat
from openapi_server.models.video_type import VideoType
from openapi_server import util

from openapi_server.models.base_item_dto_image_blur_hashes import BaseItemDtoImageBlurHashes  # noqa: E501
from openapi_server.models.base_item_person import BaseItemPerson  # noqa: E501
from openapi_server.models.channel_type import ChannelType  # noqa: E501
from openapi_server.models.chapter_info import ChapterInfo  # noqa: E501
from openapi_server.models.day_of_week import DayOfWeek  # noqa: E501
from openapi_server.models.external_url import ExternalUrl  # noqa: E501
from openapi_server.models.image_orientation import ImageOrientation  # noqa: E501
from openapi_server.models.iso_type import IsoType  # noqa: E501
from openapi_server.models.location_type import LocationType  # noqa: E501
from openapi_server.models.media_source_info import MediaSourceInfo  # noqa: E501
from openapi_server.models.media_stream import MediaStream  # noqa: E501
from openapi_server.models.media_url import MediaUrl  # noqa: E501
from openapi_server.models.metadata_field import MetadataField  # noqa: E501
from openapi_server.models.name_guid_pair import NameGuidPair  # noqa: E501
from openapi_server.models.play_access import PlayAccess  # noqa: E501
from openapi_server.models.program_audio import ProgramAudio  # noqa: E501
from openapi_server.models.user_item_data_dto import UserItemDataDto  # noqa: E501
from openapi_server.models.video3_d_format import Video3DFormat  # noqa: E501
from openapi_server.models.video_type import VideoType  # noqa: E501

class BaseItemDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, air_days=None, air_time=None, airs_after_season_number=None, airs_before_episode_number=None, airs_before_season_number=None, album=None, album_artist=None, album_artists=None, album_count=None, album_id=None, album_primary_image_tag=None, altitude=None, aperture=None, artist_count=None, artist_items=None, artists=None, aspect_ratio=None, audio=None, backdrop_image_tags=None, camera_make=None, camera_model=None, can_delete=None, can_download=None, channel_id=None, channel_name=None, channel_number=None, channel_primary_image_tag=None, channel_type=None, chapters=None, child_count=None, collection_type=None, community_rating=None, completion_percentage=None, container=None, critic_rating=None, cumulative_run_time_ticks=None, current_program=None, custom_rating=None, date_created=None, date_last_media_added=None, display_order=None, display_preferences_id=None, enable_media_source_display=None, end_date=None, episode_count=None, episode_title=None, etag=None, exposure_time=None, external_urls=None, extra_type=None, focal_length=None, forced_sort_name=None, genre_items=None, genres=None, has_subtitles=None, height=None, id=None, image_blur_hashes=None, image_orientation=None, image_tags=None, index_number=None, index_number_end=None, is_folder=None, is_hd=None, is_kids=None, is_live=None, is_movie=None, is_news=None, is_place_holder=None, is_premiere=None, is_repeat=None, is_series=None, is_sports=None, iso_speed_rating=None, iso_type=None, latitude=None, local_trailer_count=None, location_type=None, lock_data=None, locked_fields=None, longitude=None, media_source_count=None, media_sources=None, media_streams=None, media_type=None, movie_count=None, music_video_count=None, name=None, number=None, official_rating=None, original_title=None, overview=None, parent_art_image_tag=None, parent_art_item_id=None, parent_backdrop_image_tags=None, parent_backdrop_item_id=None, parent_id=None, parent_index_number=None, parent_logo_image_tag=None, parent_logo_item_id=None, parent_primary_image_item_id=None, parent_primary_image_tag=None, parent_thumb_image_tag=None, parent_thumb_item_id=None, part_count=None, path=None, people=None, play_access=None, playlist_item_id=None, preferred_metadata_country_code=None, preferred_metadata_language=None, premiere_date=None, primary_image_aspect_ratio=None, production_locations=None, production_year=None, program_count=None, program_id=None, provider_ids=None, recursive_item_count=None, remote_trailers=None, run_time_ticks=None, screenshot_image_tags=None, season_id=None, season_name=None, series_count=None, series_id=None, series_name=None, series_primary_image_tag=None, series_studio=None, series_thumb_image_tag=None, series_timer_id=None, server_id=None, shutter_speed=None, software=None, song_count=None, sort_name=None, source_type=None, special_feature_count=None, start_date=None, status=None, studios=None, supports_sync=None, taglines=None, tags=None, timer_id=None, trailer_count=None, type=None, user_data=None, video3_d_format=None, video_type=None, width=None):  # noqa: E501
        """BaseItemDto - a model defined in OpenAPI

        :param air_days: The air_days of this BaseItemDto.  # noqa: E501
        :type air_days: List[DayOfWeek]
        :param air_time: The air_time of this BaseItemDto.  # noqa: E501
        :type air_time: str
        :param airs_after_season_number: The airs_after_season_number of this BaseItemDto.  # noqa: E501
        :type airs_after_season_number: int
        :param airs_before_episode_number: The airs_before_episode_number of this BaseItemDto.  # noqa: E501
        :type airs_before_episode_number: int
        :param airs_before_season_number: The airs_before_season_number of this BaseItemDto.  # noqa: E501
        :type airs_before_season_number: int
        :param album: The album of this BaseItemDto.  # noqa: E501
        :type album: str
        :param album_artist: The album_artist of this BaseItemDto.  # noqa: E501
        :type album_artist: str
        :param album_artists: The album_artists of this BaseItemDto.  # noqa: E501
        :type album_artists: List[NameGuidPair]
        :param album_count: The album_count of this BaseItemDto.  # noqa: E501
        :type album_count: int
        :param album_id: The album_id of this BaseItemDto.  # noqa: E501
        :type album_id: str
        :param album_primary_image_tag: The album_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type album_primary_image_tag: str
        :param altitude: The altitude of this BaseItemDto.  # noqa: E501
        :type altitude: float
        :param aperture: The aperture of this BaseItemDto.  # noqa: E501
        :type aperture: float
        :param artist_count: The artist_count of this BaseItemDto.  # noqa: E501
        :type artist_count: int
        :param artist_items: The artist_items of this BaseItemDto.  # noqa: E501
        :type artist_items: List[NameGuidPair]
        :param artists: The artists of this BaseItemDto.  # noqa: E501
        :type artists: List[str]
        :param aspect_ratio: The aspect_ratio of this BaseItemDto.  # noqa: E501
        :type aspect_ratio: str
        :param audio: The audio of this BaseItemDto.  # noqa: E501
        :type audio: ProgramAudio
        :param backdrop_image_tags: The backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :type backdrop_image_tags: List[str]
        :param camera_make: The camera_make of this BaseItemDto.  # noqa: E501
        :type camera_make: str
        :param camera_model: The camera_model of this BaseItemDto.  # noqa: E501
        :type camera_model: str
        :param can_delete: The can_delete of this BaseItemDto.  # noqa: E501
        :type can_delete: bool
        :param can_download: The can_download of this BaseItemDto.  # noqa: E501
        :type can_download: bool
        :param channel_id: The channel_id of this BaseItemDto.  # noqa: E501
        :type channel_id: str
        :param channel_name: The channel_name of this BaseItemDto.  # noqa: E501
        :type channel_name: str
        :param channel_number: The channel_number of this BaseItemDto.  # noqa: E501
        :type channel_number: str
        :param channel_primary_image_tag: The channel_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type channel_primary_image_tag: str
        :param channel_type: The channel_type of this BaseItemDto.  # noqa: E501
        :type channel_type: ChannelType
        :param chapters: The chapters of this BaseItemDto.  # noqa: E501
        :type chapters: List[ChapterInfo]
        :param child_count: The child_count of this BaseItemDto.  # noqa: E501
        :type child_count: int
        :param collection_type: The collection_type of this BaseItemDto.  # noqa: E501
        :type collection_type: str
        :param community_rating: The community_rating of this BaseItemDto.  # noqa: E501
        :type community_rating: float
        :param completion_percentage: The completion_percentage of this BaseItemDto.  # noqa: E501
        :type completion_percentage: float
        :param container: The container of this BaseItemDto.  # noqa: E501
        :type container: str
        :param critic_rating: The critic_rating of this BaseItemDto.  # noqa: E501
        :type critic_rating: float
        :param cumulative_run_time_ticks: The cumulative_run_time_ticks of this BaseItemDto.  # noqa: E501
        :type cumulative_run_time_ticks: int
        :param current_program: The current_program of this BaseItemDto.  # noqa: E501
        :type current_program: BaseItemDto
        :param custom_rating: The custom_rating of this BaseItemDto.  # noqa: E501
        :type custom_rating: str
        :param date_created: The date_created of this BaseItemDto.  # noqa: E501
        :type date_created: datetime
        :param date_last_media_added: The date_last_media_added of this BaseItemDto.  # noqa: E501
        :type date_last_media_added: datetime
        :param display_order: The display_order of this BaseItemDto.  # noqa: E501
        :type display_order: str
        :param display_preferences_id: The display_preferences_id of this BaseItemDto.  # noqa: E501
        :type display_preferences_id: str
        :param enable_media_source_display: The enable_media_source_display of this BaseItemDto.  # noqa: E501
        :type enable_media_source_display: bool
        :param end_date: The end_date of this BaseItemDto.  # noqa: E501
        :type end_date: datetime
        :param episode_count: The episode_count of this BaseItemDto.  # noqa: E501
        :type episode_count: int
        :param episode_title: The episode_title of this BaseItemDto.  # noqa: E501
        :type episode_title: str
        :param etag: The etag of this BaseItemDto.  # noqa: E501
        :type etag: str
        :param exposure_time: The exposure_time of this BaseItemDto.  # noqa: E501
        :type exposure_time: float
        :param external_urls: The external_urls of this BaseItemDto.  # noqa: E501
        :type external_urls: List[ExternalUrl]
        :param extra_type: The extra_type of this BaseItemDto.  # noqa: E501
        :type extra_type: str
        :param focal_length: The focal_length of this BaseItemDto.  # noqa: E501
        :type focal_length: float
        :param forced_sort_name: The forced_sort_name of this BaseItemDto.  # noqa: E501
        :type forced_sort_name: str
        :param genre_items: The genre_items of this BaseItemDto.  # noqa: E501
        :type genre_items: List[NameGuidPair]
        :param genres: The genres of this BaseItemDto.  # noqa: E501
        :type genres: List[str]
        :param has_subtitles: The has_subtitles of this BaseItemDto.  # noqa: E501
        :type has_subtitles: bool
        :param height: The height of this BaseItemDto.  # noqa: E501
        :type height: int
        :param id: The id of this BaseItemDto.  # noqa: E501
        :type id: str
        :param image_blur_hashes: The image_blur_hashes of this BaseItemDto.  # noqa: E501
        :type image_blur_hashes: BaseItemDtoImageBlurHashes
        :param image_orientation: The image_orientation of this BaseItemDto.  # noqa: E501
        :type image_orientation: ImageOrientation
        :param image_tags: The image_tags of this BaseItemDto.  # noqa: E501
        :type image_tags: Dict[str, str]
        :param index_number: The index_number of this BaseItemDto.  # noqa: E501
        :type index_number: int
        :param index_number_end: The index_number_end of this BaseItemDto.  # noqa: E501
        :type index_number_end: int
        :param is_folder: The is_folder of this BaseItemDto.  # noqa: E501
        :type is_folder: bool
        :param is_hd: The is_hd of this BaseItemDto.  # noqa: E501
        :type is_hd: bool
        :param is_kids: The is_kids of this BaseItemDto.  # noqa: E501
        :type is_kids: bool
        :param is_live: The is_live of this BaseItemDto.  # noqa: E501
        :type is_live: bool
        :param is_movie: The is_movie of this BaseItemDto.  # noqa: E501
        :type is_movie: bool
        :param is_news: The is_news of this BaseItemDto.  # noqa: E501
        :type is_news: bool
        :param is_place_holder: The is_place_holder of this BaseItemDto.  # noqa: E501
        :type is_place_holder: bool
        :param is_premiere: The is_premiere of this BaseItemDto.  # noqa: E501
        :type is_premiere: bool
        :param is_repeat: The is_repeat of this BaseItemDto.  # noqa: E501
        :type is_repeat: bool
        :param is_series: The is_series of this BaseItemDto.  # noqa: E501
        :type is_series: bool
        :param is_sports: The is_sports of this BaseItemDto.  # noqa: E501
        :type is_sports: bool
        :param iso_speed_rating: The iso_speed_rating of this BaseItemDto.  # noqa: E501
        :type iso_speed_rating: int
        :param iso_type: The iso_type of this BaseItemDto.  # noqa: E501
        :type iso_type: IsoType
        :param latitude: The latitude of this BaseItemDto.  # noqa: E501
        :type latitude: float
        :param local_trailer_count: The local_trailer_count of this BaseItemDto.  # noqa: E501
        :type local_trailer_count: int
        :param location_type: The location_type of this BaseItemDto.  # noqa: E501
        :type location_type: LocationType
        :param lock_data: The lock_data of this BaseItemDto.  # noqa: E501
        :type lock_data: bool
        :param locked_fields: The locked_fields of this BaseItemDto.  # noqa: E501
        :type locked_fields: List[MetadataField]
        :param longitude: The longitude of this BaseItemDto.  # noqa: E501
        :type longitude: float
        :param media_source_count: The media_source_count of this BaseItemDto.  # noqa: E501
        :type media_source_count: int
        :param media_sources: The media_sources of this BaseItemDto.  # noqa: E501
        :type media_sources: List[MediaSourceInfo]
        :param media_streams: The media_streams of this BaseItemDto.  # noqa: E501
        :type media_streams: List[MediaStream]
        :param media_type: The media_type of this BaseItemDto.  # noqa: E501
        :type media_type: str
        :param movie_count: The movie_count of this BaseItemDto.  # noqa: E501
        :type movie_count: int
        :param music_video_count: The music_video_count of this BaseItemDto.  # noqa: E501
        :type music_video_count: int
        :param name: The name of this BaseItemDto.  # noqa: E501
        :type name: str
        :param number: The number of this BaseItemDto.  # noqa: E501
        :type number: str
        :param official_rating: The official_rating of this BaseItemDto.  # noqa: E501
        :type official_rating: str
        :param original_title: The original_title of this BaseItemDto.  # noqa: E501
        :type original_title: str
        :param overview: The overview of this BaseItemDto.  # noqa: E501
        :type overview: str
        :param parent_art_image_tag: The parent_art_image_tag of this BaseItemDto.  # noqa: E501
        :type parent_art_image_tag: str
        :param parent_art_item_id: The parent_art_item_id of this BaseItemDto.  # noqa: E501
        :type parent_art_item_id: str
        :param parent_backdrop_image_tags: The parent_backdrop_image_tags of this BaseItemDto.  # noqa: E501
        :type parent_backdrop_image_tags: List[str]
        :param parent_backdrop_item_id: The parent_backdrop_item_id of this BaseItemDto.  # noqa: E501
        :type parent_backdrop_item_id: str
        :param parent_id: The parent_id of this BaseItemDto.  # noqa: E501
        :type parent_id: str
        :param parent_index_number: The parent_index_number of this BaseItemDto.  # noqa: E501
        :type parent_index_number: int
        :param parent_logo_image_tag: The parent_logo_image_tag of this BaseItemDto.  # noqa: E501
        :type parent_logo_image_tag: str
        :param parent_logo_item_id: The parent_logo_item_id of this BaseItemDto.  # noqa: E501
        :type parent_logo_item_id: str
        :param parent_primary_image_item_id: The parent_primary_image_item_id of this BaseItemDto.  # noqa: E501
        :type parent_primary_image_item_id: str
        :param parent_primary_image_tag: The parent_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type parent_primary_image_tag: str
        :param parent_thumb_image_tag: The parent_thumb_image_tag of this BaseItemDto.  # noqa: E501
        :type parent_thumb_image_tag: str
        :param parent_thumb_item_id: The parent_thumb_item_id of this BaseItemDto.  # noqa: E501
        :type parent_thumb_item_id: str
        :param part_count: The part_count of this BaseItemDto.  # noqa: E501
        :type part_count: int
        :param path: The path of this BaseItemDto.  # noqa: E501
        :type path: str
        :param people: The people of this BaseItemDto.  # noqa: E501
        :type people: List[BaseItemPerson]
        :param play_access: The play_access of this BaseItemDto.  # noqa: E501
        :type play_access: PlayAccess
        :param playlist_item_id: The playlist_item_id of this BaseItemDto.  # noqa: E501
        :type playlist_item_id: str
        :param preferred_metadata_country_code: The preferred_metadata_country_code of this BaseItemDto.  # noqa: E501
        :type preferred_metadata_country_code: str
        :param preferred_metadata_language: The preferred_metadata_language of this BaseItemDto.  # noqa: E501
        :type preferred_metadata_language: str
        :param premiere_date: The premiere_date of this BaseItemDto.  # noqa: E501
        :type premiere_date: datetime
        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this BaseItemDto.  # noqa: E501
        :type primary_image_aspect_ratio: float
        :param production_locations: The production_locations of this BaseItemDto.  # noqa: E501
        :type production_locations: List[str]
        :param production_year: The production_year of this BaseItemDto.  # noqa: E501
        :type production_year: int
        :param program_count: The program_count of this BaseItemDto.  # noqa: E501
        :type program_count: int
        :param program_id: The program_id of this BaseItemDto.  # noqa: E501
        :type program_id: str
        :param provider_ids: The provider_ids of this BaseItemDto.  # noqa: E501
        :type provider_ids: Dict[str, str]
        :param recursive_item_count: The recursive_item_count of this BaseItemDto.  # noqa: E501
        :type recursive_item_count: int
        :param remote_trailers: The remote_trailers of this BaseItemDto.  # noqa: E501
        :type remote_trailers: List[MediaUrl]
        :param run_time_ticks: The run_time_ticks of this BaseItemDto.  # noqa: E501
        :type run_time_ticks: int
        :param screenshot_image_tags: The screenshot_image_tags of this BaseItemDto.  # noqa: E501
        :type screenshot_image_tags: List[str]
        :param season_id: The season_id of this BaseItemDto.  # noqa: E501
        :type season_id: str
        :param season_name: The season_name of this BaseItemDto.  # noqa: E501
        :type season_name: str
        :param series_count: The series_count of this BaseItemDto.  # noqa: E501
        :type series_count: int
        :param series_id: The series_id of this BaseItemDto.  # noqa: E501
        :type series_id: str
        :param series_name: The series_name of this BaseItemDto.  # noqa: E501
        :type series_name: str
        :param series_primary_image_tag: The series_primary_image_tag of this BaseItemDto.  # noqa: E501
        :type series_primary_image_tag: str
        :param series_studio: The series_studio of this BaseItemDto.  # noqa: E501
        :type series_studio: str
        :param series_thumb_image_tag: The series_thumb_image_tag of this BaseItemDto.  # noqa: E501
        :type series_thumb_image_tag: str
        :param series_timer_id: The series_timer_id of this BaseItemDto.  # noqa: E501
        :type series_timer_id: str
        :param server_id: The server_id of this BaseItemDto.  # noqa: E501
        :type server_id: str
        :param shutter_speed: The shutter_speed of this BaseItemDto.  # noqa: E501
        :type shutter_speed: float
        :param software: The software of this BaseItemDto.  # noqa: E501
        :type software: str
        :param song_count: The song_count of this BaseItemDto.  # noqa: E501
        :type song_count: int
        :param sort_name: The sort_name of this BaseItemDto.  # noqa: E501
        :type sort_name: str
        :param source_type: The source_type of this BaseItemDto.  # noqa: E501
        :type source_type: str
        :param special_feature_count: The special_feature_count of this BaseItemDto.  # noqa: E501
        :type special_feature_count: int
        :param start_date: The start_date of this BaseItemDto.  # noqa: E501
        :type start_date: datetime
        :param status: The status of this BaseItemDto.  # noqa: E501
        :type status: str
        :param studios: The studios of this BaseItemDto.  # noqa: E501
        :type studios: List[NameGuidPair]
        :param supports_sync: The supports_sync of this BaseItemDto.  # noqa: E501
        :type supports_sync: bool
        :param taglines: The taglines of this BaseItemDto.  # noqa: E501
        :type taglines: List[str]
        :param tags: The tags of this BaseItemDto.  # noqa: E501
        :type tags: List[str]
        :param timer_id: The timer_id of this BaseItemDto.  # noqa: E501
        :type timer_id: str
        :param trailer_count: The trailer_count of this BaseItemDto.  # noqa: E501
        :type trailer_count: int
        :param type: The type of this BaseItemDto.  # noqa: E501
        :type type: str
        :param user_data: The user_data of this BaseItemDto.  # noqa: E501
        :type user_data: UserItemDataDto
        :param video3_d_format: The video3_d_format of this BaseItemDto.  # noqa: E501
        :type video3_d_format: Video3DFormat
        :param video_type: The video_type of this BaseItemDto.  # noqa: E501
        :type video_type: VideoType
        :param width: The width of this BaseItemDto.  # noqa: E501
        :type width: int
        """
        self.openapi_types = {
            'air_days': List[DayOfWeek],
            'air_time': str,
            'airs_after_season_number': int,
            'airs_before_episode_number': int,
            'airs_before_season_number': int,
            'album': str,
            'album_artist': str,
            'album_artists': List[NameGuidPair],
            'album_count': int,
            'album_id': str,
            'album_primary_image_tag': str,
            'altitude': float,
            'aperture': float,
            'artist_count': int,
            'artist_items': List[NameGuidPair],
            'artists': List[str],
            'aspect_ratio': str,
            'audio': ProgramAudio,
            'backdrop_image_tags': List[str],
            'camera_make': str,
            'camera_model': str,
            'can_delete': bool,
            'can_download': bool,
            'channel_id': str,
            'channel_name': str,
            'channel_number': str,
            'channel_primary_image_tag': str,
            'channel_type': ChannelType,
            'chapters': List[ChapterInfo],
            'child_count': int,
            'collection_type': str,
            'community_rating': float,
            'completion_percentage': float,
            'container': str,
            'critic_rating': float,
            'cumulative_run_time_ticks': int,
            'current_program': BaseItemDto,
            'custom_rating': str,
            'date_created': datetime,
            'date_last_media_added': datetime,
            'display_order': str,
            'display_preferences_id': str,
            'enable_media_source_display': bool,
            'end_date': datetime,
            'episode_count': int,
            'episode_title': str,
            'etag': str,
            'exposure_time': float,
            'external_urls': List[ExternalUrl],
            'extra_type': str,
            'focal_length': float,
            'forced_sort_name': str,
            'genre_items': List[NameGuidPair],
            'genres': List[str],
            'has_subtitles': bool,
            'height': int,
            'id': str,
            'image_blur_hashes': BaseItemDtoImageBlurHashes,
            'image_orientation': ImageOrientation,
            'image_tags': Dict[str, str],
            'index_number': int,
            'index_number_end': int,
            'is_folder': bool,
            'is_hd': bool,
            'is_kids': bool,
            'is_live': bool,
            'is_movie': bool,
            'is_news': bool,
            'is_place_holder': bool,
            'is_premiere': bool,
            'is_repeat': bool,
            'is_series': bool,
            'is_sports': bool,
            'iso_speed_rating': int,
            'iso_type': IsoType,
            'latitude': float,
            'local_trailer_count': int,
            'location_type': LocationType,
            'lock_data': bool,
            'locked_fields': List[MetadataField],
            'longitude': float,
            'media_source_count': int,
            'media_sources': List[MediaSourceInfo],
            'media_streams': List[MediaStream],
            'media_type': str,
            'movie_count': int,
            'music_video_count': int,
            'name': str,
            'number': str,
            'official_rating': str,
            'original_title': str,
            'overview': str,
            'parent_art_image_tag': str,
            'parent_art_item_id': str,
            'parent_backdrop_image_tags': List[str],
            'parent_backdrop_item_id': str,
            'parent_id': str,
            'parent_index_number': int,
            'parent_logo_image_tag': str,
            'parent_logo_item_id': str,
            'parent_primary_image_item_id': str,
            'parent_primary_image_tag': str,
            'parent_thumb_image_tag': str,
            'parent_thumb_item_id': str,
            'part_count': int,
            'path': str,
            'people': List[BaseItemPerson],
            'play_access': PlayAccess,
            'playlist_item_id': str,
            'preferred_metadata_country_code': str,
            'preferred_metadata_language': str,
            'premiere_date': datetime,
            'primary_image_aspect_ratio': float,
            'production_locations': List[str],
            'production_year': int,
            'program_count': int,
            'program_id': str,
            'provider_ids': Dict[str, str],
            'recursive_item_count': int,
            'remote_trailers': List[MediaUrl],
            'run_time_ticks': int,
            'screenshot_image_tags': List[str],
            'season_id': str,
            'season_name': str,
            'series_count': int,
            'series_id': str,
            'series_name': str,
            'series_primary_image_tag': str,
            'series_studio': str,
            'series_thumb_image_tag': str,
            'series_timer_id': str,
            'server_id': str,
            'shutter_speed': float,
            'software': str,
            'song_count': int,
            'sort_name': str,
            'source_type': str,
            'special_feature_count': int,
            'start_date': datetime,
            'status': str,
            'studios': List[NameGuidPair],
            'supports_sync': bool,
            'taglines': List[str],
            'tags': List[str],
            'timer_id': str,
            'trailer_count': int,
            'type': str,
            'user_data': UserItemDataDto,
            'video3_d_format': Video3DFormat,
            'video_type': VideoType,
            'width': int
        }

        self.attribute_map = {
            'air_days': 'AirDays',
            'air_time': 'AirTime',
            'airs_after_season_number': 'AirsAfterSeasonNumber',
            'airs_before_episode_number': 'AirsBeforeEpisodeNumber',
            'airs_before_season_number': 'AirsBeforeSeasonNumber',
            'album': 'Album',
            'album_artist': 'AlbumArtist',
            'album_artists': 'AlbumArtists',
            'album_count': 'AlbumCount',
            'album_id': 'AlbumId',
            'album_primary_image_tag': 'AlbumPrimaryImageTag',
            'altitude': 'Altitude',
            'aperture': 'Aperture',
            'artist_count': 'ArtistCount',
            'artist_items': 'ArtistItems',
            'artists': 'Artists',
            'aspect_ratio': 'AspectRatio',
            'audio': 'Audio',
            'backdrop_image_tags': 'BackdropImageTags',
            'camera_make': 'CameraMake',
            'camera_model': 'CameraModel',
            'can_delete': 'CanDelete',
            'can_download': 'CanDownload',
            'channel_id': 'ChannelId',
            'channel_name': 'ChannelName',
            'channel_number': 'ChannelNumber',
            'channel_primary_image_tag': 'ChannelPrimaryImageTag',
            'channel_type': 'ChannelType',
            'chapters': 'Chapters',
            'child_count': 'ChildCount',
            'collection_type': 'CollectionType',
            'community_rating': 'CommunityRating',
            'completion_percentage': 'CompletionPercentage',
            'container': 'Container',
            'critic_rating': 'CriticRating',
            'cumulative_run_time_ticks': 'CumulativeRunTimeTicks',
            'current_program': 'CurrentProgram',
            'custom_rating': 'CustomRating',
            'date_created': 'DateCreated',
            'date_last_media_added': 'DateLastMediaAdded',
            'display_order': 'DisplayOrder',
            'display_preferences_id': 'DisplayPreferencesId',
            'enable_media_source_display': 'EnableMediaSourceDisplay',
            'end_date': 'EndDate',
            'episode_count': 'EpisodeCount',
            'episode_title': 'EpisodeTitle',
            'etag': 'Etag',
            'exposure_time': 'ExposureTime',
            'external_urls': 'ExternalUrls',
            'extra_type': 'ExtraType',
            'focal_length': 'FocalLength',
            'forced_sort_name': 'ForcedSortName',
            'genre_items': 'GenreItems',
            'genres': 'Genres',
            'has_subtitles': 'HasSubtitles',
            'height': 'Height',
            'id': 'Id',
            'image_blur_hashes': 'ImageBlurHashes',
            'image_orientation': 'ImageOrientation',
            'image_tags': 'ImageTags',
            'index_number': 'IndexNumber',
            'index_number_end': 'IndexNumberEnd',
            'is_folder': 'IsFolder',
            'is_hd': 'IsHD',
            'is_kids': 'IsKids',
            'is_live': 'IsLive',
            'is_movie': 'IsMovie',
            'is_news': 'IsNews',
            'is_place_holder': 'IsPlaceHolder',
            'is_premiere': 'IsPremiere',
            'is_repeat': 'IsRepeat',
            'is_series': 'IsSeries',
            'is_sports': 'IsSports',
            'iso_speed_rating': 'IsoSpeedRating',
            'iso_type': 'IsoType',
            'latitude': 'Latitude',
            'local_trailer_count': 'LocalTrailerCount',
            'location_type': 'LocationType',
            'lock_data': 'LockData',
            'locked_fields': 'LockedFields',
            'longitude': 'Longitude',
            'media_source_count': 'MediaSourceCount',
            'media_sources': 'MediaSources',
            'media_streams': 'MediaStreams',
            'media_type': 'MediaType',
            'movie_count': 'MovieCount',
            'music_video_count': 'MusicVideoCount',
            'name': 'Name',
            'number': 'Number',
            'official_rating': 'OfficialRating',
            'original_title': 'OriginalTitle',
            'overview': 'Overview',
            'parent_art_image_tag': 'ParentArtImageTag',
            'parent_art_item_id': 'ParentArtItemId',
            'parent_backdrop_image_tags': 'ParentBackdropImageTags',
            'parent_backdrop_item_id': 'ParentBackdropItemId',
            'parent_id': 'ParentId',
            'parent_index_number': 'ParentIndexNumber',
            'parent_logo_image_tag': 'ParentLogoImageTag',
            'parent_logo_item_id': 'ParentLogoItemId',
            'parent_primary_image_item_id': 'ParentPrimaryImageItemId',
            'parent_primary_image_tag': 'ParentPrimaryImageTag',
            'parent_thumb_image_tag': 'ParentThumbImageTag',
            'parent_thumb_item_id': 'ParentThumbItemId',
            'part_count': 'PartCount',
            'path': 'Path',
            'people': 'People',
            'play_access': 'PlayAccess',
            'playlist_item_id': 'PlaylistItemId',
            'preferred_metadata_country_code': 'PreferredMetadataCountryCode',
            'preferred_metadata_language': 'PreferredMetadataLanguage',
            'premiere_date': 'PremiereDate',
            'primary_image_aspect_ratio': 'PrimaryImageAspectRatio',
            'production_locations': 'ProductionLocations',
            'production_year': 'ProductionYear',
            'program_count': 'ProgramCount',
            'program_id': 'ProgramId',
            'provider_ids': 'ProviderIds',
            'recursive_item_count': 'RecursiveItemCount',
            'remote_trailers': 'RemoteTrailers',
            'run_time_ticks': 'RunTimeTicks',
            'screenshot_image_tags': 'ScreenshotImageTags',
            'season_id': 'SeasonId',
            'season_name': 'SeasonName',
            'series_count': 'SeriesCount',
            'series_id': 'SeriesId',
            'series_name': 'SeriesName',
            'series_primary_image_tag': 'SeriesPrimaryImageTag',
            'series_studio': 'SeriesStudio',
            'series_thumb_image_tag': 'SeriesThumbImageTag',
            'series_timer_id': 'SeriesTimerId',
            'server_id': 'ServerId',
            'shutter_speed': 'ShutterSpeed',
            'software': 'Software',
            'song_count': 'SongCount',
            'sort_name': 'SortName',
            'source_type': 'SourceType',
            'special_feature_count': 'SpecialFeatureCount',
            'start_date': 'StartDate',
            'status': 'Status',
            'studios': 'Studios',
            'supports_sync': 'SupportsSync',
            'taglines': 'Taglines',
            'tags': 'Tags',
            'timer_id': 'TimerId',
            'trailer_count': 'TrailerCount',
            'type': 'Type',
            'user_data': 'UserData',
            'video3_d_format': 'Video3DFormat',
            'video_type': 'VideoType',
            'width': 'Width'
        }

        self._air_days = air_days
        self._air_time = air_time
        self._airs_after_season_number = airs_after_season_number
        self._airs_before_episode_number = airs_before_episode_number
        self._airs_before_season_number = airs_before_season_number
        self._album = album
        self._album_artist = album_artist
        self._album_artists = album_artists
        self._album_count = album_count
        self._album_id = album_id
        self._album_primary_image_tag = album_primary_image_tag
        self._altitude = altitude
        self._aperture = aperture
        self._artist_count = artist_count
        self._artist_items = artist_items
        self._artists = artists
        self._aspect_ratio = aspect_ratio
        self._audio = audio
        self._backdrop_image_tags = backdrop_image_tags
        self._camera_make = camera_make
        self._camera_model = camera_model
        self._can_delete = can_delete
        self._can_download = can_download
        self._channel_id = channel_id
        self._channel_name = channel_name
        self._channel_number = channel_number
        self._channel_primary_image_tag = channel_primary_image_tag
        self._channel_type = channel_type
        self._chapters = chapters
        self._child_count = child_count
        self._collection_type = collection_type
        self._community_rating = community_rating
        self._completion_percentage = completion_percentage
        self._container = container
        self._critic_rating = critic_rating
        self._cumulative_run_time_ticks = cumulative_run_time_ticks
        self._current_program = current_program
        self._custom_rating = custom_rating
        self._date_created = date_created
        self._date_last_media_added = date_last_media_added
        self._display_order = display_order
        self._display_preferences_id = display_preferences_id
        self._enable_media_source_display = enable_media_source_display
        self._end_date = end_date
        self._episode_count = episode_count
        self._episode_title = episode_title
        self._etag = etag
        self._exposure_time = exposure_time
        self._external_urls = external_urls
        self._extra_type = extra_type
        self._focal_length = focal_length
        self._forced_sort_name = forced_sort_name
        self._genre_items = genre_items
        self._genres = genres
        self._has_subtitles = has_subtitles
        self._height = height
        self._id = id
        self._image_blur_hashes = image_blur_hashes
        self._image_orientation = image_orientation
        self._image_tags = image_tags
        self._index_number = index_number
        self._index_number_end = index_number_end
        self._is_folder = is_folder
        self._is_hd = is_hd
        self._is_kids = is_kids
        self._is_live = is_live
        self._is_movie = is_movie
        self._is_news = is_news
        self._is_place_holder = is_place_holder
        self._is_premiere = is_premiere
        self._is_repeat = is_repeat
        self._is_series = is_series
        self._is_sports = is_sports
        self._iso_speed_rating = iso_speed_rating
        self._iso_type = iso_type
        self._latitude = latitude
        self._local_trailer_count = local_trailer_count
        self._location_type = location_type
        self._lock_data = lock_data
        self._locked_fields = locked_fields
        self._longitude = longitude
        self._media_source_count = media_source_count
        self._media_sources = media_sources
        self._media_streams = media_streams
        self._media_type = media_type
        self._movie_count = movie_count
        self._music_video_count = music_video_count
        self._name = name
        self._number = number
        self._official_rating = official_rating
        self._original_title = original_title
        self._overview = overview
        self._parent_art_image_tag = parent_art_image_tag
        self._parent_art_item_id = parent_art_item_id
        self._parent_backdrop_image_tags = parent_backdrop_image_tags
        self._parent_backdrop_item_id = parent_backdrop_item_id
        self._parent_id = parent_id
        self._parent_index_number = parent_index_number
        self._parent_logo_image_tag = parent_logo_image_tag
        self._parent_logo_item_id = parent_logo_item_id
        self._parent_primary_image_item_id = parent_primary_image_item_id
        self._parent_primary_image_tag = parent_primary_image_tag
        self._parent_thumb_image_tag = parent_thumb_image_tag
        self._parent_thumb_item_id = parent_thumb_item_id
        self._part_count = part_count
        self._path = path
        self._people = people
        self._play_access = play_access
        self._playlist_item_id = playlist_item_id
        self._preferred_metadata_country_code = preferred_metadata_country_code
        self._preferred_metadata_language = preferred_metadata_language
        self._premiere_date = premiere_date
        self._primary_image_aspect_ratio = primary_image_aspect_ratio
        self._production_locations = production_locations
        self._production_year = production_year
        self._program_count = program_count
        self._program_id = program_id
        self._provider_ids = provider_ids
        self._recursive_item_count = recursive_item_count
        self._remote_trailers = remote_trailers
        self._run_time_ticks = run_time_ticks
        self._screenshot_image_tags = screenshot_image_tags
        self._season_id = season_id
        self._season_name = season_name
        self._series_count = series_count
        self._series_id = series_id
        self._series_name = series_name
        self._series_primary_image_tag = series_primary_image_tag
        self._series_studio = series_studio
        self._series_thumb_image_tag = series_thumb_image_tag
        self._series_timer_id = series_timer_id
        self._server_id = server_id
        self._shutter_speed = shutter_speed
        self._software = software
        self._song_count = song_count
        self._sort_name = sort_name
        self._source_type = source_type
        self._special_feature_count = special_feature_count
        self._start_date = start_date
        self._status = status
        self._studios = studios
        self._supports_sync = supports_sync
        self._taglines = taglines
        self._tags = tags
        self._timer_id = timer_id
        self._trailer_count = trailer_count
        self._type = type
        self._user_data = user_data
        self._video3_d_format = video3_d_format
        self._video_type = video_type
        self._width = width

    @classmethod
    def from_dict(cls, dikt) -> 'BaseItemDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseItemDto of this BaseItemDto.  # noqa: E501
        :rtype: BaseItemDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def air_days(self) -> List[DayOfWeek]:
        """Gets the air_days of this BaseItemDto.

        Gets or sets the air days.  # noqa: E501

        :return: The air_days of this BaseItemDto.
        :rtype: List[DayOfWeek]
        """
        return self._air_days

    @air_days.setter
    def air_days(self, air_days: List[DayOfWeek]):
        """Sets the air_days of this BaseItemDto.

        Gets or sets the air days.  # noqa: E501

        :param air_days: The air_days of this BaseItemDto.
        :type air_days: List[DayOfWeek]
        """

        self._air_days = air_days

    @property
    def air_time(self) -> str:
        """Gets the air_time of this BaseItemDto.

        Gets or sets the air time.  # noqa: E501

        :return: The air_time of this BaseItemDto.
        :rtype: str
        """
        return self._air_time

    @air_time.setter
    def air_time(self, air_time: str):
        """Sets the air_time of this BaseItemDto.

        Gets or sets the air time.  # noqa: E501

        :param air_time: The air_time of this BaseItemDto.
        :type air_time: str
        """

        self._air_time = air_time

    @property
    def airs_after_season_number(self) -> int:
        """Gets the airs_after_season_number of this BaseItemDto.


        :return: The airs_after_season_number of this BaseItemDto.
        :rtype: int
        """
        return self._airs_after_season_number

    @airs_after_season_number.setter
    def airs_after_season_number(self, airs_after_season_number: int):
        """Sets the airs_after_season_number of this BaseItemDto.


        :param airs_after_season_number: The airs_after_season_number of this BaseItemDto.
        :type airs_after_season_number: int
        """

        self._airs_after_season_number = airs_after_season_number

    @property
    def airs_before_episode_number(self) -> int:
        """Gets the airs_before_episode_number of this BaseItemDto.


        :return: The airs_before_episode_number of this BaseItemDto.
        :rtype: int
        """
        return self._airs_before_episode_number

    @airs_before_episode_number.setter
    def airs_before_episode_number(self, airs_before_episode_number: int):
        """Sets the airs_before_episode_number of this BaseItemDto.


        :param airs_before_episode_number: The airs_before_episode_number of this BaseItemDto.
        :type airs_before_episode_number: int
        """

        self._airs_before_episode_number = airs_before_episode_number

    @property
    def airs_before_season_number(self) -> int:
        """Gets the airs_before_season_number of this BaseItemDto.


        :return: The airs_before_season_number of this BaseItemDto.
        :rtype: int
        """
        return self._airs_before_season_number

    @airs_before_season_number.setter
    def airs_before_season_number(self, airs_before_season_number: int):
        """Sets the airs_before_season_number of this BaseItemDto.


        :param airs_before_season_number: The airs_before_season_number of this BaseItemDto.
        :type airs_before_season_number: int
        """

        self._airs_before_season_number = airs_before_season_number

    @property
    def album(self) -> str:
        """Gets the album of this BaseItemDto.

        Gets or sets the album.  # noqa: E501

        :return: The album of this BaseItemDto.
        :rtype: str
        """
        return self._album

    @album.setter
    def album(self, album: str):
        """Sets the album of this BaseItemDto.

        Gets or sets the album.  # noqa: E501

        :param album: The album of this BaseItemDto.
        :type album: str
        """

        self._album = album

    @property
    def album_artist(self) -> str:
        """Gets the album_artist of this BaseItemDto.

        Gets or sets the album artist.  # noqa: E501

        :return: The album_artist of this BaseItemDto.
        :rtype: str
        """
        return self._album_artist

    @album_artist.setter
    def album_artist(self, album_artist: str):
        """Sets the album_artist of this BaseItemDto.

        Gets or sets the album artist.  # noqa: E501

        :param album_artist: The album_artist of this BaseItemDto.
        :type album_artist: str
        """

        self._album_artist = album_artist

    @property
    def album_artists(self) -> List[NameGuidPair]:
        """Gets the album_artists of this BaseItemDto.

        Gets or sets the album artists.  # noqa: E501

        :return: The album_artists of this BaseItemDto.
        :rtype: List[NameGuidPair]
        """
        return self._album_artists

    @album_artists.setter
    def album_artists(self, album_artists: List[NameGuidPair]):
        """Sets the album_artists of this BaseItemDto.

        Gets or sets the album artists.  # noqa: E501

        :param album_artists: The album_artists of this BaseItemDto.
        :type album_artists: List[NameGuidPair]
        """

        self._album_artists = album_artists

    @property
    def album_count(self) -> int:
        """Gets the album_count of this BaseItemDto.

        Gets or sets the album count.  # noqa: E501

        :return: The album_count of this BaseItemDto.
        :rtype: int
        """
        return self._album_count

    @album_count.setter
    def album_count(self, album_count: int):
        """Sets the album_count of this BaseItemDto.

        Gets or sets the album count.  # noqa: E501

        :param album_count: The album_count of this BaseItemDto.
        :type album_count: int
        """

        self._album_count = album_count

    @property
    def album_id(self) -> str:
        """Gets the album_id of this BaseItemDto.

        Gets or sets the album id.  # noqa: E501

        :return: The album_id of this BaseItemDto.
        :rtype: str
        """
        return self._album_id

    @album_id.setter
    def album_id(self, album_id: str):
        """Sets the album_id of this BaseItemDto.

        Gets or sets the album id.  # noqa: E501

        :param album_id: The album_id of this BaseItemDto.
        :type album_id: str
        """

        self._album_id = album_id

    @property
    def album_primary_image_tag(self) -> str:
        """Gets the album_primary_image_tag of this BaseItemDto.

        Gets or sets the album image tag.  # noqa: E501

        :return: The album_primary_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._album_primary_image_tag

    @album_primary_image_tag.setter
    def album_primary_image_tag(self, album_primary_image_tag: str):
        """Sets the album_primary_image_tag of this BaseItemDto.

        Gets or sets the album image tag.  # noqa: E501

        :param album_primary_image_tag: The album_primary_image_tag of this BaseItemDto.
        :type album_primary_image_tag: str
        """

        self._album_primary_image_tag = album_primary_image_tag

    @property
    def altitude(self) -> float:
        """Gets the altitude of this BaseItemDto.


        :return: The altitude of this BaseItemDto.
        :rtype: float
        """
        return self._altitude

    @altitude.setter
    def altitude(self, altitude: float):
        """Sets the altitude of this BaseItemDto.


        :param altitude: The altitude of this BaseItemDto.
        :type altitude: float
        """

        self._altitude = altitude

    @property
    def aperture(self) -> float:
        """Gets the aperture of this BaseItemDto.


        :return: The aperture of this BaseItemDto.
        :rtype: float
        """
        return self._aperture

    @aperture.setter
    def aperture(self, aperture: float):
        """Sets the aperture of this BaseItemDto.


        :param aperture: The aperture of this BaseItemDto.
        :type aperture: float
        """

        self._aperture = aperture

    @property
    def artist_count(self) -> int:
        """Gets the artist_count of this BaseItemDto.


        :return: The artist_count of this BaseItemDto.
        :rtype: int
        """
        return self._artist_count

    @artist_count.setter
    def artist_count(self, artist_count: int):
        """Sets the artist_count of this BaseItemDto.


        :param artist_count: The artist_count of this BaseItemDto.
        :type artist_count: int
        """

        self._artist_count = artist_count

    @property
    def artist_items(self) -> List[NameGuidPair]:
        """Gets the artist_items of this BaseItemDto.

        Gets or sets the artist items.  # noqa: E501

        :return: The artist_items of this BaseItemDto.
        :rtype: List[NameGuidPair]
        """
        return self._artist_items

    @artist_items.setter
    def artist_items(self, artist_items: List[NameGuidPair]):
        """Sets the artist_items of this BaseItemDto.

        Gets or sets the artist items.  # noqa: E501

        :param artist_items: The artist_items of this BaseItemDto.
        :type artist_items: List[NameGuidPair]
        """

        self._artist_items = artist_items

    @property
    def artists(self) -> List[str]:
        """Gets the artists of this BaseItemDto.

        Gets or sets the artists.  # noqa: E501

        :return: The artists of this BaseItemDto.
        :rtype: List[str]
        """
        return self._artists

    @artists.setter
    def artists(self, artists: List[str]):
        """Sets the artists of this BaseItemDto.

        Gets or sets the artists.  # noqa: E501

        :param artists: The artists of this BaseItemDto.
        :type artists: List[str]
        """

        self._artists = artists

    @property
    def aspect_ratio(self) -> str:
        """Gets the aspect_ratio of this BaseItemDto.

        Gets or sets the aspect ratio.  # noqa: E501

        :return: The aspect_ratio of this BaseItemDto.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio: str):
        """Sets the aspect_ratio of this BaseItemDto.

        Gets or sets the aspect ratio.  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this BaseItemDto.
        :type aspect_ratio: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def audio(self) -> ProgramAudio:
        """Gets the audio of this BaseItemDto.


        :return: The audio of this BaseItemDto.
        :rtype: ProgramAudio
        """
        return self._audio

    @audio.setter
    def audio(self, audio: ProgramAudio):
        """Sets the audio of this BaseItemDto.


        :param audio: The audio of this BaseItemDto.
        :type audio: ProgramAudio
        """

        self._audio = audio

    @property
    def backdrop_image_tags(self) -> List[str]:
        """Gets the backdrop_image_tags of this BaseItemDto.

        Gets or sets the backdrop image tags.  # noqa: E501

        :return: The backdrop_image_tags of this BaseItemDto.
        :rtype: List[str]
        """
        return self._backdrop_image_tags

    @backdrop_image_tags.setter
    def backdrop_image_tags(self, backdrop_image_tags: List[str]):
        """Sets the backdrop_image_tags of this BaseItemDto.

        Gets or sets the backdrop image tags.  # noqa: E501

        :param backdrop_image_tags: The backdrop_image_tags of this BaseItemDto.
        :type backdrop_image_tags: List[str]
        """

        self._backdrop_image_tags = backdrop_image_tags

    @property
    def camera_make(self) -> str:
        """Gets the camera_make of this BaseItemDto.


        :return: The camera_make of this BaseItemDto.
        :rtype: str
        """
        return self._camera_make

    @camera_make.setter
    def camera_make(self, camera_make: str):
        """Sets the camera_make of this BaseItemDto.


        :param camera_make: The camera_make of this BaseItemDto.
        :type camera_make: str
        """

        self._camera_make = camera_make

    @property
    def camera_model(self) -> str:
        """Gets the camera_model of this BaseItemDto.


        :return: The camera_model of this BaseItemDto.
        :rtype: str
        """
        return self._camera_model

    @camera_model.setter
    def camera_model(self, camera_model: str):
        """Sets the camera_model of this BaseItemDto.


        :param camera_model: The camera_model of this BaseItemDto.
        :type camera_model: str
        """

        self._camera_model = camera_model

    @property
    def can_delete(self) -> bool:
        """Gets the can_delete of this BaseItemDto.


        :return: The can_delete of this BaseItemDto.
        :rtype: bool
        """
        return self._can_delete

    @can_delete.setter
    def can_delete(self, can_delete: bool):
        """Sets the can_delete of this BaseItemDto.


        :param can_delete: The can_delete of this BaseItemDto.
        :type can_delete: bool
        """

        self._can_delete = can_delete

    @property
    def can_download(self) -> bool:
        """Gets the can_download of this BaseItemDto.


        :return: The can_download of this BaseItemDto.
        :rtype: bool
        """
        return self._can_download

    @can_download.setter
    def can_download(self, can_download: bool):
        """Sets the can_download of this BaseItemDto.


        :param can_download: The can_download of this BaseItemDto.
        :type can_download: bool
        """

        self._can_download = can_download

    @property
    def channel_id(self) -> str:
        """Gets the channel_id of this BaseItemDto.

        Gets or sets the channel identifier.  # noqa: E501

        :return: The channel_id of this BaseItemDto.
        :rtype: str
        """
        return self._channel_id

    @channel_id.setter
    def channel_id(self, channel_id: str):
        """Sets the channel_id of this BaseItemDto.

        Gets or sets the channel identifier.  # noqa: E501

        :param channel_id: The channel_id of this BaseItemDto.
        :type channel_id: str
        """

        self._channel_id = channel_id

    @property
    def channel_name(self) -> str:
        """Gets the channel_name of this BaseItemDto.


        :return: The channel_name of this BaseItemDto.
        :rtype: str
        """
        return self._channel_name

    @channel_name.setter
    def channel_name(self, channel_name: str):
        """Sets the channel_name of this BaseItemDto.


        :param channel_name: The channel_name of this BaseItemDto.
        :type channel_name: str
        """

        self._channel_name = channel_name

    @property
    def channel_number(self) -> str:
        """Gets the channel_number of this BaseItemDto.


        :return: The channel_number of this BaseItemDto.
        :rtype: str
        """
        return self._channel_number

    @channel_number.setter
    def channel_number(self, channel_number: str):
        """Sets the channel_number of this BaseItemDto.


        :param channel_number: The channel_number of this BaseItemDto.
        :type channel_number: str
        """

        self._channel_number = channel_number

    @property
    def channel_primary_image_tag(self) -> str:
        """Gets the channel_primary_image_tag of this BaseItemDto.

        Gets or sets the channel primary image tag.  # noqa: E501

        :return: The channel_primary_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._channel_primary_image_tag

    @channel_primary_image_tag.setter
    def channel_primary_image_tag(self, channel_primary_image_tag: str):
        """Sets the channel_primary_image_tag of this BaseItemDto.

        Gets or sets the channel primary image tag.  # noqa: E501

        :param channel_primary_image_tag: The channel_primary_image_tag of this BaseItemDto.
        :type channel_primary_image_tag: str
        """

        self._channel_primary_image_tag = channel_primary_image_tag

    @property
    def channel_type(self) -> ChannelType:
        """Gets the channel_type of this BaseItemDto.


        :return: The channel_type of this BaseItemDto.
        :rtype: ChannelType
        """
        return self._channel_type

    @channel_type.setter
    def channel_type(self, channel_type: ChannelType):
        """Sets the channel_type of this BaseItemDto.


        :param channel_type: The channel_type of this BaseItemDto.
        :type channel_type: ChannelType
        """

        self._channel_type = channel_type

    @property
    def chapters(self) -> List[ChapterInfo]:
        """Gets the chapters of this BaseItemDto.

        Gets or sets the chapters.  # noqa: E501

        :return: The chapters of this BaseItemDto.
        :rtype: List[ChapterInfo]
        """
        return self._chapters

    @chapters.setter
    def chapters(self, chapters: List[ChapterInfo]):
        """Sets the chapters of this BaseItemDto.

        Gets or sets the chapters.  # noqa: E501

        :param chapters: The chapters of this BaseItemDto.
        :type chapters: List[ChapterInfo]
        """

        self._chapters = chapters

    @property
    def child_count(self) -> int:
        """Gets the child_count of this BaseItemDto.

        Gets or sets the child count.  # noqa: E501

        :return: The child_count of this BaseItemDto.
        :rtype: int
        """
        return self._child_count

    @child_count.setter
    def child_count(self, child_count: int):
        """Sets the child_count of this BaseItemDto.

        Gets or sets the child count.  # noqa: E501

        :param child_count: The child_count of this BaseItemDto.
        :type child_count: int
        """

        self._child_count = child_count

    @property
    def collection_type(self) -> str:
        """Gets the collection_type of this BaseItemDto.

        Gets or sets the type of the collection.  # noqa: E501

        :return: The collection_type of this BaseItemDto.
        :rtype: str
        """
        return self._collection_type

    @collection_type.setter
    def collection_type(self, collection_type: str):
        """Sets the collection_type of this BaseItemDto.

        Gets or sets the type of the collection.  # noqa: E501

        :param collection_type: The collection_type of this BaseItemDto.
        :type collection_type: str
        """

        self._collection_type = collection_type

    @property
    def community_rating(self) -> float:
        """Gets the community_rating of this BaseItemDto.

        Gets or sets the community rating.  # noqa: E501

        :return: The community_rating of this BaseItemDto.
        :rtype: float
        """
        return self._community_rating

    @community_rating.setter
    def community_rating(self, community_rating: float):
        """Sets the community_rating of this BaseItemDto.

        Gets or sets the community rating.  # noqa: E501

        :param community_rating: The community_rating of this BaseItemDto.
        :type community_rating: float
        """

        self._community_rating = community_rating

    @property
    def completion_percentage(self) -> float:
        """Gets the completion_percentage of this BaseItemDto.

        Gets or sets the completion percentage.  # noqa: E501

        :return: The completion_percentage of this BaseItemDto.
        :rtype: float
        """
        return self._completion_percentage

    @completion_percentage.setter
    def completion_percentage(self, completion_percentage: float):
        """Sets the completion_percentage of this BaseItemDto.

        Gets or sets the completion percentage.  # noqa: E501

        :param completion_percentage: The completion_percentage of this BaseItemDto.
        :type completion_percentage: float
        """

        self._completion_percentage = completion_percentage

    @property
    def container(self) -> str:
        """Gets the container of this BaseItemDto.


        :return: The container of this BaseItemDto.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this BaseItemDto.


        :param container: The container of this BaseItemDto.
        :type container: str
        """

        self._container = container

    @property
    def critic_rating(self) -> float:
        """Gets the critic_rating of this BaseItemDto.

        Gets or sets the critic rating.  # noqa: E501

        :return: The critic_rating of this BaseItemDto.
        :rtype: float
        """
        return self._critic_rating

    @critic_rating.setter
    def critic_rating(self, critic_rating: float):
        """Sets the critic_rating of this BaseItemDto.

        Gets or sets the critic rating.  # noqa: E501

        :param critic_rating: The critic_rating of this BaseItemDto.
        :type critic_rating: float
        """

        self._critic_rating = critic_rating

    @property
    def cumulative_run_time_ticks(self) -> int:
        """Gets the cumulative_run_time_ticks of this BaseItemDto.

        Gets or sets the cumulative run time ticks.  # noqa: E501

        :return: The cumulative_run_time_ticks of this BaseItemDto.
        :rtype: int
        """
        return self._cumulative_run_time_ticks

    @cumulative_run_time_ticks.setter
    def cumulative_run_time_ticks(self, cumulative_run_time_ticks: int):
        """Sets the cumulative_run_time_ticks of this BaseItemDto.

        Gets or sets the cumulative run time ticks.  # noqa: E501

        :param cumulative_run_time_ticks: The cumulative_run_time_ticks of this BaseItemDto.
        :type cumulative_run_time_ticks: int
        """

        self._cumulative_run_time_ticks = cumulative_run_time_ticks

    @property
    def current_program(self) -> BaseItemDto:
        """Gets the current_program of this BaseItemDto.


        :return: The current_program of this BaseItemDto.
        :rtype: BaseItemDto
        """
        return self._current_program

    @current_program.setter
    def current_program(self, current_program: BaseItemDto):
        """Sets the current_program of this BaseItemDto.


        :param current_program: The current_program of this BaseItemDto.
        :type current_program: BaseItemDto
        """

        self._current_program = current_program

    @property
    def custom_rating(self) -> str:
        """Gets the custom_rating of this BaseItemDto.

        Gets or sets the custom rating.  # noqa: E501

        :return: The custom_rating of this BaseItemDto.
        :rtype: str
        """
        return self._custom_rating

    @custom_rating.setter
    def custom_rating(self, custom_rating: str):
        """Sets the custom_rating of this BaseItemDto.

        Gets or sets the custom rating.  # noqa: E501

        :param custom_rating: The custom_rating of this BaseItemDto.
        :type custom_rating: str
        """

        self._custom_rating = custom_rating

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this BaseItemDto.

        Gets or sets the date created.  # noqa: E501

        :return: The date_created of this BaseItemDto.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime):
        """Sets the date_created of this BaseItemDto.

        Gets or sets the date created.  # noqa: E501

        :param date_created: The date_created of this BaseItemDto.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_last_media_added(self) -> datetime:
        """Gets the date_last_media_added of this BaseItemDto.


        :return: The date_last_media_added of this BaseItemDto.
        :rtype: datetime
        """
        return self._date_last_media_added

    @date_last_media_added.setter
    def date_last_media_added(self, date_last_media_added: datetime):
        """Sets the date_last_media_added of this BaseItemDto.


        :param date_last_media_added: The date_last_media_added of this BaseItemDto.
        :type date_last_media_added: datetime
        """

        self._date_last_media_added = date_last_media_added

    @property
    def display_order(self) -> str:
        """Gets the display_order of this BaseItemDto.

        Gets or sets the display order.  # noqa: E501

        :return: The display_order of this BaseItemDto.
        :rtype: str
        """
        return self._display_order

    @display_order.setter
    def display_order(self, display_order: str):
        """Sets the display_order of this BaseItemDto.

        Gets or sets the display order.  # noqa: E501

        :param display_order: The display_order of this BaseItemDto.
        :type display_order: str
        """

        self._display_order = display_order

    @property
    def display_preferences_id(self) -> str:
        """Gets the display_preferences_id of this BaseItemDto.

        Gets or sets the display preferences id.  # noqa: E501

        :return: The display_preferences_id of this BaseItemDto.
        :rtype: str
        """
        return self._display_preferences_id

    @display_preferences_id.setter
    def display_preferences_id(self, display_preferences_id: str):
        """Sets the display_preferences_id of this BaseItemDto.

        Gets or sets the display preferences id.  # noqa: E501

        :param display_preferences_id: The display_preferences_id of this BaseItemDto.
        :type display_preferences_id: str
        """

        self._display_preferences_id = display_preferences_id

    @property
    def enable_media_source_display(self) -> bool:
        """Gets the enable_media_source_display of this BaseItemDto.


        :return: The enable_media_source_display of this BaseItemDto.
        :rtype: bool
        """
        return self._enable_media_source_display

    @enable_media_source_display.setter
    def enable_media_source_display(self, enable_media_source_display: bool):
        """Sets the enable_media_source_display of this BaseItemDto.


        :param enable_media_source_display: The enable_media_source_display of this BaseItemDto.
        :type enable_media_source_display: bool
        """

        self._enable_media_source_display = enable_media_source_display

    @property
    def end_date(self) -> datetime:
        """Gets the end_date of this BaseItemDto.

        Gets or sets the end date.  # noqa: E501

        :return: The end_date of this BaseItemDto.
        :rtype: datetime
        """
        return self._end_date

    @end_date.setter
    def end_date(self, end_date: datetime):
        """Sets the end_date of this BaseItemDto.

        Gets or sets the end date.  # noqa: E501

        :param end_date: The end_date of this BaseItemDto.
        :type end_date: datetime
        """

        self._end_date = end_date

    @property
    def episode_count(self) -> int:
        """Gets the episode_count of this BaseItemDto.

        Gets or sets the episode count.  # noqa: E501

        :return: The episode_count of this BaseItemDto.
        :rtype: int
        """
        return self._episode_count

    @episode_count.setter
    def episode_count(self, episode_count: int):
        """Sets the episode_count of this BaseItemDto.

        Gets or sets the episode count.  # noqa: E501

        :param episode_count: The episode_count of this BaseItemDto.
        :type episode_count: int
        """

        self._episode_count = episode_count

    @property
    def episode_title(self) -> str:
        """Gets the episode_title of this BaseItemDto.

        Gets or sets the episode title.  # noqa: E501

        :return: The episode_title of this BaseItemDto.
        :rtype: str
        """
        return self._episode_title

    @episode_title.setter
    def episode_title(self, episode_title: str):
        """Sets the episode_title of this BaseItemDto.

        Gets or sets the episode title.  # noqa: E501

        :param episode_title: The episode_title of this BaseItemDto.
        :type episode_title: str
        """

        self._episode_title = episode_title

    @property
    def etag(self) -> str:
        """Gets the etag of this BaseItemDto.

        Gets or sets the etag.  # noqa: E501

        :return: The etag of this BaseItemDto.
        :rtype: str
        """
        return self._etag

    @etag.setter
    def etag(self, etag: str):
        """Sets the etag of this BaseItemDto.

        Gets or sets the etag.  # noqa: E501

        :param etag: The etag of this BaseItemDto.
        :type etag: str
        """

        self._etag = etag

    @property
    def exposure_time(self) -> float:
        """Gets the exposure_time of this BaseItemDto.


        :return: The exposure_time of this BaseItemDto.
        :rtype: float
        """
        return self._exposure_time

    @exposure_time.setter
    def exposure_time(self, exposure_time: float):
        """Sets the exposure_time of this BaseItemDto.


        :param exposure_time: The exposure_time of this BaseItemDto.
        :type exposure_time: float
        """

        self._exposure_time = exposure_time

    @property
    def external_urls(self) -> List[ExternalUrl]:
        """Gets the external_urls of this BaseItemDto.

        Gets or sets the external urls.  # noqa: E501

        :return: The external_urls of this BaseItemDto.
        :rtype: List[ExternalUrl]
        """
        return self._external_urls

    @external_urls.setter
    def external_urls(self, external_urls: List[ExternalUrl]):
        """Sets the external_urls of this BaseItemDto.

        Gets or sets the external urls.  # noqa: E501

        :param external_urls: The external_urls of this BaseItemDto.
        :type external_urls: List[ExternalUrl]
        """

        self._external_urls = external_urls

    @property
    def extra_type(self) -> str:
        """Gets the extra_type of this BaseItemDto.


        :return: The extra_type of this BaseItemDto.
        :rtype: str
        """
        return self._extra_type

    @extra_type.setter
    def extra_type(self, extra_type: str):
        """Sets the extra_type of this BaseItemDto.


        :param extra_type: The extra_type of this BaseItemDto.
        :type extra_type: str
        """

        self._extra_type = extra_type

    @property
    def focal_length(self) -> float:
        """Gets the focal_length of this BaseItemDto.


        :return: The focal_length of this BaseItemDto.
        :rtype: float
        """
        return self._focal_length

    @focal_length.setter
    def focal_length(self, focal_length: float):
        """Sets the focal_length of this BaseItemDto.


        :param focal_length: The focal_length of this BaseItemDto.
        :type focal_length: float
        """

        self._focal_length = focal_length

    @property
    def forced_sort_name(self) -> str:
        """Gets the forced_sort_name of this BaseItemDto.


        :return: The forced_sort_name of this BaseItemDto.
        :rtype: str
        """
        return self._forced_sort_name

    @forced_sort_name.setter
    def forced_sort_name(self, forced_sort_name: str):
        """Sets the forced_sort_name of this BaseItemDto.


        :param forced_sort_name: The forced_sort_name of this BaseItemDto.
        :type forced_sort_name: str
        """

        self._forced_sort_name = forced_sort_name

    @property
    def genre_items(self) -> List[NameGuidPair]:
        """Gets the genre_items of this BaseItemDto.


        :return: The genre_items of this BaseItemDto.
        :rtype: List[NameGuidPair]
        """
        return self._genre_items

    @genre_items.setter
    def genre_items(self, genre_items: List[NameGuidPair]):
        """Sets the genre_items of this BaseItemDto.


        :param genre_items: The genre_items of this BaseItemDto.
        :type genre_items: List[NameGuidPair]
        """

        self._genre_items = genre_items

    @property
    def genres(self) -> List[str]:
        """Gets the genres of this BaseItemDto.

        Gets or sets the genres.  # noqa: E501

        :return: The genres of this BaseItemDto.
        :rtype: List[str]
        """
        return self._genres

    @genres.setter
    def genres(self, genres: List[str]):
        """Sets the genres of this BaseItemDto.

        Gets or sets the genres.  # noqa: E501

        :param genres: The genres of this BaseItemDto.
        :type genres: List[str]
        """

        self._genres = genres

    @property
    def has_subtitles(self) -> bool:
        """Gets the has_subtitles of this BaseItemDto.


        :return: The has_subtitles of this BaseItemDto.
        :rtype: bool
        """
        return self._has_subtitles

    @has_subtitles.setter
    def has_subtitles(self, has_subtitles: bool):
        """Sets the has_subtitles of this BaseItemDto.


        :param has_subtitles: The has_subtitles of this BaseItemDto.
        :type has_subtitles: bool
        """

        self._has_subtitles = has_subtitles

    @property
    def height(self) -> int:
        """Gets the height of this BaseItemDto.


        :return: The height of this BaseItemDto.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this BaseItemDto.


        :param height: The height of this BaseItemDto.
        :type height: int
        """

        self._height = height

    @property
    def id(self) -> str:
        """Gets the id of this BaseItemDto.

        Gets or sets the id.  # noqa: E501

        :return: The id of this BaseItemDto.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BaseItemDto.

        Gets or sets the id.  # noqa: E501

        :param id: The id of this BaseItemDto.
        :type id: str
        """

        self._id = id

    @property
    def image_blur_hashes(self) -> BaseItemDtoImageBlurHashes:
        """Gets the image_blur_hashes of this BaseItemDto.


        :return: The image_blur_hashes of this BaseItemDto.
        :rtype: BaseItemDtoImageBlurHashes
        """
        return self._image_blur_hashes

    @image_blur_hashes.setter
    def image_blur_hashes(self, image_blur_hashes: BaseItemDtoImageBlurHashes):
        """Sets the image_blur_hashes of this BaseItemDto.


        :param image_blur_hashes: The image_blur_hashes of this BaseItemDto.
        :type image_blur_hashes: BaseItemDtoImageBlurHashes
        """

        self._image_blur_hashes = image_blur_hashes

    @property
    def image_orientation(self) -> ImageOrientation:
        """Gets the image_orientation of this BaseItemDto.


        :return: The image_orientation of this BaseItemDto.
        :rtype: ImageOrientation
        """
        return self._image_orientation

    @image_orientation.setter
    def image_orientation(self, image_orientation: ImageOrientation):
        """Sets the image_orientation of this BaseItemDto.


        :param image_orientation: The image_orientation of this BaseItemDto.
        :type image_orientation: ImageOrientation
        """

        self._image_orientation = image_orientation

    @property
    def image_tags(self) -> Dict[str, str]:
        """Gets the image_tags of this BaseItemDto.

        Gets or sets the image tags.  # noqa: E501

        :return: The image_tags of this BaseItemDto.
        :rtype: Dict[str, str]
        """
        return self._image_tags

    @image_tags.setter
    def image_tags(self, image_tags: Dict[str, str]):
        """Sets the image_tags of this BaseItemDto.

        Gets or sets the image tags.  # noqa: E501

        :param image_tags: The image_tags of this BaseItemDto.
        :type image_tags: Dict[str, str]
        """

        self._image_tags = image_tags

    @property
    def index_number(self) -> int:
        """Gets the index_number of this BaseItemDto.

        Gets or sets the index number.  # noqa: E501

        :return: The index_number of this BaseItemDto.
        :rtype: int
        """
        return self._index_number

    @index_number.setter
    def index_number(self, index_number: int):
        """Sets the index_number of this BaseItemDto.

        Gets or sets the index number.  # noqa: E501

        :param index_number: The index_number of this BaseItemDto.
        :type index_number: int
        """

        self._index_number = index_number

    @property
    def index_number_end(self) -> int:
        """Gets the index_number_end of this BaseItemDto.

        Gets or sets the index number end.  # noqa: E501

        :return: The index_number_end of this BaseItemDto.
        :rtype: int
        """
        return self._index_number_end

    @index_number_end.setter
    def index_number_end(self, index_number_end: int):
        """Sets the index_number_end of this BaseItemDto.

        Gets or sets the index number end.  # noqa: E501

        :param index_number_end: The index_number_end of this BaseItemDto.
        :type index_number_end: int
        """

        self._index_number_end = index_number_end

    @property
    def is_folder(self) -> bool:
        """Gets the is_folder of this BaseItemDto.

        Gets or sets a value indicating whether this instance is folder.  # noqa: E501

        :return: The is_folder of this BaseItemDto.
        :rtype: bool
        """
        return self._is_folder

    @is_folder.setter
    def is_folder(self, is_folder: bool):
        """Sets the is_folder of this BaseItemDto.

        Gets or sets a value indicating whether this instance is folder.  # noqa: E501

        :param is_folder: The is_folder of this BaseItemDto.
        :type is_folder: bool
        """

        self._is_folder = is_folder

    @property
    def is_hd(self) -> bool:
        """Gets the is_hd of this BaseItemDto.

        Gets or sets a value indicating whether this instance is HD.  # noqa: E501

        :return: The is_hd of this BaseItemDto.
        :rtype: bool
        """
        return self._is_hd

    @is_hd.setter
    def is_hd(self, is_hd: bool):
        """Sets the is_hd of this BaseItemDto.

        Gets or sets a value indicating whether this instance is HD.  # noqa: E501

        :param is_hd: The is_hd of this BaseItemDto.
        :type is_hd: bool
        """

        self._is_hd = is_hd

    @property
    def is_kids(self) -> bool:
        """Gets the is_kids of this BaseItemDto.

        Gets or sets a value indicating whether this instance is kids.  # noqa: E501

        :return: The is_kids of this BaseItemDto.
        :rtype: bool
        """
        return self._is_kids

    @is_kids.setter
    def is_kids(self, is_kids: bool):
        """Sets the is_kids of this BaseItemDto.

        Gets or sets a value indicating whether this instance is kids.  # noqa: E501

        :param is_kids: The is_kids of this BaseItemDto.
        :type is_kids: bool
        """

        self._is_kids = is_kids

    @property
    def is_live(self) -> bool:
        """Gets the is_live of this BaseItemDto.

        Gets or sets a value indicating whether this instance is live.  # noqa: E501

        :return: The is_live of this BaseItemDto.
        :rtype: bool
        """
        return self._is_live

    @is_live.setter
    def is_live(self, is_live: bool):
        """Sets the is_live of this BaseItemDto.

        Gets or sets a value indicating whether this instance is live.  # noqa: E501

        :param is_live: The is_live of this BaseItemDto.
        :type is_live: bool
        """

        self._is_live = is_live

    @property
    def is_movie(self) -> bool:
        """Gets the is_movie of this BaseItemDto.

        Gets or sets a value indicating whether this instance is movie.  # noqa: E501

        :return: The is_movie of this BaseItemDto.
        :rtype: bool
        """
        return self._is_movie

    @is_movie.setter
    def is_movie(self, is_movie: bool):
        """Sets the is_movie of this BaseItemDto.

        Gets or sets a value indicating whether this instance is movie.  # noqa: E501

        :param is_movie: The is_movie of this BaseItemDto.
        :type is_movie: bool
        """

        self._is_movie = is_movie

    @property
    def is_news(self) -> bool:
        """Gets the is_news of this BaseItemDto.

        Gets or sets a value indicating whether this instance is news.  # noqa: E501

        :return: The is_news of this BaseItemDto.
        :rtype: bool
        """
        return self._is_news

    @is_news.setter
    def is_news(self, is_news: bool):
        """Sets the is_news of this BaseItemDto.

        Gets or sets a value indicating whether this instance is news.  # noqa: E501

        :param is_news: The is_news of this BaseItemDto.
        :type is_news: bool
        """

        self._is_news = is_news

    @property
    def is_place_holder(self) -> bool:
        """Gets the is_place_holder of this BaseItemDto.

        Gets or sets a value indicating whether this instance is place holder.  # noqa: E501

        :return: The is_place_holder of this BaseItemDto.
        :rtype: bool
        """
        return self._is_place_holder

    @is_place_holder.setter
    def is_place_holder(self, is_place_holder: bool):
        """Sets the is_place_holder of this BaseItemDto.

        Gets or sets a value indicating whether this instance is place holder.  # noqa: E501

        :param is_place_holder: The is_place_holder of this BaseItemDto.
        :type is_place_holder: bool
        """

        self._is_place_holder = is_place_holder

    @property
    def is_premiere(self) -> bool:
        """Gets the is_premiere of this BaseItemDto.

        Gets or sets a value indicating whether this instance is premiere.  # noqa: E501

        :return: The is_premiere of this BaseItemDto.
        :rtype: bool
        """
        return self._is_premiere

    @is_premiere.setter
    def is_premiere(self, is_premiere: bool):
        """Sets the is_premiere of this BaseItemDto.

        Gets or sets a value indicating whether this instance is premiere.  # noqa: E501

        :param is_premiere: The is_premiere of this BaseItemDto.
        :type is_premiere: bool
        """

        self._is_premiere = is_premiere

    @property
    def is_repeat(self) -> bool:
        """Gets the is_repeat of this BaseItemDto.

        Gets or sets a value indicating whether this instance is repeat.  # noqa: E501

        :return: The is_repeat of this BaseItemDto.
        :rtype: bool
        """
        return self._is_repeat

    @is_repeat.setter
    def is_repeat(self, is_repeat: bool):
        """Sets the is_repeat of this BaseItemDto.

        Gets or sets a value indicating whether this instance is repeat.  # noqa: E501

        :param is_repeat: The is_repeat of this BaseItemDto.
        :type is_repeat: bool
        """

        self._is_repeat = is_repeat

    @property
    def is_series(self) -> bool:
        """Gets the is_series of this BaseItemDto.

        Gets or sets a value indicating whether this instance is series.  # noqa: E501

        :return: The is_series of this BaseItemDto.
        :rtype: bool
        """
        return self._is_series

    @is_series.setter
    def is_series(self, is_series: bool):
        """Sets the is_series of this BaseItemDto.

        Gets or sets a value indicating whether this instance is series.  # noqa: E501

        :param is_series: The is_series of this BaseItemDto.
        :type is_series: bool
        """

        self._is_series = is_series

    @property
    def is_sports(self) -> bool:
        """Gets the is_sports of this BaseItemDto.

        Gets or sets a value indicating whether this instance is sports.  # noqa: E501

        :return: The is_sports of this BaseItemDto.
        :rtype: bool
        """
        return self._is_sports

    @is_sports.setter
    def is_sports(self, is_sports: bool):
        """Sets the is_sports of this BaseItemDto.

        Gets or sets a value indicating whether this instance is sports.  # noqa: E501

        :param is_sports: The is_sports of this BaseItemDto.
        :type is_sports: bool
        """

        self._is_sports = is_sports

    @property
    def iso_speed_rating(self) -> int:
        """Gets the iso_speed_rating of this BaseItemDto.


        :return: The iso_speed_rating of this BaseItemDto.
        :rtype: int
        """
        return self._iso_speed_rating

    @iso_speed_rating.setter
    def iso_speed_rating(self, iso_speed_rating: int):
        """Sets the iso_speed_rating of this BaseItemDto.


        :param iso_speed_rating: The iso_speed_rating of this BaseItemDto.
        :type iso_speed_rating: int
        """

        self._iso_speed_rating = iso_speed_rating

    @property
    def iso_type(self) -> IsoType:
        """Gets the iso_type of this BaseItemDto.


        :return: The iso_type of this BaseItemDto.
        :rtype: IsoType
        """
        return self._iso_type

    @iso_type.setter
    def iso_type(self, iso_type: IsoType):
        """Sets the iso_type of this BaseItemDto.


        :param iso_type: The iso_type of this BaseItemDto.
        :type iso_type: IsoType
        """

        self._iso_type = iso_type

    @property
    def latitude(self) -> float:
        """Gets the latitude of this BaseItemDto.


        :return: The latitude of this BaseItemDto.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this BaseItemDto.


        :param latitude: The latitude of this BaseItemDto.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def local_trailer_count(self) -> int:
        """Gets the local_trailer_count of this BaseItemDto.

        Gets or sets the local trailer count.  # noqa: E501

        :return: The local_trailer_count of this BaseItemDto.
        :rtype: int
        """
        return self._local_trailer_count

    @local_trailer_count.setter
    def local_trailer_count(self, local_trailer_count: int):
        """Sets the local_trailer_count of this BaseItemDto.

        Gets or sets the local trailer count.  # noqa: E501

        :param local_trailer_count: The local_trailer_count of this BaseItemDto.
        :type local_trailer_count: int
        """

        self._local_trailer_count = local_trailer_count

    @property
    def location_type(self) -> LocationType:
        """Gets the location_type of this BaseItemDto.


        :return: The location_type of this BaseItemDto.
        :rtype: LocationType
        """
        return self._location_type

    @location_type.setter
    def location_type(self, location_type: LocationType):
        """Sets the location_type of this BaseItemDto.


        :param location_type: The location_type of this BaseItemDto.
        :type location_type: LocationType
        """

        self._location_type = location_type

    @property
    def lock_data(self) -> bool:
        """Gets the lock_data of this BaseItemDto.

        Gets or sets a value indicating whether [enable internet providers].  # noqa: E501

        :return: The lock_data of this BaseItemDto.
        :rtype: bool
        """
        return self._lock_data

    @lock_data.setter
    def lock_data(self, lock_data: bool):
        """Sets the lock_data of this BaseItemDto.

        Gets or sets a value indicating whether [enable internet providers].  # noqa: E501

        :param lock_data: The lock_data of this BaseItemDto.
        :type lock_data: bool
        """

        self._lock_data = lock_data

    @property
    def locked_fields(self) -> List[MetadataField]:
        """Gets the locked_fields of this BaseItemDto.

        Gets or sets the locked fields.  # noqa: E501

        :return: The locked_fields of this BaseItemDto.
        :rtype: List[MetadataField]
        """
        return self._locked_fields

    @locked_fields.setter
    def locked_fields(self, locked_fields: List[MetadataField]):
        """Sets the locked_fields of this BaseItemDto.

        Gets or sets the locked fields.  # noqa: E501

        :param locked_fields: The locked_fields of this BaseItemDto.
        :type locked_fields: List[MetadataField]
        """

        self._locked_fields = locked_fields

    @property
    def longitude(self) -> float:
        """Gets the longitude of this BaseItemDto.


        :return: The longitude of this BaseItemDto.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this BaseItemDto.


        :param longitude: The longitude of this BaseItemDto.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def media_source_count(self) -> int:
        """Gets the media_source_count of this BaseItemDto.


        :return: The media_source_count of this BaseItemDto.
        :rtype: int
        """
        return self._media_source_count

    @media_source_count.setter
    def media_source_count(self, media_source_count: int):
        """Sets the media_source_count of this BaseItemDto.


        :param media_source_count: The media_source_count of this BaseItemDto.
        :type media_source_count: int
        """

        self._media_source_count = media_source_count

    @property
    def media_sources(self) -> List[MediaSourceInfo]:
        """Gets the media_sources of this BaseItemDto.

        Gets or sets the media versions.  # noqa: E501

        :return: The media_sources of this BaseItemDto.
        :rtype: List[MediaSourceInfo]
        """
        return self._media_sources

    @media_sources.setter
    def media_sources(self, media_sources: List[MediaSourceInfo]):
        """Sets the media_sources of this BaseItemDto.

        Gets or sets the media versions.  # noqa: E501

        :param media_sources: The media_sources of this BaseItemDto.
        :type media_sources: List[MediaSourceInfo]
        """

        self._media_sources = media_sources

    @property
    def media_streams(self) -> List[MediaStream]:
        """Gets the media_streams of this BaseItemDto.

        Gets or sets the media streams.  # noqa: E501

        :return: The media_streams of this BaseItemDto.
        :rtype: List[MediaStream]
        """
        return self._media_streams

    @media_streams.setter
    def media_streams(self, media_streams: List[MediaStream]):
        """Sets the media_streams of this BaseItemDto.

        Gets or sets the media streams.  # noqa: E501

        :param media_streams: The media_streams of this BaseItemDto.
        :type media_streams: List[MediaStream]
        """

        self._media_streams = media_streams

    @property
    def media_type(self) -> str:
        """Gets the media_type of this BaseItemDto.

        Gets or sets the type of the media.  # noqa: E501

        :return: The media_type of this BaseItemDto.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this BaseItemDto.

        Gets or sets the type of the media.  # noqa: E501

        :param media_type: The media_type of this BaseItemDto.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def movie_count(self) -> int:
        """Gets the movie_count of this BaseItemDto.

        Gets or sets the movie count.  # noqa: E501

        :return: The movie_count of this BaseItemDto.
        :rtype: int
        """
        return self._movie_count

    @movie_count.setter
    def movie_count(self, movie_count: int):
        """Sets the movie_count of this BaseItemDto.

        Gets or sets the movie count.  # noqa: E501

        :param movie_count: The movie_count of this BaseItemDto.
        :type movie_count: int
        """

        self._movie_count = movie_count

    @property
    def music_video_count(self) -> int:
        """Gets the music_video_count of this BaseItemDto.

        Gets or sets the music video count.  # noqa: E501

        :return: The music_video_count of this BaseItemDto.
        :rtype: int
        """
        return self._music_video_count

    @music_video_count.setter
    def music_video_count(self, music_video_count: int):
        """Sets the music_video_count of this BaseItemDto.

        Gets or sets the music video count.  # noqa: E501

        :param music_video_count: The music_video_count of this BaseItemDto.
        :type music_video_count: int
        """

        self._music_video_count = music_video_count

    @property
    def name(self) -> str:
        """Gets the name of this BaseItemDto.

        Gets or sets the name.  # noqa: E501

        :return: The name of this BaseItemDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BaseItemDto.

        Gets or sets the name.  # noqa: E501

        :param name: The name of this BaseItemDto.
        :type name: str
        """

        self._name = name

    @property
    def number(self) -> str:
        """Gets the number of this BaseItemDto.

        Gets or sets the number.  # noqa: E501

        :return: The number of this BaseItemDto.
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number: str):
        """Sets the number of this BaseItemDto.

        Gets or sets the number.  # noqa: E501

        :param number: The number of this BaseItemDto.
        :type number: str
        """

        self._number = number

    @property
    def official_rating(self) -> str:
        """Gets the official_rating of this BaseItemDto.

        Gets or sets the official rating.  # noqa: E501

        :return: The official_rating of this BaseItemDto.
        :rtype: str
        """
        return self._official_rating

    @official_rating.setter
    def official_rating(self, official_rating: str):
        """Sets the official_rating of this BaseItemDto.

        Gets or sets the official rating.  # noqa: E501

        :param official_rating: The official_rating of this BaseItemDto.
        :type official_rating: str
        """

        self._official_rating = official_rating

    @property
    def original_title(self) -> str:
        """Gets the original_title of this BaseItemDto.


        :return: The original_title of this BaseItemDto.
        :rtype: str
        """
        return self._original_title

    @original_title.setter
    def original_title(self, original_title: str):
        """Sets the original_title of this BaseItemDto.


        :param original_title: The original_title of this BaseItemDto.
        :type original_title: str
        """

        self._original_title = original_title

    @property
    def overview(self) -> str:
        """Gets the overview of this BaseItemDto.

        Gets or sets the overview.  # noqa: E501

        :return: The overview of this BaseItemDto.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview: str):
        """Sets the overview of this BaseItemDto.

        Gets or sets the overview.  # noqa: E501

        :param overview: The overview of this BaseItemDto.
        :type overview: str
        """

        self._overview = overview

    @property
    def parent_art_image_tag(self) -> str:
        """Gets the parent_art_image_tag of this BaseItemDto.

        Gets or sets the parent art image tag.  # noqa: E501

        :return: The parent_art_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._parent_art_image_tag

    @parent_art_image_tag.setter
    def parent_art_image_tag(self, parent_art_image_tag: str):
        """Sets the parent_art_image_tag of this BaseItemDto.

        Gets or sets the parent art image tag.  # noqa: E501

        :param parent_art_image_tag: The parent_art_image_tag of this BaseItemDto.
        :type parent_art_image_tag: str
        """

        self._parent_art_image_tag = parent_art_image_tag

    @property
    def parent_art_item_id(self) -> str:
        """Gets the parent_art_item_id of this BaseItemDto.

        If the item does not have a art, this will hold the Id of the Parent that has one.  # noqa: E501

        :return: The parent_art_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_art_item_id

    @parent_art_item_id.setter
    def parent_art_item_id(self, parent_art_item_id: str):
        """Sets the parent_art_item_id of this BaseItemDto.

        If the item does not have a art, this will hold the Id of the Parent that has one.  # noqa: E501

        :param parent_art_item_id: The parent_art_item_id of this BaseItemDto.
        :type parent_art_item_id: str
        """

        self._parent_art_item_id = parent_art_item_id

    @property
    def parent_backdrop_image_tags(self) -> List[str]:
        """Gets the parent_backdrop_image_tags of this BaseItemDto.

        Gets or sets the parent backdrop image tags.  # noqa: E501

        :return: The parent_backdrop_image_tags of this BaseItemDto.
        :rtype: List[str]
        """
        return self._parent_backdrop_image_tags

    @parent_backdrop_image_tags.setter
    def parent_backdrop_image_tags(self, parent_backdrop_image_tags: List[str]):
        """Sets the parent_backdrop_image_tags of this BaseItemDto.

        Gets or sets the parent backdrop image tags.  # noqa: E501

        :param parent_backdrop_image_tags: The parent_backdrop_image_tags of this BaseItemDto.
        :type parent_backdrop_image_tags: List[str]
        """

        self._parent_backdrop_image_tags = parent_backdrop_image_tags

    @property
    def parent_backdrop_item_id(self) -> str:
        """Gets the parent_backdrop_item_id of this BaseItemDto.

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.  # noqa: E501

        :return: The parent_backdrop_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_backdrop_item_id

    @parent_backdrop_item_id.setter
    def parent_backdrop_item_id(self, parent_backdrop_item_id: str):
        """Sets the parent_backdrop_item_id of this BaseItemDto.

        If the item does not have any backdrops, this will hold the Id of the Parent that has one.  # noqa: E501

        :param parent_backdrop_item_id: The parent_backdrop_item_id of this BaseItemDto.
        :type parent_backdrop_item_id: str
        """

        self._parent_backdrop_item_id = parent_backdrop_item_id

    @property
    def parent_id(self) -> str:
        """Gets the parent_id of this BaseItemDto.

        Gets or sets the parent id.  # noqa: E501

        :return: The parent_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id: str):
        """Sets the parent_id of this BaseItemDto.

        Gets or sets the parent id.  # noqa: E501

        :param parent_id: The parent_id of this BaseItemDto.
        :type parent_id: str
        """

        self._parent_id = parent_id

    @property
    def parent_index_number(self) -> int:
        """Gets the parent_index_number of this BaseItemDto.

        Gets or sets the parent index number.  # noqa: E501

        :return: The parent_index_number of this BaseItemDto.
        :rtype: int
        """
        return self._parent_index_number

    @parent_index_number.setter
    def parent_index_number(self, parent_index_number: int):
        """Sets the parent_index_number of this BaseItemDto.

        Gets or sets the parent index number.  # noqa: E501

        :param parent_index_number: The parent_index_number of this BaseItemDto.
        :type parent_index_number: int
        """

        self._parent_index_number = parent_index_number

    @property
    def parent_logo_image_tag(self) -> str:
        """Gets the parent_logo_image_tag of this BaseItemDto.

        Gets or sets the parent logo image tag.  # noqa: E501

        :return: The parent_logo_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._parent_logo_image_tag

    @parent_logo_image_tag.setter
    def parent_logo_image_tag(self, parent_logo_image_tag: str):
        """Sets the parent_logo_image_tag of this BaseItemDto.

        Gets or sets the parent logo image tag.  # noqa: E501

        :param parent_logo_image_tag: The parent_logo_image_tag of this BaseItemDto.
        :type parent_logo_image_tag: str
        """

        self._parent_logo_image_tag = parent_logo_image_tag

    @property
    def parent_logo_item_id(self) -> str:
        """Gets the parent_logo_item_id of this BaseItemDto.

        If the item does not have a logo, this will hold the Id of the Parent that has one.  # noqa: E501

        :return: The parent_logo_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_logo_item_id

    @parent_logo_item_id.setter
    def parent_logo_item_id(self, parent_logo_item_id: str):
        """Sets the parent_logo_item_id of this BaseItemDto.

        If the item does not have a logo, this will hold the Id of the Parent that has one.  # noqa: E501

        :param parent_logo_item_id: The parent_logo_item_id of this BaseItemDto.
        :type parent_logo_item_id: str
        """

        self._parent_logo_item_id = parent_logo_item_id

    @property
    def parent_primary_image_item_id(self) -> str:
        """Gets the parent_primary_image_item_id of this BaseItemDto.

        Gets or sets the parent primary image item identifier.  # noqa: E501

        :return: The parent_primary_image_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_primary_image_item_id

    @parent_primary_image_item_id.setter
    def parent_primary_image_item_id(self, parent_primary_image_item_id: str):
        """Sets the parent_primary_image_item_id of this BaseItemDto.

        Gets or sets the parent primary image item identifier.  # noqa: E501

        :param parent_primary_image_item_id: The parent_primary_image_item_id of this BaseItemDto.
        :type parent_primary_image_item_id: str
        """

        self._parent_primary_image_item_id = parent_primary_image_item_id

    @property
    def parent_primary_image_tag(self) -> str:
        """Gets the parent_primary_image_tag of this BaseItemDto.

        Gets or sets the parent primary image tag.  # noqa: E501

        :return: The parent_primary_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._parent_primary_image_tag

    @parent_primary_image_tag.setter
    def parent_primary_image_tag(self, parent_primary_image_tag: str):
        """Sets the parent_primary_image_tag of this BaseItemDto.

        Gets or sets the parent primary image tag.  # noqa: E501

        :param parent_primary_image_tag: The parent_primary_image_tag of this BaseItemDto.
        :type parent_primary_image_tag: str
        """

        self._parent_primary_image_tag = parent_primary_image_tag

    @property
    def parent_thumb_image_tag(self) -> str:
        """Gets the parent_thumb_image_tag of this BaseItemDto.

        Gets or sets the parent thumb image tag.  # noqa: E501

        :return: The parent_thumb_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._parent_thumb_image_tag

    @parent_thumb_image_tag.setter
    def parent_thumb_image_tag(self, parent_thumb_image_tag: str):
        """Sets the parent_thumb_image_tag of this BaseItemDto.

        Gets or sets the parent thumb image tag.  # noqa: E501

        :param parent_thumb_image_tag: The parent_thumb_image_tag of this BaseItemDto.
        :type parent_thumb_image_tag: str
        """

        self._parent_thumb_image_tag = parent_thumb_image_tag

    @property
    def parent_thumb_item_id(self) -> str:
        """Gets the parent_thumb_item_id of this BaseItemDto.

        Gets or sets the parent thumb item id.  # noqa: E501

        :return: The parent_thumb_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._parent_thumb_item_id

    @parent_thumb_item_id.setter
    def parent_thumb_item_id(self, parent_thumb_item_id: str):
        """Sets the parent_thumb_item_id of this BaseItemDto.

        Gets or sets the parent thumb item id.  # noqa: E501

        :param parent_thumb_item_id: The parent_thumb_item_id of this BaseItemDto.
        :type parent_thumb_item_id: str
        """

        self._parent_thumb_item_id = parent_thumb_item_id

    @property
    def part_count(self) -> int:
        """Gets the part_count of this BaseItemDto.

        Gets or sets the part count.  # noqa: E501

        :return: The part_count of this BaseItemDto.
        :rtype: int
        """
        return self._part_count

    @part_count.setter
    def part_count(self, part_count: int):
        """Sets the part_count of this BaseItemDto.

        Gets or sets the part count.  # noqa: E501

        :param part_count: The part_count of this BaseItemDto.
        :type part_count: int
        """

        self._part_count = part_count

    @property
    def path(self) -> str:
        """Gets the path of this BaseItemDto.

        Gets or sets the path.  # noqa: E501

        :return: The path of this BaseItemDto.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this BaseItemDto.

        Gets or sets the path.  # noqa: E501

        :param path: The path of this BaseItemDto.
        :type path: str
        """

        self._path = path

    @property
    def people(self) -> List[BaseItemPerson]:
        """Gets the people of this BaseItemDto.

        Gets or sets the people.  # noqa: E501

        :return: The people of this BaseItemDto.
        :rtype: List[BaseItemPerson]
        """
        return self._people

    @people.setter
    def people(self, people: List[BaseItemPerson]):
        """Sets the people of this BaseItemDto.

        Gets or sets the people.  # noqa: E501

        :param people: The people of this BaseItemDto.
        :type people: List[BaseItemPerson]
        """

        self._people = people

    @property
    def play_access(self) -> PlayAccess:
        """Gets the play_access of this BaseItemDto.


        :return: The play_access of this BaseItemDto.
        :rtype: PlayAccess
        """
        return self._play_access

    @play_access.setter
    def play_access(self, play_access: PlayAccess):
        """Sets the play_access of this BaseItemDto.


        :param play_access: The play_access of this BaseItemDto.
        :type play_access: PlayAccess
        """

        self._play_access = play_access

    @property
    def playlist_item_id(self) -> str:
        """Gets the playlist_item_id of this BaseItemDto.

        Gets or sets the playlist item identifier.  # noqa: E501

        :return: The playlist_item_id of this BaseItemDto.
        :rtype: str
        """
        return self._playlist_item_id

    @playlist_item_id.setter
    def playlist_item_id(self, playlist_item_id: str):
        """Sets the playlist_item_id of this BaseItemDto.

        Gets or sets the playlist item identifier.  # noqa: E501

        :param playlist_item_id: The playlist_item_id of this BaseItemDto.
        :type playlist_item_id: str
        """

        self._playlist_item_id = playlist_item_id

    @property
    def preferred_metadata_country_code(self) -> str:
        """Gets the preferred_metadata_country_code of this BaseItemDto.


        :return: The preferred_metadata_country_code of this BaseItemDto.
        :rtype: str
        """
        return self._preferred_metadata_country_code

    @preferred_metadata_country_code.setter
    def preferred_metadata_country_code(self, preferred_metadata_country_code: str):
        """Sets the preferred_metadata_country_code of this BaseItemDto.


        :param preferred_metadata_country_code: The preferred_metadata_country_code of this BaseItemDto.
        :type preferred_metadata_country_code: str
        """

        self._preferred_metadata_country_code = preferred_metadata_country_code

    @property
    def preferred_metadata_language(self) -> str:
        """Gets the preferred_metadata_language of this BaseItemDto.


        :return: The preferred_metadata_language of this BaseItemDto.
        :rtype: str
        """
        return self._preferred_metadata_language

    @preferred_metadata_language.setter
    def preferred_metadata_language(self, preferred_metadata_language: str):
        """Sets the preferred_metadata_language of this BaseItemDto.


        :param preferred_metadata_language: The preferred_metadata_language of this BaseItemDto.
        :type preferred_metadata_language: str
        """

        self._preferred_metadata_language = preferred_metadata_language

    @property
    def premiere_date(self) -> datetime:
        """Gets the premiere_date of this BaseItemDto.

        Gets or sets the premiere date.  # noqa: E501

        :return: The premiere_date of this BaseItemDto.
        :rtype: datetime
        """
        return self._premiere_date

    @premiere_date.setter
    def premiere_date(self, premiere_date: datetime):
        """Sets the premiere_date of this BaseItemDto.

        Gets or sets the premiere date.  # noqa: E501

        :param premiere_date: The premiere_date of this BaseItemDto.
        :type premiere_date: datetime
        """

        self._premiere_date = premiere_date

    @property
    def primary_image_aspect_ratio(self) -> float:
        """Gets the primary_image_aspect_ratio of this BaseItemDto.

        Gets or sets the primary image aspect ratio, after image enhancements.  # noqa: E501

        :return: The primary_image_aspect_ratio of this BaseItemDto.
        :rtype: float
        """
        return self._primary_image_aspect_ratio

    @primary_image_aspect_ratio.setter
    def primary_image_aspect_ratio(self, primary_image_aspect_ratio: float):
        """Sets the primary_image_aspect_ratio of this BaseItemDto.

        Gets or sets the primary image aspect ratio, after image enhancements.  # noqa: E501

        :param primary_image_aspect_ratio: The primary_image_aspect_ratio of this BaseItemDto.
        :type primary_image_aspect_ratio: float
        """

        self._primary_image_aspect_ratio = primary_image_aspect_ratio

    @property
    def production_locations(self) -> List[str]:
        """Gets the production_locations of this BaseItemDto.


        :return: The production_locations of this BaseItemDto.
        :rtype: List[str]
        """
        return self._production_locations

    @production_locations.setter
    def production_locations(self, production_locations: List[str]):
        """Sets the production_locations of this BaseItemDto.


        :param production_locations: The production_locations of this BaseItemDto.
        :type production_locations: List[str]
        """

        self._production_locations = production_locations

    @property
    def production_year(self) -> int:
        """Gets the production_year of this BaseItemDto.

        Gets or sets the production year.  # noqa: E501

        :return: The production_year of this BaseItemDto.
        :rtype: int
        """
        return self._production_year

    @production_year.setter
    def production_year(self, production_year: int):
        """Sets the production_year of this BaseItemDto.

        Gets or sets the production year.  # noqa: E501

        :param production_year: The production_year of this BaseItemDto.
        :type production_year: int
        """

        self._production_year = production_year

    @property
    def program_count(self) -> int:
        """Gets the program_count of this BaseItemDto.


        :return: The program_count of this BaseItemDto.
        :rtype: int
        """
        return self._program_count

    @program_count.setter
    def program_count(self, program_count: int):
        """Sets the program_count of this BaseItemDto.


        :param program_count: The program_count of this BaseItemDto.
        :type program_count: int
        """

        self._program_count = program_count

    @property
    def program_id(self) -> str:
        """Gets the program_id of this BaseItemDto.

        Gets or sets the program identifier.  # noqa: E501

        :return: The program_id of this BaseItemDto.
        :rtype: str
        """
        return self._program_id

    @program_id.setter
    def program_id(self, program_id: str):
        """Sets the program_id of this BaseItemDto.

        Gets or sets the program identifier.  # noqa: E501

        :param program_id: The program_id of this BaseItemDto.
        :type program_id: str
        """

        self._program_id = program_id

    @property
    def provider_ids(self) -> Dict[str, str]:
        """Gets the provider_ids of this BaseItemDto.

        Gets or sets the provider ids.  # noqa: E501

        :return: The provider_ids of this BaseItemDto.
        :rtype: Dict[str, str]
        """
        return self._provider_ids

    @provider_ids.setter
    def provider_ids(self, provider_ids: Dict[str, str]):
        """Sets the provider_ids of this BaseItemDto.

        Gets or sets the provider ids.  # noqa: E501

        :param provider_ids: The provider_ids of this BaseItemDto.
        :type provider_ids: Dict[str, str]
        """

        self._provider_ids = provider_ids

    @property
    def recursive_item_count(self) -> int:
        """Gets the recursive_item_count of this BaseItemDto.

        Gets or sets the recursive item count.  # noqa: E501

        :return: The recursive_item_count of this BaseItemDto.
        :rtype: int
        """
        return self._recursive_item_count

    @recursive_item_count.setter
    def recursive_item_count(self, recursive_item_count: int):
        """Sets the recursive_item_count of this BaseItemDto.

        Gets or sets the recursive item count.  # noqa: E501

        :param recursive_item_count: The recursive_item_count of this BaseItemDto.
        :type recursive_item_count: int
        """

        self._recursive_item_count = recursive_item_count

    @property
    def remote_trailers(self) -> List[MediaUrl]:
        """Gets the remote_trailers of this BaseItemDto.

        Gets or sets the trailer urls.  # noqa: E501

        :return: The remote_trailers of this BaseItemDto.
        :rtype: List[MediaUrl]
        """
        return self._remote_trailers

    @remote_trailers.setter
    def remote_trailers(self, remote_trailers: List[MediaUrl]):
        """Sets the remote_trailers of this BaseItemDto.

        Gets or sets the trailer urls.  # noqa: E501

        :param remote_trailers: The remote_trailers of this BaseItemDto.
        :type remote_trailers: List[MediaUrl]
        """

        self._remote_trailers = remote_trailers

    @property
    def run_time_ticks(self) -> int:
        """Gets the run_time_ticks of this BaseItemDto.

        Gets or sets the run time ticks.  # noqa: E501

        :return: The run_time_ticks of this BaseItemDto.
        :rtype: int
        """
        return self._run_time_ticks

    @run_time_ticks.setter
    def run_time_ticks(self, run_time_ticks: int):
        """Sets the run_time_ticks of this BaseItemDto.

        Gets or sets the run time ticks.  # noqa: E501

        :param run_time_ticks: The run_time_ticks of this BaseItemDto.
        :type run_time_ticks: int
        """

        self._run_time_ticks = run_time_ticks

    @property
    def screenshot_image_tags(self) -> List[str]:
        """Gets the screenshot_image_tags of this BaseItemDto.

        Gets or sets the screenshot image tags.  # noqa: E501

        :return: The screenshot_image_tags of this BaseItemDto.
        :rtype: List[str]
        """
        return self._screenshot_image_tags

    @screenshot_image_tags.setter
    def screenshot_image_tags(self, screenshot_image_tags: List[str]):
        """Sets the screenshot_image_tags of this BaseItemDto.

        Gets or sets the screenshot image tags.  # noqa: E501

        :param screenshot_image_tags: The screenshot_image_tags of this BaseItemDto.
        :type screenshot_image_tags: List[str]
        """

        self._screenshot_image_tags = screenshot_image_tags

    @property
    def season_id(self) -> str:
        """Gets the season_id of this BaseItemDto.

        Gets or sets the season identifier.  # noqa: E501

        :return: The season_id of this BaseItemDto.
        :rtype: str
        """
        return self._season_id

    @season_id.setter
    def season_id(self, season_id: str):
        """Sets the season_id of this BaseItemDto.

        Gets or sets the season identifier.  # noqa: E501

        :param season_id: The season_id of this BaseItemDto.
        :type season_id: str
        """

        self._season_id = season_id

    @property
    def season_name(self) -> str:
        """Gets the season_name of this BaseItemDto.

        Gets or sets the name of the season.  # noqa: E501

        :return: The season_name of this BaseItemDto.
        :rtype: str
        """
        return self._season_name

    @season_name.setter
    def season_name(self, season_name: str):
        """Sets the season_name of this BaseItemDto.

        Gets or sets the name of the season.  # noqa: E501

        :param season_name: The season_name of this BaseItemDto.
        :type season_name: str
        """

        self._season_name = season_name

    @property
    def series_count(self) -> int:
        """Gets the series_count of this BaseItemDto.

        Gets or sets the series count.  # noqa: E501

        :return: The series_count of this BaseItemDto.
        :rtype: int
        """
        return self._series_count

    @series_count.setter
    def series_count(self, series_count: int):
        """Sets the series_count of this BaseItemDto.

        Gets or sets the series count.  # noqa: E501

        :param series_count: The series_count of this BaseItemDto.
        :type series_count: int
        """

        self._series_count = series_count

    @property
    def series_id(self) -> str:
        """Gets the series_id of this BaseItemDto.

        Gets or sets the series id.  # noqa: E501

        :return: The series_id of this BaseItemDto.
        :rtype: str
        """
        return self._series_id

    @series_id.setter
    def series_id(self, series_id: str):
        """Sets the series_id of this BaseItemDto.

        Gets or sets the series id.  # noqa: E501

        :param series_id: The series_id of this BaseItemDto.
        :type series_id: str
        """

        self._series_id = series_id

    @property
    def series_name(self) -> str:
        """Gets the series_name of this BaseItemDto.

        Gets or sets the name of the series.  # noqa: E501

        :return: The series_name of this BaseItemDto.
        :rtype: str
        """
        return self._series_name

    @series_name.setter
    def series_name(self, series_name: str):
        """Sets the series_name of this BaseItemDto.

        Gets or sets the name of the series.  # noqa: E501

        :param series_name: The series_name of this BaseItemDto.
        :type series_name: str
        """

        self._series_name = series_name

    @property
    def series_primary_image_tag(self) -> str:
        """Gets the series_primary_image_tag of this BaseItemDto.

        Gets or sets the series primary image tag.  # noqa: E501

        :return: The series_primary_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._series_primary_image_tag

    @series_primary_image_tag.setter
    def series_primary_image_tag(self, series_primary_image_tag: str):
        """Sets the series_primary_image_tag of this BaseItemDto.

        Gets or sets the series primary image tag.  # noqa: E501

        :param series_primary_image_tag: The series_primary_image_tag of this BaseItemDto.
        :type series_primary_image_tag: str
        """

        self._series_primary_image_tag = series_primary_image_tag

    @property
    def series_studio(self) -> str:
        """Gets the series_studio of this BaseItemDto.

        Gets or sets the series studio.  # noqa: E501

        :return: The series_studio of this BaseItemDto.
        :rtype: str
        """
        return self._series_studio

    @series_studio.setter
    def series_studio(self, series_studio: str):
        """Sets the series_studio of this BaseItemDto.

        Gets or sets the series studio.  # noqa: E501

        :param series_studio: The series_studio of this BaseItemDto.
        :type series_studio: str
        """

        self._series_studio = series_studio

    @property
    def series_thumb_image_tag(self) -> str:
        """Gets the series_thumb_image_tag of this BaseItemDto.

        Gets or sets the series thumb image tag.  # noqa: E501

        :return: The series_thumb_image_tag of this BaseItemDto.
        :rtype: str
        """
        return self._series_thumb_image_tag

    @series_thumb_image_tag.setter
    def series_thumb_image_tag(self, series_thumb_image_tag: str):
        """Sets the series_thumb_image_tag of this BaseItemDto.

        Gets or sets the series thumb image tag.  # noqa: E501

        :param series_thumb_image_tag: The series_thumb_image_tag of this BaseItemDto.
        :type series_thumb_image_tag: str
        """

        self._series_thumb_image_tag = series_thumb_image_tag

    @property
    def series_timer_id(self) -> str:
        """Gets the series_timer_id of this BaseItemDto.

        Gets or sets the series timer identifier.  # noqa: E501

        :return: The series_timer_id of this BaseItemDto.
        :rtype: str
        """
        return self._series_timer_id

    @series_timer_id.setter
    def series_timer_id(self, series_timer_id: str):
        """Sets the series_timer_id of this BaseItemDto.

        Gets or sets the series timer identifier.  # noqa: E501

        :param series_timer_id: The series_timer_id of this BaseItemDto.
        :type series_timer_id: str
        """

        self._series_timer_id = series_timer_id

    @property
    def server_id(self) -> str:
        """Gets the server_id of this BaseItemDto.

        Gets or sets the server identifier.  # noqa: E501

        :return: The server_id of this BaseItemDto.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id: str):
        """Sets the server_id of this BaseItemDto.

        Gets or sets the server identifier.  # noqa: E501

        :param server_id: The server_id of this BaseItemDto.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def shutter_speed(self) -> float:
        """Gets the shutter_speed of this BaseItemDto.


        :return: The shutter_speed of this BaseItemDto.
        :rtype: float
        """
        return self._shutter_speed

    @shutter_speed.setter
    def shutter_speed(self, shutter_speed: float):
        """Sets the shutter_speed of this BaseItemDto.


        :param shutter_speed: The shutter_speed of this BaseItemDto.
        :type shutter_speed: float
        """

        self._shutter_speed = shutter_speed

    @property
    def software(self) -> str:
        """Gets the software of this BaseItemDto.


        :return: The software of this BaseItemDto.
        :rtype: str
        """
        return self._software

    @software.setter
    def software(self, software: str):
        """Sets the software of this BaseItemDto.


        :param software: The software of this BaseItemDto.
        :type software: str
        """

        self._software = software

    @property
    def song_count(self) -> int:
        """Gets the song_count of this BaseItemDto.

        Gets or sets the song count.  # noqa: E501

        :return: The song_count of this BaseItemDto.
        :rtype: int
        """
        return self._song_count

    @song_count.setter
    def song_count(self, song_count: int):
        """Sets the song_count of this BaseItemDto.

        Gets or sets the song count.  # noqa: E501

        :param song_count: The song_count of this BaseItemDto.
        :type song_count: int
        """

        self._song_count = song_count

    @property
    def sort_name(self) -> str:
        """Gets the sort_name of this BaseItemDto.

        Gets or sets the name of the sort.  # noqa: E501

        :return: The sort_name of this BaseItemDto.
        :rtype: str
        """
        return self._sort_name

    @sort_name.setter
    def sort_name(self, sort_name: str):
        """Sets the sort_name of this BaseItemDto.

        Gets or sets the name of the sort.  # noqa: E501

        :param sort_name: The sort_name of this BaseItemDto.
        :type sort_name: str
        """

        self._sort_name = sort_name

    @property
    def source_type(self) -> str:
        """Gets the source_type of this BaseItemDto.

        Gets or sets the type of the source.  # noqa: E501

        :return: The source_type of this BaseItemDto.
        :rtype: str
        """
        return self._source_type

    @source_type.setter
    def source_type(self, source_type: str):
        """Sets the source_type of this BaseItemDto.

        Gets or sets the type of the source.  # noqa: E501

        :param source_type: The source_type of this BaseItemDto.
        :type source_type: str
        """

        self._source_type = source_type

    @property
    def special_feature_count(self) -> int:
        """Gets the special_feature_count of this BaseItemDto.

        Gets or sets the special feature count.  # noqa: E501

        :return: The special_feature_count of this BaseItemDto.
        :rtype: int
        """
        return self._special_feature_count

    @special_feature_count.setter
    def special_feature_count(self, special_feature_count: int):
        """Sets the special_feature_count of this BaseItemDto.

        Gets or sets the special feature count.  # noqa: E501

        :param special_feature_count: The special_feature_count of this BaseItemDto.
        :type special_feature_count: int
        """

        self._special_feature_count = special_feature_count

    @property
    def start_date(self) -> datetime:
        """Gets the start_date of this BaseItemDto.

        The start date of the recording, in UTC.  # noqa: E501

        :return: The start_date of this BaseItemDto.
        :rtype: datetime
        """
        return self._start_date

    @start_date.setter
    def start_date(self, start_date: datetime):
        """Sets the start_date of this BaseItemDto.

        The start date of the recording, in UTC.  # noqa: E501

        :param start_date: The start_date of this BaseItemDto.
        :type start_date: datetime
        """

        self._start_date = start_date

    @property
    def status(self) -> str:
        """Gets the status of this BaseItemDto.

        Gets or sets the status.  # noqa: E501

        :return: The status of this BaseItemDto.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this BaseItemDto.

        Gets or sets the status.  # noqa: E501

        :param status: The status of this BaseItemDto.
        :type status: str
        """

        self._status = status

    @property
    def studios(self) -> List[NameGuidPair]:
        """Gets the studios of this BaseItemDto.

        Gets or sets the studios.  # noqa: E501

        :return: The studios of this BaseItemDto.
        :rtype: List[NameGuidPair]
        """
        return self._studios

    @studios.setter
    def studios(self, studios: List[NameGuidPair]):
        """Sets the studios of this BaseItemDto.

        Gets or sets the studios.  # noqa: E501

        :param studios: The studios of this BaseItemDto.
        :type studios: List[NameGuidPair]
        """

        self._studios = studios

    @property
    def supports_sync(self) -> bool:
        """Gets the supports_sync of this BaseItemDto.

        Gets or sets a value indicating whether [supports synchronize].  # noqa: E501

        :return: The supports_sync of this BaseItemDto.
        :rtype: bool
        """
        return self._supports_sync

    @supports_sync.setter
    def supports_sync(self, supports_sync: bool):
        """Sets the supports_sync of this BaseItemDto.

        Gets or sets a value indicating whether [supports synchronize].  # noqa: E501

        :param supports_sync: The supports_sync of this BaseItemDto.
        :type supports_sync: bool
        """

        self._supports_sync = supports_sync

    @property
    def taglines(self) -> List[str]:
        """Gets the taglines of this BaseItemDto.

        Gets or sets the taglines.  # noqa: E501

        :return: The taglines of this BaseItemDto.
        :rtype: List[str]
        """
        return self._taglines

    @taglines.setter
    def taglines(self, taglines: List[str]):
        """Sets the taglines of this BaseItemDto.

        Gets or sets the taglines.  # noqa: E501

        :param taglines: The taglines of this BaseItemDto.
        :type taglines: List[str]
        """

        self._taglines = taglines

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this BaseItemDto.

        Gets or sets the tags.  # noqa: E501

        :return: The tags of this BaseItemDto.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this BaseItemDto.

        Gets or sets the tags.  # noqa: E501

        :param tags: The tags of this BaseItemDto.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def timer_id(self) -> str:
        """Gets the timer_id of this BaseItemDto.

        Gets or sets the timer identifier.  # noqa: E501

        :return: The timer_id of this BaseItemDto.
        :rtype: str
        """
        return self._timer_id

    @timer_id.setter
    def timer_id(self, timer_id: str):
        """Sets the timer_id of this BaseItemDto.

        Gets or sets the timer identifier.  # noqa: E501

        :param timer_id: The timer_id of this BaseItemDto.
        :type timer_id: str
        """

        self._timer_id = timer_id

    @property
    def trailer_count(self) -> int:
        """Gets the trailer_count of this BaseItemDto.

        Gets or sets the trailer count.  # noqa: E501

        :return: The trailer_count of this BaseItemDto.
        :rtype: int
        """
        return self._trailer_count

    @trailer_count.setter
    def trailer_count(self, trailer_count: int):
        """Sets the trailer_count of this BaseItemDto.

        Gets or sets the trailer count.  # noqa: E501

        :param trailer_count: The trailer_count of this BaseItemDto.
        :type trailer_count: int
        """

        self._trailer_count = trailer_count

    @property
    def type(self) -> str:
        """Gets the type of this BaseItemDto.

        Gets or sets the type.  # noqa: E501

        :return: The type of this BaseItemDto.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BaseItemDto.

        Gets or sets the type.  # noqa: E501

        :param type: The type of this BaseItemDto.
        :type type: str
        """

        self._type = type

    @property
    def user_data(self) -> UserItemDataDto:
        """Gets the user_data of this BaseItemDto.


        :return: The user_data of this BaseItemDto.
        :rtype: UserItemDataDto
        """
        return self._user_data

    @user_data.setter
    def user_data(self, user_data: UserItemDataDto):
        """Sets the user_data of this BaseItemDto.


        :param user_data: The user_data of this BaseItemDto.
        :type user_data: UserItemDataDto
        """

        self._user_data = user_data

    @property
    def video3_d_format(self) -> Video3DFormat:
        """Gets the video3_d_format of this BaseItemDto.


        :return: The video3_d_format of this BaseItemDto.
        :rtype: Video3DFormat
        """
        return self._video3_d_format

    @video3_d_format.setter
    def video3_d_format(self, video3_d_format: Video3DFormat):
        """Sets the video3_d_format of this BaseItemDto.


        :param video3_d_format: The video3_d_format of this BaseItemDto.
        :type video3_d_format: Video3DFormat
        """

        self._video3_d_format = video3_d_format

    @property
    def video_type(self) -> VideoType:
        """Gets the video_type of this BaseItemDto.


        :return: The video_type of this BaseItemDto.
        :rtype: VideoType
        """
        return self._video_type

    @video_type.setter
    def video_type(self, video_type: VideoType):
        """Sets the video_type of this BaseItemDto.


        :param video_type: The video_type of this BaseItemDto.
        :type video_type: VideoType
        """

        self._video_type = video_type

    @property
    def width(self) -> int:
        """Gets the width of this BaseItemDto.


        :return: The width of this BaseItemDto.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this BaseItemDto.


        :param width: The width of this BaseItemDto.
        :type width: int
        """

        self._width = width
