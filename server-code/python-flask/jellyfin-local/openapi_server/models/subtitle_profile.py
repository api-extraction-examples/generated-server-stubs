from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.subtitle_delivery_method import SubtitleDeliveryMethod
from openapi_server import util

from openapi_server.models.subtitle_delivery_method import SubtitleDeliveryMethod  # noqa: E501

class SubtitleProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container=None, didl_mode=None, format=None, language=None, method=None):  # noqa: E501
        """SubtitleProfile - a model defined in OpenAPI

        :param container: The container of this SubtitleProfile.  # noqa: E501
        :type container: str
        :param didl_mode: The didl_mode of this SubtitleProfile.  # noqa: E501
        :type didl_mode: str
        :param format: The format of this SubtitleProfile.  # noqa: E501
        :type format: str
        :param language: The language of this SubtitleProfile.  # noqa: E501
        :type language: str
        :param method: The method of this SubtitleProfile.  # noqa: E501
        :type method: SubtitleDeliveryMethod
        """
        self.openapi_types = {
            'container': str,
            'didl_mode': str,
            'format': str,
            'language': str,
            'method': SubtitleDeliveryMethod
        }

        self.attribute_map = {
            'container': 'Container',
            'didl_mode': 'DidlMode',
            'format': 'Format',
            'language': 'Language',
            'method': 'Method'
        }

        self._container = container
        self._didl_mode = didl_mode
        self._format = format
        self._language = language
        self._method = method

    @classmethod
    def from_dict(cls, dikt) -> 'SubtitleProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubtitleProfile of this SubtitleProfile.  # noqa: E501
        :rtype: SubtitleProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container(self) -> str:
        """Gets the container of this SubtitleProfile.


        :return: The container of this SubtitleProfile.
        :rtype: str
        """
        return self._container

    @container.setter
    def container(self, container: str):
        """Sets the container of this SubtitleProfile.


        :param container: The container of this SubtitleProfile.
        :type container: str
        """

        self._container = container

    @property
    def didl_mode(self) -> str:
        """Gets the didl_mode of this SubtitleProfile.


        :return: The didl_mode of this SubtitleProfile.
        :rtype: str
        """
        return self._didl_mode

    @didl_mode.setter
    def didl_mode(self, didl_mode: str):
        """Sets the didl_mode of this SubtitleProfile.


        :param didl_mode: The didl_mode of this SubtitleProfile.
        :type didl_mode: str
        """

        self._didl_mode = didl_mode

    @property
    def format(self) -> str:
        """Gets the format of this SubtitleProfile.


        :return: The format of this SubtitleProfile.
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format: str):
        """Sets the format of this SubtitleProfile.


        :param format: The format of this SubtitleProfile.
        :type format: str
        """

        self._format = format

    @property
    def language(self) -> str:
        """Gets the language of this SubtitleProfile.


        :return: The language of this SubtitleProfile.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this SubtitleProfile.


        :param language: The language of this SubtitleProfile.
        :type language: str
        """

        self._language = language

    @property
    def method(self) -> SubtitleDeliveryMethod:
        """Gets the method of this SubtitleProfile.


        :return: The method of this SubtitleProfile.
        :rtype: SubtitleDeliveryMethod
        """
        return self._method

    @method.setter
    def method(self, method: SubtitleDeliveryMethod):
        """Sets the method of this SubtitleProfile.


        :param method: The method of this SubtitleProfile.
        :type method: SubtitleDeliveryMethod
        """

        self._method = method
