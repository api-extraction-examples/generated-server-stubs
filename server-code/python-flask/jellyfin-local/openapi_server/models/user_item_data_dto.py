from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserItemDataDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_favorite=None, item_id=None, key=None, last_played_date=None, likes=None, play_count=None, playback_position_ticks=None, played=None, played_percentage=None, rating=None, unplayed_item_count=None):  # noqa: E501
        """UserItemDataDto - a model defined in OpenAPI

        :param is_favorite: The is_favorite of this UserItemDataDto.  # noqa: E501
        :type is_favorite: bool
        :param item_id: The item_id of this UserItemDataDto.  # noqa: E501
        :type item_id: str
        :param key: The key of this UserItemDataDto.  # noqa: E501
        :type key: str
        :param last_played_date: The last_played_date of this UserItemDataDto.  # noqa: E501
        :type last_played_date: datetime
        :param likes: The likes of this UserItemDataDto.  # noqa: E501
        :type likes: bool
        :param play_count: The play_count of this UserItemDataDto.  # noqa: E501
        :type play_count: int
        :param playback_position_ticks: The playback_position_ticks of this UserItemDataDto.  # noqa: E501
        :type playback_position_ticks: int
        :param played: The played of this UserItemDataDto.  # noqa: E501
        :type played: bool
        :param played_percentage: The played_percentage of this UserItemDataDto.  # noqa: E501
        :type played_percentage: float
        :param rating: The rating of this UserItemDataDto.  # noqa: E501
        :type rating: float
        :param unplayed_item_count: The unplayed_item_count of this UserItemDataDto.  # noqa: E501
        :type unplayed_item_count: int
        """
        self.openapi_types = {
            'is_favorite': bool,
            'item_id': str,
            'key': str,
            'last_played_date': datetime,
            'likes': bool,
            'play_count': int,
            'playback_position_ticks': int,
            'played': bool,
            'played_percentage': float,
            'rating': float,
            'unplayed_item_count': int
        }

        self.attribute_map = {
            'is_favorite': 'IsFavorite',
            'item_id': 'ItemId',
            'key': 'Key',
            'last_played_date': 'LastPlayedDate',
            'likes': 'Likes',
            'play_count': 'PlayCount',
            'playback_position_ticks': 'PlaybackPositionTicks',
            'played': 'Played',
            'played_percentage': 'PlayedPercentage',
            'rating': 'Rating',
            'unplayed_item_count': 'UnplayedItemCount'
        }

        self._is_favorite = is_favorite
        self._item_id = item_id
        self._key = key
        self._last_played_date = last_played_date
        self._likes = likes
        self._play_count = play_count
        self._playback_position_ticks = playback_position_ticks
        self._played = played
        self._played_percentage = played_percentage
        self._rating = rating
        self._unplayed_item_count = unplayed_item_count

    @classmethod
    def from_dict(cls, dikt) -> 'UserItemDataDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserItemDataDto of this UserItemDataDto.  # noqa: E501
        :rtype: UserItemDataDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_favorite(self) -> bool:
        """Gets the is_favorite of this UserItemDataDto.

        Gets or sets a value indicating whether this instance is favorite.  # noqa: E501

        :return: The is_favorite of this UserItemDataDto.
        :rtype: bool
        """
        return self._is_favorite

    @is_favorite.setter
    def is_favorite(self, is_favorite: bool):
        """Sets the is_favorite of this UserItemDataDto.

        Gets or sets a value indicating whether this instance is favorite.  # noqa: E501

        :param is_favorite: The is_favorite of this UserItemDataDto.
        :type is_favorite: bool
        """

        self._is_favorite = is_favorite

    @property
    def item_id(self) -> str:
        """Gets the item_id of this UserItemDataDto.

        Gets or sets the item identifier.  # noqa: E501

        :return: The item_id of this UserItemDataDto.
        :rtype: str
        """
        return self._item_id

    @item_id.setter
    def item_id(self, item_id: str):
        """Sets the item_id of this UserItemDataDto.

        Gets or sets the item identifier.  # noqa: E501

        :param item_id: The item_id of this UserItemDataDto.
        :type item_id: str
        """

        self._item_id = item_id

    @property
    def key(self) -> str:
        """Gets the key of this UserItemDataDto.

        Gets or sets the key.  # noqa: E501

        :return: The key of this UserItemDataDto.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this UserItemDataDto.

        Gets or sets the key.  # noqa: E501

        :param key: The key of this UserItemDataDto.
        :type key: str
        """

        self._key = key

    @property
    def last_played_date(self) -> datetime:
        """Gets the last_played_date of this UserItemDataDto.

        Gets or sets the last played date.  # noqa: E501

        :return: The last_played_date of this UserItemDataDto.
        :rtype: datetime
        """
        return self._last_played_date

    @last_played_date.setter
    def last_played_date(self, last_played_date: datetime):
        """Sets the last_played_date of this UserItemDataDto.

        Gets or sets the last played date.  # noqa: E501

        :param last_played_date: The last_played_date of this UserItemDataDto.
        :type last_played_date: datetime
        """

        self._last_played_date = last_played_date

    @property
    def likes(self) -> bool:
        """Gets the likes of this UserItemDataDto.

        Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is likes.  # noqa: E501

        :return: The likes of this UserItemDataDto.
        :rtype: bool
        """
        return self._likes

    @likes.setter
    def likes(self, likes: bool):
        """Sets the likes of this UserItemDataDto.

        Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is likes.  # noqa: E501

        :param likes: The likes of this UserItemDataDto.
        :type likes: bool
        """

        self._likes = likes

    @property
    def play_count(self) -> int:
        """Gets the play_count of this UserItemDataDto.

        Gets or sets the play count.  # noqa: E501

        :return: The play_count of this UserItemDataDto.
        :rtype: int
        """
        return self._play_count

    @play_count.setter
    def play_count(self, play_count: int):
        """Sets the play_count of this UserItemDataDto.

        Gets or sets the play count.  # noqa: E501

        :param play_count: The play_count of this UserItemDataDto.
        :type play_count: int
        """

        self._play_count = play_count

    @property
    def playback_position_ticks(self) -> int:
        """Gets the playback_position_ticks of this UserItemDataDto.

        Gets or sets the playback position ticks.  # noqa: E501

        :return: The playback_position_ticks of this UserItemDataDto.
        :rtype: int
        """
        return self._playback_position_ticks

    @playback_position_ticks.setter
    def playback_position_ticks(self, playback_position_ticks: int):
        """Sets the playback_position_ticks of this UserItemDataDto.

        Gets or sets the playback position ticks.  # noqa: E501

        :param playback_position_ticks: The playback_position_ticks of this UserItemDataDto.
        :type playback_position_ticks: int
        """

        self._playback_position_ticks = playback_position_ticks

    @property
    def played(self) -> bool:
        """Gets the played of this UserItemDataDto.

        Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is played.  # noqa: E501

        :return: The played of this UserItemDataDto.
        :rtype: bool
        """
        return self._played

    @played.setter
    def played(self, played: bool):
        """Sets the played of this UserItemDataDto.

        Gets or sets a value indicating whether this MediaBrowser.Model.Dto.UserItemDataDto is played.  # noqa: E501

        :param played: The played of this UserItemDataDto.
        :type played: bool
        """

        self._played = played

    @property
    def played_percentage(self) -> float:
        """Gets the played_percentage of this UserItemDataDto.

        Gets or sets the played percentage.  # noqa: E501

        :return: The played_percentage of this UserItemDataDto.
        :rtype: float
        """
        return self._played_percentage

    @played_percentage.setter
    def played_percentage(self, played_percentage: float):
        """Sets the played_percentage of this UserItemDataDto.

        Gets or sets the played percentage.  # noqa: E501

        :param played_percentage: The played_percentage of this UserItemDataDto.
        :type played_percentage: float
        """

        self._played_percentage = played_percentage

    @property
    def rating(self) -> float:
        """Gets the rating of this UserItemDataDto.

        Gets or sets the rating.  # noqa: E501

        :return: The rating of this UserItemDataDto.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this UserItemDataDto.

        Gets or sets the rating.  # noqa: E501

        :param rating: The rating of this UserItemDataDto.
        :type rating: float
        """

        self._rating = rating

    @property
    def unplayed_item_count(self) -> int:
        """Gets the unplayed_item_count of this UserItemDataDto.

        Gets or sets the unplayed item count.  # noqa: E501

        :return: The unplayed_item_count of this UserItemDataDto.
        :rtype: int
        """
        return self._unplayed_item_count

    @unplayed_item_count.setter
    def unplayed_item_count(self, unplayed_item_count: int):
        """Sets the unplayed_item_count of this UserItemDataDto.

        Gets or sets the unplayed item count.  # noqa: E501

        :param unplayed_item_count: The unplayed_item_count of this UserItemDataDto.
        :type unplayed_item_count: int
        """

        self._unplayed_item_count = unplayed_item_count
