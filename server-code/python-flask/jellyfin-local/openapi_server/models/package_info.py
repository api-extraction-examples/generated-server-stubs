from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.version_info import VersionInfo
from openapi_server import util

from openapi_server.models.version_info import VersionInfo  # noqa: E501

class PackageInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, description=None, guid=None, image_url=None, name=None, overview=None, owner=None, versions=None):  # noqa: E501
        """PackageInfo - a model defined in OpenAPI

        :param category: The category of this PackageInfo.  # noqa: E501
        :type category: str
        :param description: The description of this PackageInfo.  # noqa: E501
        :type description: str
        :param guid: The guid of this PackageInfo.  # noqa: E501
        :type guid: str
        :param image_url: The image_url of this PackageInfo.  # noqa: E501
        :type image_url: str
        :param name: The name of this PackageInfo.  # noqa: E501
        :type name: str
        :param overview: The overview of this PackageInfo.  # noqa: E501
        :type overview: str
        :param owner: The owner of this PackageInfo.  # noqa: E501
        :type owner: str
        :param versions: The versions of this PackageInfo.  # noqa: E501
        :type versions: List[VersionInfo]
        """
        self.openapi_types = {
            'category': str,
            'description': str,
            'guid': str,
            'image_url': str,
            'name': str,
            'overview': str,
            'owner': str,
            'versions': List[VersionInfo]
        }

        self.attribute_map = {
            'category': 'category',
            'description': 'description',
            'guid': 'guid',
            'image_url': 'imageUrl',
            'name': 'name',
            'overview': 'overview',
            'owner': 'owner',
            'versions': 'versions'
        }

        self._category = category
        self._description = description
        self._guid = guid
        self._image_url = image_url
        self._name = name
        self._overview = overview
        self._owner = owner
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'PackageInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PackageInfo of this PackageInfo.  # noqa: E501
        :rtype: PackageInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this PackageInfo.

        Gets or sets the category.  # noqa: E501

        :return: The category of this PackageInfo.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this PackageInfo.

        Gets or sets the category.  # noqa: E501

        :param category: The category of this PackageInfo.
        :type category: str
        """

        self._category = category

    @property
    def description(self) -> str:
        """Gets the description of this PackageInfo.

        Gets or sets a long description of the plugin containing features or helpful explanations.  # noqa: E501

        :return: The description of this PackageInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PackageInfo.

        Gets or sets a long description of the plugin containing features or helpful explanations.  # noqa: E501

        :param description: The description of this PackageInfo.
        :type description: str
        """

        self._description = description

    @property
    def guid(self) -> str:
        """Gets the guid of this PackageInfo.

        Gets or sets the guid of the assembly associated with this plugin.  This is used to identify the proper item for automatic updates.  # noqa: E501

        :return: The guid of this PackageInfo.
        :rtype: str
        """
        return self._guid

    @guid.setter
    def guid(self, guid: str):
        """Sets the guid of this PackageInfo.

        Gets or sets the guid of the assembly associated with this plugin.  This is used to identify the proper item for automatic updates.  # noqa: E501

        :param guid: The guid of this PackageInfo.
        :type guid: str
        """

        self._guid = guid

    @property
    def image_url(self) -> str:
        """Gets the image_url of this PackageInfo.

        Gets or sets the image url for the package.  # noqa: E501

        :return: The image_url of this PackageInfo.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this PackageInfo.

        Gets or sets the image url for the package.  # noqa: E501

        :param image_url: The image_url of this PackageInfo.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def name(self) -> str:
        """Gets the name of this PackageInfo.

        Gets or sets the name.  # noqa: E501

        :return: The name of this PackageInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PackageInfo.

        Gets or sets the name.  # noqa: E501

        :param name: The name of this PackageInfo.
        :type name: str
        """

        self._name = name

    @property
    def overview(self) -> str:
        """Gets the overview of this PackageInfo.

        Gets or sets a short overview of what the plugin does.  # noqa: E501

        :return: The overview of this PackageInfo.
        :rtype: str
        """
        return self._overview

    @overview.setter
    def overview(self, overview: str):
        """Sets the overview of this PackageInfo.

        Gets or sets a short overview of what the plugin does.  # noqa: E501

        :param overview: The overview of this PackageInfo.
        :type overview: str
        """

        self._overview = overview

    @property
    def owner(self) -> str:
        """Gets the owner of this PackageInfo.

        Gets or sets the owner.  # noqa: E501

        :return: The owner of this PackageInfo.
        :rtype: str
        """
        return self._owner

    @owner.setter
    def owner(self, owner: str):
        """Sets the owner of this PackageInfo.

        Gets or sets the owner.  # noqa: E501

        :param owner: The owner of this PackageInfo.
        :type owner: str
        """

        self._owner = owner

    @property
    def versions(self) -> List[VersionInfo]:
        """Gets the versions of this PackageInfo.

        Gets or sets the versions.  # noqa: E501

        :return: The versions of this PackageInfo.
        :rtype: List[VersionInfo]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[VersionInfo]):
        """Sets the versions of this PackageInfo.

        Gets or sets the versions.  # noqa: E501

        :param versions: The versions of this PackageInfo.
        :type versions: List[VersionInfo]
        """

        self._versions = versions
