from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.library_option_info_dto import LibraryOptionInfoDto
from openapi_server.models.library_type_options_dto import LibraryTypeOptionsDto
from openapi_server import util

from openapi_server.models.library_option_info_dto import LibraryOptionInfoDto  # noqa: E501
from openapi_server.models.library_type_options_dto import LibraryTypeOptionsDto  # noqa: E501

class LibraryOptionsResultDto(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, metadata_readers=None, metadata_savers=None, subtitle_fetchers=None, type_options=None):  # noqa: E501
        """LibraryOptionsResultDto - a model defined in OpenAPI

        :param metadata_readers: The metadata_readers of this LibraryOptionsResultDto.  # noqa: E501
        :type metadata_readers: List[LibraryOptionInfoDto]
        :param metadata_savers: The metadata_savers of this LibraryOptionsResultDto.  # noqa: E501
        :type metadata_savers: List[LibraryOptionInfoDto]
        :param subtitle_fetchers: The subtitle_fetchers of this LibraryOptionsResultDto.  # noqa: E501
        :type subtitle_fetchers: List[LibraryOptionInfoDto]
        :param type_options: The type_options of this LibraryOptionsResultDto.  # noqa: E501
        :type type_options: List[LibraryTypeOptionsDto]
        """
        self.openapi_types = {
            'metadata_readers': List[LibraryOptionInfoDto],
            'metadata_savers': List[LibraryOptionInfoDto],
            'subtitle_fetchers': List[LibraryOptionInfoDto],
            'type_options': List[LibraryTypeOptionsDto]
        }

        self.attribute_map = {
            'metadata_readers': 'MetadataReaders',
            'metadata_savers': 'MetadataSavers',
            'subtitle_fetchers': 'SubtitleFetchers',
            'type_options': 'TypeOptions'
        }

        self._metadata_readers = metadata_readers
        self._metadata_savers = metadata_savers
        self._subtitle_fetchers = subtitle_fetchers
        self._type_options = type_options

    @classmethod
    def from_dict(cls, dikt) -> 'LibraryOptionsResultDto':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LibraryOptionsResultDto of this LibraryOptionsResultDto.  # noqa: E501
        :rtype: LibraryOptionsResultDto
        """
        return util.deserialize_model(dikt, cls)

    @property
    def metadata_readers(self) -> List[LibraryOptionInfoDto]:
        """Gets the metadata_readers of this LibraryOptionsResultDto.

        Gets or sets the metadata readers.  # noqa: E501

        :return: The metadata_readers of this LibraryOptionsResultDto.
        :rtype: List[LibraryOptionInfoDto]
        """
        return self._metadata_readers

    @metadata_readers.setter
    def metadata_readers(self, metadata_readers: List[LibraryOptionInfoDto]):
        """Sets the metadata_readers of this LibraryOptionsResultDto.

        Gets or sets the metadata readers.  # noqa: E501

        :param metadata_readers: The metadata_readers of this LibraryOptionsResultDto.
        :type metadata_readers: List[LibraryOptionInfoDto]
        """

        self._metadata_readers = metadata_readers

    @property
    def metadata_savers(self) -> List[LibraryOptionInfoDto]:
        """Gets the metadata_savers of this LibraryOptionsResultDto.

        Gets or sets the metadata savers.  # noqa: E501

        :return: The metadata_savers of this LibraryOptionsResultDto.
        :rtype: List[LibraryOptionInfoDto]
        """
        return self._metadata_savers

    @metadata_savers.setter
    def metadata_savers(self, metadata_savers: List[LibraryOptionInfoDto]):
        """Sets the metadata_savers of this LibraryOptionsResultDto.

        Gets or sets the metadata savers.  # noqa: E501

        :param metadata_savers: The metadata_savers of this LibraryOptionsResultDto.
        :type metadata_savers: List[LibraryOptionInfoDto]
        """

        self._metadata_savers = metadata_savers

    @property
    def subtitle_fetchers(self) -> List[LibraryOptionInfoDto]:
        """Gets the subtitle_fetchers of this LibraryOptionsResultDto.

        Gets or sets the subtitle fetchers.  # noqa: E501

        :return: The subtitle_fetchers of this LibraryOptionsResultDto.
        :rtype: List[LibraryOptionInfoDto]
        """
        return self._subtitle_fetchers

    @subtitle_fetchers.setter
    def subtitle_fetchers(self, subtitle_fetchers: List[LibraryOptionInfoDto]):
        """Sets the subtitle_fetchers of this LibraryOptionsResultDto.

        Gets or sets the subtitle fetchers.  # noqa: E501

        :param subtitle_fetchers: The subtitle_fetchers of this LibraryOptionsResultDto.
        :type subtitle_fetchers: List[LibraryOptionInfoDto]
        """

        self._subtitle_fetchers = subtitle_fetchers

    @property
    def type_options(self) -> List[LibraryTypeOptionsDto]:
        """Gets the type_options of this LibraryOptionsResultDto.

        Gets or sets the type options.  # noqa: E501

        :return: The type_options of this LibraryOptionsResultDto.
        :rtype: List[LibraryTypeOptionsDto]
        """
        return self._type_options

    @type_options.setter
    def type_options(self, type_options: List[LibraryTypeOptionsDto]):
        """Sets the type_options of this LibraryOptionsResultDto.

        Gets or sets the type options.  # noqa: E501

        :param type_options: The type_options of this LibraryOptionsResultDto.
        :type type_options: List[LibraryTypeOptionsDto]
        """

        self._type_options = type_options
