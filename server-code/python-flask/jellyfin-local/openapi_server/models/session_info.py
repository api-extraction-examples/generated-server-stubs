from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.base_item import BaseItem
from openapi_server.models.base_item_dto import BaseItemDto
from openapi_server.models.client_capabilities import ClientCapabilities
from openapi_server.models.general_command_type import GeneralCommandType
from openapi_server.models.player_state_info import PlayerStateInfo
from openapi_server.models.queue_item import QueueItem
from openapi_server.models.session_user_info import SessionUserInfo
from openapi_server.models.transcoding_info import TranscodingInfo
from openapi_server import util

from openapi_server.models.base_item import BaseItem  # noqa: E501
from openapi_server.models.base_item_dto import BaseItemDto  # noqa: E501
from openapi_server.models.client_capabilities import ClientCapabilities  # noqa: E501
from openapi_server.models.general_command_type import GeneralCommandType  # noqa: E501
from openapi_server.models.player_state_info import PlayerStateInfo  # noqa: E501
from openapi_server.models.queue_item import QueueItem  # noqa: E501
from openapi_server.models.session_user_info import SessionUserInfo  # noqa: E501
from openapi_server.models.transcoding_info import TranscodingInfo  # noqa: E501

class SessionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, additional_users=None, application_version=None, capabilities=None, client=None, device_id=None, device_name=None, device_type=None, full_now_playing_item=None, has_custom_device_name=None, id=None, is_active=None, last_activity_date=None, last_playback_check_in=None, now_playing_item=None, now_playing_queue=None, now_viewing_item=None, play_state=None, playable_media_types=None, playlist_item_id=None, remote_end_point=None, server_id=None, supported_commands=None, supports_media_control=None, supports_remote_control=None, transcoding_info=None, user_id=None, user_name=None, user_primary_image_tag=None):  # noqa: E501
        """SessionInfo - a model defined in OpenAPI

        :param additional_users: The additional_users of this SessionInfo.  # noqa: E501
        :type additional_users: List[SessionUserInfo]
        :param application_version: The application_version of this SessionInfo.  # noqa: E501
        :type application_version: str
        :param capabilities: The capabilities of this SessionInfo.  # noqa: E501
        :type capabilities: ClientCapabilities
        :param client: The client of this SessionInfo.  # noqa: E501
        :type client: str
        :param device_id: The device_id of this SessionInfo.  # noqa: E501
        :type device_id: str
        :param device_name: The device_name of this SessionInfo.  # noqa: E501
        :type device_name: str
        :param device_type: The device_type of this SessionInfo.  # noqa: E501
        :type device_type: str
        :param full_now_playing_item: The full_now_playing_item of this SessionInfo.  # noqa: E501
        :type full_now_playing_item: BaseItem
        :param has_custom_device_name: The has_custom_device_name of this SessionInfo.  # noqa: E501
        :type has_custom_device_name: bool
        :param id: The id of this SessionInfo.  # noqa: E501
        :type id: str
        :param is_active: The is_active of this SessionInfo.  # noqa: E501
        :type is_active: bool
        :param last_activity_date: The last_activity_date of this SessionInfo.  # noqa: E501
        :type last_activity_date: datetime
        :param last_playback_check_in: The last_playback_check_in of this SessionInfo.  # noqa: E501
        :type last_playback_check_in: datetime
        :param now_playing_item: The now_playing_item of this SessionInfo.  # noqa: E501
        :type now_playing_item: BaseItemDto
        :param now_playing_queue: The now_playing_queue of this SessionInfo.  # noqa: E501
        :type now_playing_queue: List[QueueItem]
        :param now_viewing_item: The now_viewing_item of this SessionInfo.  # noqa: E501
        :type now_viewing_item: BaseItemDto
        :param play_state: The play_state of this SessionInfo.  # noqa: E501
        :type play_state: PlayerStateInfo
        :param playable_media_types: The playable_media_types of this SessionInfo.  # noqa: E501
        :type playable_media_types: List[str]
        :param playlist_item_id: The playlist_item_id of this SessionInfo.  # noqa: E501
        :type playlist_item_id: str
        :param remote_end_point: The remote_end_point of this SessionInfo.  # noqa: E501
        :type remote_end_point: str
        :param server_id: The server_id of this SessionInfo.  # noqa: E501
        :type server_id: str
        :param supported_commands: The supported_commands of this SessionInfo.  # noqa: E501
        :type supported_commands: List[GeneralCommandType]
        :param supports_media_control: The supports_media_control of this SessionInfo.  # noqa: E501
        :type supports_media_control: bool
        :param supports_remote_control: The supports_remote_control of this SessionInfo.  # noqa: E501
        :type supports_remote_control: bool
        :param transcoding_info: The transcoding_info of this SessionInfo.  # noqa: E501
        :type transcoding_info: TranscodingInfo
        :param user_id: The user_id of this SessionInfo.  # noqa: E501
        :type user_id: str
        :param user_name: The user_name of this SessionInfo.  # noqa: E501
        :type user_name: str
        :param user_primary_image_tag: The user_primary_image_tag of this SessionInfo.  # noqa: E501
        :type user_primary_image_tag: str
        """
        self.openapi_types = {
            'additional_users': List[SessionUserInfo],
            'application_version': str,
            'capabilities': ClientCapabilities,
            'client': str,
            'device_id': str,
            'device_name': str,
            'device_type': str,
            'full_now_playing_item': BaseItem,
            'has_custom_device_name': bool,
            'id': str,
            'is_active': bool,
            'last_activity_date': datetime,
            'last_playback_check_in': datetime,
            'now_playing_item': BaseItemDto,
            'now_playing_queue': List[QueueItem],
            'now_viewing_item': BaseItemDto,
            'play_state': PlayerStateInfo,
            'playable_media_types': List[str],
            'playlist_item_id': str,
            'remote_end_point': str,
            'server_id': str,
            'supported_commands': List[GeneralCommandType],
            'supports_media_control': bool,
            'supports_remote_control': bool,
            'transcoding_info': TranscodingInfo,
            'user_id': str,
            'user_name': str,
            'user_primary_image_tag': str
        }

        self.attribute_map = {
            'additional_users': 'AdditionalUsers',
            'application_version': 'ApplicationVersion',
            'capabilities': 'Capabilities',
            'client': 'Client',
            'device_id': 'DeviceId',
            'device_name': 'DeviceName',
            'device_type': 'DeviceType',
            'full_now_playing_item': 'FullNowPlayingItem',
            'has_custom_device_name': 'HasCustomDeviceName',
            'id': 'Id',
            'is_active': 'IsActive',
            'last_activity_date': 'LastActivityDate',
            'last_playback_check_in': 'LastPlaybackCheckIn',
            'now_playing_item': 'NowPlayingItem',
            'now_playing_queue': 'NowPlayingQueue',
            'now_viewing_item': 'NowViewingItem',
            'play_state': 'PlayState',
            'playable_media_types': 'PlayableMediaTypes',
            'playlist_item_id': 'PlaylistItemId',
            'remote_end_point': 'RemoteEndPoint',
            'server_id': 'ServerId',
            'supported_commands': 'SupportedCommands',
            'supports_media_control': 'SupportsMediaControl',
            'supports_remote_control': 'SupportsRemoteControl',
            'transcoding_info': 'TranscodingInfo',
            'user_id': 'UserId',
            'user_name': 'UserName',
            'user_primary_image_tag': 'UserPrimaryImageTag'
        }

        self._additional_users = additional_users
        self._application_version = application_version
        self._capabilities = capabilities
        self._client = client
        self._device_id = device_id
        self._device_name = device_name
        self._device_type = device_type
        self._full_now_playing_item = full_now_playing_item
        self._has_custom_device_name = has_custom_device_name
        self._id = id
        self._is_active = is_active
        self._last_activity_date = last_activity_date
        self._last_playback_check_in = last_playback_check_in
        self._now_playing_item = now_playing_item
        self._now_playing_queue = now_playing_queue
        self._now_viewing_item = now_viewing_item
        self._play_state = play_state
        self._playable_media_types = playable_media_types
        self._playlist_item_id = playlist_item_id
        self._remote_end_point = remote_end_point
        self._server_id = server_id
        self._supported_commands = supported_commands
        self._supports_media_control = supports_media_control
        self._supports_remote_control = supports_remote_control
        self._transcoding_info = transcoding_info
        self._user_id = user_id
        self._user_name = user_name
        self._user_primary_image_tag = user_primary_image_tag

    @classmethod
    def from_dict(cls, dikt) -> 'SessionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SessionInfo of this SessionInfo.  # noqa: E501
        :rtype: SessionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def additional_users(self) -> List[SessionUserInfo]:
        """Gets the additional_users of this SessionInfo.


        :return: The additional_users of this SessionInfo.
        :rtype: List[SessionUserInfo]
        """
        return self._additional_users

    @additional_users.setter
    def additional_users(self, additional_users: List[SessionUserInfo]):
        """Sets the additional_users of this SessionInfo.


        :param additional_users: The additional_users of this SessionInfo.
        :type additional_users: List[SessionUserInfo]
        """

        self._additional_users = additional_users

    @property
    def application_version(self) -> str:
        """Gets the application_version of this SessionInfo.

        Gets or sets the application version.  # noqa: E501

        :return: The application_version of this SessionInfo.
        :rtype: str
        """
        return self._application_version

    @application_version.setter
    def application_version(self, application_version: str):
        """Sets the application_version of this SessionInfo.

        Gets or sets the application version.  # noqa: E501

        :param application_version: The application_version of this SessionInfo.
        :type application_version: str
        """

        self._application_version = application_version

    @property
    def capabilities(self) -> ClientCapabilities:
        """Gets the capabilities of this SessionInfo.


        :return: The capabilities of this SessionInfo.
        :rtype: ClientCapabilities
        """
        return self._capabilities

    @capabilities.setter
    def capabilities(self, capabilities: ClientCapabilities):
        """Sets the capabilities of this SessionInfo.


        :param capabilities: The capabilities of this SessionInfo.
        :type capabilities: ClientCapabilities
        """

        self._capabilities = capabilities

    @property
    def client(self) -> str:
        """Gets the client of this SessionInfo.

        Gets or sets the type of the client.  # noqa: E501

        :return: The client of this SessionInfo.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client: str):
        """Sets the client of this SessionInfo.

        Gets or sets the type of the client.  # noqa: E501

        :param client: The client of this SessionInfo.
        :type client: str
        """

        self._client = client

    @property
    def device_id(self) -> str:
        """Gets the device_id of this SessionInfo.

        Gets or sets the device id.  # noqa: E501

        :return: The device_id of this SessionInfo.
        :rtype: str
        """
        return self._device_id

    @device_id.setter
    def device_id(self, device_id: str):
        """Sets the device_id of this SessionInfo.

        Gets or sets the device id.  # noqa: E501

        :param device_id: The device_id of this SessionInfo.
        :type device_id: str
        """

        self._device_id = device_id

    @property
    def device_name(self) -> str:
        """Gets the device_name of this SessionInfo.

        Gets or sets the name of the device.  # noqa: E501

        :return: The device_name of this SessionInfo.
        :rtype: str
        """
        return self._device_name

    @device_name.setter
    def device_name(self, device_name: str):
        """Sets the device_name of this SessionInfo.

        Gets or sets the name of the device.  # noqa: E501

        :param device_name: The device_name of this SessionInfo.
        :type device_name: str
        """

        self._device_name = device_name

    @property
    def device_type(self) -> str:
        """Gets the device_type of this SessionInfo.

        Gets or sets the type of the device.  # noqa: E501

        :return: The device_type of this SessionInfo.
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type: str):
        """Sets the device_type of this SessionInfo.

        Gets or sets the type of the device.  # noqa: E501

        :param device_type: The device_type of this SessionInfo.
        :type device_type: str
        """

        self._device_type = device_type

    @property
    def full_now_playing_item(self) -> BaseItem:
        """Gets the full_now_playing_item of this SessionInfo.


        :return: The full_now_playing_item of this SessionInfo.
        :rtype: BaseItem
        """
        return self._full_now_playing_item

    @full_now_playing_item.setter
    def full_now_playing_item(self, full_now_playing_item: BaseItem):
        """Sets the full_now_playing_item of this SessionInfo.


        :param full_now_playing_item: The full_now_playing_item of this SessionInfo.
        :type full_now_playing_item: BaseItem
        """

        self._full_now_playing_item = full_now_playing_item

    @property
    def has_custom_device_name(self) -> bool:
        """Gets the has_custom_device_name of this SessionInfo.


        :return: The has_custom_device_name of this SessionInfo.
        :rtype: bool
        """
        return self._has_custom_device_name

    @has_custom_device_name.setter
    def has_custom_device_name(self, has_custom_device_name: bool):
        """Sets the has_custom_device_name of this SessionInfo.


        :param has_custom_device_name: The has_custom_device_name of this SessionInfo.
        :type has_custom_device_name: bool
        """

        self._has_custom_device_name = has_custom_device_name

    @property
    def id(self) -> str:
        """Gets the id of this SessionInfo.

        Gets or sets the id.  # noqa: E501

        :return: The id of this SessionInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SessionInfo.

        Gets or sets the id.  # noqa: E501

        :param id: The id of this SessionInfo.
        :type id: str
        """

        self._id = id

    @property
    def is_active(self) -> bool:
        """Gets the is_active of this SessionInfo.

        Gets a value indicating whether this instance is active.  # noqa: E501

        :return: The is_active of this SessionInfo.
        :rtype: bool
        """
        return self._is_active

    @is_active.setter
    def is_active(self, is_active: bool):
        """Sets the is_active of this SessionInfo.

        Gets a value indicating whether this instance is active.  # noqa: E501

        :param is_active: The is_active of this SessionInfo.
        :type is_active: bool
        """

        self._is_active = is_active

    @property
    def last_activity_date(self) -> datetime:
        """Gets the last_activity_date of this SessionInfo.

        Gets or sets the last activity date.  # noqa: E501

        :return: The last_activity_date of this SessionInfo.
        :rtype: datetime
        """
        return self._last_activity_date

    @last_activity_date.setter
    def last_activity_date(self, last_activity_date: datetime):
        """Sets the last_activity_date of this SessionInfo.

        Gets or sets the last activity date.  # noqa: E501

        :param last_activity_date: The last_activity_date of this SessionInfo.
        :type last_activity_date: datetime
        """

        self._last_activity_date = last_activity_date

    @property
    def last_playback_check_in(self) -> datetime:
        """Gets the last_playback_check_in of this SessionInfo.

        Gets or sets the last playback check in.  # noqa: E501

        :return: The last_playback_check_in of this SessionInfo.
        :rtype: datetime
        """
        return self._last_playback_check_in

    @last_playback_check_in.setter
    def last_playback_check_in(self, last_playback_check_in: datetime):
        """Sets the last_playback_check_in of this SessionInfo.

        Gets or sets the last playback check in.  # noqa: E501

        :param last_playback_check_in: The last_playback_check_in of this SessionInfo.
        :type last_playback_check_in: datetime
        """

        self._last_playback_check_in = last_playback_check_in

    @property
    def now_playing_item(self) -> BaseItemDto:
        """Gets the now_playing_item of this SessionInfo.


        :return: The now_playing_item of this SessionInfo.
        :rtype: BaseItemDto
        """
        return self._now_playing_item

    @now_playing_item.setter
    def now_playing_item(self, now_playing_item: BaseItemDto):
        """Sets the now_playing_item of this SessionInfo.


        :param now_playing_item: The now_playing_item of this SessionInfo.
        :type now_playing_item: BaseItemDto
        """

        self._now_playing_item = now_playing_item

    @property
    def now_playing_queue(self) -> List[QueueItem]:
        """Gets the now_playing_queue of this SessionInfo.


        :return: The now_playing_queue of this SessionInfo.
        :rtype: List[QueueItem]
        """
        return self._now_playing_queue

    @now_playing_queue.setter
    def now_playing_queue(self, now_playing_queue: List[QueueItem]):
        """Sets the now_playing_queue of this SessionInfo.


        :param now_playing_queue: The now_playing_queue of this SessionInfo.
        :type now_playing_queue: List[QueueItem]
        """

        self._now_playing_queue = now_playing_queue

    @property
    def now_viewing_item(self) -> BaseItemDto:
        """Gets the now_viewing_item of this SessionInfo.


        :return: The now_viewing_item of this SessionInfo.
        :rtype: BaseItemDto
        """
        return self._now_viewing_item

    @now_viewing_item.setter
    def now_viewing_item(self, now_viewing_item: BaseItemDto):
        """Sets the now_viewing_item of this SessionInfo.


        :param now_viewing_item: The now_viewing_item of this SessionInfo.
        :type now_viewing_item: BaseItemDto
        """

        self._now_viewing_item = now_viewing_item

    @property
    def play_state(self) -> PlayerStateInfo:
        """Gets the play_state of this SessionInfo.


        :return: The play_state of this SessionInfo.
        :rtype: PlayerStateInfo
        """
        return self._play_state

    @play_state.setter
    def play_state(self, play_state: PlayerStateInfo):
        """Sets the play_state of this SessionInfo.


        :param play_state: The play_state of this SessionInfo.
        :type play_state: PlayerStateInfo
        """

        self._play_state = play_state

    @property
    def playable_media_types(self) -> List[str]:
        """Gets the playable_media_types of this SessionInfo.

        Gets or sets the playable media types.  # noqa: E501

        :return: The playable_media_types of this SessionInfo.
        :rtype: List[str]
        """
        return self._playable_media_types

    @playable_media_types.setter
    def playable_media_types(self, playable_media_types: List[str]):
        """Sets the playable_media_types of this SessionInfo.

        Gets or sets the playable media types.  # noqa: E501

        :param playable_media_types: The playable_media_types of this SessionInfo.
        :type playable_media_types: List[str]
        """

        self._playable_media_types = playable_media_types

    @property
    def playlist_item_id(self) -> str:
        """Gets the playlist_item_id of this SessionInfo.


        :return: The playlist_item_id of this SessionInfo.
        :rtype: str
        """
        return self._playlist_item_id

    @playlist_item_id.setter
    def playlist_item_id(self, playlist_item_id: str):
        """Sets the playlist_item_id of this SessionInfo.


        :param playlist_item_id: The playlist_item_id of this SessionInfo.
        :type playlist_item_id: str
        """

        self._playlist_item_id = playlist_item_id

    @property
    def remote_end_point(self) -> str:
        """Gets the remote_end_point of this SessionInfo.

        Gets or sets the remote end point.  # noqa: E501

        :return: The remote_end_point of this SessionInfo.
        :rtype: str
        """
        return self._remote_end_point

    @remote_end_point.setter
    def remote_end_point(self, remote_end_point: str):
        """Sets the remote_end_point of this SessionInfo.

        Gets or sets the remote end point.  # noqa: E501

        :param remote_end_point: The remote_end_point of this SessionInfo.
        :type remote_end_point: str
        """

        self._remote_end_point = remote_end_point

    @property
    def server_id(self) -> str:
        """Gets the server_id of this SessionInfo.


        :return: The server_id of this SessionInfo.
        :rtype: str
        """
        return self._server_id

    @server_id.setter
    def server_id(self, server_id: str):
        """Sets the server_id of this SessionInfo.


        :param server_id: The server_id of this SessionInfo.
        :type server_id: str
        """

        self._server_id = server_id

    @property
    def supported_commands(self) -> List[GeneralCommandType]:
        """Gets the supported_commands of this SessionInfo.

        Gets or sets the supported commands.  # noqa: E501

        :return: The supported_commands of this SessionInfo.
        :rtype: List[GeneralCommandType]
        """
        return self._supported_commands

    @supported_commands.setter
    def supported_commands(self, supported_commands: List[GeneralCommandType]):
        """Sets the supported_commands of this SessionInfo.

        Gets or sets the supported commands.  # noqa: E501

        :param supported_commands: The supported_commands of this SessionInfo.
        :type supported_commands: List[GeneralCommandType]
        """

        self._supported_commands = supported_commands

    @property
    def supports_media_control(self) -> bool:
        """Gets the supports_media_control of this SessionInfo.


        :return: The supports_media_control of this SessionInfo.
        :rtype: bool
        """
        return self._supports_media_control

    @supports_media_control.setter
    def supports_media_control(self, supports_media_control: bool):
        """Sets the supports_media_control of this SessionInfo.


        :param supports_media_control: The supports_media_control of this SessionInfo.
        :type supports_media_control: bool
        """

        self._supports_media_control = supports_media_control

    @property
    def supports_remote_control(self) -> bool:
        """Gets the supports_remote_control of this SessionInfo.


        :return: The supports_remote_control of this SessionInfo.
        :rtype: bool
        """
        return self._supports_remote_control

    @supports_remote_control.setter
    def supports_remote_control(self, supports_remote_control: bool):
        """Sets the supports_remote_control of this SessionInfo.


        :param supports_remote_control: The supports_remote_control of this SessionInfo.
        :type supports_remote_control: bool
        """

        self._supports_remote_control = supports_remote_control

    @property
    def transcoding_info(self) -> TranscodingInfo:
        """Gets the transcoding_info of this SessionInfo.


        :return: The transcoding_info of this SessionInfo.
        :rtype: TranscodingInfo
        """
        return self._transcoding_info

    @transcoding_info.setter
    def transcoding_info(self, transcoding_info: TranscodingInfo):
        """Sets the transcoding_info of this SessionInfo.


        :param transcoding_info: The transcoding_info of this SessionInfo.
        :type transcoding_info: TranscodingInfo
        """

        self._transcoding_info = transcoding_info

    @property
    def user_id(self) -> str:
        """Gets the user_id of this SessionInfo.

        Gets or sets the user id.  # noqa: E501

        :return: The user_id of this SessionInfo.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this SessionInfo.

        Gets or sets the user id.  # noqa: E501

        :param user_id: The user_id of this SessionInfo.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def user_name(self) -> str:
        """Gets the user_name of this SessionInfo.

        Gets or sets the username.  # noqa: E501

        :return: The user_name of this SessionInfo.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this SessionInfo.

        Gets or sets the username.  # noqa: E501

        :param user_name: The user_name of this SessionInfo.
        :type user_name: str
        """

        self._user_name = user_name

    @property
    def user_primary_image_tag(self) -> str:
        """Gets the user_primary_image_tag of this SessionInfo.


        :return: The user_primary_image_tag of this SessionInfo.
        :rtype: str
        """
        return self._user_primary_image_tag

    @user_primary_image_tag.setter
    def user_primary_image_tag(self, user_primary_image_tag: str):
        """Sets the user_primary_image_tag of this SessionInfo.


        :param user_primary_image_tag: The user_primary_image_tag of this SessionInfo.
        :type user_primary_image_tag: str
        """

        self._user_primary_image_tag = user_primary_image_tag
