from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ItemCounts(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, album_count=None, artist_count=None, book_count=None, box_set_count=None, episode_count=None, item_count=None, movie_count=None, music_video_count=None, program_count=None, series_count=None, song_count=None, trailer_count=None):  # noqa: E501
        """ItemCounts - a model defined in OpenAPI

        :param album_count: The album_count of this ItemCounts.  # noqa: E501
        :type album_count: int
        :param artist_count: The artist_count of this ItemCounts.  # noqa: E501
        :type artist_count: int
        :param book_count: The book_count of this ItemCounts.  # noqa: E501
        :type book_count: int
        :param box_set_count: The box_set_count of this ItemCounts.  # noqa: E501
        :type box_set_count: int
        :param episode_count: The episode_count of this ItemCounts.  # noqa: E501
        :type episode_count: int
        :param item_count: The item_count of this ItemCounts.  # noqa: E501
        :type item_count: int
        :param movie_count: The movie_count of this ItemCounts.  # noqa: E501
        :type movie_count: int
        :param music_video_count: The music_video_count of this ItemCounts.  # noqa: E501
        :type music_video_count: int
        :param program_count: The program_count of this ItemCounts.  # noqa: E501
        :type program_count: int
        :param series_count: The series_count of this ItemCounts.  # noqa: E501
        :type series_count: int
        :param song_count: The song_count of this ItemCounts.  # noqa: E501
        :type song_count: int
        :param trailer_count: The trailer_count of this ItemCounts.  # noqa: E501
        :type trailer_count: int
        """
        self.openapi_types = {
            'album_count': int,
            'artist_count': int,
            'book_count': int,
            'box_set_count': int,
            'episode_count': int,
            'item_count': int,
            'movie_count': int,
            'music_video_count': int,
            'program_count': int,
            'series_count': int,
            'song_count': int,
            'trailer_count': int
        }

        self.attribute_map = {
            'album_count': 'AlbumCount',
            'artist_count': 'ArtistCount',
            'book_count': 'BookCount',
            'box_set_count': 'BoxSetCount',
            'episode_count': 'EpisodeCount',
            'item_count': 'ItemCount',
            'movie_count': 'MovieCount',
            'music_video_count': 'MusicVideoCount',
            'program_count': 'ProgramCount',
            'series_count': 'SeriesCount',
            'song_count': 'SongCount',
            'trailer_count': 'TrailerCount'
        }

        self._album_count = album_count
        self._artist_count = artist_count
        self._book_count = book_count
        self._box_set_count = box_set_count
        self._episode_count = episode_count
        self._item_count = item_count
        self._movie_count = movie_count
        self._music_video_count = music_video_count
        self._program_count = program_count
        self._series_count = series_count
        self._song_count = song_count
        self._trailer_count = trailer_count

    @classmethod
    def from_dict(cls, dikt) -> 'ItemCounts':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ItemCounts of this ItemCounts.  # noqa: E501
        :rtype: ItemCounts
        """
        return util.deserialize_model(dikt, cls)

    @property
    def album_count(self) -> int:
        """Gets the album_count of this ItemCounts.

        Gets or sets the album count.  # noqa: E501

        :return: The album_count of this ItemCounts.
        :rtype: int
        """
        return self._album_count

    @album_count.setter
    def album_count(self, album_count: int):
        """Sets the album_count of this ItemCounts.

        Gets or sets the album count.  # noqa: E501

        :param album_count: The album_count of this ItemCounts.
        :type album_count: int
        """

        self._album_count = album_count

    @property
    def artist_count(self) -> int:
        """Gets the artist_count of this ItemCounts.

        Gets or sets the artist count.  # noqa: E501

        :return: The artist_count of this ItemCounts.
        :rtype: int
        """
        return self._artist_count

    @artist_count.setter
    def artist_count(self, artist_count: int):
        """Sets the artist_count of this ItemCounts.

        Gets or sets the artist count.  # noqa: E501

        :param artist_count: The artist_count of this ItemCounts.
        :type artist_count: int
        """

        self._artist_count = artist_count

    @property
    def book_count(self) -> int:
        """Gets the book_count of this ItemCounts.

        Gets or sets the book count.  # noqa: E501

        :return: The book_count of this ItemCounts.
        :rtype: int
        """
        return self._book_count

    @book_count.setter
    def book_count(self, book_count: int):
        """Sets the book_count of this ItemCounts.

        Gets or sets the book count.  # noqa: E501

        :param book_count: The book_count of this ItemCounts.
        :type book_count: int
        """

        self._book_count = book_count

    @property
    def box_set_count(self) -> int:
        """Gets the box_set_count of this ItemCounts.

        Gets or sets the box set count.  # noqa: E501

        :return: The box_set_count of this ItemCounts.
        :rtype: int
        """
        return self._box_set_count

    @box_set_count.setter
    def box_set_count(self, box_set_count: int):
        """Sets the box_set_count of this ItemCounts.

        Gets or sets the box set count.  # noqa: E501

        :param box_set_count: The box_set_count of this ItemCounts.
        :type box_set_count: int
        """

        self._box_set_count = box_set_count

    @property
    def episode_count(self) -> int:
        """Gets the episode_count of this ItemCounts.

        Gets or sets the episode count.  # noqa: E501

        :return: The episode_count of this ItemCounts.
        :rtype: int
        """
        return self._episode_count

    @episode_count.setter
    def episode_count(self, episode_count: int):
        """Sets the episode_count of this ItemCounts.

        Gets or sets the episode count.  # noqa: E501

        :param episode_count: The episode_count of this ItemCounts.
        :type episode_count: int
        """

        self._episode_count = episode_count

    @property
    def item_count(self) -> int:
        """Gets the item_count of this ItemCounts.

        Gets or sets the item count.  # noqa: E501

        :return: The item_count of this ItemCounts.
        :rtype: int
        """
        return self._item_count

    @item_count.setter
    def item_count(self, item_count: int):
        """Sets the item_count of this ItemCounts.

        Gets or sets the item count.  # noqa: E501

        :param item_count: The item_count of this ItemCounts.
        :type item_count: int
        """

        self._item_count = item_count

    @property
    def movie_count(self) -> int:
        """Gets the movie_count of this ItemCounts.

        Gets or sets the movie count.  # noqa: E501

        :return: The movie_count of this ItemCounts.
        :rtype: int
        """
        return self._movie_count

    @movie_count.setter
    def movie_count(self, movie_count: int):
        """Sets the movie_count of this ItemCounts.

        Gets or sets the movie count.  # noqa: E501

        :param movie_count: The movie_count of this ItemCounts.
        :type movie_count: int
        """

        self._movie_count = movie_count

    @property
    def music_video_count(self) -> int:
        """Gets the music_video_count of this ItemCounts.

        Gets or sets the music video count.  # noqa: E501

        :return: The music_video_count of this ItemCounts.
        :rtype: int
        """
        return self._music_video_count

    @music_video_count.setter
    def music_video_count(self, music_video_count: int):
        """Sets the music_video_count of this ItemCounts.

        Gets or sets the music video count.  # noqa: E501

        :param music_video_count: The music_video_count of this ItemCounts.
        :type music_video_count: int
        """

        self._music_video_count = music_video_count

    @property
    def program_count(self) -> int:
        """Gets the program_count of this ItemCounts.

        Gets or sets the program count.  # noqa: E501

        :return: The program_count of this ItemCounts.
        :rtype: int
        """
        return self._program_count

    @program_count.setter
    def program_count(self, program_count: int):
        """Sets the program_count of this ItemCounts.

        Gets or sets the program count.  # noqa: E501

        :param program_count: The program_count of this ItemCounts.
        :type program_count: int
        """

        self._program_count = program_count

    @property
    def series_count(self) -> int:
        """Gets the series_count of this ItemCounts.

        Gets or sets the series count.  # noqa: E501

        :return: The series_count of this ItemCounts.
        :rtype: int
        """
        return self._series_count

    @series_count.setter
    def series_count(self, series_count: int):
        """Sets the series_count of this ItemCounts.

        Gets or sets the series count.  # noqa: E501

        :param series_count: The series_count of this ItemCounts.
        :type series_count: int
        """

        self._series_count = series_count

    @property
    def song_count(self) -> int:
        """Gets the song_count of this ItemCounts.

        Gets or sets the song count.  # noqa: E501

        :return: The song_count of this ItemCounts.
        :rtype: int
        """
        return self._song_count

    @song_count.setter
    def song_count(self, song_count: int):
        """Sets the song_count of this ItemCounts.

        Gets or sets the song count.  # noqa: E501

        :param song_count: The song_count of this ItemCounts.
        :type song_count: int
        """

        self._song_count = song_count

    @property
    def trailer_count(self) -> int:
        """Gets the trailer_count of this ItemCounts.

        Gets or sets the trailer count.  # noqa: E501

        :return: The trailer_count of this ItemCounts.
        :rtype: int
        """
        return self._trailer_count

    @trailer_count.setter
    def trailer_count(self, trailer_count: int):
        """Sets the trailer_count of this ItemCounts.

        Gets or sets the trailer count.  # noqa: E501

        :param trailer_count: The trailer_count of this ItemCounts.
        :type trailer_count: int
        """

        self._trailer_count = trailer_count
