from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_status import PluginStatus
from openapi_server.models.version import Version
from openapi_server import util

from openapi_server.models.plugin_status import PluginStatus  # noqa: E501
from openapi_server.models.version import Version  # noqa: E501

class PluginInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_uninstall=None, configuration_file_name=None, description=None, has_image=None, id=None, name=None, status=None, version=None):  # noqa: E501
        """PluginInfo - a model defined in OpenAPI

        :param can_uninstall: The can_uninstall of this PluginInfo.  # noqa: E501
        :type can_uninstall: bool
        :param configuration_file_name: The configuration_file_name of this PluginInfo.  # noqa: E501
        :type configuration_file_name: str
        :param description: The description of this PluginInfo.  # noqa: E501
        :type description: str
        :param has_image: The has_image of this PluginInfo.  # noqa: E501
        :type has_image: bool
        :param id: The id of this PluginInfo.  # noqa: E501
        :type id: str
        :param name: The name of this PluginInfo.  # noqa: E501
        :type name: str
        :param status: The status of this PluginInfo.  # noqa: E501
        :type status: PluginStatus
        :param version: The version of this PluginInfo.  # noqa: E501
        :type version: Version
        """
        self.openapi_types = {
            'can_uninstall': bool,
            'configuration_file_name': str,
            'description': str,
            'has_image': bool,
            'id': str,
            'name': str,
            'status': PluginStatus,
            'version': Version
        }

        self.attribute_map = {
            'can_uninstall': 'CanUninstall',
            'configuration_file_name': 'ConfigurationFileName',
            'description': 'Description',
            'has_image': 'HasImage',
            'id': 'Id',
            'name': 'Name',
            'status': 'Status',
            'version': 'Version'
        }

        self._can_uninstall = can_uninstall
        self._configuration_file_name = configuration_file_name
        self._description = description
        self._has_image = has_image
        self._id = id
        self._name = name
        self._status = status
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'PluginInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PluginInfo of this PluginInfo.  # noqa: E501
        :rtype: PluginInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_uninstall(self) -> bool:
        """Gets the can_uninstall of this PluginInfo.

        Gets or sets a value indicating whether the plugin can be uninstalled.  # noqa: E501

        :return: The can_uninstall of this PluginInfo.
        :rtype: bool
        """
        return self._can_uninstall

    @can_uninstall.setter
    def can_uninstall(self, can_uninstall: bool):
        """Sets the can_uninstall of this PluginInfo.

        Gets or sets a value indicating whether the plugin can be uninstalled.  # noqa: E501

        :param can_uninstall: The can_uninstall of this PluginInfo.
        :type can_uninstall: bool
        """

        self._can_uninstall = can_uninstall

    @property
    def configuration_file_name(self) -> str:
        """Gets the configuration_file_name of this PluginInfo.

        Gets or sets the name of the configuration file.  # noqa: E501

        :return: The configuration_file_name of this PluginInfo.
        :rtype: str
        """
        return self._configuration_file_name

    @configuration_file_name.setter
    def configuration_file_name(self, configuration_file_name: str):
        """Sets the configuration_file_name of this PluginInfo.

        Gets or sets the name of the configuration file.  # noqa: E501

        :param configuration_file_name: The configuration_file_name of this PluginInfo.
        :type configuration_file_name: str
        """

        self._configuration_file_name = configuration_file_name

    @property
    def description(self) -> str:
        """Gets the description of this PluginInfo.

        Gets or sets the description.  # noqa: E501

        :return: The description of this PluginInfo.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PluginInfo.

        Gets or sets the description.  # noqa: E501

        :param description: The description of this PluginInfo.
        :type description: str
        """

        self._description = description

    @property
    def has_image(self) -> bool:
        """Gets the has_image of this PluginInfo.

        Gets or sets a value indicating whether this plugin has a valid image.  # noqa: E501

        :return: The has_image of this PluginInfo.
        :rtype: bool
        """
        return self._has_image

    @has_image.setter
    def has_image(self, has_image: bool):
        """Sets the has_image of this PluginInfo.

        Gets or sets a value indicating whether this plugin has a valid image.  # noqa: E501

        :param has_image: The has_image of this PluginInfo.
        :type has_image: bool
        """

        self._has_image = has_image

    @property
    def id(self) -> str:
        """Gets the id of this PluginInfo.

        Gets or sets the unique id.  # noqa: E501

        :return: The id of this PluginInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this PluginInfo.

        Gets or sets the unique id.  # noqa: E501

        :param id: The id of this PluginInfo.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this PluginInfo.

        Gets or sets the name.  # noqa: E501

        :return: The name of this PluginInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PluginInfo.

        Gets or sets the name.  # noqa: E501

        :param name: The name of this PluginInfo.
        :type name: str
        """

        self._name = name

    @property
    def status(self) -> PluginStatus:
        """Gets the status of this PluginInfo.


        :return: The status of this PluginInfo.
        :rtype: PluginStatus
        """
        return self._status

    @status.setter
    def status(self, status: PluginStatus):
        """Sets the status of this PluginInfo.


        :param status: The status of this PluginInfo.
        :type status: PluginStatus
        """

        self._status = status

    @property
    def version(self) -> Version:
        """Gets the version of this PluginInfo.


        :return: The version of this PluginInfo.
        :rtype: Version
        """
        return self._version

    @version.setter
    def version(self, version: Version):
        """Sets the version of this PluginInfo.


        :param version: The version of this PluginInfo.
        :type version: Version
        """

        self._version = version
