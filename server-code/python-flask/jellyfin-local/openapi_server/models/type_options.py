from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.image_option import ImageOption
from openapi_server import util

from openapi_server.models.image_option import ImageOption  # noqa: E501

class TypeOptions(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, image_fetcher_order=None, image_fetchers=None, image_options=None, metadata_fetcher_order=None, metadata_fetchers=None, type=None):  # noqa: E501
        """TypeOptions - a model defined in OpenAPI

        :param image_fetcher_order: The image_fetcher_order of this TypeOptions.  # noqa: E501
        :type image_fetcher_order: List[str]
        :param image_fetchers: The image_fetchers of this TypeOptions.  # noqa: E501
        :type image_fetchers: List[str]
        :param image_options: The image_options of this TypeOptions.  # noqa: E501
        :type image_options: List[ImageOption]
        :param metadata_fetcher_order: The metadata_fetcher_order of this TypeOptions.  # noqa: E501
        :type metadata_fetcher_order: List[str]
        :param metadata_fetchers: The metadata_fetchers of this TypeOptions.  # noqa: E501
        :type metadata_fetchers: List[str]
        :param type: The type of this TypeOptions.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'image_fetcher_order': List[str],
            'image_fetchers': List[str],
            'image_options': List[ImageOption],
            'metadata_fetcher_order': List[str],
            'metadata_fetchers': List[str],
            'type': str
        }

        self.attribute_map = {
            'image_fetcher_order': 'ImageFetcherOrder',
            'image_fetchers': 'ImageFetchers',
            'image_options': 'ImageOptions',
            'metadata_fetcher_order': 'MetadataFetcherOrder',
            'metadata_fetchers': 'MetadataFetchers',
            'type': 'Type'
        }

        self._image_fetcher_order = image_fetcher_order
        self._image_fetchers = image_fetchers
        self._image_options = image_options
        self._metadata_fetcher_order = metadata_fetcher_order
        self._metadata_fetchers = metadata_fetchers
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'TypeOptions':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TypeOptions of this TypeOptions.  # noqa: E501
        :rtype: TypeOptions
        """
        return util.deserialize_model(dikt, cls)

    @property
    def image_fetcher_order(self) -> List[str]:
        """Gets the image_fetcher_order of this TypeOptions.


        :return: The image_fetcher_order of this TypeOptions.
        :rtype: List[str]
        """
        return self._image_fetcher_order

    @image_fetcher_order.setter
    def image_fetcher_order(self, image_fetcher_order: List[str]):
        """Sets the image_fetcher_order of this TypeOptions.


        :param image_fetcher_order: The image_fetcher_order of this TypeOptions.
        :type image_fetcher_order: List[str]
        """

        self._image_fetcher_order = image_fetcher_order

    @property
    def image_fetchers(self) -> List[str]:
        """Gets the image_fetchers of this TypeOptions.


        :return: The image_fetchers of this TypeOptions.
        :rtype: List[str]
        """
        return self._image_fetchers

    @image_fetchers.setter
    def image_fetchers(self, image_fetchers: List[str]):
        """Sets the image_fetchers of this TypeOptions.


        :param image_fetchers: The image_fetchers of this TypeOptions.
        :type image_fetchers: List[str]
        """

        self._image_fetchers = image_fetchers

    @property
    def image_options(self) -> List[ImageOption]:
        """Gets the image_options of this TypeOptions.


        :return: The image_options of this TypeOptions.
        :rtype: List[ImageOption]
        """
        return self._image_options

    @image_options.setter
    def image_options(self, image_options: List[ImageOption]):
        """Sets the image_options of this TypeOptions.


        :param image_options: The image_options of this TypeOptions.
        :type image_options: List[ImageOption]
        """

        self._image_options = image_options

    @property
    def metadata_fetcher_order(self) -> List[str]:
        """Gets the metadata_fetcher_order of this TypeOptions.


        :return: The metadata_fetcher_order of this TypeOptions.
        :rtype: List[str]
        """
        return self._metadata_fetcher_order

    @metadata_fetcher_order.setter
    def metadata_fetcher_order(self, metadata_fetcher_order: List[str]):
        """Sets the metadata_fetcher_order of this TypeOptions.


        :param metadata_fetcher_order: The metadata_fetcher_order of this TypeOptions.
        :type metadata_fetcher_order: List[str]
        """

        self._metadata_fetcher_order = metadata_fetcher_order

    @property
    def metadata_fetchers(self) -> List[str]:
        """Gets the metadata_fetchers of this TypeOptions.


        :return: The metadata_fetchers of this TypeOptions.
        :rtype: List[str]
        """
        return self._metadata_fetchers

    @metadata_fetchers.setter
    def metadata_fetchers(self, metadata_fetchers: List[str]):
        """Sets the metadata_fetchers of this TypeOptions.


        :param metadata_fetchers: The metadata_fetchers of this TypeOptions.
        :type metadata_fetchers: List[str]
        """

        self._metadata_fetchers = metadata_fetchers

    @property
    def type(self) -> str:
        """Gets the type of this TypeOptions.


        :return: The type of this TypeOptions.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this TypeOptions.


        :param type: The type of this TypeOptions.
        :type type: str
        """

        self._type = type
