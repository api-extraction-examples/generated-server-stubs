from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.subtitle_playback_mode import SubtitlePlaybackMode
from openapi_server import util

from openapi_server.models.subtitle_playback_mode import SubtitlePlaybackMode  # noqa: E501

class UserConfiguration(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, audio_language_preference=None, display_collections_view=None, display_missing_episodes=None, enable_local_password=None, enable_next_episode_auto_play=None, grouped_folders=None, hide_played_in_latest=None, latest_items_excludes=None, my_media_excludes=None, ordered_views=None, play_default_audio_track=None, remember_audio_selections=None, remember_subtitle_selections=None, subtitle_language_preference=None, subtitle_mode=None):  # noqa: E501
        """UserConfiguration - a model defined in OpenAPI

        :param audio_language_preference: The audio_language_preference of this UserConfiguration.  # noqa: E501
        :type audio_language_preference: str
        :param display_collections_view: The display_collections_view of this UserConfiguration.  # noqa: E501
        :type display_collections_view: bool
        :param display_missing_episodes: The display_missing_episodes of this UserConfiguration.  # noqa: E501
        :type display_missing_episodes: bool
        :param enable_local_password: The enable_local_password of this UserConfiguration.  # noqa: E501
        :type enable_local_password: bool
        :param enable_next_episode_auto_play: The enable_next_episode_auto_play of this UserConfiguration.  # noqa: E501
        :type enable_next_episode_auto_play: bool
        :param grouped_folders: The grouped_folders of this UserConfiguration.  # noqa: E501
        :type grouped_folders: List[str]
        :param hide_played_in_latest: The hide_played_in_latest of this UserConfiguration.  # noqa: E501
        :type hide_played_in_latest: bool
        :param latest_items_excludes: The latest_items_excludes of this UserConfiguration.  # noqa: E501
        :type latest_items_excludes: List[str]
        :param my_media_excludes: The my_media_excludes of this UserConfiguration.  # noqa: E501
        :type my_media_excludes: List[str]
        :param ordered_views: The ordered_views of this UserConfiguration.  # noqa: E501
        :type ordered_views: List[str]
        :param play_default_audio_track: The play_default_audio_track of this UserConfiguration.  # noqa: E501
        :type play_default_audio_track: bool
        :param remember_audio_selections: The remember_audio_selections of this UserConfiguration.  # noqa: E501
        :type remember_audio_selections: bool
        :param remember_subtitle_selections: The remember_subtitle_selections of this UserConfiguration.  # noqa: E501
        :type remember_subtitle_selections: bool
        :param subtitle_language_preference: The subtitle_language_preference of this UserConfiguration.  # noqa: E501
        :type subtitle_language_preference: str
        :param subtitle_mode: The subtitle_mode of this UserConfiguration.  # noqa: E501
        :type subtitle_mode: SubtitlePlaybackMode
        """
        self.openapi_types = {
            'audio_language_preference': str,
            'display_collections_view': bool,
            'display_missing_episodes': bool,
            'enable_local_password': bool,
            'enable_next_episode_auto_play': bool,
            'grouped_folders': List[str],
            'hide_played_in_latest': bool,
            'latest_items_excludes': List[str],
            'my_media_excludes': List[str],
            'ordered_views': List[str],
            'play_default_audio_track': bool,
            'remember_audio_selections': bool,
            'remember_subtitle_selections': bool,
            'subtitle_language_preference': str,
            'subtitle_mode': SubtitlePlaybackMode
        }

        self.attribute_map = {
            'audio_language_preference': 'AudioLanguagePreference',
            'display_collections_view': 'DisplayCollectionsView',
            'display_missing_episodes': 'DisplayMissingEpisodes',
            'enable_local_password': 'EnableLocalPassword',
            'enable_next_episode_auto_play': 'EnableNextEpisodeAutoPlay',
            'grouped_folders': 'GroupedFolders',
            'hide_played_in_latest': 'HidePlayedInLatest',
            'latest_items_excludes': 'LatestItemsExcludes',
            'my_media_excludes': 'MyMediaExcludes',
            'ordered_views': 'OrderedViews',
            'play_default_audio_track': 'PlayDefaultAudioTrack',
            'remember_audio_selections': 'RememberAudioSelections',
            'remember_subtitle_selections': 'RememberSubtitleSelections',
            'subtitle_language_preference': 'SubtitleLanguagePreference',
            'subtitle_mode': 'SubtitleMode'
        }

        self._audio_language_preference = audio_language_preference
        self._display_collections_view = display_collections_view
        self._display_missing_episodes = display_missing_episodes
        self._enable_local_password = enable_local_password
        self._enable_next_episode_auto_play = enable_next_episode_auto_play
        self._grouped_folders = grouped_folders
        self._hide_played_in_latest = hide_played_in_latest
        self._latest_items_excludes = latest_items_excludes
        self._my_media_excludes = my_media_excludes
        self._ordered_views = ordered_views
        self._play_default_audio_track = play_default_audio_track
        self._remember_audio_selections = remember_audio_selections
        self._remember_subtitle_selections = remember_subtitle_selections
        self._subtitle_language_preference = subtitle_language_preference
        self._subtitle_mode = subtitle_mode

    @classmethod
    def from_dict(cls, dikt) -> 'UserConfiguration':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserConfiguration of this UserConfiguration.  # noqa: E501
        :rtype: UserConfiguration
        """
        return util.deserialize_model(dikt, cls)

    @property
    def audio_language_preference(self) -> str:
        """Gets the audio_language_preference of this UserConfiguration.

        Gets or sets the audio language preference.  # noqa: E501

        :return: The audio_language_preference of this UserConfiguration.
        :rtype: str
        """
        return self._audio_language_preference

    @audio_language_preference.setter
    def audio_language_preference(self, audio_language_preference: str):
        """Sets the audio_language_preference of this UserConfiguration.

        Gets or sets the audio language preference.  # noqa: E501

        :param audio_language_preference: The audio_language_preference of this UserConfiguration.
        :type audio_language_preference: str
        """

        self._audio_language_preference = audio_language_preference

    @property
    def display_collections_view(self) -> bool:
        """Gets the display_collections_view of this UserConfiguration.


        :return: The display_collections_view of this UserConfiguration.
        :rtype: bool
        """
        return self._display_collections_view

    @display_collections_view.setter
    def display_collections_view(self, display_collections_view: bool):
        """Sets the display_collections_view of this UserConfiguration.


        :param display_collections_view: The display_collections_view of this UserConfiguration.
        :type display_collections_view: bool
        """

        self._display_collections_view = display_collections_view

    @property
    def display_missing_episodes(self) -> bool:
        """Gets the display_missing_episodes of this UserConfiguration.


        :return: The display_missing_episodes of this UserConfiguration.
        :rtype: bool
        """
        return self._display_missing_episodes

    @display_missing_episodes.setter
    def display_missing_episodes(self, display_missing_episodes: bool):
        """Sets the display_missing_episodes of this UserConfiguration.


        :param display_missing_episodes: The display_missing_episodes of this UserConfiguration.
        :type display_missing_episodes: bool
        """

        self._display_missing_episodes = display_missing_episodes

    @property
    def enable_local_password(self) -> bool:
        """Gets the enable_local_password of this UserConfiguration.


        :return: The enable_local_password of this UserConfiguration.
        :rtype: bool
        """
        return self._enable_local_password

    @enable_local_password.setter
    def enable_local_password(self, enable_local_password: bool):
        """Sets the enable_local_password of this UserConfiguration.


        :param enable_local_password: The enable_local_password of this UserConfiguration.
        :type enable_local_password: bool
        """

        self._enable_local_password = enable_local_password

    @property
    def enable_next_episode_auto_play(self) -> bool:
        """Gets the enable_next_episode_auto_play of this UserConfiguration.


        :return: The enable_next_episode_auto_play of this UserConfiguration.
        :rtype: bool
        """
        return self._enable_next_episode_auto_play

    @enable_next_episode_auto_play.setter
    def enable_next_episode_auto_play(self, enable_next_episode_auto_play: bool):
        """Sets the enable_next_episode_auto_play of this UserConfiguration.


        :param enable_next_episode_auto_play: The enable_next_episode_auto_play of this UserConfiguration.
        :type enable_next_episode_auto_play: bool
        """

        self._enable_next_episode_auto_play = enable_next_episode_auto_play

    @property
    def grouped_folders(self) -> List[str]:
        """Gets the grouped_folders of this UserConfiguration.


        :return: The grouped_folders of this UserConfiguration.
        :rtype: List[str]
        """
        return self._grouped_folders

    @grouped_folders.setter
    def grouped_folders(self, grouped_folders: List[str]):
        """Sets the grouped_folders of this UserConfiguration.


        :param grouped_folders: The grouped_folders of this UserConfiguration.
        :type grouped_folders: List[str]
        """

        self._grouped_folders = grouped_folders

    @property
    def hide_played_in_latest(self) -> bool:
        """Gets the hide_played_in_latest of this UserConfiguration.


        :return: The hide_played_in_latest of this UserConfiguration.
        :rtype: bool
        """
        return self._hide_played_in_latest

    @hide_played_in_latest.setter
    def hide_played_in_latest(self, hide_played_in_latest: bool):
        """Sets the hide_played_in_latest of this UserConfiguration.


        :param hide_played_in_latest: The hide_played_in_latest of this UserConfiguration.
        :type hide_played_in_latest: bool
        """

        self._hide_played_in_latest = hide_played_in_latest

    @property
    def latest_items_excludes(self) -> List[str]:
        """Gets the latest_items_excludes of this UserConfiguration.


        :return: The latest_items_excludes of this UserConfiguration.
        :rtype: List[str]
        """
        return self._latest_items_excludes

    @latest_items_excludes.setter
    def latest_items_excludes(self, latest_items_excludes: List[str]):
        """Sets the latest_items_excludes of this UserConfiguration.


        :param latest_items_excludes: The latest_items_excludes of this UserConfiguration.
        :type latest_items_excludes: List[str]
        """

        self._latest_items_excludes = latest_items_excludes

    @property
    def my_media_excludes(self) -> List[str]:
        """Gets the my_media_excludes of this UserConfiguration.


        :return: The my_media_excludes of this UserConfiguration.
        :rtype: List[str]
        """
        return self._my_media_excludes

    @my_media_excludes.setter
    def my_media_excludes(self, my_media_excludes: List[str]):
        """Sets the my_media_excludes of this UserConfiguration.


        :param my_media_excludes: The my_media_excludes of this UserConfiguration.
        :type my_media_excludes: List[str]
        """

        self._my_media_excludes = my_media_excludes

    @property
    def ordered_views(self) -> List[str]:
        """Gets the ordered_views of this UserConfiguration.


        :return: The ordered_views of this UserConfiguration.
        :rtype: List[str]
        """
        return self._ordered_views

    @ordered_views.setter
    def ordered_views(self, ordered_views: List[str]):
        """Sets the ordered_views of this UserConfiguration.


        :param ordered_views: The ordered_views of this UserConfiguration.
        :type ordered_views: List[str]
        """

        self._ordered_views = ordered_views

    @property
    def play_default_audio_track(self) -> bool:
        """Gets the play_default_audio_track of this UserConfiguration.

        Gets or sets a value indicating whether [play default audio track].  # noqa: E501

        :return: The play_default_audio_track of this UserConfiguration.
        :rtype: bool
        """
        return self._play_default_audio_track

    @play_default_audio_track.setter
    def play_default_audio_track(self, play_default_audio_track: bool):
        """Sets the play_default_audio_track of this UserConfiguration.

        Gets or sets a value indicating whether [play default audio track].  # noqa: E501

        :param play_default_audio_track: The play_default_audio_track of this UserConfiguration.
        :type play_default_audio_track: bool
        """

        self._play_default_audio_track = play_default_audio_track

    @property
    def remember_audio_selections(self) -> bool:
        """Gets the remember_audio_selections of this UserConfiguration.


        :return: The remember_audio_selections of this UserConfiguration.
        :rtype: bool
        """
        return self._remember_audio_selections

    @remember_audio_selections.setter
    def remember_audio_selections(self, remember_audio_selections: bool):
        """Sets the remember_audio_selections of this UserConfiguration.


        :param remember_audio_selections: The remember_audio_selections of this UserConfiguration.
        :type remember_audio_selections: bool
        """

        self._remember_audio_selections = remember_audio_selections

    @property
    def remember_subtitle_selections(self) -> bool:
        """Gets the remember_subtitle_selections of this UserConfiguration.


        :return: The remember_subtitle_selections of this UserConfiguration.
        :rtype: bool
        """
        return self._remember_subtitle_selections

    @remember_subtitle_selections.setter
    def remember_subtitle_selections(self, remember_subtitle_selections: bool):
        """Sets the remember_subtitle_selections of this UserConfiguration.


        :param remember_subtitle_selections: The remember_subtitle_selections of this UserConfiguration.
        :type remember_subtitle_selections: bool
        """

        self._remember_subtitle_selections = remember_subtitle_selections

    @property
    def subtitle_language_preference(self) -> str:
        """Gets the subtitle_language_preference of this UserConfiguration.

        Gets or sets the subtitle language preference.  # noqa: E501

        :return: The subtitle_language_preference of this UserConfiguration.
        :rtype: str
        """
        return self._subtitle_language_preference

    @subtitle_language_preference.setter
    def subtitle_language_preference(self, subtitle_language_preference: str):
        """Sets the subtitle_language_preference of this UserConfiguration.

        Gets or sets the subtitle language preference.  # noqa: E501

        :param subtitle_language_preference: The subtitle_language_preference of this UserConfiguration.
        :type subtitle_language_preference: str
        """

        self._subtitle_language_preference = subtitle_language_preference

    @property
    def subtitle_mode(self) -> SubtitlePlaybackMode:
        """Gets the subtitle_mode of this UserConfiguration.


        :return: The subtitle_mode of this UserConfiguration.
        :rtype: SubtitlePlaybackMode
        """
        return self._subtitle_mode

    @subtitle_mode.setter
    def subtitle_mode(self, subtitle_mode: SubtitlePlaybackMode):
        """Sets the subtitle_mode of this UserConfiguration.


        :param subtitle_mode: The subtitle_mode of this UserConfiguration.
        :type subtitle_mode: SubtitlePlaybackMode
        """

        self._subtitle_mode = subtitle_mode
