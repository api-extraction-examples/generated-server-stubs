from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.version import Version
from openapi_server import util

from openapi_server.models.version import Version  # noqa: E501

class VersionInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, version_number=None, changelog=None, checksum=None, repository_name=None, repository_url=None, source_url=None, target_abi=None, timestamp=None, version=None):  # noqa: E501
        """VersionInfo - a model defined in OpenAPI

        :param version_number: The version_number of this VersionInfo.  # noqa: E501
        :type version_number: Version
        :param changelog: The changelog of this VersionInfo.  # noqa: E501
        :type changelog: str
        :param checksum: The checksum of this VersionInfo.  # noqa: E501
        :type checksum: str
        :param repository_name: The repository_name of this VersionInfo.  # noqa: E501
        :type repository_name: str
        :param repository_url: The repository_url of this VersionInfo.  # noqa: E501
        :type repository_url: str
        :param source_url: The source_url of this VersionInfo.  # noqa: E501
        :type source_url: str
        :param target_abi: The target_abi of this VersionInfo.  # noqa: E501
        :type target_abi: str
        :param timestamp: The timestamp of this VersionInfo.  # noqa: E501
        :type timestamp: str
        :param version: The version of this VersionInfo.  # noqa: E501
        :type version: str
        """
        self.openapi_types = {
            'version_number': Version,
            'changelog': str,
            'checksum': str,
            'repository_name': str,
            'repository_url': str,
            'source_url': str,
            'target_abi': str,
            'timestamp': str,
            'version': str
        }

        self.attribute_map = {
            'version_number': 'VersionNumber',
            'changelog': 'changelog',
            'checksum': 'checksum',
            'repository_name': 'repositoryName',
            'repository_url': 'repositoryUrl',
            'source_url': 'sourceUrl',
            'target_abi': 'targetAbi',
            'timestamp': 'timestamp',
            'version': 'version'
        }

        self._version_number = version_number
        self._changelog = changelog
        self._checksum = checksum
        self._repository_name = repository_name
        self._repository_url = repository_url
        self._source_url = source_url
        self._target_abi = target_abi
        self._timestamp = timestamp
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'VersionInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VersionInfo of this VersionInfo.  # noqa: E501
        :rtype: VersionInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def version_number(self) -> Version:
        """Gets the version_number of this VersionInfo.


        :return: The version_number of this VersionInfo.
        :rtype: Version
        """
        return self._version_number

    @version_number.setter
    def version_number(self, version_number: Version):
        """Sets the version_number of this VersionInfo.


        :param version_number: The version_number of this VersionInfo.
        :type version_number: Version
        """

        self._version_number = version_number

    @property
    def changelog(self) -> str:
        """Gets the changelog of this VersionInfo.

        Gets or sets the changelog for this version.  # noqa: E501

        :return: The changelog of this VersionInfo.
        :rtype: str
        """
        return self._changelog

    @changelog.setter
    def changelog(self, changelog: str):
        """Sets the changelog of this VersionInfo.

        Gets or sets the changelog for this version.  # noqa: E501

        :param changelog: The changelog of this VersionInfo.
        :type changelog: str
        """

        self._changelog = changelog

    @property
    def checksum(self) -> str:
        """Gets the checksum of this VersionInfo.

        Gets or sets a checksum for the binary.  # noqa: E501

        :return: The checksum of this VersionInfo.
        :rtype: str
        """
        return self._checksum

    @checksum.setter
    def checksum(self, checksum: str):
        """Sets the checksum of this VersionInfo.

        Gets or sets a checksum for the binary.  # noqa: E501

        :param checksum: The checksum of this VersionInfo.
        :type checksum: str
        """

        self._checksum = checksum

    @property
    def repository_name(self) -> str:
        """Gets the repository_name of this VersionInfo.

        Gets or sets the repository name.  # noqa: E501

        :return: The repository_name of this VersionInfo.
        :rtype: str
        """
        return self._repository_name

    @repository_name.setter
    def repository_name(self, repository_name: str):
        """Sets the repository_name of this VersionInfo.

        Gets or sets the repository name.  # noqa: E501

        :param repository_name: The repository_name of this VersionInfo.
        :type repository_name: str
        """

        self._repository_name = repository_name

    @property
    def repository_url(self) -> str:
        """Gets the repository_url of this VersionInfo.

        Gets or sets the repository url.  # noqa: E501

        :return: The repository_url of this VersionInfo.
        :rtype: str
        """
        return self._repository_url

    @repository_url.setter
    def repository_url(self, repository_url: str):
        """Sets the repository_url of this VersionInfo.

        Gets or sets the repository url.  # noqa: E501

        :param repository_url: The repository_url of this VersionInfo.
        :type repository_url: str
        """

        self._repository_url = repository_url

    @property
    def source_url(self) -> str:
        """Gets the source_url of this VersionInfo.

        Gets or sets the source URL.  # noqa: E501

        :return: The source_url of this VersionInfo.
        :rtype: str
        """
        return self._source_url

    @source_url.setter
    def source_url(self, source_url: str):
        """Sets the source_url of this VersionInfo.

        Gets or sets the source URL.  # noqa: E501

        :param source_url: The source_url of this VersionInfo.
        :type source_url: str
        """

        self._source_url = source_url

    @property
    def target_abi(self) -> str:
        """Gets the target_abi of this VersionInfo.

        Gets or sets the ABI that this version was built against.  # noqa: E501

        :return: The target_abi of this VersionInfo.
        :rtype: str
        """
        return self._target_abi

    @target_abi.setter
    def target_abi(self, target_abi: str):
        """Sets the target_abi of this VersionInfo.

        Gets or sets the ABI that this version was built against.  # noqa: E501

        :param target_abi: The target_abi of this VersionInfo.
        :type target_abi: str
        """

        self._target_abi = target_abi

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this VersionInfo.

        Gets or sets a timestamp of when the binary was built.  # noqa: E501

        :return: The timestamp of this VersionInfo.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this VersionInfo.

        Gets or sets a timestamp of when the binary was built.  # noqa: E501

        :param timestamp: The timestamp of this VersionInfo.
        :type timestamp: str
        """

        self._timestamp = timestamp

    @property
    def version(self) -> str:
        """Gets the version of this VersionInfo.

        Gets or sets the version.  # noqa: E501

        :return: The version of this VersionInfo.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version: str):
        """Sets the version of this VersionInfo.

        Gets or sets the version.  # noqa: E501

        :param version: The version of this VersionInfo.
        :type version: str
        """

        self._version = version
