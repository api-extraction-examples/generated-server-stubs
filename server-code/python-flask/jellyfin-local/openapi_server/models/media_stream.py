from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.media_stream_type import MediaStreamType
from openapi_server.models.subtitle_delivery_method import SubtitleDeliveryMethod
from openapi_server import util

from openapi_server.models.media_stream_type import MediaStreamType  # noqa: E501
from openapi_server.models.subtitle_delivery_method import SubtitleDeliveryMethod  # noqa: E501

class MediaStream(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aspect_ratio=None, average_frame_rate=None, bit_depth=None, bit_rate=None, channel_layout=None, channels=None, codec=None, codec_tag=None, codec_time_base=None, color_primaries=None, color_range=None, color_space=None, color_transfer=None, comment=None, delivery_method=None, delivery_url=None, display_title=None, height=None, index=None, is_avc=None, is_anamorphic=None, is_default=None, is_external=None, is_external_url=None, is_forced=None, is_interlaced=None, is_text_subtitle_stream=None, language=None, level=None, nal_length_size=None, packet_length=None, path=None, pixel_format=None, profile=None, real_frame_rate=None, ref_frames=None, sample_rate=None, score=None, supports_external_stream=None, time_base=None, title=None, type=None, video_range=None, width=None, localized_default=None, localized_forced=None, localized_undefined=None):  # noqa: E501
        """MediaStream - a model defined in OpenAPI

        :param aspect_ratio: The aspect_ratio of this MediaStream.  # noqa: E501
        :type aspect_ratio: str
        :param average_frame_rate: The average_frame_rate of this MediaStream.  # noqa: E501
        :type average_frame_rate: float
        :param bit_depth: The bit_depth of this MediaStream.  # noqa: E501
        :type bit_depth: int
        :param bit_rate: The bit_rate of this MediaStream.  # noqa: E501
        :type bit_rate: int
        :param channel_layout: The channel_layout of this MediaStream.  # noqa: E501
        :type channel_layout: str
        :param channels: The channels of this MediaStream.  # noqa: E501
        :type channels: int
        :param codec: The codec of this MediaStream.  # noqa: E501
        :type codec: str
        :param codec_tag: The codec_tag of this MediaStream.  # noqa: E501
        :type codec_tag: str
        :param codec_time_base: The codec_time_base of this MediaStream.  # noqa: E501
        :type codec_time_base: str
        :param color_primaries: The color_primaries of this MediaStream.  # noqa: E501
        :type color_primaries: str
        :param color_range: The color_range of this MediaStream.  # noqa: E501
        :type color_range: str
        :param color_space: The color_space of this MediaStream.  # noqa: E501
        :type color_space: str
        :param color_transfer: The color_transfer of this MediaStream.  # noqa: E501
        :type color_transfer: str
        :param comment: The comment of this MediaStream.  # noqa: E501
        :type comment: str
        :param delivery_method: The delivery_method of this MediaStream.  # noqa: E501
        :type delivery_method: SubtitleDeliveryMethod
        :param delivery_url: The delivery_url of this MediaStream.  # noqa: E501
        :type delivery_url: str
        :param display_title: The display_title of this MediaStream.  # noqa: E501
        :type display_title: str
        :param height: The height of this MediaStream.  # noqa: E501
        :type height: int
        :param index: The index of this MediaStream.  # noqa: E501
        :type index: int
        :param is_avc: The is_avc of this MediaStream.  # noqa: E501
        :type is_avc: bool
        :param is_anamorphic: The is_anamorphic of this MediaStream.  # noqa: E501
        :type is_anamorphic: bool
        :param is_default: The is_default of this MediaStream.  # noqa: E501
        :type is_default: bool
        :param is_external: The is_external of this MediaStream.  # noqa: E501
        :type is_external: bool
        :param is_external_url: The is_external_url of this MediaStream.  # noqa: E501
        :type is_external_url: bool
        :param is_forced: The is_forced of this MediaStream.  # noqa: E501
        :type is_forced: bool
        :param is_interlaced: The is_interlaced of this MediaStream.  # noqa: E501
        :type is_interlaced: bool
        :param is_text_subtitle_stream: The is_text_subtitle_stream of this MediaStream.  # noqa: E501
        :type is_text_subtitle_stream: bool
        :param language: The language of this MediaStream.  # noqa: E501
        :type language: str
        :param level: The level of this MediaStream.  # noqa: E501
        :type level: float
        :param nal_length_size: The nal_length_size of this MediaStream.  # noqa: E501
        :type nal_length_size: str
        :param packet_length: The packet_length of this MediaStream.  # noqa: E501
        :type packet_length: int
        :param path: The path of this MediaStream.  # noqa: E501
        :type path: str
        :param pixel_format: The pixel_format of this MediaStream.  # noqa: E501
        :type pixel_format: str
        :param profile: The profile of this MediaStream.  # noqa: E501
        :type profile: str
        :param real_frame_rate: The real_frame_rate of this MediaStream.  # noqa: E501
        :type real_frame_rate: float
        :param ref_frames: The ref_frames of this MediaStream.  # noqa: E501
        :type ref_frames: int
        :param sample_rate: The sample_rate of this MediaStream.  # noqa: E501
        :type sample_rate: int
        :param score: The score of this MediaStream.  # noqa: E501
        :type score: int
        :param supports_external_stream: The supports_external_stream of this MediaStream.  # noqa: E501
        :type supports_external_stream: bool
        :param time_base: The time_base of this MediaStream.  # noqa: E501
        :type time_base: str
        :param title: The title of this MediaStream.  # noqa: E501
        :type title: str
        :param type: The type of this MediaStream.  # noqa: E501
        :type type: MediaStreamType
        :param video_range: The video_range of this MediaStream.  # noqa: E501
        :type video_range: str
        :param width: The width of this MediaStream.  # noqa: E501
        :type width: int
        :param localized_default: The localized_default of this MediaStream.  # noqa: E501
        :type localized_default: str
        :param localized_forced: The localized_forced of this MediaStream.  # noqa: E501
        :type localized_forced: str
        :param localized_undefined: The localized_undefined of this MediaStream.  # noqa: E501
        :type localized_undefined: str
        """
        self.openapi_types = {
            'aspect_ratio': str,
            'average_frame_rate': float,
            'bit_depth': int,
            'bit_rate': int,
            'channel_layout': str,
            'channels': int,
            'codec': str,
            'codec_tag': str,
            'codec_time_base': str,
            'color_primaries': str,
            'color_range': str,
            'color_space': str,
            'color_transfer': str,
            'comment': str,
            'delivery_method': SubtitleDeliveryMethod,
            'delivery_url': str,
            'display_title': str,
            'height': int,
            'index': int,
            'is_avc': bool,
            'is_anamorphic': bool,
            'is_default': bool,
            'is_external': bool,
            'is_external_url': bool,
            'is_forced': bool,
            'is_interlaced': bool,
            'is_text_subtitle_stream': bool,
            'language': str,
            'level': float,
            'nal_length_size': str,
            'packet_length': int,
            'path': str,
            'pixel_format': str,
            'profile': str,
            'real_frame_rate': float,
            'ref_frames': int,
            'sample_rate': int,
            'score': int,
            'supports_external_stream': bool,
            'time_base': str,
            'title': str,
            'type': MediaStreamType,
            'video_range': str,
            'width': int,
            'localized_default': str,
            'localized_forced': str,
            'localized_undefined': str
        }

        self.attribute_map = {
            'aspect_ratio': 'AspectRatio',
            'average_frame_rate': 'AverageFrameRate',
            'bit_depth': 'BitDepth',
            'bit_rate': 'BitRate',
            'channel_layout': 'ChannelLayout',
            'channels': 'Channels',
            'codec': 'Codec',
            'codec_tag': 'CodecTag',
            'codec_time_base': 'CodecTimeBase',
            'color_primaries': 'ColorPrimaries',
            'color_range': 'ColorRange',
            'color_space': 'ColorSpace',
            'color_transfer': 'ColorTransfer',
            'comment': 'Comment',
            'delivery_method': 'DeliveryMethod',
            'delivery_url': 'DeliveryUrl',
            'display_title': 'DisplayTitle',
            'height': 'Height',
            'index': 'Index',
            'is_avc': 'IsAVC',
            'is_anamorphic': 'IsAnamorphic',
            'is_default': 'IsDefault',
            'is_external': 'IsExternal',
            'is_external_url': 'IsExternalUrl',
            'is_forced': 'IsForced',
            'is_interlaced': 'IsInterlaced',
            'is_text_subtitle_stream': 'IsTextSubtitleStream',
            'language': 'Language',
            'level': 'Level',
            'nal_length_size': 'NalLengthSize',
            'packet_length': 'PacketLength',
            'path': 'Path',
            'pixel_format': 'PixelFormat',
            'profile': 'Profile',
            'real_frame_rate': 'RealFrameRate',
            'ref_frames': 'RefFrames',
            'sample_rate': 'SampleRate',
            'score': 'Score',
            'supports_external_stream': 'SupportsExternalStream',
            'time_base': 'TimeBase',
            'title': 'Title',
            'type': 'Type',
            'video_range': 'VideoRange',
            'width': 'Width',
            'localized_default': 'localizedDefault',
            'localized_forced': 'localizedForced',
            'localized_undefined': 'localizedUndefined'
        }

        self._aspect_ratio = aspect_ratio
        self._average_frame_rate = average_frame_rate
        self._bit_depth = bit_depth
        self._bit_rate = bit_rate
        self._channel_layout = channel_layout
        self._channels = channels
        self._codec = codec
        self._codec_tag = codec_tag
        self._codec_time_base = codec_time_base
        self._color_primaries = color_primaries
        self._color_range = color_range
        self._color_space = color_space
        self._color_transfer = color_transfer
        self._comment = comment
        self._delivery_method = delivery_method
        self._delivery_url = delivery_url
        self._display_title = display_title
        self._height = height
        self._index = index
        self._is_avc = is_avc
        self._is_anamorphic = is_anamorphic
        self._is_default = is_default
        self._is_external = is_external
        self._is_external_url = is_external_url
        self._is_forced = is_forced
        self._is_interlaced = is_interlaced
        self._is_text_subtitle_stream = is_text_subtitle_stream
        self._language = language
        self._level = level
        self._nal_length_size = nal_length_size
        self._packet_length = packet_length
        self._path = path
        self._pixel_format = pixel_format
        self._profile = profile
        self._real_frame_rate = real_frame_rate
        self._ref_frames = ref_frames
        self._sample_rate = sample_rate
        self._score = score
        self._supports_external_stream = supports_external_stream
        self._time_base = time_base
        self._title = title
        self._type = type
        self._video_range = video_range
        self._width = width
        self._localized_default = localized_default
        self._localized_forced = localized_forced
        self._localized_undefined = localized_undefined

    @classmethod
    def from_dict(cls, dikt) -> 'MediaStream':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MediaStream of this MediaStream.  # noqa: E501
        :rtype: MediaStream
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aspect_ratio(self) -> str:
        """Gets the aspect_ratio of this MediaStream.

        Gets or sets the aspect ratio.  # noqa: E501

        :return: The aspect_ratio of this MediaStream.
        :rtype: str
        """
        return self._aspect_ratio

    @aspect_ratio.setter
    def aspect_ratio(self, aspect_ratio: str):
        """Sets the aspect_ratio of this MediaStream.

        Gets or sets the aspect ratio.  # noqa: E501

        :param aspect_ratio: The aspect_ratio of this MediaStream.
        :type aspect_ratio: str
        """

        self._aspect_ratio = aspect_ratio

    @property
    def average_frame_rate(self) -> float:
        """Gets the average_frame_rate of this MediaStream.

        Gets or sets the average frame rate.  # noqa: E501

        :return: The average_frame_rate of this MediaStream.
        :rtype: float
        """
        return self._average_frame_rate

    @average_frame_rate.setter
    def average_frame_rate(self, average_frame_rate: float):
        """Sets the average_frame_rate of this MediaStream.

        Gets or sets the average frame rate.  # noqa: E501

        :param average_frame_rate: The average_frame_rate of this MediaStream.
        :type average_frame_rate: float
        """

        self._average_frame_rate = average_frame_rate

    @property
    def bit_depth(self) -> int:
        """Gets the bit_depth of this MediaStream.

        Gets or sets the bit depth.  # noqa: E501

        :return: The bit_depth of this MediaStream.
        :rtype: int
        """
        return self._bit_depth

    @bit_depth.setter
    def bit_depth(self, bit_depth: int):
        """Sets the bit_depth of this MediaStream.

        Gets or sets the bit depth.  # noqa: E501

        :param bit_depth: The bit_depth of this MediaStream.
        :type bit_depth: int
        """

        self._bit_depth = bit_depth

    @property
    def bit_rate(self) -> int:
        """Gets the bit_rate of this MediaStream.

        Gets or sets the bit rate.  # noqa: E501

        :return: The bit_rate of this MediaStream.
        :rtype: int
        """
        return self._bit_rate

    @bit_rate.setter
    def bit_rate(self, bit_rate: int):
        """Sets the bit_rate of this MediaStream.

        Gets or sets the bit rate.  # noqa: E501

        :param bit_rate: The bit_rate of this MediaStream.
        :type bit_rate: int
        """

        self._bit_rate = bit_rate

    @property
    def channel_layout(self) -> str:
        """Gets the channel_layout of this MediaStream.

        Gets or sets the channel layout.  # noqa: E501

        :return: The channel_layout of this MediaStream.
        :rtype: str
        """
        return self._channel_layout

    @channel_layout.setter
    def channel_layout(self, channel_layout: str):
        """Sets the channel_layout of this MediaStream.

        Gets or sets the channel layout.  # noqa: E501

        :param channel_layout: The channel_layout of this MediaStream.
        :type channel_layout: str
        """

        self._channel_layout = channel_layout

    @property
    def channels(self) -> int:
        """Gets the channels of this MediaStream.

        Gets or sets the channels.  # noqa: E501

        :return: The channels of this MediaStream.
        :rtype: int
        """
        return self._channels

    @channels.setter
    def channels(self, channels: int):
        """Sets the channels of this MediaStream.

        Gets or sets the channels.  # noqa: E501

        :param channels: The channels of this MediaStream.
        :type channels: int
        """

        self._channels = channels

    @property
    def codec(self) -> str:
        """Gets the codec of this MediaStream.

        Gets or sets the codec.  # noqa: E501

        :return: The codec of this MediaStream.
        :rtype: str
        """
        return self._codec

    @codec.setter
    def codec(self, codec: str):
        """Sets the codec of this MediaStream.

        Gets or sets the codec.  # noqa: E501

        :param codec: The codec of this MediaStream.
        :type codec: str
        """

        self._codec = codec

    @property
    def codec_tag(self) -> str:
        """Gets the codec_tag of this MediaStream.

        Gets or sets the codec tag.  # noqa: E501

        :return: The codec_tag of this MediaStream.
        :rtype: str
        """
        return self._codec_tag

    @codec_tag.setter
    def codec_tag(self, codec_tag: str):
        """Sets the codec_tag of this MediaStream.

        Gets or sets the codec tag.  # noqa: E501

        :param codec_tag: The codec_tag of this MediaStream.
        :type codec_tag: str
        """

        self._codec_tag = codec_tag

    @property
    def codec_time_base(self) -> str:
        """Gets the codec_time_base of this MediaStream.

        Gets or sets the codec time base.  # noqa: E501

        :return: The codec_time_base of this MediaStream.
        :rtype: str
        """
        return self._codec_time_base

    @codec_time_base.setter
    def codec_time_base(self, codec_time_base: str):
        """Sets the codec_time_base of this MediaStream.

        Gets or sets the codec time base.  # noqa: E501

        :param codec_time_base: The codec_time_base of this MediaStream.
        :type codec_time_base: str
        """

        self._codec_time_base = codec_time_base

    @property
    def color_primaries(self) -> str:
        """Gets the color_primaries of this MediaStream.

        Gets or sets the color primaries.  # noqa: E501

        :return: The color_primaries of this MediaStream.
        :rtype: str
        """
        return self._color_primaries

    @color_primaries.setter
    def color_primaries(self, color_primaries: str):
        """Sets the color_primaries of this MediaStream.

        Gets or sets the color primaries.  # noqa: E501

        :param color_primaries: The color_primaries of this MediaStream.
        :type color_primaries: str
        """

        self._color_primaries = color_primaries

    @property
    def color_range(self) -> str:
        """Gets the color_range of this MediaStream.

        Gets or sets the color range.  # noqa: E501

        :return: The color_range of this MediaStream.
        :rtype: str
        """
        return self._color_range

    @color_range.setter
    def color_range(self, color_range: str):
        """Sets the color_range of this MediaStream.

        Gets or sets the color range.  # noqa: E501

        :param color_range: The color_range of this MediaStream.
        :type color_range: str
        """

        self._color_range = color_range

    @property
    def color_space(self) -> str:
        """Gets the color_space of this MediaStream.

        Gets or sets the color space.  # noqa: E501

        :return: The color_space of this MediaStream.
        :rtype: str
        """
        return self._color_space

    @color_space.setter
    def color_space(self, color_space: str):
        """Sets the color_space of this MediaStream.

        Gets or sets the color space.  # noqa: E501

        :param color_space: The color_space of this MediaStream.
        :type color_space: str
        """

        self._color_space = color_space

    @property
    def color_transfer(self) -> str:
        """Gets the color_transfer of this MediaStream.

        Gets or sets the color transfer.  # noqa: E501

        :return: The color_transfer of this MediaStream.
        :rtype: str
        """
        return self._color_transfer

    @color_transfer.setter
    def color_transfer(self, color_transfer: str):
        """Sets the color_transfer of this MediaStream.

        Gets or sets the color transfer.  # noqa: E501

        :param color_transfer: The color_transfer of this MediaStream.
        :type color_transfer: str
        """

        self._color_transfer = color_transfer

    @property
    def comment(self) -> str:
        """Gets the comment of this MediaStream.

        Gets or sets the comment.  # noqa: E501

        :return: The comment of this MediaStream.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this MediaStream.

        Gets or sets the comment.  # noqa: E501

        :param comment: The comment of this MediaStream.
        :type comment: str
        """

        self._comment = comment

    @property
    def delivery_method(self) -> SubtitleDeliveryMethod:
        """Gets the delivery_method of this MediaStream.


        :return: The delivery_method of this MediaStream.
        :rtype: SubtitleDeliveryMethod
        """
        return self._delivery_method

    @delivery_method.setter
    def delivery_method(self, delivery_method: SubtitleDeliveryMethod):
        """Sets the delivery_method of this MediaStream.


        :param delivery_method: The delivery_method of this MediaStream.
        :type delivery_method: SubtitleDeliveryMethod
        """

        self._delivery_method = delivery_method

    @property
    def delivery_url(self) -> str:
        """Gets the delivery_url of this MediaStream.

        Gets or sets the delivery URL.  # noqa: E501

        :return: The delivery_url of this MediaStream.
        :rtype: str
        """
        return self._delivery_url

    @delivery_url.setter
    def delivery_url(self, delivery_url: str):
        """Sets the delivery_url of this MediaStream.

        Gets or sets the delivery URL.  # noqa: E501

        :param delivery_url: The delivery_url of this MediaStream.
        :type delivery_url: str
        """

        self._delivery_url = delivery_url

    @property
    def display_title(self) -> str:
        """Gets the display_title of this MediaStream.


        :return: The display_title of this MediaStream.
        :rtype: str
        """
        return self._display_title

    @display_title.setter
    def display_title(self, display_title: str):
        """Sets the display_title of this MediaStream.


        :param display_title: The display_title of this MediaStream.
        :type display_title: str
        """

        self._display_title = display_title

    @property
    def height(self) -> int:
        """Gets the height of this MediaStream.

        Gets or sets the height.  # noqa: E501

        :return: The height of this MediaStream.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height: int):
        """Sets the height of this MediaStream.

        Gets or sets the height.  # noqa: E501

        :param height: The height of this MediaStream.
        :type height: int
        """

        self._height = height

    @property
    def index(self) -> int:
        """Gets the index of this MediaStream.

        Gets or sets the index.  # noqa: E501

        :return: The index of this MediaStream.
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index: int):
        """Sets the index of this MediaStream.

        Gets or sets the index.  # noqa: E501

        :param index: The index of this MediaStream.
        :type index: int
        """

        self._index = index

    @property
    def is_avc(self) -> bool:
        """Gets the is_avc of this MediaStream.


        :return: The is_avc of this MediaStream.
        :rtype: bool
        """
        return self._is_avc

    @is_avc.setter
    def is_avc(self, is_avc: bool):
        """Sets the is_avc of this MediaStream.


        :param is_avc: The is_avc of this MediaStream.
        :type is_avc: bool
        """

        self._is_avc = is_avc

    @property
    def is_anamorphic(self) -> bool:
        """Gets the is_anamorphic of this MediaStream.

        Gets a value indicating whether this instance is anamorphic.  # noqa: E501

        :return: The is_anamorphic of this MediaStream.
        :rtype: bool
        """
        return self._is_anamorphic

    @is_anamorphic.setter
    def is_anamorphic(self, is_anamorphic: bool):
        """Sets the is_anamorphic of this MediaStream.

        Gets a value indicating whether this instance is anamorphic.  # noqa: E501

        :param is_anamorphic: The is_anamorphic of this MediaStream.
        :type is_anamorphic: bool
        """

        self._is_anamorphic = is_anamorphic

    @property
    def is_default(self) -> bool:
        """Gets the is_default of this MediaStream.

        Gets or sets a value indicating whether this instance is default.  # noqa: E501

        :return: The is_default of this MediaStream.
        :rtype: bool
        """
        return self._is_default

    @is_default.setter
    def is_default(self, is_default: bool):
        """Sets the is_default of this MediaStream.

        Gets or sets a value indicating whether this instance is default.  # noqa: E501

        :param is_default: The is_default of this MediaStream.
        :type is_default: bool
        """

        self._is_default = is_default

    @property
    def is_external(self) -> bool:
        """Gets the is_external of this MediaStream.

        Gets or sets a value indicating whether this instance is external.  # noqa: E501

        :return: The is_external of this MediaStream.
        :rtype: bool
        """
        return self._is_external

    @is_external.setter
    def is_external(self, is_external: bool):
        """Sets the is_external of this MediaStream.

        Gets or sets a value indicating whether this instance is external.  # noqa: E501

        :param is_external: The is_external of this MediaStream.
        :type is_external: bool
        """

        self._is_external = is_external

    @property
    def is_external_url(self) -> bool:
        """Gets the is_external_url of this MediaStream.

        Gets or sets a value indicating whether this instance is external URL.  # noqa: E501

        :return: The is_external_url of this MediaStream.
        :rtype: bool
        """
        return self._is_external_url

    @is_external_url.setter
    def is_external_url(self, is_external_url: bool):
        """Sets the is_external_url of this MediaStream.

        Gets or sets a value indicating whether this instance is external URL.  # noqa: E501

        :param is_external_url: The is_external_url of this MediaStream.
        :type is_external_url: bool
        """

        self._is_external_url = is_external_url

    @property
    def is_forced(self) -> bool:
        """Gets the is_forced of this MediaStream.

        Gets or sets a value indicating whether this instance is forced.  # noqa: E501

        :return: The is_forced of this MediaStream.
        :rtype: bool
        """
        return self._is_forced

    @is_forced.setter
    def is_forced(self, is_forced: bool):
        """Sets the is_forced of this MediaStream.

        Gets or sets a value indicating whether this instance is forced.  # noqa: E501

        :param is_forced: The is_forced of this MediaStream.
        :type is_forced: bool
        """

        self._is_forced = is_forced

    @property
    def is_interlaced(self) -> bool:
        """Gets the is_interlaced of this MediaStream.

        Gets or sets a value indicating whether this instance is interlaced.  # noqa: E501

        :return: The is_interlaced of this MediaStream.
        :rtype: bool
        """
        return self._is_interlaced

    @is_interlaced.setter
    def is_interlaced(self, is_interlaced: bool):
        """Sets the is_interlaced of this MediaStream.

        Gets or sets a value indicating whether this instance is interlaced.  # noqa: E501

        :param is_interlaced: The is_interlaced of this MediaStream.
        :type is_interlaced: bool
        """

        self._is_interlaced = is_interlaced

    @property
    def is_text_subtitle_stream(self) -> bool:
        """Gets the is_text_subtitle_stream of this MediaStream.


        :return: The is_text_subtitle_stream of this MediaStream.
        :rtype: bool
        """
        return self._is_text_subtitle_stream

    @is_text_subtitle_stream.setter
    def is_text_subtitle_stream(self, is_text_subtitle_stream: bool):
        """Sets the is_text_subtitle_stream of this MediaStream.


        :param is_text_subtitle_stream: The is_text_subtitle_stream of this MediaStream.
        :type is_text_subtitle_stream: bool
        """

        self._is_text_subtitle_stream = is_text_subtitle_stream

    @property
    def language(self) -> str:
        """Gets the language of this MediaStream.

        Gets or sets the language.  # noqa: E501

        :return: The language of this MediaStream.
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language: str):
        """Sets the language of this MediaStream.

        Gets or sets the language.  # noqa: E501

        :param language: The language of this MediaStream.
        :type language: str
        """

        self._language = language

    @property
    def level(self) -> float:
        """Gets the level of this MediaStream.

        Gets or sets the level.  # noqa: E501

        :return: The level of this MediaStream.
        :rtype: float
        """
        return self._level

    @level.setter
    def level(self, level: float):
        """Sets the level of this MediaStream.

        Gets or sets the level.  # noqa: E501

        :param level: The level of this MediaStream.
        :type level: float
        """

        self._level = level

    @property
    def nal_length_size(self) -> str:
        """Gets the nal_length_size of this MediaStream.


        :return: The nal_length_size of this MediaStream.
        :rtype: str
        """
        return self._nal_length_size

    @nal_length_size.setter
    def nal_length_size(self, nal_length_size: str):
        """Sets the nal_length_size of this MediaStream.


        :param nal_length_size: The nal_length_size of this MediaStream.
        :type nal_length_size: str
        """

        self._nal_length_size = nal_length_size

    @property
    def packet_length(self) -> int:
        """Gets the packet_length of this MediaStream.

        Gets or sets the length of the packet.  # noqa: E501

        :return: The packet_length of this MediaStream.
        :rtype: int
        """
        return self._packet_length

    @packet_length.setter
    def packet_length(self, packet_length: int):
        """Sets the packet_length of this MediaStream.

        Gets or sets the length of the packet.  # noqa: E501

        :param packet_length: The packet_length of this MediaStream.
        :type packet_length: int
        """

        self._packet_length = packet_length

    @property
    def path(self) -> str:
        """Gets the path of this MediaStream.

        Gets or sets the filename.  # noqa: E501

        :return: The path of this MediaStream.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this MediaStream.

        Gets or sets the filename.  # noqa: E501

        :param path: The path of this MediaStream.
        :type path: str
        """

        self._path = path

    @property
    def pixel_format(self) -> str:
        """Gets the pixel_format of this MediaStream.

        Gets or sets the pixel format.  # noqa: E501

        :return: The pixel_format of this MediaStream.
        :rtype: str
        """
        return self._pixel_format

    @pixel_format.setter
    def pixel_format(self, pixel_format: str):
        """Sets the pixel_format of this MediaStream.

        Gets or sets the pixel format.  # noqa: E501

        :param pixel_format: The pixel_format of this MediaStream.
        :type pixel_format: str
        """

        self._pixel_format = pixel_format

    @property
    def profile(self) -> str:
        """Gets the profile of this MediaStream.

        Gets or sets the profile.  # noqa: E501

        :return: The profile of this MediaStream.
        :rtype: str
        """
        return self._profile

    @profile.setter
    def profile(self, profile: str):
        """Sets the profile of this MediaStream.

        Gets or sets the profile.  # noqa: E501

        :param profile: The profile of this MediaStream.
        :type profile: str
        """

        self._profile = profile

    @property
    def real_frame_rate(self) -> float:
        """Gets the real_frame_rate of this MediaStream.

        Gets or sets the real frame rate.  # noqa: E501

        :return: The real_frame_rate of this MediaStream.
        :rtype: float
        """
        return self._real_frame_rate

    @real_frame_rate.setter
    def real_frame_rate(self, real_frame_rate: float):
        """Sets the real_frame_rate of this MediaStream.

        Gets or sets the real frame rate.  # noqa: E501

        :param real_frame_rate: The real_frame_rate of this MediaStream.
        :type real_frame_rate: float
        """

        self._real_frame_rate = real_frame_rate

    @property
    def ref_frames(self) -> int:
        """Gets the ref_frames of this MediaStream.

        Gets or sets the reference frames.  # noqa: E501

        :return: The ref_frames of this MediaStream.
        :rtype: int
        """
        return self._ref_frames

    @ref_frames.setter
    def ref_frames(self, ref_frames: int):
        """Sets the ref_frames of this MediaStream.

        Gets or sets the reference frames.  # noqa: E501

        :param ref_frames: The ref_frames of this MediaStream.
        :type ref_frames: int
        """

        self._ref_frames = ref_frames

    @property
    def sample_rate(self) -> int:
        """Gets the sample_rate of this MediaStream.

        Gets or sets the sample rate.  # noqa: E501

        :return: The sample_rate of this MediaStream.
        :rtype: int
        """
        return self._sample_rate

    @sample_rate.setter
    def sample_rate(self, sample_rate: int):
        """Sets the sample_rate of this MediaStream.

        Gets or sets the sample rate.  # noqa: E501

        :param sample_rate: The sample_rate of this MediaStream.
        :type sample_rate: int
        """

        self._sample_rate = sample_rate

    @property
    def score(self) -> int:
        """Gets the score of this MediaStream.

        Gets or sets the score.  # noqa: E501

        :return: The score of this MediaStream.
        :rtype: int
        """
        return self._score

    @score.setter
    def score(self, score: int):
        """Sets the score of this MediaStream.

        Gets or sets the score.  # noqa: E501

        :param score: The score of this MediaStream.
        :type score: int
        """

        self._score = score

    @property
    def supports_external_stream(self) -> bool:
        """Gets the supports_external_stream of this MediaStream.

        Gets or sets a value indicating whether [supports external stream].  # noqa: E501

        :return: The supports_external_stream of this MediaStream.
        :rtype: bool
        """
        return self._supports_external_stream

    @supports_external_stream.setter
    def supports_external_stream(self, supports_external_stream: bool):
        """Sets the supports_external_stream of this MediaStream.

        Gets or sets a value indicating whether [supports external stream].  # noqa: E501

        :param supports_external_stream: The supports_external_stream of this MediaStream.
        :type supports_external_stream: bool
        """

        self._supports_external_stream = supports_external_stream

    @property
    def time_base(self) -> str:
        """Gets the time_base of this MediaStream.

        Gets or sets the time base.  # noqa: E501

        :return: The time_base of this MediaStream.
        :rtype: str
        """
        return self._time_base

    @time_base.setter
    def time_base(self, time_base: str):
        """Sets the time_base of this MediaStream.

        Gets or sets the time base.  # noqa: E501

        :param time_base: The time_base of this MediaStream.
        :type time_base: str
        """

        self._time_base = time_base

    @property
    def title(self) -> str:
        """Gets the title of this MediaStream.

        Gets or sets the title.  # noqa: E501

        :return: The title of this MediaStream.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this MediaStream.

        Gets or sets the title.  # noqa: E501

        :param title: The title of this MediaStream.
        :type title: str
        """

        self._title = title

    @property
    def type(self) -> MediaStreamType:
        """Gets the type of this MediaStream.


        :return: The type of this MediaStream.
        :rtype: MediaStreamType
        """
        return self._type

    @type.setter
    def type(self, type: MediaStreamType):
        """Sets the type of this MediaStream.


        :param type: The type of this MediaStream.
        :type type: MediaStreamType
        """

        self._type = type

    @property
    def video_range(self) -> str:
        """Gets the video_range of this MediaStream.

        Gets or sets the video range.  # noqa: E501

        :return: The video_range of this MediaStream.
        :rtype: str
        """
        return self._video_range

    @video_range.setter
    def video_range(self, video_range: str):
        """Sets the video_range of this MediaStream.

        Gets or sets the video range.  # noqa: E501

        :param video_range: The video_range of this MediaStream.
        :type video_range: str
        """

        self._video_range = video_range

    @property
    def width(self) -> int:
        """Gets the width of this MediaStream.

        Gets or sets the width.  # noqa: E501

        :return: The width of this MediaStream.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width: int):
        """Sets the width of this MediaStream.

        Gets or sets the width.  # noqa: E501

        :param width: The width of this MediaStream.
        :type width: int
        """

        self._width = width

    @property
    def localized_default(self) -> str:
        """Gets the localized_default of this MediaStream.


        :return: The localized_default of this MediaStream.
        :rtype: str
        """
        return self._localized_default

    @localized_default.setter
    def localized_default(self, localized_default: str):
        """Sets the localized_default of this MediaStream.


        :param localized_default: The localized_default of this MediaStream.
        :type localized_default: str
        """

        self._localized_default = localized_default

    @property
    def localized_forced(self) -> str:
        """Gets the localized_forced of this MediaStream.


        :return: The localized_forced of this MediaStream.
        :rtype: str
        """
        return self._localized_forced

    @localized_forced.setter
    def localized_forced(self, localized_forced: str):
        """Sets the localized_forced of this MediaStream.


        :param localized_forced: The localized_forced of this MediaStream.
        :type localized_forced: str
        """

        self._localized_forced = localized_forced

    @property
    def localized_undefined(self) -> str:
        """Gets the localized_undefined of this MediaStream.


        :return: The localized_undefined of this MediaStream.
        :rtype: str
        """
        return self._localized_undefined

    @localized_undefined.setter
    def localized_undefined(self, localized_undefined: str):
        """Sets the localized_undefined of this MediaStream.


        :param localized_undefined: The localized_undefined of this MediaStream.
        :type localized_undefined: str
        """

        self._localized_undefined = localized_undefined
