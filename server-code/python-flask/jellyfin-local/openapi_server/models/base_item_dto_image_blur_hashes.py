from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BaseItemDtoImageBlurHashes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, art=None, backdrop=None, banner=None, box=None, box_rear=None, chapter=None, disc=None, logo=None, menu=None, primary=None, profile=None, screenshot=None, thumb=None):  # noqa: E501
        """BaseItemDtoImageBlurHashes - a model defined in OpenAPI

        :param art: The art of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type art: Dict[str, str]
        :param backdrop: The backdrop of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type backdrop: Dict[str, str]
        :param banner: The banner of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type banner: Dict[str, str]
        :param box: The box of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type box: Dict[str, str]
        :param box_rear: The box_rear of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type box_rear: Dict[str, str]
        :param chapter: The chapter of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type chapter: Dict[str, str]
        :param disc: The disc of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type disc: Dict[str, str]
        :param logo: The logo of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type logo: Dict[str, str]
        :param menu: The menu of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type menu: Dict[str, str]
        :param primary: The primary of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type primary: Dict[str, str]
        :param profile: The profile of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type profile: Dict[str, str]
        :param screenshot: The screenshot of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type screenshot: Dict[str, str]
        :param thumb: The thumb of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :type thumb: Dict[str, str]
        """
        self.openapi_types = {
            'art': Dict[str, str],
            'backdrop': Dict[str, str],
            'banner': Dict[str, str],
            'box': Dict[str, str],
            'box_rear': Dict[str, str],
            'chapter': Dict[str, str],
            'disc': Dict[str, str],
            'logo': Dict[str, str],
            'menu': Dict[str, str],
            'primary': Dict[str, str],
            'profile': Dict[str, str],
            'screenshot': Dict[str, str],
            'thumb': Dict[str, str]
        }

        self.attribute_map = {
            'art': 'Art',
            'backdrop': 'Backdrop',
            'banner': 'Banner',
            'box': 'Box',
            'box_rear': 'BoxRear',
            'chapter': 'Chapter',
            'disc': 'Disc',
            'logo': 'Logo',
            'menu': 'Menu',
            'primary': 'Primary',
            'profile': 'Profile',
            'screenshot': 'Screenshot',
            'thumb': 'Thumb'
        }

        self._art = art
        self._backdrop = backdrop
        self._banner = banner
        self._box = box
        self._box_rear = box_rear
        self._chapter = chapter
        self._disc = disc
        self._logo = logo
        self._menu = menu
        self._primary = primary
        self._profile = profile
        self._screenshot = screenshot
        self._thumb = thumb

    @classmethod
    def from_dict(cls, dikt) -> 'BaseItemDtoImageBlurHashes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BaseItemDto_ImageBlurHashes of this BaseItemDtoImageBlurHashes.  # noqa: E501
        :rtype: BaseItemDtoImageBlurHashes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def art(self) -> Dict[str, str]:
        """Gets the art of this BaseItemDtoImageBlurHashes.


        :return: The art of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._art

    @art.setter
    def art(self, art: Dict[str, str]):
        """Sets the art of this BaseItemDtoImageBlurHashes.


        :param art: The art of this BaseItemDtoImageBlurHashes.
        :type art: Dict[str, str]
        """

        self._art = art

    @property
    def backdrop(self) -> Dict[str, str]:
        """Gets the backdrop of this BaseItemDtoImageBlurHashes.


        :return: The backdrop of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._backdrop

    @backdrop.setter
    def backdrop(self, backdrop: Dict[str, str]):
        """Sets the backdrop of this BaseItemDtoImageBlurHashes.


        :param backdrop: The backdrop of this BaseItemDtoImageBlurHashes.
        :type backdrop: Dict[str, str]
        """

        self._backdrop = backdrop

    @property
    def banner(self) -> Dict[str, str]:
        """Gets the banner of this BaseItemDtoImageBlurHashes.


        :return: The banner of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._banner

    @banner.setter
    def banner(self, banner: Dict[str, str]):
        """Sets the banner of this BaseItemDtoImageBlurHashes.


        :param banner: The banner of this BaseItemDtoImageBlurHashes.
        :type banner: Dict[str, str]
        """

        self._banner = banner

    @property
    def box(self) -> Dict[str, str]:
        """Gets the box of this BaseItemDtoImageBlurHashes.


        :return: The box of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._box

    @box.setter
    def box(self, box: Dict[str, str]):
        """Sets the box of this BaseItemDtoImageBlurHashes.


        :param box: The box of this BaseItemDtoImageBlurHashes.
        :type box: Dict[str, str]
        """

        self._box = box

    @property
    def box_rear(self) -> Dict[str, str]:
        """Gets the box_rear of this BaseItemDtoImageBlurHashes.


        :return: The box_rear of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._box_rear

    @box_rear.setter
    def box_rear(self, box_rear: Dict[str, str]):
        """Sets the box_rear of this BaseItemDtoImageBlurHashes.


        :param box_rear: The box_rear of this BaseItemDtoImageBlurHashes.
        :type box_rear: Dict[str, str]
        """

        self._box_rear = box_rear

    @property
    def chapter(self) -> Dict[str, str]:
        """Gets the chapter of this BaseItemDtoImageBlurHashes.


        :return: The chapter of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._chapter

    @chapter.setter
    def chapter(self, chapter: Dict[str, str]):
        """Sets the chapter of this BaseItemDtoImageBlurHashes.


        :param chapter: The chapter of this BaseItemDtoImageBlurHashes.
        :type chapter: Dict[str, str]
        """

        self._chapter = chapter

    @property
    def disc(self) -> Dict[str, str]:
        """Gets the disc of this BaseItemDtoImageBlurHashes.


        :return: The disc of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._disc

    @disc.setter
    def disc(self, disc: Dict[str, str]):
        """Sets the disc of this BaseItemDtoImageBlurHashes.


        :param disc: The disc of this BaseItemDtoImageBlurHashes.
        :type disc: Dict[str, str]
        """

        self._disc = disc

    @property
    def logo(self) -> Dict[str, str]:
        """Gets the logo of this BaseItemDtoImageBlurHashes.


        :return: The logo of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._logo

    @logo.setter
    def logo(self, logo: Dict[str, str]):
        """Sets the logo of this BaseItemDtoImageBlurHashes.


        :param logo: The logo of this BaseItemDtoImageBlurHashes.
        :type logo: Dict[str, str]
        """

        self._logo = logo

    @property
    def menu(self) -> Dict[str, str]:
        """Gets the menu of this BaseItemDtoImageBlurHashes.


        :return: The menu of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._menu

    @menu.setter
    def menu(self, menu: Dict[str, str]):
        """Sets the menu of this BaseItemDtoImageBlurHashes.


        :param menu: The menu of this BaseItemDtoImageBlurHashes.
        :type menu: Dict[str, str]
        """

        self._menu = menu

    @property
    def primary(self) -> Dict[str, str]:
        """Gets the primary of this BaseItemDtoImageBlurHashes.


        :return: The primary of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._primary

    @primary.setter
    def primary(self, primary: Dict[str, str]):
        """Sets the primary of this BaseItemDtoImageBlurHashes.


        :param primary: The primary of this BaseItemDtoImageBlurHashes.
        :type primary: Dict[str, str]
        """

        self._primary = primary

    @property
    def profile(self) -> Dict[str, str]:
        """Gets the profile of this BaseItemDtoImageBlurHashes.


        :return: The profile of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._profile

    @profile.setter
    def profile(self, profile: Dict[str, str]):
        """Sets the profile of this BaseItemDtoImageBlurHashes.


        :param profile: The profile of this BaseItemDtoImageBlurHashes.
        :type profile: Dict[str, str]
        """

        self._profile = profile

    @property
    def screenshot(self) -> Dict[str, str]:
        """Gets the screenshot of this BaseItemDtoImageBlurHashes.


        :return: The screenshot of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._screenshot

    @screenshot.setter
    def screenshot(self, screenshot: Dict[str, str]):
        """Sets the screenshot of this BaseItemDtoImageBlurHashes.


        :param screenshot: The screenshot of this BaseItemDtoImageBlurHashes.
        :type screenshot: Dict[str, str]
        """

        self._screenshot = screenshot

    @property
    def thumb(self) -> Dict[str, str]:
        """Gets the thumb of this BaseItemDtoImageBlurHashes.


        :return: The thumb of this BaseItemDtoImageBlurHashes.
        :rtype: Dict[str, str]
        """
        return self._thumb

    @thumb.setter
    def thumb(self, thumb: Dict[str, str]):
        """Sets the thumb of this BaseItemDtoImageBlurHashes.


        :param thumb: The thumb of this BaseItemDtoImageBlurHashes.
        :type thumb: Dict[str, str]
        """

        self._thumb = thumb
