from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.country_info import CountryInfo
from openapi_server.models.culture_dto import CultureDto
from openapi_server.models.external_id_info import ExternalIdInfo
from openapi_server.models.name_value_pair import NameValuePair
from openapi_server.models.parental_rating import ParentalRating
from openapi_server import util

from openapi_server.models.country_info import CountryInfo  # noqa: E501
from openapi_server.models.culture_dto import CultureDto  # noqa: E501
from openapi_server.models.external_id_info import ExternalIdInfo  # noqa: E501
from openapi_server.models.name_value_pair import NameValuePair  # noqa: E501
from openapi_server.models.parental_rating import ParentalRating  # noqa: E501

class MetadataEditorInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, content_type=None, content_type_options=None, countries=None, cultures=None, external_id_infos=None, parental_rating_options=None):  # noqa: E501
        """MetadataEditorInfo - a model defined in OpenAPI

        :param content_type: The content_type of this MetadataEditorInfo.  # noqa: E501
        :type content_type: str
        :param content_type_options: The content_type_options of this MetadataEditorInfo.  # noqa: E501
        :type content_type_options: List[NameValuePair]
        :param countries: The countries of this MetadataEditorInfo.  # noqa: E501
        :type countries: List[CountryInfo]
        :param cultures: The cultures of this MetadataEditorInfo.  # noqa: E501
        :type cultures: List[CultureDto]
        :param external_id_infos: The external_id_infos of this MetadataEditorInfo.  # noqa: E501
        :type external_id_infos: List[ExternalIdInfo]
        :param parental_rating_options: The parental_rating_options of this MetadataEditorInfo.  # noqa: E501
        :type parental_rating_options: List[ParentalRating]
        """
        self.openapi_types = {
            'content_type': str,
            'content_type_options': List[NameValuePair],
            'countries': List[CountryInfo],
            'cultures': List[CultureDto],
            'external_id_infos': List[ExternalIdInfo],
            'parental_rating_options': List[ParentalRating]
        }

        self.attribute_map = {
            'content_type': 'ContentType',
            'content_type_options': 'ContentTypeOptions',
            'countries': 'Countries',
            'cultures': 'Cultures',
            'external_id_infos': 'ExternalIdInfos',
            'parental_rating_options': 'ParentalRatingOptions'
        }

        self._content_type = content_type
        self._content_type_options = content_type_options
        self._countries = countries
        self._cultures = cultures
        self._external_id_infos = external_id_infos
        self._parental_rating_options = parental_rating_options

    @classmethod
    def from_dict(cls, dikt) -> 'MetadataEditorInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MetadataEditorInfo of this MetadataEditorInfo.  # noqa: E501
        :rtype: MetadataEditorInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def content_type(self) -> str:
        """Gets the content_type of this MetadataEditorInfo.


        :return: The content_type of this MetadataEditorInfo.
        :rtype: str
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type: str):
        """Sets the content_type of this MetadataEditorInfo.


        :param content_type: The content_type of this MetadataEditorInfo.
        :type content_type: str
        """

        self._content_type = content_type

    @property
    def content_type_options(self) -> List[NameValuePair]:
        """Gets the content_type_options of this MetadataEditorInfo.


        :return: The content_type_options of this MetadataEditorInfo.
        :rtype: List[NameValuePair]
        """
        return self._content_type_options

    @content_type_options.setter
    def content_type_options(self, content_type_options: List[NameValuePair]):
        """Sets the content_type_options of this MetadataEditorInfo.


        :param content_type_options: The content_type_options of this MetadataEditorInfo.
        :type content_type_options: List[NameValuePair]
        """

        self._content_type_options = content_type_options

    @property
    def countries(self) -> List[CountryInfo]:
        """Gets the countries of this MetadataEditorInfo.


        :return: The countries of this MetadataEditorInfo.
        :rtype: List[CountryInfo]
        """
        return self._countries

    @countries.setter
    def countries(self, countries: List[CountryInfo]):
        """Sets the countries of this MetadataEditorInfo.


        :param countries: The countries of this MetadataEditorInfo.
        :type countries: List[CountryInfo]
        """

        self._countries = countries

    @property
    def cultures(self) -> List[CultureDto]:
        """Gets the cultures of this MetadataEditorInfo.


        :return: The cultures of this MetadataEditorInfo.
        :rtype: List[CultureDto]
        """
        return self._cultures

    @cultures.setter
    def cultures(self, cultures: List[CultureDto]):
        """Sets the cultures of this MetadataEditorInfo.


        :param cultures: The cultures of this MetadataEditorInfo.
        :type cultures: List[CultureDto]
        """

        self._cultures = cultures

    @property
    def external_id_infos(self) -> List[ExternalIdInfo]:
        """Gets the external_id_infos of this MetadataEditorInfo.


        :return: The external_id_infos of this MetadataEditorInfo.
        :rtype: List[ExternalIdInfo]
        """
        return self._external_id_infos

    @external_id_infos.setter
    def external_id_infos(self, external_id_infos: List[ExternalIdInfo]):
        """Sets the external_id_infos of this MetadataEditorInfo.


        :param external_id_infos: The external_id_infos of this MetadataEditorInfo.
        :type external_id_infos: List[ExternalIdInfo]
        """

        self._external_id_infos = external_id_infos

    @property
    def parental_rating_options(self) -> List[ParentalRating]:
        """Gets the parental_rating_options of this MetadataEditorInfo.


        :return: The parental_rating_options of this MetadataEditorInfo.
        :rtype: List[ParentalRating]
        """
        return self._parental_rating_options

    @parental_rating_options.setter
    def parental_rating_options(self, parental_rating_options: List[ParentalRating]):
        """Sets the parental_rating_options of this MetadataEditorInfo.


        :param parental_rating_options: The parental_rating_options of this MetadataEditorInfo.
        :type parental_rating_options: List[ParentalRating]
        """

        self._parental_rating_options = parental_rating_options
