from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.remote_image_info import RemoteImageInfo
from openapi_server import util

from openapi_server.models.remote_image_info import RemoteImageInfo  # noqa: E501

class RemoteImageResult(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, images=None, providers=None, total_record_count=None):  # noqa: E501
        """RemoteImageResult - a model defined in OpenAPI

        :param images: The images of this RemoteImageResult.  # noqa: E501
        :type images: List[RemoteImageInfo]
        :param providers: The providers of this RemoteImageResult.  # noqa: E501
        :type providers: List[str]
        :param total_record_count: The total_record_count of this RemoteImageResult.  # noqa: E501
        :type total_record_count: int
        """
        self.openapi_types = {
            'images': List[RemoteImageInfo],
            'providers': List[str],
            'total_record_count': int
        }

        self.attribute_map = {
            'images': 'Images',
            'providers': 'Providers',
            'total_record_count': 'TotalRecordCount'
        }

        self._images = images
        self._providers = providers
        self._total_record_count = total_record_count

    @classmethod
    def from_dict(cls, dikt) -> 'RemoteImageResult':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RemoteImageResult of this RemoteImageResult.  # noqa: E501
        :rtype: RemoteImageResult
        """
        return util.deserialize_model(dikt, cls)

    @property
    def images(self) -> List[RemoteImageInfo]:
        """Gets the images of this RemoteImageResult.

        Gets or sets the images.  # noqa: E501

        :return: The images of this RemoteImageResult.
        :rtype: List[RemoteImageInfo]
        """
        return self._images

    @images.setter
    def images(self, images: List[RemoteImageInfo]):
        """Sets the images of this RemoteImageResult.

        Gets or sets the images.  # noqa: E501

        :param images: The images of this RemoteImageResult.
        :type images: List[RemoteImageInfo]
        """

        self._images = images

    @property
    def providers(self) -> List[str]:
        """Gets the providers of this RemoteImageResult.

        Gets or sets the providers.  # noqa: E501

        :return: The providers of this RemoteImageResult.
        :rtype: List[str]
        """
        return self._providers

    @providers.setter
    def providers(self, providers: List[str]):
        """Sets the providers of this RemoteImageResult.

        Gets or sets the providers.  # noqa: E501

        :param providers: The providers of this RemoteImageResult.
        :type providers: List[str]
        """

        self._providers = providers

    @property
    def total_record_count(self) -> int:
        """Gets the total_record_count of this RemoteImageResult.

        Gets or sets the total record count.  # noqa: E501

        :return: The total_record_count of this RemoteImageResult.
        :rtype: int
        """
        return self._total_record_count

    @total_record_count.setter
    def total_record_count(self, total_record_count: int):
        """Sets the total_record_count of this RemoteImageResult.

        Gets or sets the total record count.  # noqa: E501

        :param total_record_count: The total_record_count of this RemoteImageResult.
        :type total_record_count: int
        """

        self._total_record_count = total_record_count
