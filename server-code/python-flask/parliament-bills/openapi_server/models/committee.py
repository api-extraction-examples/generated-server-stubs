from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.committee_house import CommitteeHouse
from openapi_server import util

from openapi_server.models.committee_house import CommitteeHouse  # noqa: E501

class Committee(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, house=None, id=None, name=None, url=None):  # noqa: E501
        """Committee - a model defined in OpenAPI

        :param category: The category of this Committee.  # noqa: E501
        :type category: str
        :param house: The house of this Committee.  # noqa: E501
        :type house: CommitteeHouse
        :param id: The id of this Committee.  # noqa: E501
        :type id: int
        :param name: The name of this Committee.  # noqa: E501
        :type name: str
        :param url: The url of this Committee.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'category': str,
            'house': CommitteeHouse,
            'id': int,
            'name': str,
            'url': str
        }

        self.attribute_map = {
            'category': 'category',
            'house': 'house',
            'id': 'id',
            'name': 'name',
            'url': 'url'
        }

        self._category = category
        self._house = house
        self._id = id
        self._name = name
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Committee':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Committee of this Committee.  # noqa: E501
        :rtype: Committee
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this Committee.


        :return: The category of this Committee.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Committee.


        :param category: The category of this Committee.
        :type category: str
        """

        self._category = category

    @property
    def house(self) -> CommitteeHouse:
        """Gets the house of this Committee.


        :return: The house of this Committee.
        :rtype: CommitteeHouse
        """
        return self._house

    @house.setter
    def house(self, house: CommitteeHouse):
        """Sets the house of this Committee.


        :param house: The house of this Committee.
        :type house: CommitteeHouse
        """

        self._house = house

    @property
    def id(self) -> int:
        """Gets the id of this Committee.


        :return: The id of this Committee.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Committee.


        :param id: The id of this Committee.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Committee.


        :return: The name of this Committee.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Committee.


        :param name: The name of this Committee.
        :type name: str
        """

        self._name = name

    @property
    def url(self) -> str:
        """Gets the url of this Committee.


        :return: The url of this Committee.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Committee.


        :param url: The url of this Committee.
        :type url: str
        """

        self._url = url
