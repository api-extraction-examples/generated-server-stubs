from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AmendmentLine(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, hanging_indentation=None, image_type=None, indentation=None, is_image=None, text=None):  # noqa: E501
        """AmendmentLine - a model defined in OpenAPI

        :param hanging_indentation: The hanging_indentation of this AmendmentLine.  # noqa: E501
        :type hanging_indentation: str
        :param image_type: The image_type of this AmendmentLine.  # noqa: E501
        :type image_type: str
        :param indentation: The indentation of this AmendmentLine.  # noqa: E501
        :type indentation: int
        :param is_image: The is_image of this AmendmentLine.  # noqa: E501
        :type is_image: bool
        :param text: The text of this AmendmentLine.  # noqa: E501
        :type text: str
        """
        self.openapi_types = {
            'hanging_indentation': str,
            'image_type': str,
            'indentation': int,
            'is_image': bool,
            'text': str
        }

        self.attribute_map = {
            'hanging_indentation': 'hangingIndentation',
            'image_type': 'imageType',
            'indentation': 'indentation',
            'is_image': 'isImage',
            'text': 'text'
        }

        self._hanging_indentation = hanging_indentation
        self._image_type = image_type
        self._indentation = indentation
        self._is_image = is_image
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'AmendmentLine':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AmendmentLine of this AmendmentLine.  # noqa: E501
        :rtype: AmendmentLine
        """
        return util.deserialize_model(dikt, cls)

    @property
    def hanging_indentation(self) -> str:
        """Gets the hanging_indentation of this AmendmentLine.


        :return: The hanging_indentation of this AmendmentLine.
        :rtype: str
        """
        return self._hanging_indentation

    @hanging_indentation.setter
    def hanging_indentation(self, hanging_indentation: str):
        """Sets the hanging_indentation of this AmendmentLine.


        :param hanging_indentation: The hanging_indentation of this AmendmentLine.
        :type hanging_indentation: str
        """

        self._hanging_indentation = hanging_indentation

    @property
    def image_type(self) -> str:
        """Gets the image_type of this AmendmentLine.


        :return: The image_type of this AmendmentLine.
        :rtype: str
        """
        return self._image_type

    @image_type.setter
    def image_type(self, image_type: str):
        """Sets the image_type of this AmendmentLine.


        :param image_type: The image_type of this AmendmentLine.
        :type image_type: str
        """

        self._image_type = image_type

    @property
    def indentation(self) -> int:
        """Gets the indentation of this AmendmentLine.


        :return: The indentation of this AmendmentLine.
        :rtype: int
        """
        return self._indentation

    @indentation.setter
    def indentation(self, indentation: int):
        """Sets the indentation of this AmendmentLine.


        :param indentation: The indentation of this AmendmentLine.
        :type indentation: int
        """

        self._indentation = indentation

    @property
    def is_image(self) -> bool:
        """Gets the is_image of this AmendmentLine.


        :return: The is_image of this AmendmentLine.
        :rtype: bool
        """
        return self._is_image

    @is_image.setter
    def is_image(self, is_image: bool):
        """Sets the is_image of this AmendmentLine.


        :param is_image: The is_image of this AmendmentLine.
        :type is_image: bool
        """

        self._is_image = is_image

    @property
    def text(self) -> str:
        """Gets the text of this AmendmentLine.


        :return: The text of this AmendmentLine.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this AmendmentLine.


        :param text: The text of this AmendmentLine.
        :type text: str
        """

        self._text = text
