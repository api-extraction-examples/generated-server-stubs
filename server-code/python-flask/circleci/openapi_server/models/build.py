from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.lifecycle import Lifecycle
from openapi_server.models.previous_build import PreviousBuild
from openapi_server import util

from openapi_server.models.lifecycle import Lifecycle  # noqa: E501
from openapi_server.models.previous_build import PreviousBuild  # noqa: E501

class Build(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, body=None, branch=None, build_time_millis=None, build_url=None, committer_email=None, committer_name=None, dont_build=None, lifecycle=None, previous=None, queued_at=None, reponame=None, retry_of=None, start_time=None, stop_time=None, subject=None, username=None, vcs_url=None, why=None):  # noqa: E501
        """Build - a model defined in OpenAPI

        :param body: The body of this Build.  # noqa: E501
        :type body: str
        :param branch: The branch of this Build.  # noqa: E501
        :type branch: str
        :param build_time_millis: The build_time_millis of this Build.  # noqa: E501
        :type build_time_millis: int
        :param build_url: The build_url of this Build.  # noqa: E501
        :type build_url: str
        :param committer_email: The committer_email of this Build.  # noqa: E501
        :type committer_email: str
        :param committer_name: The committer_name of this Build.  # noqa: E501
        :type committer_name: str
        :param dont_build: The dont_build of this Build.  # noqa: E501
        :type dont_build: str
        :param lifecycle: The lifecycle of this Build.  # noqa: E501
        :type lifecycle: Lifecycle
        :param previous: The previous of this Build.  # noqa: E501
        :type previous: PreviousBuild
        :param queued_at: The queued_at of this Build.  # noqa: E501
        :type queued_at: datetime
        :param reponame: The reponame of this Build.  # noqa: E501
        :type reponame: str
        :param retry_of: The retry_of of this Build.  # noqa: E501
        :type retry_of: int
        :param start_time: The start_time of this Build.  # noqa: E501
        :type start_time: datetime
        :param stop_time: The stop_time of this Build.  # noqa: E501
        :type stop_time: datetime
        :param subject: The subject of this Build.  # noqa: E501
        :type subject: str
        :param username: The username of this Build.  # noqa: E501
        :type username: str
        :param vcs_url: The vcs_url of this Build.  # noqa: E501
        :type vcs_url: str
        :param why: The why of this Build.  # noqa: E501
        :type why: str
        """
        self.openapi_types = {
            'body': str,
            'branch': str,
            'build_time_millis': int,
            'build_url': str,
            'committer_email': str,
            'committer_name': str,
            'dont_build': str,
            'lifecycle': Lifecycle,
            'previous': PreviousBuild,
            'queued_at': datetime,
            'reponame': str,
            'retry_of': int,
            'start_time': datetime,
            'stop_time': datetime,
            'subject': str,
            'username': str,
            'vcs_url': str,
            'why': str
        }

        self.attribute_map = {
            'body': 'body',
            'branch': 'branch',
            'build_time_millis': 'build_time_millis',
            'build_url': 'build_url',
            'committer_email': 'committer_email',
            'committer_name': 'committer_name',
            'dont_build': 'dont_build',
            'lifecycle': 'lifecycle',
            'previous': 'previous',
            'queued_at': 'queued_at',
            'reponame': 'reponame',
            'retry_of': 'retry_of',
            'start_time': 'start_time',
            'stop_time': 'stop_time',
            'subject': 'subject',
            'username': 'username',
            'vcs_url': 'vcs_url',
            'why': 'why'
        }

        self._body = body
        self._branch = branch
        self._build_time_millis = build_time_millis
        self._build_url = build_url
        self._committer_email = committer_email
        self._committer_name = committer_name
        self._dont_build = dont_build
        self._lifecycle = lifecycle
        self._previous = previous
        self._queued_at = queued_at
        self._reponame = reponame
        self._retry_of = retry_of
        self._start_time = start_time
        self._stop_time = stop_time
        self._subject = subject
        self._username = username
        self._vcs_url = vcs_url
        self._why = why

    @classmethod
    def from_dict(cls, dikt) -> 'Build':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Build of this Build.  # noqa: E501
        :rtype: Build
        """
        return util.deserialize_model(dikt, cls)

    @property
    def body(self) -> str:
        """Gets the body of this Build.

        commit message body  # noqa: E501

        :return: The body of this Build.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this Build.

        commit message body  # noqa: E501

        :param body: The body of this Build.
        :type body: str
        """

        self._body = body

    @property
    def branch(self) -> str:
        """Gets the branch of this Build.


        :return: The branch of this Build.
        :rtype: str
        """
        return self._branch

    @branch.setter
    def branch(self, branch: str):
        """Sets the branch of this Build.


        :param branch: The branch of this Build.
        :type branch: str
        """

        self._branch = branch

    @property
    def build_time_millis(self) -> int:
        """Gets the build_time_millis of this Build.


        :return: The build_time_millis of this Build.
        :rtype: int
        """
        return self._build_time_millis

    @build_time_millis.setter
    def build_time_millis(self, build_time_millis: int):
        """Sets the build_time_millis of this Build.


        :param build_time_millis: The build_time_millis of this Build.
        :type build_time_millis: int
        """

        self._build_time_millis = build_time_millis

    @property
    def build_url(self) -> str:
        """Gets the build_url of this Build.


        :return: The build_url of this Build.
        :rtype: str
        """
        return self._build_url

    @build_url.setter
    def build_url(self, build_url: str):
        """Sets the build_url of this Build.


        :param build_url: The build_url of this Build.
        :type build_url: str
        """

        self._build_url = build_url

    @property
    def committer_email(self) -> str:
        """Gets the committer_email of this Build.


        :return: The committer_email of this Build.
        :rtype: str
        """
        return self._committer_email

    @committer_email.setter
    def committer_email(self, committer_email: str):
        """Sets the committer_email of this Build.


        :param committer_email: The committer_email of this Build.
        :type committer_email: str
        """

        self._committer_email = committer_email

    @property
    def committer_name(self) -> str:
        """Gets the committer_name of this Build.


        :return: The committer_name of this Build.
        :rtype: str
        """
        return self._committer_name

    @committer_name.setter
    def committer_name(self, committer_name: str):
        """Sets the committer_name of this Build.


        :param committer_name: The committer_name of this Build.
        :type committer_name: str
        """

        self._committer_name = committer_name

    @property
    def dont_build(self) -> str:
        """Gets the dont_build of this Build.

        reason why we didn't build, if we didn't build  # noqa: E501

        :return: The dont_build of this Build.
        :rtype: str
        """
        return self._dont_build

    @dont_build.setter
    def dont_build(self, dont_build: str):
        """Sets the dont_build of this Build.

        reason why we didn't build, if we didn't build  # noqa: E501

        :param dont_build: The dont_build of this Build.
        :type dont_build: str
        """

        self._dont_build = dont_build

    @property
    def lifecycle(self) -> Lifecycle:
        """Gets the lifecycle of this Build.


        :return: The lifecycle of this Build.
        :rtype: Lifecycle
        """
        return self._lifecycle

    @lifecycle.setter
    def lifecycle(self, lifecycle: Lifecycle):
        """Sets the lifecycle of this Build.


        :param lifecycle: The lifecycle of this Build.
        :type lifecycle: Lifecycle
        """

        self._lifecycle = lifecycle

    @property
    def previous(self) -> PreviousBuild:
        """Gets the previous of this Build.


        :return: The previous of this Build.
        :rtype: PreviousBuild
        """
        return self._previous

    @previous.setter
    def previous(self, previous: PreviousBuild):
        """Sets the previous of this Build.


        :param previous: The previous of this Build.
        :type previous: PreviousBuild
        """

        self._previous = previous

    @property
    def queued_at(self) -> datetime:
        """Gets the queued_at of this Build.

        time build was queued  # noqa: E501

        :return: The queued_at of this Build.
        :rtype: datetime
        """
        return self._queued_at

    @queued_at.setter
    def queued_at(self, queued_at: datetime):
        """Sets the queued_at of this Build.

        time build was queued  # noqa: E501

        :param queued_at: The queued_at of this Build.
        :type queued_at: datetime
        """

        self._queued_at = queued_at

    @property
    def reponame(self) -> str:
        """Gets the reponame of this Build.


        :return: The reponame of this Build.
        :rtype: str
        """
        return self._reponame

    @reponame.setter
    def reponame(self, reponame: str):
        """Sets the reponame of this Build.


        :param reponame: The reponame of this Build.
        :type reponame: str
        """

        self._reponame = reponame

    @property
    def retry_of(self) -> int:
        """Gets the retry_of of this Build.

        build_num of the build this is a retry of  # noqa: E501

        :return: The retry_of of this Build.
        :rtype: int
        """
        return self._retry_of

    @retry_of.setter
    def retry_of(self, retry_of: int):
        """Sets the retry_of of this Build.

        build_num of the build this is a retry of  # noqa: E501

        :param retry_of: The retry_of of this Build.
        :type retry_of: int
        """

        self._retry_of = retry_of

    @property
    def start_time(self) -> datetime:
        """Gets the start_time of this Build.

        time build started  # noqa: E501

        :return: The start_time of this Build.
        :rtype: datetime
        """
        return self._start_time

    @start_time.setter
    def start_time(self, start_time: datetime):
        """Sets the start_time of this Build.

        time build started  # noqa: E501

        :param start_time: The start_time of this Build.
        :type start_time: datetime
        """

        self._start_time = start_time

    @property
    def stop_time(self) -> datetime:
        """Gets the stop_time of this Build.

        time build finished  # noqa: E501

        :return: The stop_time of this Build.
        :rtype: datetime
        """
        return self._stop_time

    @stop_time.setter
    def stop_time(self, stop_time: datetime):
        """Sets the stop_time of this Build.

        time build finished  # noqa: E501

        :param stop_time: The stop_time of this Build.
        :type stop_time: datetime
        """

        self._stop_time = stop_time

    @property
    def subject(self) -> str:
        """Gets the subject of this Build.


        :return: The subject of this Build.
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject: str):
        """Sets the subject of this Build.


        :param subject: The subject of this Build.
        :type subject: str
        """

        self._subject = subject

    @property
    def username(self) -> str:
        """Gets the username of this Build.


        :return: The username of this Build.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this Build.


        :param username: The username of this Build.
        :type username: str
        """

        self._username = username

    @property
    def vcs_url(self) -> str:
        """Gets the vcs_url of this Build.


        :return: The vcs_url of this Build.
        :rtype: str
        """
        return self._vcs_url

    @vcs_url.setter
    def vcs_url(self, vcs_url: str):
        """Sets the vcs_url of this Build.


        :param vcs_url: The vcs_url of this Build.
        :type vcs_url: str
        """

        self._vcs_url = vcs_url

    @property
    def why(self) -> str:
        """Gets the why of this Build.

        short string explaining the reason we built  # noqa: E501

        :return: The why of this Build.
        :rtype: str
        """
        return self._why

    @why.setter
    def why(self, why: str):
        """Sets the why of this Build.

        short string explaining the reason we built  # noqa: E501

        :param why: The why of this Build.
        :type why: str
        """

        self._why = why
