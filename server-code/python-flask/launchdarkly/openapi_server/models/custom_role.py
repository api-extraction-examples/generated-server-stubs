from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.policy import Policy
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.policy import Policy  # noqa: E501

class CustomRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, links=None, description=None, key=None, name=None, policy=None):  # noqa: E501
        """CustomRole - a model defined in OpenAPI

        :param id: The id of this CustomRole.  # noqa: E501
        :type id: str
        :param links: The links of this CustomRole.  # noqa: E501
        :type links: Links
        :param description: The description of this CustomRole.  # noqa: E501
        :type description: str
        :param key: The key of this CustomRole.  # noqa: E501
        :type key: str
        :param name: The name of this CustomRole.  # noqa: E501
        :type name: str
        :param policy: The policy of this CustomRole.  # noqa: E501
        :type policy: List[Policy]
        """
        self.openapi_types = {
            'id': str,
            'links': Links,
            'description': str,
            'key': str,
            'name': str,
            'policy': List[Policy]
        }

        self.attribute_map = {
            'id': '_id',
            'links': '_links',
            'description': 'description',
            'key': 'key',
            'name': 'name',
            'policy': 'policy'
        }

        self._id = id
        self._links = links
        self._description = description
        self._key = key
        self._name = name
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt) -> 'CustomRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomRole of this CustomRole.  # noqa: E501
        :rtype: CustomRole
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CustomRole.

        The unique resource id.  # noqa: E501

        :return: The id of this CustomRole.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CustomRole.

        The unique resource id.  # noqa: E501

        :param id: The id of this CustomRole.
        :type id: str
        """

        self._id = id

    @property
    def links(self) -> Links:
        """Gets the links of this CustomRole.


        :return: The links of this CustomRole.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this CustomRole.


        :param links: The links of this CustomRole.
        :type links: Links
        """

        self._links = links

    @property
    def description(self) -> str:
        """Gets the description of this CustomRole.

        Description of the custom role.  # noqa: E501

        :return: The description of this CustomRole.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CustomRole.

        Description of the custom role.  # noqa: E501

        :param description: The description of this CustomRole.
        :type description: str
        """

        self._description = description

    @property
    def key(self) -> str:
        """Gets the key of this CustomRole.

        The 20-hexdigit id or the key for a custom role.  # noqa: E501

        :return: The key of this CustomRole.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this CustomRole.

        The 20-hexdigit id or the key for a custom role.  # noqa: E501

        :param key: The key of this CustomRole.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this CustomRole.

        Name of the custom role.  # noqa: E501

        :return: The name of this CustomRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CustomRole.

        Name of the custom role.  # noqa: E501

        :param name: The name of this CustomRole.
        :type name: str
        """

        self._name = name

    @property
    def policy(self) -> List[Policy]:
        """Gets the policy of this CustomRole.


        :return: The policy of this CustomRole.
        :rtype: List[Policy]
        """
        return self._policy

    @policy.setter
    def policy(self, policy: List[Policy]):
        """Sets the policy of this CustomRole.


        :param policy: The policy of this CustomRole.
        :type policy: List[Policy]
        """

        self._policy = policy
