from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PostUserSegmentRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, key=None, name=None, tags=None, unbounded=None):  # noqa: E501
        """PostUserSegmentRequest - a model defined in OpenAPI

        :param description: The description of this PostUserSegmentRequest.  # noqa: E501
        :type description: str
        :param key: The key of this PostUserSegmentRequest.  # noqa: E501
        :type key: str
        :param name: The name of this PostUserSegmentRequest.  # noqa: E501
        :type name: str
        :param tags: The tags of this PostUserSegmentRequest.  # noqa: E501
        :type tags: List[str]
        :param unbounded: The unbounded of this PostUserSegmentRequest.  # noqa: E501
        :type unbounded: bool
        """
        self.openapi_types = {
            'description': str,
            'key': str,
            'name': str,
            'tags': List[str],
            'unbounded': bool
        }

        self.attribute_map = {
            'description': 'description',
            'key': 'key',
            'name': 'name',
            'tags': 'tags',
            'unbounded': 'unbounded'
        }

        self._description = description
        self._key = key
        self._name = name
        self._tags = tags
        self._unbounded = unbounded

    @classmethod
    def from_dict(cls, dikt) -> 'PostUserSegmentRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The postUserSegment_request of this PostUserSegmentRequest.  # noqa: E501
        :rtype: PostUserSegmentRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this PostUserSegmentRequest.

        A description for the user segment.  # noqa: E501

        :return: The description of this PostUserSegmentRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PostUserSegmentRequest.

        A description for the user segment.  # noqa: E501

        :param description: The description of this PostUserSegmentRequest.
        :type description: str
        """

        self._description = description

    @property
    def key(self) -> str:
        """Gets the key of this PostUserSegmentRequest.

        A unique key that will be used to reference the user segment in feature flags.  # noqa: E501

        :return: The key of this PostUserSegmentRequest.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this PostUserSegmentRequest.

        A unique key that will be used to reference the user segment in feature flags.  # noqa: E501

        :param key: The key of this PostUserSegmentRequest.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this PostUserSegmentRequest.

        A human-friendly name for the user segment.  # noqa: E501

        :return: The name of this PostUserSegmentRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PostUserSegmentRequest.

        A human-friendly name for the user segment.  # noqa: E501

        :param name: The name of this PostUserSegmentRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this PostUserSegmentRequest.

        Tags for the user segment.  # noqa: E501

        :return: The tags of this PostUserSegmentRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this PostUserSegmentRequest.

        Tags for the user segment.  # noqa: E501

        :param tags: The tags of this PostUserSegmentRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def unbounded(self) -> bool:
        """Gets the unbounded of this PostUserSegmentRequest.

        Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.  # noqa: E501

        :return: The unbounded of this PostUserSegmentRequest.
        :rtype: bool
        """
        return self._unbounded

    @unbounded.setter
    def unbounded(self, unbounded: bool):
        """Sets the unbounded of this PostUserSegmentRequest.

        Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.  # noqa: E501

        :param unbounded: The unbounded of this PostUserSegmentRequest.
        :type unbounded: bool
        """

        self._unbounded = unbounded
