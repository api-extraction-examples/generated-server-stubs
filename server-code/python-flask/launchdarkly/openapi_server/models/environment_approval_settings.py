from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvironmentApprovalSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, can_apply_declined_changes=None, can_review_own_request=None, min_num_approvals=None, required=None, required_approval_tags=None, service_kind=None):  # noqa: E501
        """EnvironmentApprovalSettings - a model defined in OpenAPI

        :param can_apply_declined_changes: The can_apply_declined_changes of this EnvironmentApprovalSettings.  # noqa: E501
        :type can_apply_declined_changes: bool
        :param can_review_own_request: The can_review_own_request of this EnvironmentApprovalSettings.  # noqa: E501
        :type can_review_own_request: bool
        :param min_num_approvals: The min_num_approvals of this EnvironmentApprovalSettings.  # noqa: E501
        :type min_num_approvals: int
        :param required: The required of this EnvironmentApprovalSettings.  # noqa: E501
        :type required: bool
        :param required_approval_tags: The required_approval_tags of this EnvironmentApprovalSettings.  # noqa: E501
        :type required_approval_tags: List[str]
        :param service_kind: The service_kind of this EnvironmentApprovalSettings.  # noqa: E501
        :type service_kind: str
        """
        self.openapi_types = {
            'can_apply_declined_changes': bool,
            'can_review_own_request': bool,
            'min_num_approvals': int,
            'required': bool,
            'required_approval_tags': List[str],
            'service_kind': str
        }

        self.attribute_map = {
            'can_apply_declined_changes': 'canApplyDeclinedChanges',
            'can_review_own_request': 'canReviewOwnRequest',
            'min_num_approvals': 'minNumApprovals',
            'required': 'required',
            'required_approval_tags': 'requiredApprovalTags',
            'service_kind': 'serviceKind'
        }

        self._can_apply_declined_changes = can_apply_declined_changes
        self._can_review_own_request = can_review_own_request
        self._min_num_approvals = min_num_approvals
        self._required = required
        self._required_approval_tags = required_approval_tags
        self._service_kind = service_kind

    @classmethod
    def from_dict(cls, dikt) -> 'EnvironmentApprovalSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Environment_approvalSettings of this EnvironmentApprovalSettings.  # noqa: E501
        :rtype: EnvironmentApprovalSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def can_apply_declined_changes(self) -> bool:
        """Gets the can_apply_declined_changes of this EnvironmentApprovalSettings.

        Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.  # noqa: E501

        :return: The can_apply_declined_changes of this EnvironmentApprovalSettings.
        :rtype: bool
        """
        return self._can_apply_declined_changes

    @can_apply_declined_changes.setter
    def can_apply_declined_changes(self, can_apply_declined_changes: bool):
        """Sets the can_apply_declined_changes of this EnvironmentApprovalSettings.

        Whether changes can be applied as long as minNumApprovals is met, regardless of if any reviewers have declined a request.  # noqa: E501

        :param can_apply_declined_changes: The can_apply_declined_changes of this EnvironmentApprovalSettings.
        :type can_apply_declined_changes: bool
        """

        self._can_apply_declined_changes = can_apply_declined_changes

    @property
    def can_review_own_request(self) -> bool:
        """Gets the can_review_own_request of this EnvironmentApprovalSettings.

        Whether requesters can approve or decline their own request. They may always comment.  # noqa: E501

        :return: The can_review_own_request of this EnvironmentApprovalSettings.
        :rtype: bool
        """
        return self._can_review_own_request

    @can_review_own_request.setter
    def can_review_own_request(self, can_review_own_request: bool):
        """Sets the can_review_own_request of this EnvironmentApprovalSettings.

        Whether requesters can approve or decline their own request. They may always comment.  # noqa: E501

        :param can_review_own_request: The can_review_own_request of this EnvironmentApprovalSettings.
        :type can_review_own_request: bool
        """

        self._can_review_own_request = can_review_own_request

    @property
    def min_num_approvals(self) -> int:
        """Gets the min_num_approvals of this EnvironmentApprovalSettings.

        The number of approvals required before an approval request can be applied.  # noqa: E501

        :return: The min_num_approvals of this EnvironmentApprovalSettings.
        :rtype: int
        """
        return self._min_num_approvals

    @min_num_approvals.setter
    def min_num_approvals(self, min_num_approvals: int):
        """Sets the min_num_approvals of this EnvironmentApprovalSettings.

        The number of approvals required before an approval request can be applied.  # noqa: E501

        :param min_num_approvals: The min_num_approvals of this EnvironmentApprovalSettings.
        :type min_num_approvals: int
        """

        self._min_num_approvals = min_num_approvals

    @property
    def required(self) -> bool:
        """Gets the required of this EnvironmentApprovalSettings.

        Whether any changes to flags in this environment will require approval. You may only set required or requiredApprovalTags, not both.  # noqa: E501

        :return: The required of this EnvironmentApprovalSettings.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this EnvironmentApprovalSettings.

        Whether any changes to flags in this environment will require approval. You may only set required or requiredApprovalTags, not both.  # noqa: E501

        :param required: The required of this EnvironmentApprovalSettings.
        :type required: bool
        """

        self._required = required

    @property
    def required_approval_tags(self) -> List[str]:
        """Gets the required_approval_tags of this EnvironmentApprovalSettings.

        An array of tags used to specify which flags with those tags require approval. You may only set requiredApprovalTags or required, not both.  # noqa: E501

        :return: The required_approval_tags of this EnvironmentApprovalSettings.
        :rtype: List[str]
        """
        return self._required_approval_tags

    @required_approval_tags.setter
    def required_approval_tags(self, required_approval_tags: List[str]):
        """Sets the required_approval_tags of this EnvironmentApprovalSettings.

        An array of tags used to specify which flags with those tags require approval. You may only set requiredApprovalTags or required, not both.  # noqa: E501

        :param required_approval_tags: The required_approval_tags of this EnvironmentApprovalSettings.
        :type required_approval_tags: List[str]
        """

        self._required_approval_tags = required_approval_tags

    @property
    def service_kind(self) -> str:
        """Gets the service_kind of this EnvironmentApprovalSettings.

        The approvals system used.  # noqa: E501

        :return: The service_kind of this EnvironmentApprovalSettings.
        :rtype: str
        """
        return self._service_kind

    @service_kind.setter
    def service_kind(self, service_kind: str):
        """Sets the service_kind of this EnvironmentApprovalSettings.

        The approvals system used.  # noqa: E501

        :param service_kind: The service_kind of this EnvironmentApprovalSettings.
        :type service_kind: str
        """
        allowed_values = ["launchdarkly", "service-now"]  # noqa: E501
        if service_kind not in allowed_values:
            raise ValueError(
                "Invalid value for `service_kind` ({0}), must be one of {1}"
                .format(service_kind, allowed_values)
            )

        self._service_kind = service_kind
