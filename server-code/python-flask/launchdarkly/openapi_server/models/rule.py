from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.clause import Clause
from openapi_server.models.rollout import Rollout
from openapi_server import util

from openapi_server.models.clause import Clause  # noqa: E501
from openapi_server.models.rollout import Rollout  # noqa: E501

class Rule(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, clauses=None, description=None, rollout=None, track_events=None, variation=None):  # noqa: E501
        """Rule - a model defined in OpenAPI

        :param id: The id of this Rule.  # noqa: E501
        :type id: str
        :param clauses: The clauses of this Rule.  # noqa: E501
        :type clauses: List[Clause]
        :param description: The description of this Rule.  # noqa: E501
        :type description: str
        :param rollout: The rollout of this Rule.  # noqa: E501
        :type rollout: Rollout
        :param track_events: The track_events of this Rule.  # noqa: E501
        :type track_events: bool
        :param variation: The variation of this Rule.  # noqa: E501
        :type variation: int
        """
        self.openapi_types = {
            'id': str,
            'clauses': List[Clause],
            'description': str,
            'rollout': Rollout,
            'track_events': bool,
            'variation': int
        }

        self.attribute_map = {
            'id': '_id',
            'clauses': 'clauses',
            'description': 'description',
            'rollout': 'rollout',
            'track_events': 'trackEvents',
            'variation': 'variation'
        }

        self._id = id
        self._clauses = clauses
        self._description = description
        self._rollout = rollout
        self._track_events = track_events
        self._variation = variation

    @classmethod
    def from_dict(cls, dikt) -> 'Rule':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Rule of this Rule.  # noqa: E501
        :rtype: Rule
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Rule.


        :return: The id of this Rule.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Rule.


        :param id: The id of this Rule.
        :type id: str
        """

        self._id = id

    @property
    def clauses(self) -> List[Clause]:
        """Gets the clauses of this Rule.


        :return: The clauses of this Rule.
        :rtype: List[Clause]
        """
        return self._clauses

    @clauses.setter
    def clauses(self, clauses: List[Clause]):
        """Sets the clauses of this Rule.


        :param clauses: The clauses of this Rule.
        :type clauses: List[Clause]
        """

        self._clauses = clauses

    @property
    def description(self) -> str:
        """Gets the description of this Rule.


        :return: The description of this Rule.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Rule.


        :param description: The description of this Rule.
        :type description: str
        """

        self._description = description

    @property
    def rollout(self) -> Rollout:
        """Gets the rollout of this Rule.


        :return: The rollout of this Rule.
        :rtype: Rollout
        """
        return self._rollout

    @rollout.setter
    def rollout(self, rollout: Rollout):
        """Sets the rollout of this Rule.


        :param rollout: The rollout of this Rule.
        :type rollout: Rollout
        """

        self._rollout = rollout

    @property
    def track_events(self) -> bool:
        """Gets the track_events of this Rule.


        :return: The track_events of this Rule.
        :rtype: bool
        """
        return self._track_events

    @track_events.setter
    def track_events(self, track_events: bool):
        """Sets the track_events of this Rule.


        :param track_events: The track_events of this Rule.
        :type track_events: bool
        """

        self._track_events = track_events

    @property
    def variation(self) -> int:
        """Gets the variation of this Rule.


        :return: The variation of this Rule.
        :rtype: int
        """
        return self._variation

    @variation.setter
    def variation(self, variation: int):
        """Sets the variation of this Rule.


        :param variation: The variation of this Rule.
        :type variation: int
        """

        self._variation = variation
