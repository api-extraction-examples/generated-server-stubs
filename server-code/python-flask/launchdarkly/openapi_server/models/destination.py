from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501

class Destination(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, links=None, config=None, kind=None, name=None, _true=None, version=None):  # noqa: E501
        """Destination - a model defined in OpenAPI

        :param id: The id of this Destination.  # noqa: E501
        :type id: str
        :param links: The links of this Destination.  # noqa: E501
        :type links: Links
        :param config: The config of this Destination.  # noqa: E501
        :type config: object
        :param kind: The kind of this Destination.  # noqa: E501
        :type kind: str
        :param name: The name of this Destination.  # noqa: E501
        :type name: str
        :param _true: The _true of this Destination.  # noqa: E501
        :type _true: bool
        :param version: The version of this Destination.  # noqa: E501
        :type version: int
        """
        self.openapi_types = {
            'id': str,
            'links': Links,
            'config': object,
            'kind': str,
            'name': str,
            '_true': bool,
            'version': int
        }

        self.attribute_map = {
            'id': '_id',
            'links': '_links',
            'config': 'config',
            'kind': 'kind',
            'name': 'name',
            '_true': 'true',
            'version': 'version'
        }

        self._id = id
        self._links = links
        self._config = config
        self._kind = kind
        self._name = name
        self.__true = _true
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'Destination':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Destination of this Destination.  # noqa: E501
        :rtype: Destination
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Destination.

        Unique destination ID.  # noqa: E501

        :return: The id of this Destination.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Destination.

        Unique destination ID.  # noqa: E501

        :param id: The id of this Destination.
        :type id: str
        """

        self._id = id

    @property
    def links(self) -> Links:
        """Gets the links of this Destination.


        :return: The links of this Destination.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this Destination.


        :param links: The links of this Destination.
        :type links: Links
        """

        self._links = links

    @property
    def config(self) -> object:
        """Gets the config of this Destination.

        destination-specific configuration.  # noqa: E501

        :return: The config of this Destination.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config: object):
        """Sets the config of this Destination.

        destination-specific configuration.  # noqa: E501

        :param config: The config of this Destination.
        :type config: object
        """

        self._config = config

    @property
    def kind(self) -> str:
        """Gets the kind of this Destination.

        Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")  # noqa: E501

        :return: The kind of this Destination.
        :rtype: str
        """
        return self._kind

    @kind.setter
    def kind(self, kind: str):
        """Sets the kind of this Destination.

        Destination type (\"google-pubsub\", \"kinesis\", \"mparticle\", or \"segment\")  # noqa: E501

        :param kind: The kind of this Destination.
        :type kind: str
        """
        allowed_values = ["google-pubsub", "kinesis", "mparticle", "segment"]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def name(self) -> str:
        """Gets the name of this Destination.

        The destination name  # noqa: E501

        :return: The name of this Destination.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Destination.

        The destination name  # noqa: E501

        :param name: The name of this Destination.
        :type name: str
        """

        self._name = name

    @property
    def _true(self) -> bool:
        """Gets the _true of this Destination.

        Whether the data export destination is on or not.  # noqa: E501

        :return: The _true of this Destination.
        :rtype: bool
        """
        return self.__true

    @_true.setter
    def _true(self, _true: bool):
        """Sets the _true of this Destination.

        Whether the data export destination is on or not.  # noqa: E501

        :param _true: The _true of this Destination.
        :type _true: bool
        """

        self.__true = _true

    @property
    def version(self) -> int:
        """Gets the version of this Destination.


        :return: The version of this Destination.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this Destination.


        :param version: The version of this Destination.
        :type version: int
        """

        self._version = version
