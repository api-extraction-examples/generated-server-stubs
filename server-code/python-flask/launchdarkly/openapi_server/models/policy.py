from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Policy(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actions=None, effect=None, not_actions=None, not_resources=None, resources=None):  # noqa: E501
        """Policy - a model defined in OpenAPI

        :param actions: The actions of this Policy.  # noqa: E501
        :type actions: List[str]
        :param effect: The effect of this Policy.  # noqa: E501
        :type effect: str
        :param not_actions: The not_actions of this Policy.  # noqa: E501
        :type not_actions: List[str]
        :param not_resources: The not_resources of this Policy.  # noqa: E501
        :type not_resources: List[str]
        :param resources: The resources of this Policy.  # noqa: E501
        :type resources: List[str]
        """
        self.openapi_types = {
            'actions': List[str],
            'effect': str,
            'not_actions': List[str],
            'not_resources': List[str],
            'resources': List[str]
        }

        self.attribute_map = {
            'actions': 'actions',
            'effect': 'effect',
            'not_actions': 'notActions',
            'not_resources': 'notResources',
            'resources': 'resources'
        }

        self._actions = actions
        self._effect = effect
        self._not_actions = not_actions
        self._not_resources = not_resources
        self._resources = resources

    @classmethod
    def from_dict(cls, dikt) -> 'Policy':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Policy of this Policy.  # noqa: E501
        :rtype: Policy
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actions(self) -> List[str]:
        """Gets the actions of this Policy.


        :return: The actions of this Policy.
        :rtype: List[str]
        """
        return self._actions

    @actions.setter
    def actions(self, actions: List[str]):
        """Sets the actions of this Policy.


        :param actions: The actions of this Policy.
        :type actions: List[str]
        """

        self._actions = actions

    @property
    def effect(self) -> str:
        """Gets the effect of this Policy.

        Effect of the policy - allow or deny.  # noqa: E501

        :return: The effect of this Policy.
        :rtype: str
        """
        return self._effect

    @effect.setter
    def effect(self, effect: str):
        """Sets the effect of this Policy.

        Effect of the policy - allow or deny.  # noqa: E501

        :param effect: The effect of this Policy.
        :type effect: str
        """

        self._effect = effect

    @property
    def not_actions(self) -> List[str]:
        """Gets the not_actions of this Policy.

        Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.  # noqa: E501

        :return: The not_actions of this Policy.
        :rtype: List[str]
        """
        return self._not_actions

    @not_actions.setter
    def not_actions(self, not_actions: List[str]):
        """Sets the not_actions of this Policy.

        Targeted actions will be those actions NOT in this list. The \"actions\" field must be empty to use this field.  # noqa: E501

        :param not_actions: The not_actions of this Policy.
        :type not_actions: List[str]
        """

        self._not_actions = not_actions

    @property
    def not_resources(self) -> List[str]:
        """Gets the not_resources of this Policy.

        Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.  # noqa: E501

        :return: The not_resources of this Policy.
        :rtype: List[str]
        """
        return self._not_resources

    @not_resources.setter
    def not_resources(self, not_resources: List[str]):
        """Sets the not_resources of this Policy.

        Targeted resource will be those resources NOT in this list. The \"resources`\" field must be empty to use this field.  # noqa: E501

        :param not_resources: The not_resources of this Policy.
        :type not_resources: List[str]
        """

        self._not_resources = not_resources

    @property
    def resources(self) -> List[str]:
        """Gets the resources of this Policy.


        :return: The resources of this Policy.
        :rtype: List[str]
        """
        return self._resources

    @resources.setter
    def resources(self, resources: List[str]):
        """Sets the resources of this Policy.


        :param resources: The resources of this Policy.
        :type resources: List[str]
        """

        self._resources = resources
