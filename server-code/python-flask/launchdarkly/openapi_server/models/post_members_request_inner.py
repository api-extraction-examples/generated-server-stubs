from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.role import Role
from openapi_server.models.statement import Statement
from openapi_server import util

from openapi_server.models.role import Role  # noqa: E501
from openapi_server.models.statement import Statement  # noqa: E501

class PostMembersRequestInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, custom_roles=None, email=None, first_name=None, inline_role=None, last_name=None, role=None):  # noqa: E501
        """PostMembersRequestInner - a model defined in OpenAPI

        :param custom_roles: The custom_roles of this PostMembersRequestInner.  # noqa: E501
        :type custom_roles: List[str]
        :param email: The email of this PostMembersRequestInner.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this PostMembersRequestInner.  # noqa: E501
        :type first_name: str
        :param inline_role: The inline_role of this PostMembersRequestInner.  # noqa: E501
        :type inline_role: List[Statement]
        :param last_name: The last_name of this PostMembersRequestInner.  # noqa: E501
        :type last_name: str
        :param role: The role of this PostMembersRequestInner.  # noqa: E501
        :type role: Role
        """
        self.openapi_types = {
            'custom_roles': List[str],
            'email': str,
            'first_name': str,
            'inline_role': List[Statement],
            'last_name': str,
            'role': Role
        }

        self.attribute_map = {
            'custom_roles': 'customRoles',
            'email': 'email',
            'first_name': 'firstName',
            'inline_role': 'inlineRole',
            'last_name': 'lastName',
            'role': 'role'
        }

        self._custom_roles = custom_roles
        self._email = email
        self._first_name = first_name
        self._inline_role = inline_role
        self._last_name = last_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'PostMembersRequestInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The postMembers_request_inner of this PostMembersRequestInner.  # noqa: E501
        :rtype: PostMembersRequestInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def custom_roles(self) -> List[str]:
        """Gets the custom_roles of this PostMembersRequestInner.


        :return: The custom_roles of this PostMembersRequestInner.
        :rtype: List[str]
        """
        return self._custom_roles

    @custom_roles.setter
    def custom_roles(self, custom_roles: List[str]):
        """Sets the custom_roles of this PostMembersRequestInner.


        :param custom_roles: The custom_roles of this PostMembersRequestInner.
        :type custom_roles: List[str]
        """

        self._custom_roles = custom_roles

    @property
    def email(self) -> str:
        """Gets the email of this PostMembersRequestInner.


        :return: The email of this PostMembersRequestInner.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this PostMembersRequestInner.


        :param email: The email of this PostMembersRequestInner.
        :type email: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this PostMembersRequestInner.


        :return: The first_name of this PostMembersRequestInner.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this PostMembersRequestInner.


        :param first_name: The first_name of this PostMembersRequestInner.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def inline_role(self) -> List[Statement]:
        """Gets the inline_role of this PostMembersRequestInner.


        :return: The inline_role of this PostMembersRequestInner.
        :rtype: List[Statement]
        """
        return self._inline_role

    @inline_role.setter
    def inline_role(self, inline_role: List[Statement]):
        """Sets the inline_role of this PostMembersRequestInner.


        :param inline_role: The inline_role of this PostMembersRequestInner.
        :type inline_role: List[Statement]
        """

        self._inline_role = inline_role

    @property
    def last_name(self) -> str:
        """Gets the last_name of this PostMembersRequestInner.


        :return: The last_name of this PostMembersRequestInner.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this PostMembersRequestInner.


        :param last_name: The last_name of this PostMembersRequestInner.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def role(self) -> Role:
        """Gets the role of this PostMembersRequestInner.


        :return: The role of this PostMembersRequestInner.
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role: Role):
        """Sets the role of this PostMembersRequestInner.


        :param role: The role of this PostMembersRequestInner.
        :type role: Role
        """

        self._role = role
