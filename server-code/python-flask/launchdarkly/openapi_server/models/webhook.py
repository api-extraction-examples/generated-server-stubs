from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.statement import Statement
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.statement import Statement  # noqa: E501

class Webhook(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, links=None, name=None, _true=None, secret=None, statements=None, tags=None, url=None):  # noqa: E501
        """Webhook - a model defined in OpenAPI

        :param id: The id of this Webhook.  # noqa: E501
        :type id: str
        :param links: The links of this Webhook.  # noqa: E501
        :type links: Links
        :param name: The name of this Webhook.  # noqa: E501
        :type name: str
        :param _true: The _true of this Webhook.  # noqa: E501
        :type _true: bool
        :param secret: The secret of this Webhook.  # noqa: E501
        :type secret: str
        :param statements: The statements of this Webhook.  # noqa: E501
        :type statements: List[Statement]
        :param tags: The tags of this Webhook.  # noqa: E501
        :type tags: List[str]
        :param url: The url of this Webhook.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'id': str,
            'links': Links,
            'name': str,
            '_true': bool,
            'secret': str,
            'statements': List[Statement],
            'tags': List[str],
            'url': str
        }

        self.attribute_map = {
            'id': '_id',
            'links': '_links',
            'name': 'name',
            '_true': 'true',
            'secret': 'secret',
            'statements': 'statements',
            'tags': 'tags',
            'url': 'url'
        }

        self._id = id
        self._links = links
        self._name = name
        self.__true = _true
        self._secret = secret
        self._statements = statements
        self._tags = tags
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Webhook':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Webhook of this Webhook.  # noqa: E501
        :rtype: Webhook
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Webhook.

        The unique resource id.  # noqa: E501

        :return: The id of this Webhook.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Webhook.

        The unique resource id.  # noqa: E501

        :param id: The id of this Webhook.
        :type id: str
        """

        self._id = id

    @property
    def links(self) -> Links:
        """Gets the links of this Webhook.


        :return: The links of this Webhook.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this Webhook.


        :param links: The links of this Webhook.
        :type links: Links
        """

        self._links = links

    @property
    def name(self) -> str:
        """Gets the name of this Webhook.

        The name of the webhook.  # noqa: E501

        :return: The name of this Webhook.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Webhook.

        The name of the webhook.  # noqa: E501

        :param name: The name of this Webhook.
        :type name: str
        """

        self._name = name

    @property
    def _true(self) -> bool:
        """Gets the _true of this Webhook.

        Whether this webhook is enabled or not.  # noqa: E501

        :return: The _true of this Webhook.
        :rtype: bool
        """
        return self.__true

    @_true.setter
    def _true(self, _true: bool):
        """Sets the _true of this Webhook.

        Whether this webhook is enabled or not.  # noqa: E501

        :param _true: The _true of this Webhook.
        :type _true: bool
        """

        self.__true = _true

    @property
    def secret(self) -> str:
        """Gets the secret of this Webhook.

        If defined, the webhooks post request will include a X-LD-Signature header whose value will contain an HMAC SHA256 hex digest of the webhook payload, using the secret as the key.  # noqa: E501

        :return: The secret of this Webhook.
        :rtype: str
        """
        return self._secret

    @secret.setter
    def secret(self, secret: str):
        """Sets the secret of this Webhook.

        If defined, the webhooks post request will include a X-LD-Signature header whose value will contain an HMAC SHA256 hex digest of the webhook payload, using the secret as the key.  # noqa: E501

        :param secret: The secret of this Webhook.
        :type secret: str
        """

        self._secret = secret

    @property
    def statements(self) -> List[Statement]:
        """Gets the statements of this Webhook.


        :return: The statements of this Webhook.
        :rtype: List[Statement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements: List[Statement]):
        """Sets the statements of this Webhook.


        :param statements: The statements of this Webhook.
        :type statements: List[Statement]
        """

        self._statements = statements

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Webhook.

        Tags assigned to this webhook.  # noqa: E501

        :return: The tags of this Webhook.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Webhook.

        Tags assigned to this webhook.  # noqa: E501

        :param tags: The tags of this Webhook.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def url(self) -> str:
        """Gets the url of this Webhook.

        The URL of the remote webhook.  # noqa: E501

        :return: The url of this Webhook.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Webhook.

        The URL of the remote webhook.  # noqa: E501

        :param url: The url of this Webhook.
        :type url: str
        """

        self._url = url
