from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Defaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, off_variation=None, on_variation=None):  # noqa: E501
        """Defaults - a model defined in OpenAPI

        :param off_variation: The off_variation of this Defaults.  # noqa: E501
        :type off_variation: int
        :param on_variation: The on_variation of this Defaults.  # noqa: E501
        :type on_variation: int
        """
        self.openapi_types = {
            'off_variation': int,
            'on_variation': int
        }

        self.attribute_map = {
            'off_variation': 'offVariation',
            'on_variation': 'onVariation'
        }

        self._off_variation = off_variation
        self._on_variation = on_variation

    @classmethod
    def from_dict(cls, dikt) -> 'Defaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Defaults of this Defaults.  # noqa: E501
        :rtype: Defaults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def off_variation(self) -> int:
        """Gets the off_variation of this Defaults.

        The index of the variation to be served when a flag is off.  # noqa: E501

        :return: The off_variation of this Defaults.
        :rtype: int
        """
        return self._off_variation

    @off_variation.setter
    def off_variation(self, off_variation: int):
        """Sets the off_variation of this Defaults.

        The index of the variation to be served when a flag is off.  # noqa: E501

        :param off_variation: The off_variation of this Defaults.
        :type off_variation: int
        """
        if off_variation is None:
            raise ValueError("Invalid value for `off_variation`, must not be `None`")  # noqa: E501

        self._off_variation = off_variation

    @property
    def on_variation(self) -> int:
        """Gets the on_variation of this Defaults.

        The index of the variation to be served when a flag's targeting is on (default variation).  # noqa: E501

        :return: The on_variation of this Defaults.
        :rtype: int
        """
        return self._on_variation

    @on_variation.setter
    def on_variation(self, on_variation: int):
        """Sets the on_variation of this Defaults.

        The index of the variation to be served when a flag's targeting is on (default variation).  # noqa: E501

        :param on_variation: The on_variation of this Defaults.
        :type on_variation: int
        """
        if on_variation is None:
            raise ValueError("Invalid value for `on_variation`, must not be `None`")  # noqa: E501

        self._on_variation = on_variation
