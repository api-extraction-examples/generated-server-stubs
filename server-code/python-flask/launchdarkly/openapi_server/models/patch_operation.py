from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PatchOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, op=None, path=None, value=None):  # noqa: E501
        """PatchOperation - a model defined in OpenAPI

        :param op: The op of this PatchOperation.  # noqa: E501
        :type op: str
        :param path: The path of this PatchOperation.  # noqa: E501
        :type path: str
        :param value: The value of this PatchOperation.  # noqa: E501
        :type value: object
        """
        self.openapi_types = {
            'op': str,
            'path': str,
            'value': object
        }

        self.attribute_map = {
            'op': 'op',
            'path': 'path',
            'value': 'value'
        }

        self._op = op
        self._path = path
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'PatchOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PatchOperation of this PatchOperation.  # noqa: E501
        :rtype: PatchOperation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def op(self) -> str:
        """Gets the op of this PatchOperation.


        :return: The op of this PatchOperation.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op: str):
        """Sets the op of this PatchOperation.


        :param op: The op of this PatchOperation.
        :type op: str
        """
        if op is None:
            raise ValueError("Invalid value for `op`, must not be `None`")  # noqa: E501

        self._op = op

    @property
    def path(self) -> str:
        """Gets the path of this PatchOperation.


        :return: The path of this PatchOperation.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this PatchOperation.


        :param path: The path of this PatchOperation.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def value(self) -> object:
        """Gets the value of this PatchOperation.


        :return: The value of this PatchOperation.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """Sets the value of this PatchOperation.


        :param value: The value of this PatchOperation.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
