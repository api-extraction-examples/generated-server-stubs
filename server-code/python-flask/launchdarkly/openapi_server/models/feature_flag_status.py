from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.feature_flag_status_links import FeatureFlagStatusLinks
from openapi_server import util

from openapi_server.models.feature_flag_status_links import FeatureFlagStatusLinks  # noqa: E501

class FeatureFlagStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, default=None, last_requested=None, name=None):  # noqa: E501
        """FeatureFlagStatus - a model defined in OpenAPI

        :param links: The links of this FeatureFlagStatus.  # noqa: E501
        :type links: FeatureFlagStatusLinks
        :param default: The default of this FeatureFlagStatus.  # noqa: E501
        :type default: object
        :param last_requested: The last_requested of this FeatureFlagStatus.  # noqa: E501
        :type last_requested: str
        :param name: The name of this FeatureFlagStatus.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'links': FeatureFlagStatusLinks,
            'default': object,
            'last_requested': str,
            'name': str
        }

        self.attribute_map = {
            'links': '_links',
            'default': 'default',
            'last_requested': 'lastRequested',
            'name': 'name'
        }

        self._links = links
        self._default = default
        self._last_requested = last_requested
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureFlagStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureFlagStatus of this FeatureFlagStatus.  # noqa: E501
        :rtype: FeatureFlagStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> FeatureFlagStatusLinks:
        """Gets the links of this FeatureFlagStatus.


        :return: The links of this FeatureFlagStatus.
        :rtype: FeatureFlagStatusLinks
        """
        return self._links

    @links.setter
    def links(self, links: FeatureFlagStatusLinks):
        """Sets the links of this FeatureFlagStatus.


        :param links: The links of this FeatureFlagStatus.
        :type links: FeatureFlagStatusLinks
        """

        self._links = links

    @property
    def default(self) -> object:
        """Gets the default of this FeatureFlagStatus.


        :return: The default of this FeatureFlagStatus.
        :rtype: object
        """
        return self._default

    @default.setter
    def default(self, default: object):
        """Sets the default of this FeatureFlagStatus.


        :param default: The default of this FeatureFlagStatus.
        :type default: object
        """

        self._default = default

    @property
    def last_requested(self) -> str:
        """Gets the last_requested of this FeatureFlagStatus.


        :return: The last_requested of this FeatureFlagStatus.
        :rtype: str
        """
        return self._last_requested

    @last_requested.setter
    def last_requested(self, last_requested: str):
        """Sets the last_requested of this FeatureFlagStatus.


        :param last_requested: The last_requested of this FeatureFlagStatus.
        :type last_requested: str
        """

        self._last_requested = last_requested

    @property
    def name(self) -> str:
        """Gets the name of this FeatureFlagStatus.

        | Name     | Description | | --------:| ----------- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |   # noqa: E501

        :return: The name of this FeatureFlagStatus.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FeatureFlagStatus.

        | Name     | Description | | --------:| ----------- | | new      | the feature flag was created within the last 7 days, and has not been requested yet | | active   | the feature flag was requested by your servers or clients within the last 7 days | | inactive | the feature flag was created more than 7 days ago, and hasn't been requested by your servers or clients within the past 7 days | | launched | one variation of the feature flag has been rolled out to all your users for at least 7 days |   # noqa: E501

        :param name: The name of this FeatureFlagStatus.
        :type name: str
        """
        allowed_values = ["new", "active", "inactive", "launched"]  # noqa: E501
        if name not in allowed_values:
            raise ValueError(
                "Invalid value for `name` ({0}), must be one of {1}"
                .format(name, allowed_values)
            )

        self._name = name
