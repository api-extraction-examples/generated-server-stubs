from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner
from openapi_server import util

from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner  # noqa: E501

class FeatureFlagScheduledChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, version=None, execution_date=None, instructions=None):  # noqa: E501
        """FeatureFlagScheduledChange - a model defined in OpenAPI

        :param id: The id of this FeatureFlagScheduledChange.  # noqa: E501
        :type id: str
        :param version: The version of this FeatureFlagScheduledChange.  # noqa: E501
        :type version: int
        :param execution_date: The execution_date of this FeatureFlagScheduledChange.  # noqa: E501
        :type execution_date: int
        :param instructions: The instructions of this FeatureFlagScheduledChange.  # noqa: E501
        :type instructions: List[SemanticPatchInstructionInner]
        """
        self.openapi_types = {
            'id': str,
            'version': int,
            'execution_date': int,
            'instructions': List[SemanticPatchInstructionInner]
        }

        self.attribute_map = {
            'id': '_id',
            'version': '_version',
            'execution_date': 'executionDate',
            'instructions': 'instructions'
        }

        self._id = id
        self._version = version
        self._execution_date = execution_date
        self._instructions = instructions

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureFlagScheduledChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureFlagScheduledChange of this FeatureFlagScheduledChange.  # noqa: E501
        :rtype: FeatureFlagScheduledChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this FeatureFlagScheduledChange.


        :return: The id of this FeatureFlagScheduledChange.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this FeatureFlagScheduledChange.


        :param id: The id of this FeatureFlagScheduledChange.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this FeatureFlagScheduledChange.


        :return: The version of this FeatureFlagScheduledChange.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this FeatureFlagScheduledChange.


        :param version: The version of this FeatureFlagScheduledChange.
        :type version: int
        """

        self._version = version

    @property
    def execution_date(self) -> int:
        """Gets the execution_date of this FeatureFlagScheduledChange.

        A unix epoch time in milliseconds specifying the date the scheduled changes will be applied  # noqa: E501

        :return: The execution_date of this FeatureFlagScheduledChange.
        :rtype: int
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date: int):
        """Sets the execution_date of this FeatureFlagScheduledChange.

        A unix epoch time in milliseconds specifying the date the scheduled changes will be applied  # noqa: E501

        :param execution_date: The execution_date of this FeatureFlagScheduledChange.
        :type execution_date: int
        """

        self._execution_date = execution_date

    @property
    def instructions(self) -> List[SemanticPatchInstructionInner]:
        """Gets the instructions of this FeatureFlagScheduledChange.


        :return: The instructions of this FeatureFlagScheduledChange.
        :rtype: List[SemanticPatchInstructionInner]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: List[SemanticPatchInstructionInner]):
        """Sets the instructions of this FeatureFlagScheduledChange.


        :param instructions: The instructions of this FeatureFlagScheduledChange.
        :type instructions: List[SemanticPatchInstructionInner]
        """

        self._instructions = instructions
