from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.patch_operation import PatchOperation
from openapi_server import util

from openapi_server.models.patch_operation import PatchOperation  # noqa: E501

class PatchFeatureFlagRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment=None, patch=None):  # noqa: E501
        """PatchFeatureFlagRequest - a model defined in OpenAPI

        :param comment: The comment of this PatchFeatureFlagRequest.  # noqa: E501
        :type comment: str
        :param patch: The patch of this PatchFeatureFlagRequest.  # noqa: E501
        :type patch: List[PatchOperation]
        """
        self.openapi_types = {
            'comment': str,
            'patch': List[PatchOperation]
        }

        self.attribute_map = {
            'comment': 'comment',
            'patch': 'patch'
        }

        self._comment = comment
        self._patch = patch

    @classmethod
    def from_dict(cls, dikt) -> 'PatchFeatureFlagRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The patchFeatureFlag_request of this PatchFeatureFlagRequest.  # noqa: E501
        :rtype: PatchFeatureFlagRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self) -> str:
        """Gets the comment of this PatchFeatureFlagRequest.


        :return: The comment of this PatchFeatureFlagRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this PatchFeatureFlagRequest.


        :param comment: The comment of this PatchFeatureFlagRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def patch(self) -> List[PatchOperation]:
        """Gets the patch of this PatchFeatureFlagRequest.


        :return: The patch of this PatchFeatureFlagRequest.
        :rtype: List[PatchOperation]
        """
        return self._patch

    @patch.setter
    def patch(self, patch: List[PatchOperation]):
        """Sets the patch of this PatchFeatureFlagRequest.


        :param patch: The patch of this PatchFeatureFlagRequest.
        :type patch: List[PatchOperation]
        """

        self._patch = patch
