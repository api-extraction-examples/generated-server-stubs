from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.statement import Statement
from openapi_server import util

from openapi_server.models.statement import Statement  # noqa: E501

class PostIntegrationSubscriptionRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config=None, name=None, _true=None, statements=None, tags=None):  # noqa: E501
        """PostIntegrationSubscriptionRequest - a model defined in OpenAPI

        :param config: The config of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :type config: object
        :param name: The name of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :type name: str
        :param _true: The _true of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :type _true: bool
        :param statements: The statements of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :type statements: List[Statement]
        :param tags: The tags of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'config': object,
            'name': str,
            '_true': bool,
            'statements': List[Statement],
            'tags': List[str]
        }

        self.attribute_map = {
            'config': 'config',
            'name': 'name',
            '_true': 'true',
            'statements': 'statements',
            'tags': 'tags'
        }

        self._config = config
        self._name = name
        self.__true = _true
        self._statements = statements
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'PostIntegrationSubscriptionRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The postIntegrationSubscription_request of this PostIntegrationSubscriptionRequest.  # noqa: E501
        :rtype: PostIntegrationSubscriptionRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self) -> object:
        """Gets the config of this PostIntegrationSubscriptionRequest.

        Integration-specific configuration fields.  # noqa: E501

        :return: The config of this PostIntegrationSubscriptionRequest.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config: object):
        """Sets the config of this PostIntegrationSubscriptionRequest.

        Integration-specific configuration fields.  # noqa: E501

        :param config: The config of this PostIntegrationSubscriptionRequest.
        :type config: object
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def name(self) -> str:
        """Gets the name of this PostIntegrationSubscriptionRequest.

        A human-readable name for your subscription configuration.  # noqa: E501

        :return: The name of this PostIntegrationSubscriptionRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PostIntegrationSubscriptionRequest.

        A human-readable name for your subscription configuration.  # noqa: E501

        :param name: The name of this PostIntegrationSubscriptionRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def _true(self) -> bool:
        """Gets the _true of this PostIntegrationSubscriptionRequest.

        Whether the integration subscription is active or not.  # noqa: E501

        :return: The _true of this PostIntegrationSubscriptionRequest.
        :rtype: bool
        """
        return self.__true

    @_true.setter
    def _true(self, _true: bool):
        """Sets the _true of this PostIntegrationSubscriptionRequest.

        Whether the integration subscription is active or not.  # noqa: E501

        :param _true: The _true of this PostIntegrationSubscriptionRequest.
        :type _true: bool
        """

        self.__true = _true

    @property
    def statements(self) -> List[Statement]:
        """Gets the statements of this PostIntegrationSubscriptionRequest.


        :return: The statements of this PostIntegrationSubscriptionRequest.
        :rtype: List[Statement]
        """
        return self._statements

    @statements.setter
    def statements(self, statements: List[Statement]):
        """Sets the statements of this PostIntegrationSubscriptionRequest.


        :param statements: The statements of this PostIntegrationSubscriptionRequest.
        :type statements: List[Statement]
        """

        self._statements = statements

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this PostIntegrationSubscriptionRequest.

        Tags for the integration subscription.  # noqa: E501

        :return: The tags of this PostIntegrationSubscriptionRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this PostIntegrationSubscriptionRequest.

        Tags for the integration subscription.  # noqa: E501

        :param tags: The tags of this PostIntegrationSubscriptionRequest.
        :type tags: List[str]
        """

        self._tags = tags
