from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner
from openapi_server import util

from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner  # noqa: E501

class SemanticPatchOperation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment=None, instructions=None):  # noqa: E501
        """SemanticPatchOperation - a model defined in OpenAPI

        :param comment: The comment of this SemanticPatchOperation.  # noqa: E501
        :type comment: str
        :param instructions: The instructions of this SemanticPatchOperation.  # noqa: E501
        :type instructions: List[SemanticPatchInstructionInner]
        """
        self.openapi_types = {
            'comment': str,
            'instructions': List[SemanticPatchInstructionInner]
        }

        self.attribute_map = {
            'comment': 'comment',
            'instructions': 'instructions'
        }

        self._comment = comment
        self._instructions = instructions

    @classmethod
    def from_dict(cls, dikt) -> 'SemanticPatchOperation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SemanticPatchOperation of this SemanticPatchOperation.  # noqa: E501
        :rtype: SemanticPatchOperation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self) -> str:
        """Gets the comment of this SemanticPatchOperation.


        :return: The comment of this SemanticPatchOperation.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this SemanticPatchOperation.


        :param comment: The comment of this SemanticPatchOperation.
        :type comment: str
        """

        self._comment = comment

    @property
    def instructions(self) -> List[SemanticPatchInstructionInner]:
        """Gets the instructions of this SemanticPatchOperation.


        :return: The instructions of this SemanticPatchOperation.
        :rtype: List[SemanticPatchInstructionInner]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: List[SemanticPatchInstructionInner]):
        """Sets the instructions of this SemanticPatchOperation.


        :param instructions: The instructions of this SemanticPatchOperation.
        :type instructions: List[SemanticPatchInstructionInner]
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions
