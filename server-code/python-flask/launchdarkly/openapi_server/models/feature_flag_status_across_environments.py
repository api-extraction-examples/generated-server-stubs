from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.feature_flag_status_for_queried_environment import FeatureFlagStatusForQueriedEnvironment
from openapi_server.models.feature_flag_status_links import FeatureFlagStatusLinks
from openapi_server import util

from openapi_server.models.feature_flag_status_for_queried_environment import FeatureFlagStatusForQueriedEnvironment  # noqa: E501
from openapi_server.models.feature_flag_status_links import FeatureFlagStatusLinks  # noqa: E501

class FeatureFlagStatusAcrossEnvironments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, environments=None, key=None):  # noqa: E501
        """FeatureFlagStatusAcrossEnvironments - a model defined in OpenAPI

        :param links: The links of this FeatureFlagStatusAcrossEnvironments.  # noqa: E501
        :type links: FeatureFlagStatusLinks
        :param environments: The environments of this FeatureFlagStatusAcrossEnvironments.  # noqa: E501
        :type environments: Dict[str, FeatureFlagStatusForQueriedEnvironment]
        :param key: The key of this FeatureFlagStatusAcrossEnvironments.  # noqa: E501
        :type key: str
        """
        self.openapi_types = {
            'links': FeatureFlagStatusLinks,
            'environments': Dict[str, FeatureFlagStatusForQueriedEnvironment],
            'key': str
        }

        self.attribute_map = {
            'links': '_links',
            'environments': 'environments',
            'key': 'key'
        }

        self._links = links
        self._environments = environments
        self._key = key

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureFlagStatusAcrossEnvironments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureFlagStatusAcrossEnvironments of this FeatureFlagStatusAcrossEnvironments.  # noqa: E501
        :rtype: FeatureFlagStatusAcrossEnvironments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> FeatureFlagStatusLinks:
        """Gets the links of this FeatureFlagStatusAcrossEnvironments.


        :return: The links of this FeatureFlagStatusAcrossEnvironments.
        :rtype: FeatureFlagStatusLinks
        """
        return self._links

    @links.setter
    def links(self, links: FeatureFlagStatusLinks):
        """Sets the links of this FeatureFlagStatusAcrossEnvironments.


        :param links: The links of this FeatureFlagStatusAcrossEnvironments.
        :type links: FeatureFlagStatusLinks
        """

        self._links = links

    @property
    def environments(self) -> Dict[str, FeatureFlagStatusForQueriedEnvironment]:
        """Gets the environments of this FeatureFlagStatusAcrossEnvironments.


        :return: The environments of this FeatureFlagStatusAcrossEnvironments.
        :rtype: Dict[str, FeatureFlagStatusForQueriedEnvironment]
        """
        return self._environments

    @environments.setter
    def environments(self, environments: Dict[str, FeatureFlagStatusForQueriedEnvironment]):
        """Sets the environments of this FeatureFlagStatusAcrossEnvironments.


        :param environments: The environments of this FeatureFlagStatusAcrossEnvironments.
        :type environments: Dict[str, FeatureFlagStatusForQueriedEnvironment]
        """

        self._environments = environments

    @property
    def key(self) -> str:
        """Gets the key of this FeatureFlagStatusAcrossEnvironments.


        :return: The key of this FeatureFlagStatusAcrossEnvironments.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this FeatureFlagStatusAcrossEnvironments.


        :param key: The key of this FeatureFlagStatusAcrossEnvironments.
        :type key: str
        """

        self._key = key
