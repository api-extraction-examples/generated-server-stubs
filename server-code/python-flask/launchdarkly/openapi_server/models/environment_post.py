from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EnvironmentPost(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color=None, confirm_changes=None, default_track_events=None, default_ttl=None, key=None, name=None, require_comments=None, secure_mode=None, tags=None):  # noqa: E501
        """EnvironmentPost - a model defined in OpenAPI

        :param color: The color of this EnvironmentPost.  # noqa: E501
        :type color: str
        :param confirm_changes: The confirm_changes of this EnvironmentPost.  # noqa: E501
        :type confirm_changes: bool
        :param default_track_events: The default_track_events of this EnvironmentPost.  # noqa: E501
        :type default_track_events: bool
        :param default_ttl: The default_ttl of this EnvironmentPost.  # noqa: E501
        :type default_ttl: float
        :param key: The key of this EnvironmentPost.  # noqa: E501
        :type key: str
        :param name: The name of this EnvironmentPost.  # noqa: E501
        :type name: str
        :param require_comments: The require_comments of this EnvironmentPost.  # noqa: E501
        :type require_comments: bool
        :param secure_mode: The secure_mode of this EnvironmentPost.  # noqa: E501
        :type secure_mode: bool
        :param tags: The tags of this EnvironmentPost.  # noqa: E501
        :type tags: List[str]
        """
        self.openapi_types = {
            'color': str,
            'confirm_changes': bool,
            'default_track_events': bool,
            'default_ttl': float,
            'key': str,
            'name': str,
            'require_comments': bool,
            'secure_mode': bool,
            'tags': List[str]
        }

        self.attribute_map = {
            'color': 'color',
            'confirm_changes': 'confirmChanges',
            'default_track_events': 'defaultTrackEvents',
            'default_ttl': 'defaultTtl',
            'key': 'key',
            'name': 'name',
            'require_comments': 'requireComments',
            'secure_mode': 'secureMode',
            'tags': 'tags'
        }

        self._color = color
        self._confirm_changes = confirm_changes
        self._default_track_events = default_track_events
        self._default_ttl = default_ttl
        self._key = key
        self._name = name
        self._require_comments = require_comments
        self._secure_mode = secure_mode
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'EnvironmentPost':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnvironmentPost of this EnvironmentPost.  # noqa: E501
        :rtype: EnvironmentPost
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self) -> str:
        """Gets the color of this EnvironmentPost.

        A color swatch (as an RGB hex value with no leading '#', e.g. C8C8C8).  # noqa: E501

        :return: The color of this EnvironmentPost.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this EnvironmentPost.

        A color swatch (as an RGB hex value with no leading '#', e.g. C8C8C8).  # noqa: E501

        :param color: The color of this EnvironmentPost.
        :type color: str
        """
        if color is None:
            raise ValueError("Invalid value for `color`, must not be `None`")  # noqa: E501

        self._color = color

    @property
    def confirm_changes(self) -> bool:
        """Gets the confirm_changes of this EnvironmentPost.

        Determines if this environment requires confirmation for flag and segment changes.  # noqa: E501

        :return: The confirm_changes of this EnvironmentPost.
        :rtype: bool
        """
        return self._confirm_changes

    @confirm_changes.setter
    def confirm_changes(self, confirm_changes: bool):
        """Sets the confirm_changes of this EnvironmentPost.

        Determines if this environment requires confirmation for flag and segment changes.  # noqa: E501

        :param confirm_changes: The confirm_changes of this EnvironmentPost.
        :type confirm_changes: bool
        """

        self._confirm_changes = confirm_changes

    @property
    def default_track_events(self) -> bool:
        """Gets the default_track_events of this EnvironmentPost.

        Set to true to send detailed event information for newly created flags.  # noqa: E501

        :return: The default_track_events of this EnvironmentPost.
        :rtype: bool
        """
        return self._default_track_events

    @default_track_events.setter
    def default_track_events(self, default_track_events: bool):
        """Sets the default_track_events of this EnvironmentPost.

        Set to true to send detailed event information for newly created flags.  # noqa: E501

        :param default_track_events: The default_track_events of this EnvironmentPost.
        :type default_track_events: bool
        """

        self._default_track_events = default_track_events

    @property
    def default_ttl(self) -> float:
        """Gets the default_ttl of this EnvironmentPost.

        The default TTL for the new environment.  # noqa: E501

        :return: The default_ttl of this EnvironmentPost.
        :rtype: float
        """
        return self._default_ttl

    @default_ttl.setter
    def default_ttl(self, default_ttl: float):
        """Sets the default_ttl of this EnvironmentPost.

        The default TTL for the new environment.  # noqa: E501

        :param default_ttl: The default_ttl of this EnvironmentPost.
        :type default_ttl: float
        """

        self._default_ttl = default_ttl

    @property
    def key(self) -> str:
        """Gets the key of this EnvironmentPost.

        A project-unique key for the new environment.  # noqa: E501

        :return: The key of this EnvironmentPost.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this EnvironmentPost.

        A project-unique key for the new environment.  # noqa: E501

        :param key: The key of this EnvironmentPost.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this EnvironmentPost.

        The name of the new environment.  # noqa: E501

        :return: The name of this EnvironmentPost.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EnvironmentPost.

        The name of the new environment.  # noqa: E501

        :param name: The name of this EnvironmentPost.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def require_comments(self) -> bool:
        """Gets the require_comments of this EnvironmentPost.

        Determines if this environment requires comments for flag and segment changes.  # noqa: E501

        :return: The require_comments of this EnvironmentPost.
        :rtype: bool
        """
        return self._require_comments

    @require_comments.setter
    def require_comments(self, require_comments: bool):
        """Sets the require_comments of this EnvironmentPost.

        Determines if this environment requires comments for flag and segment changes.  # noqa: E501

        :param require_comments: The require_comments of this EnvironmentPost.
        :type require_comments: bool
        """

        self._require_comments = require_comments

    @property
    def secure_mode(self) -> bool:
        """Gets the secure_mode of this EnvironmentPost.

        Determines whether the environment is in secure mode.  # noqa: E501

        :return: The secure_mode of this EnvironmentPost.
        :rtype: bool
        """
        return self._secure_mode

    @secure_mode.setter
    def secure_mode(self, secure_mode: bool):
        """Sets the secure_mode of this EnvironmentPost.

        Determines whether the environment is in secure mode.  # noqa: E501

        :param secure_mode: The secure_mode of this EnvironmentPost.
        :type secure_mode: bool
        """

        self._secure_mode = secure_mode

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this EnvironmentPost.

        An array of tags for this environment.  # noqa: E501

        :return: The tags of this EnvironmentPost.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this EnvironmentPost.

        An array of tags for this environment.  # noqa: E501

        :param tags: The tags of this EnvironmentPost.
        :type tags: List[str]
        """

        self._tags = tags
