from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user import User
from openapi_server import util

from openapi_server.models.user import User  # noqa: E501

class UserRecord(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, avatar=None, environment_id=None, last_ping=None, owner_id=None, user=None):  # noqa: E501
        """UserRecord - a model defined in OpenAPI

        :param avatar: The avatar of this UserRecord.  # noqa: E501
        :type avatar: str
        :param environment_id: The environment_id of this UserRecord.  # noqa: E501
        :type environment_id: str
        :param last_ping: The last_ping of this UserRecord.  # noqa: E501
        :type last_ping: str
        :param owner_id: The owner_id of this UserRecord.  # noqa: E501
        :type owner_id: str
        :param user: The user of this UserRecord.  # noqa: E501
        :type user: User
        """
        self.openapi_types = {
            'avatar': str,
            'environment_id': str,
            'last_ping': str,
            'owner_id': str,
            'user': User
        }

        self.attribute_map = {
            'avatar': 'avatar',
            'environment_id': 'environmentId',
            'last_ping': 'lastPing',
            'owner_id': 'ownerId',
            'user': 'user'
        }

        self._avatar = avatar
        self._environment_id = environment_id
        self._last_ping = last_ping
        self._owner_id = owner_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'UserRecord':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserRecord of this UserRecord.  # noqa: E501
        :rtype: UserRecord
        """
        return util.deserialize_model(dikt, cls)

    @property
    def avatar(self) -> str:
        """Gets the avatar of this UserRecord.


        :return: The avatar of this UserRecord.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar: str):
        """Sets the avatar of this UserRecord.


        :param avatar: The avatar of this UserRecord.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def environment_id(self) -> str:
        """Gets the environment_id of this UserRecord.


        :return: The environment_id of this UserRecord.
        :rtype: str
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id: str):
        """Sets the environment_id of this UserRecord.


        :param environment_id: The environment_id of this UserRecord.
        :type environment_id: str
        """

        self._environment_id = environment_id

    @property
    def last_ping(self) -> str:
        """Gets the last_ping of this UserRecord.


        :return: The last_ping of this UserRecord.
        :rtype: str
        """
        return self._last_ping

    @last_ping.setter
    def last_ping(self, last_ping: str):
        """Sets the last_ping of this UserRecord.


        :param last_ping: The last_ping of this UserRecord.
        :type last_ping: str
        """

        self._last_ping = last_ping

    @property
    def owner_id(self) -> str:
        """Gets the owner_id of this UserRecord.

        The unique resource id.  # noqa: E501

        :return: The owner_id of this UserRecord.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: str):
        """Sets the owner_id of this UserRecord.

        The unique resource id.  # noqa: E501

        :param owner_id: The owner_id of this UserRecord.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def user(self) -> User:
        """Gets the user of this UserRecord.


        :return: The user of this UserRecord.
        :rtype: User
        """
        return self._user

    @user.setter
    def user(self, user: User):
        """Sets the user of this UserRecord.


        :param user: The user of this UserRecord.
        :type user: User
        """

        self._user = user
