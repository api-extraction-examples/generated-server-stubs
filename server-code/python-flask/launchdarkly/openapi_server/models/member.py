from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.member_last_seen_metadata import MemberLastSeenMetadata
from openapi_server.models.role import Role
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.member_last_seen_metadata import MemberLastSeenMetadata  # noqa: E501
from openapi_server.models.role import Role  # noqa: E501

class Member(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, last_seen=None, last_seen_metadata=None, links=None, pending_invite=None, verified=None, custom_roles=None, email=None, first_name=None, is_beta=None, last_name=None, role=None):  # noqa: E501
        """Member - a model defined in OpenAPI

        :param id: The id of this Member.  # noqa: E501
        :type id: str
        :param last_seen: The last_seen of this Member.  # noqa: E501
        :type last_seen: int
        :param last_seen_metadata: The last_seen_metadata of this Member.  # noqa: E501
        :type last_seen_metadata: MemberLastSeenMetadata
        :param links: The links of this Member.  # noqa: E501
        :type links: Links
        :param pending_invite: The pending_invite of this Member.  # noqa: E501
        :type pending_invite: bool
        :param verified: The verified of this Member.  # noqa: E501
        :type verified: bool
        :param custom_roles: The custom_roles of this Member.  # noqa: E501
        :type custom_roles: List[str]
        :param email: The email of this Member.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this Member.  # noqa: E501
        :type first_name: str
        :param is_beta: The is_beta of this Member.  # noqa: E501
        :type is_beta: bool
        :param last_name: The last_name of this Member.  # noqa: E501
        :type last_name: str
        :param role: The role of this Member.  # noqa: E501
        :type role: Role
        """
        self.openapi_types = {
            'id': str,
            'last_seen': int,
            'last_seen_metadata': MemberLastSeenMetadata,
            'links': Links,
            'pending_invite': bool,
            'verified': bool,
            'custom_roles': List[str],
            'email': str,
            'first_name': str,
            'is_beta': bool,
            'last_name': str,
            'role': Role
        }

        self.attribute_map = {
            'id': '_id',
            'last_seen': '_lastSeen',
            'last_seen_metadata': '_lastSeenMetadata',
            'links': '_links',
            'pending_invite': '_pendingInvite',
            'verified': '_verified',
            'custom_roles': 'customRoles',
            'email': 'email',
            'first_name': 'firstName',
            'is_beta': 'isBeta',
            'last_name': 'lastName',
            'role': 'role'
        }

        self._id = id
        self._last_seen = last_seen
        self._last_seen_metadata = last_seen_metadata
        self._links = links
        self._pending_invite = pending_invite
        self._verified = verified
        self._custom_roles = custom_roles
        self._email = email
        self._first_name = first_name
        self._is_beta = is_beta
        self._last_name = last_name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'Member':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Member of this Member.  # noqa: E501
        :rtype: Member
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Member.

        The unique resource id.  # noqa: E501

        :return: The id of this Member.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Member.

        The unique resource id.  # noqa: E501

        :param id: The id of this Member.
        :type id: str
        """

        self._id = id

    @property
    def last_seen(self) -> int:
        """Gets the last_seen of this Member.

        A unix epoch time in milliseconds specifying the last time this member was active in LaunchDarkly.  # noqa: E501

        :return: The last_seen of this Member.
        :rtype: int
        """
        return self._last_seen

    @last_seen.setter
    def last_seen(self, last_seen: int):
        """Sets the last_seen of this Member.

        A unix epoch time in milliseconds specifying the last time this member was active in LaunchDarkly.  # noqa: E501

        :param last_seen: The last_seen of this Member.
        :type last_seen: int
        """

        self._last_seen = last_seen

    @property
    def last_seen_metadata(self) -> MemberLastSeenMetadata:
        """Gets the last_seen_metadata of this Member.


        :return: The last_seen_metadata of this Member.
        :rtype: MemberLastSeenMetadata
        """
        return self._last_seen_metadata

    @last_seen_metadata.setter
    def last_seen_metadata(self, last_seen_metadata: MemberLastSeenMetadata):
        """Sets the last_seen_metadata of this Member.


        :param last_seen_metadata: The last_seen_metadata of this Member.
        :type last_seen_metadata: MemberLastSeenMetadata
        """

        self._last_seen_metadata = last_seen_metadata

    @property
    def links(self) -> Links:
        """Gets the links of this Member.


        :return: The links of this Member.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this Member.


        :param links: The links of this Member.
        :type links: Links
        """

        self._links = links

    @property
    def pending_invite(self) -> bool:
        """Gets the pending_invite of this Member.


        :return: The pending_invite of this Member.
        :rtype: bool
        """
        return self._pending_invite

    @pending_invite.setter
    def pending_invite(self, pending_invite: bool):
        """Sets the pending_invite of this Member.


        :param pending_invite: The pending_invite of this Member.
        :type pending_invite: bool
        """

        self._pending_invite = pending_invite

    @property
    def verified(self) -> bool:
        """Gets the verified of this Member.


        :return: The verified of this Member.
        :rtype: bool
        """
        return self._verified

    @verified.setter
    def verified(self, verified: bool):
        """Sets the verified of this Member.


        :param verified: The verified of this Member.
        :type verified: bool
        """

        self._verified = verified

    @property
    def custom_roles(self) -> List[str]:
        """Gets the custom_roles of this Member.


        :return: The custom_roles of this Member.
        :rtype: List[str]
        """
        return self._custom_roles

    @custom_roles.setter
    def custom_roles(self, custom_roles: List[str]):
        """Sets the custom_roles of this Member.


        :param custom_roles: The custom_roles of this Member.
        :type custom_roles: List[str]
        """

        self._custom_roles = custom_roles

    @property
    def email(self) -> str:
        """Gets the email of this Member.


        :return: The email of this Member.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Member.


        :param email: The email of this Member.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this Member.


        :return: The first_name of this Member.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this Member.


        :param first_name: The first_name of this Member.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def is_beta(self) -> bool:
        """Gets the is_beta of this Member.


        :return: The is_beta of this Member.
        :rtype: bool
        """
        return self._is_beta

    @is_beta.setter
    def is_beta(self, is_beta: bool):
        """Sets the is_beta of this Member.


        :param is_beta: The is_beta of this Member.
        :type is_beta: bool
        """

        self._is_beta = is_beta

    @property
    def last_name(self) -> str:
        """Gets the last_name of this Member.


        :return: The last_name of this Member.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this Member.


        :param last_name: The last_name of this Member.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def role(self) -> Role:
        """Gets the role of this Member.


        :return: The role of this Member.
        :rtype: Role
        """
        return self._role

    @role.setter
    def role(self, role: Role):
        """Sets the role of this Member.


        :param role: The role of this Member.
        :type role: Role
        """

        self._role = role
