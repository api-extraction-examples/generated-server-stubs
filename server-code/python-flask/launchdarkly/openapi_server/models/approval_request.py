from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.approval_request_review import ApprovalRequestReview
from openapi_server.models.approval_request_review_status import ApprovalRequestReviewStatus
from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner
from openapi_server import util

from openapi_server.models.approval_request_review import ApprovalRequestReview  # noqa: E501
from openapi_server.models.approval_request_review_status import ApprovalRequestReviewStatus  # noqa: E501
from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner  # noqa: E501

class ApprovalRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, version=None, all_reviews=None, applied_by_member_id=None, applied_date=None, creation_date=None, execution_date=None, instructions=None, notify_member_ids=None, operating_on_id=None, requestor_id=None, review_status=None, status=None):  # noqa: E501
        """ApprovalRequest - a model defined in OpenAPI

        :param id: The id of this ApprovalRequest.  # noqa: E501
        :type id: str
        :param version: The version of this ApprovalRequest.  # noqa: E501
        :type version: int
        :param all_reviews: The all_reviews of this ApprovalRequest.  # noqa: E501
        :type all_reviews: List[ApprovalRequestReview]
        :param applied_by_member_id: The applied_by_member_id of this ApprovalRequest.  # noqa: E501
        :type applied_by_member_id: str
        :param applied_date: The applied_date of this ApprovalRequest.  # noqa: E501
        :type applied_date: int
        :param creation_date: The creation_date of this ApprovalRequest.  # noqa: E501
        :type creation_date: int
        :param execution_date: The execution_date of this ApprovalRequest.  # noqa: E501
        :type execution_date: int
        :param instructions: The instructions of this ApprovalRequest.  # noqa: E501
        :type instructions: List[SemanticPatchInstructionInner]
        :param notify_member_ids: The notify_member_ids of this ApprovalRequest.  # noqa: E501
        :type notify_member_ids: List[str]
        :param operating_on_id: The operating_on_id of this ApprovalRequest.  # noqa: E501
        :type operating_on_id: str
        :param requestor_id: The requestor_id of this ApprovalRequest.  # noqa: E501
        :type requestor_id: str
        :param review_status: The review_status of this ApprovalRequest.  # noqa: E501
        :type review_status: ApprovalRequestReviewStatus
        :param status: The status of this ApprovalRequest.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'id': str,
            'version': int,
            'all_reviews': List[ApprovalRequestReview],
            'applied_by_member_id': str,
            'applied_date': int,
            'creation_date': int,
            'execution_date': int,
            'instructions': List[SemanticPatchInstructionInner],
            'notify_member_ids': List[str],
            'operating_on_id': str,
            'requestor_id': str,
            'review_status': ApprovalRequestReviewStatus,
            'status': str
        }

        self.attribute_map = {
            'id': '_id',
            'version': '_version',
            'all_reviews': 'allReviews',
            'applied_by_member_id': 'appliedByMemberID',
            'applied_date': 'appliedDate',
            'creation_date': 'creationDate',
            'execution_date': 'executionDate',
            'instructions': 'instructions',
            'notify_member_ids': 'notifyMemberIds',
            'operating_on_id': 'operatingOnId',
            'requestor_id': 'requestorId',
            'review_status': 'reviewStatus',
            'status': 'status'
        }

        self._id = id
        self._version = version
        self._all_reviews = all_reviews
        self._applied_by_member_id = applied_by_member_id
        self._applied_date = applied_date
        self._creation_date = creation_date
        self._execution_date = execution_date
        self._instructions = instructions
        self._notify_member_ids = notify_member_ids
        self._operating_on_id = operating_on_id
        self._requestor_id = requestor_id
        self._review_status = review_status
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ApprovalRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApprovalRequest of this ApprovalRequest.  # noqa: E501
        :rtype: ApprovalRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this ApprovalRequest.

        The unique resource id.  # noqa: E501

        :return: The id of this ApprovalRequest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApprovalRequest.

        The unique resource id.  # noqa: E501

        :param id: The id of this ApprovalRequest.
        :type id: str
        """

        self._id = id

    @property
    def version(self) -> int:
        """Gets the version of this ApprovalRequest.


        :return: The version of this ApprovalRequest.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this ApprovalRequest.


        :param version: The version of this ApprovalRequest.
        :type version: int
        """

        self._version = version

    @property
    def all_reviews(self) -> List[ApprovalRequestReview]:
        """Gets the all_reviews of this ApprovalRequest.


        :return: The all_reviews of this ApprovalRequest.
        :rtype: List[ApprovalRequestReview]
        """
        return self._all_reviews

    @all_reviews.setter
    def all_reviews(self, all_reviews: List[ApprovalRequestReview]):
        """Sets the all_reviews of this ApprovalRequest.


        :param all_reviews: The all_reviews of this ApprovalRequest.
        :type all_reviews: List[ApprovalRequestReview]
        """

        self._all_reviews = all_reviews

    @property
    def applied_by_member_id(self) -> str:
        """Gets the applied_by_member_id of this ApprovalRequest.

        The id of the member that applied the approval request  # noqa: E501

        :return: The applied_by_member_id of this ApprovalRequest.
        :rtype: str
        """
        return self._applied_by_member_id

    @applied_by_member_id.setter
    def applied_by_member_id(self, applied_by_member_id: str):
        """Sets the applied_by_member_id of this ApprovalRequest.

        The id of the member that applied the approval request  # noqa: E501

        :param applied_by_member_id: The applied_by_member_id of this ApprovalRequest.
        :type applied_by_member_id: str
        """

        self._applied_by_member_id = applied_by_member_id

    @property
    def applied_date(self) -> int:
        """Gets the applied_date of this ApprovalRequest.

        A unix epoch time in milliseconds specifying the date the approval request was applied  # noqa: E501

        :return: The applied_date of this ApprovalRequest.
        :rtype: int
        """
        return self._applied_date

    @applied_date.setter
    def applied_date(self, applied_date: int):
        """Sets the applied_date of this ApprovalRequest.

        A unix epoch time in milliseconds specifying the date the approval request was applied  # noqa: E501

        :param applied_date: The applied_date of this ApprovalRequest.
        :type applied_date: int
        """

        self._applied_date = applied_date

    @property
    def creation_date(self) -> int:
        """Gets the creation_date of this ApprovalRequest.

        A unix epoch time in milliseconds specifying the date the approval request was requested  # noqa: E501

        :return: The creation_date of this ApprovalRequest.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: int):
        """Sets the creation_date of this ApprovalRequest.

        A unix epoch time in milliseconds specifying the date the approval request was requested  # noqa: E501

        :param creation_date: The creation_date of this ApprovalRequest.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def execution_date(self) -> int:
        """Gets the execution_date of this ApprovalRequest.

        Timestamp for when instructions will be executed  # noqa: E501

        :return: The execution_date of this ApprovalRequest.
        :rtype: int
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date: int):
        """Sets the execution_date of this ApprovalRequest.

        Timestamp for when instructions will be executed  # noqa: E501

        :param execution_date: The execution_date of this ApprovalRequest.
        :type execution_date: int
        """

        self._execution_date = execution_date

    @property
    def instructions(self) -> List[SemanticPatchInstructionInner]:
        """Gets the instructions of this ApprovalRequest.


        :return: The instructions of this ApprovalRequest.
        :rtype: List[SemanticPatchInstructionInner]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: List[SemanticPatchInstructionInner]):
        """Sets the instructions of this ApprovalRequest.


        :param instructions: The instructions of this ApprovalRequest.
        :type instructions: List[SemanticPatchInstructionInner]
        """

        self._instructions = instructions

    @property
    def notify_member_ids(self) -> List[str]:
        """Gets the notify_member_ids of this ApprovalRequest.


        :return: The notify_member_ids of this ApprovalRequest.
        :rtype: List[str]
        """
        return self._notify_member_ids

    @notify_member_ids.setter
    def notify_member_ids(self, notify_member_ids: List[str]):
        """Sets the notify_member_ids of this ApprovalRequest.


        :param notify_member_ids: The notify_member_ids of this ApprovalRequest.
        :type notify_member_ids: List[str]
        """

        self._notify_member_ids = notify_member_ids

    @property
    def operating_on_id(self) -> str:
        """Gets the operating_on_id of this ApprovalRequest.

        ID of scheduled change to edit or delete  # noqa: E501

        :return: The operating_on_id of this ApprovalRequest.
        :rtype: str
        """
        return self._operating_on_id

    @operating_on_id.setter
    def operating_on_id(self, operating_on_id: str):
        """Sets the operating_on_id of this ApprovalRequest.

        ID of scheduled change to edit or delete  # noqa: E501

        :param operating_on_id: The operating_on_id of this ApprovalRequest.
        :type operating_on_id: str
        """

        self._operating_on_id = operating_on_id

    @property
    def requestor_id(self) -> str:
        """Gets the requestor_id of this ApprovalRequest.

        The id of the member that requested the change  # noqa: E501

        :return: The requestor_id of this ApprovalRequest.
        :rtype: str
        """
        return self._requestor_id

    @requestor_id.setter
    def requestor_id(self, requestor_id: str):
        """Sets the requestor_id of this ApprovalRequest.

        The id of the member that requested the change  # noqa: E501

        :param requestor_id: The requestor_id of this ApprovalRequest.
        :type requestor_id: str
        """

        self._requestor_id = requestor_id

    @property
    def review_status(self) -> ApprovalRequestReviewStatus:
        """Gets the review_status of this ApprovalRequest.


        :return: The review_status of this ApprovalRequest.
        :rtype: ApprovalRequestReviewStatus
        """
        return self._review_status

    @review_status.setter
    def review_status(self, review_status: ApprovalRequestReviewStatus):
        """Sets the review_status of this ApprovalRequest.


        :param review_status: The review_status of this ApprovalRequest.
        :type review_status: ApprovalRequestReviewStatus
        """

        self._review_status = review_status

    @property
    def status(self) -> str:
        """Gets the status of this ApprovalRequest.

        | Name      | Description | | ---------:| ----------- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully |   # noqa: E501

        :return: The status of this ApprovalRequest.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ApprovalRequest.

        | Name      | Description | | ---------:| ----------- | | pending   | the approval request has not been applied yet | | completed | the approval request has been applied successfully | | scheduled | the approval request for a scheduled change has been applied successfully | | failed    | the approval request has been applied but the changes were not applied successfully |   # noqa: E501

        :param status: The status of this ApprovalRequest.
        :type status: str
        """
        allowed_values = ["pending", "completed", "scheduled", "failed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
