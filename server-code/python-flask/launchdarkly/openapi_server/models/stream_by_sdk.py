from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.stream_by_sdk_links import StreamBySDKLinks
from openapi_server.models.stream_by_sdk_links_metadata import StreamBySDKLinksMetadata
from openapi_server.models.stream_usage_series import StreamUsageSeries
from openapi_server import util

from openapi_server.models.stream_by_sdk_links import StreamBySDKLinks  # noqa: E501
from openapi_server.models.stream_by_sdk_links_metadata import StreamBySDKLinksMetadata  # noqa: E501
from openapi_server.models.stream_usage_series import StreamUsageSeries  # noqa: E501

class StreamBySDK(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, links=None, metadata=None, series=None):  # noqa: E501
        """StreamBySDK - a model defined in OpenAPI

        :param links: The links of this StreamBySDK.  # noqa: E501
        :type links: StreamBySDKLinks
        :param metadata: The metadata of this StreamBySDK.  # noqa: E501
        :type metadata: List[StreamBySDKLinksMetadata]
        :param series: The series of this StreamBySDK.  # noqa: E501
        :type series: List[StreamUsageSeries]
        """
        self.openapi_types = {
            'links': StreamBySDKLinks,
            'metadata': List[StreamBySDKLinksMetadata],
            'series': List[StreamUsageSeries]
        }

        self.attribute_map = {
            'links': '_links',
            'metadata': 'metadata',
            'series': 'series'
        }

        self._links = links
        self._metadata = metadata
        self._series = series

    @classmethod
    def from_dict(cls, dikt) -> 'StreamBySDK':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StreamBySDK of this StreamBySDK.  # noqa: E501
        :rtype: StreamBySDK
        """
        return util.deserialize_model(dikt, cls)

    @property
    def links(self) -> StreamBySDKLinks:
        """Gets the links of this StreamBySDK.


        :return: The links of this StreamBySDK.
        :rtype: StreamBySDKLinks
        """
        return self._links

    @links.setter
    def links(self, links: StreamBySDKLinks):
        """Sets the links of this StreamBySDK.


        :param links: The links of this StreamBySDK.
        :type links: StreamBySDKLinks
        """

        self._links = links

    @property
    def metadata(self) -> List[StreamBySDKLinksMetadata]:
        """Gets the metadata of this StreamBySDK.


        :return: The metadata of this StreamBySDK.
        :rtype: List[StreamBySDKLinksMetadata]
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata: List[StreamBySDKLinksMetadata]):
        """Sets the metadata of this StreamBySDK.


        :param metadata: The metadata of this StreamBySDK.
        :type metadata: List[StreamBySDKLinksMetadata]
        """

        self._metadata = metadata

    @property
    def series(self) -> List[StreamUsageSeries]:
        """Gets the series of this StreamBySDK.


        :return: The series of this StreamBySDK.
        :rtype: List[StreamUsageSeries]
        """
        return self._series

    @series.setter
    def series(self, series: List[StreamUsageSeries]):
        """Sets the series of this StreamBySDK.


        :param series: The series of this StreamBySDK.
        :type series: List[StreamUsageSeries]
        """

        self._series = series
