from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner
from openapi_server import util

from openapi_server.models.semantic_patch_instruction_inner import SemanticPatchInstructionInner  # noqa: E501

class PostApprovalRequestRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, comment=None, description=None, execution_date=None, instructions=None, notify_member_ids=None, operating_on_id=None):  # noqa: E501
        """PostApprovalRequestRequest - a model defined in OpenAPI

        :param comment: The comment of this PostApprovalRequestRequest.  # noqa: E501
        :type comment: str
        :param description: The description of this PostApprovalRequestRequest.  # noqa: E501
        :type description: str
        :param execution_date: The execution_date of this PostApprovalRequestRequest.  # noqa: E501
        :type execution_date: int
        :param instructions: The instructions of this PostApprovalRequestRequest.  # noqa: E501
        :type instructions: List[SemanticPatchInstructionInner]
        :param notify_member_ids: The notify_member_ids of this PostApprovalRequestRequest.  # noqa: E501
        :type notify_member_ids: List[str]
        :param operating_on_id: The operating_on_id of this PostApprovalRequestRequest.  # noqa: E501
        :type operating_on_id: str
        """
        self.openapi_types = {
            'comment': str,
            'description': str,
            'execution_date': int,
            'instructions': List[SemanticPatchInstructionInner],
            'notify_member_ids': List[str],
            'operating_on_id': str
        }

        self.attribute_map = {
            'comment': 'comment',
            'description': 'description',
            'execution_date': 'executionDate',
            'instructions': 'instructions',
            'notify_member_ids': 'notifyMemberIds',
            'operating_on_id': 'operatingOnId'
        }

        self._comment = comment
        self._description = description
        self._execution_date = execution_date
        self._instructions = instructions
        self._notify_member_ids = notify_member_ids
        self._operating_on_id = operating_on_id

    @classmethod
    def from_dict(cls, dikt) -> 'PostApprovalRequestRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The postApprovalRequest_request of this PostApprovalRequestRequest.  # noqa: E501
        :rtype: PostApprovalRequestRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def comment(self) -> str:
        """Gets the comment of this PostApprovalRequestRequest.

        comment will be included in audit log item for change.  # noqa: E501

        :return: The comment of this PostApprovalRequestRequest.
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment: str):
        """Sets the comment of this PostApprovalRequestRequest.

        comment will be included in audit log item for change.  # noqa: E501

        :param comment: The comment of this PostApprovalRequestRequest.
        :type comment: str
        """

        self._comment = comment

    @property
    def description(self) -> str:
        """Gets the description of this PostApprovalRequestRequest.

        A name that describes the changes you would like to apply to a feature flag configuration  # noqa: E501

        :return: The description of this PostApprovalRequestRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PostApprovalRequestRequest.

        A name that describes the changes you would like to apply to a feature flag configuration  # noqa: E501

        :param description: The description of this PostApprovalRequestRequest.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def execution_date(self) -> int:
        """Gets the execution_date of this PostApprovalRequestRequest.

        Timestamp for when instructions will be executed  # noqa: E501

        :return: The execution_date of this PostApprovalRequestRequest.
        :rtype: int
        """
        return self._execution_date

    @execution_date.setter
    def execution_date(self, execution_date: int):
        """Sets the execution_date of this PostApprovalRequestRequest.

        Timestamp for when instructions will be executed  # noqa: E501

        :param execution_date: The execution_date of this PostApprovalRequestRequest.
        :type execution_date: int
        """

        self._execution_date = execution_date

    @property
    def instructions(self) -> List[SemanticPatchInstructionInner]:
        """Gets the instructions of this PostApprovalRequestRequest.


        :return: The instructions of this PostApprovalRequestRequest.
        :rtype: List[SemanticPatchInstructionInner]
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: List[SemanticPatchInstructionInner]):
        """Sets the instructions of this PostApprovalRequestRequest.


        :param instructions: The instructions of this PostApprovalRequestRequest.
        :type instructions: List[SemanticPatchInstructionInner]
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def notify_member_ids(self) -> List[str]:
        """Gets the notify_member_ids of this PostApprovalRequestRequest.


        :return: The notify_member_ids of this PostApprovalRequestRequest.
        :rtype: List[str]
        """
        return self._notify_member_ids

    @notify_member_ids.setter
    def notify_member_ids(self, notify_member_ids: List[str]):
        """Sets the notify_member_ids of this PostApprovalRequestRequest.


        :param notify_member_ids: The notify_member_ids of this PostApprovalRequestRequest.
        :type notify_member_ids: List[str]
        """
        if notify_member_ids is None:
            raise ValueError("Invalid value for `notify_member_ids`, must not be `None`")  # noqa: E501

        self._notify_member_ids = notify_member_ids

    @property
    def operating_on_id(self) -> str:
        """Gets the operating_on_id of this PostApprovalRequestRequest.

        ID of scheduled change to edit or delete  # noqa: E501

        :return: The operating_on_id of this PostApprovalRequestRequest.
        :rtype: str
        """
        return self._operating_on_id

    @operating_on_id.setter
    def operating_on_id(self, operating_on_id: str):
        """Sets the operating_on_id of this PostApprovalRequestRequest.

        ID of scheduled change to edit or delete  # noqa: E501

        :param operating_on_id: The operating_on_id of this PostApprovalRequestRequest.
        :type operating_on_id: str
        """

        self._operating_on_id = operating_on_id
