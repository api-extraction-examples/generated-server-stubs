from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class User(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, anonymous=None, avatar=None, country=None, custom=None, email=None, first_name=None, ip=None, key=None, last_name=None, name=None, secondary=None):  # noqa: E501
        """User - a model defined in OpenAPI

        :param anonymous: The anonymous of this User.  # noqa: E501
        :type anonymous: bool
        :param avatar: The avatar of this User.  # noqa: E501
        :type avatar: str
        :param country: The country of this User.  # noqa: E501
        :type country: str
        :param custom: The custom of this User.  # noqa: E501
        :type custom: object
        :param email: The email of this User.  # noqa: E501
        :type email: str
        :param first_name: The first_name of this User.  # noqa: E501
        :type first_name: str
        :param ip: The ip of this User.  # noqa: E501
        :type ip: str
        :param key: The key of this User.  # noqa: E501
        :type key: str
        :param last_name: The last_name of this User.  # noqa: E501
        :type last_name: str
        :param name: The name of this User.  # noqa: E501
        :type name: str
        :param secondary: The secondary of this User.  # noqa: E501
        :type secondary: str
        """
        self.openapi_types = {
            'anonymous': bool,
            'avatar': str,
            'country': str,
            'custom': object,
            'email': str,
            'first_name': str,
            'ip': str,
            'key': str,
            'last_name': str,
            'name': str,
            'secondary': str
        }

        self.attribute_map = {
            'anonymous': 'anonymous',
            'avatar': 'avatar',
            'country': 'country',
            'custom': 'custom',
            'email': 'email',
            'first_name': 'firstName',
            'ip': 'ip',
            'key': 'key',
            'last_name': 'lastName',
            'name': 'name',
            'secondary': 'secondary'
        }

        self._anonymous = anonymous
        self._avatar = avatar
        self._country = country
        self._custom = custom
        self._email = email
        self._first_name = first_name
        self._ip = ip
        self._key = key
        self._last_name = last_name
        self._name = name
        self._secondary = secondary

    @classmethod
    def from_dict(cls, dikt) -> 'User':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The User of this User.  # noqa: E501
        :rtype: User
        """
        return util.deserialize_model(dikt, cls)

    @property
    def anonymous(self) -> bool:
        """Gets the anonymous of this User.


        :return: The anonymous of this User.
        :rtype: bool
        """
        return self._anonymous

    @anonymous.setter
    def anonymous(self, anonymous: bool):
        """Sets the anonymous of this User.


        :param anonymous: The anonymous of this User.
        :type anonymous: bool
        """

        self._anonymous = anonymous

    @property
    def avatar(self) -> str:
        """Gets the avatar of this User.


        :return: The avatar of this User.
        :rtype: str
        """
        return self._avatar

    @avatar.setter
    def avatar(self, avatar: str):
        """Sets the avatar of this User.


        :param avatar: The avatar of this User.
        :type avatar: str
        """

        self._avatar = avatar

    @property
    def country(self) -> str:
        """Gets the country of this User.


        :return: The country of this User.
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country: str):
        """Sets the country of this User.


        :param country: The country of this User.
        :type country: str
        """

        self._country = country

    @property
    def custom(self) -> object:
        """Gets the custom of this User.


        :return: The custom of this User.
        :rtype: object
        """
        return self._custom

    @custom.setter
    def custom(self, custom: object):
        """Sets the custom of this User.


        :param custom: The custom of this User.
        :type custom: object
        """

        self._custom = custom

    @property
    def email(self) -> str:
        """Gets the email of this User.


        :return: The email of this User.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this User.


        :param email: The email of this User.
        :type email: str
        """

        self._email = email

    @property
    def first_name(self) -> str:
        """Gets the first_name of this User.


        :return: The first_name of this User.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name: str):
        """Sets the first_name of this User.


        :param first_name: The first_name of this User.
        :type first_name: str
        """

        self._first_name = first_name

    @property
    def ip(self) -> str:
        """Gets the ip of this User.


        :return: The ip of this User.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this User.


        :param ip: The ip of this User.
        :type ip: str
        """

        self._ip = ip

    @property
    def key(self) -> str:
        """Gets the key of this User.


        :return: The key of this User.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this User.


        :param key: The key of this User.
        :type key: str
        """

        self._key = key

    @property
    def last_name(self) -> str:
        """Gets the last_name of this User.


        :return: The last_name of this User.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name: str):
        """Sets the last_name of this User.


        :param last_name: The last_name of this User.
        :type last_name: str
        """

        self._last_name = last_name

    @property
    def name(self) -> str:
        """Gets the name of this User.


        :return: The name of this User.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this User.


        :param name: The name of this User.
        :type name: str
        """

        self._name = name

    @property
    def secondary(self) -> str:
        """Gets the secondary of this User.


        :return: The secondary of this User.
        :rtype: str
        """
        return self._secondary

    @secondary.setter
    def secondary(self, secondary: str):
        """Sets the secondary of this User.


        :param secondary: The secondary of this User.
        :type secondary: str
        """

        self._secondary = secondary
