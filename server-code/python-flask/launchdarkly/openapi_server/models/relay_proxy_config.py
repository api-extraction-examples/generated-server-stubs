from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.member import Member
from openapi_server.models.policy import Policy
from openapi_server import util

from openapi_server.models.member import Member  # noqa: E501
from openapi_server.models.policy import Policy  # noqa: E501

class RelayProxyConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creator=None, id=None, creation_date=None, display_key=None, full_key=None, last_modified=None, name=None, policy=None):  # noqa: E501
        """RelayProxyConfig - a model defined in OpenAPI

        :param creator: The creator of this RelayProxyConfig.  # noqa: E501
        :type creator: Member
        :param id: The id of this RelayProxyConfig.  # noqa: E501
        :type id: str
        :param creation_date: The creation_date of this RelayProxyConfig.  # noqa: E501
        :type creation_date: int
        :param display_key: The display_key of this RelayProxyConfig.  # noqa: E501
        :type display_key: str
        :param full_key: The full_key of this RelayProxyConfig.  # noqa: E501
        :type full_key: str
        :param last_modified: The last_modified of this RelayProxyConfig.  # noqa: E501
        :type last_modified: int
        :param name: The name of this RelayProxyConfig.  # noqa: E501
        :type name: str
        :param policy: The policy of this RelayProxyConfig.  # noqa: E501
        :type policy: List[Policy]
        """
        self.openapi_types = {
            'creator': Member,
            'id': str,
            'creation_date': int,
            'display_key': str,
            'full_key': str,
            'last_modified': int,
            'name': str,
            'policy': List[Policy]
        }

        self.attribute_map = {
            'creator': '_creator',
            'id': '_id',
            'creation_date': 'creationDate',
            'display_key': 'displayKey',
            'full_key': 'fullKey',
            'last_modified': 'lastModified',
            'name': 'name',
            'policy': 'policy'
        }

        self._creator = creator
        self._id = id
        self._creation_date = creation_date
        self._display_key = display_key
        self._full_key = full_key
        self._last_modified = last_modified
        self._name = name
        self._policy = policy

    @classmethod
    def from_dict(cls, dikt) -> 'RelayProxyConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RelayProxyConfig of this RelayProxyConfig.  # noqa: E501
        :rtype: RelayProxyConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creator(self) -> Member:
        """Gets the creator of this RelayProxyConfig.


        :return: The creator of this RelayProxyConfig.
        :rtype: Member
        """
        return self._creator

    @creator.setter
    def creator(self, creator: Member):
        """Sets the creator of this RelayProxyConfig.


        :param creator: The creator of this RelayProxyConfig.
        :type creator: Member
        """
        if creator is None:
            raise ValueError("Invalid value for `creator`, must not be `None`")  # noqa: E501

        self._creator = creator

    @property
    def id(self) -> str:
        """Gets the id of this RelayProxyConfig.

        The unique resource id.  # noqa: E501

        :return: The id of this RelayProxyConfig.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this RelayProxyConfig.

        The unique resource id.  # noqa: E501

        :param id: The id of this RelayProxyConfig.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def creation_date(self) -> int:
        """Gets the creation_date of this RelayProxyConfig.

        A unix epoch time in milliseconds specifying the creation time of this relay proxy configuration  # noqa: E501

        :return: The creation_date of this RelayProxyConfig.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: int):
        """Sets the creation_date of this RelayProxyConfig.

        A unix epoch time in milliseconds specifying the creation time of this relay proxy configuration  # noqa: E501

        :param creation_date: The creation_date of this RelayProxyConfig.
        :type creation_date: int
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def display_key(self) -> str:
        """Gets the display_key of this RelayProxyConfig.

        The last 4 digits of the unique secret key for this relay proxy configuration  # noqa: E501

        :return: The display_key of this RelayProxyConfig.
        :rtype: str
        """
        return self._display_key

    @display_key.setter
    def display_key(self, display_key: str):
        """Sets the display_key of this RelayProxyConfig.

        The last 4 digits of the unique secret key for this relay proxy configuration  # noqa: E501

        :param display_key: The display_key of this RelayProxyConfig.
        :type display_key: str
        """
        if display_key is None:
            raise ValueError("Invalid value for `display_key`, must not be `None`")  # noqa: E501

        self._display_key = display_key

    @property
    def full_key(self) -> str:
        """Gets the full_key of this RelayProxyConfig.

        Full secret key. Only included if creating or resetting the relay proxy configuration  # noqa: E501

        :return: The full_key of this RelayProxyConfig.
        :rtype: str
        """
        return self._full_key

    @full_key.setter
    def full_key(self, full_key: str):
        """Sets the full_key of this RelayProxyConfig.

        Full secret key. Only included if creating or resetting the relay proxy configuration  # noqa: E501

        :param full_key: The full_key of this RelayProxyConfig.
        :type full_key: str
        """

        self._full_key = full_key

    @property
    def last_modified(self) -> int:
        """Gets the last_modified of this RelayProxyConfig.

        A unix epoch time in milliseconds specifying the last time this relay proxy configuration was modified  # noqa: E501

        :return: The last_modified of this RelayProxyConfig.
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: int):
        """Sets the last_modified of this RelayProxyConfig.

        A unix epoch time in milliseconds specifying the last time this relay proxy configuration was modified  # noqa: E501

        :param last_modified: The last_modified of this RelayProxyConfig.
        :type last_modified: int
        """
        if last_modified is None:
            raise ValueError("Invalid value for `last_modified`, must not be `None`")  # noqa: E501

        self._last_modified = last_modified

    @property
    def name(self) -> str:
        """Gets the name of this RelayProxyConfig.

        A human-friendly name for the relay proxy configuration  # noqa: E501

        :return: The name of this RelayProxyConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this RelayProxyConfig.

        A human-friendly name for the relay proxy configuration  # noqa: E501

        :param name: The name of this RelayProxyConfig.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def policy(self) -> List[Policy]:
        """Gets the policy of this RelayProxyConfig.


        :return: The policy of this RelayProxyConfig.
        :rtype: List[Policy]
        """
        return self._policy

    @policy.setter
    def policy(self, policy: List[Policy]):
        """Sets the policy of this RelayProxyConfig.


        :param policy: The policy of this RelayProxyConfig.
        :type policy: List[Policy]
        """
        if policy is None:
            raise ValueError("Invalid value for `policy`, must not be `None`")  # noqa: E501

        self._policy = policy
