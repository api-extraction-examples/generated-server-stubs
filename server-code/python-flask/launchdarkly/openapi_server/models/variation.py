from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Variation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, description=None, name=None, value=None):  # noqa: E501
        """Variation - a model defined in OpenAPI

        :param id: The id of this Variation.  # noqa: E501
        :type id: str
        :param description: The description of this Variation.  # noqa: E501
        :type description: str
        :param name: The name of this Variation.  # noqa: E501
        :type name: str
        :param value: The value of this Variation.  # noqa: E501
        :type value: object
        """
        self.openapi_types = {
            'id': str,
            'description': str,
            'name': str,
            'value': object
        }

        self.attribute_map = {
            'id': '_id',
            'description': 'description',
            'name': 'name',
            'value': 'value'
        }

        self._id = id
        self._description = description
        self._name = name
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'Variation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Variation of this Variation.  # noqa: E501
        :rtype: Variation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Variation.


        :return: The id of this Variation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Variation.


        :param id: The id of this Variation.
        :type id: str
        """

        self._id = id

    @property
    def description(self) -> str:
        """Gets the description of this Variation.


        :return: The description of this Variation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Variation.


        :param description: The description of this Variation.
        :type description: str
        """

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this Variation.


        :return: The name of this Variation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Variation.


        :param name: The name of this Variation.
        :type name: str
        """

        self._name = name

    @property
    def value(self) -> object:
        """Gets the value of this Variation.


        :return: The value of this Variation.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """Sets the value of this Variation.


        :param value: The value of this Variation.
        :type value: object
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
