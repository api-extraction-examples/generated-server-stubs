from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Clause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, attribute=None, negate=None, op=None, values=None):  # noqa: E501
        """Clause - a model defined in OpenAPI

        :param id: The id of this Clause.  # noqa: E501
        :type id: str
        :param attribute: The attribute of this Clause.  # noqa: E501
        :type attribute: str
        :param negate: The negate of this Clause.  # noqa: E501
        :type negate: bool
        :param op: The op of this Clause.  # noqa: E501
        :type op: str
        :param values: The values of this Clause.  # noqa: E501
        :type values: List[object]
        """
        self.openapi_types = {
            'id': str,
            'attribute': str,
            'negate': bool,
            'op': str,
            'values': List[object]
        }

        self.attribute_map = {
            'id': '_id',
            'attribute': 'attribute',
            'negate': 'negate',
            'op': 'op',
            'values': 'values'
        }

        self._id = id
        self._attribute = attribute
        self._negate = negate
        self._op = op
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'Clause':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Clause of this Clause.  # noqa: E501
        :rtype: Clause
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Clause.


        :return: The id of this Clause.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Clause.


        :param id: The id of this Clause.
        :type id: str
        """

        self._id = id

    @property
    def attribute(self) -> str:
        """Gets the attribute of this Clause.


        :return: The attribute of this Clause.
        :rtype: str
        """
        return self._attribute

    @attribute.setter
    def attribute(self, attribute: str):
        """Sets the attribute of this Clause.


        :param attribute: The attribute of this Clause.
        :type attribute: str
        """

        self._attribute = attribute

    @property
    def negate(self) -> bool:
        """Gets the negate of this Clause.


        :return: The negate of this Clause.
        :rtype: bool
        """
        return self._negate

    @negate.setter
    def negate(self, negate: bool):
        """Sets the negate of this Clause.


        :param negate: The negate of this Clause.
        :type negate: bool
        """

        self._negate = negate

    @property
    def op(self) -> str:
        """Gets the op of this Clause.


        :return: The op of this Clause.
        :rtype: str
        """
        return self._op

    @op.setter
    def op(self, op: str):
        """Sets the op of this Clause.


        :param op: The op of this Clause.
        :type op: str
        """

        self._op = op

    @property
    def values(self) -> List[object]:
        """Gets the values of this Clause.


        :return: The values of this Clause.
        :rtype: List[object]
        """
        return self._values

    @values.setter
    def values(self, values: List[object]):
        """Sets the values of this Clause.


        :param values: The values of this Clause.
        :type values: List[object]
        """

        self._values = values
