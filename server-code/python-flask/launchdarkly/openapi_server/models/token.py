from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.member import Member
from openapi_server.models.statement import Statement
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.member import Member  # noqa: E501
from openapi_server.models.statement import Statement  # noqa: E501

class Token(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, links=None, member=None, creation_date=None, custom_role_ids=None, default_api_version=None, inline_role=None, last_modified=None, last_used=None, member_id=None, name=None, owner_id=None, role=None, service_token=None, token=None):  # noqa: E501
        """Token - a model defined in OpenAPI

        :param id: The id of this Token.  # noqa: E501
        :type id: str
        :param links: The links of this Token.  # noqa: E501
        :type links: Links
        :param member: The member of this Token.  # noqa: E501
        :type member: Member
        :param creation_date: The creation_date of this Token.  # noqa: E501
        :type creation_date: int
        :param custom_role_ids: The custom_role_ids of this Token.  # noqa: E501
        :type custom_role_ids: List[str]
        :param default_api_version: The default_api_version of this Token.  # noqa: E501
        :type default_api_version: int
        :param inline_role: The inline_role of this Token.  # noqa: E501
        :type inline_role: List[Statement]
        :param last_modified: The last_modified of this Token.  # noqa: E501
        :type last_modified: int
        :param last_used: The last_used of this Token.  # noqa: E501
        :type last_used: int
        :param member_id: The member_id of this Token.  # noqa: E501
        :type member_id: str
        :param name: The name of this Token.  # noqa: E501
        :type name: str
        :param owner_id: The owner_id of this Token.  # noqa: E501
        :type owner_id: str
        :param role: The role of this Token.  # noqa: E501
        :type role: str
        :param service_token: The service_token of this Token.  # noqa: E501
        :type service_token: bool
        :param token: The token of this Token.  # noqa: E501
        :type token: str
        """
        self.openapi_types = {
            'id': str,
            'links': Links,
            'member': Member,
            'creation_date': int,
            'custom_role_ids': List[str],
            'default_api_version': int,
            'inline_role': List[Statement],
            'last_modified': int,
            'last_used': int,
            'member_id': str,
            'name': str,
            'owner_id': str,
            'role': str,
            'service_token': bool,
            'token': str
        }

        self.attribute_map = {
            'id': '_id',
            'links': '_links',
            'member': '_member',
            'creation_date': 'creationDate',
            'custom_role_ids': 'customRoleIds',
            'default_api_version': 'defaultApiVersion',
            'inline_role': 'inlineRole',
            'last_modified': 'lastModified',
            'last_used': 'lastUsed',
            'member_id': 'memberId',
            'name': 'name',
            'owner_id': 'ownerId',
            'role': 'role',
            'service_token': 'serviceToken',
            'token': 'token'
        }

        self._id = id
        self._links = links
        self._member = member
        self._creation_date = creation_date
        self._custom_role_ids = custom_role_ids
        self._default_api_version = default_api_version
        self._inline_role = inline_role
        self._last_modified = last_modified
        self._last_used = last_used
        self._member_id = member_id
        self._name = name
        self._owner_id = owner_id
        self._role = role
        self._service_token = service_token
        self._token = token

    @classmethod
    def from_dict(cls, dikt) -> 'Token':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Token of this Token.  # noqa: E501
        :rtype: Token
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Token.

        The unique resource id.  # noqa: E501

        :return: The id of this Token.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Token.

        The unique resource id.  # noqa: E501

        :param id: The id of this Token.
        :type id: str
        """

        self._id = id

    @property
    def links(self) -> Links:
        """Gets the links of this Token.


        :return: The links of this Token.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this Token.


        :param links: The links of this Token.
        :type links: Links
        """

        self._links = links

    @property
    def member(self) -> Member:
        """Gets the member of this Token.


        :return: The member of this Token.
        :rtype: Member
        """
        return self._member

    @member.setter
    def member(self, member: Member):
        """Sets the member of this Token.


        :param member: The member of this Token.
        :type member: Member
        """

        self._member = member

    @property
    def creation_date(self) -> int:
        """Gets the creation_date of this Token.

        A unix epoch time in milliseconds specifying the creation time of this access token.  # noqa: E501

        :return: The creation_date of this Token.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: int):
        """Sets the creation_date of this Token.

        A unix epoch time in milliseconds specifying the creation time of this access token.  # noqa: E501

        :param creation_date: The creation_date of this Token.
        :type creation_date: int
        """

        self._creation_date = creation_date

    @property
    def custom_role_ids(self) -> List[str]:
        """Gets the custom_role_ids of this Token.

        A list of custom role IDs to use as access limits for the access token  # noqa: E501

        :return: The custom_role_ids of this Token.
        :rtype: List[str]
        """
        return self._custom_role_ids

    @custom_role_ids.setter
    def custom_role_ids(self, custom_role_ids: List[str]):
        """Sets the custom_role_ids of this Token.

        A list of custom role IDs to use as access limits for the access token  # noqa: E501

        :param custom_role_ids: The custom_role_ids of this Token.
        :type custom_role_ids: List[str]
        """

        self._custom_role_ids = custom_role_ids

    @property
    def default_api_version(self) -> int:
        """Gets the default_api_version of this Token.

        The default API version for this token  # noqa: E501

        :return: The default_api_version of this Token.
        :rtype: int
        """
        return self._default_api_version

    @default_api_version.setter
    def default_api_version(self, default_api_version: int):
        """Sets the default_api_version of this Token.

        The default API version for this token  # noqa: E501

        :param default_api_version: The default_api_version of this Token.
        :type default_api_version: int
        """

        self._default_api_version = default_api_version

    @property
    def inline_role(self) -> List[Statement]:
        """Gets the inline_role of this Token.


        :return: The inline_role of this Token.
        :rtype: List[Statement]
        """
        return self._inline_role

    @inline_role.setter
    def inline_role(self, inline_role: List[Statement]):
        """Sets the inline_role of this Token.


        :param inline_role: The inline_role of this Token.
        :type inline_role: List[Statement]
        """

        self._inline_role = inline_role

    @property
    def last_modified(self) -> int:
        """Gets the last_modified of this Token.

        A unix epoch time in milliseconds specifying the last time this access token was modified.  # noqa: E501

        :return: The last_modified of this Token.
        :rtype: int
        """
        return self._last_modified

    @last_modified.setter
    def last_modified(self, last_modified: int):
        """Sets the last_modified of this Token.

        A unix epoch time in milliseconds specifying the last time this access token was modified.  # noqa: E501

        :param last_modified: The last_modified of this Token.
        :type last_modified: int
        """

        self._last_modified = last_modified

    @property
    def last_used(self) -> int:
        """Gets the last_used of this Token.

        A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.  # noqa: E501

        :return: The last_used of this Token.
        :rtype: int
        """
        return self._last_used

    @last_used.setter
    def last_used(self, last_used: int):
        """Sets the last_used of this Token.

        A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.  # noqa: E501

        :param last_used: The last_used of this Token.
        :type last_used: int
        """

        self._last_used = last_used

    @property
    def member_id(self) -> str:
        """Gets the member_id of this Token.

        The unique resource id.  # noqa: E501

        :return: The member_id of this Token.
        :rtype: str
        """
        return self._member_id

    @member_id.setter
    def member_id(self, member_id: str):
        """Sets the member_id of this Token.

        The unique resource id.  # noqa: E501

        :param member_id: The member_id of this Token.
        :type member_id: str
        """

        self._member_id = member_id

    @property
    def name(self) -> str:
        """Gets the name of this Token.

        A human-friendly name for the access token  # noqa: E501

        :return: The name of this Token.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Token.

        A human-friendly name for the access token  # noqa: E501

        :param name: The name of this Token.
        :type name: str
        """

        self._name = name

    @property
    def owner_id(self) -> str:
        """Gets the owner_id of this Token.

        The unique resource id.  # noqa: E501

        :return: The owner_id of this Token.
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id: str):
        """Sets the owner_id of this Token.

        The unique resource id.  # noqa: E501

        :param owner_id: The owner_id of this Token.
        :type owner_id: str
        """

        self._owner_id = owner_id

    @property
    def role(self) -> str:
        """Gets the role of this Token.

        The name of a built-in role for the token  # noqa: E501

        :return: The role of this Token.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this Token.

        The name of a built-in role for the token  # noqa: E501

        :param role: The role of this Token.
        :type role: str
        """

        self._role = role

    @property
    def service_token(self) -> bool:
        """Gets the service_token of this Token.

        Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens  # noqa: E501

        :return: The service_token of this Token.
        :rtype: bool
        """
        return self._service_token

    @service_token.setter
    def service_token(self, service_token: bool):
        """Sets the service_token of this Token.

        Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens  # noqa: E501

        :param service_token: The service_token of this Token.
        :type service_token: bool
        """

        self._service_token = service_token

    @property
    def token(self) -> str:
        """Gets the token of this Token.

        The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.  # noqa: E501

        :return: The token of this Token.
        :rtype: str
        """
        return self._token

    @token.setter
    def token(self, token: str):
        """Sets the token of this Token.

        The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.  # noqa: E501

        :param token: The token of this Token.
        :type token: str
        """

        self._token = token
