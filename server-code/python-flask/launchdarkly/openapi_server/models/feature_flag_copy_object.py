from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class FeatureFlagCopyObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, current_version=None, key=None):  # noqa: E501
        """FeatureFlagCopyObject - a model defined in OpenAPI

        :param current_version: The current_version of this FeatureFlagCopyObject.  # noqa: E501
        :type current_version: int
        :param key: The key of this FeatureFlagCopyObject.  # noqa: E501
        :type key: str
        """
        self.openapi_types = {
            'current_version': int,
            'key': str
        }

        self.attribute_map = {
            'current_version': 'currentVersion',
            'key': 'key'
        }

        self._current_version = current_version
        self._key = key

    @classmethod
    def from_dict(cls, dikt) -> 'FeatureFlagCopyObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FeatureFlagCopyObject of this FeatureFlagCopyObject.  # noqa: E501
        :rtype: FeatureFlagCopyObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def current_version(self) -> int:
        """Gets the current_version of this FeatureFlagCopyObject.

        If the latest version of the flag matches provided version it will copy, otherwise it will return a conflict.  # noqa: E501

        :return: The current_version of this FeatureFlagCopyObject.
        :rtype: int
        """
        return self._current_version

    @current_version.setter
    def current_version(self, current_version: int):
        """Sets the current_version of this FeatureFlagCopyObject.

        If the latest version of the flag matches provided version it will copy, otherwise it will return a conflict.  # noqa: E501

        :param current_version: The current_version of this FeatureFlagCopyObject.
        :type current_version: int
        """

        self._current_version = current_version

    @property
    def key(self) -> str:
        """Gets the key of this FeatureFlagCopyObject.

        The environment key to be used.  # noqa: E501

        :return: The key of this FeatureFlagCopyObject.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this FeatureFlagCopyObject.

        The environment key to be used.  # noqa: E501

        :param key: The key of this FeatureFlagCopyObject.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key
