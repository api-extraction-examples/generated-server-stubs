from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.links import Links
from openapi_server.models.user_targeting_expiration_resource_id_for_flag import UserTargetingExpirationResourceIdForFlag
from openapi_server import util

from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.user_targeting_expiration_resource_id_for_flag import UserTargetingExpirationResourceIdForFlag  # noqa: E501

class UserTargetingExpirationForSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, links=None, resource_id=None, version=None, expiration_date=None, target_type=None, user_key=None):  # noqa: E501
        """UserTargetingExpirationForSegment - a model defined in OpenAPI

        :param id: The id of this UserTargetingExpirationForSegment.  # noqa: E501
        :type id: str
        :param links: The links of this UserTargetingExpirationForSegment.  # noqa: E501
        :type links: Links
        :param resource_id: The resource_id of this UserTargetingExpirationForSegment.  # noqa: E501
        :type resource_id: UserTargetingExpirationResourceIdForFlag
        :param version: The version of this UserTargetingExpirationForSegment.  # noqa: E501
        :type version: int
        :param expiration_date: The expiration_date of this UserTargetingExpirationForSegment.  # noqa: E501
        :type expiration_date: int
        :param target_type: The target_type of this UserTargetingExpirationForSegment.  # noqa: E501
        :type target_type: str
        :param user_key: The user_key of this UserTargetingExpirationForSegment.  # noqa: E501
        :type user_key: str
        """
        self.openapi_types = {
            'id': str,
            'links': Links,
            'resource_id': UserTargetingExpirationResourceIdForFlag,
            'version': int,
            'expiration_date': int,
            'target_type': str,
            'user_key': str
        }

        self.attribute_map = {
            'id': '_id',
            'links': '_links',
            'resource_id': '_resourceId',
            'version': '_version',
            'expiration_date': 'expirationDate',
            'target_type': 'targetType',
            'user_key': 'userKey'
        }

        self._id = id
        self._links = links
        self._resource_id = resource_id
        self._version = version
        self._expiration_date = expiration_date
        self._target_type = target_type
        self._user_key = user_key

    @classmethod
    def from_dict(cls, dikt) -> 'UserTargetingExpirationForSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserTargetingExpirationForSegment of this UserTargetingExpirationForSegment.  # noqa: E501
        :rtype: UserTargetingExpirationForSegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this UserTargetingExpirationForSegment.


        :return: The id of this UserTargetingExpirationForSegment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserTargetingExpirationForSegment.


        :param id: The id of this UserTargetingExpirationForSegment.
        :type id: str
        """

        self._id = id

    @property
    def links(self) -> Links:
        """Gets the links of this UserTargetingExpirationForSegment.


        :return: The links of this UserTargetingExpirationForSegment.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this UserTargetingExpirationForSegment.


        :param links: The links of this UserTargetingExpirationForSegment.
        :type links: Links
        """

        self._links = links

    @property
    def resource_id(self) -> UserTargetingExpirationResourceIdForFlag:
        """Gets the resource_id of this UserTargetingExpirationForSegment.


        :return: The resource_id of this UserTargetingExpirationForSegment.
        :rtype: UserTargetingExpirationResourceIdForFlag
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id: UserTargetingExpirationResourceIdForFlag):
        """Sets the resource_id of this UserTargetingExpirationForSegment.


        :param resource_id: The resource_id of this UserTargetingExpirationForSegment.
        :type resource_id: UserTargetingExpirationResourceIdForFlag
        """

        self._resource_id = resource_id

    @property
    def version(self) -> int:
        """Gets the version of this UserTargetingExpirationForSegment.


        :return: The version of this UserTargetingExpirationForSegment.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this UserTargetingExpirationForSegment.


        :param version: The version of this UserTargetingExpirationForSegment.
        :type version: int
        """

        self._version = version

    @property
    def expiration_date(self) -> int:
        """Gets the expiration_date of this UserTargetingExpirationForSegment.

        Unix epoch time in milliseconds specifying the expiration date  # noqa: E501

        :return: The expiration_date of this UserTargetingExpirationForSegment.
        :rtype: int
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date: int):
        """Sets the expiration_date of this UserTargetingExpirationForSegment.

        Unix epoch time in milliseconds specifying the expiration date  # noqa: E501

        :param expiration_date: The expiration_date of this UserTargetingExpirationForSegment.
        :type expiration_date: int
        """

        self._expiration_date = expiration_date

    @property
    def target_type(self) -> str:
        """Gets the target_type of this UserTargetingExpirationForSegment.

        either the included or excluded variation that the user is targeted on a segment  # noqa: E501

        :return: The target_type of this UserTargetingExpirationForSegment.
        :rtype: str
        """
        return self._target_type

    @target_type.setter
    def target_type(self, target_type: str):
        """Sets the target_type of this UserTargetingExpirationForSegment.

        either the included or excluded variation that the user is targeted on a segment  # noqa: E501

        :param target_type: The target_type of this UserTargetingExpirationForSegment.
        :type target_type: str
        """

        self._target_type = target_type

    @property
    def user_key(self) -> str:
        """Gets the user_key of this UserTargetingExpirationForSegment.

        Unique identifier for the user  # noqa: E501

        :return: The user_key of this UserTargetingExpirationForSegment.
        :rtype: str
        """
        return self._user_key

    @user_key.setter
    def user_key(self, user_key: str):
        """Sets the user_key of this UserTargetingExpirationForSegment.

        Unique identifier for the user  # noqa: E501

        :param user_key: The user_key of this UserTargetingExpirationForSegment.
        :type user_key: str
        """

        self._user_key = user_key
