from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.flag_list_item import FlagListItem
from openapi_server.models.links import Links
from openapi_server.models.user_segment_rule import UserSegmentRule
from openapi_server import util

from openapi_server.models.flag_list_item import FlagListItem  # noqa: E501
from openapi_server.models.links import Links  # noqa: E501
from openapi_server.models.user_segment_rule import UserSegmentRule  # noqa: E501

class UserSegment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, flags=None, links=None, creation_date=None, description=None, excluded=None, included=None, key=None, name=None, rules=None, tags=None, unbounded=None, version=None):  # noqa: E501
        """UserSegment - a model defined in OpenAPI

        :param flags: The flags of this UserSegment.  # noqa: E501
        :type flags: List[FlagListItem]
        :param links: The links of this UserSegment.  # noqa: E501
        :type links: Links
        :param creation_date: The creation_date of this UserSegment.  # noqa: E501
        :type creation_date: int
        :param description: The description of this UserSegment.  # noqa: E501
        :type description: str
        :param excluded: The excluded of this UserSegment.  # noqa: E501
        :type excluded: List[str]
        :param included: The included of this UserSegment.  # noqa: E501
        :type included: List[str]
        :param key: The key of this UserSegment.  # noqa: E501
        :type key: str
        :param name: The name of this UserSegment.  # noqa: E501
        :type name: str
        :param rules: The rules of this UserSegment.  # noqa: E501
        :type rules: List[UserSegmentRule]
        :param tags: The tags of this UserSegment.  # noqa: E501
        :type tags: List[str]
        :param unbounded: The unbounded of this UserSegment.  # noqa: E501
        :type unbounded: bool
        :param version: The version of this UserSegment.  # noqa: E501
        :type version: int
        """
        self.openapi_types = {
            'flags': List[FlagListItem],
            'links': Links,
            'creation_date': int,
            'description': str,
            'excluded': List[str],
            'included': List[str],
            'key': str,
            'name': str,
            'rules': List[UserSegmentRule],
            'tags': List[str],
            'unbounded': bool,
            'version': int
        }

        self.attribute_map = {
            'flags': '_flags',
            'links': '_links',
            'creation_date': 'creationDate',
            'description': 'description',
            'excluded': 'excluded',
            'included': 'included',
            'key': 'key',
            'name': 'name',
            'rules': 'rules',
            'tags': 'tags',
            'unbounded': 'unbounded',
            'version': 'version'
        }

        self._flags = flags
        self._links = links
        self._creation_date = creation_date
        self._description = description
        self._excluded = excluded
        self._included = included
        self._key = key
        self._name = name
        self._rules = rules
        self._tags = tags
        self._unbounded = unbounded
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'UserSegment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserSegment of this UserSegment.  # noqa: E501
        :rtype: UserSegment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def flags(self) -> List[FlagListItem]:
        """Gets the flags of this UserSegment.


        :return: The flags of this UserSegment.
        :rtype: List[FlagListItem]
        """
        return self._flags

    @flags.setter
    def flags(self, flags: List[FlagListItem]):
        """Sets the flags of this UserSegment.


        :param flags: The flags of this UserSegment.
        :type flags: List[FlagListItem]
        """

        self._flags = flags

    @property
    def links(self) -> Links:
        """Gets the links of this UserSegment.


        :return: The links of this UserSegment.
        :rtype: Links
        """
        return self._links

    @links.setter
    def links(self, links: Links):
        """Sets the links of this UserSegment.


        :param links: The links of this UserSegment.
        :type links: Links
        """

        self._links = links

    @property
    def creation_date(self) -> int:
        """Gets the creation_date of this UserSegment.

        A unix epoch time in milliseconds specifying the creation time of this flag.  # noqa: E501

        :return: The creation_date of this UserSegment.
        :rtype: int
        """
        return self._creation_date

    @creation_date.setter
    def creation_date(self, creation_date: int):
        """Sets the creation_date of this UserSegment.

        A unix epoch time in milliseconds specifying the creation time of this flag.  # noqa: E501

        :param creation_date: The creation_date of this UserSegment.
        :type creation_date: int
        """
        if creation_date is None:
            raise ValueError("Invalid value for `creation_date`, must not be `None`")  # noqa: E501

        self._creation_date = creation_date

    @property
    def description(self) -> str:
        """Gets the description of this UserSegment.

        Description of the user segment.  # noqa: E501

        :return: The description of this UserSegment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UserSegment.

        Description of the user segment.  # noqa: E501

        :param description: The description of this UserSegment.
        :type description: str
        """

        self._description = description

    @property
    def excluded(self) -> List[str]:
        """Gets the excluded of this UserSegment.

        An array of user keys that should not be included in this segment, unless they are also listed in \"included\".  # noqa: E501

        :return: The excluded of this UserSegment.
        :rtype: List[str]
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded: List[str]):
        """Sets the excluded of this UserSegment.

        An array of user keys that should not be included in this segment, unless they are also listed in \"included\".  # noqa: E501

        :param excluded: The excluded of this UserSegment.
        :type excluded: List[str]
        """

        self._excluded = excluded

    @property
    def included(self) -> List[str]:
        """Gets the included of this UserSegment.

        An array of user keys that are included in this segment.  # noqa: E501

        :return: The included of this UserSegment.
        :rtype: List[str]
        """
        return self._included

    @included.setter
    def included(self, included: List[str]):
        """Sets the included of this UserSegment.

        An array of user keys that are included in this segment.  # noqa: E501

        :param included: The included of this UserSegment.
        :type included: List[str]
        """

        self._included = included

    @property
    def key(self) -> str:
        """Gets the key of this UserSegment.

        Unique identifier for the user segment.  # noqa: E501

        :return: The key of this UserSegment.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this UserSegment.

        Unique identifier for the user segment.  # noqa: E501

        :param key: The key of this UserSegment.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this UserSegment.

        Name of the user segment.  # noqa: E501

        :return: The name of this UserSegment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserSegment.

        Name of the user segment.  # noqa: E501

        :param name: The name of this UserSegment.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def rules(self) -> List[UserSegmentRule]:
        """Gets the rules of this UserSegment.

        An array of rules that can cause a user to be included in this segment.  # noqa: E501

        :return: The rules of this UserSegment.
        :rtype: List[UserSegmentRule]
        """
        return self._rules

    @rules.setter
    def rules(self, rules: List[UserSegmentRule]):
        """Sets the rules of this UserSegment.

        An array of rules that can cause a user to be included in this segment.  # noqa: E501

        :param rules: The rules of this UserSegment.
        :type rules: List[UserSegmentRule]
        """

        self._rules = rules

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this UserSegment.

        An array of tags for this user segment.  # noqa: E501

        :return: The tags of this UserSegment.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this UserSegment.

        An array of tags for this user segment.  # noqa: E501

        :param tags: The tags of this UserSegment.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def unbounded(self) -> bool:
        """Gets the unbounded of this UserSegment.

        Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.  # noqa: E501

        :return: The unbounded of this UserSegment.
        :rtype: bool
        """
        return self._unbounded

    @unbounded.setter
    def unbounded(self, unbounded: bool):
        """Sets the unbounded of this UserSegment.

        Controls whether this is considered a \"big segment\" which can support an unlimited numbers of users. Include/exclude lists sent with this payload are not used in big segments. Contact your account manager for early access to this feature.  # noqa: E501

        :param unbounded: The unbounded of this UserSegment.
        :type unbounded: bool
        """

        self._unbounded = unbounded

    @property
    def version(self) -> int:
        """Gets the version of this UserSegment.


        :return: The version of this UserSegment.
        :rtype: int
        """
        return self._version

    @version.setter
    def version(self, version: int):
        """Sets the version of this UserSegment.


        :param version: The version of this UserSegment.
        :type version: int
        """

        self._version = version
