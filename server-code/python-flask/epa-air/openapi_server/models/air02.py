from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Air02(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_astatus=None, formal_count=None, icon=None, informal_count=None, lat=None, lon=None, last_insp=None, name=None, puv=None, type=None):  # noqa: E501
        """Air02 - a model defined in OpenAPI

        :param ca_astatus: The ca_astatus of this Air02.  # noqa: E501
        :type ca_astatus: str
        :param formal_count: The formal_count of this Air02.  # noqa: E501
        :type formal_count: str
        :param icon: The icon of this Air02.  # noqa: E501
        :type icon: str
        :param informal_count: The informal_count of this Air02.  # noqa: E501
        :type informal_count: str
        :param lat: The lat of this Air02.  # noqa: E501
        :type lat: str
        :param lon: The lon of this Air02.  # noqa: E501
        :type lon: str
        :param last_insp: The last_insp of this Air02.  # noqa: E501
        :type last_insp: str
        :param name: The name of this Air02.  # noqa: E501
        :type name: str
        :param puv: The puv of this Air02.  # noqa: E501
        :type puv: str
        :param type: The type of this Air02.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'ca_astatus': str,
            'formal_count': str,
            'icon': str,
            'informal_count': str,
            'lat': str,
            'lon': str,
            'last_insp': str,
            'name': str,
            'puv': str,
            'type': str
        }

        self.attribute_map = {
            'ca_astatus': 'CAAstatus',
            'formal_count': 'FormalCount',
            'icon': 'ICON',
            'informal_count': 'InformalCount',
            'lat': 'LAT',
            'lon': 'LON',
            'last_insp': 'LastInsp',
            'name': 'NAME',
            'puv': 'PUV',
            'type': 'TYPE'
        }

        self._ca_astatus = ca_astatus
        self._formal_count = formal_count
        self._icon = icon
        self._informal_count = informal_count
        self._lat = lat
        self._lon = lon
        self._last_insp = last_insp
        self._name = name
        self._puv = puv
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Air02':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The air02 of this Air02.  # noqa: E501
        :rtype: Air02
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_astatus(self) -> str:
        """Gets the ca_astatus of this Air02.

        The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined  # noqa: E501

        :return: The ca_astatus of this Air02.
        :rtype: str
        """
        return self._ca_astatus

    @ca_astatus.setter
    def ca_astatus(self, ca_astatus: str):
        """Sets the ca_astatus of this Air02.

        The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined  # noqa: E501

        :param ca_astatus: The ca_astatus of this Air02.
        :type ca_astatus: str
        """
        if ca_astatus is None:
            raise ValueError("Invalid value for `ca_astatus`, must not be `None`")  # noqa: E501

        self._ca_astatus = ca_astatus

    @property
    def formal_count(self) -> str:
        """Gets the formal_count of this Air02.

        The number of formal enforcement actions that have been taken against the facility  # noqa: E501

        :return: The formal_count of this Air02.
        :rtype: str
        """
        return self._formal_count

    @formal_count.setter
    def formal_count(self, formal_count: str):
        """Sets the formal_count of this Air02.

        The number of formal enforcement actions that have been taken against the facility  # noqa: E501

        :param formal_count: The formal_count of this Air02.
        :type formal_count: str
        """
        if formal_count is None:
            raise ValueError("Invalid value for `formal_count`, must not be `None`")  # noqa: E501

        self._formal_count = formal_count

    @property
    def icon(self) -> str:
        """Gets the icon of this Air02.

        Name of each individual icon file within the URL base  # noqa: E501

        :return: The icon of this Air02.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon: str):
        """Sets the icon of this Air02.

        Name of each individual icon file within the URL base  # noqa: E501

        :param icon: The icon of this Air02.
        :type icon: str
        """
        if icon is None:
            raise ValueError("Invalid value for `icon`, must not be `None`")  # noqa: E501

        self._icon = icon

    @property
    def informal_count(self) -> str:
        """Gets the informal_count of this Air02.

        The number of informal enforcement actions that have been taken against the facility  # noqa: E501

        :return: The informal_count of this Air02.
        :rtype: str
        """
        return self._informal_count

    @informal_count.setter
    def informal_count(self, informal_count: str):
        """Sets the informal_count of this Air02.

        The number of informal enforcement actions that have been taken against the facility  # noqa: E501

        :param informal_count: The informal_count of this Air02.
        :type informal_count: str
        """
        if informal_count is None:
            raise ValueError("Invalid value for `informal_count`, must not be `None`")  # noqa: E501

        self._informal_count = informal_count

    @property
    def lat(self) -> str:
        """Gets the lat of this Air02.

        The latitude of the facility in degrees, to four decimal places  # noqa: E501

        :return: The lat of this Air02.
        :rtype: str
        """
        return self._lat

    @lat.setter
    def lat(self, lat: str):
        """Sets the lat of this Air02.

        The latitude of the facility in degrees, to four decimal places  # noqa: E501

        :param lat: The lat of this Air02.
        :type lat: str
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lon(self) -> str:
        """Gets the lon of this Air02.

        The longitude of the facility in degrees, to four decimal places  # noqa: E501

        :return: The lon of this Air02.
        :rtype: str
        """
        return self._lon

    @lon.setter
    def lon(self, lon: str):
        """Sets the lon of this Air02.

        The longitude of the facility in degrees, to four decimal places  # noqa: E501

        :param lon: The lon of this Air02.
        :type lon: str
        """
        if lon is None:
            raise ValueError("Invalid value for `lon`, must not be `None`")  # noqa: E501

        self._lon = lon

    @property
    def last_insp(self) -> str:
        """Gets the last_insp of this Air02.

        The unique identifier for the last inspection  # noqa: E501

        :return: The last_insp of this Air02.
        :rtype: str
        """
        return self._last_insp

    @last_insp.setter
    def last_insp(self, last_insp: str):
        """Sets the last_insp of this Air02.

        The unique identifier for the last inspection  # noqa: E501

        :param last_insp: The last_insp of this Air02.
        :type last_insp: str
        """
        if last_insp is None:
            raise ValueError("Invalid value for `last_insp`, must not be `None`")  # noqa: E501

        self._last_insp = last_insp

    @property
    def name(self) -> str:
        """Gets the name of this Air02.

        For DFR, this is the Facility name. The name corresponds to the TYPE value  # noqa: E501

        :return: The name of this Air02.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Air02.

        For DFR, this is the Facility name. The name corresponds to the TYPE value  # noqa: E501

        :param name: The name of this Air02.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def puv(self) -> str:
        """Gets the puv of this Air02.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility  # noqa: E501

        :return: The puv of this Air02.
        :rtype: str
        """
        return self._puv

    @puv.setter
    def puv(self, puv: str):
        """Sets the puv of this Air02.

        Pop up value. Combine with PopUpBaseURL to give the popup for the facility  # noqa: E501

        :param puv: The puv of this Air02.
        :type puv: str
        """
        if puv is None:
            raise ValueError("Invalid value for `puv`, must not be `None`")  # noqa: E501

        self._puv = puv

    @property
    def type(self) -> str:
        """Gets the type of this Air02.

        For DFR, this is always facility  # noqa: E501

        :return: The type of this Air02.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Air02.

        For DFR, this is always facility  # noqa: E501

        :param type: The type of this Air02.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
