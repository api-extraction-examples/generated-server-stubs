from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.air03 import Air03
from openapi_server import util

from openapi_server.models.air03 import Air03  # noqa: E501

class Air12(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, facilities=None, message=None, page_no=None, query_id=None, query_rows=None):  # noqa: E501
        """Air12 - a model defined in OpenAPI

        :param facilities: The facilities of this Air12.  # noqa: E501
        :type facilities: List[Air03]
        :param message: The message of this Air12.  # noqa: E501
        :type message: str
        :param page_no: The page_no of this Air12.  # noqa: E501
        :type page_no: str
        :param query_id: The query_id of this Air12.  # noqa: E501
        :type query_id: str
        :param query_rows: The query_rows of this Air12.  # noqa: E501
        :type query_rows: str
        """
        self.openapi_types = {
            'facilities': List[Air03],
            'message': str,
            'page_no': str,
            'query_id': str,
            'query_rows': str
        }

        self.attribute_map = {
            'facilities': 'Facilities',
            'message': 'Message',
            'page_no': 'PageNo',
            'query_id': 'QueryID',
            'query_rows': 'QueryRows'
        }

        self._facilities = facilities
        self._message = message
        self._page_no = page_no
        self._query_id = query_id
        self._query_rows = query_rows

    @classmethod
    def from_dict(cls, dikt) -> 'Air12':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The air12 of this Air12.  # noqa: E501
        :rtype: Air12
        """
        return util.deserialize_model(dikt, cls)

    @property
    def facilities(self) -> List[Air03]:
        """Gets the facilities of this Air12.

        A complex array of facility information.  # noqa: E501

        :return: The facilities of this Air12.
        :rtype: List[Air03]
        """
        return self._facilities

    @facilities.setter
    def facilities(self, facilities: List[Air03]):
        """Sets the facilities of this Air12.

        A complex array of facility information.  # noqa: E501

        :param facilities: The facilities of this Air12.
        :type facilities: List[Air03]
        """
        if facilities is None:
            raise ValueError("Invalid value for `facilities`, must not be `None`")  # noqa: E501

        self._facilities = facilities

    @property
    def message(self) -> str:
        """Gets the message of this Air12.

        Field to record messages (typically performance-related) about packet processing  # noqa: E501

        :return: The message of this Air12.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Air12.

        Field to record messages (typically performance-related) about packet processing  # noqa: E501

        :param message: The message of this Air12.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def page_no(self) -> str:
        """Gets the page_no of this Air12.

        The number of pages of results returned  # noqa: E501

        :return: The page_no of this Air12.
        :rtype: str
        """
        return self._page_no

    @page_no.setter
    def page_no(self, page_no: str):
        """Sets the page_no of this Air12.

        The number of pages of results returned  # noqa: E501

        :param page_no: The page_no of this Air12.
        :type page_no: str
        """
        if page_no is None:
            raise ValueError("Invalid value for `page_no`, must not be `None`")  # noqa: E501

        self._page_no = page_no

    @property
    def query_id(self) -> str:
        """Gets the query_id of this Air12.

        Sequential number assigned to entire search result  # noqa: E501

        :return: The query_id of this Air12.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id: str):
        """Sets the query_id of this Air12.

        Sequential number assigned to entire search result  # noqa: E501

        :param query_id: The query_id of this Air12.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id

    @property
    def query_rows(self) -> str:
        """Gets the query_rows of this Air12.

        Number of query results returned  # noqa: E501

        :return: The query_rows of this Air12.
        :rtype: str
        """
        return self._query_rows

    @query_rows.setter
    def query_rows(self, query_rows: str):
        """Sets the query_rows of this Air12.

        Number of query results returned  # noqa: E501

        :param query_rows: The query_rows of this Air12.
        :type query_rows: str
        """
        if query_rows is None:
            raise ValueError("Invalid value for `query_rows`, must not be `None`")  # noqa: E501

        self._query_rows = query_rows
