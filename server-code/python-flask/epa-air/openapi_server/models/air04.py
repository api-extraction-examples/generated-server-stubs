from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.air02 import Air02
from openapi_server import util

from openapi_server.models.air02 import Air02  # noqa: E501

class Air04(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, icon_base_url=None, map_data=None, pop_up_base_url=None, query_id=None):  # noqa: E501
        """Air04 - a model defined in OpenAPI

        :param icon_base_url: The icon_base_url of this Air04.  # noqa: E501
        :type icon_base_url: str
        :param map_data: The map_data of this Air04.  # noqa: E501
        :type map_data: List[Air02]
        :param pop_up_base_url: The pop_up_base_url of this Air04.  # noqa: E501
        :type pop_up_base_url: str
        :param query_id: The query_id of this Air04.  # noqa: E501
        :type query_id: str
        """
        self.openapi_types = {
            'icon_base_url': str,
            'map_data': List[Air02],
            'pop_up_base_url': str,
            'query_id': str
        }

        self.attribute_map = {
            'icon_base_url': 'IconBaseURL',
            'map_data': 'MapData',
            'pop_up_base_url': 'PopUpBaseURL',
            'query_id': 'QueryID'
        }

        self._icon_base_url = icon_base_url
        self._map_data = map_data
        self._pop_up_base_url = pop_up_base_url
        self._query_id = query_id

    @classmethod
    def from_dict(cls, dikt) -> 'Air04':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The air04 of this Air04.  # noqa: E501
        :rtype: Air04
        """
        return util.deserialize_model(dikt, cls)

    @property
    def icon_base_url(self) -> str:
        """Gets the icon_base_url of this Air04.

        URL where all the icons are located  # noqa: E501

        :return: The icon_base_url of this Air04.
        :rtype: str
        """
        return self._icon_base_url

    @icon_base_url.setter
    def icon_base_url(self, icon_base_url: str):
        """Sets the icon_base_url of this Air04.

        URL where all the icons are located  # noqa: E501

        :param icon_base_url: The icon_base_url of this Air04.
        :type icon_base_url: str
        """
        if icon_base_url is None:
            raise ValueError("Invalid value for `icon_base_url`, must not be `None`")  # noqa: E501

        self._icon_base_url = icon_base_url

    @property
    def map_data(self) -> List[Air02]:
        """Gets the map_data of this Air04.

        An array of facility geospatial information.  # noqa: E501

        :return: The map_data of this Air04.
        :rtype: List[Air02]
        """
        return self._map_data

    @map_data.setter
    def map_data(self, map_data: List[Air02]):
        """Sets the map_data of this Air04.

        An array of facility geospatial information.  # noqa: E501

        :param map_data: The map_data of this Air04.
        :type map_data: List[Air02]
        """
        if map_data is None:
            raise ValueError("Invalid value for `map_data`, must not be `None`")  # noqa: E501

        self._map_data = map_data

    @property
    def pop_up_base_url(self) -> str:
        """Gets the pop_up_base_url of this Air04.

        Combine this URL with the PUC to get popup info  # noqa: E501

        :return: The pop_up_base_url of this Air04.
        :rtype: str
        """
        return self._pop_up_base_url

    @pop_up_base_url.setter
    def pop_up_base_url(self, pop_up_base_url: str):
        """Sets the pop_up_base_url of this Air04.

        Combine this URL with the PUC to get popup info  # noqa: E501

        :param pop_up_base_url: The pop_up_base_url of this Air04.
        :type pop_up_base_url: str
        """
        if pop_up_base_url is None:
            raise ValueError("Invalid value for `pop_up_base_url`, must not be `None`")  # noqa: E501

        self._pop_up_base_url = pop_up_base_url

    @property
    def query_id(self) -> str:
        """Gets the query_id of this Air04.

        Sequential number assigned to entire search result  # noqa: E501

        :return: The query_id of this Air04.
        :rtype: str
        """
        return self._query_id

    @query_id.setter
    def query_id(self, query_id: str):
        """Sets the query_id of this Air04.

        Sequential number assigned to entire search result  # noqa: E501

        :param query_id: The query_id of this Air04.
        :type query_id: str
        """
        if query_id is None:
            raise ValueError("Invalid value for `query_id`, must not be `None`")  # noqa: E501

        self._query_id = query_id
