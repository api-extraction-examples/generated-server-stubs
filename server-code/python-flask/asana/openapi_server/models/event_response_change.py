from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EventResponseChange(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action=None, added_value=None, field=None, new_value=None, removed_value=None):  # noqa: E501
        """EventResponseChange - a model defined in OpenAPI

        :param action: The action of this EventResponseChange.  # noqa: E501
        :type action: str
        :param added_value: The added_value of this EventResponseChange.  # noqa: E501
        :type added_value: object
        :param field: The field of this EventResponseChange.  # noqa: E501
        :type field: str
        :param new_value: The new_value of this EventResponseChange.  # noqa: E501
        :type new_value: object
        :param removed_value: The removed_value of this EventResponseChange.  # noqa: E501
        :type removed_value: object
        """
        self.openapi_types = {
            'action': str,
            'added_value': object,
            'field': str,
            'new_value': object,
            'removed_value': object
        }

        self.attribute_map = {
            'action': 'action',
            'added_value': 'added_value',
            'field': 'field',
            'new_value': 'new_value',
            'removed_value': 'removed_value'
        }

        self._action = action
        self._added_value = added_value
        self._field = field
        self._new_value = new_value
        self._removed_value = removed_value

    @classmethod
    def from_dict(cls, dikt) -> 'EventResponseChange':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventResponse_change of this EventResponseChange.  # noqa: E501
        :rtype: EventResponseChange
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action(self) -> str:
        """Gets the action of this EventResponseChange.

        The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.  # noqa: E501

        :return: The action of this EventResponseChange.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this EventResponseChange.

        The type of action taken on the **field** which has been changed.  This can be one of `changed`, `added`, or `removed` depending on the nature of the change.  # noqa: E501

        :param action: The action of this EventResponseChange.
        :type action: str
        """

        self._action = action

    @property
    def added_value(self) -> object:
        """Gets the added_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `added` _and_ the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :return: The added_value of this EventResponseChange.
        :rtype: object
        """
        return self._added_value

    @added_value.setter
    def added_value(self, added_value: object):
        """Sets the added_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `added` _and_ the `added_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :param added_value: The added_value of this EventResponseChange.
        :type added_value: object
        """

        self._added_value = added_value

    @property
    def field(self) -> str:
        """Gets the field of this EventResponseChange.

        The name of the field that has changed in the resource.  # noqa: E501

        :return: The field of this EventResponseChange.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field: str):
        """Sets the field of this EventResponseChange.

        The name of the field that has changed in the resource.  # noqa: E501

        :param field: The field of this EventResponseChange.
        :type field: str
        """

        self._field = field

    @property
    def new_value(self) -> object:
        """Gets the new_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `changed` _and_ the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :return: The new_value of this EventResponseChange.
        :rtype: object
        """
        return self._new_value

    @new_value.setter
    def new_value(self, new_value: object):
        """Sets the new_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `changed` _and_ the `new_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :param new_value: The new_value of this EventResponseChange.
        :type new_value: object
        """

        self._new_value = new_value

    @property
    def removed_value(self) -> object:
        """Gets the removed_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `removed` _and_ the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :return: The removed_value of this EventResponseChange.
        :rtype: object
        """
        return self._removed_value

    @removed_value.setter
    def removed_value(self, removed_value: object):
        """Sets the removed_value of this EventResponseChange.

        *Conditional.* This property is only present when the **field's** `action` is `removed` _and_ the `removed_value` is an Asana resource. This will be only the `gid` and `resource_type` of the resource when the events come from webhooks; this will be the compact representation (and can have fields expanded with [opt_fields](/docs/input-output-options)) when using the [Events](/docs/asana-events) endpoint.  # noqa: E501

        :param removed_value: The removed_value of this EventResponseChange.
        :type removed_value: object
        """

        self._removed_value = removed_value
