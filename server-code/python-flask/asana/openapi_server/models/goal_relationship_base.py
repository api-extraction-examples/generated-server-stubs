from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.goal_relationship_base_all_of_supported_goal import GoalRelationshipBaseAllOfSupportedGoal
from openapi_server.models.goal_relationship_compact_all_of_supporting_resource import GoalRelationshipCompactAllOfSupportingResource
from openapi_server import util

from openapi_server.models.goal_relationship_base_all_of_supported_goal import GoalRelationshipBaseAllOfSupportedGoal  # noqa: E501
from openapi_server.models.goal_relationship_compact_all_of_supporting_resource import GoalRelationshipCompactAllOfSupportingResource  # noqa: E501

class GoalRelationshipBase(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, contribution_weight=None, resource_subtype=None, supporting_resource=None, supported_goal=None):  # noqa: E501
        """GoalRelationshipBase - a model defined in OpenAPI

        :param gid: The gid of this GoalRelationshipBase.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this GoalRelationshipBase.  # noqa: E501
        :type resource_type: str
        :param contribution_weight: The contribution_weight of this GoalRelationshipBase.  # noqa: E501
        :type contribution_weight: float
        :param resource_subtype: The resource_subtype of this GoalRelationshipBase.  # noqa: E501
        :type resource_subtype: str
        :param supporting_resource: The supporting_resource of this GoalRelationshipBase.  # noqa: E501
        :type supporting_resource: GoalRelationshipCompactAllOfSupportingResource
        :param supported_goal: The supported_goal of this GoalRelationshipBase.  # noqa: E501
        :type supported_goal: GoalRelationshipBaseAllOfSupportedGoal
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'contribution_weight': float,
            'resource_subtype': str,
            'supporting_resource': GoalRelationshipCompactAllOfSupportingResource,
            'supported_goal': GoalRelationshipBaseAllOfSupportedGoal
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'contribution_weight': 'contribution_weight',
            'resource_subtype': 'resource_subtype',
            'supporting_resource': 'supporting_resource',
            'supported_goal': 'supported_goal'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._contribution_weight = contribution_weight
        self._resource_subtype = resource_subtype
        self._supporting_resource = supporting_resource
        self._supported_goal = supported_goal

    @classmethod
    def from_dict(cls, dikt) -> 'GoalRelationshipBase':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoalRelationshipBase of this GoalRelationshipBase.  # noqa: E501
        :rtype: GoalRelationshipBase
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this GoalRelationshipBase.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this GoalRelationshipBase.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this GoalRelationshipBase.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this GoalRelationshipBase.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this GoalRelationshipBase.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this GoalRelationshipBase.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this GoalRelationshipBase.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this GoalRelationshipBase.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def contribution_weight(self) -> float:
        """Gets the contribution_weight of this GoalRelationshipBase.

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.  # noqa: E501

        :return: The contribution_weight of this GoalRelationshipBase.
        :rtype: float
        """
        return self._contribution_weight

    @contribution_weight.setter
    def contribution_weight(self, contribution_weight: float):
        """Sets the contribution_weight of this GoalRelationshipBase.

        The weight that the supporting resource's progress contributes to the supported goal's progress. This can only be 0 or 1.  # noqa: E501

        :param contribution_weight: The contribution_weight of this GoalRelationshipBase.
        :type contribution_weight: float
        """

        self._contribution_weight = contribution_weight

    @property
    def resource_subtype(self) -> str:
        """Gets the resource_subtype of this GoalRelationshipBase.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :return: The resource_subtype of this GoalRelationshipBase.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype: str):
        """Sets the resource_subtype of this GoalRelationshipBase.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :param resource_subtype: The resource_subtype of this GoalRelationshipBase.
        :type resource_subtype: str
        """
        allowed_values = ["subgoal", "supporting_work"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def supporting_resource(self) -> GoalRelationshipCompactAllOfSupportingResource:
        """Gets the supporting_resource of this GoalRelationshipBase.


        :return: The supporting_resource of this GoalRelationshipBase.
        :rtype: GoalRelationshipCompactAllOfSupportingResource
        """
        return self._supporting_resource

    @supporting_resource.setter
    def supporting_resource(self, supporting_resource: GoalRelationshipCompactAllOfSupportingResource):
        """Sets the supporting_resource of this GoalRelationshipBase.


        :param supporting_resource: The supporting_resource of this GoalRelationshipBase.
        :type supporting_resource: GoalRelationshipCompactAllOfSupportingResource
        """

        self._supporting_resource = supporting_resource

    @property
    def supported_goal(self) -> GoalRelationshipBaseAllOfSupportedGoal:
        """Gets the supported_goal of this GoalRelationshipBase.


        :return: The supported_goal of this GoalRelationshipBase.
        :rtype: GoalRelationshipBaseAllOfSupportedGoal
        """
        return self._supported_goal

    @supported_goal.setter
    def supported_goal(self, supported_goal: GoalRelationshipBaseAllOfSupportedGoal):
        """Sets the supported_goal of this GoalRelationshipBase.


        :param supported_goal: The supported_goal of this GoalRelationshipBase.
        :type supported_goal: GoalRelationshipBaseAllOfSupportedGoal
        """

        self._supported_goal = supported_goal
