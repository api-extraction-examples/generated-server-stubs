from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AuditLogEventContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, api_authentication_method=None, client_ip_address=None, context_type=None, oauth_app_name=None, user_agent=None):  # noqa: E501
        """AuditLogEventContext - a model defined in OpenAPI

        :param api_authentication_method: The api_authentication_method of this AuditLogEventContext.  # noqa: E501
        :type api_authentication_method: str
        :param client_ip_address: The client_ip_address of this AuditLogEventContext.  # noqa: E501
        :type client_ip_address: str
        :param context_type: The context_type of this AuditLogEventContext.  # noqa: E501
        :type context_type: str
        :param oauth_app_name: The oauth_app_name of this AuditLogEventContext.  # noqa: E501
        :type oauth_app_name: str
        :param user_agent: The user_agent of this AuditLogEventContext.  # noqa: E501
        :type user_agent: str
        """
        self.openapi_types = {
            'api_authentication_method': str,
            'client_ip_address': str,
            'context_type': str,
            'oauth_app_name': str,
            'user_agent': str
        }

        self.attribute_map = {
            'api_authentication_method': 'api_authentication_method',
            'client_ip_address': 'client_ip_address',
            'context_type': 'context_type',
            'oauth_app_name': 'oauth_app_name',
            'user_agent': 'user_agent'
        }

        self._api_authentication_method = api_authentication_method
        self._client_ip_address = client_ip_address
        self._context_type = context_type
        self._oauth_app_name = oauth_app_name
        self._user_agent = user_agent

    @classmethod
    def from_dict(cls, dikt) -> 'AuditLogEventContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AuditLogEventContext of this AuditLogEventContext.  # noqa: E501
        :rtype: AuditLogEventContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def api_authentication_method(self) -> str:
        """Gets the api_authentication_method of this AuditLogEventContext.

        The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.  # noqa: E501

        :return: The api_authentication_method of this AuditLogEventContext.
        :rtype: str
        """
        return self._api_authentication_method

    @api_authentication_method.setter
    def api_authentication_method(self, api_authentication_method: str):
        """Sets the api_authentication_method of this AuditLogEventContext.

        The authentication method used in the context of an API request. Only present if the `context_type` is `api`. Can be one of `cookie`, `oauth`, `personal_access_token`, or `service_account`.  # noqa: E501

        :param api_authentication_method: The api_authentication_method of this AuditLogEventContext.
        :type api_authentication_method: str
        """
        allowed_values = ["cookie", "oauth", "personal_access_token", "service_account"]  # noqa: E501
        if api_authentication_method not in allowed_values:
            raise ValueError(
                "Invalid value for `api_authentication_method` ({0}), must be one of {1}"
                .format(api_authentication_method, allowed_values)
            )

        self._api_authentication_method = api_authentication_method

    @property
    def client_ip_address(self) -> str:
        """Gets the client_ip_address of this AuditLogEventContext.

        The IP address of the client that initiated the event, if applicable.  # noqa: E501

        :return: The client_ip_address of this AuditLogEventContext.
        :rtype: str
        """
        return self._client_ip_address

    @client_ip_address.setter
    def client_ip_address(self, client_ip_address: str):
        """Sets the client_ip_address of this AuditLogEventContext.

        The IP address of the client that initiated the event, if applicable.  # noqa: E501

        :param client_ip_address: The client_ip_address of this AuditLogEventContext.
        :type client_ip_address: str
        """

        self._client_ip_address = client_ip_address

    @property
    def context_type(self) -> str:
        """Gets the context_type of this AuditLogEventContext.

        The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.  # noqa: E501

        :return: The context_type of this AuditLogEventContext.
        :rtype: str
        """
        return self._context_type

    @context_type.setter
    def context_type(self, context_type: str):
        """Sets the context_type of this AuditLogEventContext.

        The type of context. Can be one of `web`, `desktop`, `mobile`, `asana_support`, `asana`, `email`, or `api`.  # noqa: E501

        :param context_type: The context_type of this AuditLogEventContext.
        :type context_type: str
        """
        allowed_values = ["web", "desktop", "mobile", "asana_support", "asana", "email", "api"]  # noqa: E501
        if context_type not in allowed_values:
            raise ValueError(
                "Invalid value for `context_type` ({0}), must be one of {1}"
                .format(context_type, allowed_values)
            )

        self._context_type = context_type

    @property
    def oauth_app_name(self) -> str:
        """Gets the oauth_app_name of this AuditLogEventContext.

        The name of the OAuth App that initiated the event. Only present if the `api_authentication_method` is `oauth`.  # noqa: E501

        :return: The oauth_app_name of this AuditLogEventContext.
        :rtype: str
        """
        return self._oauth_app_name

    @oauth_app_name.setter
    def oauth_app_name(self, oauth_app_name: str):
        """Sets the oauth_app_name of this AuditLogEventContext.

        The name of the OAuth App that initiated the event. Only present if the `api_authentication_method` is `oauth`.  # noqa: E501

        :param oauth_app_name: The oauth_app_name of this AuditLogEventContext.
        :type oauth_app_name: str
        """

        self._oauth_app_name = oauth_app_name

    @property
    def user_agent(self) -> str:
        """Gets the user_agent of this AuditLogEventContext.

        The user agent of the client that initiated the event, if applicable.  # noqa: E501

        :return: The user_agent of this AuditLogEventContext.
        :rtype: str
        """
        return self._user_agent

    @user_agent.setter
    def user_agent(self, user_agent: str):
        """Sets the user_agent of this AuditLogEventContext.

        The user agent of the client that initiated the event, if applicable.  # noqa: E501

        :param user_agent: The user_agent of this AuditLogEventContext.
        :type user_agent: str
        """

        self._user_agent = user_agent
