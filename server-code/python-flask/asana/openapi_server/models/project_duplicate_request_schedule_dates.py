from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectDuplicateRequestScheduleDates(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, due_on=None, should_skip_weekends=None, start_on=None):  # noqa: E501
        """ProjectDuplicateRequestScheduleDates - a model defined in OpenAPI

        :param due_on: The due_on of this ProjectDuplicateRequestScheduleDates.  # noqa: E501
        :type due_on: str
        :param should_skip_weekends: The should_skip_weekends of this ProjectDuplicateRequestScheduleDates.  # noqa: E501
        :type should_skip_weekends: bool
        :param start_on: The start_on of this ProjectDuplicateRequestScheduleDates.  # noqa: E501
        :type start_on: str
        """
        self.openapi_types = {
            'due_on': str,
            'should_skip_weekends': bool,
            'start_on': str
        }

        self.attribute_map = {
            'due_on': 'due_on',
            'should_skip_weekends': 'should_skip_weekends',
            'start_on': 'start_on'
        }

        self._due_on = due_on
        self._should_skip_weekends = should_skip_weekends
        self._start_on = start_on

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectDuplicateRequestScheduleDates':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectDuplicateRequest_schedule_dates of this ProjectDuplicateRequestScheduleDates.  # noqa: E501
        :rtype: ProjectDuplicateRequestScheduleDates
        """
        return util.deserialize_model(dikt, cls)

    @property
    def due_on(self) -> str:
        """Gets the due_on of this ProjectDuplicateRequestScheduleDates.

        Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.  # noqa: E501

        :return: The due_on of this ProjectDuplicateRequestScheduleDates.
        :rtype: str
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on: str):
        """Sets the due_on of this ProjectDuplicateRequestScheduleDates.

        Sets the last due date in the duplicated project to the given date. The rest of the due dates will be offset by the same amount as the due dates in the original project.  # noqa: E501

        :param due_on: The due_on of this ProjectDuplicateRequestScheduleDates.
        :type due_on: str
        """

        self._due_on = due_on

    @property
    def should_skip_weekends(self) -> bool:
        """Gets the should_skip_weekends of this ProjectDuplicateRequestScheduleDates.

        Determines if the auto-shifted dates should skip weekends.  # noqa: E501

        :return: The should_skip_weekends of this ProjectDuplicateRequestScheduleDates.
        :rtype: bool
        """
        return self._should_skip_weekends

    @should_skip_weekends.setter
    def should_skip_weekends(self, should_skip_weekends: bool):
        """Sets the should_skip_weekends of this ProjectDuplicateRequestScheduleDates.

        Determines if the auto-shifted dates should skip weekends.  # noqa: E501

        :param should_skip_weekends: The should_skip_weekends of this ProjectDuplicateRequestScheduleDates.
        :type should_skip_weekends: bool
        """
        if should_skip_weekends is None:
            raise ValueError("Invalid value for `should_skip_weekends`, must not be `None`")  # noqa: E501

        self._should_skip_weekends = should_skip_weekends

    @property
    def start_on(self) -> str:
        """Gets the start_on of this ProjectDuplicateRequestScheduleDates.

        Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.  # noqa: E501

        :return: The start_on of this ProjectDuplicateRequestScheduleDates.
        :rtype: str
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on: str):
        """Sets the start_on of this ProjectDuplicateRequestScheduleDates.

        Sets the first start date in the duplicated project to the given date. The rest of the start dates will be offset by the same amount as the start dates in the original project.  # noqa: E501

        :param start_on: The start_on of this ProjectDuplicateRequestScheduleDates.
        :type start_on: str
        """

        self._start_on = start_on
