from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TaskAddProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_after=None, insert_before=None, project=None, section=None):  # noqa: E501
        """TaskAddProjectRequest - a model defined in OpenAPI

        :param insert_after: The insert_after of this TaskAddProjectRequest.  # noqa: E501
        :type insert_after: str
        :param insert_before: The insert_before of this TaskAddProjectRequest.  # noqa: E501
        :type insert_before: str
        :param project: The project of this TaskAddProjectRequest.  # noqa: E501
        :type project: str
        :param section: The section of this TaskAddProjectRequest.  # noqa: E501
        :type section: str
        """
        self.openapi_types = {
            'insert_after': str,
            'insert_before': str,
            'project': str,
            'section': str
        }

        self.attribute_map = {
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'project': 'project',
            'section': 'section'
        }

        self._insert_after = insert_after
        self._insert_before = insert_before
        self._project = project
        self._section = section

    @classmethod
    def from_dict(cls, dikt) -> 'TaskAddProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskAddProjectRequest of this TaskAddProjectRequest.  # noqa: E501
        :rtype: TaskAddProjectRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_after(self) -> str:
        """Gets the insert_after of this TaskAddProjectRequest.

        A task in the project to insert the task after, or `null` to insert at the beginning of the list.  # noqa: E501

        :return: The insert_after of this TaskAddProjectRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after: str):
        """Sets the insert_after of this TaskAddProjectRequest.

        A task in the project to insert the task after, or `null` to insert at the beginning of the list.  # noqa: E501

        :param insert_after: The insert_after of this TaskAddProjectRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self) -> str:
        """Gets the insert_before of this TaskAddProjectRequest.

        A task in the project to insert the task before, or `null` to insert at the end of the list.  # noqa: E501

        :return: The insert_before of this TaskAddProjectRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before: str):
        """Sets the insert_before of this TaskAddProjectRequest.

        A task in the project to insert the task before, or `null` to insert at the end of the list.  # noqa: E501

        :param insert_before: The insert_before of this TaskAddProjectRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def project(self) -> str:
        """Gets the project of this TaskAddProjectRequest.

        The project to add the task to.  # noqa: E501

        :return: The project of this TaskAddProjectRequest.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this TaskAddProjectRequest.

        The project to add the task to.  # noqa: E501

        :param project: The project of this TaskAddProjectRequest.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def section(self) -> str:
        """Gets the section of this TaskAddProjectRequest.

        A section in the project to insert the task into. The task will be inserted at the bottom of the section.  # noqa: E501

        :return: The section of this TaskAddProjectRequest.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section: str):
        """Sets the section of this TaskAddProjectRequest.

        A section in the project to insert the task into. The task will be inserted at the bottom of the section.  # noqa: E501

        :param section: The section of this TaskAddProjectRequest.
        :type section: str
        """

        self._section = section
