from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_compact import CustomFieldCompact
from openapi_server.models.custom_field_setting_response import CustomFieldSettingResponse
from openapi_server.models.project_base_all_of_current_status import ProjectBaseAllOfCurrentStatus
from openapi_server.models.project_base_all_of_current_status_update import ProjectBaseAllOfCurrentStatusUpdate
from openapi_server.models.project_base_all_of_workspace import ProjectBaseAllOfWorkspace
from openapi_server.models.project_response_all_of_created_from_template import ProjectResponseAllOfCreatedFromTemplate
from openapi_server.models.project_response_all_of_owner import ProjectResponseAllOfOwner
from openapi_server.models.project_response_all_of_project_brief import ProjectResponseAllOfProjectBrief
from openapi_server.models.project_response_all_of_team import ProjectResponseAllOfTeam
from openapi_server.models.user_compact import UserCompact
from openapi_server import util

from openapi_server.models.custom_field_compact import CustomFieldCompact  # noqa: E501
from openapi_server.models.custom_field_setting_response import CustomFieldSettingResponse  # noqa: E501
from openapi_server.models.project_base_all_of_current_status import ProjectBaseAllOfCurrentStatus  # noqa: E501
from openapi_server.models.project_base_all_of_current_status_update import ProjectBaseAllOfCurrentStatusUpdate  # noqa: E501
from openapi_server.models.project_base_all_of_workspace import ProjectBaseAllOfWorkspace  # noqa: E501
from openapi_server.models.project_response_all_of_created_from_template import ProjectResponseAllOfCreatedFromTemplate  # noqa: E501
from openapi_server.models.project_response_all_of_owner import ProjectResponseAllOfOwner  # noqa: E501
from openapi_server.models.project_response_all_of_project_brief import ProjectResponseAllOfProjectBrief  # noqa: E501
from openapi_server.models.project_response_all_of_team import ProjectResponseAllOfTeam  # noqa: E501
from openapi_server.models.user_compact import UserCompact  # noqa: E501

class ProjectResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, name=None, archived=None, color=None, created_at=None, current_status=None, current_status_update=None, custom_field_settings=None, default_view=None, due_date=None, due_on=None, html_notes=None, is_template=None, members=None, modified_at=None, notes=None, public=None, start_on=None, workspace=None, completed=None, completed_at=None, completed_by=None, created_from_template=None, custom_fields=None, followers=None, icon=None, owner=None, permalink_url=None, project_brief=None, team=None):  # noqa: E501
        """ProjectResponse - a model defined in OpenAPI

        :param gid: The gid of this ProjectResponse.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this ProjectResponse.  # noqa: E501
        :type resource_type: str
        :param name: The name of this ProjectResponse.  # noqa: E501
        :type name: str
        :param archived: The archived of this ProjectResponse.  # noqa: E501
        :type archived: bool
        :param color: The color of this ProjectResponse.  # noqa: E501
        :type color: str
        :param created_at: The created_at of this ProjectResponse.  # noqa: E501
        :type created_at: datetime
        :param current_status: The current_status of this ProjectResponse.  # noqa: E501
        :type current_status: ProjectBaseAllOfCurrentStatus
        :param current_status_update: The current_status_update of this ProjectResponse.  # noqa: E501
        :type current_status_update: ProjectBaseAllOfCurrentStatusUpdate
        :param custom_field_settings: The custom_field_settings of this ProjectResponse.  # noqa: E501
        :type custom_field_settings: List[CustomFieldSettingResponse]
        :param default_view: The default_view of this ProjectResponse.  # noqa: E501
        :type default_view: str
        :param due_date: The due_date of this ProjectResponse.  # noqa: E501
        :type due_date: datetime
        :param due_on: The due_on of this ProjectResponse.  # noqa: E501
        :type due_on: datetime
        :param html_notes: The html_notes of this ProjectResponse.  # noqa: E501
        :type html_notes: str
        :param is_template: The is_template of this ProjectResponse.  # noqa: E501
        :type is_template: bool
        :param members: The members of this ProjectResponse.  # noqa: E501
        :type members: List[UserCompact]
        :param modified_at: The modified_at of this ProjectResponse.  # noqa: E501
        :type modified_at: datetime
        :param notes: The notes of this ProjectResponse.  # noqa: E501
        :type notes: str
        :param public: The public of this ProjectResponse.  # noqa: E501
        :type public: bool
        :param start_on: The start_on of this ProjectResponse.  # noqa: E501
        :type start_on: date
        :param workspace: The workspace of this ProjectResponse.  # noqa: E501
        :type workspace: ProjectBaseAllOfWorkspace
        :param completed: The completed of this ProjectResponse.  # noqa: E501
        :type completed: bool
        :param completed_at: The completed_at of this ProjectResponse.  # noqa: E501
        :type completed_at: datetime
        :param completed_by: The completed_by of this ProjectResponse.  # noqa: E501
        :type completed_by: UserCompact
        :param created_from_template: The created_from_template of this ProjectResponse.  # noqa: E501
        :type created_from_template: ProjectResponseAllOfCreatedFromTemplate
        :param custom_fields: The custom_fields of this ProjectResponse.  # noqa: E501
        :type custom_fields: List[CustomFieldCompact]
        :param followers: The followers of this ProjectResponse.  # noqa: E501
        :type followers: List[UserCompact]
        :param icon: The icon of this ProjectResponse.  # noqa: E501
        :type icon: str
        :param owner: The owner of this ProjectResponse.  # noqa: E501
        :type owner: ProjectResponseAllOfOwner
        :param permalink_url: The permalink_url of this ProjectResponse.  # noqa: E501
        :type permalink_url: str
        :param project_brief: The project_brief of this ProjectResponse.  # noqa: E501
        :type project_brief: ProjectResponseAllOfProjectBrief
        :param team: The team of this ProjectResponse.  # noqa: E501
        :type team: ProjectResponseAllOfTeam
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'archived': bool,
            'color': str,
            'created_at': datetime,
            'current_status': ProjectBaseAllOfCurrentStatus,
            'current_status_update': ProjectBaseAllOfCurrentStatusUpdate,
            'custom_field_settings': List[CustomFieldSettingResponse],
            'default_view': str,
            'due_date': datetime,
            'due_on': datetime,
            'html_notes': str,
            'is_template': bool,
            'members': List[UserCompact],
            'modified_at': datetime,
            'notes': str,
            'public': bool,
            'start_on': date,
            'workspace': ProjectBaseAllOfWorkspace,
            'completed': bool,
            'completed_at': datetime,
            'completed_by': UserCompact,
            'created_from_template': ProjectResponseAllOfCreatedFromTemplate,
            'custom_fields': List[CustomFieldCompact],
            'followers': List[UserCompact],
            'icon': str,
            'owner': ProjectResponseAllOfOwner,
            'permalink_url': str,
            'project_brief': ProjectResponseAllOfProjectBrief,
            'team': ProjectResponseAllOfTeam
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'archived': 'archived',
            'color': 'color',
            'created_at': 'created_at',
            'current_status': 'current_status',
            'current_status_update': 'current_status_update',
            'custom_field_settings': 'custom_field_settings',
            'default_view': 'default_view',
            'due_date': 'due_date',
            'due_on': 'due_on',
            'html_notes': 'html_notes',
            'is_template': 'is_template',
            'members': 'members',
            'modified_at': 'modified_at',
            'notes': 'notes',
            'public': 'public',
            'start_on': 'start_on',
            'workspace': 'workspace',
            'completed': 'completed',
            'completed_at': 'completed_at',
            'completed_by': 'completed_by',
            'created_from_template': 'created_from_template',
            'custom_fields': 'custom_fields',
            'followers': 'followers',
            'icon': 'icon',
            'owner': 'owner',
            'permalink_url': 'permalink_url',
            'project_brief': 'project_brief',
            'team': 'team'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._archived = archived
        self._color = color
        self._created_at = created_at
        self._current_status = current_status
        self._current_status_update = current_status_update
        self._custom_field_settings = custom_field_settings
        self._default_view = default_view
        self._due_date = due_date
        self._due_on = due_on
        self._html_notes = html_notes
        self._is_template = is_template
        self._members = members
        self._modified_at = modified_at
        self._notes = notes
        self._public = public
        self._start_on = start_on
        self._workspace = workspace
        self._completed = completed
        self._completed_at = completed_at
        self._completed_by = completed_by
        self._created_from_template = created_from_template
        self._custom_fields = custom_fields
        self._followers = followers
        self._icon = icon
        self._owner = owner
        self._permalink_url = permalink_url
        self._project_brief = project_brief
        self._team = team

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectResponse of this ProjectResponse.  # noqa: E501
        :rtype: ProjectResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this ProjectResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this ProjectResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this ProjectResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this ProjectResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this ProjectResponse.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this ProjectResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this ProjectResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this ProjectResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self) -> str:
        """Gets the name of this ProjectResponse.

        Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.  # noqa: E501

        :return: The name of this ProjectResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectResponse.

        Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.  # noqa: E501

        :param name: The name of this ProjectResponse.
        :type name: str
        """

        self._name = name

    @property
    def archived(self) -> bool:
        """Gets the archived of this ProjectResponse.

        True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.  # noqa: E501

        :return: The archived of this ProjectResponse.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived: bool):
        """Sets the archived of this ProjectResponse.

        True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.  # noqa: E501

        :param archived: The archived of this ProjectResponse.
        :type archived: bool
        """

        self._archived = archived

    @property
    def color(self) -> str:
        """Gets the color of this ProjectResponse.

        Color of the project.  # noqa: E501

        :return: The color of this ProjectResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this ProjectResponse.

        Color of the project.  # noqa: E501

        :param color: The color of this ProjectResponse.
        :type color: str
        """
        allowed_values = [None,"dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this ProjectResponse.

        The time at which this resource was created.  # noqa: E501

        :return: The created_at of this ProjectResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this ProjectResponse.

        The time at which this resource was created.  # noqa: E501

        :param created_at: The created_at of this ProjectResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def current_status(self) -> ProjectBaseAllOfCurrentStatus:
        """Gets the current_status of this ProjectResponse.


        :return: The current_status of this ProjectResponse.
        :rtype: ProjectBaseAllOfCurrentStatus
        """
        return self._current_status

    @current_status.setter
    def current_status(self, current_status: ProjectBaseAllOfCurrentStatus):
        """Sets the current_status of this ProjectResponse.


        :param current_status: The current_status of this ProjectResponse.
        :type current_status: ProjectBaseAllOfCurrentStatus
        """

        self._current_status = current_status

    @property
    def current_status_update(self) -> ProjectBaseAllOfCurrentStatusUpdate:
        """Gets the current_status_update of this ProjectResponse.


        :return: The current_status_update of this ProjectResponse.
        :rtype: ProjectBaseAllOfCurrentStatusUpdate
        """
        return self._current_status_update

    @current_status_update.setter
    def current_status_update(self, current_status_update: ProjectBaseAllOfCurrentStatusUpdate):
        """Sets the current_status_update of this ProjectResponse.


        :param current_status_update: The current_status_update of this ProjectResponse.
        :type current_status_update: ProjectBaseAllOfCurrentStatusUpdate
        """

        self._current_status_update = current_status_update

    @property
    def custom_field_settings(self) -> List[CustomFieldSettingResponse]:
        """Gets the custom_field_settings of this ProjectResponse.

        Array of Custom Field Settings (in compact form).  # noqa: E501

        :return: The custom_field_settings of this ProjectResponse.
        :rtype: List[CustomFieldSettingResponse]
        """
        return self._custom_field_settings

    @custom_field_settings.setter
    def custom_field_settings(self, custom_field_settings: List[CustomFieldSettingResponse]):
        """Sets the custom_field_settings of this ProjectResponse.

        Array of Custom Field Settings (in compact form).  # noqa: E501

        :param custom_field_settings: The custom_field_settings of this ProjectResponse.
        :type custom_field_settings: List[CustomFieldSettingResponse]
        """

        self._custom_field_settings = custom_field_settings

    @property
    def default_view(self) -> str:
        """Gets the default_view of this ProjectResponse.

        The default view (list, board, calendar, or timeline) of a project.  # noqa: E501

        :return: The default_view of this ProjectResponse.
        :rtype: str
        """
        return self._default_view

    @default_view.setter
    def default_view(self, default_view: str):
        """Sets the default_view of this ProjectResponse.

        The default view (list, board, calendar, or timeline) of a project.  # noqa: E501

        :param default_view: The default_view of this ProjectResponse.
        :type default_view: str
        """
        allowed_values = ["list", "board", "calendar", "timeline"]  # noqa: E501
        if default_view not in allowed_values:
            raise ValueError(
                "Invalid value for `default_view` ({0}), must be one of {1}"
                .format(default_view, allowed_values)
            )

        self._default_view = default_view

    @property
    def due_date(self) -> datetime:
        """Gets the due_date of this ProjectResponse.

        *Deprecated: new integrations should prefer the `due_on` field.*  # noqa: E501

        :return: The due_date of this ProjectResponse.
        :rtype: datetime
        """
        return self._due_date

    @due_date.setter
    def due_date(self, due_date: datetime):
        """Sets the due_date of this ProjectResponse.

        *Deprecated: new integrations should prefer the `due_on` field.*  # noqa: E501

        :param due_date: The due_date of this ProjectResponse.
        :type due_date: datetime
        """

        self._due_date = due_date

    @property
    def due_on(self) -> datetime:
        """Gets the due_on of this ProjectResponse.

        The day on which this project is due. This takes a date with format YYYY-MM-DD.  # noqa: E501

        :return: The due_on of this ProjectResponse.
        :rtype: datetime
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on: datetime):
        """Sets the due_on of this ProjectResponse.

        The day on which this project is due. This takes a date with format YYYY-MM-DD.  # noqa: E501

        :param due_on: The due_on of this ProjectResponse.
        :type due_on: datetime
        """

        self._due_on = due_on

    @property
    def html_notes(self) -> str:
        """Gets the html_notes of this ProjectResponse.

        [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.  # noqa: E501

        :return: The html_notes of this ProjectResponse.
        :rtype: str
        """
        return self._html_notes

    @html_notes.setter
    def html_notes(self, html_notes: str):
        """Sets the html_notes of this ProjectResponse.

        [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.  # noqa: E501

        :param html_notes: The html_notes of this ProjectResponse.
        :type html_notes: str
        """

        self._html_notes = html_notes

    @property
    def is_template(self) -> bool:
        """Gets the is_template of this ProjectResponse.

        [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.  # noqa: E501

        :return: The is_template of this ProjectResponse.
        :rtype: bool
        """
        return self._is_template

    @is_template.setter
    def is_template(self, is_template: bool):
        """Sets the is_template of this ProjectResponse.

        [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.  # noqa: E501

        :param is_template: The is_template of this ProjectResponse.
        :type is_template: bool
        """

        self._is_template = is_template

    @property
    def members(self) -> List[UserCompact]:
        """Gets the members of this ProjectResponse.

        Array of users who are members of this project.  # noqa: E501

        :return: The members of this ProjectResponse.
        :rtype: List[UserCompact]
        """
        return self._members

    @members.setter
    def members(self, members: List[UserCompact]):
        """Sets the members of this ProjectResponse.

        Array of users who are members of this project.  # noqa: E501

        :param members: The members of this ProjectResponse.
        :type members: List[UserCompact]
        """

        self._members = members

    @property
    def modified_at(self) -> datetime:
        """Gets the modified_at of this ProjectResponse.

        The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*  # noqa: E501

        :return: The modified_at of this ProjectResponse.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at: datetime):
        """Sets the modified_at of this ProjectResponse.

        The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*  # noqa: E501

        :param modified_at: The modified_at of this ProjectResponse.
        :type modified_at: datetime
        """

        self._modified_at = modified_at

    @property
    def notes(self) -> str:
        """Gets the notes of this ProjectResponse.

        Free-form textual information associated with the project (ie., its description).  # noqa: E501

        :return: The notes of this ProjectResponse.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this ProjectResponse.

        Free-form textual information associated with the project (ie., its description).  # noqa: E501

        :param notes: The notes of this ProjectResponse.
        :type notes: str
        """

        self._notes = notes

    @property
    def public(self) -> bool:
        """Gets the public of this ProjectResponse.

        True if the project is public to its team.  # noqa: E501

        :return: The public of this ProjectResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this ProjectResponse.

        True if the project is public to its team.  # noqa: E501

        :param public: The public of this ProjectResponse.
        :type public: bool
        """

        self._public = public

    @property
    def start_on(self) -> date:
        """Gets the start_on of this ProjectResponse.

        The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*  # noqa: E501

        :return: The start_on of this ProjectResponse.
        :rtype: date
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on: date):
        """Sets the start_on of this ProjectResponse.

        The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*  # noqa: E501

        :param start_on: The start_on of this ProjectResponse.
        :type start_on: date
        """

        self._start_on = start_on

    @property
    def workspace(self) -> ProjectBaseAllOfWorkspace:
        """Gets the workspace of this ProjectResponse.


        :return: The workspace of this ProjectResponse.
        :rtype: ProjectBaseAllOfWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace: ProjectBaseAllOfWorkspace):
        """Sets the workspace of this ProjectResponse.


        :param workspace: The workspace of this ProjectResponse.
        :type workspace: ProjectBaseAllOfWorkspace
        """

        self._workspace = workspace

    @property
    def completed(self) -> bool:
        """Gets the completed of this ProjectResponse.

        True if the project is currently marked complete, false if not.  # noqa: E501

        :return: The completed of this ProjectResponse.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed: bool):
        """Sets the completed of this ProjectResponse.

        True if the project is currently marked complete, false if not.  # noqa: E501

        :param completed: The completed of this ProjectResponse.
        :type completed: bool
        """

        self._completed = completed

    @property
    def completed_at(self) -> datetime:
        """Gets the completed_at of this ProjectResponse.

        The time at which this project was completed, or null if the project is not completed.  # noqa: E501

        :return: The completed_at of this ProjectResponse.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at: datetime):
        """Sets the completed_at of this ProjectResponse.

        The time at which this project was completed, or null if the project is not completed.  # noqa: E501

        :param completed_at: The completed_at of this ProjectResponse.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def completed_by(self) -> UserCompact:
        """Gets the completed_by of this ProjectResponse.


        :return: The completed_by of this ProjectResponse.
        :rtype: UserCompact
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by: UserCompact):
        """Sets the completed_by of this ProjectResponse.


        :param completed_by: The completed_by of this ProjectResponse.
        :type completed_by: UserCompact
        """

        self._completed_by = completed_by

    @property
    def created_from_template(self) -> ProjectResponseAllOfCreatedFromTemplate:
        """Gets the created_from_template of this ProjectResponse.


        :return: The created_from_template of this ProjectResponse.
        :rtype: ProjectResponseAllOfCreatedFromTemplate
        """
        return self._created_from_template

    @created_from_template.setter
    def created_from_template(self, created_from_template: ProjectResponseAllOfCreatedFromTemplate):
        """Sets the created_from_template of this ProjectResponse.


        :param created_from_template: The created_from_template of this ProjectResponse.
        :type created_from_template: ProjectResponseAllOfCreatedFromTemplate
        """

        self._created_from_template = created_from_template

    @property
    def custom_fields(self) -> List[CustomFieldCompact]:
        """Gets the custom_fields of this ProjectResponse.

        Array of Custom Fields.  # noqa: E501

        :return: The custom_fields of this ProjectResponse.
        :rtype: List[CustomFieldCompact]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields: List[CustomFieldCompact]):
        """Sets the custom_fields of this ProjectResponse.

        Array of Custom Fields.  # noqa: E501

        :param custom_fields: The custom_fields of this ProjectResponse.
        :type custom_fields: List[CustomFieldCompact]
        """

        self._custom_fields = custom_fields

    @property
    def followers(self) -> List[UserCompact]:
        """Gets the followers of this ProjectResponse.

        Array of users following this project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project.  # noqa: E501

        :return: The followers of this ProjectResponse.
        :rtype: List[UserCompact]
        """
        return self._followers

    @followers.setter
    def followers(self, followers: List[UserCompact]):
        """Sets the followers of this ProjectResponse.

        Array of users following this project. Followers are a subset of members who have opted in to receive \"tasks added\" notifications for a project.  # noqa: E501

        :param followers: The followers of this ProjectResponse.
        :type followers: List[UserCompact]
        """

        self._followers = followers

    @property
    def icon(self) -> str:
        """Gets the icon of this ProjectResponse.

        The icon for a project.  # noqa: E501

        :return: The icon of this ProjectResponse.
        :rtype: str
        """
        return self._icon

    @icon.setter
    def icon(self, icon: str):
        """Sets the icon of this ProjectResponse.

        The icon for a project.  # noqa: E501

        :param icon: The icon of this ProjectResponse.
        :type icon: str
        """
        allowed_values = [None,"list", "board", "timeline", "calendar", "rocket", "people", "graph", "star", "bug", "light_bulb", "globe", "gear", "notebook", "computer", "check", "target", "html", "megaphone", "chat_bubbles", "briefcase", "page_layout", "mountain_flag", "puzzle", "presentation", "line_and_symbols", "speed_dial", "ribbon", "shoe", "shopping_basket", "map", "ticket", "coins"]  # noqa: E501
        if icon not in allowed_values:
            raise ValueError(
                "Invalid value for `icon` ({0}), must be one of {1}"
                .format(icon, allowed_values)
            )

        self._icon = icon

    @property
    def owner(self) -> ProjectResponseAllOfOwner:
        """Gets the owner of this ProjectResponse.


        :return: The owner of this ProjectResponse.
        :rtype: ProjectResponseAllOfOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner: ProjectResponseAllOfOwner):
        """Sets the owner of this ProjectResponse.


        :param owner: The owner of this ProjectResponse.
        :type owner: ProjectResponseAllOfOwner
        """

        self._owner = owner

    @property
    def permalink_url(self) -> str:
        """Gets the permalink_url of this ProjectResponse.

        A url that points directly to the object within Asana.  # noqa: E501

        :return: The permalink_url of this ProjectResponse.
        :rtype: str
        """
        return self._permalink_url

    @permalink_url.setter
    def permalink_url(self, permalink_url: str):
        """Sets the permalink_url of this ProjectResponse.

        A url that points directly to the object within Asana.  # noqa: E501

        :param permalink_url: The permalink_url of this ProjectResponse.
        :type permalink_url: str
        """

        self._permalink_url = permalink_url

    @property
    def project_brief(self) -> ProjectResponseAllOfProjectBrief:
        """Gets the project_brief of this ProjectResponse.


        :return: The project_brief of this ProjectResponse.
        :rtype: ProjectResponseAllOfProjectBrief
        """
        return self._project_brief

    @project_brief.setter
    def project_brief(self, project_brief: ProjectResponseAllOfProjectBrief):
        """Sets the project_brief of this ProjectResponse.


        :param project_brief: The project_brief of this ProjectResponse.
        :type project_brief: ProjectResponseAllOfProjectBrief
        """

        self._project_brief = project_brief

    @property
    def team(self) -> ProjectResponseAllOfTeam:
        """Gets the team of this ProjectResponse.


        :return: The team of this ProjectResponse.
        :rtype: ProjectResponseAllOfTeam
        """
        return self._team

    @team.setter
    def team(self, team: ProjectResponseAllOfTeam):
        """Sets the team of this ProjectResponse.


        :param team: The team of this ProjectResponse.
        :type team: ProjectResponseAllOfTeam
        """

        self._team = team
