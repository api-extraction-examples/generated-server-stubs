from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectSectionInsertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after_section=None, before_section=None, project=None, section=None):  # noqa: E501
        """ProjectSectionInsertRequest - a model defined in OpenAPI

        :param after_section: The after_section of this ProjectSectionInsertRequest.  # noqa: E501
        :type after_section: str
        :param before_section: The before_section of this ProjectSectionInsertRequest.  # noqa: E501
        :type before_section: str
        :param project: The project of this ProjectSectionInsertRequest.  # noqa: E501
        :type project: str
        :param section: The section of this ProjectSectionInsertRequest.  # noqa: E501
        :type section: str
        """
        self.openapi_types = {
            'after_section': str,
            'before_section': str,
            'project': str,
            'section': str
        }

        self.attribute_map = {
            'after_section': 'after_section',
            'before_section': 'before_section',
            'project': 'project',
            'section': 'section'
        }

        self._after_section = after_section
        self._before_section = before_section
        self._project = project
        self._section = section

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectSectionInsertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectSectionInsertRequest of this ProjectSectionInsertRequest.  # noqa: E501
        :rtype: ProjectSectionInsertRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after_section(self) -> str:
        """Gets the after_section of this ProjectSectionInsertRequest.

        Insert the given section immediately after the section specified by this parameter.  # noqa: E501

        :return: The after_section of this ProjectSectionInsertRequest.
        :rtype: str
        """
        return self._after_section

    @after_section.setter
    def after_section(self, after_section: str):
        """Sets the after_section of this ProjectSectionInsertRequest.

        Insert the given section immediately after the section specified by this parameter.  # noqa: E501

        :param after_section: The after_section of this ProjectSectionInsertRequest.
        :type after_section: str
        """

        self._after_section = after_section

    @property
    def before_section(self) -> str:
        """Gets the before_section of this ProjectSectionInsertRequest.

        Insert the given section immediately before the section specified by this parameter.  # noqa: E501

        :return: The before_section of this ProjectSectionInsertRequest.
        :rtype: str
        """
        return self._before_section

    @before_section.setter
    def before_section(self, before_section: str):
        """Sets the before_section of this ProjectSectionInsertRequest.

        Insert the given section immediately before the section specified by this parameter.  # noqa: E501

        :param before_section: The before_section of this ProjectSectionInsertRequest.
        :type before_section: str
        """

        self._before_section = before_section

    @property
    def project(self) -> str:
        """Gets the project of this ProjectSectionInsertRequest.

        The project in which to reorder the given section.  # noqa: E501

        :return: The project of this ProjectSectionInsertRequest.
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project: str):
        """Sets the project of this ProjectSectionInsertRequest.

        The project in which to reorder the given section.  # noqa: E501

        :param project: The project of this ProjectSectionInsertRequest.
        :type project: str
        """
        if project is None:
            raise ValueError("Invalid value for `project`, must not be `None`")  # noqa: E501

        self._project = project

    @property
    def section(self) -> str:
        """Gets the section of this ProjectSectionInsertRequest.

        The section to reorder.  # noqa: E501

        :return: The section of this ProjectSectionInsertRequest.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section: str):
        """Sets the section of this ProjectSectionInsertRequest.

        The section to reorder.  # noqa: E501

        :param section: The section of this ProjectSectionInsertRequest.
        :type section: str
        """
        if section is None:
            raise ValueError("Invalid value for `section`, must not be `None`")  # noqa: E501

        self._section = section
