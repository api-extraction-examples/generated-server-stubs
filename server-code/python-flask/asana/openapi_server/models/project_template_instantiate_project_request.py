from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.date_variable_request import DateVariableRequest
from openapi_server import util

from openapi_server.models.date_variable_request import DateVariableRequest  # noqa: E501

class ProjectTemplateInstantiateProjectRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_strict=None, name=None, public=None, requested_dates=None, team=None, workspace=None):  # noqa: E501
        """ProjectTemplateInstantiateProjectRequest - a model defined in OpenAPI

        :param is_strict: The is_strict of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type is_strict: bool
        :param name: The name of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type name: str
        :param public: The public of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type public: bool
        :param requested_dates: The requested_dates of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type requested_dates: List[DateVariableRequest]
        :param team: The team of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type team: str
        :param workspace: The workspace of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :type workspace: str
        """
        self.openapi_types = {
            'is_strict': bool,
            'name': str,
            'public': bool,
            'requested_dates': List[DateVariableRequest],
            'team': str,
            'workspace': str
        }

        self.attribute_map = {
            'is_strict': 'is_strict',
            'name': 'name',
            'public': 'public',
            'requested_dates': 'requested_dates',
            'team': 'team',
            'workspace': 'workspace'
        }

        self._is_strict = is_strict
        self._name = name
        self._public = public
        self._requested_dates = requested_dates
        self._team = team
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectTemplateInstantiateProjectRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectTemplateInstantiateProjectRequest of this ProjectTemplateInstantiateProjectRequest.  # noqa: E501
        :rtype: ProjectTemplateInstantiateProjectRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_strict(self) -> bool:
        """Gets the is_strict of this ProjectTemplateInstantiateProjectRequest.

        *Optional*. If set to `true`, the endpoint returns an \"Unprocessable Entity\" error if you fail to provide a calendar date value for any date variable. If set to `false`, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).  # noqa: E501

        :return: The is_strict of this ProjectTemplateInstantiateProjectRequest.
        :rtype: bool
        """
        return self._is_strict

    @is_strict.setter
    def is_strict(self, is_strict: bool):
        """Sets the is_strict of this ProjectTemplateInstantiateProjectRequest.

        *Optional*. If set to `true`, the endpoint returns an \"Unprocessable Entity\" error if you fail to provide a calendar date value for any date variable. If set to `false`, a default date is used for each unfulfilled date variable (e.g., the current date is used as the Start Date of a project).  # noqa: E501

        :param is_strict: The is_strict of this ProjectTemplateInstantiateProjectRequest.
        :type is_strict: bool
        """

        self._is_strict = is_strict

    @property
    def name(self) -> str:
        """Gets the name of this ProjectTemplateInstantiateProjectRequest.

        The name of the new project.  # noqa: E501

        :return: The name of this ProjectTemplateInstantiateProjectRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectTemplateInstantiateProjectRequest.

        The name of the new project.  # noqa: E501

        :param name: The name of this ProjectTemplateInstantiateProjectRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def public(self) -> bool:
        """Gets the public of this ProjectTemplateInstantiateProjectRequest.

        Sets the project to public to its team.  # noqa: E501

        :return: The public of this ProjectTemplateInstantiateProjectRequest.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this ProjectTemplateInstantiateProjectRequest.

        Sets the project to public to its team.  # noqa: E501

        :param public: The public of this ProjectTemplateInstantiateProjectRequest.
        :type public: bool
        """
        if public is None:
            raise ValueError("Invalid value for `public`, must not be `None`")  # noqa: E501

        self._public = public

    @property
    def requested_dates(self) -> List[DateVariableRequest]:
        """Gets the requested_dates of this ProjectTemplateInstantiateProjectRequest.

        Array of mappings of date variables to calendar dates.  # noqa: E501

        :return: The requested_dates of this ProjectTemplateInstantiateProjectRequest.
        :rtype: List[DateVariableRequest]
        """
        return self._requested_dates

    @requested_dates.setter
    def requested_dates(self, requested_dates: List[DateVariableRequest]):
        """Sets the requested_dates of this ProjectTemplateInstantiateProjectRequest.

        Array of mappings of date variables to calendar dates.  # noqa: E501

        :param requested_dates: The requested_dates of this ProjectTemplateInstantiateProjectRequest.
        :type requested_dates: List[DateVariableRequest]
        """

        self._requested_dates = requested_dates

    @property
    def team(self) -> str:
        """Gets the team of this ProjectTemplateInstantiateProjectRequest.

        *Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for `team` and not `workspace`.  # noqa: E501

        :return: The team of this ProjectTemplateInstantiateProjectRequest.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this ProjectTemplateInstantiateProjectRequest.

        *Conditional*. Sets the team of the new project. If the project template exists in an _organization_, you must specify a value for `team` and not `workspace`.  # noqa: E501

        :param team: The team of this ProjectTemplateInstantiateProjectRequest.
        :type team: str
        """

        self._team = team

    @property
    def workspace(self) -> str:
        """Gets the workspace of this ProjectTemplateInstantiateProjectRequest.

        *Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for `workspace` and not `team`.  # noqa: E501

        :return: The workspace of this ProjectTemplateInstantiateProjectRequest.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace: str):
        """Sets the workspace of this ProjectTemplateInstantiateProjectRequest.

        *Conditional*. Sets the workspace of the new project. If the project template exists in a _workspace_, you must specify a value for `workspace` and not `team`.  # noqa: E501

        :param workspace: The workspace of this ProjectTemplateInstantiateProjectRequest.
        :type workspace: str
        """

        self._workspace = workspace
