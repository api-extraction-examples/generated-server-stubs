from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.asana_resource import AsanaResource
from openapi_server.models.like import Like
from openapi_server.models.task_base_all_of_external import TaskBaseAllOfExternal
from openapi_server.models.task_base_all_of_memberships import TaskBaseAllOfMemberships
from openapi_server.models.user_compact import UserCompact
from openapi_server import util

from openapi_server.models.asana_resource import AsanaResource  # noqa: E501
from openapi_server.models.like import Like  # noqa: E501
from openapi_server.models.task_base_all_of_external import TaskBaseAllOfExternal  # noqa: E501
from openapi_server.models.task_base_all_of_memberships import TaskBaseAllOfMemberships  # noqa: E501
from openapi_server.models.user_compact import UserCompact  # noqa: E501

class TaskRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, name=None, resource_subtype=None, actual_time_minutes=None, approval_status=None, assignee_status=None, completed=None, completed_at=None, completed_by=None, created_at=None, dependencies=None, dependents=None, due_at=None, due_on=None, external=None, hearted=None, hearts=None, html_notes=None, is_rendered_as_separator=None, liked=None, likes=None, memberships=None, modified_at=None, notes=None, num_hearts=None, num_likes=None, num_subtasks=None, start_at=None, start_on=None, assignee=None, assignee_section=None, custom_fields=None, followers=None, parent=None, projects=None, tags=None, workspace=None):  # noqa: E501
        """TaskRequest - a model defined in OpenAPI

        :param gid: The gid of this TaskRequest.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this TaskRequest.  # noqa: E501
        :type resource_type: str
        :param name: The name of this TaskRequest.  # noqa: E501
        :type name: str
        :param resource_subtype: The resource_subtype of this TaskRequest.  # noqa: E501
        :type resource_subtype: str
        :param actual_time_minutes: The actual_time_minutes of this TaskRequest.  # noqa: E501
        :type actual_time_minutes: float
        :param approval_status: The approval_status of this TaskRequest.  # noqa: E501
        :type approval_status: str
        :param assignee_status: The assignee_status of this TaskRequest.  # noqa: E501
        :type assignee_status: str
        :param completed: The completed of this TaskRequest.  # noqa: E501
        :type completed: bool
        :param completed_at: The completed_at of this TaskRequest.  # noqa: E501
        :type completed_at: datetime
        :param completed_by: The completed_by of this TaskRequest.  # noqa: E501
        :type completed_by: UserCompact
        :param created_at: The created_at of this TaskRequest.  # noqa: E501
        :type created_at: datetime
        :param dependencies: The dependencies of this TaskRequest.  # noqa: E501
        :type dependencies: List[AsanaResource]
        :param dependents: The dependents of this TaskRequest.  # noqa: E501
        :type dependents: List[AsanaResource]
        :param due_at: The due_at of this TaskRequest.  # noqa: E501
        :type due_at: date
        :param due_on: The due_on of this TaskRequest.  # noqa: E501
        :type due_on: date
        :param external: The external of this TaskRequest.  # noqa: E501
        :type external: TaskBaseAllOfExternal
        :param hearted: The hearted of this TaskRequest.  # noqa: E501
        :type hearted: bool
        :param hearts: The hearts of this TaskRequest.  # noqa: E501
        :type hearts: List[Like]
        :param html_notes: The html_notes of this TaskRequest.  # noqa: E501
        :type html_notes: str
        :param is_rendered_as_separator: The is_rendered_as_separator of this TaskRequest.  # noqa: E501
        :type is_rendered_as_separator: bool
        :param liked: The liked of this TaskRequest.  # noqa: E501
        :type liked: bool
        :param likes: The likes of this TaskRequest.  # noqa: E501
        :type likes: List[Like]
        :param memberships: The memberships of this TaskRequest.  # noqa: E501
        :type memberships: List[TaskBaseAllOfMemberships]
        :param modified_at: The modified_at of this TaskRequest.  # noqa: E501
        :type modified_at: datetime
        :param notes: The notes of this TaskRequest.  # noqa: E501
        :type notes: str
        :param num_hearts: The num_hearts of this TaskRequest.  # noqa: E501
        :type num_hearts: int
        :param num_likes: The num_likes of this TaskRequest.  # noqa: E501
        :type num_likes: int
        :param num_subtasks: The num_subtasks of this TaskRequest.  # noqa: E501
        :type num_subtasks: int
        :param start_at: The start_at of this TaskRequest.  # noqa: E501
        :type start_at: date
        :param start_on: The start_on of this TaskRequest.  # noqa: E501
        :type start_on: date
        :param assignee: The assignee of this TaskRequest.  # noqa: E501
        :type assignee: str
        :param assignee_section: The assignee_section of this TaskRequest.  # noqa: E501
        :type assignee_section: str
        :param custom_fields: The custom_fields of this TaskRequest.  # noqa: E501
        :type custom_fields: Dict[str, str]
        :param followers: The followers of this TaskRequest.  # noqa: E501
        :type followers: List[str]
        :param parent: The parent of this TaskRequest.  # noqa: E501
        :type parent: str
        :param projects: The projects of this TaskRequest.  # noqa: E501
        :type projects: List[str]
        :param tags: The tags of this TaskRequest.  # noqa: E501
        :type tags: List[str]
        :param workspace: The workspace of this TaskRequest.  # noqa: E501
        :type workspace: str
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'resource_subtype': str,
            'actual_time_minutes': float,
            'approval_status': str,
            'assignee_status': str,
            'completed': bool,
            'completed_at': datetime,
            'completed_by': UserCompact,
            'created_at': datetime,
            'dependencies': List[AsanaResource],
            'dependents': List[AsanaResource],
            'due_at': date,
            'due_on': date,
            'external': TaskBaseAllOfExternal,
            'hearted': bool,
            'hearts': List[Like],
            'html_notes': str,
            'is_rendered_as_separator': bool,
            'liked': bool,
            'likes': List[Like],
            'memberships': List[TaskBaseAllOfMemberships],
            'modified_at': datetime,
            'notes': str,
            'num_hearts': int,
            'num_likes': int,
            'num_subtasks': int,
            'start_at': date,
            'start_on': date,
            'assignee': str,
            'assignee_section': str,
            'custom_fields': Dict[str, str],
            'followers': List[str],
            'parent': str,
            'projects': List[str],
            'tags': List[str],
            'workspace': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'resource_subtype': 'resource_subtype',
            'actual_time_minutes': 'actual_time_minutes',
            'approval_status': 'approval_status',
            'assignee_status': 'assignee_status',
            'completed': 'completed',
            'completed_at': 'completed_at',
            'completed_by': 'completed_by',
            'created_at': 'created_at',
            'dependencies': 'dependencies',
            'dependents': 'dependents',
            'due_at': 'due_at',
            'due_on': 'due_on',
            'external': 'external',
            'hearted': 'hearted',
            'hearts': 'hearts',
            'html_notes': 'html_notes',
            'is_rendered_as_separator': 'is_rendered_as_separator',
            'liked': 'liked',
            'likes': 'likes',
            'memberships': 'memberships',
            'modified_at': 'modified_at',
            'notes': 'notes',
            'num_hearts': 'num_hearts',
            'num_likes': 'num_likes',
            'num_subtasks': 'num_subtasks',
            'start_at': 'start_at',
            'start_on': 'start_on',
            'assignee': 'assignee',
            'assignee_section': 'assignee_section',
            'custom_fields': 'custom_fields',
            'followers': 'followers',
            'parent': 'parent',
            'projects': 'projects',
            'tags': 'tags',
            'workspace': 'workspace'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._resource_subtype = resource_subtype
        self._actual_time_minutes = actual_time_minutes
        self._approval_status = approval_status
        self._assignee_status = assignee_status
        self._completed = completed
        self._completed_at = completed_at
        self._completed_by = completed_by
        self._created_at = created_at
        self._dependencies = dependencies
        self._dependents = dependents
        self._due_at = due_at
        self._due_on = due_on
        self._external = external
        self._hearted = hearted
        self._hearts = hearts
        self._html_notes = html_notes
        self._is_rendered_as_separator = is_rendered_as_separator
        self._liked = liked
        self._likes = likes
        self._memberships = memberships
        self._modified_at = modified_at
        self._notes = notes
        self._num_hearts = num_hearts
        self._num_likes = num_likes
        self._num_subtasks = num_subtasks
        self._start_at = start_at
        self._start_on = start_on
        self._assignee = assignee
        self._assignee_section = assignee_section
        self._custom_fields = custom_fields
        self._followers = followers
        self._parent = parent
        self._projects = projects
        self._tags = tags
        self._workspace = workspace

    @classmethod
    def from_dict(cls, dikt) -> 'TaskRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskRequest of this TaskRequest.  # noqa: E501
        :rtype: TaskRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this TaskRequest.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this TaskRequest.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this TaskRequest.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this TaskRequest.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this TaskRequest.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this TaskRequest.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this TaskRequest.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this TaskRequest.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self) -> str:
        """Gets the name of this TaskRequest.

        Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.  # noqa: E501

        :return: The name of this TaskRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TaskRequest.

        Name of the task. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.  # noqa: E501

        :param name: The name of this TaskRequest.
        :type name: str
        """

        self._name = name

    @property
    def resource_subtype(self) -> str:
        """Gets the resource_subtype of this TaskRequest.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.  # noqa: E501

        :return: The resource_subtype of this TaskRequest.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype: str):
        """Sets the resource_subtype of this TaskRequest.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning. The resource_subtype `milestone` represent a single moment in time. This means tasks with this subtype cannot have a start_date.  # noqa: E501

        :param resource_subtype: The resource_subtype of this TaskRequest.
        :type resource_subtype: str
        """
        allowed_values = ["default_task", "milestone", "section", "approval"]  # noqa: E501
        if resource_subtype not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_subtype` ({0}), must be one of {1}"
                .format(resource_subtype, allowed_values)
            )

        self._resource_subtype = resource_subtype

    @property
    def actual_time_minutes(self) -> float:
        """Gets the actual_time_minutes of this TaskRequest.

        This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.  # noqa: E501

        :return: The actual_time_minutes of this TaskRequest.
        :rtype: float
        """
        return self._actual_time_minutes

    @actual_time_minutes.setter
    def actual_time_minutes(self, actual_time_minutes: float):
        """Sets the actual_time_minutes of this TaskRequest.

        This value represents the sum of all the Time Tracking entries in the Actual Time field on a given Task. It is represented as a nullable long value.  # noqa: E501

        :param actual_time_minutes: The actual_time_minutes of this TaskRequest.
        :type actual_time_minutes: float
        """

        self._actual_time_minutes = actual_time_minutes

    @property
    def approval_status(self) -> str:
        """Gets the approval_status of this TaskRequest.

        *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.  # noqa: E501

        :return: The approval_status of this TaskRequest.
        :rtype: str
        """
        return self._approval_status

    @approval_status.setter
    def approval_status(self, approval_status: str):
        """Sets the approval_status of this TaskRequest.

        *Conditional* Reflects the approval status of this task. This field is kept in sync with `completed`, meaning `pending` translates to false while `approved`, `rejected`, and `changes_requested` translate to true. If you set completed to true, this field will be set to `approved`.  # noqa: E501

        :param approval_status: The approval_status of this TaskRequest.
        :type approval_status: str
        """
        allowed_values = ["pending", "approved", "rejected", "changes_requested"]  # noqa: E501
        if approval_status not in allowed_values:
            raise ValueError(
                "Invalid value for `approval_status` ({0}), must be one of {1}"
                .format(approval_status, allowed_values)
            )

        self._approval_status = approval_status

    @property
    def assignee_status(self) -> str:
        """Gets the assignee_status of this TaskRequest.

        *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.  # noqa: E501

        :return: The assignee_status of this TaskRequest.
        :rtype: str
        """
        return self._assignee_status

    @assignee_status.setter
    def assignee_status(self, assignee_status: str):
        """Sets the assignee_status of this TaskRequest.

        *Deprecated* Scheduling status of this task for the user it is assigned to. This field can only be set if the assignee is non-null. Setting this field to \"inbox\" or \"upcoming\" inserts it at the top of the section, while the other options will insert at the bottom.  # noqa: E501

        :param assignee_status: The assignee_status of this TaskRequest.
        :type assignee_status: str
        """
        allowed_values = ["today", "upcoming", "later", "new", "inbox"]  # noqa: E501
        if assignee_status not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_status` ({0}), must be one of {1}"
                .format(assignee_status, allowed_values)
            )

        self._assignee_status = assignee_status

    @property
    def completed(self) -> bool:
        """Gets the completed of this TaskRequest.

        True if the task is currently marked complete, false if not.  # noqa: E501

        :return: The completed of this TaskRequest.
        :rtype: bool
        """
        return self._completed

    @completed.setter
    def completed(self, completed: bool):
        """Sets the completed of this TaskRequest.

        True if the task is currently marked complete, false if not.  # noqa: E501

        :param completed: The completed of this TaskRequest.
        :type completed: bool
        """

        self._completed = completed

    @property
    def completed_at(self) -> datetime:
        """Gets the completed_at of this TaskRequest.

        The time at which this task was completed, or null if the task is incomplete.  # noqa: E501

        :return: The completed_at of this TaskRequest.
        :rtype: datetime
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at: datetime):
        """Sets the completed_at of this TaskRequest.

        The time at which this task was completed, or null if the task is incomplete.  # noqa: E501

        :param completed_at: The completed_at of this TaskRequest.
        :type completed_at: datetime
        """

        self._completed_at = completed_at

    @property
    def completed_by(self) -> UserCompact:
        """Gets the completed_by of this TaskRequest.


        :return: The completed_by of this TaskRequest.
        :rtype: UserCompact
        """
        return self._completed_by

    @completed_by.setter
    def completed_by(self, completed_by: UserCompact):
        """Sets the completed_by of this TaskRequest.


        :param completed_by: The completed_by of this TaskRequest.
        :type completed_by: UserCompact
        """

        self._completed_by = completed_by

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this TaskRequest.

        The time at which this resource was created.  # noqa: E501

        :return: The created_at of this TaskRequest.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this TaskRequest.

        The time at which this resource was created.  # noqa: E501

        :param created_at: The created_at of this TaskRequest.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def dependencies(self) -> List[AsanaResource]:
        """Gets the dependencies of this TaskRequest.

        [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.  # noqa: E501

        :return: The dependencies of this TaskRequest.
        :rtype: List[AsanaResource]
        """
        return self._dependencies

    @dependencies.setter
    def dependencies(self, dependencies: List[AsanaResource]):
        """Sets the dependencies of this TaskRequest.

        [Opt In](/docs/input-output-options). Array of resources referencing tasks that this task depends on. The objects contain only the gid of the dependency.  # noqa: E501

        :param dependencies: The dependencies of this TaskRequest.
        :type dependencies: List[AsanaResource]
        """

        self._dependencies = dependencies

    @property
    def dependents(self) -> List[AsanaResource]:
        """Gets the dependents of this TaskRequest.

        [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.  # noqa: E501

        :return: The dependents of this TaskRequest.
        :rtype: List[AsanaResource]
        """
        return self._dependents

    @dependents.setter
    def dependents(self, dependents: List[AsanaResource]):
        """Sets the dependents of this TaskRequest.

        [Opt In](/docs/input-output-options). Array of resources referencing tasks that depend on this task. The objects contain only the ID of the dependent.  # noqa: E501

        :param dependents: The dependents of this TaskRequest.
        :type dependents: List[AsanaResource]
        """

        self._dependents = dependents

    @property
    def due_at(self) -> date:
        """Gets the due_at of this TaskRequest.

        The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.  # noqa: E501

        :return: The due_at of this TaskRequest.
        :rtype: date
        """
        return self._due_at

    @due_at.setter
    def due_at(self, due_at: date):
        """Sets the due_at of this TaskRequest.

        The UTC date and time on which this task is due, or null if the task has no due time. This takes an ISO 8601 date string in UTC and should not be used together with `due_on`.  # noqa: E501

        :param due_at: The due_at of this TaskRequest.
        :type due_at: date
        """

        self._due_at = due_at

    @property
    def due_on(self) -> date:
        """Gets the due_on of this TaskRequest.

        The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.  # noqa: E501

        :return: The due_on of this TaskRequest.
        :rtype: date
        """
        return self._due_on

    @due_on.setter
    def due_on(self, due_on: date):
        """Sets the due_on of this TaskRequest.

        The localized date on which this task is due, or null if the task has no due date. This takes a date with `YYYY-MM-DD` format and should not be used together with `due_at`.  # noqa: E501

        :param due_on: The due_on of this TaskRequest.
        :type due_on: date
        """

        self._due_on = due_on

    @property
    def external(self) -> TaskBaseAllOfExternal:
        """Gets the external of this TaskRequest.


        :return: The external of this TaskRequest.
        :rtype: TaskBaseAllOfExternal
        """
        return self._external

    @external.setter
    def external(self, external: TaskBaseAllOfExternal):
        """Sets the external of this TaskRequest.


        :param external: The external of this TaskRequest.
        :type external: TaskBaseAllOfExternal
        """

        self._external = external

    @property
    def hearted(self) -> bool:
        """Gets the hearted of this TaskRequest.

        *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.  # noqa: E501

        :return: The hearted of this TaskRequest.
        :rtype: bool
        """
        return self._hearted

    @hearted.setter
    def hearted(self, hearted: bool):
        """Sets the hearted of this TaskRequest.

        *Deprecated - please use liked instead* True if the task is hearted by the authorized user, false if not.  # noqa: E501

        :param hearted: The hearted of this TaskRequest.
        :type hearted: bool
        """

        self._hearted = hearted

    @property
    def hearts(self) -> List[Like]:
        """Gets the hearts of this TaskRequest.

        *Deprecated - please use likes instead* Array of likes for users who have hearted this task.  # noqa: E501

        :return: The hearts of this TaskRequest.
        :rtype: List[Like]
        """
        return self._hearts

    @hearts.setter
    def hearts(self, hearts: List[Like]):
        """Sets the hearts of this TaskRequest.

        *Deprecated - please use likes instead* Array of likes for users who have hearted this task.  # noqa: E501

        :param hearts: The hearts of this TaskRequest.
        :type hearts: List[Like]
        """

        self._hearts = hearts

    @property
    def html_notes(self) -> str:
        """Gets the html_notes of this TaskRequest.

        [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.  # noqa: E501

        :return: The html_notes of this TaskRequest.
        :rtype: str
        """
        return self._html_notes

    @html_notes.setter
    def html_notes(self, html_notes: str):
        """Sets the html_notes of this TaskRequest.

        [Opt In](/docs/input-output-options). The notes of the text with formatting as HTML.  # noqa: E501

        :param html_notes: The html_notes of this TaskRequest.
        :type html_notes: str
        """

        self._html_notes = html_notes

    @property
    def is_rendered_as_separator(self) -> bool:
        """Gets the is_rendered_as_separator of this TaskRequest.

        [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.  # noqa: E501

        :return: The is_rendered_as_separator of this TaskRequest.
        :rtype: bool
        """
        return self._is_rendered_as_separator

    @is_rendered_as_separator.setter
    def is_rendered_as_separator(self, is_rendered_as_separator: bool):
        """Sets the is_rendered_as_separator of this TaskRequest.

        [Opt In](/docs/input-output-options). In some contexts tasks can be rendered as a visual separator; for instance, subtasks can appear similar to [sections](/docs/asana-sections) without being true `section` objects. If a `task` object is rendered this way in any context it will have the property `is_rendered_as_separator` set to `true`.  # noqa: E501

        :param is_rendered_as_separator: The is_rendered_as_separator of this TaskRequest.
        :type is_rendered_as_separator: bool
        """

        self._is_rendered_as_separator = is_rendered_as_separator

    @property
    def liked(self) -> bool:
        """Gets the liked of this TaskRequest.

        True if the task is liked by the authorized user, false if not.  # noqa: E501

        :return: The liked of this TaskRequest.
        :rtype: bool
        """
        return self._liked

    @liked.setter
    def liked(self, liked: bool):
        """Sets the liked of this TaskRequest.

        True if the task is liked by the authorized user, false if not.  # noqa: E501

        :param liked: The liked of this TaskRequest.
        :type liked: bool
        """

        self._liked = liked

    @property
    def likes(self) -> List[Like]:
        """Gets the likes of this TaskRequest.

        Array of likes for users who have liked this task.  # noqa: E501

        :return: The likes of this TaskRequest.
        :rtype: List[Like]
        """
        return self._likes

    @likes.setter
    def likes(self, likes: List[Like]):
        """Sets the likes of this TaskRequest.

        Array of likes for users who have liked this task.  # noqa: E501

        :param likes: The likes of this TaskRequest.
        :type likes: List[Like]
        """

        self._likes = likes

    @property
    def memberships(self) -> List[TaskBaseAllOfMemberships]:
        """Gets the memberships of this TaskRequest.

        *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.  # noqa: E501

        :return: The memberships of this TaskRequest.
        :rtype: List[TaskBaseAllOfMemberships]
        """
        return self._memberships

    @memberships.setter
    def memberships(self, memberships: List[TaskBaseAllOfMemberships]):
        """Sets the memberships of this TaskRequest.

        *Create-only*. Array of projects this task is associated with and the section it is in. At task creation time, this array can be used to add the task to specific sections. After task creation, these associations can be modified using the `addProject` and `removeProject` endpoints. Note that over time, more types of memberships may be added to this property.  # noqa: E501

        :param memberships: The memberships of this TaskRequest.
        :type memberships: List[TaskBaseAllOfMemberships]
        """

        self._memberships = memberships

    @property
    def modified_at(self) -> datetime:
        """Gets the modified_at of this TaskRequest.

        The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*  # noqa: E501

        :return: The modified_at of this TaskRequest.
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at: datetime):
        """Sets the modified_at of this TaskRequest.

        The time at which this task was last modified.  *Note: This does not currently reflect any changes in associations such as projects or comments that may have been added or removed from the task.*  # noqa: E501

        :param modified_at: The modified_at of this TaskRequest.
        :type modified_at: datetime
        """

        self._modified_at = modified_at

    @property
    def notes(self) -> str:
        """Gets the notes of this TaskRequest.

        Free-form textual information associated with the task (i.e. its description).  # noqa: E501

        :return: The notes of this TaskRequest.
        :rtype: str
        """
        return self._notes

    @notes.setter
    def notes(self, notes: str):
        """Sets the notes of this TaskRequest.

        Free-form textual information associated with the task (i.e. its description).  # noqa: E501

        :param notes: The notes of this TaskRequest.
        :type notes: str
        """

        self._notes = notes

    @property
    def num_hearts(self) -> int:
        """Gets the num_hearts of this TaskRequest.

        *Deprecated - please use likes instead* The number of users who have hearted this task.  # noqa: E501

        :return: The num_hearts of this TaskRequest.
        :rtype: int
        """
        return self._num_hearts

    @num_hearts.setter
    def num_hearts(self, num_hearts: int):
        """Sets the num_hearts of this TaskRequest.

        *Deprecated - please use likes instead* The number of users who have hearted this task.  # noqa: E501

        :param num_hearts: The num_hearts of this TaskRequest.
        :type num_hearts: int
        """

        self._num_hearts = num_hearts

    @property
    def num_likes(self) -> int:
        """Gets the num_likes of this TaskRequest.

        The number of users who have liked this task.  # noqa: E501

        :return: The num_likes of this TaskRequest.
        :rtype: int
        """
        return self._num_likes

    @num_likes.setter
    def num_likes(self, num_likes: int):
        """Sets the num_likes of this TaskRequest.

        The number of users who have liked this task.  # noqa: E501

        :param num_likes: The num_likes of this TaskRequest.
        :type num_likes: int
        """

        self._num_likes = num_likes

    @property
    def num_subtasks(self) -> int:
        """Gets the num_subtasks of this TaskRequest.

        [Opt In](/docs/input-output-options). The number of subtasks on this task.   # noqa: E501

        :return: The num_subtasks of this TaskRequest.
        :rtype: int
        """
        return self._num_subtasks

    @num_subtasks.setter
    def num_subtasks(self, num_subtasks: int):
        """Sets the num_subtasks of this TaskRequest.

        [Opt In](/docs/input-output-options). The number of subtasks on this task.   # noqa: E501

        :param num_subtasks: The num_subtasks of this TaskRequest.
        :type num_subtasks: int
        """

        self._num_subtasks = num_subtasks

    @property
    def start_at(self) -> date:
        """Gets the start_at of this TaskRequest.

        Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*  # noqa: E501

        :return: The start_at of this TaskRequest.
        :rtype: date
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at: date):
        """Sets the start_at of this TaskRequest.

        Date and time on which work begins for the task, or null if the task has no start time. This takes an ISO 8601 date string in UTC and should not be used together with `start_on`. *Note: `due_at` must be present in the request when setting or unsetting the `start_at` parameter.*  # noqa: E501

        :param start_at: The start_at of this TaskRequest.
        :type start_at: date
        """

        self._start_at = start_at

    @property
    def start_on(self) -> date:
        """Gets the start_on of this TaskRequest.

        The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*  # noqa: E501

        :return: The start_on of this TaskRequest.
        :rtype: date
        """
        return self._start_on

    @start_on.setter
    def start_on(self, start_on: date):
        """Sets the start_on of this TaskRequest.

        The day on which work begins for the task , or null if the task has no start date. This takes a date with `YYYY-MM-DD` format and should not be used together with `start_at`. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter.*  # noqa: E501

        :param start_on: The start_on of this TaskRequest.
        :type start_on: date
        """

        self._start_on = start_on

    @property
    def assignee(self) -> str:
        """Gets the assignee of this TaskRequest.

        Gid of a user.  # noqa: E501

        :return: The assignee of this TaskRequest.
        :rtype: str
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee: str):
        """Sets the assignee of this TaskRequest.

        Gid of a user.  # noqa: E501

        :param assignee: The assignee of this TaskRequest.
        :type assignee: str
        """

        self._assignee = assignee

    @property
    def assignee_section(self) -> str:
        """Gets the assignee_section of this TaskRequest.

        The *assignee section* is a subdivision of a project that groups tasks together in the assignee's \"My Tasks\" list. It can either be a header above a list of tasks in a list view or a column in a board view of \"My Tasks.\" The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's \"My Tasks\" list.  # noqa: E501

        :return: The assignee_section of this TaskRequest.
        :rtype: str
        """
        return self._assignee_section

    @assignee_section.setter
    def assignee_section(self, assignee_section: str):
        """Sets the assignee_section of this TaskRequest.

        The *assignee section* is a subdivision of a project that groups tasks together in the assignee's \"My Tasks\" list. It can either be a header above a list of tasks in a list view or a column in a board view of \"My Tasks.\" The `assignee_section` property will be returned in the response only if the request was sent by the user who is the assignee of the task. Note that you can only write to `assignee_section` with the gid of an existing section visible in the user's \"My Tasks\" list.  # noqa: E501

        :param assignee_section: The assignee_section of this TaskRequest.
        :type assignee_section: str
        """

        self._assignee_section = assignee_section

    @property
    def custom_fields(self) -> Dict[str, str]:
        """Gets the custom_fields of this TaskRequest.

        An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.  # noqa: E501

        :return: The custom_fields of this TaskRequest.
        :rtype: Dict[str, str]
        """
        return self._custom_fields

    @custom_fields.setter
    def custom_fields(self, custom_fields: Dict[str, str]):
        """Sets the custom_fields of this TaskRequest.

        An object where each key is a Custom Field GID and each value is an enum GID, string, number, object, or array.  # noqa: E501

        :param custom_fields: The custom_fields of this TaskRequest.
        :type custom_fields: Dict[str, str]
        """

        self._custom_fields = custom_fields

    @property
    def followers(self) -> List[str]:
        """Gets the followers of this TaskRequest.

        *Create-Only* An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.  # noqa: E501

        :return: The followers of this TaskRequest.
        :rtype: List[str]
        """
        return self._followers

    @followers.setter
    def followers(self, followers: List[str]):
        """Sets the followers of this TaskRequest.

        *Create-Only* An array of strings identifying users. These can either be the string \"me\", an email, or the gid of a user. In order to change followers on an existing task use `addFollowers` and `removeFollowers`.  # noqa: E501

        :param followers: The followers of this TaskRequest.
        :type followers: List[str]
        """

        self._followers = followers

    @property
    def parent(self) -> str:
        """Gets the parent of this TaskRequest.

        Gid of a task.  # noqa: E501

        :return: The parent of this TaskRequest.
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent: str):
        """Sets the parent of this TaskRequest.

        Gid of a task.  # noqa: E501

        :param parent: The parent of this TaskRequest.
        :type parent: str
        """

        self._parent = parent

    @property
    def projects(self) -> List[str]:
        """Gets the projects of this TaskRequest.

        *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.  # noqa: E501

        :return: The projects of this TaskRequest.
        :rtype: List[str]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: List[str]):
        """Sets the projects of this TaskRequest.

        *Create-Only* Array of project gids. In order to change projects on an existing task use `addProject` and `removeProject`.  # noqa: E501

        :param projects: The projects of this TaskRequest.
        :type projects: List[str]
        """

        self._projects = projects

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this TaskRequest.

        *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.  # noqa: E501

        :return: The tags of this TaskRequest.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this TaskRequest.

        *Create-Only* Array of tag gids. In order to change tags on an existing task use `addTag` and `removeTag`.  # noqa: E501

        :param tags: The tags of this TaskRequest.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def workspace(self) -> str:
        """Gets the workspace of this TaskRequest.

        Gid of a workspace.  # noqa: E501

        :return: The workspace of this TaskRequest.
        :rtype: str
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace: str):
        """Sets the workspace of this TaskRequest.

        Gid of a workspace.  # noqa: E501

        :param workspace: The workspace of this TaskRequest.
        :type workspace: str
        """

        self._workspace = workspace
