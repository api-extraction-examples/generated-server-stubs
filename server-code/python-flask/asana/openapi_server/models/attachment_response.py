from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_response_all_of_parent import AttachmentResponseAllOfParent
from openapi_server import util

from openapi_server.models.attachment_response_all_of_parent import AttachmentResponseAllOfParent  # noqa: E501

class AttachmentResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, name=None, resource_subtype=None, connected_to_app=None, created_at=None, download_url=None, host=None, parent=None, permanent_url=None, size=None, view_url=None):  # noqa: E501
        """AttachmentResponse - a model defined in OpenAPI

        :param gid: The gid of this AttachmentResponse.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this AttachmentResponse.  # noqa: E501
        :type resource_type: str
        :param name: The name of this AttachmentResponse.  # noqa: E501
        :type name: str
        :param resource_subtype: The resource_subtype of this AttachmentResponse.  # noqa: E501
        :type resource_subtype: str
        :param connected_to_app: The connected_to_app of this AttachmentResponse.  # noqa: E501
        :type connected_to_app: bool
        :param created_at: The created_at of this AttachmentResponse.  # noqa: E501
        :type created_at: datetime
        :param download_url: The download_url of this AttachmentResponse.  # noqa: E501
        :type download_url: str
        :param host: The host of this AttachmentResponse.  # noqa: E501
        :type host: str
        :param parent: The parent of this AttachmentResponse.  # noqa: E501
        :type parent: AttachmentResponseAllOfParent
        :param permanent_url: The permanent_url of this AttachmentResponse.  # noqa: E501
        :type permanent_url: str
        :param size: The size of this AttachmentResponse.  # noqa: E501
        :type size: int
        :param view_url: The view_url of this AttachmentResponse.  # noqa: E501
        :type view_url: str
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'resource_subtype': str,
            'connected_to_app': bool,
            'created_at': datetime,
            'download_url': str,
            'host': str,
            'parent': AttachmentResponseAllOfParent,
            'permanent_url': str,
            'size': int,
            'view_url': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'resource_subtype': 'resource_subtype',
            'connected_to_app': 'connected_to_app',
            'created_at': 'created_at',
            'download_url': 'download_url',
            'host': 'host',
            'parent': 'parent',
            'permanent_url': 'permanent_url',
            'size': 'size',
            'view_url': 'view_url'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._resource_subtype = resource_subtype
        self._connected_to_app = connected_to_app
        self._created_at = created_at
        self._download_url = download_url
        self._host = host
        self._parent = parent
        self._permanent_url = permanent_url
        self._size = size
        self._view_url = view_url

    @classmethod
    def from_dict(cls, dikt) -> 'AttachmentResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AttachmentResponse of this AttachmentResponse.  # noqa: E501
        :rtype: AttachmentResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this AttachmentResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this AttachmentResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this AttachmentResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this AttachmentResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this AttachmentResponse.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this AttachmentResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this AttachmentResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this AttachmentResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self) -> str:
        """Gets the name of this AttachmentResponse.

        The name of the file.  # noqa: E501

        :return: The name of this AttachmentResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AttachmentResponse.

        The name of the file.  # noqa: E501

        :param name: The name of this AttachmentResponse.
        :type name: str
        """

        self._name = name

    @property
    def resource_subtype(self) -> str:
        """Gets the resource_subtype of this AttachmentResponse.

        The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.  # noqa: E501

        :return: The resource_subtype of this AttachmentResponse.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype: str):
        """Sets the resource_subtype of this AttachmentResponse.

        The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `onedrive`, `box`, `vimeo`, and `external`.  # noqa: E501

        :param resource_subtype: The resource_subtype of this AttachmentResponse.
        :type resource_subtype: str
        """

        self._resource_subtype = resource_subtype

    @property
    def connected_to_app(self) -> bool:
        """Gets the connected_to_app of this AttachmentResponse.

        Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`.  # noqa: E501

        :return: The connected_to_app of this AttachmentResponse.
        :rtype: bool
        """
        return self._connected_to_app

    @connected_to_app.setter
    def connected_to_app(self, connected_to_app: bool):
        """Sets the connected_to_app of this AttachmentResponse.

        Whether the attachment is connected to the app making the request for the purposes of showing an app components widget. Only present when the `resource_subtype` is `external` or `gdrive`.  # noqa: E501

        :param connected_to_app: The connected_to_app of this AttachmentResponse.
        :type connected_to_app: bool
        """

        self._connected_to_app = connected_to_app

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this AttachmentResponse.

        The time at which this resource was created.  # noqa: E501

        :return: The created_at of this AttachmentResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this AttachmentResponse.

        The time at which this resource was created.  # noqa: E501

        :param created_at: The created_at of this AttachmentResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def download_url(self) -> str:
        """Gets the download_url of this AttachmentResponse.

        The URL containing the content of the attachment. *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.  # noqa: E501

        :return: The download_url of this AttachmentResponse.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url: str):
        """Sets the download_url of this AttachmentResponse.

        The URL containing the content of the attachment. *Note:* May be null if the attachment is hosted by [Box](https://www.box.com/) and will be null if the attachment is a Video Message hosted by [Vimeo](https://vimeo.com/). If present, this URL may only be valid for two minutes from the time of retrieval. You should avoid persisting this URL somewhere and just refresh it on demand to ensure you do not keep stale URLs.  # noqa: E501

        :param download_url: The download_url of this AttachmentResponse.
        :type download_url: str
        """

        self._download_url = download_url

    @property
    def host(self) -> str:
        """Gets the host of this AttachmentResponse.

        The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.  # noqa: E501

        :return: The host of this AttachmentResponse.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host: str):
        """Sets the host of this AttachmentResponse.

        The service hosting the attachment. Valid values are `asana`, `dropbox`, `gdrive`, `box`, and `vimeo`.  # noqa: E501

        :param host: The host of this AttachmentResponse.
        :type host: str
        """

        self._host = host

    @property
    def parent(self) -> AttachmentResponseAllOfParent:
        """Gets the parent of this AttachmentResponse.


        :return: The parent of this AttachmentResponse.
        :rtype: AttachmentResponseAllOfParent
        """
        return self._parent

    @parent.setter
    def parent(self, parent: AttachmentResponseAllOfParent):
        """Sets the parent of this AttachmentResponse.


        :param parent: The parent of this AttachmentResponse.
        :type parent: AttachmentResponseAllOfParent
        """

        self._parent = parent

    @property
    def permanent_url(self) -> str:
        """Gets the permanent_url of this AttachmentResponse.

          # noqa: E501

        :return: The permanent_url of this AttachmentResponse.
        :rtype: str
        """
        return self._permanent_url

    @permanent_url.setter
    def permanent_url(self, permanent_url: str):
        """Sets the permanent_url of this AttachmentResponse.

          # noqa: E501

        :param permanent_url: The permanent_url of this AttachmentResponse.
        :type permanent_url: str
        """

        self._permanent_url = permanent_url

    @property
    def size(self) -> int:
        """Gets the size of this AttachmentResponse.

        The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.  # noqa: E501

        :return: The size of this AttachmentResponse.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this AttachmentResponse.

        The size of the attachment in bytes. Only present when the `resource_subtype` is `asana`.  # noqa: E501

        :param size: The size of this AttachmentResponse.
        :type size: int
        """

        self._size = size

    @property
    def view_url(self) -> str:
        """Gets the view_url of this AttachmentResponse.

        The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.  # noqa: E501

        :return: The view_url of this AttachmentResponse.
        :rtype: str
        """
        return self._view_url

    @view_url.setter
    def view_url(self, view_url: str):
        """Sets the view_url of this AttachmentResponse.

        The URL where the attachment can be viewed, which may be friendlier to users in a browser than just directing them to a raw file. May be null if no view URL exists for the service.  # noqa: E501

        :param view_url: The view_url of this AttachmentResponse.
        :type view_url: str
        """

        self._view_url = view_url
