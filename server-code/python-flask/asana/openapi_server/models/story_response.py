from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.custom_field_compact import CustomFieldCompact
from openapi_server.models.enum_option import EnumOption
from openapi_server.models.like import Like
from openapi_server.models.preview import Preview
from openapi_server.models.project_compact import ProjectCompact
from openapi_server.models.section_compact import SectionCompact
from openapi_server.models.story_compact import StoryCompact
from openapi_server.models.story_response_all_of_new_date_value import StoryResponseAllOfNewDateValue
from openapi_server.models.story_response_all_of_old_date_value import StoryResponseAllOfOldDateValue
from openapi_server.models.story_response_all_of_target import StoryResponseAllOfTarget
from openapi_server.models.story_response_dates import StoryResponseDates
from openapi_server.models.tag_compact import TagCompact
from openapi_server.models.task_compact import TaskCompact
from openapi_server.models.user_compact import UserCompact
from openapi_server import util

from openapi_server.models.custom_field_compact import CustomFieldCompact  # noqa: E501
from openapi_server.models.enum_option import EnumOption  # noqa: E501
from openapi_server.models.like import Like  # noqa: E501
from openapi_server.models.preview import Preview  # noqa: E501
from openapi_server.models.project_compact import ProjectCompact  # noqa: E501
from openapi_server.models.section_compact import SectionCompact  # noqa: E501
from openapi_server.models.story_compact import StoryCompact  # noqa: E501
from openapi_server.models.story_response_all_of_new_date_value import StoryResponseAllOfNewDateValue  # noqa: E501
from openapi_server.models.story_response_all_of_old_date_value import StoryResponseAllOfOldDateValue  # noqa: E501
from openapi_server.models.story_response_all_of_target import StoryResponseAllOfTarget  # noqa: E501
from openapi_server.models.story_response_dates import StoryResponseDates  # noqa: E501
from openapi_server.models.tag_compact import TagCompact  # noqa: E501
from openapi_server.models.task_compact import TaskCompact  # noqa: E501
from openapi_server.models.user_compact import UserCompact  # noqa: E501

class StoryResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, created_at=None, html_text=None, is_pinned=None, resource_subtype=None, sticker_name=None, text=None, assignee=None, created_by=None, custom_field=None, dependency=None, duplicate_of=None, duplicated_from=None, follower=None, hearted=None, hearts=None, is_editable=None, is_edited=None, liked=None, likes=None, new_approval_status=None, new_date_value=None, new_dates=None, new_enum_value=None, new_multi_enum_values=None, new_name=None, new_number_value=None, new_people_value=None, new_resource_subtype=None, new_section=None, new_text_value=None, num_hearts=None, num_likes=None, old_approval_status=None, old_date_value=None, old_dates=None, old_enum_value=None, old_multi_enum_values=None, old_name=None, old_number_value=None, old_people_value=None, old_resource_subtype=None, old_section=None, old_text_value=None, previews=None, project=None, source=None, story=None, tag=None, target=None, task=None, type=None):  # noqa: E501
        """StoryResponse - a model defined in OpenAPI

        :param gid: The gid of this StoryResponse.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this StoryResponse.  # noqa: E501
        :type resource_type: str
        :param created_at: The created_at of this StoryResponse.  # noqa: E501
        :type created_at: datetime
        :param html_text: The html_text of this StoryResponse.  # noqa: E501
        :type html_text: str
        :param is_pinned: The is_pinned of this StoryResponse.  # noqa: E501
        :type is_pinned: bool
        :param resource_subtype: The resource_subtype of this StoryResponse.  # noqa: E501
        :type resource_subtype: str
        :param sticker_name: The sticker_name of this StoryResponse.  # noqa: E501
        :type sticker_name: str
        :param text: The text of this StoryResponse.  # noqa: E501
        :type text: str
        :param assignee: The assignee of this StoryResponse.  # noqa: E501
        :type assignee: UserCompact
        :param created_by: The created_by of this StoryResponse.  # noqa: E501
        :type created_by: UserCompact
        :param custom_field: The custom_field of this StoryResponse.  # noqa: E501
        :type custom_field: CustomFieldCompact
        :param dependency: The dependency of this StoryResponse.  # noqa: E501
        :type dependency: TaskCompact
        :param duplicate_of: The duplicate_of of this StoryResponse.  # noqa: E501
        :type duplicate_of: TaskCompact
        :param duplicated_from: The duplicated_from of this StoryResponse.  # noqa: E501
        :type duplicated_from: TaskCompact
        :param follower: The follower of this StoryResponse.  # noqa: E501
        :type follower: UserCompact
        :param hearted: The hearted of this StoryResponse.  # noqa: E501
        :type hearted: bool
        :param hearts: The hearts of this StoryResponse.  # noqa: E501
        :type hearts: List[Like]
        :param is_editable: The is_editable of this StoryResponse.  # noqa: E501
        :type is_editable: bool
        :param is_edited: The is_edited of this StoryResponse.  # noqa: E501
        :type is_edited: bool
        :param liked: The liked of this StoryResponse.  # noqa: E501
        :type liked: bool
        :param likes: The likes of this StoryResponse.  # noqa: E501
        :type likes: List[Like]
        :param new_approval_status: The new_approval_status of this StoryResponse.  # noqa: E501
        :type new_approval_status: str
        :param new_date_value: The new_date_value of this StoryResponse.  # noqa: E501
        :type new_date_value: StoryResponseAllOfNewDateValue
        :param new_dates: The new_dates of this StoryResponse.  # noqa: E501
        :type new_dates: StoryResponseDates
        :param new_enum_value: The new_enum_value of this StoryResponse.  # noqa: E501
        :type new_enum_value: EnumOption
        :param new_multi_enum_values: The new_multi_enum_values of this StoryResponse.  # noqa: E501
        :type new_multi_enum_values: List[EnumOption]
        :param new_name: The new_name of this StoryResponse.  # noqa: E501
        :type new_name: str
        :param new_number_value: The new_number_value of this StoryResponse.  # noqa: E501
        :type new_number_value: int
        :param new_people_value: The new_people_value of this StoryResponse.  # noqa: E501
        :type new_people_value: List[UserCompact]
        :param new_resource_subtype: The new_resource_subtype of this StoryResponse.  # noqa: E501
        :type new_resource_subtype: str
        :param new_section: The new_section of this StoryResponse.  # noqa: E501
        :type new_section: SectionCompact
        :param new_text_value: The new_text_value of this StoryResponse.  # noqa: E501
        :type new_text_value: str
        :param num_hearts: The num_hearts of this StoryResponse.  # noqa: E501
        :type num_hearts: int
        :param num_likes: The num_likes of this StoryResponse.  # noqa: E501
        :type num_likes: int
        :param old_approval_status: The old_approval_status of this StoryResponse.  # noqa: E501
        :type old_approval_status: str
        :param old_date_value: The old_date_value of this StoryResponse.  # noqa: E501
        :type old_date_value: StoryResponseAllOfOldDateValue
        :param old_dates: The old_dates of this StoryResponse.  # noqa: E501
        :type old_dates: StoryResponseDates
        :param old_enum_value: The old_enum_value of this StoryResponse.  # noqa: E501
        :type old_enum_value: EnumOption
        :param old_multi_enum_values: The old_multi_enum_values of this StoryResponse.  # noqa: E501
        :type old_multi_enum_values: List[EnumOption]
        :param old_name: The old_name of this StoryResponse.  # noqa: E501
        :type old_name: str
        :param old_number_value: The old_number_value of this StoryResponse.  # noqa: E501
        :type old_number_value: int
        :param old_people_value: The old_people_value of this StoryResponse.  # noqa: E501
        :type old_people_value: List[UserCompact]
        :param old_resource_subtype: The old_resource_subtype of this StoryResponse.  # noqa: E501
        :type old_resource_subtype: str
        :param old_section: The old_section of this StoryResponse.  # noqa: E501
        :type old_section: SectionCompact
        :param old_text_value: The old_text_value of this StoryResponse.  # noqa: E501
        :type old_text_value: str
        :param previews: The previews of this StoryResponse.  # noqa: E501
        :type previews: List[Preview]
        :param project: The project of this StoryResponse.  # noqa: E501
        :type project: ProjectCompact
        :param source: The source of this StoryResponse.  # noqa: E501
        :type source: str
        :param story: The story of this StoryResponse.  # noqa: E501
        :type story: StoryCompact
        :param tag: The tag of this StoryResponse.  # noqa: E501
        :type tag: TagCompact
        :param target: The target of this StoryResponse.  # noqa: E501
        :type target: StoryResponseAllOfTarget
        :param task: The task of this StoryResponse.  # noqa: E501
        :type task: TaskCompact
        :param type: The type of this StoryResponse.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'created_at': datetime,
            'html_text': str,
            'is_pinned': bool,
            'resource_subtype': str,
            'sticker_name': str,
            'text': str,
            'assignee': UserCompact,
            'created_by': UserCompact,
            'custom_field': CustomFieldCompact,
            'dependency': TaskCompact,
            'duplicate_of': TaskCompact,
            'duplicated_from': TaskCompact,
            'follower': UserCompact,
            'hearted': bool,
            'hearts': List[Like],
            'is_editable': bool,
            'is_edited': bool,
            'liked': bool,
            'likes': List[Like],
            'new_approval_status': str,
            'new_date_value': StoryResponseAllOfNewDateValue,
            'new_dates': StoryResponseDates,
            'new_enum_value': EnumOption,
            'new_multi_enum_values': List[EnumOption],
            'new_name': str,
            'new_number_value': int,
            'new_people_value': List[UserCompact],
            'new_resource_subtype': str,
            'new_section': SectionCompact,
            'new_text_value': str,
            'num_hearts': int,
            'num_likes': int,
            'old_approval_status': str,
            'old_date_value': StoryResponseAllOfOldDateValue,
            'old_dates': StoryResponseDates,
            'old_enum_value': EnumOption,
            'old_multi_enum_values': List[EnumOption],
            'old_name': str,
            'old_number_value': int,
            'old_people_value': List[UserCompact],
            'old_resource_subtype': str,
            'old_section': SectionCompact,
            'old_text_value': str,
            'previews': List[Preview],
            'project': ProjectCompact,
            'source': str,
            'story': StoryCompact,
            'tag': TagCompact,
            'target': StoryResponseAllOfTarget,
            'task': TaskCompact,
            'type': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'created_at': 'created_at',
            'html_text': 'html_text',
            'is_pinned': 'is_pinned',
            'resource_subtype': 'resource_subtype',
            'sticker_name': 'sticker_name',
            'text': 'text',
            'assignee': 'assignee',
            'created_by': 'created_by',
            'custom_field': 'custom_field',
            'dependency': 'dependency',
            'duplicate_of': 'duplicate_of',
            'duplicated_from': 'duplicated_from',
            'follower': 'follower',
            'hearted': 'hearted',
            'hearts': 'hearts',
            'is_editable': 'is_editable',
            'is_edited': 'is_edited',
            'liked': 'liked',
            'likes': 'likes',
            'new_approval_status': 'new_approval_status',
            'new_date_value': 'new_date_value',
            'new_dates': 'new_dates',
            'new_enum_value': 'new_enum_value',
            'new_multi_enum_values': 'new_multi_enum_values',
            'new_name': 'new_name',
            'new_number_value': 'new_number_value',
            'new_people_value': 'new_people_value',
            'new_resource_subtype': 'new_resource_subtype',
            'new_section': 'new_section',
            'new_text_value': 'new_text_value',
            'num_hearts': 'num_hearts',
            'num_likes': 'num_likes',
            'old_approval_status': 'old_approval_status',
            'old_date_value': 'old_date_value',
            'old_dates': 'old_dates',
            'old_enum_value': 'old_enum_value',
            'old_multi_enum_values': 'old_multi_enum_values',
            'old_name': 'old_name',
            'old_number_value': 'old_number_value',
            'old_people_value': 'old_people_value',
            'old_resource_subtype': 'old_resource_subtype',
            'old_section': 'old_section',
            'old_text_value': 'old_text_value',
            'previews': 'previews',
            'project': 'project',
            'source': 'source',
            'story': 'story',
            'tag': 'tag',
            'target': 'target',
            'task': 'task',
            'type': 'type'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._created_at = created_at
        self._html_text = html_text
        self._is_pinned = is_pinned
        self._resource_subtype = resource_subtype
        self._sticker_name = sticker_name
        self._text = text
        self._assignee = assignee
        self._created_by = created_by
        self._custom_field = custom_field
        self._dependency = dependency
        self._duplicate_of = duplicate_of
        self._duplicated_from = duplicated_from
        self._follower = follower
        self._hearted = hearted
        self._hearts = hearts
        self._is_editable = is_editable
        self._is_edited = is_edited
        self._liked = liked
        self._likes = likes
        self._new_approval_status = new_approval_status
        self._new_date_value = new_date_value
        self._new_dates = new_dates
        self._new_enum_value = new_enum_value
        self._new_multi_enum_values = new_multi_enum_values
        self._new_name = new_name
        self._new_number_value = new_number_value
        self._new_people_value = new_people_value
        self._new_resource_subtype = new_resource_subtype
        self._new_section = new_section
        self._new_text_value = new_text_value
        self._num_hearts = num_hearts
        self._num_likes = num_likes
        self._old_approval_status = old_approval_status
        self._old_date_value = old_date_value
        self._old_dates = old_dates
        self._old_enum_value = old_enum_value
        self._old_multi_enum_values = old_multi_enum_values
        self._old_name = old_name
        self._old_number_value = old_number_value
        self._old_people_value = old_people_value
        self._old_resource_subtype = old_resource_subtype
        self._old_section = old_section
        self._old_text_value = old_text_value
        self._previews = previews
        self._project = project
        self._source = source
        self._story = story
        self._tag = tag
        self._target = target
        self._task = task
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'StoryResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StoryResponse of this StoryResponse.  # noqa: E501
        :rtype: StoryResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this StoryResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this StoryResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this StoryResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this StoryResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this StoryResponse.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this StoryResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this StoryResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this StoryResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def created_at(self) -> datetime:
        """Gets the created_at of this StoryResponse.

        The time at which this resource was created.  # noqa: E501

        :return: The created_at of this StoryResponse.
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: datetime):
        """Sets the created_at of this StoryResponse.

        The time at which this resource was created.  # noqa: E501

        :param created_at: The created_at of this StoryResponse.
        :type created_at: datetime
        """

        self._created_at = created_at

    @property
    def html_text(self) -> str:
        """Gets the html_text of this StoryResponse.

        [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.  # noqa: E501

        :return: The html_text of this StoryResponse.
        :rtype: str
        """
        return self._html_text

    @html_text.setter
    def html_text(self, html_text: str):
        """Sets the html_text of this StoryResponse.

        [Opt In](/docs/input-output-options). HTML formatted text for a comment. This will not include the name of the creator.  # noqa: E501

        :param html_text: The html_text of this StoryResponse.
        :type html_text: str
        """

        self._html_text = html_text

    @property
    def is_pinned(self) -> bool:
        """Gets the is_pinned of this StoryResponse.

        *Conditional*. Whether the story should be pinned on the resource.  # noqa: E501

        :return: The is_pinned of this StoryResponse.
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned: bool):
        """Sets the is_pinned of this StoryResponse.

        *Conditional*. Whether the story should be pinned on the resource.  # noqa: E501

        :param is_pinned: The is_pinned of this StoryResponse.
        :type is_pinned: bool
        """

        self._is_pinned = is_pinned

    @property
    def resource_subtype(self) -> str:
        """Gets the resource_subtype of this StoryResponse.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :return: The resource_subtype of this StoryResponse.
        :rtype: str
        """
        return self._resource_subtype

    @resource_subtype.setter
    def resource_subtype(self, resource_subtype: str):
        """Sets the resource_subtype of this StoryResponse.

        The subtype of this resource. Different subtypes retain many of the same fields and behavior, but may render differently in Asana or represent resources with different semantic meaning.  # noqa: E501

        :param resource_subtype: The resource_subtype of this StoryResponse.
        :type resource_subtype: str
        """

        self._resource_subtype = resource_subtype

    @property
    def sticker_name(self) -> str:
        """Gets the sticker_name of this StoryResponse.

        The name of the sticker in this story. `null` if there is no sticker.  # noqa: E501

        :return: The sticker_name of this StoryResponse.
        :rtype: str
        """
        return self._sticker_name

    @sticker_name.setter
    def sticker_name(self, sticker_name: str):
        """Sets the sticker_name of this StoryResponse.

        The name of the sticker in this story. `null` if there is no sticker.  # noqa: E501

        :param sticker_name: The sticker_name of this StoryResponse.
        :type sticker_name: str
        """
        allowed_values = ["green_checkmark", "people_dancing", "dancing_unicorn", "heart", "party_popper", "people_waving_flags", "splashing_narwhal", "trophy", "yeti_riding_unicorn", "celebrating_people", "determined_climbers", "phoenix_spreading_love"]  # noqa: E501
        if sticker_name not in allowed_values:
            raise ValueError(
                "Invalid value for `sticker_name` ({0}), must be one of {1}"
                .format(sticker_name, allowed_values)
            )

        self._sticker_name = sticker_name

    @property
    def text(self) -> str:
        """Gets the text of this StoryResponse.

        The plain text of the comment to add. Cannot be used with html_text.  # noqa: E501

        :return: The text of this StoryResponse.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this StoryResponse.

        The plain text of the comment to add. Cannot be used with html_text.  # noqa: E501

        :param text: The text of this StoryResponse.
        :type text: str
        """

        self._text = text

    @property
    def assignee(self) -> UserCompact:
        """Gets the assignee of this StoryResponse.


        :return: The assignee of this StoryResponse.
        :rtype: UserCompact
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee: UserCompact):
        """Sets the assignee of this StoryResponse.


        :param assignee: The assignee of this StoryResponse.
        :type assignee: UserCompact
        """

        self._assignee = assignee

    @property
    def created_by(self) -> UserCompact:
        """Gets the created_by of this StoryResponse.


        :return: The created_by of this StoryResponse.
        :rtype: UserCompact
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by: UserCompact):
        """Sets the created_by of this StoryResponse.


        :param created_by: The created_by of this StoryResponse.
        :type created_by: UserCompact
        """

        self._created_by = created_by

    @property
    def custom_field(self) -> CustomFieldCompact:
        """Gets the custom_field of this StoryResponse.


        :return: The custom_field of this StoryResponse.
        :rtype: CustomFieldCompact
        """
        return self._custom_field

    @custom_field.setter
    def custom_field(self, custom_field: CustomFieldCompact):
        """Sets the custom_field of this StoryResponse.


        :param custom_field: The custom_field of this StoryResponse.
        :type custom_field: CustomFieldCompact
        """

        self._custom_field = custom_field

    @property
    def dependency(self) -> TaskCompact:
        """Gets the dependency of this StoryResponse.


        :return: The dependency of this StoryResponse.
        :rtype: TaskCompact
        """
        return self._dependency

    @dependency.setter
    def dependency(self, dependency: TaskCompact):
        """Sets the dependency of this StoryResponse.


        :param dependency: The dependency of this StoryResponse.
        :type dependency: TaskCompact
        """

        self._dependency = dependency

    @property
    def duplicate_of(self) -> TaskCompact:
        """Gets the duplicate_of of this StoryResponse.


        :return: The duplicate_of of this StoryResponse.
        :rtype: TaskCompact
        """
        return self._duplicate_of

    @duplicate_of.setter
    def duplicate_of(self, duplicate_of: TaskCompact):
        """Sets the duplicate_of of this StoryResponse.


        :param duplicate_of: The duplicate_of of this StoryResponse.
        :type duplicate_of: TaskCompact
        """

        self._duplicate_of = duplicate_of

    @property
    def duplicated_from(self) -> TaskCompact:
        """Gets the duplicated_from of this StoryResponse.


        :return: The duplicated_from of this StoryResponse.
        :rtype: TaskCompact
        """
        return self._duplicated_from

    @duplicated_from.setter
    def duplicated_from(self, duplicated_from: TaskCompact):
        """Sets the duplicated_from of this StoryResponse.


        :param duplicated_from: The duplicated_from of this StoryResponse.
        :type duplicated_from: TaskCompact
        """

        self._duplicated_from = duplicated_from

    @property
    def follower(self) -> UserCompact:
        """Gets the follower of this StoryResponse.


        :return: The follower of this StoryResponse.
        :rtype: UserCompact
        """
        return self._follower

    @follower.setter
    def follower(self, follower: UserCompact):
        """Sets the follower of this StoryResponse.


        :param follower: The follower of this StoryResponse.
        :type follower: UserCompact
        """

        self._follower = follower

    @property
    def hearted(self) -> bool:
        """Gets the hearted of this StoryResponse.

        *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.  # noqa: E501

        :return: The hearted of this StoryResponse.
        :rtype: bool
        """
        return self._hearted

    @hearted.setter
    def hearted(self, hearted: bool):
        """Sets the hearted of this StoryResponse.

        *Deprecated - please use likes instead* *Conditional*. True if the story is hearted by the authorized user, false if not.  # noqa: E501

        :param hearted: The hearted of this StoryResponse.
        :type hearted: bool
        """

        self._hearted = hearted

    @property
    def hearts(self) -> List[Like]:
        """Gets the hearts of this StoryResponse.

        *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.  # noqa: E501

        :return: The hearts of this StoryResponse.
        :rtype: List[Like]
        """
        return self._hearts

    @hearts.setter
    def hearts(self, hearts: List[Like]):
        """Sets the hearts of this StoryResponse.

        *Deprecated - please use likes instead*  *Conditional*. Array of likes for users who have hearted this story.  # noqa: E501

        :param hearts: The hearts of this StoryResponse.
        :type hearts: List[Like]
        """

        self._hearts = hearts

    @property
    def is_editable(self) -> bool:
        """Gets the is_editable of this StoryResponse.

        *Conditional*. Whether the text of the story can be edited after creation.  # noqa: E501

        :return: The is_editable of this StoryResponse.
        :rtype: bool
        """
        return self._is_editable

    @is_editable.setter
    def is_editable(self, is_editable: bool):
        """Sets the is_editable of this StoryResponse.

        *Conditional*. Whether the text of the story can be edited after creation.  # noqa: E501

        :param is_editable: The is_editable of this StoryResponse.
        :type is_editable: bool
        """

        self._is_editable = is_editable

    @property
    def is_edited(self) -> bool:
        """Gets the is_edited of this StoryResponse.

        *Conditional*. Whether the text of the story has been edited after creation.  # noqa: E501

        :return: The is_edited of this StoryResponse.
        :rtype: bool
        """
        return self._is_edited

    @is_edited.setter
    def is_edited(self, is_edited: bool):
        """Sets the is_edited of this StoryResponse.

        *Conditional*. Whether the text of the story has been edited after creation.  # noqa: E501

        :param is_edited: The is_edited of this StoryResponse.
        :type is_edited: bool
        """

        self._is_edited = is_edited

    @property
    def liked(self) -> bool:
        """Gets the liked of this StoryResponse.

        *Conditional*. True if the story is liked by the authorized user, false if not.  # noqa: E501

        :return: The liked of this StoryResponse.
        :rtype: bool
        """
        return self._liked

    @liked.setter
    def liked(self, liked: bool):
        """Sets the liked of this StoryResponse.

        *Conditional*. True if the story is liked by the authorized user, false if not.  # noqa: E501

        :param liked: The liked of this StoryResponse.
        :type liked: bool
        """

        self._liked = liked

    @property
    def likes(self) -> List[Like]:
        """Gets the likes of this StoryResponse.

        *Conditional*. Array of likes for users who have liked this story.  # noqa: E501

        :return: The likes of this StoryResponse.
        :rtype: List[Like]
        """
        return self._likes

    @likes.setter
    def likes(self, likes: List[Like]):
        """Sets the likes of this StoryResponse.

        *Conditional*. Array of likes for users who have liked this story.  # noqa: E501

        :param likes: The likes of this StoryResponse.
        :type likes: List[Like]
        """

        self._likes = likes

    @property
    def new_approval_status(self) -> str:
        """Gets the new_approval_status of this StoryResponse.

        *Conditional*. The new value of approval status.  # noqa: E501

        :return: The new_approval_status of this StoryResponse.
        :rtype: str
        """
        return self._new_approval_status

    @new_approval_status.setter
    def new_approval_status(self, new_approval_status: str):
        """Sets the new_approval_status of this StoryResponse.

        *Conditional*. The new value of approval status.  # noqa: E501

        :param new_approval_status: The new_approval_status of this StoryResponse.
        :type new_approval_status: str
        """

        self._new_approval_status = new_approval_status

    @property
    def new_date_value(self) -> StoryResponseAllOfNewDateValue:
        """Gets the new_date_value of this StoryResponse.


        :return: The new_date_value of this StoryResponse.
        :rtype: StoryResponseAllOfNewDateValue
        """
        return self._new_date_value

    @new_date_value.setter
    def new_date_value(self, new_date_value: StoryResponseAllOfNewDateValue):
        """Sets the new_date_value of this StoryResponse.


        :param new_date_value: The new_date_value of this StoryResponse.
        :type new_date_value: StoryResponseAllOfNewDateValue
        """

        self._new_date_value = new_date_value

    @property
    def new_dates(self) -> StoryResponseDates:
        """Gets the new_dates of this StoryResponse.


        :return: The new_dates of this StoryResponse.
        :rtype: StoryResponseDates
        """
        return self._new_dates

    @new_dates.setter
    def new_dates(self, new_dates: StoryResponseDates):
        """Sets the new_dates of this StoryResponse.


        :param new_dates: The new_dates of this StoryResponse.
        :type new_dates: StoryResponseDates
        """

        self._new_dates = new_dates

    @property
    def new_enum_value(self) -> EnumOption:
        """Gets the new_enum_value of this StoryResponse.


        :return: The new_enum_value of this StoryResponse.
        :rtype: EnumOption
        """
        return self._new_enum_value

    @new_enum_value.setter
    def new_enum_value(self, new_enum_value: EnumOption):
        """Sets the new_enum_value of this StoryResponse.


        :param new_enum_value: The new_enum_value of this StoryResponse.
        :type new_enum_value: EnumOption
        """

        self._new_enum_value = new_enum_value

    @property
    def new_multi_enum_values(self) -> List[EnumOption]:
        """Gets the new_multi_enum_values of this StoryResponse.

        *Conditional*. The new value of a multi-enum custom field story.  # noqa: E501

        :return: The new_multi_enum_values of this StoryResponse.
        :rtype: List[EnumOption]
        """
        return self._new_multi_enum_values

    @new_multi_enum_values.setter
    def new_multi_enum_values(self, new_multi_enum_values: List[EnumOption]):
        """Sets the new_multi_enum_values of this StoryResponse.

        *Conditional*. The new value of a multi-enum custom field story.  # noqa: E501

        :param new_multi_enum_values: The new_multi_enum_values of this StoryResponse.
        :type new_multi_enum_values: List[EnumOption]
        """

        self._new_multi_enum_values = new_multi_enum_values

    @property
    def new_name(self) -> str:
        """Gets the new_name of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The new_name of this StoryResponse.
        :rtype: str
        """
        return self._new_name

    @new_name.setter
    def new_name(self, new_name: str):
        """Sets the new_name of this StoryResponse.

        *Conditional*  # noqa: E501

        :param new_name: The new_name of this StoryResponse.
        :type new_name: str
        """

        self._new_name = new_name

    @property
    def new_number_value(self) -> int:
        """Gets the new_number_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The new_number_value of this StoryResponse.
        :rtype: int
        """
        return self._new_number_value

    @new_number_value.setter
    def new_number_value(self, new_number_value: int):
        """Sets the new_number_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :param new_number_value: The new_number_value of this StoryResponse.
        :type new_number_value: int
        """

        self._new_number_value = new_number_value

    @property
    def new_people_value(self) -> List[UserCompact]:
        """Gets the new_people_value of this StoryResponse.

        *Conditional*. The new value of a people custom field story.  # noqa: E501

        :return: The new_people_value of this StoryResponse.
        :rtype: List[UserCompact]
        """
        return self._new_people_value

    @new_people_value.setter
    def new_people_value(self, new_people_value: List[UserCompact]):
        """Sets the new_people_value of this StoryResponse.

        *Conditional*. The new value of a people custom field story.  # noqa: E501

        :param new_people_value: The new_people_value of this StoryResponse.
        :type new_people_value: List[UserCompact]
        """

        self._new_people_value = new_people_value

    @property
    def new_resource_subtype(self) -> str:
        """Gets the new_resource_subtype of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The new_resource_subtype of this StoryResponse.
        :rtype: str
        """
        return self._new_resource_subtype

    @new_resource_subtype.setter
    def new_resource_subtype(self, new_resource_subtype: str):
        """Sets the new_resource_subtype of this StoryResponse.

        *Conditional*  # noqa: E501

        :param new_resource_subtype: The new_resource_subtype of this StoryResponse.
        :type new_resource_subtype: str
        """

        self._new_resource_subtype = new_resource_subtype

    @property
    def new_section(self) -> SectionCompact:
        """Gets the new_section of this StoryResponse.


        :return: The new_section of this StoryResponse.
        :rtype: SectionCompact
        """
        return self._new_section

    @new_section.setter
    def new_section(self, new_section: SectionCompact):
        """Sets the new_section of this StoryResponse.


        :param new_section: The new_section of this StoryResponse.
        :type new_section: SectionCompact
        """

        self._new_section = new_section

    @property
    def new_text_value(self) -> str:
        """Gets the new_text_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The new_text_value of this StoryResponse.
        :rtype: str
        """
        return self._new_text_value

    @new_text_value.setter
    def new_text_value(self, new_text_value: str):
        """Sets the new_text_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :param new_text_value: The new_text_value of this StoryResponse.
        :type new_text_value: str
        """

        self._new_text_value = new_text_value

    @property
    def num_hearts(self) -> int:
        """Gets the num_hearts of this StoryResponse.

        *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.  # noqa: E501

        :return: The num_hearts of this StoryResponse.
        :rtype: int
        """
        return self._num_hearts

    @num_hearts.setter
    def num_hearts(self, num_hearts: int):
        """Sets the num_hearts of this StoryResponse.

        *Deprecated - please use likes instead*  *Conditional*. The number of users who have hearted this story.  # noqa: E501

        :param num_hearts: The num_hearts of this StoryResponse.
        :type num_hearts: int
        """

        self._num_hearts = num_hearts

    @property
    def num_likes(self) -> int:
        """Gets the num_likes of this StoryResponse.

        *Conditional*. The number of users who have liked this story.  # noqa: E501

        :return: The num_likes of this StoryResponse.
        :rtype: int
        """
        return self._num_likes

    @num_likes.setter
    def num_likes(self, num_likes: int):
        """Sets the num_likes of this StoryResponse.

        *Conditional*. The number of users who have liked this story.  # noqa: E501

        :param num_likes: The num_likes of this StoryResponse.
        :type num_likes: int
        """

        self._num_likes = num_likes

    @property
    def old_approval_status(self) -> str:
        """Gets the old_approval_status of this StoryResponse.

        *Conditional*. The old value of approval status.  # noqa: E501

        :return: The old_approval_status of this StoryResponse.
        :rtype: str
        """
        return self._old_approval_status

    @old_approval_status.setter
    def old_approval_status(self, old_approval_status: str):
        """Sets the old_approval_status of this StoryResponse.

        *Conditional*. The old value of approval status.  # noqa: E501

        :param old_approval_status: The old_approval_status of this StoryResponse.
        :type old_approval_status: str
        """

        self._old_approval_status = old_approval_status

    @property
    def old_date_value(self) -> StoryResponseAllOfOldDateValue:
        """Gets the old_date_value of this StoryResponse.


        :return: The old_date_value of this StoryResponse.
        :rtype: StoryResponseAllOfOldDateValue
        """
        return self._old_date_value

    @old_date_value.setter
    def old_date_value(self, old_date_value: StoryResponseAllOfOldDateValue):
        """Sets the old_date_value of this StoryResponse.


        :param old_date_value: The old_date_value of this StoryResponse.
        :type old_date_value: StoryResponseAllOfOldDateValue
        """

        self._old_date_value = old_date_value

    @property
    def old_dates(self) -> StoryResponseDates:
        """Gets the old_dates of this StoryResponse.


        :return: The old_dates of this StoryResponse.
        :rtype: StoryResponseDates
        """
        return self._old_dates

    @old_dates.setter
    def old_dates(self, old_dates: StoryResponseDates):
        """Sets the old_dates of this StoryResponse.


        :param old_dates: The old_dates of this StoryResponse.
        :type old_dates: StoryResponseDates
        """

        self._old_dates = old_dates

    @property
    def old_enum_value(self) -> EnumOption:
        """Gets the old_enum_value of this StoryResponse.


        :return: The old_enum_value of this StoryResponse.
        :rtype: EnumOption
        """
        return self._old_enum_value

    @old_enum_value.setter
    def old_enum_value(self, old_enum_value: EnumOption):
        """Sets the old_enum_value of this StoryResponse.


        :param old_enum_value: The old_enum_value of this StoryResponse.
        :type old_enum_value: EnumOption
        """

        self._old_enum_value = old_enum_value

    @property
    def old_multi_enum_values(self) -> List[EnumOption]:
        """Gets the old_multi_enum_values of this StoryResponse.

        *Conditional*. The old value of a multi-enum custom field story.  # noqa: E501

        :return: The old_multi_enum_values of this StoryResponse.
        :rtype: List[EnumOption]
        """
        return self._old_multi_enum_values

    @old_multi_enum_values.setter
    def old_multi_enum_values(self, old_multi_enum_values: List[EnumOption]):
        """Sets the old_multi_enum_values of this StoryResponse.

        *Conditional*. The old value of a multi-enum custom field story.  # noqa: E501

        :param old_multi_enum_values: The old_multi_enum_values of this StoryResponse.
        :type old_multi_enum_values: List[EnumOption]
        """

        self._old_multi_enum_values = old_multi_enum_values

    @property
    def old_name(self) -> str:
        """Gets the old_name of this StoryResponse.

        *Conditional*'  # noqa: E501

        :return: The old_name of this StoryResponse.
        :rtype: str
        """
        return self._old_name

    @old_name.setter
    def old_name(self, old_name: str):
        """Sets the old_name of this StoryResponse.

        *Conditional*'  # noqa: E501

        :param old_name: The old_name of this StoryResponse.
        :type old_name: str
        """

        self._old_name = old_name

    @property
    def old_number_value(self) -> int:
        """Gets the old_number_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The old_number_value of this StoryResponse.
        :rtype: int
        """
        return self._old_number_value

    @old_number_value.setter
    def old_number_value(self, old_number_value: int):
        """Sets the old_number_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :param old_number_value: The old_number_value of this StoryResponse.
        :type old_number_value: int
        """

        self._old_number_value = old_number_value

    @property
    def old_people_value(self) -> List[UserCompact]:
        """Gets the old_people_value of this StoryResponse.

        *Conditional*. The old value of a people custom field story.  # noqa: E501

        :return: The old_people_value of this StoryResponse.
        :rtype: List[UserCompact]
        """
        return self._old_people_value

    @old_people_value.setter
    def old_people_value(self, old_people_value: List[UserCompact]):
        """Sets the old_people_value of this StoryResponse.

        *Conditional*. The old value of a people custom field story.  # noqa: E501

        :param old_people_value: The old_people_value of this StoryResponse.
        :type old_people_value: List[UserCompact]
        """

        self._old_people_value = old_people_value

    @property
    def old_resource_subtype(self) -> str:
        """Gets the old_resource_subtype of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The old_resource_subtype of this StoryResponse.
        :rtype: str
        """
        return self._old_resource_subtype

    @old_resource_subtype.setter
    def old_resource_subtype(self, old_resource_subtype: str):
        """Sets the old_resource_subtype of this StoryResponse.

        *Conditional*  # noqa: E501

        :param old_resource_subtype: The old_resource_subtype of this StoryResponse.
        :type old_resource_subtype: str
        """

        self._old_resource_subtype = old_resource_subtype

    @property
    def old_section(self) -> SectionCompact:
        """Gets the old_section of this StoryResponse.


        :return: The old_section of this StoryResponse.
        :rtype: SectionCompact
        """
        return self._old_section

    @old_section.setter
    def old_section(self, old_section: SectionCompact):
        """Sets the old_section of this StoryResponse.


        :param old_section: The old_section of this StoryResponse.
        :type old_section: SectionCompact
        """

        self._old_section = old_section

    @property
    def old_text_value(self) -> str:
        """Gets the old_text_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :return: The old_text_value of this StoryResponse.
        :rtype: str
        """
        return self._old_text_value

    @old_text_value.setter
    def old_text_value(self, old_text_value: str):
        """Sets the old_text_value of this StoryResponse.

        *Conditional*  # noqa: E501

        :param old_text_value: The old_text_value of this StoryResponse.
        :type old_text_value: str
        """

        self._old_text_value = old_text_value

    @property
    def previews(self) -> List[Preview]:
        """Gets the previews of this StoryResponse.

        *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*  # noqa: E501

        :return: The previews of this StoryResponse.
        :rtype: List[Preview]
        """
        return self._previews

    @previews.setter
    def previews(self, previews: List[Preview]):
        """Sets the previews of this StoryResponse.

        *Conditional*. A collection of previews to be displayed in the story.  *Note: This property only exists for comment stories.*  # noqa: E501

        :param previews: The previews of this StoryResponse.
        :type previews: List[Preview]
        """

        self._previews = previews

    @property
    def project(self) -> ProjectCompact:
        """Gets the project of this StoryResponse.


        :return: The project of this StoryResponse.
        :rtype: ProjectCompact
        """
        return self._project

    @project.setter
    def project(self, project: ProjectCompact):
        """Sets the project of this StoryResponse.


        :param project: The project of this StoryResponse.
        :type project: ProjectCompact
        """

        self._project = project

    @property
    def source(self) -> str:
        """Gets the source of this StoryResponse.

        The component of the Asana product the user used to trigger the story.  # noqa: E501

        :return: The source of this StoryResponse.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this StoryResponse.

        The component of the Asana product the user used to trigger the story.  # noqa: E501

        :param source: The source of this StoryResponse.
        :type source: str
        """
        allowed_values = ["web", "email", "mobile", "api", "unknown"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def story(self) -> StoryCompact:
        """Gets the story of this StoryResponse.


        :return: The story of this StoryResponse.
        :rtype: StoryCompact
        """
        return self._story

    @story.setter
    def story(self, story: StoryCompact):
        """Sets the story of this StoryResponse.


        :param story: The story of this StoryResponse.
        :type story: StoryCompact
        """

        self._story = story

    @property
    def tag(self) -> TagCompact:
        """Gets the tag of this StoryResponse.


        :return: The tag of this StoryResponse.
        :rtype: TagCompact
        """
        return self._tag

    @tag.setter
    def tag(self, tag: TagCompact):
        """Sets the tag of this StoryResponse.


        :param tag: The tag of this StoryResponse.
        :type tag: TagCompact
        """

        self._tag = tag

    @property
    def target(self) -> StoryResponseAllOfTarget:
        """Gets the target of this StoryResponse.


        :return: The target of this StoryResponse.
        :rtype: StoryResponseAllOfTarget
        """
        return self._target

    @target.setter
    def target(self, target: StoryResponseAllOfTarget):
        """Sets the target of this StoryResponse.


        :param target: The target of this StoryResponse.
        :type target: StoryResponseAllOfTarget
        """

        self._target = target

    @property
    def task(self) -> TaskCompact:
        """Gets the task of this StoryResponse.


        :return: The task of this StoryResponse.
        :rtype: TaskCompact
        """
        return self._task

    @task.setter
    def task(self, task: TaskCompact):
        """Sets the task of this StoryResponse.


        :param task: The task of this StoryResponse.
        :type task: TaskCompact
        """

        self._task = task

    @property
    def type(self) -> str:
        """Gets the type of this StoryResponse.


        :return: The type of this StoryResponse.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this StoryResponse.


        :param type: The type of this StoryResponse.
        :type type: str
        """
        allowed_values = ["comment", "system"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
