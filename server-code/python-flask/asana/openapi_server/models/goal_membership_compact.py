from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user_compact import UserCompact
from openapi_server import util

from openapi_server.models.user_compact import UserCompact  # noqa: E501

class GoalMembershipCompact(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, is_commenter=None, is_editor=None, member=None):  # noqa: E501
        """GoalMembershipCompact - a model defined in OpenAPI

        :param gid: The gid of this GoalMembershipCompact.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this GoalMembershipCompact.  # noqa: E501
        :type resource_type: str
        :param is_commenter: The is_commenter of this GoalMembershipCompact.  # noqa: E501
        :type is_commenter: bool
        :param is_editor: The is_editor of this GoalMembershipCompact.  # noqa: E501
        :type is_editor: bool
        :param member: The member of this GoalMembershipCompact.  # noqa: E501
        :type member: UserCompact
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'is_commenter': bool,
            'is_editor': bool,
            'member': UserCompact
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'is_commenter': 'is_commenter',
            'is_editor': 'is_editor',
            'member': 'member'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._is_commenter = is_commenter
        self._is_editor = is_editor
        self._member = member

    @classmethod
    def from_dict(cls, dikt) -> 'GoalMembershipCompact':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GoalMembershipCompact of this GoalMembershipCompact.  # noqa: E501
        :rtype: GoalMembershipCompact
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this GoalMembershipCompact.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this GoalMembershipCompact.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this GoalMembershipCompact.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this GoalMembershipCompact.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this GoalMembershipCompact.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this GoalMembershipCompact.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this GoalMembershipCompact.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this GoalMembershipCompact.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def is_commenter(self) -> bool:
        """Gets the is_commenter of this GoalMembershipCompact.

        Describes if the user is comment only in goal.  # noqa: E501

        :return: The is_commenter of this GoalMembershipCompact.
        :rtype: bool
        """
        return self._is_commenter

    @is_commenter.setter
    def is_commenter(self, is_commenter: bool):
        """Sets the is_commenter of this GoalMembershipCompact.

        Describes if the user is comment only in goal.  # noqa: E501

        :param is_commenter: The is_commenter of this GoalMembershipCompact.
        :type is_commenter: bool
        """

        self._is_commenter = is_commenter

    @property
    def is_editor(self) -> bool:
        """Gets the is_editor of this GoalMembershipCompact.

        Describes if the user is editor in goal.  # noqa: E501

        :return: The is_editor of this GoalMembershipCompact.
        :rtype: bool
        """
        return self._is_editor

    @is_editor.setter
    def is_editor(self, is_editor: bool):
        """Sets the is_editor of this GoalMembershipCompact.

        Describes if the user is editor in goal.  # noqa: E501

        :param is_editor: The is_editor of this GoalMembershipCompact.
        :type is_editor: bool
        """

        self._is_editor = is_editor

    @property
    def member(self) -> UserCompact:
        """Gets the member of this GoalMembershipCompact.


        :return: The member of this GoalMembershipCompact.
        :rtype: UserCompact
        """
        return self._member

    @member.setter
    def member(self, member: UserCompact):
        """Sets the member of this GoalMembershipCompact.


        :param member: The member of this GoalMembershipCompact.
        :type member: UserCompact
        """

        self._member = member
