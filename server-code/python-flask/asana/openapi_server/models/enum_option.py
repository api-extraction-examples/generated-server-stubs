from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EnumOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, color=None, enabled=None, name=None):  # noqa: E501
        """EnumOption - a model defined in OpenAPI

        :param gid: The gid of this EnumOption.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this EnumOption.  # noqa: E501
        :type resource_type: str
        :param color: The color of this EnumOption.  # noqa: E501
        :type color: str
        :param enabled: The enabled of this EnumOption.  # noqa: E501
        :type enabled: bool
        :param name: The name of this EnumOption.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'color': str,
            'enabled': bool,
            'name': str
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'color': 'color',
            'enabled': 'enabled',
            'name': 'name'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._color = color
        self._enabled = enabled
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'EnumOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnumOption of this EnumOption.  # noqa: E501
        :rtype: EnumOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this EnumOption.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this EnumOption.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this EnumOption.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this EnumOption.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this EnumOption.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this EnumOption.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this EnumOption.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this EnumOption.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def color(self) -> str:
        """Gets the color of this EnumOption.

        The color of the enum option. Defaults to ‘none’.  # noqa: E501

        :return: The color of this EnumOption.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this EnumOption.

        The color of the enum option. Defaults to ‘none’.  # noqa: E501

        :param color: The color of this EnumOption.
        :type color: str
        """

        self._color = color

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this EnumOption.

        Whether or not the enum option is a selectable value for the custom field.  # noqa: E501

        :return: The enabled of this EnumOption.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this EnumOption.

        Whether or not the enum option is a selectable value for the custom field.  # noqa: E501

        :param enabled: The enabled of this EnumOption.
        :type enabled: bool
        """

        self._enabled = enabled

    @property
    def name(self) -> str:
        """Gets the name of this EnumOption.

        The name of the enum option.  # noqa: E501

        :return: The name of this EnumOption.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EnumOption.

        The name of the enum option.  # noqa: E501

        :param name: The name of this EnumOption.
        :type name: str
        """

        self._name = name
