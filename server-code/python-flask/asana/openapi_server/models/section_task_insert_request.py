from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SectionTaskInsertRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, insert_after=None, insert_before=None, task=None):  # noqa: E501
        """SectionTaskInsertRequest - a model defined in OpenAPI

        :param insert_after: The insert_after of this SectionTaskInsertRequest.  # noqa: E501
        :type insert_after: str
        :param insert_before: The insert_before of this SectionTaskInsertRequest.  # noqa: E501
        :type insert_before: str
        :param task: The task of this SectionTaskInsertRequest.  # noqa: E501
        :type task: str
        """
        self.openapi_types = {
            'insert_after': str,
            'insert_before': str,
            'task': str
        }

        self.attribute_map = {
            'insert_after': 'insert_after',
            'insert_before': 'insert_before',
            'task': 'task'
        }

        self._insert_after = insert_after
        self._insert_before = insert_before
        self._task = task

    @classmethod
    def from_dict(cls, dikt) -> 'SectionTaskInsertRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SectionTaskInsertRequest of this SectionTaskInsertRequest.  # noqa: E501
        :rtype: SectionTaskInsertRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def insert_after(self) -> str:
        """Gets the insert_after of this SectionTaskInsertRequest.

        An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.  # noqa: E501

        :return: The insert_after of this SectionTaskInsertRequest.
        :rtype: str
        """
        return self._insert_after

    @insert_after.setter
    def insert_after(self, insert_after: str):
        """Sets the insert_after of this SectionTaskInsertRequest.

        An existing task within this section after which the added task should be inserted. Cannot be provided together with insert_before.  # noqa: E501

        :param insert_after: The insert_after of this SectionTaskInsertRequest.
        :type insert_after: str
        """

        self._insert_after = insert_after

    @property
    def insert_before(self) -> str:
        """Gets the insert_before of this SectionTaskInsertRequest.

        An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.  # noqa: E501

        :return: The insert_before of this SectionTaskInsertRequest.
        :rtype: str
        """
        return self._insert_before

    @insert_before.setter
    def insert_before(self, insert_before: str):
        """Sets the insert_before of this SectionTaskInsertRequest.

        An existing task within this section before which the added task should be inserted. Cannot be provided together with insert_after.  # noqa: E501

        :param insert_before: The insert_before of this SectionTaskInsertRequest.
        :type insert_before: str
        """

        self._insert_before = insert_before

    @property
    def task(self) -> str:
        """Gets the task of this SectionTaskInsertRequest.

        The task to add to this section.  # noqa: E501

        :return: The task of this SectionTaskInsertRequest.
        :rtype: str
        """
        return self._task

    @task.setter
    def task(self, task: str):
        """Sets the task of this SectionTaskInsertRequest.

        The task to add to this section.  # noqa: E501

        :param task: The task of this SectionTaskInsertRequest.
        :type task: str
        """
        if task is None:
            raise ValueError("Invalid value for `task`, must not be `None`")  # noqa: E501

        self._task = task
