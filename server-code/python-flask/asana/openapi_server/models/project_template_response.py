from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.date_variable_compact import DateVariableCompact
from openapi_server.models.project_template_base_all_of_owner import ProjectTemplateBaseAllOfOwner
from openapi_server.models.project_template_base_all_of_team import ProjectTemplateBaseAllOfTeam
from openapi_server import util

from openapi_server.models.date_variable_compact import DateVariableCompact  # noqa: E501
from openapi_server.models.project_template_base_all_of_owner import ProjectTemplateBaseAllOfOwner  # noqa: E501
from openapi_server.models.project_template_base_all_of_team import ProjectTemplateBaseAllOfTeam  # noqa: E501

class ProjectTemplateResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, gid=None, resource_type=None, name=None, color=None, description=None, html_description=None, owner=None, public=None, requested_dates=None, team=None):  # noqa: E501
        """ProjectTemplateResponse - a model defined in OpenAPI

        :param gid: The gid of this ProjectTemplateResponse.  # noqa: E501
        :type gid: str
        :param resource_type: The resource_type of this ProjectTemplateResponse.  # noqa: E501
        :type resource_type: str
        :param name: The name of this ProjectTemplateResponse.  # noqa: E501
        :type name: str
        :param color: The color of this ProjectTemplateResponse.  # noqa: E501
        :type color: str
        :param description: The description of this ProjectTemplateResponse.  # noqa: E501
        :type description: str
        :param html_description: The html_description of this ProjectTemplateResponse.  # noqa: E501
        :type html_description: str
        :param owner: The owner of this ProjectTemplateResponse.  # noqa: E501
        :type owner: ProjectTemplateBaseAllOfOwner
        :param public: The public of this ProjectTemplateResponse.  # noqa: E501
        :type public: bool
        :param requested_dates: The requested_dates of this ProjectTemplateResponse.  # noqa: E501
        :type requested_dates: List[DateVariableCompact]
        :param team: The team of this ProjectTemplateResponse.  # noqa: E501
        :type team: ProjectTemplateBaseAllOfTeam
        """
        self.openapi_types = {
            'gid': str,
            'resource_type': str,
            'name': str,
            'color': str,
            'description': str,
            'html_description': str,
            'owner': ProjectTemplateBaseAllOfOwner,
            'public': bool,
            'requested_dates': List[DateVariableCompact],
            'team': ProjectTemplateBaseAllOfTeam
        }

        self.attribute_map = {
            'gid': 'gid',
            'resource_type': 'resource_type',
            'name': 'name',
            'color': 'color',
            'description': 'description',
            'html_description': 'html_description',
            'owner': 'owner',
            'public': 'public',
            'requested_dates': 'requested_dates',
            'team': 'team'
        }

        self._gid = gid
        self._resource_type = resource_type
        self._name = name
        self._color = color
        self._description = description
        self._html_description = html_description
        self._owner = owner
        self._public = public
        self._requested_dates = requested_dates
        self._team = team

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectTemplateResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectTemplateResponse of this ProjectTemplateResponse.  # noqa: E501
        :rtype: ProjectTemplateResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def gid(self) -> str:
        """Gets the gid of this ProjectTemplateResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :return: The gid of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._gid

    @gid.setter
    def gid(self, gid: str):
        """Sets the gid of this ProjectTemplateResponse.

        Globally unique identifier of the resource, as a string.  # noqa: E501

        :param gid: The gid of this ProjectTemplateResponse.
        :type gid: str
        """

        self._gid = gid

    @property
    def resource_type(self) -> str:
        """Gets the resource_type of this ProjectTemplateResponse.

        The base type of this resource.  # noqa: E501

        :return: The resource_type of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type: str):
        """Sets the resource_type of this ProjectTemplateResponse.

        The base type of this resource.  # noqa: E501

        :param resource_type: The resource_type of this ProjectTemplateResponse.
        :type resource_type: str
        """

        self._resource_type = resource_type

    @property
    def name(self) -> str:
        """Gets the name of this ProjectTemplateResponse.

        Name of the project template.  # noqa: E501

        :return: The name of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProjectTemplateResponse.

        Name of the project template.  # noqa: E501

        :param name: The name of this ProjectTemplateResponse.
        :type name: str
        """

        self._name = name

    @property
    def color(self) -> str:
        """Gets the color of this ProjectTemplateResponse.

        Color of the project template.  # noqa: E501

        :return: The color of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this ProjectTemplateResponse.

        Color of the project template.  # noqa: E501

        :param color: The color of this ProjectTemplateResponse.
        :type color: str
        """
        allowed_values = [None,"dark-pink", "dark-green", "dark-blue", "dark-red", "dark-teal", "dark-brown", "dark-orange", "dark-purple", "dark-warm-gray", "light-pink", "light-green", "light-blue", "light-red", "light-teal", "light-brown", "light-orange", "light-purple", "light-warm-gray"]  # noqa: E501
        if color not in allowed_values:
            raise ValueError(
                "Invalid value for `color` ({0}), must be one of {1}"
                .format(color, allowed_values)
            )

        self._color = color

    @property
    def description(self) -> str:
        """Gets the description of this ProjectTemplateResponse.

        Free-form textual information associated with the project template  # noqa: E501

        :return: The description of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this ProjectTemplateResponse.

        Free-form textual information associated with the project template  # noqa: E501

        :param description: The description of this ProjectTemplateResponse.
        :type description: str
        """

        self._description = description

    @property
    def html_description(self) -> str:
        """Gets the html_description of this ProjectTemplateResponse.

        The description of the project template with formatting as HTML.  # noqa: E501

        :return: The html_description of this ProjectTemplateResponse.
        :rtype: str
        """
        return self._html_description

    @html_description.setter
    def html_description(self, html_description: str):
        """Sets the html_description of this ProjectTemplateResponse.

        The description of the project template with formatting as HTML.  # noqa: E501

        :param html_description: The html_description of this ProjectTemplateResponse.
        :type html_description: str
        """

        self._html_description = html_description

    @property
    def owner(self) -> ProjectTemplateBaseAllOfOwner:
        """Gets the owner of this ProjectTemplateResponse.


        :return: The owner of this ProjectTemplateResponse.
        :rtype: ProjectTemplateBaseAllOfOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner: ProjectTemplateBaseAllOfOwner):
        """Sets the owner of this ProjectTemplateResponse.


        :param owner: The owner of this ProjectTemplateResponse.
        :type owner: ProjectTemplateBaseAllOfOwner
        """

        self._owner = owner

    @property
    def public(self) -> bool:
        """Gets the public of this ProjectTemplateResponse.

        True if the project template is public to its team.  # noqa: E501

        :return: The public of this ProjectTemplateResponse.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public: bool):
        """Sets the public of this ProjectTemplateResponse.

        True if the project template is public to its team.  # noqa: E501

        :param public: The public of this ProjectTemplateResponse.
        :type public: bool
        """

        self._public = public

    @property
    def requested_dates(self) -> List[DateVariableCompact]:
        """Gets the requested_dates of this ProjectTemplateResponse.

        Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.  # noqa: E501

        :return: The requested_dates of this ProjectTemplateResponse.
        :rtype: List[DateVariableCompact]
        """
        return self._requested_dates

    @requested_dates.setter
    def requested_dates(self, requested_dates: List[DateVariableCompact]):
        """Sets the requested_dates of this ProjectTemplateResponse.

        Array of date variables in this project template. Calendar dates must be provided for these variables when instantiating a project.  # noqa: E501

        :param requested_dates: The requested_dates of this ProjectTemplateResponse.
        :type requested_dates: List[DateVariableCompact]
        """

        self._requested_dates = requested_dates

    @property
    def team(self) -> ProjectTemplateBaseAllOfTeam:
        """Gets the team of this ProjectTemplateResponse.


        :return: The team of this ProjectTemplateResponse.
        :rtype: ProjectTemplateBaseAllOfTeam
        """
        return self._team

    @team.setter
    def team(self, team: ProjectTemplateBaseAllOfTeam):
        """Sets the team of this ProjectTemplateResponse.


        :param team: The team of this ProjectTemplateResponse.
        :type team: ProjectTemplateBaseAllOfTeam
        """

        self._team = team
