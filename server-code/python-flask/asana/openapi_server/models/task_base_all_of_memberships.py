from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.project_compact import ProjectCompact
from openapi_server.models.section_compact import SectionCompact
from openapi_server import util

from openapi_server.models.project_compact import ProjectCompact  # noqa: E501
from openapi_server.models.section_compact import SectionCompact  # noqa: E501

class TaskBaseAllOfMemberships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project=None, section=None):  # noqa: E501
        """TaskBaseAllOfMemberships - a model defined in OpenAPI

        :param project: The project of this TaskBaseAllOfMemberships.  # noqa: E501
        :type project: ProjectCompact
        :param section: The section of this TaskBaseAllOfMemberships.  # noqa: E501
        :type section: SectionCompact
        """
        self.openapi_types = {
            'project': ProjectCompact,
            'section': SectionCompact
        }

        self.attribute_map = {
            'project': 'project',
            'section': 'section'
        }

        self._project = project
        self._section = section

    @classmethod
    def from_dict(cls, dikt) -> 'TaskBaseAllOfMemberships':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskBase_allOf_memberships of this TaskBaseAllOfMemberships.  # noqa: E501
        :rtype: TaskBaseAllOfMemberships
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project(self) -> ProjectCompact:
        """Gets the project of this TaskBaseAllOfMemberships.


        :return: The project of this TaskBaseAllOfMemberships.
        :rtype: ProjectCompact
        """
        return self._project

    @project.setter
    def project(self, project: ProjectCompact):
        """Sets the project of this TaskBaseAllOfMemberships.


        :param project: The project of this TaskBaseAllOfMemberships.
        :type project: ProjectCompact
        """

        self._project = project

    @property
    def section(self) -> SectionCompact:
        """Gets the section of this TaskBaseAllOfMemberships.


        :return: The section of this TaskBaseAllOfMemberships.
        :rtype: SectionCompact
        """
        return self._section

    @section.setter
    def section(self, section: SectionCompact):
        """Sets the section of this TaskBaseAllOfMemberships.


        :param section: The section of this TaskBaseAllOfMemberships.
        :type section: SectionCompact
        """

        self._section = section
