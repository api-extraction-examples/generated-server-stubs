from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.credential_enum_push_service import CredentialEnumPushService
import re
from openapi_server import util

from openapi_server.models.credential_enum_push_service import CredentialEnumPushService  # noqa: E501
import re  # noqa: E501

class NotifyV1Credential(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid=None, date_created=None, date_updated=None, friendly_name=None, sandbox=None, sid=None, type=None, url=None):  # noqa: E501
        """NotifyV1Credential - a model defined in OpenAPI

        :param account_sid: The account_sid of this NotifyV1Credential.  # noqa: E501
        :type account_sid: str
        :param date_created: The date_created of this NotifyV1Credential.  # noqa: E501
        :type date_created: datetime
        :param date_updated: The date_updated of this NotifyV1Credential.  # noqa: E501
        :type date_updated: datetime
        :param friendly_name: The friendly_name of this NotifyV1Credential.  # noqa: E501
        :type friendly_name: str
        :param sandbox: The sandbox of this NotifyV1Credential.  # noqa: E501
        :type sandbox: str
        :param sid: The sid of this NotifyV1Credential.  # noqa: E501
        :type sid: str
        :param type: The type of this NotifyV1Credential.  # noqa: E501
        :type type: CredentialEnumPushService
        :param url: The url of this NotifyV1Credential.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'account_sid': str,
            'date_created': datetime,
            'date_updated': datetime,
            'friendly_name': str,
            'sandbox': str,
            'sid': str,
            'type': CredentialEnumPushService,
            'url': str
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'date_created': 'date_created',
            'date_updated': 'date_updated',
            'friendly_name': 'friendly_name',
            'sandbox': 'sandbox',
            'sid': 'sid',
            'type': 'type',
            'url': 'url'
        }

        self._account_sid = account_sid
        self._date_created = date_created
        self._date_updated = date_updated
        self._friendly_name = friendly_name
        self._sandbox = sandbox
        self._sid = sid
        self._type = type
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'NotifyV1Credential':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notify.v1.credential of this NotifyV1Credential.  # noqa: E501
        :rtype: NotifyV1Credential
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self) -> str:
        """Gets the account_sid of this NotifyV1Credential.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Credential resource.  # noqa: E501

        :return: The account_sid of this NotifyV1Credential.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid: str):
        """Sets the account_sid of this NotifyV1Credential.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Credential resource.  # noqa: E501

        :param account_sid: The account_sid of this NotifyV1Credential.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")  # noqa: E501
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")  # noqa: E501
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):  # noqa: E501
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")  # noqa: E501

        self._account_sid = account_sid

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this NotifyV1Credential.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :return: The date_created of this NotifyV1Credential.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime):
        """Sets the date_created of this NotifyV1Credential.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :param date_created: The date_created of this NotifyV1Credential.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def date_updated(self) -> datetime:
        """Gets the date_updated of this NotifyV1Credential.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :return: The date_updated of this NotifyV1Credential.
        :rtype: datetime
        """
        return self._date_updated

    @date_updated.setter
    def date_updated(self, date_updated: datetime):
        """Sets the date_updated of this NotifyV1Credential.

        The date and time in GMT when the resource was last updated specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :param date_updated: The date_updated of this NotifyV1Credential.
        :type date_updated: datetime
        """

        self._date_updated = date_updated

    @property
    def friendly_name(self) -> str:
        """Gets the friendly_name of this NotifyV1Credential.

        The string that you assigned to describe the resource.  # noqa: E501

        :return: The friendly_name of this NotifyV1Credential.
        :rtype: str
        """
        return self._friendly_name

    @friendly_name.setter
    def friendly_name(self, friendly_name: str):
        """Sets the friendly_name of this NotifyV1Credential.

        The string that you assigned to describe the resource.  # noqa: E501

        :param friendly_name: The friendly_name of this NotifyV1Credential.
        :type friendly_name: str
        """

        self._friendly_name = friendly_name

    @property
    def sandbox(self) -> str:
        """Gets the sandbox of this NotifyV1Credential.

        [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.  # noqa: E501

        :return: The sandbox of this NotifyV1Credential.
        :rtype: str
        """
        return self._sandbox

    @sandbox.setter
    def sandbox(self, sandbox: str):
        """Sets the sandbox of this NotifyV1Credential.

        [APN only] Whether to send the credential to sandbox APNs. Can be `true` to send to sandbox APNs or `false` to send to production.  # noqa: E501

        :param sandbox: The sandbox of this NotifyV1Credential.
        :type sandbox: str
        """

        self._sandbox = sandbox

    @property
    def sid(self) -> str:
        """Gets the sid of this NotifyV1Credential.

        The unique string that we created to identify the Credential resource.  # noqa: E501

        :return: The sid of this NotifyV1Credential.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid: str):
        """Sets the sid of this NotifyV1Credential.

        The unique string that we created to identify the Credential resource.  # noqa: E501

        :param sid: The sid of this NotifyV1Credential.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")  # noqa: E501
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")  # noqa: E501
        if sid is not None and not re.search(r'^CR[0-9a-fA-F]{32}$', sid):  # noqa: E501
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^CR[0-9a-fA-F]{32}$/`")  # noqa: E501

        self._sid = sid

    @property
    def type(self) -> CredentialEnumPushService:
        """Gets the type of this NotifyV1Credential.


        :return: The type of this NotifyV1Credential.
        :rtype: CredentialEnumPushService
        """
        return self._type

    @type.setter
    def type(self, type: CredentialEnumPushService):
        """Sets the type of this NotifyV1Credential.


        :param type: The type of this NotifyV1Credential.
        :type type: CredentialEnumPushService
        """

        self._type = type

    @property
    def url(self) -> str:
        """Gets the url of this NotifyV1Credential.

        The absolute URL of the Credential resource.  # noqa: E501

        :return: The url of this NotifyV1Credential.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this NotifyV1Credential.

        The absolute URL of the Credential resource.  # noqa: E501

        :param url: The url of this NotifyV1Credential.
        :type url: str
        """

        self._url = url
