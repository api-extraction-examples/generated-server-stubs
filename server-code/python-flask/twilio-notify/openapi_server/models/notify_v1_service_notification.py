from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.notification_enum_priority import NotificationEnumPriority
import re
from openapi_server import util

from openapi_server.models.notification_enum_priority import NotificationEnumPriority  # noqa: E501
import re  # noqa: E501

class NotifyV1ServiceNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_sid=None, action=None, alexa=None, apn=None, body=None, data=None, date_created=None, facebook_messenger=None, fcm=None, gcm=None, identities=None, priority=None, segments=None, service_sid=None, sid=None, sms=None, sound=None, tags=None, title=None, ttl=None):  # noqa: E501
        """NotifyV1ServiceNotification - a model defined in OpenAPI

        :param account_sid: The account_sid of this NotifyV1ServiceNotification.  # noqa: E501
        :type account_sid: str
        :param action: The action of this NotifyV1ServiceNotification.  # noqa: E501
        :type action: str
        :param alexa: The alexa of this NotifyV1ServiceNotification.  # noqa: E501
        :type alexa: object
        :param apn: The apn of this NotifyV1ServiceNotification.  # noqa: E501
        :type apn: object
        :param body: The body of this NotifyV1ServiceNotification.  # noqa: E501
        :type body: str
        :param data: The data of this NotifyV1ServiceNotification.  # noqa: E501
        :type data: object
        :param date_created: The date_created of this NotifyV1ServiceNotification.  # noqa: E501
        :type date_created: datetime
        :param facebook_messenger: The facebook_messenger of this NotifyV1ServiceNotification.  # noqa: E501
        :type facebook_messenger: object
        :param fcm: The fcm of this NotifyV1ServiceNotification.  # noqa: E501
        :type fcm: object
        :param gcm: The gcm of this NotifyV1ServiceNotification.  # noqa: E501
        :type gcm: object
        :param identities: The identities of this NotifyV1ServiceNotification.  # noqa: E501
        :type identities: List[str]
        :param priority: The priority of this NotifyV1ServiceNotification.  # noqa: E501
        :type priority: NotificationEnumPriority
        :param segments: The segments of this NotifyV1ServiceNotification.  # noqa: E501
        :type segments: List[str]
        :param service_sid: The service_sid of this NotifyV1ServiceNotification.  # noqa: E501
        :type service_sid: str
        :param sid: The sid of this NotifyV1ServiceNotification.  # noqa: E501
        :type sid: str
        :param sms: The sms of this NotifyV1ServiceNotification.  # noqa: E501
        :type sms: object
        :param sound: The sound of this NotifyV1ServiceNotification.  # noqa: E501
        :type sound: str
        :param tags: The tags of this NotifyV1ServiceNotification.  # noqa: E501
        :type tags: List[str]
        :param title: The title of this NotifyV1ServiceNotification.  # noqa: E501
        :type title: str
        :param ttl: The ttl of this NotifyV1ServiceNotification.  # noqa: E501
        :type ttl: int
        """
        self.openapi_types = {
            'account_sid': str,
            'action': str,
            'alexa': object,
            'apn': object,
            'body': str,
            'data': object,
            'date_created': datetime,
            'facebook_messenger': object,
            'fcm': object,
            'gcm': object,
            'identities': List[str],
            'priority': NotificationEnumPriority,
            'segments': List[str],
            'service_sid': str,
            'sid': str,
            'sms': object,
            'sound': str,
            'tags': List[str],
            'title': str,
            'ttl': int
        }

        self.attribute_map = {
            'account_sid': 'account_sid',
            'action': 'action',
            'alexa': 'alexa',
            'apn': 'apn',
            'body': 'body',
            'data': 'data',
            'date_created': 'date_created',
            'facebook_messenger': 'facebook_messenger',
            'fcm': 'fcm',
            'gcm': 'gcm',
            'identities': 'identities',
            'priority': 'priority',
            'segments': 'segments',
            'service_sid': 'service_sid',
            'sid': 'sid',
            'sms': 'sms',
            'sound': 'sound',
            'tags': 'tags',
            'title': 'title',
            'ttl': 'ttl'
        }

        self._account_sid = account_sid
        self._action = action
        self._alexa = alexa
        self._apn = apn
        self._body = body
        self._data = data
        self._date_created = date_created
        self._facebook_messenger = facebook_messenger
        self._fcm = fcm
        self._gcm = gcm
        self._identities = identities
        self._priority = priority
        self._segments = segments
        self._service_sid = service_sid
        self._sid = sid
        self._sms = sms
        self._sound = sound
        self._tags = tags
        self._title = title
        self._ttl = ttl

    @classmethod
    def from_dict(cls, dikt) -> 'NotifyV1ServiceNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The notify.v1.service.notification of this NotifyV1ServiceNotification.  # noqa: E501
        :rtype: NotifyV1ServiceNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_sid(self) -> str:
        """Gets the account_sid of this NotifyV1ServiceNotification.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource.  # noqa: E501

        :return: The account_sid of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._account_sid

    @account_sid.setter
    def account_sid(self, account_sid: str):
        """Sets the account_sid of this NotifyV1ServiceNotification.

        The SID of the [Account](https://www.twilio.com/docs/iam/api/account) that created the Notification resource.  # noqa: E501

        :param account_sid: The account_sid of this NotifyV1ServiceNotification.
        :type account_sid: str
        """
        if account_sid is not None and len(account_sid) > 34:
            raise ValueError("Invalid value for `account_sid`, length must be less than or equal to `34`")  # noqa: E501
        if account_sid is not None and len(account_sid) < 34:
            raise ValueError("Invalid value for `account_sid`, length must be greater than or equal to `34`")  # noqa: E501
        if account_sid is not None and not re.search(r'^AC[0-9a-fA-F]{32}$', account_sid):  # noqa: E501
            raise ValueError("Invalid value for `account_sid`, must be a follow pattern or equal to `/^AC[0-9a-fA-F]{32}$/`")  # noqa: E501

        self._account_sid = account_sid

    @property
    def action(self) -> str:
        """Gets the action of this NotifyV1ServiceNotification.

        The actions to display for the notification. For APNS, translates to the `aps.category` value. For GCM, translates to the `data.twi_action` value. For SMS, this parameter is not supported and is omitted from deliveries to those channels.  # noqa: E501

        :return: The action of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._action

    @action.setter
    def action(self, action: str):
        """Sets the action of this NotifyV1ServiceNotification.

        The actions to display for the notification. For APNS, translates to the `aps.category` value. For GCM, translates to the `data.twi_action` value. For SMS, this parameter is not supported and is omitted from deliveries to those channels.  # noqa: E501

        :param action: The action of this NotifyV1ServiceNotification.
        :type action: str
        """

        self._action = action

    @property
    def alexa(self) -> object:
        """Gets the alexa of this NotifyV1ServiceNotification.

        Deprecated.  # noqa: E501

        :return: The alexa of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._alexa

    @alexa.setter
    def alexa(self, alexa: object):
        """Sets the alexa of this NotifyV1ServiceNotification.

        Deprecated.  # noqa: E501

        :param alexa: The alexa of this NotifyV1ServiceNotification.
        :type alexa: object
        """

        self._alexa = alexa

    @property
    def apn(self) -> object:
        """Gets the apn of this NotifyV1ServiceNotification.

        The APNS-specific payload that overrides corresponding attributes in the generic payload for APNS Bindings. This property maps to the APNS `Payload` item, therefore the `aps` key must be used to change standard attributes. Adds custom key-value pairs to the root of the dictionary. See the [APNS documentation](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html) for more details. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed.  # noqa: E501

        :return: The apn of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._apn

    @apn.setter
    def apn(self, apn: object):
        """Sets the apn of this NotifyV1ServiceNotification.

        The APNS-specific payload that overrides corresponding attributes in the generic payload for APNS Bindings. This property maps to the APNS `Payload` item, therefore the `aps` key must be used to change standard attributes. Adds custom key-value pairs to the root of the dictionary. See the [APNS documentation](https://developer.apple.com/library/content/documentation/NetworkingInternet/Conceptual/RemoteNotificationsPG/CommunicatingwithAPNs.html) for more details. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed.  # noqa: E501

        :param apn: The apn of this NotifyV1ServiceNotification.
        :type apn: object
        """

        self._apn = apn

    @property
    def body(self) -> str:
        """Gets the body of this NotifyV1ServiceNotification.

        The notification text. For FCM and GCM, translates to `data.twi_body`. For APNS, translates to `aps.alert.body`. For SMS, translates to `body`. SMS requires either this `body` value, or `media_urls` attribute defined in the `sms` parameter of the notification.  # noqa: E501

        :return: The body of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._body

    @body.setter
    def body(self, body: str):
        """Sets the body of this NotifyV1ServiceNotification.

        The notification text. For FCM and GCM, translates to `data.twi_body`. For APNS, translates to `aps.alert.body`. For SMS, translates to `body`. SMS requires either this `body` value, or `media_urls` attribute defined in the `sms` parameter of the notification.  # noqa: E501

        :param body: The body of this NotifyV1ServiceNotification.
        :type body: str
        """

        self._body = body

    @property
    def data(self) -> object:
        """Gets the data of this NotifyV1ServiceNotification.

        The custom key-value pairs of the notification's payload. For FCM and GCM, this value translates to `data` in the FCM and GCM payloads. FCM and GCM [reserve certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref) that cannot be used in those channels. For APNS, attributes of `data` are inserted into the APNS payload as custom properties outside of the `aps` dictionary. In all channels, we reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed and are rejected as 400 Bad request with no delivery attempted. For SMS, this parameter is not supported and is omitted from deliveries to those channels.  # noqa: E501

        :return: The data of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._data

    @data.setter
    def data(self, data: object):
        """Sets the data of this NotifyV1ServiceNotification.

        The custom key-value pairs of the notification's payload. For FCM and GCM, this value translates to `data` in the FCM and GCM payloads. FCM and GCM [reserve certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref) that cannot be used in those channels. For APNS, attributes of `data` are inserted into the APNS payload as custom properties outside of the `aps` dictionary. In all channels, we reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed and are rejected as 400 Bad request with no delivery attempted. For SMS, this parameter is not supported and is omitted from deliveries to those channels.  # noqa: E501

        :param data: The data of this NotifyV1ServiceNotification.
        :type data: object
        """

        self._data = data

    @property
    def date_created(self) -> datetime:
        """Gets the date_created of this NotifyV1ServiceNotification.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :return: The date_created of this NotifyV1ServiceNotification.
        :rtype: datetime
        """
        return self._date_created

    @date_created.setter
    def date_created(self, date_created: datetime):
        """Sets the date_created of this NotifyV1ServiceNotification.

        The date and time in GMT when the resource was created specified in [RFC 2822](https://www.ietf.org/rfc/rfc2822.txt) format.  # noqa: E501

        :param date_created: The date_created of this NotifyV1ServiceNotification.
        :type date_created: datetime
        """

        self._date_created = date_created

    @property
    def facebook_messenger(self) -> object:
        """Gets the facebook_messenger of this NotifyV1ServiceNotification.

        Deprecated.  # noqa: E501

        :return: The facebook_messenger of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._facebook_messenger

    @facebook_messenger.setter
    def facebook_messenger(self, facebook_messenger: object):
        """Sets the facebook_messenger of this NotifyV1ServiceNotification.

        Deprecated.  # noqa: E501

        :param facebook_messenger: The facebook_messenger of this NotifyV1ServiceNotification.
        :type facebook_messenger: object
        """

        self._facebook_messenger = facebook_messenger

    @property
    def fcm(self) -> object:
        """Gets the fcm of this NotifyV1ServiceNotification.

        The FCM-specific payload that overrides corresponding attributes in the generic payload for FCM Bindings. This property maps to the root JSON dictionary. See the [FCM documentation](https://firebase.google.com/docs/cloud-messaging/http-server-ref#downstream) for more details. Target parameters `to`, `registration_ids`, `condition`, and `notification_key` are not allowed in this parameter. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed. FCM also [reserves certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref), which cannot be used in that channel.  # noqa: E501

        :return: The fcm of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._fcm

    @fcm.setter
    def fcm(self, fcm: object):
        """Sets the fcm of this NotifyV1ServiceNotification.

        The FCM-specific payload that overrides corresponding attributes in the generic payload for FCM Bindings. This property maps to the root JSON dictionary. See the [FCM documentation](https://firebase.google.com/docs/cloud-messaging/http-server-ref#downstream) for more details. Target parameters `to`, `registration_ids`, `condition`, and `notification_key` are not allowed in this parameter. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed. FCM also [reserves certain keys](https://firebase.google.com/docs/cloud-messaging/http-server-ref), which cannot be used in that channel.  # noqa: E501

        :param fcm: The fcm of this NotifyV1ServiceNotification.
        :type fcm: object
        """

        self._fcm = fcm

    @property
    def gcm(self) -> object:
        """Gets the gcm of this NotifyV1ServiceNotification.

        The GCM-specific payload that overrides corresponding attributes in the generic payload for GCM Bindings.  This property maps to the root JSON dictionary. Target parameters `to`, `registration_ids`, and `notification_key` are not allowed. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed.  # noqa: E501

        :return: The gcm of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._gcm

    @gcm.setter
    def gcm(self, gcm: object):
        """Sets the gcm of this NotifyV1ServiceNotification.

        The GCM-specific payload that overrides corresponding attributes in the generic payload for GCM Bindings.  This property maps to the root JSON dictionary. Target parameters `to`, `registration_ids`, and `notification_key` are not allowed. We reserve keys that start with `twi_` for future use. Custom keys that start with `twi_` are not allowed.  # noqa: E501

        :param gcm: The gcm of this NotifyV1ServiceNotification.
        :type gcm: object
        """

        self._gcm = gcm

    @property
    def identities(self) -> List[str]:
        """Gets the identities of this NotifyV1ServiceNotification.

        The list of `identity` values of the Users to notify. We will attempt to deliver notifications only to Bindings with an identity in this list.  # noqa: E501

        :return: The identities of this NotifyV1ServiceNotification.
        :rtype: List[str]
        """
        return self._identities

    @identities.setter
    def identities(self, identities: List[str]):
        """Sets the identities of this NotifyV1ServiceNotification.

        The list of `identity` values of the Users to notify. We will attempt to deliver notifications only to Bindings with an identity in this list.  # noqa: E501

        :param identities: The identities of this NotifyV1ServiceNotification.
        :type identities: List[str]
        """

        self._identities = identities

    @property
    def priority(self) -> NotificationEnumPriority:
        """Gets the priority of this NotifyV1ServiceNotification.


        :return: The priority of this NotifyV1ServiceNotification.
        :rtype: NotificationEnumPriority
        """
        return self._priority

    @priority.setter
    def priority(self, priority: NotificationEnumPriority):
        """Sets the priority of this NotifyV1ServiceNotification.


        :param priority: The priority of this NotifyV1ServiceNotification.
        :type priority: NotificationEnumPriority
        """

        self._priority = priority

    @property
    def segments(self) -> List[str]:
        """Gets the segments of this NotifyV1ServiceNotification.

        The list of Segments to notify. The [Segment](https://www.twilio.com/docs/notify/api/segment-resource) resource is deprecated. Use the `tags` property, instead.  # noqa: E501

        :return: The segments of this NotifyV1ServiceNotification.
        :rtype: List[str]
        """
        return self._segments

    @segments.setter
    def segments(self, segments: List[str]):
        """Sets the segments of this NotifyV1ServiceNotification.

        The list of Segments to notify. The [Segment](https://www.twilio.com/docs/notify/api/segment-resource) resource is deprecated. Use the `tags` property, instead.  # noqa: E501

        :param segments: The segments of this NotifyV1ServiceNotification.
        :type segments: List[str]
        """

        self._segments = segments

    @property
    def service_sid(self) -> str:
        """Gets the service_sid of this NotifyV1ServiceNotification.

        The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) the resource is associated with.  # noqa: E501

        :return: The service_sid of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._service_sid

    @service_sid.setter
    def service_sid(self, service_sid: str):
        """Sets the service_sid of this NotifyV1ServiceNotification.

        The SID of the [Service](https://www.twilio.com/docs/notify/api/service-resource) the resource is associated with.  # noqa: E501

        :param service_sid: The service_sid of this NotifyV1ServiceNotification.
        :type service_sid: str
        """
        if service_sid is not None and len(service_sid) > 34:
            raise ValueError("Invalid value for `service_sid`, length must be less than or equal to `34`")  # noqa: E501
        if service_sid is not None and len(service_sid) < 34:
            raise ValueError("Invalid value for `service_sid`, length must be greater than or equal to `34`")  # noqa: E501
        if service_sid is not None and not re.search(r'^IS[0-9a-fA-F]{32}$', service_sid):  # noqa: E501
            raise ValueError("Invalid value for `service_sid`, must be a follow pattern or equal to `/^IS[0-9a-fA-F]{32}$/`")  # noqa: E501

        self._service_sid = service_sid

    @property
    def sid(self) -> str:
        """Gets the sid of this NotifyV1ServiceNotification.

        The unique string that we created to identify the Notification resource.  # noqa: E501

        :return: The sid of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._sid

    @sid.setter
    def sid(self, sid: str):
        """Sets the sid of this NotifyV1ServiceNotification.

        The unique string that we created to identify the Notification resource.  # noqa: E501

        :param sid: The sid of this NotifyV1ServiceNotification.
        :type sid: str
        """
        if sid is not None and len(sid) > 34:
            raise ValueError("Invalid value for `sid`, length must be less than or equal to `34`")  # noqa: E501
        if sid is not None and len(sid) < 34:
            raise ValueError("Invalid value for `sid`, length must be greater than or equal to `34`")  # noqa: E501
        if sid is not None and not re.search(r'^NT[0-9a-fA-F]{32}$', sid):  # noqa: E501
            raise ValueError("Invalid value for `sid`, must be a follow pattern or equal to `/^NT[0-9a-fA-F]{32}$/`")  # noqa: E501

        self._sid = sid

    @property
    def sms(self) -> object:
        """Gets the sms of this NotifyV1ServiceNotification.

        The SMS-specific payload that overrides corresponding attributes in the generic payload for SMS Bindings.  Each attribute in this value maps to the corresponding `form` parameter of the Twilio [Message](https://www.twilio.com/docs/sms/api/message-resource) resource.  These parameters of the Message resource are supported in snake case format: `body`, `media_urls`, `status_callback`, and `max_price`.  The `status_callback` parameter overrides the corresponding parameter in the messaging service, if configured. The `media_urls` property expects a JSON array.  # noqa: E501

        :return: The sms of this NotifyV1ServiceNotification.
        :rtype: object
        """
        return self._sms

    @sms.setter
    def sms(self, sms: object):
        """Sets the sms of this NotifyV1ServiceNotification.

        The SMS-specific payload that overrides corresponding attributes in the generic payload for SMS Bindings.  Each attribute in this value maps to the corresponding `form` parameter of the Twilio [Message](https://www.twilio.com/docs/sms/api/message-resource) resource.  These parameters of the Message resource are supported in snake case format: `body`, `media_urls`, `status_callback`, and `max_price`.  The `status_callback` parameter overrides the corresponding parameter in the messaging service, if configured. The `media_urls` property expects a JSON array.  # noqa: E501

        :param sms: The sms of this NotifyV1ServiceNotification.
        :type sms: object
        """

        self._sms = sms

    @property
    def sound(self) -> str:
        """Gets the sound of this NotifyV1ServiceNotification.

        The name of the sound to be played for the notification. For FCM and GCM, this Translates to `data.twi_sound`.  For APNS, this translates to `aps.sound`.  SMS does not support this property.  # noqa: E501

        :return: The sound of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._sound

    @sound.setter
    def sound(self, sound: str):
        """Sets the sound of this NotifyV1ServiceNotification.

        The name of the sound to be played for the notification. For FCM and GCM, this Translates to `data.twi_sound`.  For APNS, this translates to `aps.sound`.  SMS does not support this property.  # noqa: E501

        :param sound: The sound of this NotifyV1ServiceNotification.
        :type sound: str
        """

        self._sound = sound

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this NotifyV1ServiceNotification.

        The tags that select the Bindings to notify. Notifications will be attempted only to Bindings that have all of the tags listed in this property.  # noqa: E501

        :return: The tags of this NotifyV1ServiceNotification.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this NotifyV1ServiceNotification.

        The tags that select the Bindings to notify. Notifications will be attempted only to Bindings that have all of the tags listed in this property.  # noqa: E501

        :param tags: The tags of this NotifyV1ServiceNotification.
        :type tags: List[str]
        """

        self._tags = tags

    @property
    def title(self) -> str:
        """Gets the title of this NotifyV1ServiceNotification.

        The notification title. For FCM and GCM, this translates to the `data.twi_title` value. For APNS, this translates to the `aps.alert.title` value. SMS does not support this property. This field is not visible on iOS phones and tablets but appears on Apple Watch and Android devices.  # noqa: E501

        :return: The title of this NotifyV1ServiceNotification.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this NotifyV1ServiceNotification.

        The notification title. For FCM and GCM, this translates to the `data.twi_title` value. For APNS, this translates to the `aps.alert.title` value. SMS does not support this property. This field is not visible on iOS phones and tablets but appears on Apple Watch and Android devices.  # noqa: E501

        :param title: The title of this NotifyV1ServiceNotification.
        :type title: str
        """

        self._title = title

    @property
    def ttl(self) -> int:
        """Gets the ttl of this NotifyV1ServiceNotification.

        How long, in seconds, the notification is valid. Can be an integer between 0 and 2,419,200, which is 4 weeks, the default and the maximum supported time to live (TTL). Delivery should be attempted if the device is offline until the TTL elapses. Zero means that the notification delivery is attempted immediately, only once, and is not stored for future delivery. SMS does not support this property.  # noqa: E501

        :return: The ttl of this NotifyV1ServiceNotification.
        :rtype: int
        """
        return self._ttl

    @ttl.setter
    def ttl(self, ttl: int):
        """Sets the ttl of this NotifyV1ServiceNotification.

        How long, in seconds, the notification is valid. Can be an integer between 0 and 2,419,200, which is 4 weeks, the default and the maximum supported time to live (TTL). Delivery should be attempted if the device is offline until the TTL elapses. Zero means that the notification delivery is attempted immediately, only once, and is not stored for future delivery. SMS does not support this property.  # noqa: E501

        :param ttl: The ttl of this NotifyV1ServiceNotification.
        :type ttl: int
        """

        self._ttl = ttl
