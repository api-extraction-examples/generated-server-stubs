from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.conference_sp_rating_special_teams import ConferenceSPRatingSpecialTeams
from openapi_server.models.team_sp_rating_defense import TeamSPRatingDefense
from openapi_server.models.team_sp_rating_offense import TeamSPRatingOffense
from openapi_server import util

from openapi_server.models.conference_sp_rating_special_teams import ConferenceSPRatingSpecialTeams  # noqa: E501
from openapi_server.models.team_sp_rating_defense import TeamSPRatingDefense  # noqa: E501
from openapi_server.models.team_sp_rating_offense import TeamSPRatingOffense  # noqa: E501

class TeamSPRating(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conference=None, defense=None, offense=None, ranking=None, rating=None, second_order_wins=None, sos=None, special_teams=None, team=None, year=None):  # noqa: E501
        """TeamSPRating - a model defined in OpenAPI

        :param conference: The conference of this TeamSPRating.  # noqa: E501
        :type conference: str
        :param defense: The defense of this TeamSPRating.  # noqa: E501
        :type defense: TeamSPRatingDefense
        :param offense: The offense of this TeamSPRating.  # noqa: E501
        :type offense: TeamSPRatingOffense
        :param ranking: The ranking of this TeamSPRating.  # noqa: E501
        :type ranking: float
        :param rating: The rating of this TeamSPRating.  # noqa: E501
        :type rating: float
        :param second_order_wins: The second_order_wins of this TeamSPRating.  # noqa: E501
        :type second_order_wins: float
        :param sos: The sos of this TeamSPRating.  # noqa: E501
        :type sos: float
        :param special_teams: The special_teams of this TeamSPRating.  # noqa: E501
        :type special_teams: ConferenceSPRatingSpecialTeams
        :param team: The team of this TeamSPRating.  # noqa: E501
        :type team: str
        :param year: The year of this TeamSPRating.  # noqa: E501
        :type year: int
        """
        self.openapi_types = {
            'conference': str,
            'defense': TeamSPRatingDefense,
            'offense': TeamSPRatingOffense,
            'ranking': float,
            'rating': float,
            'second_order_wins': float,
            'sos': float,
            'special_teams': ConferenceSPRatingSpecialTeams,
            'team': str,
            'year': int
        }

        self.attribute_map = {
            'conference': 'conference',
            'defense': 'defense',
            'offense': 'offense',
            'ranking': 'ranking',
            'rating': 'rating',
            'second_order_wins': 'secondOrderWins',
            'sos': 'sos',
            'special_teams': 'specialTeams',
            'team': 'team',
            'year': 'year'
        }

        self._conference = conference
        self._defense = defense
        self._offense = offense
        self._ranking = ranking
        self._rating = rating
        self._second_order_wins = second_order_wins
        self._sos = sos
        self._special_teams = special_teams
        self._team = team
        self._year = year

    @classmethod
    def from_dict(cls, dikt) -> 'TeamSPRating':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TeamSPRating of this TeamSPRating.  # noqa: E501
        :rtype: TeamSPRating
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conference(self) -> str:
        """Gets the conference of this TeamSPRating.


        :return: The conference of this TeamSPRating.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference: str):
        """Sets the conference of this TeamSPRating.


        :param conference: The conference of this TeamSPRating.
        :type conference: str
        """

        self._conference = conference

    @property
    def defense(self) -> TeamSPRatingDefense:
        """Gets the defense of this TeamSPRating.


        :return: The defense of this TeamSPRating.
        :rtype: TeamSPRatingDefense
        """
        return self._defense

    @defense.setter
    def defense(self, defense: TeamSPRatingDefense):
        """Sets the defense of this TeamSPRating.


        :param defense: The defense of this TeamSPRating.
        :type defense: TeamSPRatingDefense
        """

        self._defense = defense

    @property
    def offense(self) -> TeamSPRatingOffense:
        """Gets the offense of this TeamSPRating.


        :return: The offense of this TeamSPRating.
        :rtype: TeamSPRatingOffense
        """
        return self._offense

    @offense.setter
    def offense(self, offense: TeamSPRatingOffense):
        """Sets the offense of this TeamSPRating.


        :param offense: The offense of this TeamSPRating.
        :type offense: TeamSPRatingOffense
        """

        self._offense = offense

    @property
    def ranking(self) -> float:
        """Gets the ranking of this TeamSPRating.


        :return: The ranking of this TeamSPRating.
        :rtype: float
        """
        return self._ranking

    @ranking.setter
    def ranking(self, ranking: float):
        """Sets the ranking of this TeamSPRating.


        :param ranking: The ranking of this TeamSPRating.
        :type ranking: float
        """

        self._ranking = ranking

    @property
    def rating(self) -> float:
        """Gets the rating of this TeamSPRating.


        :return: The rating of this TeamSPRating.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this TeamSPRating.


        :param rating: The rating of this TeamSPRating.
        :type rating: float
        """

        self._rating = rating

    @property
    def second_order_wins(self) -> float:
        """Gets the second_order_wins of this TeamSPRating.


        :return: The second_order_wins of this TeamSPRating.
        :rtype: float
        """
        return self._second_order_wins

    @second_order_wins.setter
    def second_order_wins(self, second_order_wins: float):
        """Sets the second_order_wins of this TeamSPRating.


        :param second_order_wins: The second_order_wins of this TeamSPRating.
        :type second_order_wins: float
        """

        self._second_order_wins = second_order_wins

    @property
    def sos(self) -> float:
        """Gets the sos of this TeamSPRating.


        :return: The sos of this TeamSPRating.
        :rtype: float
        """
        return self._sos

    @sos.setter
    def sos(self, sos: float):
        """Sets the sos of this TeamSPRating.


        :param sos: The sos of this TeamSPRating.
        :type sos: float
        """

        self._sos = sos

    @property
    def special_teams(self) -> ConferenceSPRatingSpecialTeams:
        """Gets the special_teams of this TeamSPRating.


        :return: The special_teams of this TeamSPRating.
        :rtype: ConferenceSPRatingSpecialTeams
        """
        return self._special_teams

    @special_teams.setter
    def special_teams(self, special_teams: ConferenceSPRatingSpecialTeams):
        """Sets the special_teams of this TeamSPRating.


        :param special_teams: The special_teams of this TeamSPRating.
        :type special_teams: ConferenceSPRatingSpecialTeams
        """

        self._special_teams = special_teams

    @property
    def team(self) -> str:
        """Gets the team of this TeamSPRating.


        :return: The team of this TeamSPRating.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this TeamSPRating.


        :param team: The team of this TeamSPRating.
        :type team: str
        """

        self._team = team

    @property
    def year(self) -> int:
        """Gets the year of this TeamSPRating.


        :return: The year of this TeamSPRating.
        :rtype: int
        """
        return self._year

    @year.setter
    def year(self, year: int):
        """Sets the year of this TeamSPRating.


        :param year: The year of this TeamSPRating.
        :type year: int
        """

        self._year = year
