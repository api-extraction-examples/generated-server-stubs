from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.player_game_teams_inner_categories_inner import PlayerGameTeamsInnerCategoriesInner
from openapi_server.models.player_game_teams_inner_school import PlayerGameTeamsInnerSchool
from openapi_server import util

from openapi_server.models.player_game_teams_inner_categories_inner import PlayerGameTeamsInnerCategoriesInner  # noqa: E501
from openapi_server.models.player_game_teams_inner_school import PlayerGameTeamsInnerSchool  # noqa: E501

class PlayerGameTeamsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, categories=None, home_away=None, points=None, school=None):  # noqa: E501
        """PlayerGameTeamsInner - a model defined in OpenAPI

        :param categories: The categories of this PlayerGameTeamsInner.  # noqa: E501
        :type categories: List[PlayerGameTeamsInnerCategoriesInner]
        :param home_away: The home_away of this PlayerGameTeamsInner.  # noqa: E501
        :type home_away: bool
        :param points: The points of this PlayerGameTeamsInner.  # noqa: E501
        :type points: int
        :param school: The school of this PlayerGameTeamsInner.  # noqa: E501
        :type school: PlayerGameTeamsInnerSchool
        """
        self.openapi_types = {
            'categories': List[PlayerGameTeamsInnerCategoriesInner],
            'home_away': bool,
            'points': int,
            'school': PlayerGameTeamsInnerSchool
        }

        self.attribute_map = {
            'categories': 'categories',
            'home_away': 'homeAway',
            'points': 'points',
            'school': 'school'
        }

        self._categories = categories
        self._home_away = home_away
        self._points = points
        self._school = school

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerGameTeamsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerGame_teams_inner of this PlayerGameTeamsInner.  # noqa: E501
        :rtype: PlayerGameTeamsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def categories(self) -> List[PlayerGameTeamsInnerCategoriesInner]:
        """Gets the categories of this PlayerGameTeamsInner.


        :return: The categories of this PlayerGameTeamsInner.
        :rtype: List[PlayerGameTeamsInnerCategoriesInner]
        """
        return self._categories

    @categories.setter
    def categories(self, categories: List[PlayerGameTeamsInnerCategoriesInner]):
        """Sets the categories of this PlayerGameTeamsInner.


        :param categories: The categories of this PlayerGameTeamsInner.
        :type categories: List[PlayerGameTeamsInnerCategoriesInner]
        """

        self._categories = categories

    @property
    def home_away(self) -> bool:
        """Gets the home_away of this PlayerGameTeamsInner.


        :return: The home_away of this PlayerGameTeamsInner.
        :rtype: bool
        """
        return self._home_away

    @home_away.setter
    def home_away(self, home_away: bool):
        """Sets the home_away of this PlayerGameTeamsInner.


        :param home_away: The home_away of this PlayerGameTeamsInner.
        :type home_away: bool
        """

        self._home_away = home_away

    @property
    def points(self) -> int:
        """Gets the points of this PlayerGameTeamsInner.


        :return: The points of this PlayerGameTeamsInner.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points: int):
        """Sets the points of this PlayerGameTeamsInner.


        :param points: The points of this PlayerGameTeamsInner.
        :type points: int
        """

        self._points = points

    @property
    def school(self) -> PlayerGameTeamsInnerSchool:
        """Gets the school of this PlayerGameTeamsInner.


        :return: The school of this PlayerGameTeamsInner.
        :rtype: PlayerGameTeamsInnerSchool
        """
        return self._school

    @school.setter
    def school(self, school: PlayerGameTeamsInnerSchool):
        """Sets the school of this PlayerGameTeamsInner.


        :param school: The school of this PlayerGameTeamsInner.
        :type school: PlayerGameTeamsInnerSchool
        """

        self._school = school
