from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.team_matchup_games_inner import TeamMatchupGamesInner
from openapi_server import util

from openapi_server.models.team_matchup_games_inner import TeamMatchupGamesInner  # noqa: E501

class TeamMatchup(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, end_year=None, games=None, start_year=None, team1=None, team1_wins=None, team2=None, team2_wins=None, ties=None):  # noqa: E501
        """TeamMatchup - a model defined in OpenAPI

        :param end_year: The end_year of this TeamMatchup.  # noqa: E501
        :type end_year: int
        :param games: The games of this TeamMatchup.  # noqa: E501
        :type games: List[TeamMatchupGamesInner]
        :param start_year: The start_year of this TeamMatchup.  # noqa: E501
        :type start_year: int
        :param team1: The team1 of this TeamMatchup.  # noqa: E501
        :type team1: str
        :param team1_wins: The team1_wins of this TeamMatchup.  # noqa: E501
        :type team1_wins: int
        :param team2: The team2 of this TeamMatchup.  # noqa: E501
        :type team2: str
        :param team2_wins: The team2_wins of this TeamMatchup.  # noqa: E501
        :type team2_wins: int
        :param ties: The ties of this TeamMatchup.  # noqa: E501
        :type ties: int
        """
        self.openapi_types = {
            'end_year': int,
            'games': List[TeamMatchupGamesInner],
            'start_year': int,
            'team1': str,
            'team1_wins': int,
            'team2': str,
            'team2_wins': int,
            'ties': int
        }

        self.attribute_map = {
            'end_year': 'endYear',
            'games': 'games',
            'start_year': 'startYear',
            'team1': 'team1',
            'team1_wins': 'team1Wins',
            'team2': 'team2',
            'team2_wins': 'team2Wins',
            'ties': 'ties'
        }

        self._end_year = end_year
        self._games = games
        self._start_year = start_year
        self._team1 = team1
        self._team1_wins = team1_wins
        self._team2 = team2
        self._team2_wins = team2_wins
        self._ties = ties

    @classmethod
    def from_dict(cls, dikt) -> 'TeamMatchup':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TeamMatchup of this TeamMatchup.  # noqa: E501
        :rtype: TeamMatchup
        """
        return util.deserialize_model(dikt, cls)

    @property
    def end_year(self) -> int:
        """Gets the end_year of this TeamMatchup.


        :return: The end_year of this TeamMatchup.
        :rtype: int
        """
        return self._end_year

    @end_year.setter
    def end_year(self, end_year: int):
        """Sets the end_year of this TeamMatchup.


        :param end_year: The end_year of this TeamMatchup.
        :type end_year: int
        """

        self._end_year = end_year

    @property
    def games(self) -> List[TeamMatchupGamesInner]:
        """Gets the games of this TeamMatchup.


        :return: The games of this TeamMatchup.
        :rtype: List[TeamMatchupGamesInner]
        """
        return self._games

    @games.setter
    def games(self, games: List[TeamMatchupGamesInner]):
        """Sets the games of this TeamMatchup.


        :param games: The games of this TeamMatchup.
        :type games: List[TeamMatchupGamesInner]
        """

        self._games = games

    @property
    def start_year(self) -> int:
        """Gets the start_year of this TeamMatchup.


        :return: The start_year of this TeamMatchup.
        :rtype: int
        """
        return self._start_year

    @start_year.setter
    def start_year(self, start_year: int):
        """Sets the start_year of this TeamMatchup.


        :param start_year: The start_year of this TeamMatchup.
        :type start_year: int
        """

        self._start_year = start_year

    @property
    def team1(self) -> str:
        """Gets the team1 of this TeamMatchup.


        :return: The team1 of this TeamMatchup.
        :rtype: str
        """
        return self._team1

    @team1.setter
    def team1(self, team1: str):
        """Sets the team1 of this TeamMatchup.


        :param team1: The team1 of this TeamMatchup.
        :type team1: str
        """

        self._team1 = team1

    @property
    def team1_wins(self) -> int:
        """Gets the team1_wins of this TeamMatchup.


        :return: The team1_wins of this TeamMatchup.
        :rtype: int
        """
        return self._team1_wins

    @team1_wins.setter
    def team1_wins(self, team1_wins: int):
        """Sets the team1_wins of this TeamMatchup.


        :param team1_wins: The team1_wins of this TeamMatchup.
        :type team1_wins: int
        """

        self._team1_wins = team1_wins

    @property
    def team2(self) -> str:
        """Gets the team2 of this TeamMatchup.


        :return: The team2 of this TeamMatchup.
        :rtype: str
        """
        return self._team2

    @team2.setter
    def team2(self, team2: str):
        """Sets the team2 of this TeamMatchup.


        :param team2: The team2 of this TeamMatchup.
        :type team2: str
        """

        self._team2 = team2

    @property
    def team2_wins(self) -> int:
        """Gets the team2_wins of this TeamMatchup.


        :return: The team2_wins of this TeamMatchup.
        :rtype: int
        """
        return self._team2_wins

    @team2_wins.setter
    def team2_wins(self, team2_wins: int):
        """Sets the team2_wins of this TeamMatchup.


        :param team2_wins: The team2_wins of this TeamMatchup.
        :type team2_wins: int
        """

        self._team2_wins = team2_wins

    @property
    def ties(self) -> int:
        """Gets the ties of this TeamMatchup.


        :return: The ties of this TeamMatchup.
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties: int):
        """Sets the ties of this TeamMatchup.


        :param ties: The ties of this TeamMatchup.
        :type ties: int
        """

        self._ties = ties
