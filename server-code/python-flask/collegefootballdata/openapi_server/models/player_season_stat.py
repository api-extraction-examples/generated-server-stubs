from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PlayerSeasonStat(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, conference=None, player=None, player_id=None, season=None, stat=None, stat_type=None, team=None):  # noqa: E501
        """PlayerSeasonStat - a model defined in OpenAPI

        :param category: The category of this PlayerSeasonStat.  # noqa: E501
        :type category: str
        :param conference: The conference of this PlayerSeasonStat.  # noqa: E501
        :type conference: str
        :param player: The player of this PlayerSeasonStat.  # noqa: E501
        :type player: str
        :param player_id: The player_id of this PlayerSeasonStat.  # noqa: E501
        :type player_id: int
        :param season: The season of this PlayerSeasonStat.  # noqa: E501
        :type season: int
        :param stat: The stat of this PlayerSeasonStat.  # noqa: E501
        :type stat: float
        :param stat_type: The stat_type of this PlayerSeasonStat.  # noqa: E501
        :type stat_type: str
        :param team: The team of this PlayerSeasonStat.  # noqa: E501
        :type team: str
        """
        self.openapi_types = {
            'category': str,
            'conference': str,
            'player': str,
            'player_id': int,
            'season': int,
            'stat': float,
            'stat_type': str,
            'team': str
        }

        self.attribute_map = {
            'category': 'category',
            'conference': 'conference',
            'player': 'player',
            'player_id': 'playerId',
            'season': 'season',
            'stat': 'stat',
            'stat_type': 'statType',
            'team': 'team'
        }

        self._category = category
        self._conference = conference
        self._player = player
        self._player_id = player_id
        self._season = season
        self._stat = stat
        self._stat_type = stat_type
        self._team = team

    @classmethod
    def from_dict(cls, dikt) -> 'PlayerSeasonStat':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PlayerSeasonStat of this PlayerSeasonStat.  # noqa: E501
        :rtype: PlayerSeasonStat
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this PlayerSeasonStat.


        :return: The category of this PlayerSeasonStat.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this PlayerSeasonStat.


        :param category: The category of this PlayerSeasonStat.
        :type category: str
        """

        self._category = category

    @property
    def conference(self) -> str:
        """Gets the conference of this PlayerSeasonStat.


        :return: The conference of this PlayerSeasonStat.
        :rtype: str
        """
        return self._conference

    @conference.setter
    def conference(self, conference: str):
        """Sets the conference of this PlayerSeasonStat.


        :param conference: The conference of this PlayerSeasonStat.
        :type conference: str
        """

        self._conference = conference

    @property
    def player(self) -> str:
        """Gets the player of this PlayerSeasonStat.


        :return: The player of this PlayerSeasonStat.
        :rtype: str
        """
        return self._player

    @player.setter
    def player(self, player: str):
        """Sets the player of this PlayerSeasonStat.


        :param player: The player of this PlayerSeasonStat.
        :type player: str
        """

        self._player = player

    @property
    def player_id(self) -> int:
        """Gets the player_id of this PlayerSeasonStat.


        :return: The player_id of this PlayerSeasonStat.
        :rtype: int
        """
        return self._player_id

    @player_id.setter
    def player_id(self, player_id: int):
        """Sets the player_id of this PlayerSeasonStat.


        :param player_id: The player_id of this PlayerSeasonStat.
        :type player_id: int
        """

        self._player_id = player_id

    @property
    def season(self) -> int:
        """Gets the season of this PlayerSeasonStat.


        :return: The season of this PlayerSeasonStat.
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season: int):
        """Sets the season of this PlayerSeasonStat.


        :param season: The season of this PlayerSeasonStat.
        :type season: int
        """

        self._season = season

    @property
    def stat(self) -> float:
        """Gets the stat of this PlayerSeasonStat.


        :return: The stat of this PlayerSeasonStat.
        :rtype: float
        """
        return self._stat

    @stat.setter
    def stat(self, stat: float):
        """Sets the stat of this PlayerSeasonStat.


        :param stat: The stat of this PlayerSeasonStat.
        :type stat: float
        """

        self._stat = stat

    @property
    def stat_type(self) -> str:
        """Gets the stat_type of this PlayerSeasonStat.


        :return: The stat_type of this PlayerSeasonStat.
        :rtype: str
        """
        return self._stat_type

    @stat_type.setter
    def stat_type(self, stat_type: str):
        """Sets the stat_type of this PlayerSeasonStat.


        :param stat_type: The stat_type of this PlayerSeasonStat.
        :type stat_type: str
        """

        self._stat_type = stat_type

    @property
    def team(self) -> str:
        """Gets the team of this PlayerSeasonStat.


        :return: The team of this PlayerSeasonStat.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this PlayerSeasonStat.


        :param team: The team of this PlayerSeasonStat.
        :type team: str
        """

        self._team = team
