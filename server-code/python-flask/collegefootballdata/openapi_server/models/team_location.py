from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, capacity=None, city=None, country_code=None, dome=None, elevation=None, grass=None, latitude=None, longitude=None, name=None, state=None, timezone=None, venue_id=None, year_constructed=None, zip=None):  # noqa: E501
        """TeamLocation - a model defined in OpenAPI

        :param capacity: The capacity of this TeamLocation.  # noqa: E501
        :type capacity: float
        :param city: The city of this TeamLocation.  # noqa: E501
        :type city: str
        :param country_code: The country_code of this TeamLocation.  # noqa: E501
        :type country_code: str
        :param dome: The dome of this TeamLocation.  # noqa: E501
        :type dome: bool
        :param elevation: The elevation of this TeamLocation.  # noqa: E501
        :type elevation: float
        :param grass: The grass of this TeamLocation.  # noqa: E501
        :type grass: bool
        :param latitude: The latitude of this TeamLocation.  # noqa: E501
        :type latitude: float
        :param longitude: The longitude of this TeamLocation.  # noqa: E501
        :type longitude: float
        :param name: The name of this TeamLocation.  # noqa: E501
        :type name: str
        :param state: The state of this TeamLocation.  # noqa: E501
        :type state: str
        :param timezone: The timezone of this TeamLocation.  # noqa: E501
        :type timezone: str
        :param venue_id: The venue_id of this TeamLocation.  # noqa: E501
        :type venue_id: int
        :param year_constructed: The year_constructed of this TeamLocation.  # noqa: E501
        :type year_constructed: float
        :param zip: The zip of this TeamLocation.  # noqa: E501
        :type zip: str
        """
        self.openapi_types = {
            'capacity': float,
            'city': str,
            'country_code': str,
            'dome': bool,
            'elevation': float,
            'grass': bool,
            'latitude': float,
            'longitude': float,
            'name': str,
            'state': str,
            'timezone': str,
            'venue_id': int,
            'year_constructed': float,
            'zip': str
        }

        self.attribute_map = {
            'capacity': 'capacity',
            'city': 'city',
            'country_code': 'country_code',
            'dome': 'dome',
            'elevation': 'elevation',
            'grass': 'grass',
            'latitude': 'latitude',
            'longitude': 'longitude',
            'name': 'name',
            'state': 'state',
            'timezone': 'timezone',
            'venue_id': 'venue_id',
            'year_constructed': 'year_constructed',
            'zip': 'zip'
        }

        self._capacity = capacity
        self._city = city
        self._country_code = country_code
        self._dome = dome
        self._elevation = elevation
        self._grass = grass
        self._latitude = latitude
        self._longitude = longitude
        self._name = name
        self._state = state
        self._timezone = timezone
        self._venue_id = venue_id
        self._year_constructed = year_constructed
        self._zip = zip

    @classmethod
    def from_dict(cls, dikt) -> 'TeamLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Team_location of this TeamLocation.  # noqa: E501
        :rtype: TeamLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def capacity(self) -> float:
        """Gets the capacity of this TeamLocation.


        :return: The capacity of this TeamLocation.
        :rtype: float
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: float):
        """Sets the capacity of this TeamLocation.


        :param capacity: The capacity of this TeamLocation.
        :type capacity: float
        """

        self._capacity = capacity

    @property
    def city(self) -> str:
        """Gets the city of this TeamLocation.


        :return: The city of this TeamLocation.
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city: str):
        """Sets the city of this TeamLocation.


        :param city: The city of this TeamLocation.
        :type city: str
        """

        self._city = city

    @property
    def country_code(self) -> str:
        """Gets the country_code of this TeamLocation.


        :return: The country_code of this TeamLocation.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this TeamLocation.


        :param country_code: The country_code of this TeamLocation.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def dome(self) -> bool:
        """Gets the dome of this TeamLocation.


        :return: The dome of this TeamLocation.
        :rtype: bool
        """
        return self._dome

    @dome.setter
    def dome(self, dome: bool):
        """Sets the dome of this TeamLocation.


        :param dome: The dome of this TeamLocation.
        :type dome: bool
        """

        self._dome = dome

    @property
    def elevation(self) -> float:
        """Gets the elevation of this TeamLocation.


        :return: The elevation of this TeamLocation.
        :rtype: float
        """
        return self._elevation

    @elevation.setter
    def elevation(self, elevation: float):
        """Sets the elevation of this TeamLocation.


        :param elevation: The elevation of this TeamLocation.
        :type elevation: float
        """

        self._elevation = elevation

    @property
    def grass(self) -> bool:
        """Gets the grass of this TeamLocation.


        :return: The grass of this TeamLocation.
        :rtype: bool
        """
        return self._grass

    @grass.setter
    def grass(self, grass: bool):
        """Sets the grass of this TeamLocation.


        :param grass: The grass of this TeamLocation.
        :type grass: bool
        """

        self._grass = grass

    @property
    def latitude(self) -> float:
        """Gets the latitude of this TeamLocation.


        :return: The latitude of this TeamLocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude: float):
        """Sets the latitude of this TeamLocation.


        :param latitude: The latitude of this TeamLocation.
        :type latitude: float
        """

        self._latitude = latitude

    @property
    def longitude(self) -> float:
        """Gets the longitude of this TeamLocation.


        :return: The longitude of this TeamLocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude: float):
        """Sets the longitude of this TeamLocation.


        :param longitude: The longitude of this TeamLocation.
        :type longitude: float
        """

        self._longitude = longitude

    @property
    def name(self) -> str:
        """Gets the name of this TeamLocation.


        :return: The name of this TeamLocation.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TeamLocation.


        :param name: The name of this TeamLocation.
        :type name: str
        """

        self._name = name

    @property
    def state(self) -> str:
        """Gets the state of this TeamLocation.


        :return: The state of this TeamLocation.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this TeamLocation.


        :param state: The state of this TeamLocation.
        :type state: str
        """

        self._state = state

    @property
    def timezone(self) -> str:
        """Gets the timezone of this TeamLocation.


        :return: The timezone of this TeamLocation.
        :rtype: str
        """
        return self._timezone

    @timezone.setter
    def timezone(self, timezone: str):
        """Sets the timezone of this TeamLocation.


        :param timezone: The timezone of this TeamLocation.
        :type timezone: str
        """

        self._timezone = timezone

    @property
    def venue_id(self) -> int:
        """Gets the venue_id of this TeamLocation.


        :return: The venue_id of this TeamLocation.
        :rtype: int
        """
        return self._venue_id

    @venue_id.setter
    def venue_id(self, venue_id: int):
        """Sets the venue_id of this TeamLocation.


        :param venue_id: The venue_id of this TeamLocation.
        :type venue_id: int
        """

        self._venue_id = venue_id

    @property
    def year_constructed(self) -> float:
        """Gets the year_constructed of this TeamLocation.


        :return: The year_constructed of this TeamLocation.
        :rtype: float
        """
        return self._year_constructed

    @year_constructed.setter
    def year_constructed(self, year_constructed: float):
        """Sets the year_constructed of this TeamLocation.


        :param year_constructed: The year_constructed of this TeamLocation.
        :type year_constructed: float
        """

        self._year_constructed = year_constructed

    @property
    def zip(self) -> str:
        """Gets the zip of this TeamLocation.


        :return: The zip of this TeamLocation.
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip: str):
        """Sets the zip of this TeamLocation.


        :param zip: The zip of this TeamLocation.
        :type zip: str
        """

        self._zip = zip
