from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ConferenceSPRatingOffense(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, explosiveness=None, pace=None, passing=None, passing_downs=None, rating=None, run_rate=None, rushing=None, standard_downs=None, success=None):  # noqa: E501
        """ConferenceSPRatingOffense - a model defined in OpenAPI

        :param explosiveness: The explosiveness of this ConferenceSPRatingOffense.  # noqa: E501
        :type explosiveness: float
        :param pace: The pace of this ConferenceSPRatingOffense.  # noqa: E501
        :type pace: float
        :param passing: The passing of this ConferenceSPRatingOffense.  # noqa: E501
        :type passing: float
        :param passing_downs: The passing_downs of this ConferenceSPRatingOffense.  # noqa: E501
        :type passing_downs: float
        :param rating: The rating of this ConferenceSPRatingOffense.  # noqa: E501
        :type rating: float
        :param run_rate: The run_rate of this ConferenceSPRatingOffense.  # noqa: E501
        :type run_rate: float
        :param rushing: The rushing of this ConferenceSPRatingOffense.  # noqa: E501
        :type rushing: float
        :param standard_downs: The standard_downs of this ConferenceSPRatingOffense.  # noqa: E501
        :type standard_downs: float
        :param success: The success of this ConferenceSPRatingOffense.  # noqa: E501
        :type success: float
        """
        self.openapi_types = {
            'explosiveness': float,
            'pace': float,
            'passing': float,
            'passing_downs': float,
            'rating': float,
            'run_rate': float,
            'rushing': float,
            'standard_downs': float,
            'success': float
        }

        self.attribute_map = {
            'explosiveness': 'explosiveness',
            'pace': 'pace',
            'passing': 'passing',
            'passing_downs': 'passingDowns',
            'rating': 'rating',
            'run_rate': 'runRate',
            'rushing': 'rushing',
            'standard_downs': 'standardDowns',
            'success': 'success'
        }

        self._explosiveness = explosiveness
        self._pace = pace
        self._passing = passing
        self._passing_downs = passing_downs
        self._rating = rating
        self._run_rate = run_rate
        self._rushing = rushing
        self._standard_downs = standard_downs
        self._success = success

    @classmethod
    def from_dict(cls, dikt) -> 'ConferenceSPRatingOffense':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConferenceSPRating_offense of this ConferenceSPRatingOffense.  # noqa: E501
        :rtype: ConferenceSPRatingOffense
        """
        return util.deserialize_model(dikt, cls)

    @property
    def explosiveness(self) -> float:
        """Gets the explosiveness of this ConferenceSPRatingOffense.


        :return: The explosiveness of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._explosiveness

    @explosiveness.setter
    def explosiveness(self, explosiveness: float):
        """Sets the explosiveness of this ConferenceSPRatingOffense.


        :param explosiveness: The explosiveness of this ConferenceSPRatingOffense.
        :type explosiveness: float
        """

        self._explosiveness = explosiveness

    @property
    def pace(self) -> float:
        """Gets the pace of this ConferenceSPRatingOffense.


        :return: The pace of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._pace

    @pace.setter
    def pace(self, pace: float):
        """Sets the pace of this ConferenceSPRatingOffense.


        :param pace: The pace of this ConferenceSPRatingOffense.
        :type pace: float
        """

        self._pace = pace

    @property
    def passing(self) -> float:
        """Gets the passing of this ConferenceSPRatingOffense.


        :return: The passing of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._passing

    @passing.setter
    def passing(self, passing: float):
        """Sets the passing of this ConferenceSPRatingOffense.


        :param passing: The passing of this ConferenceSPRatingOffense.
        :type passing: float
        """

        self._passing = passing

    @property
    def passing_downs(self) -> float:
        """Gets the passing_downs of this ConferenceSPRatingOffense.


        :return: The passing_downs of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._passing_downs

    @passing_downs.setter
    def passing_downs(self, passing_downs: float):
        """Sets the passing_downs of this ConferenceSPRatingOffense.


        :param passing_downs: The passing_downs of this ConferenceSPRatingOffense.
        :type passing_downs: float
        """

        self._passing_downs = passing_downs

    @property
    def rating(self) -> float:
        """Gets the rating of this ConferenceSPRatingOffense.


        :return: The rating of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._rating

    @rating.setter
    def rating(self, rating: float):
        """Sets the rating of this ConferenceSPRatingOffense.


        :param rating: The rating of this ConferenceSPRatingOffense.
        :type rating: float
        """

        self._rating = rating

    @property
    def run_rate(self) -> float:
        """Gets the run_rate of this ConferenceSPRatingOffense.


        :return: The run_rate of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._run_rate

    @run_rate.setter
    def run_rate(self, run_rate: float):
        """Sets the run_rate of this ConferenceSPRatingOffense.


        :param run_rate: The run_rate of this ConferenceSPRatingOffense.
        :type run_rate: float
        """

        self._run_rate = run_rate

    @property
    def rushing(self) -> float:
        """Gets the rushing of this ConferenceSPRatingOffense.


        :return: The rushing of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._rushing

    @rushing.setter
    def rushing(self, rushing: float):
        """Sets the rushing of this ConferenceSPRatingOffense.


        :param rushing: The rushing of this ConferenceSPRatingOffense.
        :type rushing: float
        """

        self._rushing = rushing

    @property
    def standard_downs(self) -> float:
        """Gets the standard_downs of this ConferenceSPRatingOffense.


        :return: The standard_downs of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._standard_downs

    @standard_downs.setter
    def standard_downs(self, standard_downs: float):
        """Sets the standard_downs of this ConferenceSPRatingOffense.


        :param standard_downs: The standard_downs of this ConferenceSPRatingOffense.
        :type standard_downs: float
        """

        self._standard_downs = standard_downs

    @property
    def success(self) -> float:
        """Gets the success of this ConferenceSPRatingOffense.


        :return: The success of this ConferenceSPRatingOffense.
        :rtype: float
        """
        return self._success

    @success.setter
    def success(self, success: float):
        """Sets the success of this ConferenceSPRatingOffense.


        :param success: The success of this ConferenceSPRatingOffense.
        :type success: float
        """

        self._success = success
