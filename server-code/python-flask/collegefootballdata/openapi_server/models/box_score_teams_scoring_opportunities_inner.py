from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class BoxScoreTeamsScoringOpportunitiesInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, opportunities=None, points=None, points_per_opportunity=None, team=None):  # noqa: E501
        """BoxScoreTeamsScoringOpportunitiesInner - a model defined in OpenAPI

        :param opportunities: The opportunities of this BoxScoreTeamsScoringOpportunitiesInner.  # noqa: E501
        :type opportunities: int
        :param points: The points of this BoxScoreTeamsScoringOpportunitiesInner.  # noqa: E501
        :type points: int
        :param points_per_opportunity: The points_per_opportunity of this BoxScoreTeamsScoringOpportunitiesInner.  # noqa: E501
        :type points_per_opportunity: float
        :param team: The team of this BoxScoreTeamsScoringOpportunitiesInner.  # noqa: E501
        :type team: str
        """
        self.openapi_types = {
            'opportunities': int,
            'points': int,
            'points_per_opportunity': float,
            'team': str
        }

        self.attribute_map = {
            'opportunities': 'opportunities',
            'points': 'points',
            'points_per_opportunity': 'pointsPerOpportunity',
            'team': 'team'
        }

        self._opportunities = opportunities
        self._points = points
        self._points_per_opportunity = points_per_opportunity
        self._team = team

    @classmethod
    def from_dict(cls, dikt) -> 'BoxScoreTeamsScoringOpportunitiesInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BoxScore_teams_scoringOpportunities_inner of this BoxScoreTeamsScoringOpportunitiesInner.  # noqa: E501
        :rtype: BoxScoreTeamsScoringOpportunitiesInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def opportunities(self) -> int:
        """Gets the opportunities of this BoxScoreTeamsScoringOpportunitiesInner.


        :return: The opportunities of this BoxScoreTeamsScoringOpportunitiesInner.
        :rtype: int
        """
        return self._opportunities

    @opportunities.setter
    def opportunities(self, opportunities: int):
        """Sets the opportunities of this BoxScoreTeamsScoringOpportunitiesInner.


        :param opportunities: The opportunities of this BoxScoreTeamsScoringOpportunitiesInner.
        :type opportunities: int
        """

        self._opportunities = opportunities

    @property
    def points(self) -> int:
        """Gets the points of this BoxScoreTeamsScoringOpportunitiesInner.


        :return: The points of this BoxScoreTeamsScoringOpportunitiesInner.
        :rtype: int
        """
        return self._points

    @points.setter
    def points(self, points: int):
        """Sets the points of this BoxScoreTeamsScoringOpportunitiesInner.


        :param points: The points of this BoxScoreTeamsScoringOpportunitiesInner.
        :type points: int
        """

        self._points = points

    @property
    def points_per_opportunity(self) -> float:
        """Gets the points_per_opportunity of this BoxScoreTeamsScoringOpportunitiesInner.


        :return: The points_per_opportunity of this BoxScoreTeamsScoringOpportunitiesInner.
        :rtype: float
        """
        return self._points_per_opportunity

    @points_per_opportunity.setter
    def points_per_opportunity(self, points_per_opportunity: float):
        """Sets the points_per_opportunity of this BoxScoreTeamsScoringOpportunitiesInner.


        :param points_per_opportunity: The points_per_opportunity of this BoxScoreTeamsScoringOpportunitiesInner.
        :type points_per_opportunity: float
        """

        self._points_per_opportunity = points_per_opportunity

    @property
    def team(self) -> str:
        """Gets the team of this BoxScoreTeamsScoringOpportunitiesInner.


        :return: The team of this BoxScoreTeamsScoringOpportunitiesInner.
        :rtype: str
        """
        return self._team

    @team.setter
    def team(self, team: str):
        """Sets the team of this BoxScoreTeamsScoringOpportunitiesInner.


        :param team: The team of this BoxScoreTeamsScoringOpportunitiesInner.
        :type team: str
        """

        self._team = team
