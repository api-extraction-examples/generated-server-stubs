from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class TeamSeason(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, games=None, losses=None, postseason_rank=None, preseason_rank=None, school=None, sp_defense=None, sp_offense=None, sp_overall=None, srs=None, ties=None, wins=None, year=None):  # noqa: E501
        """TeamSeason - a model defined in OpenAPI

        :param games: The games of this TeamSeason.  # noqa: E501
        :type games: int
        :param losses: The losses of this TeamSeason.  # noqa: E501
        :type losses: int
        :param postseason_rank: The postseason_rank of this TeamSeason.  # noqa: E501
        :type postseason_rank: int
        :param preseason_rank: The preseason_rank of this TeamSeason.  # noqa: E501
        :type preseason_rank: int
        :param school: The school of this TeamSeason.  # noqa: E501
        :type school: str
        :param sp_defense: The sp_defense of this TeamSeason.  # noqa: E501
        :type sp_defense: float
        :param sp_offense: The sp_offense of this TeamSeason.  # noqa: E501
        :type sp_offense: float
        :param sp_overall: The sp_overall of this TeamSeason.  # noqa: E501
        :type sp_overall: float
        :param srs: The srs of this TeamSeason.  # noqa: E501
        :type srs: float
        :param ties: The ties of this TeamSeason.  # noqa: E501
        :type ties: int
        :param wins: The wins of this TeamSeason.  # noqa: E501
        :type wins: int
        :param year: The year of this TeamSeason.  # noqa: E501
        :type year: str
        """
        self.openapi_types = {
            'games': int,
            'losses': int,
            'postseason_rank': int,
            'preseason_rank': int,
            'school': str,
            'sp_defense': float,
            'sp_offense': float,
            'sp_overall': float,
            'srs': float,
            'ties': int,
            'wins': int,
            'year': str
        }

        self.attribute_map = {
            'games': 'games',
            'losses': 'losses',
            'postseason_rank': 'postseason_rank',
            'preseason_rank': 'preseason_rank',
            'school': 'school',
            'sp_defense': 'sp_defense',
            'sp_offense': 'sp_offense',
            'sp_overall': 'sp_overall',
            'srs': 'srs',
            'ties': 'ties',
            'wins': 'wins',
            'year': 'year'
        }

        self._games = games
        self._losses = losses
        self._postseason_rank = postseason_rank
        self._preseason_rank = preseason_rank
        self._school = school
        self._sp_defense = sp_defense
        self._sp_offense = sp_offense
        self._sp_overall = sp_overall
        self._srs = srs
        self._ties = ties
        self._wins = wins
        self._year = year

    @classmethod
    def from_dict(cls, dikt) -> 'TeamSeason':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TeamSeason of this TeamSeason.  # noqa: E501
        :rtype: TeamSeason
        """
        return util.deserialize_model(dikt, cls)

    @property
    def games(self) -> int:
        """Gets the games of this TeamSeason.


        :return: The games of this TeamSeason.
        :rtype: int
        """
        return self._games

    @games.setter
    def games(self, games: int):
        """Sets the games of this TeamSeason.


        :param games: The games of this TeamSeason.
        :type games: int
        """

        self._games = games

    @property
    def losses(self) -> int:
        """Gets the losses of this TeamSeason.


        :return: The losses of this TeamSeason.
        :rtype: int
        """
        return self._losses

    @losses.setter
    def losses(self, losses: int):
        """Sets the losses of this TeamSeason.


        :param losses: The losses of this TeamSeason.
        :type losses: int
        """

        self._losses = losses

    @property
    def postseason_rank(self) -> int:
        """Gets the postseason_rank of this TeamSeason.

        Final ranking in the AP poll  # noqa: E501

        :return: The postseason_rank of this TeamSeason.
        :rtype: int
        """
        return self._postseason_rank

    @postseason_rank.setter
    def postseason_rank(self, postseason_rank: int):
        """Sets the postseason_rank of this TeamSeason.

        Final ranking in the AP poll  # noqa: E501

        :param postseason_rank: The postseason_rank of this TeamSeason.
        :type postseason_rank: int
        """

        self._postseason_rank = postseason_rank

    @property
    def preseason_rank(self) -> int:
        """Gets the preseason_rank of this TeamSeason.

        Rank in the AP preseason poll  # noqa: E501

        :return: The preseason_rank of this TeamSeason.
        :rtype: int
        """
        return self._preseason_rank

    @preseason_rank.setter
    def preseason_rank(self, preseason_rank: int):
        """Sets the preseason_rank of this TeamSeason.

        Rank in the AP preseason poll  # noqa: E501

        :param preseason_rank: The preseason_rank of this TeamSeason.
        :type preseason_rank: int
        """

        self._preseason_rank = preseason_rank

    @property
    def school(self) -> str:
        """Gets the school of this TeamSeason.


        :return: The school of this TeamSeason.
        :rtype: str
        """
        return self._school

    @school.setter
    def school(self, school: str):
        """Sets the school of this TeamSeason.


        :param school: The school of this TeamSeason.
        :type school: str
        """

        self._school = school

    @property
    def sp_defense(self) -> float:
        """Gets the sp_defense of this TeamSeason.

        Final SP+ defensive rating  # noqa: E501

        :return: The sp_defense of this TeamSeason.
        :rtype: float
        """
        return self._sp_defense

    @sp_defense.setter
    def sp_defense(self, sp_defense: float):
        """Sets the sp_defense of this TeamSeason.

        Final SP+ defensive rating  # noqa: E501

        :param sp_defense: The sp_defense of this TeamSeason.
        :type sp_defense: float
        """

        self._sp_defense = sp_defense

    @property
    def sp_offense(self) -> float:
        """Gets the sp_offense of this TeamSeason.

        Final SP+ offensive rating  # noqa: E501

        :return: The sp_offense of this TeamSeason.
        :rtype: float
        """
        return self._sp_offense

    @sp_offense.setter
    def sp_offense(self, sp_offense: float):
        """Sets the sp_offense of this TeamSeason.

        Final SP+ offensive rating  # noqa: E501

        :param sp_offense: The sp_offense of this TeamSeason.
        :type sp_offense: float
        """

        self._sp_offense = sp_offense

    @property
    def sp_overall(self) -> float:
        """Gets the sp_overall of this TeamSeason.

        Final overall SP+ rating  # noqa: E501

        :return: The sp_overall of this TeamSeason.
        :rtype: float
        """
        return self._sp_overall

    @sp_overall.setter
    def sp_overall(self, sp_overall: float):
        """Sets the sp_overall of this TeamSeason.

        Final overall SP+ rating  # noqa: E501

        :param sp_overall: The sp_overall of this TeamSeason.
        :type sp_overall: float
        """

        self._sp_overall = sp_overall

    @property
    def srs(self) -> float:
        """Gets the srs of this TeamSeason.

        Final SRS rankings  # noqa: E501

        :return: The srs of this TeamSeason.
        :rtype: float
        """
        return self._srs

    @srs.setter
    def srs(self, srs: float):
        """Sets the srs of this TeamSeason.

        Final SRS rankings  # noqa: E501

        :param srs: The srs of this TeamSeason.
        :type srs: float
        """

        self._srs = srs

    @property
    def ties(self) -> int:
        """Gets the ties of this TeamSeason.


        :return: The ties of this TeamSeason.
        :rtype: int
        """
        return self._ties

    @ties.setter
    def ties(self, ties: int):
        """Sets the ties of this TeamSeason.


        :param ties: The ties of this TeamSeason.
        :type ties: int
        """

        self._ties = ties

    @property
    def wins(self) -> int:
        """Gets the wins of this TeamSeason.


        :return: The wins of this TeamSeason.
        :rtype: int
        """
        return self._wins

    @wins.setter
    def wins(self, wins: int):
        """Sets the wins of this TeamSeason.


        :param wins: The wins of this TeamSeason.
        :type wins: int
        """

        self._wins = wins

    @property
    def year(self) -> str:
        """Gets the year of this TeamSeason.


        :return: The year of this TeamSeason.
        :rtype: str
        """
        return self._year

    @year.setter
    def year(self, year: str):
        """Sets the year of this TeamSeason.


        :param year: The year of this TeamSeason.
        :type year: str
        """

        self._year = year
