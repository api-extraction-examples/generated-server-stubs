from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.device_mapping import DeviceMapping
from openapi_server.models.host_config_all_of_log_config import HostConfigAllOfLogConfig
from openapi_server.models.host_config_all_of_port_bindings import HostConfigAllOfPortBindings
from openapi_server.models.mount import Mount
from openapi_server.models.resources_blkio_weight_device_inner import ResourcesBlkioWeightDeviceInner
from openapi_server.models.resources_ulimits_inner import ResourcesUlimitsInner
from openapi_server.models.restart_policy import RestartPolicy
from openapi_server.models.throttle_device import ThrottleDevice
from openapi_server import util

from openapi_server.models.device_mapping import DeviceMapping  # noqa: E501
from openapi_server.models.host_config_all_of_log_config import HostConfigAllOfLogConfig  # noqa: E501
from openapi_server.models.host_config_all_of_port_bindings import HostConfigAllOfPortBindings  # noqa: E501
from openapi_server.models.mount import Mount  # noqa: E501
from openapi_server.models.resources_blkio_weight_device_inner import ResourcesBlkioWeightDeviceInner  # noqa: E501
from openapi_server.models.resources_ulimits_inner import ResourcesUlimitsInner  # noqa: E501
from openapi_server.models.restart_policy import RestartPolicy  # noqa: E501
from openapi_server.models.throttle_device import ThrottleDevice  # noqa: E501

class HostConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blkio_device_read_bps=None, blkio_device_read_i_ops=None, blkio_device_write_bps=None, blkio_device_write_i_ops=None, blkio_weight=None, blkio_weight_device=None, cgroup_parent=None, cpu_count=None, cpu_percent=None, cpu_period=None, cpu_quota=None, cpu_realtime_period=None, cpu_realtime_runtime=None, cpu_shares=None, cpuset_cpus=None, cpuset_mems=None, device_cgroup_rules=None, devices=None, disk_quota=None, io_maximum_bandwidth=None, io_maximum_i_ops=None, kernel_memory=None, memory=0, memory_reservation=None, memory_swap=None, memory_swappiness=None, nano_cpus=None, oom_kill_disable=None, pids_limit=None, ulimits=None, auto_remove=None, binds=None, cap_add=None, cap_drop=None, cgroup=None, console_size=None, container_id_file=None, dns=None, dns_options=None, dns_search=None, extra_hosts=None, group_add=None, ipc_mode=None, isolation=None, links=None, log_config=None, mounts=None, network_mode=None, oom_score_adj=None, pid_mode=None, port_bindings=None, privileged=None, publish_all_ports=None, readonly_rootfs=None, restart_policy=None, runtime=None, security_opt=None, shm_size=None, storage_opt=None, sysctls=None, tmpfs=None, uts_mode=None, userns_mode=None, volume_driver=None, volumes_from=None):  # noqa: E501
        """HostConfig - a model defined in OpenAPI

        :param blkio_device_read_bps: The blkio_device_read_bps of this HostConfig.  # noqa: E501
        :type blkio_device_read_bps: List[ThrottleDevice]
        :param blkio_device_read_i_ops: The blkio_device_read_i_ops of this HostConfig.  # noqa: E501
        :type blkio_device_read_i_ops: List[ThrottleDevice]
        :param blkio_device_write_bps: The blkio_device_write_bps of this HostConfig.  # noqa: E501
        :type blkio_device_write_bps: List[ThrottleDevice]
        :param blkio_device_write_i_ops: The blkio_device_write_i_ops of this HostConfig.  # noqa: E501
        :type blkio_device_write_i_ops: List[ThrottleDevice]
        :param blkio_weight: The blkio_weight of this HostConfig.  # noqa: E501
        :type blkio_weight: int
        :param blkio_weight_device: The blkio_weight_device of this HostConfig.  # noqa: E501
        :type blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]
        :param cgroup_parent: The cgroup_parent of this HostConfig.  # noqa: E501
        :type cgroup_parent: str
        :param cpu_count: The cpu_count of this HostConfig.  # noqa: E501
        :type cpu_count: int
        :param cpu_percent: The cpu_percent of this HostConfig.  # noqa: E501
        :type cpu_percent: int
        :param cpu_period: The cpu_period of this HostConfig.  # noqa: E501
        :type cpu_period: int
        :param cpu_quota: The cpu_quota of this HostConfig.  # noqa: E501
        :type cpu_quota: int
        :param cpu_realtime_period: The cpu_realtime_period of this HostConfig.  # noqa: E501
        :type cpu_realtime_period: int
        :param cpu_realtime_runtime: The cpu_realtime_runtime of this HostConfig.  # noqa: E501
        :type cpu_realtime_runtime: int
        :param cpu_shares: The cpu_shares of this HostConfig.  # noqa: E501
        :type cpu_shares: int
        :param cpuset_cpus: The cpuset_cpus of this HostConfig.  # noqa: E501
        :type cpuset_cpus: str
        :param cpuset_mems: The cpuset_mems of this HostConfig.  # noqa: E501
        :type cpuset_mems: str
        :param device_cgroup_rules: The device_cgroup_rules of this HostConfig.  # noqa: E501
        :type device_cgroup_rules: List[str]
        :param devices: The devices of this HostConfig.  # noqa: E501
        :type devices: List[DeviceMapping]
        :param disk_quota: The disk_quota of this HostConfig.  # noqa: E501
        :type disk_quota: int
        :param io_maximum_bandwidth: The io_maximum_bandwidth of this HostConfig.  # noqa: E501
        :type io_maximum_bandwidth: int
        :param io_maximum_i_ops: The io_maximum_i_ops of this HostConfig.  # noqa: E501
        :type io_maximum_i_ops: int
        :param kernel_memory: The kernel_memory of this HostConfig.  # noqa: E501
        :type kernel_memory: int
        :param memory: The memory of this HostConfig.  # noqa: E501
        :type memory: int
        :param memory_reservation: The memory_reservation of this HostConfig.  # noqa: E501
        :type memory_reservation: int
        :param memory_swap: The memory_swap of this HostConfig.  # noqa: E501
        :type memory_swap: int
        :param memory_swappiness: The memory_swappiness of this HostConfig.  # noqa: E501
        :type memory_swappiness: int
        :param nano_cpus: The nano_cpus of this HostConfig.  # noqa: E501
        :type nano_cpus: int
        :param oom_kill_disable: The oom_kill_disable of this HostConfig.  # noqa: E501
        :type oom_kill_disable: bool
        :param pids_limit: The pids_limit of this HostConfig.  # noqa: E501
        :type pids_limit: int
        :param ulimits: The ulimits of this HostConfig.  # noqa: E501
        :type ulimits: List[ResourcesUlimitsInner]
        :param auto_remove: The auto_remove of this HostConfig.  # noqa: E501
        :type auto_remove: bool
        :param binds: The binds of this HostConfig.  # noqa: E501
        :type binds: List[str]
        :param cap_add: The cap_add of this HostConfig.  # noqa: E501
        :type cap_add: List[str]
        :param cap_drop: The cap_drop of this HostConfig.  # noqa: E501
        :type cap_drop: List[str]
        :param cgroup: The cgroup of this HostConfig.  # noqa: E501
        :type cgroup: str
        :param console_size: The console_size of this HostConfig.  # noqa: E501
        :type console_size: List[int]
        :param container_id_file: The container_id_file of this HostConfig.  # noqa: E501
        :type container_id_file: str
        :param dns: The dns of this HostConfig.  # noqa: E501
        :type dns: List[str]
        :param dns_options: The dns_options of this HostConfig.  # noqa: E501
        :type dns_options: List[str]
        :param dns_search: The dns_search of this HostConfig.  # noqa: E501
        :type dns_search: List[str]
        :param extra_hosts: The extra_hosts of this HostConfig.  # noqa: E501
        :type extra_hosts: List[str]
        :param group_add: The group_add of this HostConfig.  # noqa: E501
        :type group_add: List[str]
        :param ipc_mode: The ipc_mode of this HostConfig.  # noqa: E501
        :type ipc_mode: str
        :param isolation: The isolation of this HostConfig.  # noqa: E501
        :type isolation: str
        :param links: The links of this HostConfig.  # noqa: E501
        :type links: List[str]
        :param log_config: The log_config of this HostConfig.  # noqa: E501
        :type log_config: HostConfigAllOfLogConfig
        :param mounts: The mounts of this HostConfig.  # noqa: E501
        :type mounts: List[Mount]
        :param network_mode: The network_mode of this HostConfig.  # noqa: E501
        :type network_mode: str
        :param oom_score_adj: The oom_score_adj of this HostConfig.  # noqa: E501
        :type oom_score_adj: int
        :param pid_mode: The pid_mode of this HostConfig.  # noqa: E501
        :type pid_mode: str
        :param port_bindings: The port_bindings of this HostConfig.  # noqa: E501
        :type port_bindings: Dict[str, HostConfigAllOfPortBindings]
        :param privileged: The privileged of this HostConfig.  # noqa: E501
        :type privileged: bool
        :param publish_all_ports: The publish_all_ports of this HostConfig.  # noqa: E501
        :type publish_all_ports: bool
        :param readonly_rootfs: The readonly_rootfs of this HostConfig.  # noqa: E501
        :type readonly_rootfs: bool
        :param restart_policy: The restart_policy of this HostConfig.  # noqa: E501
        :type restart_policy: RestartPolicy
        :param runtime: The runtime of this HostConfig.  # noqa: E501
        :type runtime: str
        :param security_opt: The security_opt of this HostConfig.  # noqa: E501
        :type security_opt: List[str]
        :param shm_size: The shm_size of this HostConfig.  # noqa: E501
        :type shm_size: int
        :param storage_opt: The storage_opt of this HostConfig.  # noqa: E501
        :type storage_opt: Dict[str, str]
        :param sysctls: The sysctls of this HostConfig.  # noqa: E501
        :type sysctls: Dict[str, str]
        :param tmpfs: The tmpfs of this HostConfig.  # noqa: E501
        :type tmpfs: Dict[str, str]
        :param uts_mode: The uts_mode of this HostConfig.  # noqa: E501
        :type uts_mode: str
        :param userns_mode: The userns_mode of this HostConfig.  # noqa: E501
        :type userns_mode: str
        :param volume_driver: The volume_driver of this HostConfig.  # noqa: E501
        :type volume_driver: str
        :param volumes_from: The volumes_from of this HostConfig.  # noqa: E501
        :type volumes_from: List[str]
        """
        self.openapi_types = {
            'blkio_device_read_bps': List[ThrottleDevice],
            'blkio_device_read_i_ops': List[ThrottleDevice],
            'blkio_device_write_bps': List[ThrottleDevice],
            'blkio_device_write_i_ops': List[ThrottleDevice],
            'blkio_weight': int,
            'blkio_weight_device': List[ResourcesBlkioWeightDeviceInner],
            'cgroup_parent': str,
            'cpu_count': int,
            'cpu_percent': int,
            'cpu_period': int,
            'cpu_quota': int,
            'cpu_realtime_period': int,
            'cpu_realtime_runtime': int,
            'cpu_shares': int,
            'cpuset_cpus': str,
            'cpuset_mems': str,
            'device_cgroup_rules': List[str],
            'devices': List[DeviceMapping],
            'disk_quota': int,
            'io_maximum_bandwidth': int,
            'io_maximum_i_ops': int,
            'kernel_memory': int,
            'memory': int,
            'memory_reservation': int,
            'memory_swap': int,
            'memory_swappiness': int,
            'nano_cpus': int,
            'oom_kill_disable': bool,
            'pids_limit': int,
            'ulimits': List[ResourcesUlimitsInner],
            'auto_remove': bool,
            'binds': List[str],
            'cap_add': List[str],
            'cap_drop': List[str],
            'cgroup': str,
            'console_size': List[int],
            'container_id_file': str,
            'dns': List[str],
            'dns_options': List[str],
            'dns_search': List[str],
            'extra_hosts': List[str],
            'group_add': List[str],
            'ipc_mode': str,
            'isolation': str,
            'links': List[str],
            'log_config': HostConfigAllOfLogConfig,
            'mounts': List[Mount],
            'network_mode': str,
            'oom_score_adj': int,
            'pid_mode': str,
            'port_bindings': Dict[str, HostConfigAllOfPortBindings],
            'privileged': bool,
            'publish_all_ports': bool,
            'readonly_rootfs': bool,
            'restart_policy': RestartPolicy,
            'runtime': str,
            'security_opt': List[str],
            'shm_size': int,
            'storage_opt': Dict[str, str],
            'sysctls': Dict[str, str],
            'tmpfs': Dict[str, str],
            'uts_mode': str,
            'userns_mode': str,
            'volume_driver': str,
            'volumes_from': List[str]
        }

        self.attribute_map = {
            'blkio_device_read_bps': 'BlkioDeviceReadBps',
            'blkio_device_read_i_ops': 'BlkioDeviceReadIOps',
            'blkio_device_write_bps': 'BlkioDeviceWriteBps',
            'blkio_device_write_i_ops': 'BlkioDeviceWriteIOps',
            'blkio_weight': 'BlkioWeight',
            'blkio_weight_device': 'BlkioWeightDevice',
            'cgroup_parent': 'CgroupParent',
            'cpu_count': 'CpuCount',
            'cpu_percent': 'CpuPercent',
            'cpu_period': 'CpuPeriod',
            'cpu_quota': 'CpuQuota',
            'cpu_realtime_period': 'CpuRealtimePeriod',
            'cpu_realtime_runtime': 'CpuRealtimeRuntime',
            'cpu_shares': 'CpuShares',
            'cpuset_cpus': 'CpusetCpus',
            'cpuset_mems': 'CpusetMems',
            'device_cgroup_rules': 'DeviceCgroupRules',
            'devices': 'Devices',
            'disk_quota': 'DiskQuota',
            'io_maximum_bandwidth': 'IOMaximumBandwidth',
            'io_maximum_i_ops': 'IOMaximumIOps',
            'kernel_memory': 'KernelMemory',
            'memory': 'Memory',
            'memory_reservation': 'MemoryReservation',
            'memory_swap': 'MemorySwap',
            'memory_swappiness': 'MemorySwappiness',
            'nano_cpus': 'NanoCPUs',
            'oom_kill_disable': 'OomKillDisable',
            'pids_limit': 'PidsLimit',
            'ulimits': 'Ulimits',
            'auto_remove': 'AutoRemove',
            'binds': 'Binds',
            'cap_add': 'CapAdd',
            'cap_drop': 'CapDrop',
            'cgroup': 'Cgroup',
            'console_size': 'ConsoleSize',
            'container_id_file': 'ContainerIDFile',
            'dns': 'Dns',
            'dns_options': 'DnsOptions',
            'dns_search': 'DnsSearch',
            'extra_hosts': 'ExtraHosts',
            'group_add': 'GroupAdd',
            'ipc_mode': 'IpcMode',
            'isolation': 'Isolation',
            'links': 'Links',
            'log_config': 'LogConfig',
            'mounts': 'Mounts',
            'network_mode': 'NetworkMode',
            'oom_score_adj': 'OomScoreAdj',
            'pid_mode': 'PidMode',
            'port_bindings': 'PortBindings',
            'privileged': 'Privileged',
            'publish_all_ports': 'PublishAllPorts',
            'readonly_rootfs': 'ReadonlyRootfs',
            'restart_policy': 'RestartPolicy',
            'runtime': 'Runtime',
            'security_opt': 'SecurityOpt',
            'shm_size': 'ShmSize',
            'storage_opt': 'StorageOpt',
            'sysctls': 'Sysctls',
            'tmpfs': 'Tmpfs',
            'uts_mode': 'UTSMode',
            'userns_mode': 'UsernsMode',
            'volume_driver': 'VolumeDriver',
            'volumes_from': 'VolumesFrom'
        }

        self._blkio_device_read_bps = blkio_device_read_bps
        self._blkio_device_read_i_ops = blkio_device_read_i_ops
        self._blkio_device_write_bps = blkio_device_write_bps
        self._blkio_device_write_i_ops = blkio_device_write_i_ops
        self._blkio_weight = blkio_weight
        self._blkio_weight_device = blkio_weight_device
        self._cgroup_parent = cgroup_parent
        self._cpu_count = cpu_count
        self._cpu_percent = cpu_percent
        self._cpu_period = cpu_period
        self._cpu_quota = cpu_quota
        self._cpu_realtime_period = cpu_realtime_period
        self._cpu_realtime_runtime = cpu_realtime_runtime
        self._cpu_shares = cpu_shares
        self._cpuset_cpus = cpuset_cpus
        self._cpuset_mems = cpuset_mems
        self._device_cgroup_rules = device_cgroup_rules
        self._devices = devices
        self._disk_quota = disk_quota
        self._io_maximum_bandwidth = io_maximum_bandwidth
        self._io_maximum_i_ops = io_maximum_i_ops
        self._kernel_memory = kernel_memory
        self._memory = memory
        self._memory_reservation = memory_reservation
        self._memory_swap = memory_swap
        self._memory_swappiness = memory_swappiness
        self._nano_cpus = nano_cpus
        self._oom_kill_disable = oom_kill_disable
        self._pids_limit = pids_limit
        self._ulimits = ulimits
        self._auto_remove = auto_remove
        self._binds = binds
        self._cap_add = cap_add
        self._cap_drop = cap_drop
        self._cgroup = cgroup
        self._console_size = console_size
        self._container_id_file = container_id_file
        self._dns = dns
        self._dns_options = dns_options
        self._dns_search = dns_search
        self._extra_hosts = extra_hosts
        self._group_add = group_add
        self._ipc_mode = ipc_mode
        self._isolation = isolation
        self._links = links
        self._log_config = log_config
        self._mounts = mounts
        self._network_mode = network_mode
        self._oom_score_adj = oom_score_adj
        self._pid_mode = pid_mode
        self._port_bindings = port_bindings
        self._privileged = privileged
        self._publish_all_ports = publish_all_ports
        self._readonly_rootfs = readonly_rootfs
        self._restart_policy = restart_policy
        self._runtime = runtime
        self._security_opt = security_opt
        self._shm_size = shm_size
        self._storage_opt = storage_opt
        self._sysctls = sysctls
        self._tmpfs = tmpfs
        self._uts_mode = uts_mode
        self._userns_mode = userns_mode
        self._volume_driver = volume_driver
        self._volumes_from = volumes_from

    @classmethod
    def from_dict(cls, dikt) -> 'HostConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HostConfig of this HostConfig.  # noqa: E501
        :rtype: HostConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blkio_device_read_bps(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_read_bps of this HostConfig.

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_bps of this HostConfig.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_read_bps

    @blkio_device_read_bps.setter
    def blkio_device_read_bps(self, blkio_device_read_bps: List[ThrottleDevice]):
        """Sets the blkio_device_read_bps of this HostConfig.

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_bps: The blkio_device_read_bps of this HostConfig.
        :type blkio_device_read_bps: List[ThrottleDevice]
        """

        self._blkio_device_read_bps = blkio_device_read_bps

    @property
    def blkio_device_read_i_ops(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_read_i_ops of this HostConfig.

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_i_ops of this HostConfig.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_read_i_ops

    @blkio_device_read_i_ops.setter
    def blkio_device_read_i_ops(self, blkio_device_read_i_ops: List[ThrottleDevice]):
        """Sets the blkio_device_read_i_ops of this HostConfig.

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_i_ops: The blkio_device_read_i_ops of this HostConfig.
        :type blkio_device_read_i_ops: List[ThrottleDevice]
        """

        self._blkio_device_read_i_ops = blkio_device_read_i_ops

    @property
    def blkio_device_write_bps(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_write_bps of this HostConfig.

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_bps of this HostConfig.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_write_bps

    @blkio_device_write_bps.setter
    def blkio_device_write_bps(self, blkio_device_write_bps: List[ThrottleDevice]):
        """Sets the blkio_device_write_bps of this HostConfig.

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_bps: The blkio_device_write_bps of this HostConfig.
        :type blkio_device_write_bps: List[ThrottleDevice]
        """

        self._blkio_device_write_bps = blkio_device_write_bps

    @property
    def blkio_device_write_i_ops(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_write_i_ops of this HostConfig.

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_i_ops of this HostConfig.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_write_i_ops

    @blkio_device_write_i_ops.setter
    def blkio_device_write_i_ops(self, blkio_device_write_i_ops: List[ThrottleDevice]):
        """Sets the blkio_device_write_i_ops of this HostConfig.

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_i_ops: The blkio_device_write_i_ops of this HostConfig.
        :type blkio_device_write_i_ops: List[ThrottleDevice]
        """

        self._blkio_device_write_i_ops = blkio_device_write_i_ops

    @property
    def blkio_weight(self) -> int:
        """Gets the blkio_weight of this HostConfig.

        Block IO weight (relative weight).  # noqa: E501

        :return: The blkio_weight of this HostConfig.
        :rtype: int
        """
        return self._blkio_weight

    @blkio_weight.setter
    def blkio_weight(self, blkio_weight: int):
        """Sets the blkio_weight of this HostConfig.

        Block IO weight (relative weight).  # noqa: E501

        :param blkio_weight: The blkio_weight of this HostConfig.
        :type blkio_weight: int
        """
        if blkio_weight is not None and blkio_weight > 1000:  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value less than or equal to `1000`")  # noqa: E501
        if blkio_weight is not None and blkio_weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blkio_weight = blkio_weight

    @property
    def blkio_weight_device(self) -> List[ResourcesBlkioWeightDeviceInner]:
        """Gets the blkio_weight_device of this HostConfig.

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :return: The blkio_weight_device of this HostConfig.
        :rtype: List[ResourcesBlkioWeightDeviceInner]
        """
        return self._blkio_weight_device

    @blkio_weight_device.setter
    def blkio_weight_device(self, blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]):
        """Sets the blkio_weight_device of this HostConfig.

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :param blkio_weight_device: The blkio_weight_device of this HostConfig.
        :type blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]
        """

        self._blkio_weight_device = blkio_weight_device

    @property
    def cgroup_parent(self) -> str:
        """Gets the cgroup_parent of this HostConfig.

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :return: The cgroup_parent of this HostConfig.
        :rtype: str
        """
        return self._cgroup_parent

    @cgroup_parent.setter
    def cgroup_parent(self, cgroup_parent: str):
        """Sets the cgroup_parent of this HostConfig.

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :param cgroup_parent: The cgroup_parent of this HostConfig.
        :type cgroup_parent: str
        """

        self._cgroup_parent = cgroup_parent

    @property
    def cpu_count(self) -> int:
        """Gets the cpu_count of this HostConfig.

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_count of this HostConfig.
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count: int):
        """Sets the cpu_count of this HostConfig.

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_count: The cpu_count of this HostConfig.
        :type cpu_count: int
        """

        self._cpu_count = cpu_count

    @property
    def cpu_percent(self) -> int:
        """Gets the cpu_percent of this HostConfig.

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_percent of this HostConfig.
        :rtype: int
        """
        return self._cpu_percent

    @cpu_percent.setter
    def cpu_percent(self, cpu_percent: int):
        """Sets the cpu_percent of this HostConfig.

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_percent: The cpu_percent of this HostConfig.
        :type cpu_percent: int
        """

        self._cpu_percent = cpu_percent

    @property
    def cpu_period(self) -> int:
        """Gets the cpu_period of this HostConfig.

        The length of a CPU period in microseconds.  # noqa: E501

        :return: The cpu_period of this HostConfig.
        :rtype: int
        """
        return self._cpu_period

    @cpu_period.setter
    def cpu_period(self, cpu_period: int):
        """Sets the cpu_period of this HostConfig.

        The length of a CPU period in microseconds.  # noqa: E501

        :param cpu_period: The cpu_period of this HostConfig.
        :type cpu_period: int
        """

        self._cpu_period = cpu_period

    @property
    def cpu_quota(self) -> int:
        """Gets the cpu_quota of this HostConfig.

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :return: The cpu_quota of this HostConfig.
        :rtype: int
        """
        return self._cpu_quota

    @cpu_quota.setter
    def cpu_quota(self, cpu_quota: int):
        """Sets the cpu_quota of this HostConfig.

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :param cpu_quota: The cpu_quota of this HostConfig.
        :type cpu_quota: int
        """

        self._cpu_quota = cpu_quota

    @property
    def cpu_realtime_period(self) -> int:
        """Gets the cpu_realtime_period of this HostConfig.

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_period of this HostConfig.
        :rtype: int
        """
        return self._cpu_realtime_period

    @cpu_realtime_period.setter
    def cpu_realtime_period(self, cpu_realtime_period: int):
        """Sets the cpu_realtime_period of this HostConfig.

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_period: The cpu_realtime_period of this HostConfig.
        :type cpu_realtime_period: int
        """

        self._cpu_realtime_period = cpu_realtime_period

    @property
    def cpu_realtime_runtime(self) -> int:
        """Gets the cpu_realtime_runtime of this HostConfig.

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_runtime of this HostConfig.
        :rtype: int
        """
        return self._cpu_realtime_runtime

    @cpu_realtime_runtime.setter
    def cpu_realtime_runtime(self, cpu_realtime_runtime: int):
        """Sets the cpu_realtime_runtime of this HostConfig.

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_runtime: The cpu_realtime_runtime of this HostConfig.
        :type cpu_realtime_runtime: int
        """

        self._cpu_realtime_runtime = cpu_realtime_runtime

    @property
    def cpu_shares(self) -> int:
        """Gets the cpu_shares of this HostConfig.

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :return: The cpu_shares of this HostConfig.
        :rtype: int
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares: int):
        """Sets the cpu_shares of this HostConfig.

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :param cpu_shares: The cpu_shares of this HostConfig.
        :type cpu_shares: int
        """

        self._cpu_shares = cpu_shares

    @property
    def cpuset_cpus(self) -> str:
        """Gets the cpuset_cpus of this HostConfig.

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :return: The cpuset_cpus of this HostConfig.
        :rtype: str
        """
        return self._cpuset_cpus

    @cpuset_cpus.setter
    def cpuset_cpus(self, cpuset_cpus: str):
        """Sets the cpuset_cpus of this HostConfig.

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :param cpuset_cpus: The cpuset_cpus of this HostConfig.
        :type cpuset_cpus: str
        """

        self._cpuset_cpus = cpuset_cpus

    @property
    def cpuset_mems(self) -> str:
        """Gets the cpuset_mems of this HostConfig.

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :return: The cpuset_mems of this HostConfig.
        :rtype: str
        """
        return self._cpuset_mems

    @cpuset_mems.setter
    def cpuset_mems(self, cpuset_mems: str):
        """Sets the cpuset_mems of this HostConfig.

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :param cpuset_mems: The cpuset_mems of this HostConfig.
        :type cpuset_mems: str
        """

        self._cpuset_mems = cpuset_mems

    @property
    def device_cgroup_rules(self) -> List[str]:
        """Gets the device_cgroup_rules of this HostConfig.

        a list of cgroup rules to apply to the container  # noqa: E501

        :return: The device_cgroup_rules of this HostConfig.
        :rtype: List[str]
        """
        return self._device_cgroup_rules

    @device_cgroup_rules.setter
    def device_cgroup_rules(self, device_cgroup_rules: List[str]):
        """Sets the device_cgroup_rules of this HostConfig.

        a list of cgroup rules to apply to the container  # noqa: E501

        :param device_cgroup_rules: The device_cgroup_rules of this HostConfig.
        :type device_cgroup_rules: List[str]
        """

        self._device_cgroup_rules = device_cgroup_rules

    @property
    def devices(self) -> List[DeviceMapping]:
        """Gets the devices of this HostConfig.

        A list of devices to add to the container.  # noqa: E501

        :return: The devices of this HostConfig.
        :rtype: List[DeviceMapping]
        """
        return self._devices

    @devices.setter
    def devices(self, devices: List[DeviceMapping]):
        """Sets the devices of this HostConfig.

        A list of devices to add to the container.  # noqa: E501

        :param devices: The devices of this HostConfig.
        :type devices: List[DeviceMapping]
        """

        self._devices = devices

    @property
    def disk_quota(self) -> int:
        """Gets the disk_quota of this HostConfig.

        Disk limit (in bytes).  # noqa: E501

        :return: The disk_quota of this HostConfig.
        :rtype: int
        """
        return self._disk_quota

    @disk_quota.setter
    def disk_quota(self, disk_quota: int):
        """Sets the disk_quota of this HostConfig.

        Disk limit (in bytes).  # noqa: E501

        :param disk_quota: The disk_quota of this HostConfig.
        :type disk_quota: int
        """

        self._disk_quota = disk_quota

    @property
    def io_maximum_bandwidth(self) -> int:
        """Gets the io_maximum_bandwidth of this HostConfig.

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_bandwidth of this HostConfig.
        :rtype: int
        """
        return self._io_maximum_bandwidth

    @io_maximum_bandwidth.setter
    def io_maximum_bandwidth(self, io_maximum_bandwidth: int):
        """Sets the io_maximum_bandwidth of this HostConfig.

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_bandwidth: The io_maximum_bandwidth of this HostConfig.
        :type io_maximum_bandwidth: int
        """

        self._io_maximum_bandwidth = io_maximum_bandwidth

    @property
    def io_maximum_i_ops(self) -> int:
        """Gets the io_maximum_i_ops of this HostConfig.

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_i_ops of this HostConfig.
        :rtype: int
        """
        return self._io_maximum_i_ops

    @io_maximum_i_ops.setter
    def io_maximum_i_ops(self, io_maximum_i_ops: int):
        """Sets the io_maximum_i_ops of this HostConfig.

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_i_ops: The io_maximum_i_ops of this HostConfig.
        :type io_maximum_i_ops: int
        """

        self._io_maximum_i_ops = io_maximum_i_ops

    @property
    def kernel_memory(self) -> int:
        """Gets the kernel_memory of this HostConfig.

        Kernel memory limit in bytes.  # noqa: E501

        :return: The kernel_memory of this HostConfig.
        :rtype: int
        """
        return self._kernel_memory

    @kernel_memory.setter
    def kernel_memory(self, kernel_memory: int):
        """Sets the kernel_memory of this HostConfig.

        Kernel memory limit in bytes.  # noqa: E501

        :param kernel_memory: The kernel_memory of this HostConfig.
        :type kernel_memory: int
        """

        self._kernel_memory = kernel_memory

    @property
    def memory(self) -> int:
        """Gets the memory of this HostConfig.

        Memory limit in bytes.  # noqa: E501

        :return: The memory of this HostConfig.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory: int):
        """Sets the memory of this HostConfig.

        Memory limit in bytes.  # noqa: E501

        :param memory: The memory of this HostConfig.
        :type memory: int
        """

        self._memory = memory

    @property
    def memory_reservation(self) -> int:
        """Gets the memory_reservation of this HostConfig.

        Memory soft limit in bytes.  # noqa: E501

        :return: The memory_reservation of this HostConfig.
        :rtype: int
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation: int):
        """Sets the memory_reservation of this HostConfig.

        Memory soft limit in bytes.  # noqa: E501

        :param memory_reservation: The memory_reservation of this HostConfig.
        :type memory_reservation: int
        """

        self._memory_reservation = memory_reservation

    @property
    def memory_swap(self) -> int:
        """Gets the memory_swap of this HostConfig.

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :return: The memory_swap of this HostConfig.
        :rtype: int
        """
        return self._memory_swap

    @memory_swap.setter
    def memory_swap(self, memory_swap: int):
        """Sets the memory_swap of this HostConfig.

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :param memory_swap: The memory_swap of this HostConfig.
        :type memory_swap: int
        """

        self._memory_swap = memory_swap

    @property
    def memory_swappiness(self) -> int:
        """Gets the memory_swappiness of this HostConfig.

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :return: The memory_swappiness of this HostConfig.
        :rtype: int
        """
        return self._memory_swappiness

    @memory_swappiness.setter
    def memory_swappiness(self, memory_swappiness: int):
        """Sets the memory_swappiness of this HostConfig.

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :param memory_swappiness: The memory_swappiness of this HostConfig.
        :type memory_swappiness: int
        """
        if memory_swappiness is not None and memory_swappiness > 100:  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value less than or equal to `100`")  # noqa: E501
        if memory_swappiness is not None and memory_swappiness < 0:  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._memory_swappiness = memory_swappiness

    @property
    def nano_cpus(self) -> int:
        """Gets the nano_cpus of this HostConfig.

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :return: The nano_cpus of this HostConfig.
        :rtype: int
        """
        return self._nano_cpus

    @nano_cpus.setter
    def nano_cpus(self, nano_cpus: int):
        """Sets the nano_cpus of this HostConfig.

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :param nano_cpus: The nano_cpus of this HostConfig.
        :type nano_cpus: int
        """

        self._nano_cpus = nano_cpus

    @property
    def oom_kill_disable(self) -> bool:
        """Gets the oom_kill_disable of this HostConfig.

        Disable OOM Killer for the container.  # noqa: E501

        :return: The oom_kill_disable of this HostConfig.
        :rtype: bool
        """
        return self._oom_kill_disable

    @oom_kill_disable.setter
    def oom_kill_disable(self, oom_kill_disable: bool):
        """Sets the oom_kill_disable of this HostConfig.

        Disable OOM Killer for the container.  # noqa: E501

        :param oom_kill_disable: The oom_kill_disable of this HostConfig.
        :type oom_kill_disable: bool
        """

        self._oom_kill_disable = oom_kill_disable

    @property
    def pids_limit(self) -> int:
        """Gets the pids_limit of this HostConfig.

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :return: The pids_limit of this HostConfig.
        :rtype: int
        """
        return self._pids_limit

    @pids_limit.setter
    def pids_limit(self, pids_limit: int):
        """Sets the pids_limit of this HostConfig.

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :param pids_limit: The pids_limit of this HostConfig.
        :type pids_limit: int
        """

        self._pids_limit = pids_limit

    @property
    def ulimits(self) -> List[ResourcesUlimitsInner]:
        """Gets the ulimits of this HostConfig.

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :return: The ulimits of this HostConfig.
        :rtype: List[ResourcesUlimitsInner]
        """
        return self._ulimits

    @ulimits.setter
    def ulimits(self, ulimits: List[ResourcesUlimitsInner]):
        """Sets the ulimits of this HostConfig.

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :param ulimits: The ulimits of this HostConfig.
        :type ulimits: List[ResourcesUlimitsInner]
        """

        self._ulimits = ulimits

    @property
    def auto_remove(self) -> bool:
        """Gets the auto_remove of this HostConfig.

        Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.  # noqa: E501

        :return: The auto_remove of this HostConfig.
        :rtype: bool
        """
        return self._auto_remove

    @auto_remove.setter
    def auto_remove(self, auto_remove: bool):
        """Sets the auto_remove of this HostConfig.

        Automatically remove the container when the container's process exits. This has no effect if `RestartPolicy` is set.  # noqa: E501

        :param auto_remove: The auto_remove of this HostConfig.
        :type auto_remove: bool
        """

        self._auto_remove = auto_remove

    @property
    def binds(self) -> List[str]:
        """Gets the binds of this HostConfig.

        A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.   # noqa: E501

        :return: The binds of this HostConfig.
        :rtype: List[str]
        """
        return self._binds

    @binds.setter
    def binds(self, binds: List[str]):
        """Sets the binds of this HostConfig.

        A list of volume bindings for this container. Each volume binding is a string in one of these forms:  - `host-src:container-dest` to bind-mount a host path into the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `host-src:container-dest:ro` to make the bind mount read-only inside the container. Both `host-src`, and `container-dest` must be an _absolute_ path. - `volume-name:container-dest` to bind-mount a volume managed by a volume driver into the container. `container-dest` must be an _absolute_ path. - `volume-name:container-dest:ro` to mount the volume read-only inside the container.  `container-dest` must be an _absolute_ path.   # noqa: E501

        :param binds: The binds of this HostConfig.
        :type binds: List[str]
        """

        self._binds = binds

    @property
    def cap_add(self) -> List[str]:
        """Gets the cap_add of this HostConfig.

        A list of kernel capabilities to add to the container.  # noqa: E501

        :return: The cap_add of this HostConfig.
        :rtype: List[str]
        """
        return self._cap_add

    @cap_add.setter
    def cap_add(self, cap_add: List[str]):
        """Sets the cap_add of this HostConfig.

        A list of kernel capabilities to add to the container.  # noqa: E501

        :param cap_add: The cap_add of this HostConfig.
        :type cap_add: List[str]
        """

        self._cap_add = cap_add

    @property
    def cap_drop(self) -> List[str]:
        """Gets the cap_drop of this HostConfig.

        A list of kernel capabilities to drop from the container.  # noqa: E501

        :return: The cap_drop of this HostConfig.
        :rtype: List[str]
        """
        return self._cap_drop

    @cap_drop.setter
    def cap_drop(self, cap_drop: List[str]):
        """Sets the cap_drop of this HostConfig.

        A list of kernel capabilities to drop from the container.  # noqa: E501

        :param cap_drop: The cap_drop of this HostConfig.
        :type cap_drop: List[str]
        """

        self._cap_drop = cap_drop

    @property
    def cgroup(self) -> str:
        """Gets the cgroup of this HostConfig.

        Cgroup to use for the container.  # noqa: E501

        :return: The cgroup of this HostConfig.
        :rtype: str
        """
        return self._cgroup

    @cgroup.setter
    def cgroup(self, cgroup: str):
        """Sets the cgroup of this HostConfig.

        Cgroup to use for the container.  # noqa: E501

        :param cgroup: The cgroup of this HostConfig.
        :type cgroup: str
        """

        self._cgroup = cgroup

    @property
    def console_size(self) -> List[int]:
        """Gets the console_size of this HostConfig.

        Initial console size, as an `[height, width]` array. (Windows only)  # noqa: E501

        :return: The console_size of this HostConfig.
        :rtype: List[int]
        """
        return self._console_size

    @console_size.setter
    def console_size(self, console_size: List[int]):
        """Sets the console_size of this HostConfig.

        Initial console size, as an `[height, width]` array. (Windows only)  # noqa: E501

        :param console_size: The console_size of this HostConfig.
        :type console_size: List[int]
        """
        if console_size is not None and len(console_size) > 2:
            raise ValueError("Invalid value for `console_size`, number of items must be less than or equal to `2`")  # noqa: E501
        if console_size is not None and len(console_size) < 2:
            raise ValueError("Invalid value for `console_size`, number of items must be greater than or equal to `2`")  # noqa: E501

        self._console_size = console_size

    @property
    def container_id_file(self) -> str:
        """Gets the container_id_file of this HostConfig.

        Path to a file where the container ID is written  # noqa: E501

        :return: The container_id_file of this HostConfig.
        :rtype: str
        """
        return self._container_id_file

    @container_id_file.setter
    def container_id_file(self, container_id_file: str):
        """Sets the container_id_file of this HostConfig.

        Path to a file where the container ID is written  # noqa: E501

        :param container_id_file: The container_id_file of this HostConfig.
        :type container_id_file: str
        """

        self._container_id_file = container_id_file

    @property
    def dns(self) -> List[str]:
        """Gets the dns of this HostConfig.

        A list of DNS servers for the container to use.  # noqa: E501

        :return: The dns of this HostConfig.
        :rtype: List[str]
        """
        return self._dns

    @dns.setter
    def dns(self, dns: List[str]):
        """Sets the dns of this HostConfig.

        A list of DNS servers for the container to use.  # noqa: E501

        :param dns: The dns of this HostConfig.
        :type dns: List[str]
        """

        self._dns = dns

    @property
    def dns_options(self) -> List[str]:
        """Gets the dns_options of this HostConfig.

        A list of DNS options.  # noqa: E501

        :return: The dns_options of this HostConfig.
        :rtype: List[str]
        """
        return self._dns_options

    @dns_options.setter
    def dns_options(self, dns_options: List[str]):
        """Sets the dns_options of this HostConfig.

        A list of DNS options.  # noqa: E501

        :param dns_options: The dns_options of this HostConfig.
        :type dns_options: List[str]
        """

        self._dns_options = dns_options

    @property
    def dns_search(self) -> List[str]:
        """Gets the dns_search of this HostConfig.

        A list of DNS search domains.  # noqa: E501

        :return: The dns_search of this HostConfig.
        :rtype: List[str]
        """
        return self._dns_search

    @dns_search.setter
    def dns_search(self, dns_search: List[str]):
        """Sets the dns_search of this HostConfig.

        A list of DNS search domains.  # noqa: E501

        :param dns_search: The dns_search of this HostConfig.
        :type dns_search: List[str]
        """

        self._dns_search = dns_search

    @property
    def extra_hosts(self) -> List[str]:
        """Gets the extra_hosts of this HostConfig.

        A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.   # noqa: E501

        :return: The extra_hosts of this HostConfig.
        :rtype: List[str]
        """
        return self._extra_hosts

    @extra_hosts.setter
    def extra_hosts(self, extra_hosts: List[str]):
        """Sets the extra_hosts of this HostConfig.

        A list of hostnames/IP mappings to add to the container's `/etc/hosts` file. Specified in the form `[\"hostname:IP\"]`.   # noqa: E501

        :param extra_hosts: The extra_hosts of this HostConfig.
        :type extra_hosts: List[str]
        """

        self._extra_hosts = extra_hosts

    @property
    def group_add(self) -> List[str]:
        """Gets the group_add of this HostConfig.

        A list of additional groups that the container process will run as.  # noqa: E501

        :return: The group_add of this HostConfig.
        :rtype: List[str]
        """
        return self._group_add

    @group_add.setter
    def group_add(self, group_add: List[str]):
        """Sets the group_add of this HostConfig.

        A list of additional groups that the container process will run as.  # noqa: E501

        :param group_add: The group_add of this HostConfig.
        :type group_add: List[str]
        """

        self._group_add = group_add

    @property
    def ipc_mode(self) -> str:
        """Gets the ipc_mode of this HostConfig.

        IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.   # noqa: E501

        :return: The ipc_mode of this HostConfig.
        :rtype: str
        """
        return self._ipc_mode

    @ipc_mode.setter
    def ipc_mode(self, ipc_mode: str):
        """Sets the ipc_mode of this HostConfig.

        IPC sharing mode for the container. Possible values are:  - `\"none\"`: own private IPC namespace, with /dev/shm not mounted - `\"private\"`: own private IPC namespace - `\"shareable\"`: own private IPC namespace, with a possibility to share it with other containers - `\"container:<name|id>\"`: join another (shareable) container's IPC namespace - `\"host\"`: use the host system's IPC namespace  If not specified, daemon default is used, which can either be `\"private\"` or `\"shareable\"`, depending on daemon version and configuration.   # noqa: E501

        :param ipc_mode: The ipc_mode of this HostConfig.
        :type ipc_mode: str
        """

        self._ipc_mode = ipc_mode

    @property
    def isolation(self) -> str:
        """Gets the isolation of this HostConfig.

        Isolation technology of the container. (Windows only)  # noqa: E501

        :return: The isolation of this HostConfig.
        :rtype: str
        """
        return self._isolation

    @isolation.setter
    def isolation(self, isolation: str):
        """Sets the isolation of this HostConfig.

        Isolation technology of the container. (Windows only)  # noqa: E501

        :param isolation: The isolation of this HostConfig.
        :type isolation: str
        """
        allowed_values = ["default", "process", "hyperv"]  # noqa: E501
        if isolation not in allowed_values:
            raise ValueError(
                "Invalid value for `isolation` ({0}), must be one of {1}"
                .format(isolation, allowed_values)
            )

        self._isolation = isolation

    @property
    def links(self) -> List[str]:
        """Gets the links of this HostConfig.

        A list of links for the container in the form `container_name:alias`.  # noqa: E501

        :return: The links of this HostConfig.
        :rtype: List[str]
        """
        return self._links

    @links.setter
    def links(self, links: List[str]):
        """Sets the links of this HostConfig.

        A list of links for the container in the form `container_name:alias`.  # noqa: E501

        :param links: The links of this HostConfig.
        :type links: List[str]
        """

        self._links = links

    @property
    def log_config(self) -> HostConfigAllOfLogConfig:
        """Gets the log_config of this HostConfig.


        :return: The log_config of this HostConfig.
        :rtype: HostConfigAllOfLogConfig
        """
        return self._log_config

    @log_config.setter
    def log_config(self, log_config: HostConfigAllOfLogConfig):
        """Sets the log_config of this HostConfig.


        :param log_config: The log_config of this HostConfig.
        :type log_config: HostConfigAllOfLogConfig
        """

        self._log_config = log_config

    @property
    def mounts(self) -> List[Mount]:
        """Gets the mounts of this HostConfig.

        Specification for mounts to be added to the container.  # noqa: E501

        :return: The mounts of this HostConfig.
        :rtype: List[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts: List[Mount]):
        """Sets the mounts of this HostConfig.

        Specification for mounts to be added to the container.  # noqa: E501

        :param mounts: The mounts of this HostConfig.
        :type mounts: List[Mount]
        """

        self._mounts = mounts

    @property
    def network_mode(self) -> str:
        """Gets the network_mode of this HostConfig.

        Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.  # noqa: E501

        :return: The network_mode of this HostConfig.
        :rtype: str
        """
        return self._network_mode

    @network_mode.setter
    def network_mode(self, network_mode: str):
        """Sets the network_mode of this HostConfig.

        Network mode to use for this container. Supported standard values are: `bridge`, `host`, `none`, and `container:<name|id>`. Any other value is taken as a custom network's name to which this container should connect to.  # noqa: E501

        :param network_mode: The network_mode of this HostConfig.
        :type network_mode: str
        """

        self._network_mode = network_mode

    @property
    def oom_score_adj(self) -> int:
        """Gets the oom_score_adj of this HostConfig.

        An integer value containing the score given to the container in order to tune OOM killer preferences.  # noqa: E501

        :return: The oom_score_adj of this HostConfig.
        :rtype: int
        """
        return self._oom_score_adj

    @oom_score_adj.setter
    def oom_score_adj(self, oom_score_adj: int):
        """Sets the oom_score_adj of this HostConfig.

        An integer value containing the score given to the container in order to tune OOM killer preferences.  # noqa: E501

        :param oom_score_adj: The oom_score_adj of this HostConfig.
        :type oom_score_adj: int
        """

        self._oom_score_adj = oom_score_adj

    @property
    def pid_mode(self) -> str:
        """Gets the pid_mode of this HostConfig.

        Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container   # noqa: E501

        :return: The pid_mode of this HostConfig.
        :rtype: str
        """
        return self._pid_mode

    @pid_mode.setter
    def pid_mode(self, pid_mode: str):
        """Sets the pid_mode of this HostConfig.

        Set the PID (Process) Namespace mode for the container. It can be either:  - `\"container:<name|id>\"`: joins another container's PID namespace - `\"host\"`: use the host's PID namespace inside the container   # noqa: E501

        :param pid_mode: The pid_mode of this HostConfig.
        :type pid_mode: str
        """

        self._pid_mode = pid_mode

    @property
    def port_bindings(self) -> Dict[str, HostConfigAllOfPortBindings]:
        """Gets the port_bindings of this HostConfig.

        A map of exposed container ports and the host port they should map to.  # noqa: E501

        :return: The port_bindings of this HostConfig.
        :rtype: Dict[str, HostConfigAllOfPortBindings]
        """
        return self._port_bindings

    @port_bindings.setter
    def port_bindings(self, port_bindings: Dict[str, HostConfigAllOfPortBindings]):
        """Sets the port_bindings of this HostConfig.

        A map of exposed container ports and the host port they should map to.  # noqa: E501

        :param port_bindings: The port_bindings of this HostConfig.
        :type port_bindings: Dict[str, HostConfigAllOfPortBindings]
        """

        self._port_bindings = port_bindings

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this HostConfig.

        Gives the container full access to the host.  # noqa: E501

        :return: The privileged of this HostConfig.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this HostConfig.

        Gives the container full access to the host.  # noqa: E501

        :param privileged: The privileged of this HostConfig.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def publish_all_ports(self) -> bool:
        """Gets the publish_all_ports of this HostConfig.

        Allocates a random host port for all of a container's exposed ports.  # noqa: E501

        :return: The publish_all_ports of this HostConfig.
        :rtype: bool
        """
        return self._publish_all_ports

    @publish_all_ports.setter
    def publish_all_ports(self, publish_all_ports: bool):
        """Sets the publish_all_ports of this HostConfig.

        Allocates a random host port for all of a container's exposed ports.  # noqa: E501

        :param publish_all_ports: The publish_all_ports of this HostConfig.
        :type publish_all_ports: bool
        """

        self._publish_all_ports = publish_all_ports

    @property
    def readonly_rootfs(self) -> bool:
        """Gets the readonly_rootfs of this HostConfig.

        Mount the container's root filesystem as read only.  # noqa: E501

        :return: The readonly_rootfs of this HostConfig.
        :rtype: bool
        """
        return self._readonly_rootfs

    @readonly_rootfs.setter
    def readonly_rootfs(self, readonly_rootfs: bool):
        """Sets the readonly_rootfs of this HostConfig.

        Mount the container's root filesystem as read only.  # noqa: E501

        :param readonly_rootfs: The readonly_rootfs of this HostConfig.
        :type readonly_rootfs: bool
        """

        self._readonly_rootfs = readonly_rootfs

    @property
    def restart_policy(self) -> RestartPolicy:
        """Gets the restart_policy of this HostConfig.


        :return: The restart_policy of this HostConfig.
        :rtype: RestartPolicy
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: RestartPolicy):
        """Sets the restart_policy of this HostConfig.


        :param restart_policy: The restart_policy of this HostConfig.
        :type restart_policy: RestartPolicy
        """

        self._restart_policy = restart_policy

    @property
    def runtime(self) -> str:
        """Gets the runtime of this HostConfig.

        Runtime to use with this container.  # noqa: E501

        :return: The runtime of this HostConfig.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime: str):
        """Sets the runtime of this HostConfig.

        Runtime to use with this container.  # noqa: E501

        :param runtime: The runtime of this HostConfig.
        :type runtime: str
        """

        self._runtime = runtime

    @property
    def security_opt(self) -> List[str]:
        """Gets the security_opt of this HostConfig.

        A list of string values to customize labels for MLS systems, such as SELinux.  # noqa: E501

        :return: The security_opt of this HostConfig.
        :rtype: List[str]
        """
        return self._security_opt

    @security_opt.setter
    def security_opt(self, security_opt: List[str]):
        """Sets the security_opt of this HostConfig.

        A list of string values to customize labels for MLS systems, such as SELinux.  # noqa: E501

        :param security_opt: The security_opt of this HostConfig.
        :type security_opt: List[str]
        """

        self._security_opt = security_opt

    @property
    def shm_size(self) -> int:
        """Gets the shm_size of this HostConfig.

        Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.  # noqa: E501

        :return: The shm_size of this HostConfig.
        :rtype: int
        """
        return self._shm_size

    @shm_size.setter
    def shm_size(self, shm_size: int):
        """Sets the shm_size of this HostConfig.

        Size of `/dev/shm` in bytes. If omitted, the system uses 64MB.  # noqa: E501

        :param shm_size: The shm_size of this HostConfig.
        :type shm_size: int
        """
        if shm_size is not None and shm_size < 0:  # noqa: E501
            raise ValueError("Invalid value for `shm_size`, must be a value greater than or equal to `0`")  # noqa: E501

        self._shm_size = shm_size

    @property
    def storage_opt(self) -> Dict[str, str]:
        """Gets the storage_opt of this HostConfig.

        Storage driver options for this container, in the form `{\"size\": \"120G\"}`.   # noqa: E501

        :return: The storage_opt of this HostConfig.
        :rtype: Dict[str, str]
        """
        return self._storage_opt

    @storage_opt.setter
    def storage_opt(self, storage_opt: Dict[str, str]):
        """Sets the storage_opt of this HostConfig.

        Storage driver options for this container, in the form `{\"size\": \"120G\"}`.   # noqa: E501

        :param storage_opt: The storage_opt of this HostConfig.
        :type storage_opt: Dict[str, str]
        """

        self._storage_opt = storage_opt

    @property
    def sysctls(self) -> Dict[str, str]:
        """Gets the sysctls of this HostConfig.

        A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`   # noqa: E501

        :return: The sysctls of this HostConfig.
        :rtype: Dict[str, str]
        """
        return self._sysctls

    @sysctls.setter
    def sysctls(self, sysctls: Dict[str, str]):
        """Sets the sysctls of this HostConfig.

        A list of kernel parameters (sysctls) to set in the container. For example: `{\"net.ipv4.ip_forward\": \"1\"}`   # noqa: E501

        :param sysctls: The sysctls of this HostConfig.
        :type sysctls: Dict[str, str]
        """

        self._sysctls = sysctls

    @property
    def tmpfs(self) -> Dict[str, str]:
        """Gets the tmpfs of this HostConfig.

        A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.   # noqa: E501

        :return: The tmpfs of this HostConfig.
        :rtype: Dict[str, str]
        """
        return self._tmpfs

    @tmpfs.setter
    def tmpfs(self, tmpfs: Dict[str, str]):
        """Sets the tmpfs of this HostConfig.

        A map of container directories which should be replaced by tmpfs mounts, and their corresponding mount options. For example: `{ \"/run\": \"rw,noexec,nosuid,size=65536k\" }`.   # noqa: E501

        :param tmpfs: The tmpfs of this HostConfig.
        :type tmpfs: Dict[str, str]
        """

        self._tmpfs = tmpfs

    @property
    def uts_mode(self) -> str:
        """Gets the uts_mode of this HostConfig.

        UTS namespace to use for the container.  # noqa: E501

        :return: The uts_mode of this HostConfig.
        :rtype: str
        """
        return self._uts_mode

    @uts_mode.setter
    def uts_mode(self, uts_mode: str):
        """Sets the uts_mode of this HostConfig.

        UTS namespace to use for the container.  # noqa: E501

        :param uts_mode: The uts_mode of this HostConfig.
        :type uts_mode: str
        """

        self._uts_mode = uts_mode

    @property
    def userns_mode(self) -> str:
        """Gets the userns_mode of this HostConfig.

        Sets the usernamespace mode for the container when usernamespace remapping option is enabled.  # noqa: E501

        :return: The userns_mode of this HostConfig.
        :rtype: str
        """
        return self._userns_mode

    @userns_mode.setter
    def userns_mode(self, userns_mode: str):
        """Sets the userns_mode of this HostConfig.

        Sets the usernamespace mode for the container when usernamespace remapping option is enabled.  # noqa: E501

        :param userns_mode: The userns_mode of this HostConfig.
        :type userns_mode: str
        """

        self._userns_mode = userns_mode

    @property
    def volume_driver(self) -> str:
        """Gets the volume_driver of this HostConfig.

        Driver that this container uses to mount volumes.  # noqa: E501

        :return: The volume_driver of this HostConfig.
        :rtype: str
        """
        return self._volume_driver

    @volume_driver.setter
    def volume_driver(self, volume_driver: str):
        """Sets the volume_driver of this HostConfig.

        Driver that this container uses to mount volumes.  # noqa: E501

        :param volume_driver: The volume_driver of this HostConfig.
        :type volume_driver: str
        """

        self._volume_driver = volume_driver

    @property
    def volumes_from(self) -> List[str]:
        """Gets the volumes_from of this HostConfig.

        A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.  # noqa: E501

        :return: The volumes_from of this HostConfig.
        :rtype: List[str]
        """
        return self._volumes_from

    @volumes_from.setter
    def volumes_from(self, volumes_from: List[str]):
        """Sets the volumes_from of this HostConfig.

        A list of volumes to inherit from another container, specified in the form `<container name>[:<ro|rw>]`.  # noqa: E501

        :param volumes_from: The volumes_from of this HostConfig.
        :type volumes_from: List[str]
        """

        self._volumes_from = volumes_from
