from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, driver='local', driver_opts=None, labels=None, name=None):  # noqa: E501
        """VolumeCreateRequest - a model defined in OpenAPI

        :param driver: The driver of this VolumeCreateRequest.  # noqa: E501
        :type driver: str
        :param driver_opts: The driver_opts of this VolumeCreateRequest.  # noqa: E501
        :type driver_opts: Dict[str, str]
        :param labels: The labels of this VolumeCreateRequest.  # noqa: E501
        :type labels: Dict[str, str]
        :param name: The name of this VolumeCreateRequest.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'driver': str,
            'driver_opts': Dict[str, str],
            'labels': Dict[str, str],
            'name': str
        }

        self.attribute_map = {
            'driver': 'Driver',
            'driver_opts': 'DriverOpts',
            'labels': 'Labels',
            'name': 'Name'
        }

        self._driver = driver
        self._driver_opts = driver_opts
        self._labels = labels
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'VolumeCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VolumeCreate_request of this VolumeCreateRequest.  # noqa: E501
        :rtype: VolumeCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def driver(self) -> str:
        """Gets the driver of this VolumeCreateRequest.

        Name of the volume driver to use.  # noqa: E501

        :return: The driver of this VolumeCreateRequest.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this VolumeCreateRequest.

        Name of the volume driver to use.  # noqa: E501

        :param driver: The driver of this VolumeCreateRequest.
        :type driver: str
        """

        self._driver = driver

    @property
    def driver_opts(self) -> Dict[str, str]:
        """Gets the driver_opts of this VolumeCreateRequest.

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.  # noqa: E501

        :return: The driver_opts of this VolumeCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._driver_opts

    @driver_opts.setter
    def driver_opts(self, driver_opts: Dict[str, str]):
        """Sets the driver_opts of this VolumeCreateRequest.

        A mapping of driver options and values. These options are passed directly to the driver and are driver specific.  # noqa: E501

        :param driver_opts: The driver_opts of this VolumeCreateRequest.
        :type driver_opts: Dict[str, str]
        """

        self._driver_opts = driver_opts

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this VolumeCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this VolumeCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this VolumeCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this VolumeCreateRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self) -> str:
        """Gets the name of this VolumeCreateRequest.

        The new volume's name. If not specified, Docker generates a name.  # noqa: E501

        :return: The name of this VolumeCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VolumeCreateRequest.

        The new volume's name. If not specified, Docker generates a name.  # noqa: E501

        :param name: The name of this VolumeCreateRequest.
        :type name: str
        """

        self._name = name
