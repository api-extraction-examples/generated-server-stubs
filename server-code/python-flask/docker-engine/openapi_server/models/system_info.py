from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.commit import Commit
from openapi_server.models.generic_resources_inner import GenericResourcesInner
from openapi_server.models.plugins_info import PluginsInfo
from openapi_server.models.registry_service_config import RegistryServiceConfig
from openapi_server.models.runtime import Runtime
from openapi_server.models.swarm_info import SwarmInfo
from openapi_server import util

from openapi_server.models.commit import Commit  # noqa: E501
from openapi_server.models.generic_resources_inner import GenericResourcesInner  # noqa: E501
from openapi_server.models.plugins_info import PluginsInfo  # noqa: E501
from openapi_server.models.registry_service_config import RegistryServiceConfig  # noqa: E501
from openapi_server.models.runtime import Runtime  # noqa: E501
from openapi_server.models.swarm_info import SwarmInfo  # noqa: E501

class SystemInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture=None, bridge_nf_ip6tables=None, bridge_nf_iptables=None, cpu_set=None, cpu_shares=None, cgroup_driver='cgroupfs', cluster_advertise=None, cluster_store=None, containerd_commit=None, containers=None, containers_paused=None, containers_running=None, containers_stopped=None, cpu_cfs_period=None, cpu_cfs_quota=None, debug=None, default_runtime='runc', docker_root_dir=None, driver=None, driver_status=None, experimental_build=None, generic_resources=None, http_proxy=None, https_proxy=None, id=None, ipv4_forwarding=None, images=None, index_server_address='https://index.docker.io/v1/', init_binary=None, init_commit=None, isolation='default', kernel_memory=None, kernel_version=None, labels=None, live_restore_enabled=False, logging_driver=None, mem_total=None, memory_limit=None, ncpu=None, n_events_listener=None, nfd=None, n_goroutines=None, name=None, no_proxy=None, os_type=None, oom_kill_disable=None, operating_system=None, plugins=None, registry_config=None, runc_commit=None, runtimes=None, security_options=None, server_version=None, swap_limit=None, swarm=None, system_status=None, system_time=None):  # noqa: E501
        """SystemInfo - a model defined in OpenAPI

        :param architecture: The architecture of this SystemInfo.  # noqa: E501
        :type architecture: str
        :param bridge_nf_ip6tables: The bridge_nf_ip6tables of this SystemInfo.  # noqa: E501
        :type bridge_nf_ip6tables: bool
        :param bridge_nf_iptables: The bridge_nf_iptables of this SystemInfo.  # noqa: E501
        :type bridge_nf_iptables: bool
        :param cpu_set: The cpu_set of this SystemInfo.  # noqa: E501
        :type cpu_set: bool
        :param cpu_shares: The cpu_shares of this SystemInfo.  # noqa: E501
        :type cpu_shares: bool
        :param cgroup_driver: The cgroup_driver of this SystemInfo.  # noqa: E501
        :type cgroup_driver: str
        :param cluster_advertise: The cluster_advertise of this SystemInfo.  # noqa: E501
        :type cluster_advertise: str
        :param cluster_store: The cluster_store of this SystemInfo.  # noqa: E501
        :type cluster_store: str
        :param containerd_commit: The containerd_commit of this SystemInfo.  # noqa: E501
        :type containerd_commit: Commit
        :param containers: The containers of this SystemInfo.  # noqa: E501
        :type containers: int
        :param containers_paused: The containers_paused of this SystemInfo.  # noqa: E501
        :type containers_paused: int
        :param containers_running: The containers_running of this SystemInfo.  # noqa: E501
        :type containers_running: int
        :param containers_stopped: The containers_stopped of this SystemInfo.  # noqa: E501
        :type containers_stopped: int
        :param cpu_cfs_period: The cpu_cfs_period of this SystemInfo.  # noqa: E501
        :type cpu_cfs_period: bool
        :param cpu_cfs_quota: The cpu_cfs_quota of this SystemInfo.  # noqa: E501
        :type cpu_cfs_quota: bool
        :param debug: The debug of this SystemInfo.  # noqa: E501
        :type debug: bool
        :param default_runtime: The default_runtime of this SystemInfo.  # noqa: E501
        :type default_runtime: str
        :param docker_root_dir: The docker_root_dir of this SystemInfo.  # noqa: E501
        :type docker_root_dir: str
        :param driver: The driver of this SystemInfo.  # noqa: E501
        :type driver: str
        :param driver_status: The driver_status of this SystemInfo.  # noqa: E501
        :type driver_status: List[List[str]]
        :param experimental_build: The experimental_build of this SystemInfo.  # noqa: E501
        :type experimental_build: bool
        :param generic_resources: The generic_resources of this SystemInfo.  # noqa: E501
        :type generic_resources: List[GenericResourcesInner]
        :param http_proxy: The http_proxy of this SystemInfo.  # noqa: E501
        :type http_proxy: str
        :param https_proxy: The https_proxy of this SystemInfo.  # noqa: E501
        :type https_proxy: str
        :param id: The id of this SystemInfo.  # noqa: E501
        :type id: str
        :param ipv4_forwarding: The ipv4_forwarding of this SystemInfo.  # noqa: E501
        :type ipv4_forwarding: bool
        :param images: The images of this SystemInfo.  # noqa: E501
        :type images: int
        :param index_server_address: The index_server_address of this SystemInfo.  # noqa: E501
        :type index_server_address: str
        :param init_binary: The init_binary of this SystemInfo.  # noqa: E501
        :type init_binary: str
        :param init_commit: The init_commit of this SystemInfo.  # noqa: E501
        :type init_commit: Commit
        :param isolation: The isolation of this SystemInfo.  # noqa: E501
        :type isolation: str
        :param kernel_memory: The kernel_memory of this SystemInfo.  # noqa: E501
        :type kernel_memory: bool
        :param kernel_version: The kernel_version of this SystemInfo.  # noqa: E501
        :type kernel_version: str
        :param labels: The labels of this SystemInfo.  # noqa: E501
        :type labels: List[str]
        :param live_restore_enabled: The live_restore_enabled of this SystemInfo.  # noqa: E501
        :type live_restore_enabled: bool
        :param logging_driver: The logging_driver of this SystemInfo.  # noqa: E501
        :type logging_driver: str
        :param mem_total: The mem_total of this SystemInfo.  # noqa: E501
        :type mem_total: int
        :param memory_limit: The memory_limit of this SystemInfo.  # noqa: E501
        :type memory_limit: bool
        :param ncpu: The ncpu of this SystemInfo.  # noqa: E501
        :type ncpu: int
        :param n_events_listener: The n_events_listener of this SystemInfo.  # noqa: E501
        :type n_events_listener: int
        :param nfd: The nfd of this SystemInfo.  # noqa: E501
        :type nfd: int
        :param n_goroutines: The n_goroutines of this SystemInfo.  # noqa: E501
        :type n_goroutines: int
        :param name: The name of this SystemInfo.  # noqa: E501
        :type name: str
        :param no_proxy: The no_proxy of this SystemInfo.  # noqa: E501
        :type no_proxy: str
        :param os_type: The os_type of this SystemInfo.  # noqa: E501
        :type os_type: str
        :param oom_kill_disable: The oom_kill_disable of this SystemInfo.  # noqa: E501
        :type oom_kill_disable: bool
        :param operating_system: The operating_system of this SystemInfo.  # noqa: E501
        :type operating_system: str
        :param plugins: The plugins of this SystemInfo.  # noqa: E501
        :type plugins: PluginsInfo
        :param registry_config: The registry_config of this SystemInfo.  # noqa: E501
        :type registry_config: RegistryServiceConfig
        :param runc_commit: The runc_commit of this SystemInfo.  # noqa: E501
        :type runc_commit: Commit
        :param runtimes: The runtimes of this SystemInfo.  # noqa: E501
        :type runtimes: Dict[str, Runtime]
        :param security_options: The security_options of this SystemInfo.  # noqa: E501
        :type security_options: List[str]
        :param server_version: The server_version of this SystemInfo.  # noqa: E501
        :type server_version: str
        :param swap_limit: The swap_limit of this SystemInfo.  # noqa: E501
        :type swap_limit: bool
        :param swarm: The swarm of this SystemInfo.  # noqa: E501
        :type swarm: SwarmInfo
        :param system_status: The system_status of this SystemInfo.  # noqa: E501
        :type system_status: List[List[str]]
        :param system_time: The system_time of this SystemInfo.  # noqa: E501
        :type system_time: str
        """
        self.openapi_types = {
            'architecture': str,
            'bridge_nf_ip6tables': bool,
            'bridge_nf_iptables': bool,
            'cpu_set': bool,
            'cpu_shares': bool,
            'cgroup_driver': str,
            'cluster_advertise': str,
            'cluster_store': str,
            'containerd_commit': Commit,
            'containers': int,
            'containers_paused': int,
            'containers_running': int,
            'containers_stopped': int,
            'cpu_cfs_period': bool,
            'cpu_cfs_quota': bool,
            'debug': bool,
            'default_runtime': str,
            'docker_root_dir': str,
            'driver': str,
            'driver_status': List[List[str]],
            'experimental_build': bool,
            'generic_resources': List[GenericResourcesInner],
            'http_proxy': str,
            'https_proxy': str,
            'id': str,
            'ipv4_forwarding': bool,
            'images': int,
            'index_server_address': str,
            'init_binary': str,
            'init_commit': Commit,
            'isolation': str,
            'kernel_memory': bool,
            'kernel_version': str,
            'labels': List[str],
            'live_restore_enabled': bool,
            'logging_driver': str,
            'mem_total': int,
            'memory_limit': bool,
            'ncpu': int,
            'n_events_listener': int,
            'nfd': int,
            'n_goroutines': int,
            'name': str,
            'no_proxy': str,
            'os_type': str,
            'oom_kill_disable': bool,
            'operating_system': str,
            'plugins': PluginsInfo,
            'registry_config': RegistryServiceConfig,
            'runc_commit': Commit,
            'runtimes': Dict[str, Runtime],
            'security_options': List[str],
            'server_version': str,
            'swap_limit': bool,
            'swarm': SwarmInfo,
            'system_status': List[List[str]],
            'system_time': str
        }

        self.attribute_map = {
            'architecture': 'Architecture',
            'bridge_nf_ip6tables': 'BridgeNfIp6tables',
            'bridge_nf_iptables': 'BridgeNfIptables',
            'cpu_set': 'CPUSet',
            'cpu_shares': 'CPUShares',
            'cgroup_driver': 'CgroupDriver',
            'cluster_advertise': 'ClusterAdvertise',
            'cluster_store': 'ClusterStore',
            'containerd_commit': 'ContainerdCommit',
            'containers': 'Containers',
            'containers_paused': 'ContainersPaused',
            'containers_running': 'ContainersRunning',
            'containers_stopped': 'ContainersStopped',
            'cpu_cfs_period': 'CpuCfsPeriod',
            'cpu_cfs_quota': 'CpuCfsQuota',
            'debug': 'Debug',
            'default_runtime': 'DefaultRuntime',
            'docker_root_dir': 'DockerRootDir',
            'driver': 'Driver',
            'driver_status': 'DriverStatus',
            'experimental_build': 'ExperimentalBuild',
            'generic_resources': 'GenericResources',
            'http_proxy': 'HttpProxy',
            'https_proxy': 'HttpsProxy',
            'id': 'ID',
            'ipv4_forwarding': 'IPv4Forwarding',
            'images': 'Images',
            'index_server_address': 'IndexServerAddress',
            'init_binary': 'InitBinary',
            'init_commit': 'InitCommit',
            'isolation': 'Isolation',
            'kernel_memory': 'KernelMemory',
            'kernel_version': 'KernelVersion',
            'labels': 'Labels',
            'live_restore_enabled': 'LiveRestoreEnabled',
            'logging_driver': 'LoggingDriver',
            'mem_total': 'MemTotal',
            'memory_limit': 'MemoryLimit',
            'ncpu': 'NCPU',
            'n_events_listener': 'NEventsListener',
            'nfd': 'NFd',
            'n_goroutines': 'NGoroutines',
            'name': 'Name',
            'no_proxy': 'NoProxy',
            'os_type': 'OSType',
            'oom_kill_disable': 'OomKillDisable',
            'operating_system': 'OperatingSystem',
            'plugins': 'Plugins',
            'registry_config': 'RegistryConfig',
            'runc_commit': 'RuncCommit',
            'runtimes': 'Runtimes',
            'security_options': 'SecurityOptions',
            'server_version': 'ServerVersion',
            'swap_limit': 'SwapLimit',
            'swarm': 'Swarm',
            'system_status': 'SystemStatus',
            'system_time': 'SystemTime'
        }

        self._architecture = architecture
        self._bridge_nf_ip6tables = bridge_nf_ip6tables
        self._bridge_nf_iptables = bridge_nf_iptables
        self._cpu_set = cpu_set
        self._cpu_shares = cpu_shares
        self._cgroup_driver = cgroup_driver
        self._cluster_advertise = cluster_advertise
        self._cluster_store = cluster_store
        self._containerd_commit = containerd_commit
        self._containers = containers
        self._containers_paused = containers_paused
        self._containers_running = containers_running
        self._containers_stopped = containers_stopped
        self._cpu_cfs_period = cpu_cfs_period
        self._cpu_cfs_quota = cpu_cfs_quota
        self._debug = debug
        self._default_runtime = default_runtime
        self._docker_root_dir = docker_root_dir
        self._driver = driver
        self._driver_status = driver_status
        self._experimental_build = experimental_build
        self._generic_resources = generic_resources
        self._http_proxy = http_proxy
        self._https_proxy = https_proxy
        self._id = id
        self._ipv4_forwarding = ipv4_forwarding
        self._images = images
        self._index_server_address = index_server_address
        self._init_binary = init_binary
        self._init_commit = init_commit
        self._isolation = isolation
        self._kernel_memory = kernel_memory
        self._kernel_version = kernel_version
        self._labels = labels
        self._live_restore_enabled = live_restore_enabled
        self._logging_driver = logging_driver
        self._mem_total = mem_total
        self._memory_limit = memory_limit
        self._ncpu = ncpu
        self._n_events_listener = n_events_listener
        self._nfd = nfd
        self._n_goroutines = n_goroutines
        self._name = name
        self._no_proxy = no_proxy
        self._os_type = os_type
        self._oom_kill_disable = oom_kill_disable
        self._operating_system = operating_system
        self._plugins = plugins
        self._registry_config = registry_config
        self._runc_commit = runc_commit
        self._runtimes = runtimes
        self._security_options = security_options
        self._server_version = server_version
        self._swap_limit = swap_limit
        self._swarm = swarm
        self._system_status = system_status
        self._system_time = system_time

    @classmethod
    def from_dict(cls, dikt) -> 'SystemInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SystemInfo of this SystemInfo.  # noqa: E501
        :rtype: SystemInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self) -> str:
        """Gets the architecture of this SystemInfo.

        Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).   # noqa: E501

        :return: The architecture of this SystemInfo.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture: str):
        """Sets the architecture of this SystemInfo.

        Hardware architecture of the host, as returned by the Go runtime (`GOARCH`).  A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).   # noqa: E501

        :param architecture: The architecture of this SystemInfo.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def bridge_nf_ip6tables(self) -> bool:
        """Gets the bridge_nf_ip6tables of this SystemInfo.

        Indicates if `bridge-nf-call-ip6tables` is available on the host.  # noqa: E501

        :return: The bridge_nf_ip6tables of this SystemInfo.
        :rtype: bool
        """
        return self._bridge_nf_ip6tables

    @bridge_nf_ip6tables.setter
    def bridge_nf_ip6tables(self, bridge_nf_ip6tables: bool):
        """Sets the bridge_nf_ip6tables of this SystemInfo.

        Indicates if `bridge-nf-call-ip6tables` is available on the host.  # noqa: E501

        :param bridge_nf_ip6tables: The bridge_nf_ip6tables of this SystemInfo.
        :type bridge_nf_ip6tables: bool
        """

        self._bridge_nf_ip6tables = bridge_nf_ip6tables

    @property
    def bridge_nf_iptables(self) -> bool:
        """Gets the bridge_nf_iptables of this SystemInfo.

        Indicates if `bridge-nf-call-iptables` is available on the host.  # noqa: E501

        :return: The bridge_nf_iptables of this SystemInfo.
        :rtype: bool
        """
        return self._bridge_nf_iptables

    @bridge_nf_iptables.setter
    def bridge_nf_iptables(self, bridge_nf_iptables: bool):
        """Sets the bridge_nf_iptables of this SystemInfo.

        Indicates if `bridge-nf-call-iptables` is available on the host.  # noqa: E501

        :param bridge_nf_iptables: The bridge_nf_iptables of this SystemInfo.
        :type bridge_nf_iptables: bool
        """

        self._bridge_nf_iptables = bridge_nf_iptables

    @property
    def cpu_set(self) -> bool:
        """Gets the cpu_set of this SystemInfo.

        Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)   # noqa: E501

        :return: The cpu_set of this SystemInfo.
        :rtype: bool
        """
        return self._cpu_set

    @cpu_set.setter
    def cpu_set(self, cpu_set: bool):
        """Sets the cpu_set of this SystemInfo.

        Indicates if CPUsets (cpuset.cpus, cpuset.mems) are supported by the host.  See [cpuset(7)](https://www.kernel.org/doc/Documentation/cgroup-v1/cpusets.txt)   # noqa: E501

        :param cpu_set: The cpu_set of this SystemInfo.
        :type cpu_set: bool
        """

        self._cpu_set = cpu_set

    @property
    def cpu_shares(self) -> bool:
        """Gets the cpu_shares of this SystemInfo.

        Indicates if CPU Shares limiting is supported by the host.  # noqa: E501

        :return: The cpu_shares of this SystemInfo.
        :rtype: bool
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares: bool):
        """Sets the cpu_shares of this SystemInfo.

        Indicates if CPU Shares limiting is supported by the host.  # noqa: E501

        :param cpu_shares: The cpu_shares of this SystemInfo.
        :type cpu_shares: bool
        """

        self._cpu_shares = cpu_shares

    @property
    def cgroup_driver(self) -> str:
        """Gets the cgroup_driver of this SystemInfo.

        The driver to use for managing cgroups.   # noqa: E501

        :return: The cgroup_driver of this SystemInfo.
        :rtype: str
        """
        return self._cgroup_driver

    @cgroup_driver.setter
    def cgroup_driver(self, cgroup_driver: str):
        """Sets the cgroup_driver of this SystemInfo.

        The driver to use for managing cgroups.   # noqa: E501

        :param cgroup_driver: The cgroup_driver of this SystemInfo.
        :type cgroup_driver: str
        """
        allowed_values = ["cgroupfs", "systemd"]  # noqa: E501
        if cgroup_driver not in allowed_values:
            raise ValueError(
                "Invalid value for `cgroup_driver` ({0}), must be one of {1}"
                .format(cgroup_driver, allowed_values)
            )

        self._cgroup_driver = cgroup_driver

    @property
    def cluster_advertise(self) -> str:
        """Gets the cluster_advertise of this SystemInfo.

        The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Note**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.   # noqa: E501

        :return: The cluster_advertise of this SystemInfo.
        :rtype: str
        """
        return self._cluster_advertise

    @cluster_advertise.setter
    def cluster_advertise(self, cluster_advertise: str):
        """Sets the cluster_advertise of this SystemInfo.

        The network endpoint that the Engine advertises for the purpose of node discovery. ClusterAdvertise is a `host:port` combination on which the daemon is reachable by other hosts.  <p><br /></p>  > **Note**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.   # noqa: E501

        :param cluster_advertise: The cluster_advertise of this SystemInfo.
        :type cluster_advertise: str
        """

        self._cluster_advertise = cluster_advertise

    @property
    def cluster_store(self) -> str:
        """Gets the cluster_store of this SystemInfo.

        URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Note**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.   # noqa: E501

        :return: The cluster_store of this SystemInfo.
        :rtype: str
        """
        return self._cluster_store

    @cluster_store.setter
    def cluster_store(self, cluster_store: str):
        """Sets the cluster_store of this SystemInfo.

        URL of the distributed storage backend.   The storage backend is used for multihost networking (to store network and endpoint information) and by the node discovery mechanism.  <p><br /></p>  > **Note**: This field is only propagated when using standalone Swarm > mode, and overlay networking using an external k/v store. Overlay > networks with Swarm mode enabled use the built-in raft store, and > this field will be empty.   # noqa: E501

        :param cluster_store: The cluster_store of this SystemInfo.
        :type cluster_store: str
        """

        self._cluster_store = cluster_store

    @property
    def containerd_commit(self) -> Commit:
        """Gets the containerd_commit of this SystemInfo.


        :return: The containerd_commit of this SystemInfo.
        :rtype: Commit
        """
        return self._containerd_commit

    @containerd_commit.setter
    def containerd_commit(self, containerd_commit: Commit):
        """Sets the containerd_commit of this SystemInfo.


        :param containerd_commit: The containerd_commit of this SystemInfo.
        :type containerd_commit: Commit
        """

        self._containerd_commit = containerd_commit

    @property
    def containers(self) -> int:
        """Gets the containers of this SystemInfo.

        Total number of containers on the host.  # noqa: E501

        :return: The containers of this SystemInfo.
        :rtype: int
        """
        return self._containers

    @containers.setter
    def containers(self, containers: int):
        """Sets the containers of this SystemInfo.

        Total number of containers on the host.  # noqa: E501

        :param containers: The containers of this SystemInfo.
        :type containers: int
        """

        self._containers = containers

    @property
    def containers_paused(self) -> int:
        """Gets the containers_paused of this SystemInfo.

        Number of containers with status `\"paused\"`.   # noqa: E501

        :return: The containers_paused of this SystemInfo.
        :rtype: int
        """
        return self._containers_paused

    @containers_paused.setter
    def containers_paused(self, containers_paused: int):
        """Sets the containers_paused of this SystemInfo.

        Number of containers with status `\"paused\"`.   # noqa: E501

        :param containers_paused: The containers_paused of this SystemInfo.
        :type containers_paused: int
        """

        self._containers_paused = containers_paused

    @property
    def containers_running(self) -> int:
        """Gets the containers_running of this SystemInfo.

        Number of containers with status `\"running\"`.   # noqa: E501

        :return: The containers_running of this SystemInfo.
        :rtype: int
        """
        return self._containers_running

    @containers_running.setter
    def containers_running(self, containers_running: int):
        """Sets the containers_running of this SystemInfo.

        Number of containers with status `\"running\"`.   # noqa: E501

        :param containers_running: The containers_running of this SystemInfo.
        :type containers_running: int
        """

        self._containers_running = containers_running

    @property
    def containers_stopped(self) -> int:
        """Gets the containers_stopped of this SystemInfo.

        Number of containers with status `\"stopped\"`.   # noqa: E501

        :return: The containers_stopped of this SystemInfo.
        :rtype: int
        """
        return self._containers_stopped

    @containers_stopped.setter
    def containers_stopped(self, containers_stopped: int):
        """Sets the containers_stopped of this SystemInfo.

        Number of containers with status `\"stopped\"`.   # noqa: E501

        :param containers_stopped: The containers_stopped of this SystemInfo.
        :type containers_stopped: int
        """

        self._containers_stopped = containers_stopped

    @property
    def cpu_cfs_period(self) -> bool:
        """Gets the cpu_cfs_period of this SystemInfo.

        Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.  # noqa: E501

        :return: The cpu_cfs_period of this SystemInfo.
        :rtype: bool
        """
        return self._cpu_cfs_period

    @cpu_cfs_period.setter
    def cpu_cfs_period(self, cpu_cfs_period: bool):
        """Sets the cpu_cfs_period of this SystemInfo.

        Indicates if CPU CFS(Completely Fair Scheduler) period is supported by the host.  # noqa: E501

        :param cpu_cfs_period: The cpu_cfs_period of this SystemInfo.
        :type cpu_cfs_period: bool
        """

        self._cpu_cfs_period = cpu_cfs_period

    @property
    def cpu_cfs_quota(self) -> bool:
        """Gets the cpu_cfs_quota of this SystemInfo.

        Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.  # noqa: E501

        :return: The cpu_cfs_quota of this SystemInfo.
        :rtype: bool
        """
        return self._cpu_cfs_quota

    @cpu_cfs_quota.setter
    def cpu_cfs_quota(self, cpu_cfs_quota: bool):
        """Sets the cpu_cfs_quota of this SystemInfo.

        Indicates if CPU CFS(Completely Fair Scheduler) quota is supported by the host.  # noqa: E501

        :param cpu_cfs_quota: The cpu_cfs_quota of this SystemInfo.
        :type cpu_cfs_quota: bool
        """

        self._cpu_cfs_quota = cpu_cfs_quota

    @property
    def debug(self) -> bool:
        """Gets the debug of this SystemInfo.

        Indicates if the daemon is running in debug-mode / with debug-level logging enabled.  # noqa: E501

        :return: The debug of this SystemInfo.
        :rtype: bool
        """
        return self._debug

    @debug.setter
    def debug(self, debug: bool):
        """Sets the debug of this SystemInfo.

        Indicates if the daemon is running in debug-mode / with debug-level logging enabled.  # noqa: E501

        :param debug: The debug of this SystemInfo.
        :type debug: bool
        """

        self._debug = debug

    @property
    def default_runtime(self) -> str:
        """Gets the default_runtime of this SystemInfo.

        Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.   # noqa: E501

        :return: The default_runtime of this SystemInfo.
        :rtype: str
        """
        return self._default_runtime

    @default_runtime.setter
    def default_runtime(self, default_runtime: str):
        """Sets the default_runtime of this SystemInfo.

        Name of the default OCI runtime that is used when starting containers.  The default can be overridden per-container at create time.   # noqa: E501

        :param default_runtime: The default_runtime of this SystemInfo.
        :type default_runtime: str
        """

        self._default_runtime = default_runtime

    @property
    def docker_root_dir(self) -> str:
        """Gets the docker_root_dir of this SystemInfo.

        Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.   # noqa: E501

        :return: The docker_root_dir of this SystemInfo.
        :rtype: str
        """
        return self._docker_root_dir

    @docker_root_dir.setter
    def docker_root_dir(self, docker_root_dir: str):
        """Sets the docker_root_dir of this SystemInfo.

        Root directory of persistent Docker state.  Defaults to `/var/lib/docker` on Linux, and `C:\\ProgramData\\docker` on Windows.   # noqa: E501

        :param docker_root_dir: The docker_root_dir of this SystemInfo.
        :type docker_root_dir: str
        """

        self._docker_root_dir = docker_root_dir

    @property
    def driver(self) -> str:
        """Gets the driver of this SystemInfo.

        Name of the storage driver in use.  # noqa: E501

        :return: The driver of this SystemInfo.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this SystemInfo.

        Name of the storage driver in use.  # noqa: E501

        :param driver: The driver of this SystemInfo.
        :type driver: str
        """

        self._driver = driver

    @property
    def driver_status(self) -> List[List[str]]:
        """Gets the driver_status of this SystemInfo.

        Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.   # noqa: E501

        :return: The driver_status of this SystemInfo.
        :rtype: List[List[str]]
        """
        return self._driver_status

    @driver_status.setter
    def driver_status(self, driver_status: List[List[str]]):
        """Sets the driver_status of this SystemInfo.

        Information specific to the storage driver, provided as \"label\" / \"value\" pairs.  This information is provided by the storage driver, and formatted in a way consistent with the output of `docker info` on the command line.  <p><br /></p>  > **Note**: The information returned in this field, including the > formatting of values and labels, should not be considered stable, > and may change without notice.   # noqa: E501

        :param driver_status: The driver_status of this SystemInfo.
        :type driver_status: List[List[str]]
        """

        self._driver_status = driver_status

    @property
    def experimental_build(self) -> bool:
        """Gets the experimental_build of this SystemInfo.

        Indicates if experimental features are enabled on the daemon.   # noqa: E501

        :return: The experimental_build of this SystemInfo.
        :rtype: bool
        """
        return self._experimental_build

    @experimental_build.setter
    def experimental_build(self, experimental_build: bool):
        """Sets the experimental_build of this SystemInfo.

        Indicates if experimental features are enabled on the daemon.   # noqa: E501

        :param experimental_build: The experimental_build of this SystemInfo.
        :type experimental_build: bool
        """

        self._experimental_build = experimental_build

    @property
    def generic_resources(self) -> List[GenericResourcesInner]:
        """Gets the generic_resources of this SystemInfo.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :return: The generic_resources of this SystemInfo.
        :rtype: List[GenericResourcesInner]
        """
        return self._generic_resources

    @generic_resources.setter
    def generic_resources(self, generic_resources: List[GenericResourcesInner]):
        """Sets the generic_resources of this SystemInfo.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :param generic_resources: The generic_resources of this SystemInfo.
        :type generic_resources: List[GenericResourcesInner]
        """

        self._generic_resources = generic_resources

    @property
    def http_proxy(self) -> str:
        """Gets the http_proxy of this SystemInfo.

        HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :return: The http_proxy of this SystemInfo.
        :rtype: str
        """
        return self._http_proxy

    @http_proxy.setter
    def http_proxy(self, http_proxy: str):
        """Sets the http_proxy of this SystemInfo.

        HTTP-proxy configured for the daemon. This value is obtained from the [`HTTP_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :param http_proxy: The http_proxy of this SystemInfo.
        :type http_proxy: str
        """

        self._http_proxy = http_proxy

    @property
    def https_proxy(self) -> str:
        """Gets the https_proxy of this SystemInfo.

        HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :return: The https_proxy of this SystemInfo.
        :rtype: str
        """
        return self._https_proxy

    @https_proxy.setter
    def https_proxy(self, https_proxy: str):
        """Sets the https_proxy of this SystemInfo.

        HTTPS-proxy configured for the daemon. This value is obtained from the [`HTTPS_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :param https_proxy: The https_proxy of this SystemInfo.
        :type https_proxy: str
        """

        self._https_proxy = https_proxy

    @property
    def id(self) -> str:
        """Gets the id of this SystemInfo.

        Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable.   # noqa: E501

        :return: The id of this SystemInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SystemInfo.

        Unique identifier of the daemon.  <p><br /></p>  > **Note**: The format of the ID itself is not part of the API, and > should not be considered stable.   # noqa: E501

        :param id: The id of this SystemInfo.
        :type id: str
        """

        self._id = id

    @property
    def ipv4_forwarding(self) -> bool:
        """Gets the ipv4_forwarding of this SystemInfo.

        Indicates IPv4 forwarding is enabled.  # noqa: E501

        :return: The ipv4_forwarding of this SystemInfo.
        :rtype: bool
        """
        return self._ipv4_forwarding

    @ipv4_forwarding.setter
    def ipv4_forwarding(self, ipv4_forwarding: bool):
        """Sets the ipv4_forwarding of this SystemInfo.

        Indicates IPv4 forwarding is enabled.  # noqa: E501

        :param ipv4_forwarding: The ipv4_forwarding of this SystemInfo.
        :type ipv4_forwarding: bool
        """

        self._ipv4_forwarding = ipv4_forwarding

    @property
    def images(self) -> int:
        """Gets the images of this SystemInfo.

        Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.   # noqa: E501

        :return: The images of this SystemInfo.
        :rtype: int
        """
        return self._images

    @images.setter
    def images(self, images: int):
        """Sets the images of this SystemInfo.

        Total number of images on the host.  Both _tagged_ and _untagged_ (dangling) images are counted.   # noqa: E501

        :param images: The images of this SystemInfo.
        :type images: int
        """

        self._images = images

    @property
    def index_server_address(self) -> str:
        """Gets the index_server_address of this SystemInfo.

        Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.   # noqa: E501

        :return: The index_server_address of this SystemInfo.
        :rtype: str
        """
        return self._index_server_address

    @index_server_address.setter
    def index_server_address(self, index_server_address: str):
        """Sets the index_server_address of this SystemInfo.

        Address / URL of the index server that is used for image search, and as a default for user authentication for Docker Hub and Docker Cloud.   # noqa: E501

        :param index_server_address: The index_server_address of this SystemInfo.
        :type index_server_address: str
        """

        self._index_server_address = index_server_address

    @property
    def init_binary(self) -> str:
        """Gets the init_binary of this SystemInfo.

        Name and, optional, path of the the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.   # noqa: E501

        :return: The init_binary of this SystemInfo.
        :rtype: str
        """
        return self._init_binary

    @init_binary.setter
    def init_binary(self, init_binary: str):
        """Sets the init_binary of this SystemInfo.

        Name and, optional, path of the the `docker-init` binary.  If the path is omitted, the daemon searches the host's `$PATH` for the binary and uses the first result.   # noqa: E501

        :param init_binary: The init_binary of this SystemInfo.
        :type init_binary: str
        """

        self._init_binary = init_binary

    @property
    def init_commit(self) -> Commit:
        """Gets the init_commit of this SystemInfo.


        :return: The init_commit of this SystemInfo.
        :rtype: Commit
        """
        return self._init_commit

    @init_commit.setter
    def init_commit(self, init_commit: Commit):
        """Sets the init_commit of this SystemInfo.


        :param init_commit: The init_commit of this SystemInfo.
        :type init_commit: Commit
        """

        self._init_commit = init_commit

    @property
    def isolation(self) -> str:
        """Gets the isolation of this SystemInfo.

        Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.   # noqa: E501

        :return: The isolation of this SystemInfo.
        :rtype: str
        """
        return self._isolation

    @isolation.setter
    def isolation(self, isolation: str):
        """Sets the isolation of this SystemInfo.

        Represents the isolation technology to use as a default for containers. The supported values are platform-specific.  If no isolation value is specified on daemon start, on Windows client, the default is `hyperv`, and on Windows server, the default is `process`.  This option is currently not used on other platforms.   # noqa: E501

        :param isolation: The isolation of this SystemInfo.
        :type isolation: str
        """
        allowed_values = ["default", "hyperv", "process"]  # noqa: E501
        if isolation not in allowed_values:
            raise ValueError(
                "Invalid value for `isolation` ({0}), must be one of {1}"
                .format(isolation, allowed_values)
            )

        self._isolation = isolation

    @property
    def kernel_memory(self) -> bool:
        """Gets the kernel_memory of this SystemInfo.

        Indicates if the host has kernel memory limit support enabled.  # noqa: E501

        :return: The kernel_memory of this SystemInfo.
        :rtype: bool
        """
        return self._kernel_memory

    @kernel_memory.setter
    def kernel_memory(self, kernel_memory: bool):
        """Sets the kernel_memory of this SystemInfo.

        Indicates if the host has kernel memory limit support enabled.  # noqa: E501

        :param kernel_memory: The kernel_memory of this SystemInfo.
        :type kernel_memory: bool
        """

        self._kernel_memory = kernel_memory

    @property
    def kernel_version(self) -> str:
        """Gets the kernel_version of this SystemInfo.

        Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.   # noqa: E501

        :return: The kernel_version of this SystemInfo.
        :rtype: str
        """
        return self._kernel_version

    @kernel_version.setter
    def kernel_version(self, kernel_version: str):
        """Sets the kernel_version of this SystemInfo.

        Kernel version of the host.  On Linux, this information obtained from `uname`. On Windows this information is queried from the <kbd>HKEY_LOCAL_MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\</kbd> registry value, for example _\"10.0 14393 (14393.1198.amd64fre.rs1_release_sec.170427-1353)\"_.   # noqa: E501

        :param kernel_version: The kernel_version of this SystemInfo.
        :type kernel_version: str
        """

        self._kernel_version = kernel_version

    @property
    def labels(self) -> List[str]:
        """Gets the labels of this SystemInfo.

        User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm.   # noqa: E501

        :return: The labels of this SystemInfo.
        :rtype: List[str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: List[str]):
        """Sets the labels of this SystemInfo.

        User-defined labels (key/value metadata) as set on the daemon.  <p><br /></p>  > **Note**: When part of a Swarm, nodes can both have _daemon_ labels, > set through the daemon configuration, and _node_ labels, set from a > manager node in the Swarm. Node labels are not included in this > field. Node labels can be retrieved using the `/nodes/(id)` endpoint > on a manager node in the Swarm.   # noqa: E501

        :param labels: The labels of this SystemInfo.
        :type labels: List[str]
        """

        self._labels = labels

    @property
    def live_restore_enabled(self) -> bool:
        """Gets the live_restore_enabled of this SystemInfo.

        Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.   # noqa: E501

        :return: The live_restore_enabled of this SystemInfo.
        :rtype: bool
        """
        return self._live_restore_enabled

    @live_restore_enabled.setter
    def live_restore_enabled(self, live_restore_enabled: bool):
        """Sets the live_restore_enabled of this SystemInfo.

        Indicates if live restore is enabled.  If enabled, containers are kept running when the daemon is shutdown or upon daemon start if running containers are detected.   # noqa: E501

        :param live_restore_enabled: The live_restore_enabled of this SystemInfo.
        :type live_restore_enabled: bool
        """

        self._live_restore_enabled = live_restore_enabled

    @property
    def logging_driver(self) -> str:
        """Gets the logging_driver of this SystemInfo.

        The logging driver to use as a default for new containers.   # noqa: E501

        :return: The logging_driver of this SystemInfo.
        :rtype: str
        """
        return self._logging_driver

    @logging_driver.setter
    def logging_driver(self, logging_driver: str):
        """Sets the logging_driver of this SystemInfo.

        The logging driver to use as a default for new containers.   # noqa: E501

        :param logging_driver: The logging_driver of this SystemInfo.
        :type logging_driver: str
        """

        self._logging_driver = logging_driver

    @property
    def mem_total(self) -> int:
        """Gets the mem_total of this SystemInfo.

        Total amount of physical memory available on the host, in kilobytes (kB).   # noqa: E501

        :return: The mem_total of this SystemInfo.
        :rtype: int
        """
        return self._mem_total

    @mem_total.setter
    def mem_total(self, mem_total: int):
        """Sets the mem_total of this SystemInfo.

        Total amount of physical memory available on the host, in kilobytes (kB).   # noqa: E501

        :param mem_total: The mem_total of this SystemInfo.
        :type mem_total: int
        """

        self._mem_total = mem_total

    @property
    def memory_limit(self) -> bool:
        """Gets the memory_limit of this SystemInfo.

        Indicates if the host has memory limit support enabled.  # noqa: E501

        :return: The memory_limit of this SystemInfo.
        :rtype: bool
        """
        return self._memory_limit

    @memory_limit.setter
    def memory_limit(self, memory_limit: bool):
        """Sets the memory_limit of this SystemInfo.

        Indicates if the host has memory limit support enabled.  # noqa: E501

        :param memory_limit: The memory_limit of this SystemInfo.
        :type memory_limit: bool
        """

        self._memory_limit = memory_limit

    @property
    def ncpu(self) -> int:
        """Gets the ncpu of this SystemInfo.

        The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.   # noqa: E501

        :return: The ncpu of this SystemInfo.
        :rtype: int
        """
        return self._ncpu

    @ncpu.setter
    def ncpu(self, ncpu: int):
        """Sets the ncpu of this SystemInfo.

        The number of logical CPUs usable by the daemon.  The number of available CPUs is checked by querying the operating system when the daemon starts. Changes to operating system CPU allocation after the daemon is started are not reflected.   # noqa: E501

        :param ncpu: The ncpu of this SystemInfo.
        :type ncpu: int
        """

        self._ncpu = ncpu

    @property
    def n_events_listener(self) -> int:
        """Gets the n_events_listener of this SystemInfo.

        Number of event listeners subscribed.  # noqa: E501

        :return: The n_events_listener of this SystemInfo.
        :rtype: int
        """
        return self._n_events_listener

    @n_events_listener.setter
    def n_events_listener(self, n_events_listener: int):
        """Sets the n_events_listener of this SystemInfo.

        Number of event listeners subscribed.  # noqa: E501

        :param n_events_listener: The n_events_listener of this SystemInfo.
        :type n_events_listener: int
        """

        self._n_events_listener = n_events_listener

    @property
    def nfd(self) -> int:
        """Gets the nfd of this SystemInfo.

        The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.   # noqa: E501

        :return: The nfd of this SystemInfo.
        :rtype: int
        """
        return self._nfd

    @nfd.setter
    def nfd(self, nfd: int):
        """Sets the nfd of this SystemInfo.

        The total number of file Descriptors in use by the daemon process.  This information is only returned if debug-mode is enabled.   # noqa: E501

        :param nfd: The nfd of this SystemInfo.
        :type nfd: int
        """

        self._nfd = nfd

    @property
    def n_goroutines(self) -> int:
        """Gets the n_goroutines of this SystemInfo.

        The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.   # noqa: E501

        :return: The n_goroutines of this SystemInfo.
        :rtype: int
        """
        return self._n_goroutines

    @n_goroutines.setter
    def n_goroutines(self, n_goroutines: int):
        """Sets the n_goroutines of this SystemInfo.

        The  number of goroutines that currently exist.  This information is only returned if debug-mode is enabled.   # noqa: E501

        :param n_goroutines: The n_goroutines of this SystemInfo.
        :type n_goroutines: int
        """

        self._n_goroutines = n_goroutines

    @property
    def name(self) -> str:
        """Gets the name of this SystemInfo.

        Hostname of the host.  # noqa: E501

        :return: The name of this SystemInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SystemInfo.

        Hostname of the host.  # noqa: E501

        :param name: The name of this SystemInfo.
        :type name: str
        """

        self._name = name

    @property
    def no_proxy(self) -> str:
        """Gets the no_proxy of this SystemInfo.

        Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :return: The no_proxy of this SystemInfo.
        :rtype: str
        """
        return self._no_proxy

    @no_proxy.setter
    def no_proxy(self, no_proxy: str):
        """Sets the no_proxy of this SystemInfo.

        Comma-separated list of domain extensions for which no proxy should be used. This value is obtained from the [`NO_PROXY`](https://www.gnu.org/software/wget/manual/html_node/Proxies.html) environment variable.  Containers do not automatically inherit this configuration.   # noqa: E501

        :param no_proxy: The no_proxy of this SystemInfo.
        :type no_proxy: str
        """

        self._no_proxy = no_proxy

    @property
    def os_type(self) -> str:
        """Gets the os_type of this SystemInfo.

        Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).   # noqa: E501

        :return: The os_type of this SystemInfo.
        :rtype: str
        """
        return self._os_type

    @os_type.setter
    def os_type(self, os_type: str):
        """Sets the os_type of this SystemInfo.

        Generic type of the operating system of the host, as returned by the Go runtime (`GOOS`).  Currently returned values are \"linux\" and \"windows\". A full list of possible values can be found in the [Go documentation](https://golang.org/doc/install/source#environment).   # noqa: E501

        :param os_type: The os_type of this SystemInfo.
        :type os_type: str
        """

        self._os_type = os_type

    @property
    def oom_kill_disable(self) -> bool:
        """Gets the oom_kill_disable of this SystemInfo.

        Indicates if OOM killer disable is supported on the host.  # noqa: E501

        :return: The oom_kill_disable of this SystemInfo.
        :rtype: bool
        """
        return self._oom_kill_disable

    @oom_kill_disable.setter
    def oom_kill_disable(self, oom_kill_disable: bool):
        """Sets the oom_kill_disable of this SystemInfo.

        Indicates if OOM killer disable is supported on the host.  # noqa: E501

        :param oom_kill_disable: The oom_kill_disable of this SystemInfo.
        :type oom_kill_disable: bool
        """

        self._oom_kill_disable = oom_kill_disable

    @property
    def operating_system(self) -> str:
        """Gets the operating_system of this SystemInfo.

        Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"   # noqa: E501

        :return: The operating_system of this SystemInfo.
        :rtype: str
        """
        return self._operating_system

    @operating_system.setter
    def operating_system(self, operating_system: str):
        """Sets the operating_system of this SystemInfo.

        Name of the host's operating system, for example: \"Ubuntu 16.04.2 LTS\" or \"Windows Server 2016 Datacenter\"   # noqa: E501

        :param operating_system: The operating_system of this SystemInfo.
        :type operating_system: str
        """

        self._operating_system = operating_system

    @property
    def plugins(self) -> PluginsInfo:
        """Gets the plugins of this SystemInfo.


        :return: The plugins of this SystemInfo.
        :rtype: PluginsInfo
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins: PluginsInfo):
        """Sets the plugins of this SystemInfo.


        :param plugins: The plugins of this SystemInfo.
        :type plugins: PluginsInfo
        """

        self._plugins = plugins

    @property
    def registry_config(self) -> RegistryServiceConfig:
        """Gets the registry_config of this SystemInfo.


        :return: The registry_config of this SystemInfo.
        :rtype: RegistryServiceConfig
        """
        return self._registry_config

    @registry_config.setter
    def registry_config(self, registry_config: RegistryServiceConfig):
        """Sets the registry_config of this SystemInfo.


        :param registry_config: The registry_config of this SystemInfo.
        :type registry_config: RegistryServiceConfig
        """

        self._registry_config = registry_config

    @property
    def runc_commit(self) -> Commit:
        """Gets the runc_commit of this SystemInfo.


        :return: The runc_commit of this SystemInfo.
        :rtype: Commit
        """
        return self._runc_commit

    @runc_commit.setter
    def runc_commit(self, runc_commit: Commit):
        """Sets the runc_commit of this SystemInfo.


        :param runc_commit: The runc_commit of this SystemInfo.
        :type runc_commit: Commit
        """

        self._runc_commit = runc_commit

    @property
    def runtimes(self) -> Dict[str, Runtime]:
        """Gets the runtimes of this SystemInfo.

        List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here.   # noqa: E501

        :return: The runtimes of this SystemInfo.
        :rtype: Dict[str, Runtime]
        """
        return self._runtimes

    @runtimes.setter
    def runtimes(self, runtimes: Dict[str, Runtime]):
        """Sets the runtimes of this SystemInfo.

        List of [OCI compliant](https://github.com/opencontainers/runtime-spec) runtimes configured on the daemon. Keys hold the \"name\" used to reference the runtime.  The Docker daemon relies on an OCI compliant runtime (invoked via the `containerd` daemon) as its interface to the Linux kernel namespaces, cgroups, and SELinux.  The default runtime is `runc`, and automatically configured. Additional runtimes can be configured by the user and will be listed here.   # noqa: E501

        :param runtimes: The runtimes of this SystemInfo.
        :type runtimes: Dict[str, Runtime]
        """

        self._runtimes = runtimes

    @property
    def security_options(self) -> List[str]:
        """Gets the security_options of this SystemInfo.

        List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, and user-namespaces (userns).  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.   # noqa: E501

        :return: The security_options of this SystemInfo.
        :rtype: List[str]
        """
        return self._security_options

    @security_options.setter
    def security_options(self, security_options: List[str]):
        """Sets the security_options of this SystemInfo.

        List of security features that are enabled on the daemon, such as apparmor, seccomp, SELinux, and user-namespaces (userns).  Additional configuration options for each security feature may be present, and are included as a comma-separated list of key/value pairs.   # noqa: E501

        :param security_options: The security_options of this SystemInfo.
        :type security_options: List[str]
        """

        self._security_options = security_options

    @property
    def server_version(self) -> str:
        """Gets the server_version of this SystemInfo.

        Version string of the daemon.  > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`.   # noqa: E501

        :return: The server_version of this SystemInfo.
        :rtype: str
        """
        return self._server_version

    @server_version.setter
    def server_version(self, server_version: str):
        """Sets the server_version of this SystemInfo.

        Version string of the daemon.  > **Note**: the [standalone Swarm API](https://docs.docker.com/swarm/swarm-api/) > returns the Swarm version instead of the daemon  version, for example > `swarm/1.2.8`.   # noqa: E501

        :param server_version: The server_version of this SystemInfo.
        :type server_version: str
        """

        self._server_version = server_version

    @property
    def swap_limit(self) -> bool:
        """Gets the swap_limit of this SystemInfo.

        Indicates if the host has memory swap limit support enabled.  # noqa: E501

        :return: The swap_limit of this SystemInfo.
        :rtype: bool
        """
        return self._swap_limit

    @swap_limit.setter
    def swap_limit(self, swap_limit: bool):
        """Sets the swap_limit of this SystemInfo.

        Indicates if the host has memory swap limit support enabled.  # noqa: E501

        :param swap_limit: The swap_limit of this SystemInfo.
        :type swap_limit: bool
        """

        self._swap_limit = swap_limit

    @property
    def swarm(self) -> SwarmInfo:
        """Gets the swarm of this SystemInfo.


        :return: The swarm of this SystemInfo.
        :rtype: SwarmInfo
        """
        return self._swarm

    @swarm.setter
    def swarm(self, swarm: SwarmInfo):
        """Sets the swarm of this SystemInfo.


        :param swarm: The swarm of this SystemInfo.
        :type swarm: SwarmInfo
        """

        self._swarm = swarm

    @property
    def system_status(self) -> List[List[str]]:
        """Gets the system_status of this SystemInfo.

        Status information about this node (standalone Swarm API).  <p><br /></p>  > **Note**: The information returned in this field is only propagated > by the Swarm standalone API, and is empty (`null`) when using > built-in swarm mode.   # noqa: E501

        :return: The system_status of this SystemInfo.
        :rtype: List[List[str]]
        """
        return self._system_status

    @system_status.setter
    def system_status(self, system_status: List[List[str]]):
        """Sets the system_status of this SystemInfo.

        Status information about this node (standalone Swarm API).  <p><br /></p>  > **Note**: The information returned in this field is only propagated > by the Swarm standalone API, and is empty (`null`) when using > built-in swarm mode.   # noqa: E501

        :param system_status: The system_status of this SystemInfo.
        :type system_status: List[List[str]]
        """

        self._system_status = system_status

    @property
    def system_time(self) -> str:
        """Gets the system_time of this SystemInfo.

        Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :return: The system_time of this SystemInfo.
        :rtype: str
        """
        return self._system_time

    @system_time.setter
    def system_time(self, system_time: str):
        """Sets the system_time of this SystemInfo.

        Current system-time in [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format with nano-seconds.   # noqa: E501

        :param system_time: The system_time of this SystemInfo.
        :type system_time: str
        """

        self._system_time = system_time
