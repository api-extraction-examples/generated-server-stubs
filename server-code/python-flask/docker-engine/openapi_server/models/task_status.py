from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.task_state import TaskState
from openapi_server.models.task_status_container_status import TaskStatusContainerStatus
from openapi_server import util

from openapi_server.models.task_state import TaskState  # noqa: E501
from openapi_server.models.task_status_container_status import TaskStatusContainerStatus  # noqa: E501

class TaskStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_status=None, err=None, message=None, state=None, timestamp=None):  # noqa: E501
        """TaskStatus - a model defined in OpenAPI

        :param container_status: The container_status of this TaskStatus.  # noqa: E501
        :type container_status: TaskStatusContainerStatus
        :param err: The err of this TaskStatus.  # noqa: E501
        :type err: str
        :param message: The message of this TaskStatus.  # noqa: E501
        :type message: str
        :param state: The state of this TaskStatus.  # noqa: E501
        :type state: TaskState
        :param timestamp: The timestamp of this TaskStatus.  # noqa: E501
        :type timestamp: str
        """
        self.openapi_types = {
            'container_status': TaskStatusContainerStatus,
            'err': str,
            'message': str,
            'state': TaskState,
            'timestamp': str
        }

        self.attribute_map = {
            'container_status': 'ContainerStatus',
            'err': 'Err',
            'message': 'Message',
            'state': 'State',
            'timestamp': 'Timestamp'
        }

        self._container_status = container_status
        self._err = err
        self._message = message
        self._state = state
        self._timestamp = timestamp

    @classmethod
    def from_dict(cls, dikt) -> 'TaskStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task_Status of this TaskStatus.  # noqa: E501
        :rtype: TaskStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_status(self) -> TaskStatusContainerStatus:
        """Gets the container_status of this TaskStatus.


        :return: The container_status of this TaskStatus.
        :rtype: TaskStatusContainerStatus
        """
        return self._container_status

    @container_status.setter
    def container_status(self, container_status: TaskStatusContainerStatus):
        """Sets the container_status of this TaskStatus.


        :param container_status: The container_status of this TaskStatus.
        :type container_status: TaskStatusContainerStatus
        """

        self._container_status = container_status

    @property
    def err(self) -> str:
        """Gets the err of this TaskStatus.


        :return: The err of this TaskStatus.
        :rtype: str
        """
        return self._err

    @err.setter
    def err(self, err: str):
        """Sets the err of this TaskStatus.


        :param err: The err of this TaskStatus.
        :type err: str
        """

        self._err = err

    @property
    def message(self) -> str:
        """Gets the message of this TaskStatus.


        :return: The message of this TaskStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this TaskStatus.


        :param message: The message of this TaskStatus.
        :type message: str
        """

        self._message = message

    @property
    def state(self) -> TaskState:
        """Gets the state of this TaskStatus.


        :return: The state of this TaskStatus.
        :rtype: TaskState
        """
        return self._state

    @state.setter
    def state(self, state: TaskState):
        """Sets the state of this TaskStatus.


        :param state: The state of this TaskStatus.
        :type state: TaskState
        """

        self._state = state

    @property
    def timestamp(self) -> str:
        """Gets the timestamp of this TaskStatus.


        :return: The timestamp of this TaskStatus.
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp: str):
        """Sets the timestamp of this TaskStatus.


        :param timestamp: The timestamp of this TaskStatus.
        :type timestamp: str
        """

        self._timestamp = timestamp
