from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceUpdateStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, completed_at=None, message=None, started_at=None, state=None):  # noqa: E501
        """ServiceUpdateStatus - a model defined in OpenAPI

        :param completed_at: The completed_at of this ServiceUpdateStatus.  # noqa: E501
        :type completed_at: str
        :param message: The message of this ServiceUpdateStatus.  # noqa: E501
        :type message: str
        :param started_at: The started_at of this ServiceUpdateStatus.  # noqa: E501
        :type started_at: str
        :param state: The state of this ServiceUpdateStatus.  # noqa: E501
        :type state: str
        """
        self.openapi_types = {
            'completed_at': str,
            'message': str,
            'started_at': str,
            'state': str
        }

        self.attribute_map = {
            'completed_at': 'CompletedAt',
            'message': 'Message',
            'started_at': 'StartedAt',
            'state': 'State'
        }

        self._completed_at = completed_at
        self._message = message
        self._started_at = started_at
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceUpdateStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Service_UpdateStatus of this ServiceUpdateStatus.  # noqa: E501
        :rtype: ServiceUpdateStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def completed_at(self) -> str:
        """Gets the completed_at of this ServiceUpdateStatus.


        :return: The completed_at of this ServiceUpdateStatus.
        :rtype: str
        """
        return self._completed_at

    @completed_at.setter
    def completed_at(self, completed_at: str):
        """Sets the completed_at of this ServiceUpdateStatus.


        :param completed_at: The completed_at of this ServiceUpdateStatus.
        :type completed_at: str
        """

        self._completed_at = completed_at

    @property
    def message(self) -> str:
        """Gets the message of this ServiceUpdateStatus.


        :return: The message of this ServiceUpdateStatus.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this ServiceUpdateStatus.


        :param message: The message of this ServiceUpdateStatus.
        :type message: str
        """

        self._message = message

    @property
    def started_at(self) -> str:
        """Gets the started_at of this ServiceUpdateStatus.


        :return: The started_at of this ServiceUpdateStatus.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: str):
        """Sets the started_at of this ServiceUpdateStatus.


        :param started_at: The started_at of this ServiceUpdateStatus.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def state(self) -> str:
        """Gets the state of this ServiceUpdateStatus.


        :return: The state of this ServiceUpdateStatus.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this ServiceUpdateStatus.


        :param state: The state of this ServiceUpdateStatus.
        :type state: str
        """
        allowed_values = ["updating", "paused", "completed"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state
