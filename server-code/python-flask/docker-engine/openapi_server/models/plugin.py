from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_config import PluginConfig
from openapi_server.models.plugin_settings import PluginSettings
from openapi_server import util

from openapi_server.models.plugin_config import PluginConfig  # noqa: E501
from openapi_server.models.plugin_settings import PluginSettings  # noqa: E501

class Plugin(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config=None, enabled=None, id=None, name=None, plugin_reference=None, settings=None):  # noqa: E501
        """Plugin - a model defined in OpenAPI

        :param config: The config of this Plugin.  # noqa: E501
        :type config: PluginConfig
        :param enabled: The enabled of this Plugin.  # noqa: E501
        :type enabled: bool
        :param id: The id of this Plugin.  # noqa: E501
        :type id: str
        :param name: The name of this Plugin.  # noqa: E501
        :type name: str
        :param plugin_reference: The plugin_reference of this Plugin.  # noqa: E501
        :type plugin_reference: str
        :param settings: The settings of this Plugin.  # noqa: E501
        :type settings: PluginSettings
        """
        self.openapi_types = {
            'config': PluginConfig,
            'enabled': bool,
            'id': str,
            'name': str,
            'plugin_reference': str,
            'settings': PluginSettings
        }

        self.attribute_map = {
            'config': 'Config',
            'enabled': 'Enabled',
            'id': 'Id',
            'name': 'Name',
            'plugin_reference': 'PluginReference',
            'settings': 'Settings'
        }

        self._config = config
        self._enabled = enabled
        self._id = id
        self._name = name
        self._plugin_reference = plugin_reference
        self._settings = settings

    @classmethod
    def from_dict(cls, dikt) -> 'Plugin':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plugin of this Plugin.  # noqa: E501
        :rtype: Plugin
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self) -> PluginConfig:
        """Gets the config of this Plugin.


        :return: The config of this Plugin.
        :rtype: PluginConfig
        """
        return self._config

    @config.setter
    def config(self, config: PluginConfig):
        """Sets the config of this Plugin.


        :param config: The config of this Plugin.
        :type config: PluginConfig
        """
        if config is None:
            raise ValueError("Invalid value for `config`, must not be `None`")  # noqa: E501

        self._config = config

    @property
    def enabled(self) -> bool:
        """Gets the enabled of this Plugin.

        True if the plugin is running. False if the plugin is not running, only installed.  # noqa: E501

        :return: The enabled of this Plugin.
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled: bool):
        """Sets the enabled of this Plugin.

        True if the plugin is running. False if the plugin is not running, only installed.  # noqa: E501

        :param enabled: The enabled of this Plugin.
        :type enabled: bool
        """
        if enabled is None:
            raise ValueError("Invalid value for `enabled`, must not be `None`")  # noqa: E501

        self._enabled = enabled

    @property
    def id(self) -> str:
        """Gets the id of this Plugin.


        :return: The id of this Plugin.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Plugin.


        :param id: The id of this Plugin.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Plugin.


        :return: The name of this Plugin.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Plugin.


        :param name: The name of this Plugin.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def plugin_reference(self) -> str:
        """Gets the plugin_reference of this Plugin.

        plugin remote reference used to push/pull the plugin  # noqa: E501

        :return: The plugin_reference of this Plugin.
        :rtype: str
        """
        return self._plugin_reference

    @plugin_reference.setter
    def plugin_reference(self, plugin_reference: str):
        """Sets the plugin_reference of this Plugin.

        plugin remote reference used to push/pull the plugin  # noqa: E501

        :param plugin_reference: The plugin_reference of this Plugin.
        :type plugin_reference: str
        """

        self._plugin_reference = plugin_reference

    @property
    def settings(self) -> PluginSettings:
        """Gets the settings of this Plugin.


        :return: The settings of this Plugin.
        :rtype: PluginSettings
        """
        return self._settings

    @settings.setter
    def settings(self, settings: PluginSettings):
        """Sets the settings of this Plugin.


        :param settings: The settings of this Plugin.
        :type settings: PluginSettings
        """
        if settings is None:
            raise ValueError("Invalid value for `settings`, must not be `None`")  # noqa: E501

        self._settings = settings
