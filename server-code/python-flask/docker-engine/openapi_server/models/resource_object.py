from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.generic_resources_inner import GenericResourcesInner
from openapi_server import util

from openapi_server.models.generic_resources_inner import GenericResourcesInner  # noqa: E501

class ResourceObject(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, generic_resources=None, memory_bytes=None, nano_cpus=None):  # noqa: E501
        """ResourceObject - a model defined in OpenAPI

        :param generic_resources: The generic_resources of this ResourceObject.  # noqa: E501
        :type generic_resources: List[GenericResourcesInner]
        :param memory_bytes: The memory_bytes of this ResourceObject.  # noqa: E501
        :type memory_bytes: int
        :param nano_cpus: The nano_cpus of this ResourceObject.  # noqa: E501
        :type nano_cpus: int
        """
        self.openapi_types = {
            'generic_resources': List[GenericResourcesInner],
            'memory_bytes': int,
            'nano_cpus': int
        }

        self.attribute_map = {
            'generic_resources': 'GenericResources',
            'memory_bytes': 'MemoryBytes',
            'nano_cpus': 'NanoCPUs'
        }

        self._generic_resources = generic_resources
        self._memory_bytes = memory_bytes
        self._nano_cpus = nano_cpus

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceObject':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceObject of this ResourceObject.  # noqa: E501
        :rtype: ResourceObject
        """
        return util.deserialize_model(dikt, cls)

    @property
    def generic_resources(self) -> List[GenericResourcesInner]:
        """Gets the generic_resources of this ResourceObject.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :return: The generic_resources of this ResourceObject.
        :rtype: List[GenericResourcesInner]
        """
        return self._generic_resources

    @generic_resources.setter
    def generic_resources(self, generic_resources: List[GenericResourcesInner]):
        """Sets the generic_resources of this ResourceObject.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :param generic_resources: The generic_resources of this ResourceObject.
        :type generic_resources: List[GenericResourcesInner]
        """

        self._generic_resources = generic_resources

    @property
    def memory_bytes(self) -> int:
        """Gets the memory_bytes of this ResourceObject.


        :return: The memory_bytes of this ResourceObject.
        :rtype: int
        """
        return self._memory_bytes

    @memory_bytes.setter
    def memory_bytes(self, memory_bytes: int):
        """Sets the memory_bytes of this ResourceObject.


        :param memory_bytes: The memory_bytes of this ResourceObject.
        :type memory_bytes: int
        """

        self._memory_bytes = memory_bytes

    @property
    def nano_cpus(self) -> int:
        """Gets the nano_cpus of this ResourceObject.


        :return: The nano_cpus of this ResourceObject.
        :rtype: int
        """
        return self._nano_cpus

    @nano_cpus.setter
    def nano_cpus(self, nano_cpus: int):
        """Sets the nano_cpus of this ResourceObject.


        :param nano_cpus: The nano_cpus of this ResourceObject.
        :type nano_cpus: int
        """

        self._nano_cpus = nano_cpus
