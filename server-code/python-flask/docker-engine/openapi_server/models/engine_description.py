from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.engine_description_plugins_inner import EngineDescriptionPluginsInner
from openapi_server import util

from openapi_server.models.engine_description_plugins_inner import EngineDescriptionPluginsInner  # noqa: E501

class EngineDescription(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, engine_version=None, labels=None, plugins=None):  # noqa: E501
        """EngineDescription - a model defined in OpenAPI

        :param engine_version: The engine_version of this EngineDescription.  # noqa: E501
        :type engine_version: str
        :param labels: The labels of this EngineDescription.  # noqa: E501
        :type labels: Dict[str, str]
        :param plugins: The plugins of this EngineDescription.  # noqa: E501
        :type plugins: List[EngineDescriptionPluginsInner]
        """
        self.openapi_types = {
            'engine_version': str,
            'labels': Dict[str, str],
            'plugins': List[EngineDescriptionPluginsInner]
        }

        self.attribute_map = {
            'engine_version': 'EngineVersion',
            'labels': 'Labels',
            'plugins': 'Plugins'
        }

        self._engine_version = engine_version
        self._labels = labels
        self._plugins = plugins

    @classmethod
    def from_dict(cls, dikt) -> 'EngineDescription':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EngineDescription of this EngineDescription.  # noqa: E501
        :rtype: EngineDescription
        """
        return util.deserialize_model(dikt, cls)

    @property
    def engine_version(self) -> str:
        """Gets the engine_version of this EngineDescription.


        :return: The engine_version of this EngineDescription.
        :rtype: str
        """
        return self._engine_version

    @engine_version.setter
    def engine_version(self, engine_version: str):
        """Sets the engine_version of this EngineDescription.


        :param engine_version: The engine_version of this EngineDescription.
        :type engine_version: str
        """

        self._engine_version = engine_version

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this EngineDescription.


        :return: The labels of this EngineDescription.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this EngineDescription.


        :param labels: The labels of this EngineDescription.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def plugins(self) -> List[EngineDescriptionPluginsInner]:
        """Gets the plugins of this EngineDescription.


        :return: The plugins of this EngineDescription.
        :rtype: List[EngineDescriptionPluginsInner]
        """
        return self._plugins

    @plugins.setter
    def plugins(self, plugins: List[EngineDescriptionPluginsInner]):
        """Sets the plugins of this EngineDescription.


        :param plugins: The plugins of this EngineDescription.
        :type plugins: List[EngineDescriptionPluginsInner]
        """

        self._plugins = plugins
