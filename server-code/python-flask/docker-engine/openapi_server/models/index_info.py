from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IndexInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, mirrors=None, name=None, official=None, secure=None):  # noqa: E501
        """IndexInfo - a model defined in OpenAPI

        :param mirrors: The mirrors of this IndexInfo.  # noqa: E501
        :type mirrors: List[str]
        :param name: The name of this IndexInfo.  # noqa: E501
        :type name: str
        :param official: The official of this IndexInfo.  # noqa: E501
        :type official: bool
        :param secure: The secure of this IndexInfo.  # noqa: E501
        :type secure: bool
        """
        self.openapi_types = {
            'mirrors': List[str],
            'name': str,
            'official': bool,
            'secure': bool
        }

        self.attribute_map = {
            'mirrors': 'Mirrors',
            'name': 'Name',
            'official': 'Official',
            'secure': 'Secure'
        }

        self._mirrors = mirrors
        self._name = name
        self._official = official
        self._secure = secure

    @classmethod
    def from_dict(cls, dikt) -> 'IndexInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IndexInfo of this IndexInfo.  # noqa: E501
        :rtype: IndexInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def mirrors(self) -> List[str]:
        """Gets the mirrors of this IndexInfo.

        List of mirrors, expressed as URIs.   # noqa: E501

        :return: The mirrors of this IndexInfo.
        :rtype: List[str]
        """
        return self._mirrors

    @mirrors.setter
    def mirrors(self, mirrors: List[str]):
        """Sets the mirrors of this IndexInfo.

        List of mirrors, expressed as URIs.   # noqa: E501

        :param mirrors: The mirrors of this IndexInfo.
        :type mirrors: List[str]
        """

        self._mirrors = mirrors

    @property
    def name(self) -> str:
        """Gets the name of this IndexInfo.

        Name of the registry, such as \"docker.io\".   # noqa: E501

        :return: The name of this IndexInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IndexInfo.

        Name of the registry, such as \"docker.io\".   # noqa: E501

        :param name: The name of this IndexInfo.
        :type name: str
        """

        self._name = name

    @property
    def official(self) -> bool:
        """Gets the official of this IndexInfo.

        Indicates whether this is an official registry (i.e., Docker Hub / docker.io)   # noqa: E501

        :return: The official of this IndexInfo.
        :rtype: bool
        """
        return self._official

    @official.setter
    def official(self, official: bool):
        """Sets the official of this IndexInfo.

        Indicates whether this is an official registry (i.e., Docker Hub / docker.io)   # noqa: E501

        :param official: The official of this IndexInfo.
        :type official: bool
        """

        self._official = official

    @property
    def secure(self) -> bool:
        """Gets the secure of this IndexInfo.

        Indicates if the the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system's list of > trusted CAs instead of enabling this option.   # noqa: E501

        :return: The secure of this IndexInfo.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure: bool):
        """Sets the secure of this IndexInfo.

        Indicates if the the registry is part of the list of insecure registries.  If `false`, the registry is insecure. Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  > **Warning**: Insecure registries can be useful when running a local > registry. However, because its use creates security vulnerabilities > it should ONLY be enabled for testing purposes. For increased > security, users should add their CA to their system's list of > trusted CAs instead of enabling this option.   # noqa: E501

        :param secure: The secure of this IndexInfo.
        :type secure: bool
        """

        self._secure = secure
