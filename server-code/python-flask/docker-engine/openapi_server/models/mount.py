from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.mount_bind_options import MountBindOptions
from openapi_server.models.mount_tmpfs_options import MountTmpfsOptions
from openapi_server.models.mount_volume_options import MountVolumeOptions
from openapi_server import util

from openapi_server.models.mount_bind_options import MountBindOptions  # noqa: E501
from openapi_server.models.mount_tmpfs_options import MountTmpfsOptions  # noqa: E501
from openapi_server.models.mount_volume_options import MountVolumeOptions  # noqa: E501

class Mount(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bind_options=None, consistency=None, read_only=None, source=None, target=None, tmpfs_options=None, type=None, volume_options=None):  # noqa: E501
        """Mount - a model defined in OpenAPI

        :param bind_options: The bind_options of this Mount.  # noqa: E501
        :type bind_options: MountBindOptions
        :param consistency: The consistency of this Mount.  # noqa: E501
        :type consistency: str
        :param read_only: The read_only of this Mount.  # noqa: E501
        :type read_only: bool
        :param source: The source of this Mount.  # noqa: E501
        :type source: str
        :param target: The target of this Mount.  # noqa: E501
        :type target: str
        :param tmpfs_options: The tmpfs_options of this Mount.  # noqa: E501
        :type tmpfs_options: MountTmpfsOptions
        :param type: The type of this Mount.  # noqa: E501
        :type type: str
        :param volume_options: The volume_options of this Mount.  # noqa: E501
        :type volume_options: MountVolumeOptions
        """
        self.openapi_types = {
            'bind_options': MountBindOptions,
            'consistency': str,
            'read_only': bool,
            'source': str,
            'target': str,
            'tmpfs_options': MountTmpfsOptions,
            'type': str,
            'volume_options': MountVolumeOptions
        }

        self.attribute_map = {
            'bind_options': 'BindOptions',
            'consistency': 'Consistency',
            'read_only': 'ReadOnly',
            'source': 'Source',
            'target': 'Target',
            'tmpfs_options': 'TmpfsOptions',
            'type': 'Type',
            'volume_options': 'VolumeOptions'
        }

        self._bind_options = bind_options
        self._consistency = consistency
        self._read_only = read_only
        self._source = source
        self._target = target
        self._tmpfs_options = tmpfs_options
        self._type = type
        self._volume_options = volume_options

    @classmethod
    def from_dict(cls, dikt) -> 'Mount':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Mount of this Mount.  # noqa: E501
        :rtype: Mount
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bind_options(self) -> MountBindOptions:
        """Gets the bind_options of this Mount.


        :return: The bind_options of this Mount.
        :rtype: MountBindOptions
        """
        return self._bind_options

    @bind_options.setter
    def bind_options(self, bind_options: MountBindOptions):
        """Sets the bind_options of this Mount.


        :param bind_options: The bind_options of this Mount.
        :type bind_options: MountBindOptions
        """

        self._bind_options = bind_options

    @property
    def consistency(self) -> str:
        """Gets the consistency of this Mount.

        The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.  # noqa: E501

        :return: The consistency of this Mount.
        :rtype: str
        """
        return self._consistency

    @consistency.setter
    def consistency(self, consistency: str):
        """Sets the consistency of this Mount.

        The consistency requirement for the mount: `default`, `consistent`, `cached`, or `delegated`.  # noqa: E501

        :param consistency: The consistency of this Mount.
        :type consistency: str
        """

        self._consistency = consistency

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this Mount.

        Whether the mount should be read-only.  # noqa: E501

        :return: The read_only of this Mount.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this Mount.

        Whether the mount should be read-only.  # noqa: E501

        :param read_only: The read_only of this Mount.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def source(self) -> str:
        """Gets the source of this Mount.

        Mount source (e.g. a volume name, a host path).  # noqa: E501

        :return: The source of this Mount.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this Mount.

        Mount source (e.g. a volume name, a host path).  # noqa: E501

        :param source: The source of this Mount.
        :type source: str
        """

        self._source = source

    @property
    def target(self) -> str:
        """Gets the target of this Mount.

        Container path.  # noqa: E501

        :return: The target of this Mount.
        :rtype: str
        """
        return self._target

    @target.setter
    def target(self, target: str):
        """Sets the target of this Mount.

        Container path.  # noqa: E501

        :param target: The target of this Mount.
        :type target: str
        """

        self._target = target

    @property
    def tmpfs_options(self) -> MountTmpfsOptions:
        """Gets the tmpfs_options of this Mount.


        :return: The tmpfs_options of this Mount.
        :rtype: MountTmpfsOptions
        """
        return self._tmpfs_options

    @tmpfs_options.setter
    def tmpfs_options(self, tmpfs_options: MountTmpfsOptions):
        """Sets the tmpfs_options of this Mount.


        :param tmpfs_options: The tmpfs_options of this Mount.
        :type tmpfs_options: MountTmpfsOptions
        """

        self._tmpfs_options = tmpfs_options

    @property
    def type(self) -> str:
        """Gets the type of this Mount.

        The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.   # noqa: E501

        :return: The type of this Mount.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Mount.

        The mount type. Available types:  - `bind` Mounts a file or directory from the host into the container. Must exist prior to creating the container. - `volume` Creates a volume with the given name and options (or uses a pre-existing volume with the same name and options). These are **not** removed when the container is removed. - `tmpfs` Create a tmpfs with the given options. The mount source cannot be specified for tmpfs.   # noqa: E501

        :param type: The type of this Mount.
        :type type: str
        """
        allowed_values = ["bind", "volume", "tmpfs"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def volume_options(self) -> MountVolumeOptions:
        """Gets the volume_options of this Mount.


        :return: The volume_options of this Mount.
        :rtype: MountVolumeOptions
        """
        return self._volume_options

    @volume_options.setter
    def volume_options(self, volume_options: MountVolumeOptions):
        """Sets the volume_options of this Mount.


        :param volume_options: The volume_options of this Mount.
        :type volume_options: MountVolumeOptions
        """

        self._volume_options = volume_options
