from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.container_config_volumes import ContainerConfigVolumes
from openapi_server.models.container_create_request_all_of_networking_config import ContainerCreateRequestAllOfNetworkingConfig
from openapi_server.models.health_config import HealthConfig
from openapi_server.models.host_config import HostConfig
from openapi_server import util

from openapi_server.models.container_config_volumes import ContainerConfigVolumes  # noqa: E501
from openapi_server.models.container_create_request_all_of_networking_config import ContainerCreateRequestAllOfNetworkingConfig  # noqa: E501
from openapi_server.models.health_config import HealthConfig  # noqa: E501
from openapi_server.models.host_config import HostConfig  # noqa: E501

class ContainerCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args_escaped=None, attach_stderr=True, attach_stdin=False, attach_stdout=True, cmd=None, domainname=None, entrypoint=None, env=None, exposed_ports=None, healthcheck=None, hostname=None, image=None, labels=None, mac_address=None, network_disabled=None, on_build=None, open_stdin=False, shell=None, stdin_once=False, stop_signal='SIGTERM', stop_timeout=10, tty=False, user=None, volumes=None, working_dir=None, host_config=None, networking_config=None):  # noqa: E501
        """ContainerCreateRequest - a model defined in OpenAPI

        :param args_escaped: The args_escaped of this ContainerCreateRequest.  # noqa: E501
        :type args_escaped: bool
        :param attach_stderr: The attach_stderr of this ContainerCreateRequest.  # noqa: E501
        :type attach_stderr: bool
        :param attach_stdin: The attach_stdin of this ContainerCreateRequest.  # noqa: E501
        :type attach_stdin: bool
        :param attach_stdout: The attach_stdout of this ContainerCreateRequest.  # noqa: E501
        :type attach_stdout: bool
        :param cmd: The cmd of this ContainerCreateRequest.  # noqa: E501
        :type cmd: List[str]
        :param domainname: The domainname of this ContainerCreateRequest.  # noqa: E501
        :type domainname: str
        :param entrypoint: The entrypoint of this ContainerCreateRequest.  # noqa: E501
        :type entrypoint: List[str]
        :param env: The env of this ContainerCreateRequest.  # noqa: E501
        :type env: List[str]
        :param exposed_ports: The exposed_ports of this ContainerCreateRequest.  # noqa: E501
        :type exposed_ports: Dict[str, object]
        :param healthcheck: The healthcheck of this ContainerCreateRequest.  # noqa: E501
        :type healthcheck: HealthConfig
        :param hostname: The hostname of this ContainerCreateRequest.  # noqa: E501
        :type hostname: str
        :param image: The image of this ContainerCreateRequest.  # noqa: E501
        :type image: str
        :param labels: The labels of this ContainerCreateRequest.  # noqa: E501
        :type labels: Dict[str, str]
        :param mac_address: The mac_address of this ContainerCreateRequest.  # noqa: E501
        :type mac_address: str
        :param network_disabled: The network_disabled of this ContainerCreateRequest.  # noqa: E501
        :type network_disabled: bool
        :param on_build: The on_build of this ContainerCreateRequest.  # noqa: E501
        :type on_build: List[str]
        :param open_stdin: The open_stdin of this ContainerCreateRequest.  # noqa: E501
        :type open_stdin: bool
        :param shell: The shell of this ContainerCreateRequest.  # noqa: E501
        :type shell: List[str]
        :param stdin_once: The stdin_once of this ContainerCreateRequest.  # noqa: E501
        :type stdin_once: bool
        :param stop_signal: The stop_signal of this ContainerCreateRequest.  # noqa: E501
        :type stop_signal: str
        :param stop_timeout: The stop_timeout of this ContainerCreateRequest.  # noqa: E501
        :type stop_timeout: int
        :param tty: The tty of this ContainerCreateRequest.  # noqa: E501
        :type tty: bool
        :param user: The user of this ContainerCreateRequest.  # noqa: E501
        :type user: str
        :param volumes: The volumes of this ContainerCreateRequest.  # noqa: E501
        :type volumes: ContainerConfigVolumes
        :param working_dir: The working_dir of this ContainerCreateRequest.  # noqa: E501
        :type working_dir: str
        :param host_config: The host_config of this ContainerCreateRequest.  # noqa: E501
        :type host_config: HostConfig
        :param networking_config: The networking_config of this ContainerCreateRequest.  # noqa: E501
        :type networking_config: ContainerCreateRequestAllOfNetworkingConfig
        """
        self.openapi_types = {
            'args_escaped': bool,
            'attach_stderr': bool,
            'attach_stdin': bool,
            'attach_stdout': bool,
            'cmd': List[str],
            'domainname': str,
            'entrypoint': List[str],
            'env': List[str],
            'exposed_ports': Dict[str, object],
            'healthcheck': HealthConfig,
            'hostname': str,
            'image': str,
            'labels': Dict[str, str],
            'mac_address': str,
            'network_disabled': bool,
            'on_build': List[str],
            'open_stdin': bool,
            'shell': List[str],
            'stdin_once': bool,
            'stop_signal': str,
            'stop_timeout': int,
            'tty': bool,
            'user': str,
            'volumes': ContainerConfigVolumes,
            'working_dir': str,
            'host_config': HostConfig,
            'networking_config': ContainerCreateRequestAllOfNetworkingConfig
        }

        self.attribute_map = {
            'args_escaped': 'ArgsEscaped',
            'attach_stderr': 'AttachStderr',
            'attach_stdin': 'AttachStdin',
            'attach_stdout': 'AttachStdout',
            'cmd': 'Cmd',
            'domainname': 'Domainname',
            'entrypoint': 'Entrypoint',
            'env': 'Env',
            'exposed_ports': 'ExposedPorts',
            'healthcheck': 'Healthcheck',
            'hostname': 'Hostname',
            'image': 'Image',
            'labels': 'Labels',
            'mac_address': 'MacAddress',
            'network_disabled': 'NetworkDisabled',
            'on_build': 'OnBuild',
            'open_stdin': 'OpenStdin',
            'shell': 'Shell',
            'stdin_once': 'StdinOnce',
            'stop_signal': 'StopSignal',
            'stop_timeout': 'StopTimeout',
            'tty': 'Tty',
            'user': 'User',
            'volumes': 'Volumes',
            'working_dir': 'WorkingDir',
            'host_config': 'HostConfig',
            'networking_config': 'NetworkingConfig'
        }

        self._args_escaped = args_escaped
        self._attach_stderr = attach_stderr
        self._attach_stdin = attach_stdin
        self._attach_stdout = attach_stdout
        self._cmd = cmd
        self._domainname = domainname
        self._entrypoint = entrypoint
        self._env = env
        self._exposed_ports = exposed_ports
        self._healthcheck = healthcheck
        self._hostname = hostname
        self._image = image
        self._labels = labels
        self._mac_address = mac_address
        self._network_disabled = network_disabled
        self._on_build = on_build
        self._open_stdin = open_stdin
        self._shell = shell
        self._stdin_once = stdin_once
        self._stop_signal = stop_signal
        self._stop_timeout = stop_timeout
        self._tty = tty
        self._user = user
        self._volumes = volumes
        self._working_dir = working_dir
        self._host_config = host_config
        self._networking_config = networking_config

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerCreate_request of this ContainerCreateRequest.  # noqa: E501
        :rtype: ContainerCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args_escaped(self) -> bool:
        """Gets the args_escaped of this ContainerCreateRequest.

        Command is already escaped (Windows only)  # noqa: E501

        :return: The args_escaped of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._args_escaped

    @args_escaped.setter
    def args_escaped(self, args_escaped: bool):
        """Sets the args_escaped of this ContainerCreateRequest.

        Command is already escaped (Windows only)  # noqa: E501

        :param args_escaped: The args_escaped of this ContainerCreateRequest.
        :type args_escaped: bool
        """

        self._args_escaped = args_escaped

    @property
    def attach_stderr(self) -> bool:
        """Gets the attach_stderr of this ContainerCreateRequest.

        Whether to attach to `stderr`.  # noqa: E501

        :return: The attach_stderr of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr: bool):
        """Sets the attach_stderr of this ContainerCreateRequest.

        Whether to attach to `stderr`.  # noqa: E501

        :param attach_stderr: The attach_stderr of this ContainerCreateRequest.
        :type attach_stderr: bool
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdin(self) -> bool:
        """Gets the attach_stdin of this ContainerCreateRequest.

        Whether to attach to `stdin`.  # noqa: E501

        :return: The attach_stdin of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin: bool):
        """Sets the attach_stdin of this ContainerCreateRequest.

        Whether to attach to `stdin`.  # noqa: E501

        :param attach_stdin: The attach_stdin of this ContainerCreateRequest.
        :type attach_stdin: bool
        """

        self._attach_stdin = attach_stdin

    @property
    def attach_stdout(self) -> bool:
        """Gets the attach_stdout of this ContainerCreateRequest.

        Whether to attach to `stdout`.  # noqa: E501

        :return: The attach_stdout of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout: bool):
        """Sets the attach_stdout of this ContainerCreateRequest.

        Whether to attach to `stdout`.  # noqa: E501

        :param attach_stdout: The attach_stdout of this ContainerCreateRequest.
        :type attach_stdout: bool
        """

        self._attach_stdout = attach_stdout

    @property
    def cmd(self) -> List[str]:
        """Gets the cmd of this ContainerCreateRequest.

        Command to run specified as a string or an array of strings.  # noqa: E501

        :return: The cmd of this ContainerCreateRequest.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd: List[str]):
        """Sets the cmd of this ContainerCreateRequest.

        Command to run specified as a string or an array of strings.  # noqa: E501

        :param cmd: The cmd of this ContainerCreateRequest.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def domainname(self) -> str:
        """Gets the domainname of this ContainerCreateRequest.

        The domain name to use for the container.  # noqa: E501

        :return: The domainname of this ContainerCreateRequest.
        :rtype: str
        """
        return self._domainname

    @domainname.setter
    def domainname(self, domainname: str):
        """Sets the domainname of this ContainerCreateRequest.

        The domain name to use for the container.  # noqa: E501

        :param domainname: The domainname of this ContainerCreateRequest.
        :type domainname: str
        """

        self._domainname = domainname

    @property
    def entrypoint(self) -> List[str]:
        """Gets the entrypoint of this ContainerCreateRequest.

        The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).   # noqa: E501

        :return: The entrypoint of this ContainerCreateRequest.
        :rtype: List[str]
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: List[str]):
        """Sets the entrypoint of this ContainerCreateRequest.

        The entry point for the container as a string or an array of strings.  If the array consists of exactly one empty string (`[\"\"]`) then the entry point is reset to system default (i.e., the entry point used by docker when there is no `ENTRYPOINT` instruction in the `Dockerfile`).   # noqa: E501

        :param entrypoint: The entrypoint of this ContainerCreateRequest.
        :type entrypoint: List[str]
        """

        self._entrypoint = entrypoint

    @property
    def env(self) -> List[str]:
        """Gets the env of this ContainerCreateRequest.

        A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.   # noqa: E501

        :return: The env of this ContainerCreateRequest.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env: List[str]):
        """Sets the env of this ContainerCreateRequest.

        A list of environment variables to set inside the container in the form `[\"VAR=value\", ...]`. A variable without `=` is removed from the environment, rather than to have an empty value.   # noqa: E501

        :param env: The env of this ContainerCreateRequest.
        :type env: List[str]
        """

        self._env = env

    @property
    def exposed_ports(self) -> Dict[str, object]:
        """Gets the exposed_ports of this ContainerCreateRequest.

        An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp>\": {}}`   # noqa: E501

        :return: The exposed_ports of this ContainerCreateRequest.
        :rtype: Dict[str, object]
        """
        return self._exposed_ports

    @exposed_ports.setter
    def exposed_ports(self, exposed_ports: Dict[str, object]):
        """Sets the exposed_ports of this ContainerCreateRequest.

        An object mapping ports to an empty object in the form:  `{\"<port>/<tcp|udp>\": {}}`   # noqa: E501

        :param exposed_ports: The exposed_ports of this ContainerCreateRequest.
        :type exposed_ports: Dict[str, object]
        """
        allowed_values = [{}]  # noqa: E501
        if not set(exposed_ports.keys()).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid keys in `exposed_ports` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(exposed_ports.keys()) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._exposed_ports = exposed_ports

    @property
    def healthcheck(self) -> HealthConfig:
        """Gets the healthcheck of this ContainerCreateRequest.


        :return: The healthcheck of this ContainerCreateRequest.
        :rtype: HealthConfig
        """
        return self._healthcheck

    @healthcheck.setter
    def healthcheck(self, healthcheck: HealthConfig):
        """Sets the healthcheck of this ContainerCreateRequest.


        :param healthcheck: The healthcheck of this ContainerCreateRequest.
        :type healthcheck: HealthConfig
        """

        self._healthcheck = healthcheck

    @property
    def hostname(self) -> str:
        """Gets the hostname of this ContainerCreateRequest.

        The hostname to use for the container, as a valid RFC 1123 hostname.  # noqa: E501

        :return: The hostname of this ContainerCreateRequest.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this ContainerCreateRequest.

        The hostname to use for the container, as a valid RFC 1123 hostname.  # noqa: E501

        :param hostname: The hostname of this ContainerCreateRequest.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def image(self) -> str:
        """Gets the image of this ContainerCreateRequest.

        The name of the image to use when creating the container  # noqa: E501

        :return: The image of this ContainerCreateRequest.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this ContainerCreateRequest.

        The name of the image to use when creating the container  # noqa: E501

        :param image: The image of this ContainerCreateRequest.
        :type image: str
        """

        self._image = image

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this ContainerCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this ContainerCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this ContainerCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this ContainerCreateRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this ContainerCreateRequest.

        MAC address of the container.  # noqa: E501

        :return: The mac_address of this ContainerCreateRequest.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this ContainerCreateRequest.

        MAC address of the container.  # noqa: E501

        :param mac_address: The mac_address of this ContainerCreateRequest.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_disabled(self) -> bool:
        """Gets the network_disabled of this ContainerCreateRequest.

        Disable networking for the container.  # noqa: E501

        :return: The network_disabled of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._network_disabled

    @network_disabled.setter
    def network_disabled(self, network_disabled: bool):
        """Sets the network_disabled of this ContainerCreateRequest.

        Disable networking for the container.  # noqa: E501

        :param network_disabled: The network_disabled of this ContainerCreateRequest.
        :type network_disabled: bool
        """

        self._network_disabled = network_disabled

    @property
    def on_build(self) -> List[str]:
        """Gets the on_build of this ContainerCreateRequest.

        `ONBUILD` metadata that were defined in the image's `Dockerfile`.  # noqa: E501

        :return: The on_build of this ContainerCreateRequest.
        :rtype: List[str]
        """
        return self._on_build

    @on_build.setter
    def on_build(self, on_build: List[str]):
        """Sets the on_build of this ContainerCreateRequest.

        `ONBUILD` metadata that were defined in the image's `Dockerfile`.  # noqa: E501

        :param on_build: The on_build of this ContainerCreateRequest.
        :type on_build: List[str]
        """

        self._on_build = on_build

    @property
    def open_stdin(self) -> bool:
        """Gets the open_stdin of this ContainerCreateRequest.

        Open `stdin`  # noqa: E501

        :return: The open_stdin of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin: bool):
        """Sets the open_stdin of this ContainerCreateRequest.

        Open `stdin`  # noqa: E501

        :param open_stdin: The open_stdin of this ContainerCreateRequest.
        :type open_stdin: bool
        """

        self._open_stdin = open_stdin

    @property
    def shell(self) -> List[str]:
        """Gets the shell of this ContainerCreateRequest.

        Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.  # noqa: E501

        :return: The shell of this ContainerCreateRequest.
        :rtype: List[str]
        """
        return self._shell

    @shell.setter
    def shell(self, shell: List[str]):
        """Sets the shell of this ContainerCreateRequest.

        Shell for when `RUN`, `CMD`, and `ENTRYPOINT` uses a shell.  # noqa: E501

        :param shell: The shell of this ContainerCreateRequest.
        :type shell: List[str]
        """

        self._shell = shell

    @property
    def stdin_once(self) -> bool:
        """Gets the stdin_once of this ContainerCreateRequest.

        Close `stdin` after one attached client disconnects  # noqa: E501

        :return: The stdin_once of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._stdin_once

    @stdin_once.setter
    def stdin_once(self, stdin_once: bool):
        """Sets the stdin_once of this ContainerCreateRequest.

        Close `stdin` after one attached client disconnects  # noqa: E501

        :param stdin_once: The stdin_once of this ContainerCreateRequest.
        :type stdin_once: bool
        """

        self._stdin_once = stdin_once

    @property
    def stop_signal(self) -> str:
        """Gets the stop_signal of this ContainerCreateRequest.

        Signal to stop a container as a string or unsigned integer.  # noqa: E501

        :return: The stop_signal of this ContainerCreateRequest.
        :rtype: str
        """
        return self._stop_signal

    @stop_signal.setter
    def stop_signal(self, stop_signal: str):
        """Sets the stop_signal of this ContainerCreateRequest.

        Signal to stop a container as a string or unsigned integer.  # noqa: E501

        :param stop_signal: The stop_signal of this ContainerCreateRequest.
        :type stop_signal: str
        """

        self._stop_signal = stop_signal

    @property
    def stop_timeout(self) -> int:
        """Gets the stop_timeout of this ContainerCreateRequest.

        Timeout to stop a container in seconds.  # noqa: E501

        :return: The stop_timeout of this ContainerCreateRequest.
        :rtype: int
        """
        return self._stop_timeout

    @stop_timeout.setter
    def stop_timeout(self, stop_timeout: int):
        """Sets the stop_timeout of this ContainerCreateRequest.

        Timeout to stop a container in seconds.  # noqa: E501

        :param stop_timeout: The stop_timeout of this ContainerCreateRequest.
        :type stop_timeout: int
        """

        self._stop_timeout = stop_timeout

    @property
    def tty(self) -> bool:
        """Gets the tty of this ContainerCreateRequest.

        Attach standard streams to a TTY, including `stdin` if it is not closed.  # noqa: E501

        :return: The tty of this ContainerCreateRequest.
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty: bool):
        """Sets the tty of this ContainerCreateRequest.

        Attach standard streams to a TTY, including `stdin` if it is not closed.  # noqa: E501

        :param tty: The tty of this ContainerCreateRequest.
        :type tty: bool
        """

        self._tty = tty

    @property
    def user(self) -> str:
        """Gets the user of this ContainerCreateRequest.

        The user that commands are run as inside the container.  # noqa: E501

        :return: The user of this ContainerCreateRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this ContainerCreateRequest.

        The user that commands are run as inside the container.  # noqa: E501

        :param user: The user of this ContainerCreateRequest.
        :type user: str
        """

        self._user = user

    @property
    def volumes(self) -> ContainerConfigVolumes:
        """Gets the volumes of this ContainerCreateRequest.


        :return: The volumes of this ContainerCreateRequest.
        :rtype: ContainerConfigVolumes
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes: ContainerConfigVolumes):
        """Sets the volumes of this ContainerCreateRequest.


        :param volumes: The volumes of this ContainerCreateRequest.
        :type volumes: ContainerConfigVolumes
        """

        self._volumes = volumes

    @property
    def working_dir(self) -> str:
        """Gets the working_dir of this ContainerCreateRequest.

        The working directory for commands to run in.  # noqa: E501

        :return: The working_dir of this ContainerCreateRequest.
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir: str):
        """Sets the working_dir of this ContainerCreateRequest.

        The working directory for commands to run in.  # noqa: E501

        :param working_dir: The working_dir of this ContainerCreateRequest.
        :type working_dir: str
        """

        self._working_dir = working_dir

    @property
    def host_config(self) -> HostConfig:
        """Gets the host_config of this ContainerCreateRequest.


        :return: The host_config of this ContainerCreateRequest.
        :rtype: HostConfig
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config: HostConfig):
        """Sets the host_config of this ContainerCreateRequest.


        :param host_config: The host_config of this ContainerCreateRequest.
        :type host_config: HostConfig
        """

        self._host_config = host_config

    @property
    def networking_config(self) -> ContainerCreateRequestAllOfNetworkingConfig:
        """Gets the networking_config of this ContainerCreateRequest.


        :return: The networking_config of this ContainerCreateRequest.
        :rtype: ContainerCreateRequestAllOfNetworkingConfig
        """
        return self._networking_config

    @networking_config.setter
    def networking_config(self, networking_config: ContainerCreateRequestAllOfNetworkingConfig):
        """Sets the networking_config of this ContainerCreateRequest.


        :param networking_config: The networking_config of this ContainerCreateRequest.
        :type networking_config: ContainerCreateRequestAllOfNetworkingConfig
        """

        self._networking_config = networking_config
