from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceSpecUpdateConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, delay=None, failure_action=None, max_failure_ratio=0, monitor=None, order=None, parallelism=None):  # noqa: E501
        """ServiceSpecUpdateConfig - a model defined in OpenAPI

        :param delay: The delay of this ServiceSpecUpdateConfig.  # noqa: E501
        :type delay: int
        :param failure_action: The failure_action of this ServiceSpecUpdateConfig.  # noqa: E501
        :type failure_action: str
        :param max_failure_ratio: The max_failure_ratio of this ServiceSpecUpdateConfig.  # noqa: E501
        :type max_failure_ratio: float
        :param monitor: The monitor of this ServiceSpecUpdateConfig.  # noqa: E501
        :type monitor: int
        :param order: The order of this ServiceSpecUpdateConfig.  # noqa: E501
        :type order: str
        :param parallelism: The parallelism of this ServiceSpecUpdateConfig.  # noqa: E501
        :type parallelism: int
        """
        self.openapi_types = {
            'delay': int,
            'failure_action': str,
            'max_failure_ratio': float,
            'monitor': int,
            'order': str,
            'parallelism': int
        }

        self.attribute_map = {
            'delay': 'Delay',
            'failure_action': 'FailureAction',
            'max_failure_ratio': 'MaxFailureRatio',
            'monitor': 'Monitor',
            'order': 'Order',
            'parallelism': 'Parallelism'
        }

        self._delay = delay
        self._failure_action = failure_action
        self._max_failure_ratio = max_failure_ratio
        self._monitor = monitor
        self._order = order
        self._parallelism = parallelism

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceSpecUpdateConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceSpec_UpdateConfig of this ServiceSpecUpdateConfig.  # noqa: E501
        :rtype: ServiceSpecUpdateConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def delay(self) -> int:
        """Gets the delay of this ServiceSpecUpdateConfig.

        Amount of time between updates, in nanoseconds.  # noqa: E501

        :return: The delay of this ServiceSpecUpdateConfig.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay: int):
        """Sets the delay of this ServiceSpecUpdateConfig.

        Amount of time between updates, in nanoseconds.  # noqa: E501

        :param delay: The delay of this ServiceSpecUpdateConfig.
        :type delay: int
        """

        self._delay = delay

    @property
    def failure_action(self) -> str:
        """Gets the failure_action of this ServiceSpecUpdateConfig.

        Action to take if an updated task fails to run, or stops running during the update.  # noqa: E501

        :return: The failure_action of this ServiceSpecUpdateConfig.
        :rtype: str
        """
        return self._failure_action

    @failure_action.setter
    def failure_action(self, failure_action: str):
        """Sets the failure_action of this ServiceSpecUpdateConfig.

        Action to take if an updated task fails to run, or stops running during the update.  # noqa: E501

        :param failure_action: The failure_action of this ServiceSpecUpdateConfig.
        :type failure_action: str
        """
        allowed_values = ["continue", "pause", "rollback"]  # noqa: E501
        if failure_action not in allowed_values:
            raise ValueError(
                "Invalid value for `failure_action` ({0}), must be one of {1}"
                .format(failure_action, allowed_values)
            )

        self._failure_action = failure_action

    @property
    def max_failure_ratio(self) -> float:
        """Gets the max_failure_ratio of this ServiceSpecUpdateConfig.

        The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.  # noqa: E501

        :return: The max_failure_ratio of this ServiceSpecUpdateConfig.
        :rtype: float
        """
        return self._max_failure_ratio

    @max_failure_ratio.setter
    def max_failure_ratio(self, max_failure_ratio: float):
        """Sets the max_failure_ratio of this ServiceSpecUpdateConfig.

        The fraction of tasks that may fail during an update before the failure action is invoked, specified as a floating point number between 0 and 1.  # noqa: E501

        :param max_failure_ratio: The max_failure_ratio of this ServiceSpecUpdateConfig.
        :type max_failure_ratio: float
        """

        self._max_failure_ratio = max_failure_ratio

    @property
    def monitor(self) -> int:
        """Gets the monitor of this ServiceSpecUpdateConfig.

        Amount of time to monitor each updated task for failures, in nanoseconds.  # noqa: E501

        :return: The monitor of this ServiceSpecUpdateConfig.
        :rtype: int
        """
        return self._monitor

    @monitor.setter
    def monitor(self, monitor: int):
        """Sets the monitor of this ServiceSpecUpdateConfig.

        Amount of time to monitor each updated task for failures, in nanoseconds.  # noqa: E501

        :param monitor: The monitor of this ServiceSpecUpdateConfig.
        :type monitor: int
        """

        self._monitor = monitor

    @property
    def order(self) -> str:
        """Gets the order of this ServiceSpecUpdateConfig.

        The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.  # noqa: E501

        :return: The order of this ServiceSpecUpdateConfig.
        :rtype: str
        """
        return self._order

    @order.setter
    def order(self, order: str):
        """Sets the order of this ServiceSpecUpdateConfig.

        The order of operations when rolling out an updated task. Either the old task is shut down before the new task is started, or the new task is started before the old task is shut down.  # noqa: E501

        :param order: The order of this ServiceSpecUpdateConfig.
        :type order: str
        """
        allowed_values = ["stop-first", "start-first"]  # noqa: E501
        if order not in allowed_values:
            raise ValueError(
                "Invalid value for `order` ({0}), must be one of {1}"
                .format(order, allowed_values)
            )

        self._order = order

    @property
    def parallelism(self) -> int:
        """Gets the parallelism of this ServiceSpecUpdateConfig.

        Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).  # noqa: E501

        :return: The parallelism of this ServiceSpecUpdateConfig.
        :rtype: int
        """
        return self._parallelism

    @parallelism.setter
    def parallelism(self, parallelism: int):
        """Sets the parallelism of this ServiceSpecUpdateConfig.

        Maximum number of tasks to be updated in one iteration (0 means unlimited parallelism).  # noqa: E501

        :param parallelism: The parallelism of this ServiceSpecUpdateConfig.
        :type parallelism: int
        """

        self._parallelism = parallelism
