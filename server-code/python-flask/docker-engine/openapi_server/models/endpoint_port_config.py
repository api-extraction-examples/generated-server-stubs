from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EndpointPortConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, protocol=None, published_port=None, target_port=None):  # noqa: E501
        """EndpointPortConfig - a model defined in OpenAPI

        :param name: The name of this EndpointPortConfig.  # noqa: E501
        :type name: str
        :param protocol: The protocol of this EndpointPortConfig.  # noqa: E501
        :type protocol: str
        :param published_port: The published_port of this EndpointPortConfig.  # noqa: E501
        :type published_port: int
        :param target_port: The target_port of this EndpointPortConfig.  # noqa: E501
        :type target_port: int
        """
        self.openapi_types = {
            'name': str,
            'protocol': str,
            'published_port': int,
            'target_port': int
        }

        self.attribute_map = {
            'name': 'Name',
            'protocol': 'Protocol',
            'published_port': 'PublishedPort',
            'target_port': 'TargetPort'
        }

        self._name = name
        self._protocol = protocol
        self._published_port = published_port
        self._target_port = target_port

    @classmethod
    def from_dict(cls, dikt) -> 'EndpointPortConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EndpointPortConfig of this EndpointPortConfig.  # noqa: E501
        :rtype: EndpointPortConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this EndpointPortConfig.


        :return: The name of this EndpointPortConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EndpointPortConfig.


        :param name: The name of this EndpointPortConfig.
        :type name: str
        """

        self._name = name

    @property
    def protocol(self) -> str:
        """Gets the protocol of this EndpointPortConfig.


        :return: The protocol of this EndpointPortConfig.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this EndpointPortConfig.


        :param protocol: The protocol of this EndpointPortConfig.
        :type protocol: str
        """
        allowed_values = ["tcp", "udp"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def published_port(self) -> int:
        """Gets the published_port of this EndpointPortConfig.

        The port on the swarm hosts.  # noqa: E501

        :return: The published_port of this EndpointPortConfig.
        :rtype: int
        """
        return self._published_port

    @published_port.setter
    def published_port(self, published_port: int):
        """Sets the published_port of this EndpointPortConfig.

        The port on the swarm hosts.  # noqa: E501

        :param published_port: The published_port of this EndpointPortConfig.
        :type published_port: int
        """

        self._published_port = published_port

    @property
    def target_port(self) -> int:
        """Gets the target_port of this EndpointPortConfig.

        The port inside the container.  # noqa: E501

        :return: The target_port of this EndpointPortConfig.
        :rtype: int
        """
        return self._target_port

    @target_port.setter
    def target_port(self, target_port: int):
        """Sets the target_port of this EndpointPortConfig.

        The port inside the container.  # noqa: E501

        :param target_port: The target_port of this EndpointPortConfig.
        :type target_port: int
        """

        self._target_port = target_port
