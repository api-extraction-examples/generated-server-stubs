from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.container_config import ContainerConfig
from openapi_server.models.container_inspect200_response_state import ContainerInspect200ResponseState
from openapi_server.models.graph_driver_data import GraphDriverData
from openapi_server.models.host_config import HostConfig
from openapi_server.models.mount_point import MountPoint
from openapi_server.models.network_settings import NetworkSettings
from openapi_server import util

from openapi_server.models.container_config import ContainerConfig  # noqa: E501
from openapi_server.models.container_inspect200_response_state import ContainerInspect200ResponseState  # noqa: E501
from openapi_server.models.graph_driver_data import GraphDriverData  # noqa: E501
from openapi_server.models.host_config import HostConfig  # noqa: E501
from openapi_server.models.mount_point import MountPoint  # noqa: E501
from openapi_server.models.network_settings import NetworkSettings  # noqa: E501

class ContainerInspect200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, app_armor_profile=None, args=None, config=None, created=None, driver=None, exec_ids=None, graph_driver=None, host_config=None, hostname_path=None, hosts_path=None, id=None, image=None, log_path=None, mount_label=None, mounts=None, name=None, network_settings=None, node=None, path=None, process_label=None, resolv_conf_path=None, restart_count=None, size_root_fs=None, size_rw=None, state=None):  # noqa: E501
        """ContainerInspect200Response - a model defined in OpenAPI

        :param app_armor_profile: The app_armor_profile of this ContainerInspect200Response.  # noqa: E501
        :type app_armor_profile: str
        :param args: The args of this ContainerInspect200Response.  # noqa: E501
        :type args: List[str]
        :param config: The config of this ContainerInspect200Response.  # noqa: E501
        :type config: ContainerConfig
        :param created: The created of this ContainerInspect200Response.  # noqa: E501
        :type created: str
        :param driver: The driver of this ContainerInspect200Response.  # noqa: E501
        :type driver: str
        :param exec_ids: The exec_ids of this ContainerInspect200Response.  # noqa: E501
        :type exec_ids: str
        :param graph_driver: The graph_driver of this ContainerInspect200Response.  # noqa: E501
        :type graph_driver: GraphDriverData
        :param host_config: The host_config of this ContainerInspect200Response.  # noqa: E501
        :type host_config: HostConfig
        :param hostname_path: The hostname_path of this ContainerInspect200Response.  # noqa: E501
        :type hostname_path: str
        :param hosts_path: The hosts_path of this ContainerInspect200Response.  # noqa: E501
        :type hosts_path: str
        :param id: The id of this ContainerInspect200Response.  # noqa: E501
        :type id: str
        :param image: The image of this ContainerInspect200Response.  # noqa: E501
        :type image: str
        :param log_path: The log_path of this ContainerInspect200Response.  # noqa: E501
        :type log_path: str
        :param mount_label: The mount_label of this ContainerInspect200Response.  # noqa: E501
        :type mount_label: str
        :param mounts: The mounts of this ContainerInspect200Response.  # noqa: E501
        :type mounts: List[MountPoint]
        :param name: The name of this ContainerInspect200Response.  # noqa: E501
        :type name: str
        :param network_settings: The network_settings of this ContainerInspect200Response.  # noqa: E501
        :type network_settings: NetworkSettings
        :param node: The node of this ContainerInspect200Response.  # noqa: E501
        :type node: object
        :param path: The path of this ContainerInspect200Response.  # noqa: E501
        :type path: str
        :param process_label: The process_label of this ContainerInspect200Response.  # noqa: E501
        :type process_label: str
        :param resolv_conf_path: The resolv_conf_path of this ContainerInspect200Response.  # noqa: E501
        :type resolv_conf_path: str
        :param restart_count: The restart_count of this ContainerInspect200Response.  # noqa: E501
        :type restart_count: int
        :param size_root_fs: The size_root_fs of this ContainerInspect200Response.  # noqa: E501
        :type size_root_fs: int
        :param size_rw: The size_rw of this ContainerInspect200Response.  # noqa: E501
        :type size_rw: int
        :param state: The state of this ContainerInspect200Response.  # noqa: E501
        :type state: ContainerInspect200ResponseState
        """
        self.openapi_types = {
            'app_armor_profile': str,
            'args': List[str],
            'config': ContainerConfig,
            'created': str,
            'driver': str,
            'exec_ids': str,
            'graph_driver': GraphDriverData,
            'host_config': HostConfig,
            'hostname_path': str,
            'hosts_path': str,
            'id': str,
            'image': str,
            'log_path': str,
            'mount_label': str,
            'mounts': List[MountPoint],
            'name': str,
            'network_settings': NetworkSettings,
            'node': object,
            'path': str,
            'process_label': str,
            'resolv_conf_path': str,
            'restart_count': int,
            'size_root_fs': int,
            'size_rw': int,
            'state': ContainerInspect200ResponseState
        }

        self.attribute_map = {
            'app_armor_profile': 'AppArmorProfile',
            'args': 'Args',
            'config': 'Config',
            'created': 'Created',
            'driver': 'Driver',
            'exec_ids': 'ExecIDs',
            'graph_driver': 'GraphDriver',
            'host_config': 'HostConfig',
            'hostname_path': 'HostnamePath',
            'hosts_path': 'HostsPath',
            'id': 'Id',
            'image': 'Image',
            'log_path': 'LogPath',
            'mount_label': 'MountLabel',
            'mounts': 'Mounts',
            'name': 'Name',
            'network_settings': 'NetworkSettings',
            'node': 'Node',
            'path': 'Path',
            'process_label': 'ProcessLabel',
            'resolv_conf_path': 'ResolvConfPath',
            'restart_count': 'RestartCount',
            'size_root_fs': 'SizeRootFs',
            'size_rw': 'SizeRw',
            'state': 'State'
        }

        self._app_armor_profile = app_armor_profile
        self._args = args
        self._config = config
        self._created = created
        self._driver = driver
        self._exec_ids = exec_ids
        self._graph_driver = graph_driver
        self._host_config = host_config
        self._hostname_path = hostname_path
        self._hosts_path = hosts_path
        self._id = id
        self._image = image
        self._log_path = log_path
        self._mount_label = mount_label
        self._mounts = mounts
        self._name = name
        self._network_settings = network_settings
        self._node = node
        self._path = path
        self._process_label = process_label
        self._resolv_conf_path = resolv_conf_path
        self._restart_count = restart_count
        self._size_root_fs = size_root_fs
        self._size_rw = size_rw
        self._state = state

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerInspect200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerInspect_200_response of this ContainerInspect200Response.  # noqa: E501
        :rtype: ContainerInspect200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def app_armor_profile(self) -> str:
        """Gets the app_armor_profile of this ContainerInspect200Response.


        :return: The app_armor_profile of this ContainerInspect200Response.
        :rtype: str
        """
        return self._app_armor_profile

    @app_armor_profile.setter
    def app_armor_profile(self, app_armor_profile: str):
        """Sets the app_armor_profile of this ContainerInspect200Response.


        :param app_armor_profile: The app_armor_profile of this ContainerInspect200Response.
        :type app_armor_profile: str
        """

        self._app_armor_profile = app_armor_profile

    @property
    def args(self) -> List[str]:
        """Gets the args of this ContainerInspect200Response.

        The arguments to the command being run  # noqa: E501

        :return: The args of this ContainerInspect200Response.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """Sets the args of this ContainerInspect200Response.

        The arguments to the command being run  # noqa: E501

        :param args: The args of this ContainerInspect200Response.
        :type args: List[str]
        """

        self._args = args

    @property
    def config(self) -> ContainerConfig:
        """Gets the config of this ContainerInspect200Response.


        :return: The config of this ContainerInspect200Response.
        :rtype: ContainerConfig
        """
        return self._config

    @config.setter
    def config(self, config: ContainerConfig):
        """Sets the config of this ContainerInspect200Response.


        :param config: The config of this ContainerInspect200Response.
        :type config: ContainerConfig
        """

        self._config = config

    @property
    def created(self) -> str:
        """Gets the created of this ContainerInspect200Response.

        The time the container was created  # noqa: E501

        :return: The created of this ContainerInspect200Response.
        :rtype: str
        """
        return self._created

    @created.setter
    def created(self, created: str):
        """Sets the created of this ContainerInspect200Response.

        The time the container was created  # noqa: E501

        :param created: The created of this ContainerInspect200Response.
        :type created: str
        """

        self._created = created

    @property
    def driver(self) -> str:
        """Gets the driver of this ContainerInspect200Response.


        :return: The driver of this ContainerInspect200Response.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this ContainerInspect200Response.


        :param driver: The driver of this ContainerInspect200Response.
        :type driver: str
        """

        self._driver = driver

    @property
    def exec_ids(self) -> str:
        """Gets the exec_ids of this ContainerInspect200Response.


        :return: The exec_ids of this ContainerInspect200Response.
        :rtype: str
        """
        return self._exec_ids

    @exec_ids.setter
    def exec_ids(self, exec_ids: str):
        """Sets the exec_ids of this ContainerInspect200Response.


        :param exec_ids: The exec_ids of this ContainerInspect200Response.
        :type exec_ids: str
        """

        self._exec_ids = exec_ids

    @property
    def graph_driver(self) -> GraphDriverData:
        """Gets the graph_driver of this ContainerInspect200Response.


        :return: The graph_driver of this ContainerInspect200Response.
        :rtype: GraphDriverData
        """
        return self._graph_driver

    @graph_driver.setter
    def graph_driver(self, graph_driver: GraphDriverData):
        """Sets the graph_driver of this ContainerInspect200Response.


        :param graph_driver: The graph_driver of this ContainerInspect200Response.
        :type graph_driver: GraphDriverData
        """

        self._graph_driver = graph_driver

    @property
    def host_config(self) -> HostConfig:
        """Gets the host_config of this ContainerInspect200Response.


        :return: The host_config of this ContainerInspect200Response.
        :rtype: HostConfig
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config: HostConfig):
        """Sets the host_config of this ContainerInspect200Response.


        :param host_config: The host_config of this ContainerInspect200Response.
        :type host_config: HostConfig
        """

        self._host_config = host_config

    @property
    def hostname_path(self) -> str:
        """Gets the hostname_path of this ContainerInspect200Response.


        :return: The hostname_path of this ContainerInspect200Response.
        :rtype: str
        """
        return self._hostname_path

    @hostname_path.setter
    def hostname_path(self, hostname_path: str):
        """Sets the hostname_path of this ContainerInspect200Response.


        :param hostname_path: The hostname_path of this ContainerInspect200Response.
        :type hostname_path: str
        """

        self._hostname_path = hostname_path

    @property
    def hosts_path(self) -> str:
        """Gets the hosts_path of this ContainerInspect200Response.


        :return: The hosts_path of this ContainerInspect200Response.
        :rtype: str
        """
        return self._hosts_path

    @hosts_path.setter
    def hosts_path(self, hosts_path: str):
        """Sets the hosts_path of this ContainerInspect200Response.


        :param hosts_path: The hosts_path of this ContainerInspect200Response.
        :type hosts_path: str
        """

        self._hosts_path = hosts_path

    @property
    def id(self) -> str:
        """Gets the id of this ContainerInspect200Response.

        The ID of the container  # noqa: E501

        :return: The id of this ContainerInspect200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContainerInspect200Response.

        The ID of the container  # noqa: E501

        :param id: The id of this ContainerInspect200Response.
        :type id: str
        """

        self._id = id

    @property
    def image(self) -> str:
        """Gets the image of this ContainerInspect200Response.

        The container's image  # noqa: E501

        :return: The image of this ContainerInspect200Response.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this ContainerInspect200Response.

        The container's image  # noqa: E501

        :param image: The image of this ContainerInspect200Response.
        :type image: str
        """

        self._image = image

    @property
    def log_path(self) -> str:
        """Gets the log_path of this ContainerInspect200Response.


        :return: The log_path of this ContainerInspect200Response.
        :rtype: str
        """
        return self._log_path

    @log_path.setter
    def log_path(self, log_path: str):
        """Sets the log_path of this ContainerInspect200Response.


        :param log_path: The log_path of this ContainerInspect200Response.
        :type log_path: str
        """

        self._log_path = log_path

    @property
    def mount_label(self) -> str:
        """Gets the mount_label of this ContainerInspect200Response.


        :return: The mount_label of this ContainerInspect200Response.
        :rtype: str
        """
        return self._mount_label

    @mount_label.setter
    def mount_label(self, mount_label: str):
        """Sets the mount_label of this ContainerInspect200Response.


        :param mount_label: The mount_label of this ContainerInspect200Response.
        :type mount_label: str
        """

        self._mount_label = mount_label

    @property
    def mounts(self) -> List[MountPoint]:
        """Gets the mounts of this ContainerInspect200Response.


        :return: The mounts of this ContainerInspect200Response.
        :rtype: List[MountPoint]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts: List[MountPoint]):
        """Sets the mounts of this ContainerInspect200Response.


        :param mounts: The mounts of this ContainerInspect200Response.
        :type mounts: List[MountPoint]
        """

        self._mounts = mounts

    @property
    def name(self) -> str:
        """Gets the name of this ContainerInspect200Response.


        :return: The name of this ContainerInspect200Response.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ContainerInspect200Response.


        :param name: The name of this ContainerInspect200Response.
        :type name: str
        """

        self._name = name

    @property
    def network_settings(self) -> NetworkSettings:
        """Gets the network_settings of this ContainerInspect200Response.


        :return: The network_settings of this ContainerInspect200Response.
        :rtype: NetworkSettings
        """
        return self._network_settings

    @network_settings.setter
    def network_settings(self, network_settings: NetworkSettings):
        """Sets the network_settings of this ContainerInspect200Response.


        :param network_settings: The network_settings of this ContainerInspect200Response.
        :type network_settings: NetworkSettings
        """

        self._network_settings = network_settings

    @property
    def node(self) -> object:
        """Gets the node of this ContainerInspect200Response.

        TODO  # noqa: E501

        :return: The node of this ContainerInspect200Response.
        :rtype: object
        """
        return self._node

    @node.setter
    def node(self, node: object):
        """Sets the node of this ContainerInspect200Response.

        TODO  # noqa: E501

        :param node: The node of this ContainerInspect200Response.
        :type node: object
        """

        self._node = node

    @property
    def path(self) -> str:
        """Gets the path of this ContainerInspect200Response.

        The path to the command being run  # noqa: E501

        :return: The path of this ContainerInspect200Response.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this ContainerInspect200Response.

        The path to the command being run  # noqa: E501

        :param path: The path of this ContainerInspect200Response.
        :type path: str
        """

        self._path = path

    @property
    def process_label(self) -> str:
        """Gets the process_label of this ContainerInspect200Response.


        :return: The process_label of this ContainerInspect200Response.
        :rtype: str
        """
        return self._process_label

    @process_label.setter
    def process_label(self, process_label: str):
        """Sets the process_label of this ContainerInspect200Response.


        :param process_label: The process_label of this ContainerInspect200Response.
        :type process_label: str
        """

        self._process_label = process_label

    @property
    def resolv_conf_path(self) -> str:
        """Gets the resolv_conf_path of this ContainerInspect200Response.


        :return: The resolv_conf_path of this ContainerInspect200Response.
        :rtype: str
        """
        return self._resolv_conf_path

    @resolv_conf_path.setter
    def resolv_conf_path(self, resolv_conf_path: str):
        """Sets the resolv_conf_path of this ContainerInspect200Response.


        :param resolv_conf_path: The resolv_conf_path of this ContainerInspect200Response.
        :type resolv_conf_path: str
        """

        self._resolv_conf_path = resolv_conf_path

    @property
    def restart_count(self) -> int:
        """Gets the restart_count of this ContainerInspect200Response.


        :return: The restart_count of this ContainerInspect200Response.
        :rtype: int
        """
        return self._restart_count

    @restart_count.setter
    def restart_count(self, restart_count: int):
        """Sets the restart_count of this ContainerInspect200Response.


        :param restart_count: The restart_count of this ContainerInspect200Response.
        :type restart_count: int
        """

        self._restart_count = restart_count

    @property
    def size_root_fs(self) -> int:
        """Gets the size_root_fs of this ContainerInspect200Response.

        The total size of all the files in this container.  # noqa: E501

        :return: The size_root_fs of this ContainerInspect200Response.
        :rtype: int
        """
        return self._size_root_fs

    @size_root_fs.setter
    def size_root_fs(self, size_root_fs: int):
        """Sets the size_root_fs of this ContainerInspect200Response.

        The total size of all the files in this container.  # noqa: E501

        :param size_root_fs: The size_root_fs of this ContainerInspect200Response.
        :type size_root_fs: int
        """

        self._size_root_fs = size_root_fs

    @property
    def size_rw(self) -> int:
        """Gets the size_rw of this ContainerInspect200Response.

        The size of files that have been created or changed by this container.  # noqa: E501

        :return: The size_rw of this ContainerInspect200Response.
        :rtype: int
        """
        return self._size_rw

    @size_rw.setter
    def size_rw(self, size_rw: int):
        """Sets the size_rw of this ContainerInspect200Response.

        The size of files that have been created or changed by this container.  # noqa: E501

        :param size_rw: The size_rw of this ContainerInspect200Response.
        :type size_rw: int
        """

        self._size_rw = size_rw

    @property
    def state(self) -> ContainerInspect200ResponseState:
        """Gets the state of this ContainerInspect200Response.


        :return: The state of this ContainerInspect200Response.
        :rtype: ContainerInspect200ResponseState
        """
        return self._state

    @state.setter
    def state(self, state: ContainerInspect200ResponseState):
        """Sets the state of this ContainerInspect200Response.


        :param state: The state of this ContainerInspect200Response.
        :type state: ContainerInspect200ResponseState
        """

        self._state = state
