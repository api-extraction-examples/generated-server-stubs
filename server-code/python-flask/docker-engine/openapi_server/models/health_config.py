from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class HealthConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, interval=None, retries=None, start_period=None, test=None, timeout=None):  # noqa: E501
        """HealthConfig - a model defined in OpenAPI

        :param interval: The interval of this HealthConfig.  # noqa: E501
        :type interval: int
        :param retries: The retries of this HealthConfig.  # noqa: E501
        :type retries: int
        :param start_period: The start_period of this HealthConfig.  # noqa: E501
        :type start_period: int
        :param test: The test of this HealthConfig.  # noqa: E501
        :type test: List[str]
        :param timeout: The timeout of this HealthConfig.  # noqa: E501
        :type timeout: int
        """
        self.openapi_types = {
            'interval': int,
            'retries': int,
            'start_period': int,
            'test': List[str],
            'timeout': int
        }

        self.attribute_map = {
            'interval': 'Interval',
            'retries': 'Retries',
            'start_period': 'StartPeriod',
            'test': 'Test',
            'timeout': 'Timeout'
        }

        self._interval = interval
        self._retries = retries
        self._start_period = start_period
        self._test = test
        self._timeout = timeout

    @classmethod
    def from_dict(cls, dikt) -> 'HealthConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The HealthConfig of this HealthConfig.  # noqa: E501
        :rtype: HealthConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def interval(self) -> int:
        """Gets the interval of this HealthConfig.

        The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :return: The interval of this HealthConfig.
        :rtype: int
        """
        return self._interval

    @interval.setter
    def interval(self, interval: int):
        """Sets the interval of this HealthConfig.

        The time to wait between checks in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :param interval: The interval of this HealthConfig.
        :type interval: int
        """

        self._interval = interval

    @property
    def retries(self) -> int:
        """Gets the retries of this HealthConfig.

        The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.  # noqa: E501

        :return: The retries of this HealthConfig.
        :rtype: int
        """
        return self._retries

    @retries.setter
    def retries(self, retries: int):
        """Sets the retries of this HealthConfig.

        The number of consecutive failures needed to consider a container as unhealthy. 0 means inherit.  # noqa: E501

        :param retries: The retries of this HealthConfig.
        :type retries: int
        """

        self._retries = retries

    @property
    def start_period(self) -> int:
        """Gets the start_period of this HealthConfig.

        Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :return: The start_period of this HealthConfig.
        :rtype: int
        """
        return self._start_period

    @start_period.setter
    def start_period(self, start_period: int):
        """Sets the start_period of this HealthConfig.

        Start period for the container to initialize before starting health-retries countdown in nanoseconds. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :param start_period: The start_period of this HealthConfig.
        :type start_period: int
        """

        self._start_period = start_period

    @property
    def test(self) -> List[str]:
        """Gets the test of this HealthConfig.

        The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell   # noqa: E501

        :return: The test of this HealthConfig.
        :rtype: List[str]
        """
        return self._test

    @test.setter
    def test(self, test: List[str]):
        """Sets the test of this HealthConfig.

        The test to perform. Possible values are:  - `[]` inherit healthcheck from image or parent image - `[\"NONE\"]` disable healthcheck - `[\"CMD\", args...]` exec arguments directly - `[\"CMD-SHELL\", command]` run command with system's default shell   # noqa: E501

        :param test: The test of this HealthConfig.
        :type test: List[str]
        """

        self._test = test

    @property
    def timeout(self) -> int:
        """Gets the timeout of this HealthConfig.

        The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :return: The timeout of this HealthConfig.
        :rtype: int
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout: int):
        """Sets the timeout of this HealthConfig.

        The time to wait before considering the check to have hung. It should be 0 or at least 1000000 (1 ms). 0 means inherit.  # noqa: E501

        :param timeout: The timeout of this HealthConfig.
        :type timeout: int
        """

        self._timeout = timeout
