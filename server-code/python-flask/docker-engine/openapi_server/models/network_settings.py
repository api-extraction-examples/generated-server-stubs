from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.address import Address
from openapi_server.models.endpoint_settings import EndpointSettings
from openapi_server.models.port_binding import PortBinding
from openapi_server import util

from openapi_server.models.address import Address  # noqa: E501
from openapi_server.models.endpoint_settings import EndpointSettings  # noqa: E501
from openapi_server.models.port_binding import PortBinding  # noqa: E501

class NetworkSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, bridge=None, endpoint_id=None, gateway=None, global_ipv6_address=None, global_ipv6_prefix_len=None, hairpin_mode=None, ip_address=None, ip_prefix_len=None, ipv6_gateway=None, link_local_ipv6_address=None, link_local_ipv6_prefix_len=None, mac_address=None, networks=None, ports=None, sandbox_id=None, sandbox_key=None, secondary_ip_addresses=None, secondary_ipv6_addresses=None):  # noqa: E501
        """NetworkSettings - a model defined in OpenAPI

        :param bridge: The bridge of this NetworkSettings.  # noqa: E501
        :type bridge: str
        :param endpoint_id: The endpoint_id of this NetworkSettings.  # noqa: E501
        :type endpoint_id: str
        :param gateway: The gateway of this NetworkSettings.  # noqa: E501
        :type gateway: str
        :param global_ipv6_address: The global_ipv6_address of this NetworkSettings.  # noqa: E501
        :type global_ipv6_address: str
        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this NetworkSettings.  # noqa: E501
        :type global_ipv6_prefix_len: int
        :param hairpin_mode: The hairpin_mode of this NetworkSettings.  # noqa: E501
        :type hairpin_mode: bool
        :param ip_address: The ip_address of this NetworkSettings.  # noqa: E501
        :type ip_address: str
        :param ip_prefix_len: The ip_prefix_len of this NetworkSettings.  # noqa: E501
        :type ip_prefix_len: int
        :param ipv6_gateway: The ipv6_gateway of this NetworkSettings.  # noqa: E501
        :type ipv6_gateway: str
        :param link_local_ipv6_address: The link_local_ipv6_address of this NetworkSettings.  # noqa: E501
        :type link_local_ipv6_address: str
        :param link_local_ipv6_prefix_len: The link_local_ipv6_prefix_len of this NetworkSettings.  # noqa: E501
        :type link_local_ipv6_prefix_len: int
        :param mac_address: The mac_address of this NetworkSettings.  # noqa: E501
        :type mac_address: str
        :param networks: The networks of this NetworkSettings.  # noqa: E501
        :type networks: Dict[str, EndpointSettings]
        :param ports: The ports of this NetworkSettings.  # noqa: E501
        :type ports: Dict[str, List[PortBinding]]
        :param sandbox_id: The sandbox_id of this NetworkSettings.  # noqa: E501
        :type sandbox_id: str
        :param sandbox_key: The sandbox_key of this NetworkSettings.  # noqa: E501
        :type sandbox_key: str
        :param secondary_ip_addresses: The secondary_ip_addresses of this NetworkSettings.  # noqa: E501
        :type secondary_ip_addresses: List[Address]
        :param secondary_ipv6_addresses: The secondary_ipv6_addresses of this NetworkSettings.  # noqa: E501
        :type secondary_ipv6_addresses: List[Address]
        """
        self.openapi_types = {
            'bridge': str,
            'endpoint_id': str,
            'gateway': str,
            'global_ipv6_address': str,
            'global_ipv6_prefix_len': int,
            'hairpin_mode': bool,
            'ip_address': str,
            'ip_prefix_len': int,
            'ipv6_gateway': str,
            'link_local_ipv6_address': str,
            'link_local_ipv6_prefix_len': int,
            'mac_address': str,
            'networks': Dict[str, EndpointSettings],
            'ports': Dict[str, List[PortBinding]],
            'sandbox_id': str,
            'sandbox_key': str,
            'secondary_ip_addresses': List[Address],
            'secondary_ipv6_addresses': List[Address]
        }

        self.attribute_map = {
            'bridge': 'Bridge',
            'endpoint_id': 'EndpointID',
            'gateway': 'Gateway',
            'global_ipv6_address': 'GlobalIPv6Address',
            'global_ipv6_prefix_len': 'GlobalIPv6PrefixLen',
            'hairpin_mode': 'HairpinMode',
            'ip_address': 'IPAddress',
            'ip_prefix_len': 'IPPrefixLen',
            'ipv6_gateway': 'IPv6Gateway',
            'link_local_ipv6_address': 'LinkLocalIPv6Address',
            'link_local_ipv6_prefix_len': 'LinkLocalIPv6PrefixLen',
            'mac_address': 'MacAddress',
            'networks': 'Networks',
            'ports': 'Ports',
            'sandbox_id': 'SandboxID',
            'sandbox_key': 'SandboxKey',
            'secondary_ip_addresses': 'SecondaryIPAddresses',
            'secondary_ipv6_addresses': 'SecondaryIPv6Addresses'
        }

        self._bridge = bridge
        self._endpoint_id = endpoint_id
        self._gateway = gateway
        self._global_ipv6_address = global_ipv6_address
        self._global_ipv6_prefix_len = global_ipv6_prefix_len
        self._hairpin_mode = hairpin_mode
        self._ip_address = ip_address
        self._ip_prefix_len = ip_prefix_len
        self._ipv6_gateway = ipv6_gateway
        self._link_local_ipv6_address = link_local_ipv6_address
        self._link_local_ipv6_prefix_len = link_local_ipv6_prefix_len
        self._mac_address = mac_address
        self._networks = networks
        self._ports = ports
        self._sandbox_id = sandbox_id
        self._sandbox_key = sandbox_key
        self._secondary_ip_addresses = secondary_ip_addresses
        self._secondary_ipv6_addresses = secondary_ipv6_addresses

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkSettings of this NetworkSettings.  # noqa: E501
        :rtype: NetworkSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def bridge(self) -> str:
        """Gets the bridge of this NetworkSettings.

        Name of the network'a bridge (for example, `docker0`).  # noqa: E501

        :return: The bridge of this NetworkSettings.
        :rtype: str
        """
        return self._bridge

    @bridge.setter
    def bridge(self, bridge: str):
        """Sets the bridge of this NetworkSettings.

        Name of the network'a bridge (for example, `docker0`).  # noqa: E501

        :param bridge: The bridge of this NetworkSettings.
        :type bridge: str
        """

        self._bridge = bridge

    @property
    def endpoint_id(self) -> str:
        """Gets the endpoint_id of this NetworkSettings.

        EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The endpoint_id of this NetworkSettings.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id: str):
        """Sets the endpoint_id of this NetworkSettings.

        EndpointID uniquely represents a service endpoint in a Sandbox.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param endpoint_id: The endpoint_id of this NetworkSettings.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def gateway(self) -> str:
        """Gets the gateway of this NetworkSettings.

        Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The gateway of this NetworkSettings.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: str):
        """Sets the gateway of this NetworkSettings.

        Gateway address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param gateway: The gateway of this NetworkSettings.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def global_ipv6_address(self) -> str:
        """Gets the global_ipv6_address of this NetworkSettings.

        Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The global_ipv6_address of this NetworkSettings.
        :rtype: str
        """
        return self._global_ipv6_address

    @global_ipv6_address.setter
    def global_ipv6_address(self, global_ipv6_address: str):
        """Sets the global_ipv6_address of this NetworkSettings.

        Global IPv6 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param global_ipv6_address: The global_ipv6_address of this NetworkSettings.
        :type global_ipv6_address: str
        """

        self._global_ipv6_address = global_ipv6_address

    @property
    def global_ipv6_prefix_len(self) -> int:
        """Gets the global_ipv6_prefix_len of this NetworkSettings.

        Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The global_ipv6_prefix_len of this NetworkSettings.
        :rtype: int
        """
        return self._global_ipv6_prefix_len

    @global_ipv6_prefix_len.setter
    def global_ipv6_prefix_len(self, global_ipv6_prefix_len: int):
        """Sets the global_ipv6_prefix_len of this NetworkSettings.

        Mask length of the global IPv6 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this NetworkSettings.
        :type global_ipv6_prefix_len: int
        """

        self._global_ipv6_prefix_len = global_ipv6_prefix_len

    @property
    def hairpin_mode(self) -> bool:
        """Gets the hairpin_mode of this NetworkSettings.

        Indicates if hairpin NAT should be enabled on the virtual interface.   # noqa: E501

        :return: The hairpin_mode of this NetworkSettings.
        :rtype: bool
        """
        return self._hairpin_mode

    @hairpin_mode.setter
    def hairpin_mode(self, hairpin_mode: bool):
        """Sets the hairpin_mode of this NetworkSettings.

        Indicates if hairpin NAT should be enabled on the virtual interface.   # noqa: E501

        :param hairpin_mode: The hairpin_mode of this NetworkSettings.
        :type hairpin_mode: bool
        """

        self._hairpin_mode = hairpin_mode

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this NetworkSettings.

        IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The ip_address of this NetworkSettings.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this NetworkSettings.

        IPv4 address for the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param ip_address: The ip_address of this NetworkSettings.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def ip_prefix_len(self) -> int:
        """Gets the ip_prefix_len of this NetworkSettings.

        Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The ip_prefix_len of this NetworkSettings.
        :rtype: int
        """
        return self._ip_prefix_len

    @ip_prefix_len.setter
    def ip_prefix_len(self, ip_prefix_len: int):
        """Sets the ip_prefix_len of this NetworkSettings.

        Mask length of the IPv4 address.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param ip_prefix_len: The ip_prefix_len of this NetworkSettings.
        :type ip_prefix_len: int
        """

        self._ip_prefix_len = ip_prefix_len

    @property
    def ipv6_gateway(self) -> str:
        """Gets the ipv6_gateway of this NetworkSettings.

        IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The ipv6_gateway of this NetworkSettings.
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway: str):
        """Sets the ipv6_gateway of this NetworkSettings.

        IPv6 gateway address for this network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param ipv6_gateway: The ipv6_gateway of this NetworkSettings.
        :type ipv6_gateway: str
        """

        self._ipv6_gateway = ipv6_gateway

    @property
    def link_local_ipv6_address(self) -> str:
        """Gets the link_local_ipv6_address of this NetworkSettings.

        IPv6 unicast address using the link-local prefix.  # noqa: E501

        :return: The link_local_ipv6_address of this NetworkSettings.
        :rtype: str
        """
        return self._link_local_ipv6_address

    @link_local_ipv6_address.setter
    def link_local_ipv6_address(self, link_local_ipv6_address: str):
        """Sets the link_local_ipv6_address of this NetworkSettings.

        IPv6 unicast address using the link-local prefix.  # noqa: E501

        :param link_local_ipv6_address: The link_local_ipv6_address of this NetworkSettings.
        :type link_local_ipv6_address: str
        """

        self._link_local_ipv6_address = link_local_ipv6_address

    @property
    def link_local_ipv6_prefix_len(self) -> int:
        """Gets the link_local_ipv6_prefix_len of this NetworkSettings.

        Prefix length of the IPv6 unicast address.  # noqa: E501

        :return: The link_local_ipv6_prefix_len of this NetworkSettings.
        :rtype: int
        """
        return self._link_local_ipv6_prefix_len

    @link_local_ipv6_prefix_len.setter
    def link_local_ipv6_prefix_len(self, link_local_ipv6_prefix_len: int):
        """Sets the link_local_ipv6_prefix_len of this NetworkSettings.

        Prefix length of the IPv6 unicast address.  # noqa: E501

        :param link_local_ipv6_prefix_len: The link_local_ipv6_prefix_len of this NetworkSettings.
        :type link_local_ipv6_prefix_len: int
        """

        self._link_local_ipv6_prefix_len = link_local_ipv6_prefix_len

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this NetworkSettings.

        MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :return: The mac_address of this NetworkSettings.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this NetworkSettings.

        MAC address for the container on the default \"bridge\" network.  <p><br /></p>  > **Deprecated**: This field is only propagated when attached to the > default \"bridge\" network. Use the information from the \"bridge\" > network inside the `Networks` map instead, which contains the same > information. This field was deprecated in Docker 1.9 and is scheduled > to be removed in Docker 17.12.0   # noqa: E501

        :param mac_address: The mac_address of this NetworkSettings.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def networks(self) -> Dict[str, EndpointSettings]:
        """Gets the networks of this NetworkSettings.

        Information about all networks that the container is connected to.   # noqa: E501

        :return: The networks of this NetworkSettings.
        :rtype: Dict[str, EndpointSettings]
        """
        return self._networks

    @networks.setter
    def networks(self, networks: Dict[str, EndpointSettings]):
        """Sets the networks of this NetworkSettings.

        Information about all networks that the container is connected to.   # noqa: E501

        :param networks: The networks of this NetworkSettings.
        :type networks: Dict[str, EndpointSettings]
        """

        self._networks = networks

    @property
    def ports(self) -> Dict[str, List[PortBinding]]:
        """Gets the ports of this NetworkSettings.

        PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for both `tcp` and `udp`, two separate entries are added to the mapping table.   # noqa: E501

        :return: The ports of this NetworkSettings.
        :rtype: Dict[str, List[PortBinding]]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: Dict[str, List[PortBinding]]):
        """Sets the ports of this NetworkSettings.

        PortMap describes the mapping of container ports to host ports, using the container's port-number and protocol as key in the format `<port>/<protocol>`, for example, `80/udp`.  If a container's port is mapped for both `tcp` and `udp`, two separate entries are added to the mapping table.   # noqa: E501

        :param ports: The ports of this NetworkSettings.
        :type ports: Dict[str, List[PortBinding]]
        """

        self._ports = ports

    @property
    def sandbox_id(self) -> str:
        """Gets the sandbox_id of this NetworkSettings.

        SandboxID uniquely represents a container's network stack.  # noqa: E501

        :return: The sandbox_id of this NetworkSettings.
        :rtype: str
        """
        return self._sandbox_id

    @sandbox_id.setter
    def sandbox_id(self, sandbox_id: str):
        """Sets the sandbox_id of this NetworkSettings.

        SandboxID uniquely represents a container's network stack.  # noqa: E501

        :param sandbox_id: The sandbox_id of this NetworkSettings.
        :type sandbox_id: str
        """

        self._sandbox_id = sandbox_id

    @property
    def sandbox_key(self) -> str:
        """Gets the sandbox_key of this NetworkSettings.

        SandboxKey identifies the sandbox  # noqa: E501

        :return: The sandbox_key of this NetworkSettings.
        :rtype: str
        """
        return self._sandbox_key

    @sandbox_key.setter
    def sandbox_key(self, sandbox_key: str):
        """Sets the sandbox_key of this NetworkSettings.

        SandboxKey identifies the sandbox  # noqa: E501

        :param sandbox_key: The sandbox_key of this NetworkSettings.
        :type sandbox_key: str
        """

        self._sandbox_key = sandbox_key

    @property
    def secondary_ip_addresses(self) -> List[Address]:
        """Gets the secondary_ip_addresses of this NetworkSettings.

          # noqa: E501

        :return: The secondary_ip_addresses of this NetworkSettings.
        :rtype: List[Address]
        """
        return self._secondary_ip_addresses

    @secondary_ip_addresses.setter
    def secondary_ip_addresses(self, secondary_ip_addresses: List[Address]):
        """Sets the secondary_ip_addresses of this NetworkSettings.

          # noqa: E501

        :param secondary_ip_addresses: The secondary_ip_addresses of this NetworkSettings.
        :type secondary_ip_addresses: List[Address]
        """

        self._secondary_ip_addresses = secondary_ip_addresses

    @property
    def secondary_ipv6_addresses(self) -> List[Address]:
        """Gets the secondary_ipv6_addresses of this NetworkSettings.

          # noqa: E501

        :return: The secondary_ipv6_addresses of this NetworkSettings.
        :rtype: List[Address]
        """
        return self._secondary_ipv6_addresses

    @secondary_ipv6_addresses.setter
    def secondary_ipv6_addresses(self, secondary_ipv6_addresses: List[Address]):
        """Sets the secondary_ipv6_addresses of this NetworkSettings.

          # noqa: E501

        :param secondary_ipv6_addresses: The secondary_ipv6_addresses of this NetworkSettings.
        :type secondary_ipv6_addresses: List[Address]
        """

        self._secondary_ipv6_addresses = secondary_ipv6_addresses
