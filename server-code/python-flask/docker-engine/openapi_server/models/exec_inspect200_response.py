from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.process_config import ProcessConfig
from openapi_server import util

from openapi_server.models.process_config import ProcessConfig  # noqa: E501

class ExecInspect200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_id=None, exit_code=None, id=None, open_stderr=None, open_stdin=None, open_stdout=None, pid=None, process_config=None, running=None):  # noqa: E501
        """ExecInspect200Response - a model defined in OpenAPI

        :param container_id: The container_id of this ExecInspect200Response.  # noqa: E501
        :type container_id: str
        :param exit_code: The exit_code of this ExecInspect200Response.  # noqa: E501
        :type exit_code: int
        :param id: The id of this ExecInspect200Response.  # noqa: E501
        :type id: str
        :param open_stderr: The open_stderr of this ExecInspect200Response.  # noqa: E501
        :type open_stderr: bool
        :param open_stdin: The open_stdin of this ExecInspect200Response.  # noqa: E501
        :type open_stdin: bool
        :param open_stdout: The open_stdout of this ExecInspect200Response.  # noqa: E501
        :type open_stdout: bool
        :param pid: The pid of this ExecInspect200Response.  # noqa: E501
        :type pid: int
        :param process_config: The process_config of this ExecInspect200Response.  # noqa: E501
        :type process_config: ProcessConfig
        :param running: The running of this ExecInspect200Response.  # noqa: E501
        :type running: bool
        """
        self.openapi_types = {
            'container_id': str,
            'exit_code': int,
            'id': str,
            'open_stderr': bool,
            'open_stdin': bool,
            'open_stdout': bool,
            'pid': int,
            'process_config': ProcessConfig,
            'running': bool
        }

        self.attribute_map = {
            'container_id': 'ContainerID',
            'exit_code': 'ExitCode',
            'id': 'ID',
            'open_stderr': 'OpenStderr',
            'open_stdin': 'OpenStdin',
            'open_stdout': 'OpenStdout',
            'pid': 'Pid',
            'process_config': 'ProcessConfig',
            'running': 'Running'
        }

        self._container_id = container_id
        self._exit_code = exit_code
        self._id = id
        self._open_stderr = open_stderr
        self._open_stdin = open_stdin
        self._open_stdout = open_stdout
        self._pid = pid
        self._process_config = process_config
        self._running = running

    @classmethod
    def from_dict(cls, dikt) -> 'ExecInspect200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecInspect_200_response of this ExecInspect200Response.  # noqa: E501
        :rtype: ExecInspect200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_id(self) -> str:
        """Gets the container_id of this ExecInspect200Response.


        :return: The container_id of this ExecInspect200Response.
        :rtype: str
        """
        return self._container_id

    @container_id.setter
    def container_id(self, container_id: str):
        """Sets the container_id of this ExecInspect200Response.


        :param container_id: The container_id of this ExecInspect200Response.
        :type container_id: str
        """

        self._container_id = container_id

    @property
    def exit_code(self) -> int:
        """Gets the exit_code of this ExecInspect200Response.


        :return: The exit_code of this ExecInspect200Response.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code: int):
        """Sets the exit_code of this ExecInspect200Response.


        :param exit_code: The exit_code of this ExecInspect200Response.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def id(self) -> str:
        """Gets the id of this ExecInspect200Response.


        :return: The id of this ExecInspect200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ExecInspect200Response.


        :param id: The id of this ExecInspect200Response.
        :type id: str
        """

        self._id = id

    @property
    def open_stderr(self) -> bool:
        """Gets the open_stderr of this ExecInspect200Response.


        :return: The open_stderr of this ExecInspect200Response.
        :rtype: bool
        """
        return self._open_stderr

    @open_stderr.setter
    def open_stderr(self, open_stderr: bool):
        """Sets the open_stderr of this ExecInspect200Response.


        :param open_stderr: The open_stderr of this ExecInspect200Response.
        :type open_stderr: bool
        """

        self._open_stderr = open_stderr

    @property
    def open_stdin(self) -> bool:
        """Gets the open_stdin of this ExecInspect200Response.


        :return: The open_stdin of this ExecInspect200Response.
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin: bool):
        """Sets the open_stdin of this ExecInspect200Response.


        :param open_stdin: The open_stdin of this ExecInspect200Response.
        :type open_stdin: bool
        """

        self._open_stdin = open_stdin

    @property
    def open_stdout(self) -> bool:
        """Gets the open_stdout of this ExecInspect200Response.


        :return: The open_stdout of this ExecInspect200Response.
        :rtype: bool
        """
        return self._open_stdout

    @open_stdout.setter
    def open_stdout(self, open_stdout: bool):
        """Sets the open_stdout of this ExecInspect200Response.


        :param open_stdout: The open_stdout of this ExecInspect200Response.
        :type open_stdout: bool
        """

        self._open_stdout = open_stdout

    @property
    def pid(self) -> int:
        """Gets the pid of this ExecInspect200Response.

        The system process ID for the exec process.  # noqa: E501

        :return: The pid of this ExecInspect200Response.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid: int):
        """Sets the pid of this ExecInspect200Response.

        The system process ID for the exec process.  # noqa: E501

        :param pid: The pid of this ExecInspect200Response.
        :type pid: int
        """

        self._pid = pid

    @property
    def process_config(self) -> ProcessConfig:
        """Gets the process_config of this ExecInspect200Response.


        :return: The process_config of this ExecInspect200Response.
        :rtype: ProcessConfig
        """
        return self._process_config

    @process_config.setter
    def process_config(self, process_config: ProcessConfig):
        """Sets the process_config of this ExecInspect200Response.


        :param process_config: The process_config of this ExecInspect200Response.
        :type process_config: ProcessConfig
        """

        self._process_config = process_config

    @property
    def running(self) -> bool:
        """Gets the running of this ExecInspect200Response.


        :return: The running of this ExecInspect200Response.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running: bool):
        """Sets the running of this ExecInspect200Response.


        :param running: The running of this ExecInspect200Response.
        :type running: bool
        """

        self._running = running
