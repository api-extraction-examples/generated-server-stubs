from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PluginEnv(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, name=None, settable=None, value=None):  # noqa: E501
        """PluginEnv - a model defined in OpenAPI

        :param description: The description of this PluginEnv.  # noqa: E501
        :type description: str
        :param name: The name of this PluginEnv.  # noqa: E501
        :type name: str
        :param settable: The settable of this PluginEnv.  # noqa: E501
        :type settable: List[str]
        :param value: The value of this PluginEnv.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'settable': List[str],
            'value': str
        }

        self.attribute_map = {
            'description': 'Description',
            'name': 'Name',
            'settable': 'Settable',
            'value': 'Value'
        }

        self._description = description
        self._name = name
        self._settable = settable
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'PluginEnv':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PluginEnv of this PluginEnv.  # noqa: E501
        :rtype: PluginEnv
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this PluginEnv.


        :return: The description of this PluginEnv.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PluginEnv.


        :param description: The description of this PluginEnv.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this PluginEnv.


        :return: The name of this PluginEnv.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PluginEnv.


        :param name: The name of this PluginEnv.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def settable(self) -> List[str]:
        """Gets the settable of this PluginEnv.


        :return: The settable of this PluginEnv.
        :rtype: List[str]
        """
        return self._settable

    @settable.setter
    def settable(self, settable: List[str]):
        """Sets the settable of this PluginEnv.


        :param settable: The settable of this PluginEnv.
        :type settable: List[str]
        """
        if settable is None:
            raise ValueError("Invalid value for `settable`, must not be `None`")  # noqa: E501

        self._settable = settable

    @property
    def value(self) -> str:
        """Gets the value of this PluginEnv.


        :return: The value of this PluginEnv.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this PluginEnv.


        :param value: The value of this PluginEnv.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
