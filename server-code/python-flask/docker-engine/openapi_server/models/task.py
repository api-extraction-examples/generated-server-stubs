from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.generic_resources_inner import GenericResourcesInner
from openapi_server.models.object_version import ObjectVersion
from openapi_server.models.task_spec import TaskSpec
from openapi_server.models.task_state import TaskState
from openapi_server.models.task_status import TaskStatus
from openapi_server import util

from openapi_server.models.generic_resources_inner import GenericResourcesInner  # noqa: E501
from openapi_server.models.object_version import ObjectVersion  # noqa: E501
from openapi_server.models.task_spec import TaskSpec  # noqa: E501
from openapi_server.models.task_state import TaskState  # noqa: E501
from openapi_server.models.task_status import TaskStatus  # noqa: E501

class Task(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assigned_generic_resources=None, created_at=None, desired_state=None, id=None, labels=None, name=None, node_id=None, service_id=None, slot=None, spec=None, status=None, updated_at=None, version=None):  # noqa: E501
        """Task - a model defined in OpenAPI

        :param assigned_generic_resources: The assigned_generic_resources of this Task.  # noqa: E501
        :type assigned_generic_resources: List[GenericResourcesInner]
        :param created_at: The created_at of this Task.  # noqa: E501
        :type created_at: str
        :param desired_state: The desired_state of this Task.  # noqa: E501
        :type desired_state: TaskState
        :param id: The id of this Task.  # noqa: E501
        :type id: str
        :param labels: The labels of this Task.  # noqa: E501
        :type labels: Dict[str, str]
        :param name: The name of this Task.  # noqa: E501
        :type name: str
        :param node_id: The node_id of this Task.  # noqa: E501
        :type node_id: str
        :param service_id: The service_id of this Task.  # noqa: E501
        :type service_id: str
        :param slot: The slot of this Task.  # noqa: E501
        :type slot: int
        :param spec: The spec of this Task.  # noqa: E501
        :type spec: TaskSpec
        :param status: The status of this Task.  # noqa: E501
        :type status: TaskStatus
        :param updated_at: The updated_at of this Task.  # noqa: E501
        :type updated_at: str
        :param version: The version of this Task.  # noqa: E501
        :type version: ObjectVersion
        """
        self.openapi_types = {
            'assigned_generic_resources': List[GenericResourcesInner],
            'created_at': str,
            'desired_state': TaskState,
            'id': str,
            'labels': Dict[str, str],
            'name': str,
            'node_id': str,
            'service_id': str,
            'slot': int,
            'spec': TaskSpec,
            'status': TaskStatus,
            'updated_at': str,
            'version': ObjectVersion
        }

        self.attribute_map = {
            'assigned_generic_resources': 'AssignedGenericResources',
            'created_at': 'CreatedAt',
            'desired_state': 'DesiredState',
            'id': 'ID',
            'labels': 'Labels',
            'name': 'Name',
            'node_id': 'NodeID',
            'service_id': 'ServiceID',
            'slot': 'Slot',
            'spec': 'Spec',
            'status': 'Status',
            'updated_at': 'UpdatedAt',
            'version': 'Version'
        }

        self._assigned_generic_resources = assigned_generic_resources
        self._created_at = created_at
        self._desired_state = desired_state
        self._id = id
        self._labels = labels
        self._name = name
        self._node_id = node_id
        self._service_id = service_id
        self._slot = slot
        self._spec = spec
        self._status = status
        self._updated_at = updated_at
        self._version = version

    @classmethod
    def from_dict(cls, dikt) -> 'Task':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Task of this Task.  # noqa: E501
        :rtype: Task
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assigned_generic_resources(self) -> List[GenericResourcesInner]:
        """Gets the assigned_generic_resources of this Task.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :return: The assigned_generic_resources of this Task.
        :rtype: List[GenericResourcesInner]
        """
        return self._assigned_generic_resources

    @assigned_generic_resources.setter
    def assigned_generic_resources(self, assigned_generic_resources: List[GenericResourcesInner]):
        """Sets the assigned_generic_resources of this Task.

        User-defined resources can be either Integer resources (e.g, `SSD=3`) or String resources (e.g, `GPU=UUID1`)  # noqa: E501

        :param assigned_generic_resources: The assigned_generic_resources of this Task.
        :type assigned_generic_resources: List[GenericResourcesInner]
        """

        self._assigned_generic_resources = assigned_generic_resources

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Task.


        :return: The created_at of this Task.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Task.


        :param created_at: The created_at of this Task.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def desired_state(self) -> TaskState:
        """Gets the desired_state of this Task.


        :return: The desired_state of this Task.
        :rtype: TaskState
        """
        return self._desired_state

    @desired_state.setter
    def desired_state(self, desired_state: TaskState):
        """Sets the desired_state of this Task.


        :param desired_state: The desired_state of this Task.
        :type desired_state: TaskState
        """

        self._desired_state = desired_state

    @property
    def id(self) -> str:
        """Gets the id of this Task.

        The ID of the task.  # noqa: E501

        :return: The id of this Task.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Task.

        The ID of the task.  # noqa: E501

        :param id: The id of this Task.
        :type id: str
        """

        self._id = id

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this Task.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this Task.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this Task.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this Task.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self) -> str:
        """Gets the name of this Task.

        Name of the task.  # noqa: E501

        :return: The name of this Task.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Task.

        Name of the task.  # noqa: E501

        :param name: The name of this Task.
        :type name: str
        """

        self._name = name

    @property
    def node_id(self) -> str:
        """Gets the node_id of this Task.

        The ID of the node that this task is on.  # noqa: E501

        :return: The node_id of this Task.
        :rtype: str
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: str):
        """Sets the node_id of this Task.

        The ID of the node that this task is on.  # noqa: E501

        :param node_id: The node_id of this Task.
        :type node_id: str
        """

        self._node_id = node_id

    @property
    def service_id(self) -> str:
        """Gets the service_id of this Task.

        The ID of the service this task is part of.  # noqa: E501

        :return: The service_id of this Task.
        :rtype: str
        """
        return self._service_id

    @service_id.setter
    def service_id(self, service_id: str):
        """Sets the service_id of this Task.

        The ID of the service this task is part of.  # noqa: E501

        :param service_id: The service_id of this Task.
        :type service_id: str
        """

        self._service_id = service_id

    @property
    def slot(self) -> int:
        """Gets the slot of this Task.


        :return: The slot of this Task.
        :rtype: int
        """
        return self._slot

    @slot.setter
    def slot(self, slot: int):
        """Sets the slot of this Task.


        :param slot: The slot of this Task.
        :type slot: int
        """

        self._slot = slot

    @property
    def spec(self) -> TaskSpec:
        """Gets the spec of this Task.


        :return: The spec of this Task.
        :rtype: TaskSpec
        """
        return self._spec

    @spec.setter
    def spec(self, spec: TaskSpec):
        """Sets the spec of this Task.


        :param spec: The spec of this Task.
        :type spec: TaskSpec
        """

        self._spec = spec

    @property
    def status(self) -> TaskStatus:
        """Gets the status of this Task.


        :return: The status of this Task.
        :rtype: TaskStatus
        """
        return self._status

    @status.setter
    def status(self, status: TaskStatus):
        """Sets the status of this Task.


        :param status: The status of this Task.
        :type status: TaskStatus
        """

        self._status = status

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this Task.


        :return: The updated_at of this Task.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this Task.


        :param updated_at: The updated_at of this Task.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def version(self) -> ObjectVersion:
        """Gets the version of this Task.


        :return: The version of this Task.
        :rtype: ObjectVersion
        """
        return self._version

    @version.setter
    def version(self, version: ObjectVersion):
        """Sets the version of this Task.


        :param version: The version of this Task.
        :type version: ObjectVersion
        """

        self._version = version
