from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Port(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ip=None, private_port=None, public_port=None, type=None):  # noqa: E501
        """Port - a model defined in OpenAPI

        :param ip: The ip of this Port.  # noqa: E501
        :type ip: str
        :param private_port: The private_port of this Port.  # noqa: E501
        :type private_port: int
        :param public_port: The public_port of this Port.  # noqa: E501
        :type public_port: int
        :param type: The type of this Port.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'ip': str,
            'private_port': int,
            'public_port': int,
            'type': str
        }

        self.attribute_map = {
            'ip': 'IP',
            'private_port': 'PrivatePort',
            'public_port': 'PublicPort',
            'type': 'Type'
        }

        self._ip = ip
        self._private_port = private_port
        self._public_port = public_port
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Port':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Port of this Port.  # noqa: E501
        :rtype: Port
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ip(self) -> str:
        """Gets the ip of this Port.


        :return: The ip of this Port.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Port.


        :param ip: The ip of this Port.
        :type ip: str
        """

        self._ip = ip

    @property
    def private_port(self) -> int:
        """Gets the private_port of this Port.

        Port on the container  # noqa: E501

        :return: The private_port of this Port.
        :rtype: int
        """
        return self._private_port

    @private_port.setter
    def private_port(self, private_port: int):
        """Sets the private_port of this Port.

        Port on the container  # noqa: E501

        :param private_port: The private_port of this Port.
        :type private_port: int
        """
        if private_port is None:
            raise ValueError("Invalid value for `private_port`, must not be `None`")  # noqa: E501

        self._private_port = private_port

    @property
    def public_port(self) -> int:
        """Gets the public_port of this Port.

        Port exposed on the host  # noqa: E501

        :return: The public_port of this Port.
        :rtype: int
        """
        return self._public_port

    @public_port.setter
    def public_port(self, public_port: int):
        """Sets the public_port of this Port.

        Port exposed on the host  # noqa: E501

        :param public_port: The public_port of this Port.
        :type public_port: int
        """

        self._public_port = public_port

    @property
    def type(self) -> str:
        """Gets the type of this Port.


        :return: The type of this Port.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Port.


        :param type: The type of this Port.
        :type type: str
        """
        allowed_values = ["tcp", "udp"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
