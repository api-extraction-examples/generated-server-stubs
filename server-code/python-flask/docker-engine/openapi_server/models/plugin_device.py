from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PluginDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, name=None, path=None, settable=None):  # noqa: E501
        """PluginDevice - a model defined in OpenAPI

        :param description: The description of this PluginDevice.  # noqa: E501
        :type description: str
        :param name: The name of this PluginDevice.  # noqa: E501
        :type name: str
        :param path: The path of this PluginDevice.  # noqa: E501
        :type path: str
        :param settable: The settable of this PluginDevice.  # noqa: E501
        :type settable: List[str]
        """
        self.openapi_types = {
            'description': str,
            'name': str,
            'path': str,
            'settable': List[str]
        }

        self.attribute_map = {
            'description': 'Description',
            'name': 'Name',
            'path': 'Path',
            'settable': 'Settable'
        }

        self._description = description
        self._name = name
        self._path = path
        self._settable = settable

    @classmethod
    def from_dict(cls, dikt) -> 'PluginDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PluginDevice of this PluginDevice.  # noqa: E501
        :rtype: PluginDevice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this PluginDevice.


        :return: The description of this PluginDevice.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PluginDevice.


        :param description: The description of this PluginDevice.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this PluginDevice.


        :return: The name of this PluginDevice.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PluginDevice.


        :param name: The name of this PluginDevice.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def path(self) -> str:
        """Gets the path of this PluginDevice.


        :return: The path of this PluginDevice.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this PluginDevice.


        :param path: The path of this PluginDevice.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def settable(self) -> List[str]:
        """Gets the settable of this PluginDevice.


        :return: The settable of this PluginDevice.
        :rtype: List[str]
        """
        return self._settable

    @settable.setter
    def settable(self, settable: List[str]):
        """Sets the settable of this PluginDevice.


        :param settable: The settable of this PluginDevice.
        :type settable: List[str]
        """
        if settable is None:
            raise ValueError("Invalid value for `settable`, must not be `None`")  # noqa: E501

        self._settable = settable
