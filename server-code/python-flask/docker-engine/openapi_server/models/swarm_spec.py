from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.swarm_spec_ca_config import SwarmSpecCAConfig
from openapi_server.models.swarm_spec_dispatcher import SwarmSpecDispatcher
from openapi_server.models.swarm_spec_encryption_config import SwarmSpecEncryptionConfig
from openapi_server.models.swarm_spec_orchestration import SwarmSpecOrchestration
from openapi_server.models.swarm_spec_raft import SwarmSpecRaft
from openapi_server.models.swarm_spec_task_defaults import SwarmSpecTaskDefaults
from openapi_server import util

from openapi_server.models.swarm_spec_ca_config import SwarmSpecCAConfig  # noqa: E501
from openapi_server.models.swarm_spec_dispatcher import SwarmSpecDispatcher  # noqa: E501
from openapi_server.models.swarm_spec_encryption_config import SwarmSpecEncryptionConfig  # noqa: E501
from openapi_server.models.swarm_spec_orchestration import SwarmSpecOrchestration  # noqa: E501
from openapi_server.models.swarm_spec_raft import SwarmSpecRaft  # noqa: E501
from openapi_server.models.swarm_spec_task_defaults import SwarmSpecTaskDefaults  # noqa: E501

class SwarmSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_config=None, dispatcher=None, encryption_config=None, labels=None, name=None, orchestration=None, raft=None, task_defaults=None):  # noqa: E501
        """SwarmSpec - a model defined in OpenAPI

        :param ca_config: The ca_config of this SwarmSpec.  # noqa: E501
        :type ca_config: SwarmSpecCAConfig
        :param dispatcher: The dispatcher of this SwarmSpec.  # noqa: E501
        :type dispatcher: SwarmSpecDispatcher
        :param encryption_config: The encryption_config of this SwarmSpec.  # noqa: E501
        :type encryption_config: SwarmSpecEncryptionConfig
        :param labels: The labels of this SwarmSpec.  # noqa: E501
        :type labels: Dict[str, str]
        :param name: The name of this SwarmSpec.  # noqa: E501
        :type name: str
        :param orchestration: The orchestration of this SwarmSpec.  # noqa: E501
        :type orchestration: SwarmSpecOrchestration
        :param raft: The raft of this SwarmSpec.  # noqa: E501
        :type raft: SwarmSpecRaft
        :param task_defaults: The task_defaults of this SwarmSpec.  # noqa: E501
        :type task_defaults: SwarmSpecTaskDefaults
        """
        self.openapi_types = {
            'ca_config': SwarmSpecCAConfig,
            'dispatcher': SwarmSpecDispatcher,
            'encryption_config': SwarmSpecEncryptionConfig,
            'labels': Dict[str, str],
            'name': str,
            'orchestration': SwarmSpecOrchestration,
            'raft': SwarmSpecRaft,
            'task_defaults': SwarmSpecTaskDefaults
        }

        self.attribute_map = {
            'ca_config': 'CAConfig',
            'dispatcher': 'Dispatcher',
            'encryption_config': 'EncryptionConfig',
            'labels': 'Labels',
            'name': 'Name',
            'orchestration': 'Orchestration',
            'raft': 'Raft',
            'task_defaults': 'TaskDefaults'
        }

        self._ca_config = ca_config
        self._dispatcher = dispatcher
        self._encryption_config = encryption_config
        self._labels = labels
        self._name = name
        self._orchestration = orchestration
        self._raft = raft
        self._task_defaults = task_defaults

    @classmethod
    def from_dict(cls, dikt) -> 'SwarmSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SwarmSpec of this SwarmSpec.  # noqa: E501
        :rtype: SwarmSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_config(self) -> SwarmSpecCAConfig:
        """Gets the ca_config of this SwarmSpec.


        :return: The ca_config of this SwarmSpec.
        :rtype: SwarmSpecCAConfig
        """
        return self._ca_config

    @ca_config.setter
    def ca_config(self, ca_config: SwarmSpecCAConfig):
        """Sets the ca_config of this SwarmSpec.


        :param ca_config: The ca_config of this SwarmSpec.
        :type ca_config: SwarmSpecCAConfig
        """

        self._ca_config = ca_config

    @property
    def dispatcher(self) -> SwarmSpecDispatcher:
        """Gets the dispatcher of this SwarmSpec.


        :return: The dispatcher of this SwarmSpec.
        :rtype: SwarmSpecDispatcher
        """
        return self._dispatcher

    @dispatcher.setter
    def dispatcher(self, dispatcher: SwarmSpecDispatcher):
        """Sets the dispatcher of this SwarmSpec.


        :param dispatcher: The dispatcher of this SwarmSpec.
        :type dispatcher: SwarmSpecDispatcher
        """

        self._dispatcher = dispatcher

    @property
    def encryption_config(self) -> SwarmSpecEncryptionConfig:
        """Gets the encryption_config of this SwarmSpec.


        :return: The encryption_config of this SwarmSpec.
        :rtype: SwarmSpecEncryptionConfig
        """
        return self._encryption_config

    @encryption_config.setter
    def encryption_config(self, encryption_config: SwarmSpecEncryptionConfig):
        """Sets the encryption_config of this SwarmSpec.


        :param encryption_config: The encryption_config of this SwarmSpec.
        :type encryption_config: SwarmSpecEncryptionConfig
        """

        self._encryption_config = encryption_config

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this SwarmSpec.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this SwarmSpec.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this SwarmSpec.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this SwarmSpec.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self) -> str:
        """Gets the name of this SwarmSpec.

        Name of the swarm.  # noqa: E501

        :return: The name of this SwarmSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SwarmSpec.

        Name of the swarm.  # noqa: E501

        :param name: The name of this SwarmSpec.
        :type name: str
        """

        self._name = name

    @property
    def orchestration(self) -> SwarmSpecOrchestration:
        """Gets the orchestration of this SwarmSpec.


        :return: The orchestration of this SwarmSpec.
        :rtype: SwarmSpecOrchestration
        """
        return self._orchestration

    @orchestration.setter
    def orchestration(self, orchestration: SwarmSpecOrchestration):
        """Sets the orchestration of this SwarmSpec.


        :param orchestration: The orchestration of this SwarmSpec.
        :type orchestration: SwarmSpecOrchestration
        """

        self._orchestration = orchestration

    @property
    def raft(self) -> SwarmSpecRaft:
        """Gets the raft of this SwarmSpec.


        :return: The raft of this SwarmSpec.
        :rtype: SwarmSpecRaft
        """
        return self._raft

    @raft.setter
    def raft(self, raft: SwarmSpecRaft):
        """Sets the raft of this SwarmSpec.


        :param raft: The raft of this SwarmSpec.
        :type raft: SwarmSpecRaft
        """

        self._raft = raft

    @property
    def task_defaults(self) -> SwarmSpecTaskDefaults:
        """Gets the task_defaults of this SwarmSpec.


        :return: The task_defaults of this SwarmSpec.
        :rtype: SwarmSpecTaskDefaults
        """
        return self._task_defaults

    @task_defaults.setter
    def task_defaults(self, task_defaults: SwarmSpecTaskDefaults):
        """Sets the task_defaults of this SwarmSpec.


        :param task_defaults: The task_defaults of this SwarmSpec.
        :type task_defaults: SwarmSpecTaskDefaults
        """

        self._task_defaults = task_defaults
