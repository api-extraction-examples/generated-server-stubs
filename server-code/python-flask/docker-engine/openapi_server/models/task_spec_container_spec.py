from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.health_config import HealthConfig
from openapi_server.models.mount import Mount
from openapi_server.models.task_spec_container_spec_configs_inner import TaskSpecContainerSpecConfigsInner
from openapi_server.models.task_spec_container_spec_dns_config import TaskSpecContainerSpecDNSConfig
from openapi_server.models.task_spec_container_spec_privileges import TaskSpecContainerSpecPrivileges
from openapi_server.models.task_spec_container_spec_secrets_inner import TaskSpecContainerSpecSecretsInner
from openapi_server import util

from openapi_server.models.health_config import HealthConfig  # noqa: E501
from openapi_server.models.mount import Mount  # noqa: E501
from openapi_server.models.task_spec_container_spec_configs_inner import TaskSpecContainerSpecConfigsInner  # noqa: E501
from openapi_server.models.task_spec_container_spec_dns_config import TaskSpecContainerSpecDNSConfig  # noqa: E501
from openapi_server.models.task_spec_container_spec_privileges import TaskSpecContainerSpecPrivileges  # noqa: E501
from openapi_server.models.task_spec_container_spec_secrets_inner import TaskSpecContainerSpecSecretsInner  # noqa: E501

class TaskSpecContainerSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, args=None, command=None, configs=None, dns_config=None, dir=None, env=None, groups=None, health_check=None, hostname=None, hosts=None, image=None, labels=None, mounts=None, open_stdin=None, privileges=None, read_only=None, secrets=None, stop_grace_period=None, stop_signal=None, tty=None, user=None):  # noqa: E501
        """TaskSpecContainerSpec - a model defined in OpenAPI

        :param args: The args of this TaskSpecContainerSpec.  # noqa: E501
        :type args: List[str]
        :param command: The command of this TaskSpecContainerSpec.  # noqa: E501
        :type command: List[str]
        :param configs: The configs of this TaskSpecContainerSpec.  # noqa: E501
        :type configs: List[TaskSpecContainerSpecConfigsInner]
        :param dns_config: The dns_config of this TaskSpecContainerSpec.  # noqa: E501
        :type dns_config: TaskSpecContainerSpecDNSConfig
        :param dir: The dir of this TaskSpecContainerSpec.  # noqa: E501
        :type dir: str
        :param env: The env of this TaskSpecContainerSpec.  # noqa: E501
        :type env: List[str]
        :param groups: The groups of this TaskSpecContainerSpec.  # noqa: E501
        :type groups: List[str]
        :param health_check: The health_check of this TaskSpecContainerSpec.  # noqa: E501
        :type health_check: HealthConfig
        :param hostname: The hostname of this TaskSpecContainerSpec.  # noqa: E501
        :type hostname: str
        :param hosts: The hosts of this TaskSpecContainerSpec.  # noqa: E501
        :type hosts: List[str]
        :param image: The image of this TaskSpecContainerSpec.  # noqa: E501
        :type image: str
        :param labels: The labels of this TaskSpecContainerSpec.  # noqa: E501
        :type labels: Dict[str, str]
        :param mounts: The mounts of this TaskSpecContainerSpec.  # noqa: E501
        :type mounts: List[Mount]
        :param open_stdin: The open_stdin of this TaskSpecContainerSpec.  # noqa: E501
        :type open_stdin: bool
        :param privileges: The privileges of this TaskSpecContainerSpec.  # noqa: E501
        :type privileges: TaskSpecContainerSpecPrivileges
        :param read_only: The read_only of this TaskSpecContainerSpec.  # noqa: E501
        :type read_only: bool
        :param secrets: The secrets of this TaskSpecContainerSpec.  # noqa: E501
        :type secrets: List[TaskSpecContainerSpecSecretsInner]
        :param stop_grace_period: The stop_grace_period of this TaskSpecContainerSpec.  # noqa: E501
        :type stop_grace_period: int
        :param stop_signal: The stop_signal of this TaskSpecContainerSpec.  # noqa: E501
        :type stop_signal: str
        :param tty: The tty of this TaskSpecContainerSpec.  # noqa: E501
        :type tty: bool
        :param user: The user of this TaskSpecContainerSpec.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'args': List[str],
            'command': List[str],
            'configs': List[TaskSpecContainerSpecConfigsInner],
            'dns_config': TaskSpecContainerSpecDNSConfig,
            'dir': str,
            'env': List[str],
            'groups': List[str],
            'health_check': HealthConfig,
            'hostname': str,
            'hosts': List[str],
            'image': str,
            'labels': Dict[str, str],
            'mounts': List[Mount],
            'open_stdin': bool,
            'privileges': TaskSpecContainerSpecPrivileges,
            'read_only': bool,
            'secrets': List[TaskSpecContainerSpecSecretsInner],
            'stop_grace_period': int,
            'stop_signal': str,
            'tty': bool,
            'user': str
        }

        self.attribute_map = {
            'args': 'Args',
            'command': 'Command',
            'configs': 'Configs',
            'dns_config': 'DNSConfig',
            'dir': 'Dir',
            'env': 'Env',
            'groups': 'Groups',
            'health_check': 'HealthCheck',
            'hostname': 'Hostname',
            'hosts': 'Hosts',
            'image': 'Image',
            'labels': 'Labels',
            'mounts': 'Mounts',
            'open_stdin': 'OpenStdin',
            'privileges': 'Privileges',
            'read_only': 'ReadOnly',
            'secrets': 'Secrets',
            'stop_grace_period': 'StopGracePeriod',
            'stop_signal': 'StopSignal',
            'tty': 'TTY',
            'user': 'User'
        }

        self._args = args
        self._command = command
        self._configs = configs
        self._dns_config = dns_config
        self._dir = dir
        self._env = env
        self._groups = groups
        self._health_check = health_check
        self._hostname = hostname
        self._hosts = hosts
        self._image = image
        self._labels = labels
        self._mounts = mounts
        self._open_stdin = open_stdin
        self._privileges = privileges
        self._read_only = read_only
        self._secrets = secrets
        self._stop_grace_period = stop_grace_period
        self._stop_signal = stop_signal
        self._tty = tty
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'TaskSpecContainerSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskSpec_ContainerSpec of this TaskSpecContainerSpec.  # noqa: E501
        :rtype: TaskSpecContainerSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def args(self) -> List[str]:
        """Gets the args of this TaskSpecContainerSpec.

        Arguments to the command.  # noqa: E501

        :return: The args of this TaskSpecContainerSpec.
        :rtype: List[str]
        """
        return self._args

    @args.setter
    def args(self, args: List[str]):
        """Sets the args of this TaskSpecContainerSpec.

        Arguments to the command.  # noqa: E501

        :param args: The args of this TaskSpecContainerSpec.
        :type args: List[str]
        """

        self._args = args

    @property
    def command(self) -> List[str]:
        """Gets the command of this TaskSpecContainerSpec.

        The command to be run in the image.  # noqa: E501

        :return: The command of this TaskSpecContainerSpec.
        :rtype: List[str]
        """
        return self._command

    @command.setter
    def command(self, command: List[str]):
        """Sets the command of this TaskSpecContainerSpec.

        The command to be run in the image.  # noqa: E501

        :param command: The command of this TaskSpecContainerSpec.
        :type command: List[str]
        """

        self._command = command

    @property
    def configs(self) -> List[TaskSpecContainerSpecConfigsInner]:
        """Gets the configs of this TaskSpecContainerSpec.

        Configs contains references to zero or more configs that will be exposed to the service.  # noqa: E501

        :return: The configs of this TaskSpecContainerSpec.
        :rtype: List[TaskSpecContainerSpecConfigsInner]
        """
        return self._configs

    @configs.setter
    def configs(self, configs: List[TaskSpecContainerSpecConfigsInner]):
        """Sets the configs of this TaskSpecContainerSpec.

        Configs contains references to zero or more configs that will be exposed to the service.  # noqa: E501

        :param configs: The configs of this TaskSpecContainerSpec.
        :type configs: List[TaskSpecContainerSpecConfigsInner]
        """

        self._configs = configs

    @property
    def dns_config(self) -> TaskSpecContainerSpecDNSConfig:
        """Gets the dns_config of this TaskSpecContainerSpec.


        :return: The dns_config of this TaskSpecContainerSpec.
        :rtype: TaskSpecContainerSpecDNSConfig
        """
        return self._dns_config

    @dns_config.setter
    def dns_config(self, dns_config: TaskSpecContainerSpecDNSConfig):
        """Sets the dns_config of this TaskSpecContainerSpec.


        :param dns_config: The dns_config of this TaskSpecContainerSpec.
        :type dns_config: TaskSpecContainerSpecDNSConfig
        """

        self._dns_config = dns_config

    @property
    def dir(self) -> str:
        """Gets the dir of this TaskSpecContainerSpec.

        The working directory for commands to run in.  # noqa: E501

        :return: The dir of this TaskSpecContainerSpec.
        :rtype: str
        """
        return self._dir

    @dir.setter
    def dir(self, dir: str):
        """Sets the dir of this TaskSpecContainerSpec.

        The working directory for commands to run in.  # noqa: E501

        :param dir: The dir of this TaskSpecContainerSpec.
        :type dir: str
        """

        self._dir = dir

    @property
    def env(self) -> List[str]:
        """Gets the env of this TaskSpecContainerSpec.

        A list of environment variables in the form `VAR=value`.  # noqa: E501

        :return: The env of this TaskSpecContainerSpec.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env: List[str]):
        """Sets the env of this TaskSpecContainerSpec.

        A list of environment variables in the form `VAR=value`.  # noqa: E501

        :param env: The env of this TaskSpecContainerSpec.
        :type env: List[str]
        """

        self._env = env

    @property
    def groups(self) -> List[str]:
        """Gets the groups of this TaskSpecContainerSpec.

        A list of additional groups that the container process will run as.  # noqa: E501

        :return: The groups of this TaskSpecContainerSpec.
        :rtype: List[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[str]):
        """Sets the groups of this TaskSpecContainerSpec.

        A list of additional groups that the container process will run as.  # noqa: E501

        :param groups: The groups of this TaskSpecContainerSpec.
        :type groups: List[str]
        """

        self._groups = groups

    @property
    def health_check(self) -> HealthConfig:
        """Gets the health_check of this TaskSpecContainerSpec.


        :return: The health_check of this TaskSpecContainerSpec.
        :rtype: HealthConfig
        """
        return self._health_check

    @health_check.setter
    def health_check(self, health_check: HealthConfig):
        """Sets the health_check of this TaskSpecContainerSpec.


        :param health_check: The health_check of this TaskSpecContainerSpec.
        :type health_check: HealthConfig
        """

        self._health_check = health_check

    @property
    def hostname(self) -> str:
        """Gets the hostname of this TaskSpecContainerSpec.

        The hostname to use for the container, as a valid RFC 1123 hostname.  # noqa: E501

        :return: The hostname of this TaskSpecContainerSpec.
        :rtype: str
        """
        return self._hostname

    @hostname.setter
    def hostname(self, hostname: str):
        """Sets the hostname of this TaskSpecContainerSpec.

        The hostname to use for the container, as a valid RFC 1123 hostname.  # noqa: E501

        :param hostname: The hostname of this TaskSpecContainerSpec.
        :type hostname: str
        """

        self._hostname = hostname

    @property
    def hosts(self) -> List[str]:
        """Gets the hosts of this TaskSpecContainerSpec.

        A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]   # noqa: E501

        :return: The hosts of this TaskSpecContainerSpec.
        :rtype: List[str]
        """
        return self._hosts

    @hosts.setter
    def hosts(self, hosts: List[str]):
        """Sets the hosts of this TaskSpecContainerSpec.

        A list of hostname/IP mappings to add to the container's `hosts` file. The format of extra hosts is specified in the [hosts(5)](http://man7.org/linux/man-pages/man5/hosts.5.html) man page:      IP_address canonical_hostname [aliases...]   # noqa: E501

        :param hosts: The hosts of this TaskSpecContainerSpec.
        :type hosts: List[str]
        """

        self._hosts = hosts

    @property
    def image(self) -> str:
        """Gets the image of this TaskSpecContainerSpec.

        The image name to use for the container  # noqa: E501

        :return: The image of this TaskSpecContainerSpec.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this TaskSpecContainerSpec.

        The image name to use for the container  # noqa: E501

        :param image: The image of this TaskSpecContainerSpec.
        :type image: str
        """

        self._image = image

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this TaskSpecContainerSpec.

        User-defined key/value data.  # noqa: E501

        :return: The labels of this TaskSpecContainerSpec.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this TaskSpecContainerSpec.

        User-defined key/value data.  # noqa: E501

        :param labels: The labels of this TaskSpecContainerSpec.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mounts(self) -> List[Mount]:
        """Gets the mounts of this TaskSpecContainerSpec.

        Specification for mounts to be added to containers created as part of the service.  # noqa: E501

        :return: The mounts of this TaskSpecContainerSpec.
        :rtype: List[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts: List[Mount]):
        """Sets the mounts of this TaskSpecContainerSpec.

        Specification for mounts to be added to containers created as part of the service.  # noqa: E501

        :param mounts: The mounts of this TaskSpecContainerSpec.
        :type mounts: List[Mount]
        """

        self._mounts = mounts

    @property
    def open_stdin(self) -> bool:
        """Gets the open_stdin of this TaskSpecContainerSpec.

        Open `stdin`  # noqa: E501

        :return: The open_stdin of this TaskSpecContainerSpec.
        :rtype: bool
        """
        return self._open_stdin

    @open_stdin.setter
    def open_stdin(self, open_stdin: bool):
        """Sets the open_stdin of this TaskSpecContainerSpec.

        Open `stdin`  # noqa: E501

        :param open_stdin: The open_stdin of this TaskSpecContainerSpec.
        :type open_stdin: bool
        """

        self._open_stdin = open_stdin

    @property
    def privileges(self) -> TaskSpecContainerSpecPrivileges:
        """Gets the privileges of this TaskSpecContainerSpec.


        :return: The privileges of this TaskSpecContainerSpec.
        :rtype: TaskSpecContainerSpecPrivileges
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges: TaskSpecContainerSpecPrivileges):
        """Sets the privileges of this TaskSpecContainerSpec.


        :param privileges: The privileges of this TaskSpecContainerSpec.
        :type privileges: TaskSpecContainerSpecPrivileges
        """

        self._privileges = privileges

    @property
    def read_only(self) -> bool:
        """Gets the read_only of this TaskSpecContainerSpec.

        Mount the container's root filesystem as read only.  # noqa: E501

        :return: The read_only of this TaskSpecContainerSpec.
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only: bool):
        """Sets the read_only of this TaskSpecContainerSpec.

        Mount the container's root filesystem as read only.  # noqa: E501

        :param read_only: The read_only of this TaskSpecContainerSpec.
        :type read_only: bool
        """

        self._read_only = read_only

    @property
    def secrets(self) -> List[TaskSpecContainerSpecSecretsInner]:
        """Gets the secrets of this TaskSpecContainerSpec.

        Secrets contains references to zero or more secrets that will be exposed to the service.  # noqa: E501

        :return: The secrets of this TaskSpecContainerSpec.
        :rtype: List[TaskSpecContainerSpecSecretsInner]
        """
        return self._secrets

    @secrets.setter
    def secrets(self, secrets: List[TaskSpecContainerSpecSecretsInner]):
        """Sets the secrets of this TaskSpecContainerSpec.

        Secrets contains references to zero or more secrets that will be exposed to the service.  # noqa: E501

        :param secrets: The secrets of this TaskSpecContainerSpec.
        :type secrets: List[TaskSpecContainerSpecSecretsInner]
        """

        self._secrets = secrets

    @property
    def stop_grace_period(self) -> int:
        """Gets the stop_grace_period of this TaskSpecContainerSpec.

        Amount of time to wait for the container to terminate before forcefully killing it.  # noqa: E501

        :return: The stop_grace_period of this TaskSpecContainerSpec.
        :rtype: int
        """
        return self._stop_grace_period

    @stop_grace_period.setter
    def stop_grace_period(self, stop_grace_period: int):
        """Sets the stop_grace_period of this TaskSpecContainerSpec.

        Amount of time to wait for the container to terminate before forcefully killing it.  # noqa: E501

        :param stop_grace_period: The stop_grace_period of this TaskSpecContainerSpec.
        :type stop_grace_period: int
        """

        self._stop_grace_period = stop_grace_period

    @property
    def stop_signal(self) -> str:
        """Gets the stop_signal of this TaskSpecContainerSpec.

        Signal to stop the container.  # noqa: E501

        :return: The stop_signal of this TaskSpecContainerSpec.
        :rtype: str
        """
        return self._stop_signal

    @stop_signal.setter
    def stop_signal(self, stop_signal: str):
        """Sets the stop_signal of this TaskSpecContainerSpec.

        Signal to stop the container.  # noqa: E501

        :param stop_signal: The stop_signal of this TaskSpecContainerSpec.
        :type stop_signal: str
        """

        self._stop_signal = stop_signal

    @property
    def tty(self) -> bool:
        """Gets the tty of this TaskSpecContainerSpec.

        Whether a pseudo-TTY should be allocated.  # noqa: E501

        :return: The tty of this TaskSpecContainerSpec.
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty: bool):
        """Sets the tty of this TaskSpecContainerSpec.

        Whether a pseudo-TTY should be allocated.  # noqa: E501

        :param tty: The tty of this TaskSpecContainerSpec.
        :type tty: bool
        """

        self._tty = tty

    @property
    def user(self) -> str:
        """Gets the user of this TaskSpecContainerSpec.

        The user inside the container.  # noqa: E501

        :return: The user of this TaskSpecContainerSpec.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this TaskSpecContainerSpec.

        The user inside the container.  # noqa: E501

        :param user: The user of this TaskSpecContainerSpec.
        :type user: str
        """

        self._user = user
