from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SwarmJoinRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, advertise_addr=None, data_path_addr=None, join_token=None, listen_addr=None, remote_addrs=None):  # noqa: E501
        """SwarmJoinRequest - a model defined in OpenAPI

        :param advertise_addr: The advertise_addr of this SwarmJoinRequest.  # noqa: E501
        :type advertise_addr: str
        :param data_path_addr: The data_path_addr of this SwarmJoinRequest.  # noqa: E501
        :type data_path_addr: str
        :param join_token: The join_token of this SwarmJoinRequest.  # noqa: E501
        :type join_token: str
        :param listen_addr: The listen_addr of this SwarmJoinRequest.  # noqa: E501
        :type listen_addr: str
        :param remote_addrs: The remote_addrs of this SwarmJoinRequest.  # noqa: E501
        :type remote_addrs: str
        """
        self.openapi_types = {
            'advertise_addr': str,
            'data_path_addr': str,
            'join_token': str,
            'listen_addr': str,
            'remote_addrs': str
        }

        self.attribute_map = {
            'advertise_addr': 'AdvertiseAddr',
            'data_path_addr': 'DataPathAddr',
            'join_token': 'JoinToken',
            'listen_addr': 'ListenAddr',
            'remote_addrs': 'RemoteAddrs'
        }

        self._advertise_addr = advertise_addr
        self._data_path_addr = data_path_addr
        self._join_token = join_token
        self._listen_addr = listen_addr
        self._remote_addrs = remote_addrs

    @classmethod
    def from_dict(cls, dikt) -> 'SwarmJoinRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SwarmJoin_request of this SwarmJoinRequest.  # noqa: E501
        :rtype: SwarmJoinRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def advertise_addr(self) -> str:
        """Gets the advertise_addr of this SwarmJoinRequest.

        Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.  # noqa: E501

        :return: The advertise_addr of this SwarmJoinRequest.
        :rtype: str
        """
        return self._advertise_addr

    @advertise_addr.setter
    def advertise_addr(self, advertise_addr: str):
        """Sets the advertise_addr of this SwarmJoinRequest.

        Externally reachable address advertised to other nodes. This can either be an address/port combination in the form `192.168.1.1:4567`, or an interface followed by a port number, like `eth0:4567`. If the port number is omitted, the port number from the listen address is used. If `AdvertiseAddr` is not specified, it will be automatically detected when possible.  # noqa: E501

        :param advertise_addr: The advertise_addr of this SwarmJoinRequest.
        :type advertise_addr: str
        """

        self._advertise_addr = advertise_addr

    @property
    def data_path_addr(self) -> str:
        """Gets the data_path_addr of this SwarmJoinRequest.

        Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster.   # noqa: E501

        :return: The data_path_addr of this SwarmJoinRequest.
        :rtype: str
        """
        return self._data_path_addr

    @data_path_addr.setter
    def data_path_addr(self, data_path_addr: str):
        """Sets the data_path_addr of this SwarmJoinRequest.

        Address or interface to use for data path traffic (format: `<ip|interface>`), for example,  `192.168.1.1`, or an interface, like `eth0`. If `DataPathAddr` is unspecified, the same address as `AdvertiseAddr` is used.  The `DataPathAddr` specifies the address that global scope network drivers will publish towards other nodes in order to reach the containers running on this node. Using this parameter it is possible to separate the container data traffic from the management traffic of the cluster.   # noqa: E501

        :param data_path_addr: The data_path_addr of this SwarmJoinRequest.
        :type data_path_addr: str
        """

        self._data_path_addr = data_path_addr

    @property
    def join_token(self) -> str:
        """Gets the join_token of this SwarmJoinRequest.

        Secret token for joining this swarm.  # noqa: E501

        :return: The join_token of this SwarmJoinRequest.
        :rtype: str
        """
        return self._join_token

    @join_token.setter
    def join_token(self, join_token: str):
        """Sets the join_token of this SwarmJoinRequest.

        Secret token for joining this swarm.  # noqa: E501

        :param join_token: The join_token of this SwarmJoinRequest.
        :type join_token: str
        """

        self._join_token = join_token

    @property
    def listen_addr(self) -> str:
        """Gets the listen_addr of this SwarmJoinRequest.

        Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP).  # noqa: E501

        :return: The listen_addr of this SwarmJoinRequest.
        :rtype: str
        """
        return self._listen_addr

    @listen_addr.setter
    def listen_addr(self, listen_addr: str):
        """Sets the listen_addr of this SwarmJoinRequest.

        Listen address used for inter-manager communication if the node gets promoted to manager, as well as determining the networking interface used for the VXLAN Tunnel Endpoint (VTEP).  # noqa: E501

        :param listen_addr: The listen_addr of this SwarmJoinRequest.
        :type listen_addr: str
        """

        self._listen_addr = listen_addr

    @property
    def remote_addrs(self) -> str:
        """Gets the remote_addrs of this SwarmJoinRequest.

        Addresses of manager nodes already participating in the swarm.  # noqa: E501

        :return: The remote_addrs of this SwarmJoinRequest.
        :rtype: str
        """
        return self._remote_addrs

    @remote_addrs.setter
    def remote_addrs(self, remote_addrs: str):
        """Sets the remote_addrs of this SwarmJoinRequest.

        Addresses of manager nodes already participating in the swarm.  # noqa: E501

        :param remote_addrs: The remote_addrs of this SwarmJoinRequest.
        :type remote_addrs: str
        """

        self._remote_addrs = remote_addrs
