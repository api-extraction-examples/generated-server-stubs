from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IPAM(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config=None, driver='default', options=None):  # noqa: E501
        """IPAM - a model defined in OpenAPI

        :param config: The config of this IPAM.  # noqa: E501
        :type config: List[Dict[str, str]]
        :param driver: The driver of this IPAM.  # noqa: E501
        :type driver: str
        :param options: The options of this IPAM.  # noqa: E501
        :type options: List[Dict[str, str]]
        """
        self.openapi_types = {
            'config': List[Dict[str, str]],
            'driver': str,
            'options': List[Dict[str, str]]
        }

        self.attribute_map = {
            'config': 'Config',
            'driver': 'Driver',
            'options': 'Options'
        }

        self._config = config
        self._driver = driver
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'IPAM':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IPAM of this IPAM.  # noqa: E501
        :rtype: IPAM
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self) -> List[Dict[str, str]]:
        """Gets the config of this IPAM.

        List of IPAM configuration options, specified as a map: `{\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>}`  # noqa: E501

        :return: The config of this IPAM.
        :rtype: List[Dict[str, str]]
        """
        return self._config

    @config.setter
    def config(self, config: List[Dict[str, str]]):
        """Sets the config of this IPAM.

        List of IPAM configuration options, specified as a map: `{\"Subnet\": <CIDR>, \"IPRange\": <CIDR>, \"Gateway\": <IP address>, \"AuxAddress\": <device_name:IP address>}`  # noqa: E501

        :param config: The config of this IPAM.
        :type config: List[Dict[str, str]]
        """

        self._config = config

    @property
    def driver(self) -> str:
        """Gets the driver of this IPAM.

        Name of the IPAM driver to use.  # noqa: E501

        :return: The driver of this IPAM.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this IPAM.

        Name of the IPAM driver to use.  # noqa: E501

        :param driver: The driver of this IPAM.
        :type driver: str
        """

        self._driver = driver

    @property
    def options(self) -> List[Dict[str, str]]:
        """Gets the options of this IPAM.

        Driver-specific options, specified as a map.  # noqa: E501

        :return: The options of this IPAM.
        :rtype: List[Dict[str, str]]
        """
        return self._options

    @options.setter
    def options(self, options: List[Dict[str, str]]):
        """Sets the options of this IPAM.

        Driver-specific options, specified as a map.  # noqa: E501

        :param options: The options of this IPAM.
        :type options: List[Dict[str, str]]
        """

        self._options = options
