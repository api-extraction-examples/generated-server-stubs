from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerChanges200ResponseInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, kind=None, path=None):  # noqa: E501
        """ContainerChanges200ResponseInner - a model defined in OpenAPI

        :param kind: The kind of this ContainerChanges200ResponseInner.  # noqa: E501
        :type kind: int
        :param path: The path of this ContainerChanges200ResponseInner.  # noqa: E501
        :type path: str
        """
        self.openapi_types = {
            'kind': int,
            'path': str
        }

        self.attribute_map = {
            'kind': 'Kind',
            'path': 'Path'
        }

        self._kind = kind
        self._path = path

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerChanges200ResponseInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerChanges_200_response_inner of this ContainerChanges200ResponseInner.  # noqa: E501
        :rtype: ContainerChanges200ResponseInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def kind(self) -> int:
        """Gets the kind of this ContainerChanges200ResponseInner.

        Kind of change  # noqa: E501

        :return: The kind of this ContainerChanges200ResponseInner.
        :rtype: int
        """
        return self._kind

    @kind.setter
    def kind(self, kind: int):
        """Sets the kind of this ContainerChanges200ResponseInner.

        Kind of change  # noqa: E501

        :param kind: The kind of this ContainerChanges200ResponseInner.
        :type kind: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if kind not in allowed_values:
            raise ValueError(
                "Invalid value for `kind` ({0}), must be one of {1}"
                .format(kind, allowed_values)
            )

        self._kind = kind

    @property
    def path(self) -> str:
        """Gets the path of this ContainerChanges200ResponseInner.

        Path to file that has changed  # noqa: E501

        :return: The path of this ContainerChanges200ResponseInner.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this ContainerChanges200ResponseInner.

        Path to file that has changed  # noqa: E501

        :param path: The path of this ContainerChanges200ResponseInner.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path
