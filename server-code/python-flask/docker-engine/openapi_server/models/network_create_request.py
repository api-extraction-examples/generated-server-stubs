from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.ipam import IPAM
from openapi_server import util

from openapi_server.models.ipam import IPAM  # noqa: E501

class NetworkCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attachable=None, check_duplicate=None, driver='bridge', enable_ipv6=None, ipam=None, ingress=None, internal=None, labels=None, name=None, options=None):  # noqa: E501
        """NetworkCreateRequest - a model defined in OpenAPI

        :param attachable: The attachable of this NetworkCreateRequest.  # noqa: E501
        :type attachable: bool
        :param check_duplicate: The check_duplicate of this NetworkCreateRequest.  # noqa: E501
        :type check_duplicate: bool
        :param driver: The driver of this NetworkCreateRequest.  # noqa: E501
        :type driver: str
        :param enable_ipv6: The enable_ipv6 of this NetworkCreateRequest.  # noqa: E501
        :type enable_ipv6: bool
        :param ipam: The ipam of this NetworkCreateRequest.  # noqa: E501
        :type ipam: IPAM
        :param ingress: The ingress of this NetworkCreateRequest.  # noqa: E501
        :type ingress: bool
        :param internal: The internal of this NetworkCreateRequest.  # noqa: E501
        :type internal: bool
        :param labels: The labels of this NetworkCreateRequest.  # noqa: E501
        :type labels: Dict[str, str]
        :param name: The name of this NetworkCreateRequest.  # noqa: E501
        :type name: str
        :param options: The options of this NetworkCreateRequest.  # noqa: E501
        :type options: Dict[str, str]
        """
        self.openapi_types = {
            'attachable': bool,
            'check_duplicate': bool,
            'driver': str,
            'enable_ipv6': bool,
            'ipam': IPAM,
            'ingress': bool,
            'internal': bool,
            'labels': Dict[str, str],
            'name': str,
            'options': Dict[str, str]
        }

        self.attribute_map = {
            'attachable': 'Attachable',
            'check_duplicate': 'CheckDuplicate',
            'driver': 'Driver',
            'enable_ipv6': 'EnableIPv6',
            'ipam': 'IPAM',
            'ingress': 'Ingress',
            'internal': 'Internal',
            'labels': 'Labels',
            'name': 'Name',
            'options': 'Options'
        }

        self._attachable = attachable
        self._check_duplicate = check_duplicate
        self._driver = driver
        self._enable_ipv6 = enable_ipv6
        self._ipam = ipam
        self._ingress = ingress
        self._internal = internal
        self._labels = labels
        self._name = name
        self._options = options

    @classmethod
    def from_dict(cls, dikt) -> 'NetworkCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NetworkCreate_request of this NetworkCreateRequest.  # noqa: E501
        :rtype: NetworkCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attachable(self) -> bool:
        """Gets the attachable of this NetworkCreateRequest.

        Globally scoped network is manually attachable by regular containers from workers in swarm mode.  # noqa: E501

        :return: The attachable of this NetworkCreateRequest.
        :rtype: bool
        """
        return self._attachable

    @attachable.setter
    def attachable(self, attachable: bool):
        """Sets the attachable of this NetworkCreateRequest.

        Globally scoped network is manually attachable by regular containers from workers in swarm mode.  # noqa: E501

        :param attachable: The attachable of this NetworkCreateRequest.
        :type attachable: bool
        """

        self._attachable = attachable

    @property
    def check_duplicate(self) -> bool:
        """Gets the check_duplicate of this NetworkCreateRequest.

        Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions.  # noqa: E501

        :return: The check_duplicate of this NetworkCreateRequest.
        :rtype: bool
        """
        return self._check_duplicate

    @check_duplicate.setter
    def check_duplicate(self, check_duplicate: bool):
        """Sets the check_duplicate of this NetworkCreateRequest.

        Check for networks with duplicate names. Since Network is primarily keyed based on a random ID and not on the name, and network name is strictly a user-friendly alias to the network which is uniquely identified using ID, there is no guaranteed way to check for duplicates. CheckDuplicate is there to provide a best effort checking of any networks which has the same name but it is not guaranteed to catch all name collisions.  # noqa: E501

        :param check_duplicate: The check_duplicate of this NetworkCreateRequest.
        :type check_duplicate: bool
        """

        self._check_duplicate = check_duplicate

    @property
    def driver(self) -> str:
        """Gets the driver of this NetworkCreateRequest.

        Name of the network driver plugin to use.  # noqa: E501

        :return: The driver of this NetworkCreateRequest.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this NetworkCreateRequest.

        Name of the network driver plugin to use.  # noqa: E501

        :param driver: The driver of this NetworkCreateRequest.
        :type driver: str
        """

        self._driver = driver

    @property
    def enable_ipv6(self) -> bool:
        """Gets the enable_ipv6 of this NetworkCreateRequest.

        Enable IPv6 on the network.  # noqa: E501

        :return: The enable_ipv6 of this NetworkCreateRequest.
        :rtype: bool
        """
        return self._enable_ipv6

    @enable_ipv6.setter
    def enable_ipv6(self, enable_ipv6: bool):
        """Sets the enable_ipv6 of this NetworkCreateRequest.

        Enable IPv6 on the network.  # noqa: E501

        :param enable_ipv6: The enable_ipv6 of this NetworkCreateRequest.
        :type enable_ipv6: bool
        """

        self._enable_ipv6 = enable_ipv6

    @property
    def ipam(self) -> IPAM:
        """Gets the ipam of this NetworkCreateRequest.


        :return: The ipam of this NetworkCreateRequest.
        :rtype: IPAM
        """
        return self._ipam

    @ipam.setter
    def ipam(self, ipam: IPAM):
        """Sets the ipam of this NetworkCreateRequest.


        :param ipam: The ipam of this NetworkCreateRequest.
        :type ipam: IPAM
        """

        self._ipam = ipam

    @property
    def ingress(self) -> bool:
        """Gets the ingress of this NetworkCreateRequest.

        Ingress network is the network which provides the routing-mesh in swarm mode.  # noqa: E501

        :return: The ingress of this NetworkCreateRequest.
        :rtype: bool
        """
        return self._ingress

    @ingress.setter
    def ingress(self, ingress: bool):
        """Sets the ingress of this NetworkCreateRequest.

        Ingress network is the network which provides the routing-mesh in swarm mode.  # noqa: E501

        :param ingress: The ingress of this NetworkCreateRequest.
        :type ingress: bool
        """

        self._ingress = ingress

    @property
    def internal(self) -> bool:
        """Gets the internal of this NetworkCreateRequest.

        Restrict external access to the network.  # noqa: E501

        :return: The internal of this NetworkCreateRequest.
        :rtype: bool
        """
        return self._internal

    @internal.setter
    def internal(self, internal: bool):
        """Sets the internal of this NetworkCreateRequest.

        Restrict external access to the network.  # noqa: E501

        :param internal: The internal of this NetworkCreateRequest.
        :type internal: bool
        """

        self._internal = internal

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this NetworkCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this NetworkCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this NetworkCreateRequest.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this NetworkCreateRequest.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self) -> str:
        """Gets the name of this NetworkCreateRequest.

        The network's name.  # noqa: E501

        :return: The name of this NetworkCreateRequest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NetworkCreateRequest.

        The network's name.  # noqa: E501

        :param name: The name of this NetworkCreateRequest.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def options(self) -> Dict[str, str]:
        """Gets the options of this NetworkCreateRequest.

        Network specific options to be used by the drivers.  # noqa: E501

        :return: The options of this NetworkCreateRequest.
        :rtype: Dict[str, str]
        """
        return self._options

    @options.setter
    def options(self, options: Dict[str, str]):
        """Sets the options of this NetworkCreateRequest.

        Network specific options to be used by the drivers.  # noqa: E501

        :param options: The options of this NetworkCreateRequest.
        :type options: Dict[str, str]
        """

        self._options = options
