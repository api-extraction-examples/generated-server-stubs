from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.endpoint_ipam_config import EndpointIPAMConfig
from openapi_server import util

from openapi_server.models.endpoint_ipam_config import EndpointIPAMConfig  # noqa: E501

class EndpointSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, aliases=None, driver_opts=None, endpoint_id=None, gateway=None, global_ipv6_address=None, global_ipv6_prefix_len=None, ipam_config=None, ip_address=None, ip_prefix_len=None, ipv6_gateway=None, links=None, mac_address=None, network_id=None):  # noqa: E501
        """EndpointSettings - a model defined in OpenAPI

        :param aliases: The aliases of this EndpointSettings.  # noqa: E501
        :type aliases: List[str]
        :param driver_opts: The driver_opts of this EndpointSettings.  # noqa: E501
        :type driver_opts: Dict[str, str]
        :param endpoint_id: The endpoint_id of this EndpointSettings.  # noqa: E501
        :type endpoint_id: str
        :param gateway: The gateway of this EndpointSettings.  # noqa: E501
        :type gateway: str
        :param global_ipv6_address: The global_ipv6_address of this EndpointSettings.  # noqa: E501
        :type global_ipv6_address: str
        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this EndpointSettings.  # noqa: E501
        :type global_ipv6_prefix_len: int
        :param ipam_config: The ipam_config of this EndpointSettings.  # noqa: E501
        :type ipam_config: EndpointIPAMConfig
        :param ip_address: The ip_address of this EndpointSettings.  # noqa: E501
        :type ip_address: str
        :param ip_prefix_len: The ip_prefix_len of this EndpointSettings.  # noqa: E501
        :type ip_prefix_len: int
        :param ipv6_gateway: The ipv6_gateway of this EndpointSettings.  # noqa: E501
        :type ipv6_gateway: str
        :param links: The links of this EndpointSettings.  # noqa: E501
        :type links: List[str]
        :param mac_address: The mac_address of this EndpointSettings.  # noqa: E501
        :type mac_address: str
        :param network_id: The network_id of this EndpointSettings.  # noqa: E501
        :type network_id: str
        """
        self.openapi_types = {
            'aliases': List[str],
            'driver_opts': Dict[str, str],
            'endpoint_id': str,
            'gateway': str,
            'global_ipv6_address': str,
            'global_ipv6_prefix_len': int,
            'ipam_config': EndpointIPAMConfig,
            'ip_address': str,
            'ip_prefix_len': int,
            'ipv6_gateway': str,
            'links': List[str],
            'mac_address': str,
            'network_id': str
        }

        self.attribute_map = {
            'aliases': 'Aliases',
            'driver_opts': 'DriverOpts',
            'endpoint_id': 'EndpointID',
            'gateway': 'Gateway',
            'global_ipv6_address': 'GlobalIPv6Address',
            'global_ipv6_prefix_len': 'GlobalIPv6PrefixLen',
            'ipam_config': 'IPAMConfig',
            'ip_address': 'IPAddress',
            'ip_prefix_len': 'IPPrefixLen',
            'ipv6_gateway': 'IPv6Gateway',
            'links': 'Links',
            'mac_address': 'MacAddress',
            'network_id': 'NetworkID'
        }

        self._aliases = aliases
        self._driver_opts = driver_opts
        self._endpoint_id = endpoint_id
        self._gateway = gateway
        self._global_ipv6_address = global_ipv6_address
        self._global_ipv6_prefix_len = global_ipv6_prefix_len
        self._ipam_config = ipam_config
        self._ip_address = ip_address
        self._ip_prefix_len = ip_prefix_len
        self._ipv6_gateway = ipv6_gateway
        self._links = links
        self._mac_address = mac_address
        self._network_id = network_id

    @classmethod
    def from_dict(cls, dikt) -> 'EndpointSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EndpointSettings of this EndpointSettings.  # noqa: E501
        :rtype: EndpointSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def aliases(self) -> List[str]:
        """Gets the aliases of this EndpointSettings.


        :return: The aliases of this EndpointSettings.
        :rtype: List[str]
        """
        return self._aliases

    @aliases.setter
    def aliases(self, aliases: List[str]):
        """Sets the aliases of this EndpointSettings.


        :param aliases: The aliases of this EndpointSettings.
        :type aliases: List[str]
        """

        self._aliases = aliases

    @property
    def driver_opts(self) -> Dict[str, str]:
        """Gets the driver_opts of this EndpointSettings.

        DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.   # noqa: E501

        :return: The driver_opts of this EndpointSettings.
        :rtype: Dict[str, str]
        """
        return self._driver_opts

    @driver_opts.setter
    def driver_opts(self, driver_opts: Dict[str, str]):
        """Sets the driver_opts of this EndpointSettings.

        DriverOpts is a mapping of driver options and values. These options are passed directly to the driver and are driver specific.   # noqa: E501

        :param driver_opts: The driver_opts of this EndpointSettings.
        :type driver_opts: Dict[str, str]
        """

        self._driver_opts = driver_opts

    @property
    def endpoint_id(self) -> str:
        """Gets the endpoint_id of this EndpointSettings.

        Unique ID for the service endpoint in a Sandbox.   # noqa: E501

        :return: The endpoint_id of this EndpointSettings.
        :rtype: str
        """
        return self._endpoint_id

    @endpoint_id.setter
    def endpoint_id(self, endpoint_id: str):
        """Sets the endpoint_id of this EndpointSettings.

        Unique ID for the service endpoint in a Sandbox.   # noqa: E501

        :param endpoint_id: The endpoint_id of this EndpointSettings.
        :type endpoint_id: str
        """

        self._endpoint_id = endpoint_id

    @property
    def gateway(self) -> str:
        """Gets the gateway of this EndpointSettings.

        Gateway address for this network.   # noqa: E501

        :return: The gateway of this EndpointSettings.
        :rtype: str
        """
        return self._gateway

    @gateway.setter
    def gateway(self, gateway: str):
        """Sets the gateway of this EndpointSettings.

        Gateway address for this network.   # noqa: E501

        :param gateway: The gateway of this EndpointSettings.
        :type gateway: str
        """

        self._gateway = gateway

    @property
    def global_ipv6_address(self) -> str:
        """Gets the global_ipv6_address of this EndpointSettings.

        Global IPv6 address.   # noqa: E501

        :return: The global_ipv6_address of this EndpointSettings.
        :rtype: str
        """
        return self._global_ipv6_address

    @global_ipv6_address.setter
    def global_ipv6_address(self, global_ipv6_address: str):
        """Sets the global_ipv6_address of this EndpointSettings.

        Global IPv6 address.   # noqa: E501

        :param global_ipv6_address: The global_ipv6_address of this EndpointSettings.
        :type global_ipv6_address: str
        """

        self._global_ipv6_address = global_ipv6_address

    @property
    def global_ipv6_prefix_len(self) -> int:
        """Gets the global_ipv6_prefix_len of this EndpointSettings.

        Mask length of the global IPv6 address.   # noqa: E501

        :return: The global_ipv6_prefix_len of this EndpointSettings.
        :rtype: int
        """
        return self._global_ipv6_prefix_len

    @global_ipv6_prefix_len.setter
    def global_ipv6_prefix_len(self, global_ipv6_prefix_len: int):
        """Sets the global_ipv6_prefix_len of this EndpointSettings.

        Mask length of the global IPv6 address.   # noqa: E501

        :param global_ipv6_prefix_len: The global_ipv6_prefix_len of this EndpointSettings.
        :type global_ipv6_prefix_len: int
        """

        self._global_ipv6_prefix_len = global_ipv6_prefix_len

    @property
    def ipam_config(self) -> EndpointIPAMConfig:
        """Gets the ipam_config of this EndpointSettings.


        :return: The ipam_config of this EndpointSettings.
        :rtype: EndpointIPAMConfig
        """
        return self._ipam_config

    @ipam_config.setter
    def ipam_config(self, ipam_config: EndpointIPAMConfig):
        """Sets the ipam_config of this EndpointSettings.


        :param ipam_config: The ipam_config of this EndpointSettings.
        :type ipam_config: EndpointIPAMConfig
        """

        self._ipam_config = ipam_config

    @property
    def ip_address(self) -> str:
        """Gets the ip_address of this EndpointSettings.

        IPv4 address.   # noqa: E501

        :return: The ip_address of this EndpointSettings.
        :rtype: str
        """
        return self._ip_address

    @ip_address.setter
    def ip_address(self, ip_address: str):
        """Sets the ip_address of this EndpointSettings.

        IPv4 address.   # noqa: E501

        :param ip_address: The ip_address of this EndpointSettings.
        :type ip_address: str
        """

        self._ip_address = ip_address

    @property
    def ip_prefix_len(self) -> int:
        """Gets the ip_prefix_len of this EndpointSettings.

        Mask length of the IPv4 address.   # noqa: E501

        :return: The ip_prefix_len of this EndpointSettings.
        :rtype: int
        """
        return self._ip_prefix_len

    @ip_prefix_len.setter
    def ip_prefix_len(self, ip_prefix_len: int):
        """Sets the ip_prefix_len of this EndpointSettings.

        Mask length of the IPv4 address.   # noqa: E501

        :param ip_prefix_len: The ip_prefix_len of this EndpointSettings.
        :type ip_prefix_len: int
        """

        self._ip_prefix_len = ip_prefix_len

    @property
    def ipv6_gateway(self) -> str:
        """Gets the ipv6_gateway of this EndpointSettings.

        IPv6 gateway address.   # noqa: E501

        :return: The ipv6_gateway of this EndpointSettings.
        :rtype: str
        """
        return self._ipv6_gateway

    @ipv6_gateway.setter
    def ipv6_gateway(self, ipv6_gateway: str):
        """Sets the ipv6_gateway of this EndpointSettings.

        IPv6 gateway address.   # noqa: E501

        :param ipv6_gateway: The ipv6_gateway of this EndpointSettings.
        :type ipv6_gateway: str
        """

        self._ipv6_gateway = ipv6_gateway

    @property
    def links(self) -> List[str]:
        """Gets the links of this EndpointSettings.


        :return: The links of this EndpointSettings.
        :rtype: List[str]
        """
        return self._links

    @links.setter
    def links(self, links: List[str]):
        """Sets the links of this EndpointSettings.


        :param links: The links of this EndpointSettings.
        :type links: List[str]
        """

        self._links = links

    @property
    def mac_address(self) -> str:
        """Gets the mac_address of this EndpointSettings.

        MAC address for the endpoint on this network.   # noqa: E501

        :return: The mac_address of this EndpointSettings.
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address: str):
        """Sets the mac_address of this EndpointSettings.

        MAC address for the endpoint on this network.   # noqa: E501

        :param mac_address: The mac_address of this EndpointSettings.
        :type mac_address: str
        """

        self._mac_address = mac_address

    @property
    def network_id(self) -> str:
        """Gets the network_id of this EndpointSettings.

        Unique ID of the network.   # noqa: E501

        :return: The network_id of this EndpointSettings.
        :rtype: str
        """
        return self._network_id

    @network_id.setter
    def network_id(self, network_id: str):
        """Sets the network_id of this EndpointSettings.

        Unique ID of the network.   # noqa: E501

        :param network_id: The network_id of this EndpointSettings.
        :type network_id: str
        """

        self._network_id = network_id
