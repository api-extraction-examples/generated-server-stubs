from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.container_summary_inner_host_config import ContainerSummaryInnerHostConfig
from openapi_server.models.container_summary_inner_network_settings import ContainerSummaryInnerNetworkSettings
from openapi_server.models.mount import Mount
from openapi_server.models.port import Port
from openapi_server import util

from openapi_server.models.container_summary_inner_host_config import ContainerSummaryInnerHostConfig  # noqa: E501
from openapi_server.models.container_summary_inner_network_settings import ContainerSummaryInnerNetworkSettings  # noqa: E501
from openapi_server.models.mount import Mount  # noqa: E501
from openapi_server.models.port import Port  # noqa: E501

class ContainerSummaryInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, command=None, created=None, host_config=None, id=None, image=None, image_id=None, labels=None, mounts=None, names=None, network_settings=None, ports=None, size_root_fs=None, size_rw=None, state=None, status=None):  # noqa: E501
        """ContainerSummaryInner - a model defined in OpenAPI

        :param command: The command of this ContainerSummaryInner.  # noqa: E501
        :type command: str
        :param created: The created of this ContainerSummaryInner.  # noqa: E501
        :type created: int
        :param host_config: The host_config of this ContainerSummaryInner.  # noqa: E501
        :type host_config: ContainerSummaryInnerHostConfig
        :param id: The id of this ContainerSummaryInner.  # noqa: E501
        :type id: str
        :param image: The image of this ContainerSummaryInner.  # noqa: E501
        :type image: str
        :param image_id: The image_id of this ContainerSummaryInner.  # noqa: E501
        :type image_id: str
        :param labels: The labels of this ContainerSummaryInner.  # noqa: E501
        :type labels: Dict[str, str]
        :param mounts: The mounts of this ContainerSummaryInner.  # noqa: E501
        :type mounts: List[Mount]
        :param names: The names of this ContainerSummaryInner.  # noqa: E501
        :type names: List[str]
        :param network_settings: The network_settings of this ContainerSummaryInner.  # noqa: E501
        :type network_settings: ContainerSummaryInnerNetworkSettings
        :param ports: The ports of this ContainerSummaryInner.  # noqa: E501
        :type ports: List[Port]
        :param size_root_fs: The size_root_fs of this ContainerSummaryInner.  # noqa: E501
        :type size_root_fs: int
        :param size_rw: The size_rw of this ContainerSummaryInner.  # noqa: E501
        :type size_rw: int
        :param state: The state of this ContainerSummaryInner.  # noqa: E501
        :type state: str
        :param status: The status of this ContainerSummaryInner.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'command': str,
            'created': int,
            'host_config': ContainerSummaryInnerHostConfig,
            'id': str,
            'image': str,
            'image_id': str,
            'labels': Dict[str, str],
            'mounts': List[Mount],
            'names': List[str],
            'network_settings': ContainerSummaryInnerNetworkSettings,
            'ports': List[Port],
            'size_root_fs': int,
            'size_rw': int,
            'state': str,
            'status': str
        }

        self.attribute_map = {
            'command': 'Command',
            'created': 'Created',
            'host_config': 'HostConfig',
            'id': 'Id',
            'image': 'Image',
            'image_id': 'ImageID',
            'labels': 'Labels',
            'mounts': 'Mounts',
            'names': 'Names',
            'network_settings': 'NetworkSettings',
            'ports': 'Ports',
            'size_root_fs': 'SizeRootFs',
            'size_rw': 'SizeRw',
            'state': 'State',
            'status': 'Status'
        }

        self._command = command
        self._created = created
        self._host_config = host_config
        self._id = id
        self._image = image
        self._image_id = image_id
        self._labels = labels
        self._mounts = mounts
        self._names = names
        self._network_settings = network_settings
        self._ports = ports
        self._size_root_fs = size_root_fs
        self._size_rw = size_rw
        self._state = state
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerSummaryInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerSummary_inner of this ContainerSummaryInner.  # noqa: E501
        :rtype: ContainerSummaryInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def command(self) -> str:
        """Gets the command of this ContainerSummaryInner.

        Command to run when starting the container  # noqa: E501

        :return: The command of this ContainerSummaryInner.
        :rtype: str
        """
        return self._command

    @command.setter
    def command(self, command: str):
        """Sets the command of this ContainerSummaryInner.

        Command to run when starting the container  # noqa: E501

        :param command: The command of this ContainerSummaryInner.
        :type command: str
        """

        self._command = command

    @property
    def created(self) -> int:
        """Gets the created of this ContainerSummaryInner.

        When the container was created  # noqa: E501

        :return: The created of this ContainerSummaryInner.
        :rtype: int
        """
        return self._created

    @created.setter
    def created(self, created: int):
        """Sets the created of this ContainerSummaryInner.

        When the container was created  # noqa: E501

        :param created: The created of this ContainerSummaryInner.
        :type created: int
        """

        self._created = created

    @property
    def host_config(self) -> ContainerSummaryInnerHostConfig:
        """Gets the host_config of this ContainerSummaryInner.


        :return: The host_config of this ContainerSummaryInner.
        :rtype: ContainerSummaryInnerHostConfig
        """
        return self._host_config

    @host_config.setter
    def host_config(self, host_config: ContainerSummaryInnerHostConfig):
        """Sets the host_config of this ContainerSummaryInner.


        :param host_config: The host_config of this ContainerSummaryInner.
        :type host_config: ContainerSummaryInnerHostConfig
        """

        self._host_config = host_config

    @property
    def id(self) -> str:
        """Gets the id of this ContainerSummaryInner.

        The ID of this container  # noqa: E501

        :return: The id of this ContainerSummaryInner.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ContainerSummaryInner.

        The ID of this container  # noqa: E501

        :param id: The id of this ContainerSummaryInner.
        :type id: str
        """

        self._id = id

    @property
    def image(self) -> str:
        """Gets the image of this ContainerSummaryInner.

        The name of the image used when creating this container  # noqa: E501

        :return: The image of this ContainerSummaryInner.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this ContainerSummaryInner.

        The name of the image used when creating this container  # noqa: E501

        :param image: The image of this ContainerSummaryInner.
        :type image: str
        """

        self._image = image

    @property
    def image_id(self) -> str:
        """Gets the image_id of this ContainerSummaryInner.

        The ID of the image that this container was created from  # noqa: E501

        :return: The image_id of this ContainerSummaryInner.
        :rtype: str
        """
        return self._image_id

    @image_id.setter
    def image_id(self, image_id: str):
        """Sets the image_id of this ContainerSummaryInner.

        The ID of the image that this container was created from  # noqa: E501

        :param image_id: The image_id of this ContainerSummaryInner.
        :type image_id: str
        """

        self._image_id = image_id

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this ContainerSummaryInner.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this ContainerSummaryInner.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this ContainerSummaryInner.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this ContainerSummaryInner.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def mounts(self) -> List[Mount]:
        """Gets the mounts of this ContainerSummaryInner.


        :return: The mounts of this ContainerSummaryInner.
        :rtype: List[Mount]
        """
        return self._mounts

    @mounts.setter
    def mounts(self, mounts: List[Mount]):
        """Sets the mounts of this ContainerSummaryInner.


        :param mounts: The mounts of this ContainerSummaryInner.
        :type mounts: List[Mount]
        """

        self._mounts = mounts

    @property
    def names(self) -> List[str]:
        """Gets the names of this ContainerSummaryInner.

        The names that this container has been given  # noqa: E501

        :return: The names of this ContainerSummaryInner.
        :rtype: List[str]
        """
        return self._names

    @names.setter
    def names(self, names: List[str]):
        """Sets the names of this ContainerSummaryInner.

        The names that this container has been given  # noqa: E501

        :param names: The names of this ContainerSummaryInner.
        :type names: List[str]
        """

        self._names = names

    @property
    def network_settings(self) -> ContainerSummaryInnerNetworkSettings:
        """Gets the network_settings of this ContainerSummaryInner.


        :return: The network_settings of this ContainerSummaryInner.
        :rtype: ContainerSummaryInnerNetworkSettings
        """
        return self._network_settings

    @network_settings.setter
    def network_settings(self, network_settings: ContainerSummaryInnerNetworkSettings):
        """Sets the network_settings of this ContainerSummaryInner.


        :param network_settings: The network_settings of this ContainerSummaryInner.
        :type network_settings: ContainerSummaryInnerNetworkSettings
        """

        self._network_settings = network_settings

    @property
    def ports(self) -> List[Port]:
        """Gets the ports of this ContainerSummaryInner.

        The ports exposed by this container  # noqa: E501

        :return: The ports of this ContainerSummaryInner.
        :rtype: List[Port]
        """
        return self._ports

    @ports.setter
    def ports(self, ports: List[Port]):
        """Sets the ports of this ContainerSummaryInner.

        The ports exposed by this container  # noqa: E501

        :param ports: The ports of this ContainerSummaryInner.
        :type ports: List[Port]
        """

        self._ports = ports

    @property
    def size_root_fs(self) -> int:
        """Gets the size_root_fs of this ContainerSummaryInner.

        The total size of all the files in this container  # noqa: E501

        :return: The size_root_fs of this ContainerSummaryInner.
        :rtype: int
        """
        return self._size_root_fs

    @size_root_fs.setter
    def size_root_fs(self, size_root_fs: int):
        """Sets the size_root_fs of this ContainerSummaryInner.

        The total size of all the files in this container  # noqa: E501

        :param size_root_fs: The size_root_fs of this ContainerSummaryInner.
        :type size_root_fs: int
        """

        self._size_root_fs = size_root_fs

    @property
    def size_rw(self) -> int:
        """Gets the size_rw of this ContainerSummaryInner.

        The size of files that have been created or changed by this container  # noqa: E501

        :return: The size_rw of this ContainerSummaryInner.
        :rtype: int
        """
        return self._size_rw

    @size_rw.setter
    def size_rw(self, size_rw: int):
        """Sets the size_rw of this ContainerSummaryInner.

        The size of files that have been created or changed by this container  # noqa: E501

        :param size_rw: The size_rw of this ContainerSummaryInner.
        :type size_rw: int
        """

        self._size_rw = size_rw

    @property
    def state(self) -> str:
        """Gets the state of this ContainerSummaryInner.

        The state of this container (e.g. `Exited`)  # noqa: E501

        :return: The state of this ContainerSummaryInner.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this ContainerSummaryInner.

        The state of this container (e.g. `Exited`)  # noqa: E501

        :param state: The state of this ContainerSummaryInner.
        :type state: str
        """

        self._state = state

    @property
    def status(self) -> str:
        """Gets the status of this ContainerSummaryInner.

        Additional human-readable status of this container (e.g. `Exit 0`)  # noqa: E501

        :return: The status of this ContainerSummaryInner.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ContainerSummaryInner.

        Additional human-readable status of this container (e.g. `Exit 0`)  # noqa: E501

        :param status: The status of this ContainerSummaryInner.
        :type status: str
        """

        self._status = status
