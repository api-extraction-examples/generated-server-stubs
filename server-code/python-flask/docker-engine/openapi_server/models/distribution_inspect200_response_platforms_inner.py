from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributionInspect200ResponsePlatformsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture=None, features=None, os=None, os_features=None, os_version=None, variant=None):  # noqa: E501
        """DistributionInspect200ResponsePlatformsInner - a model defined in OpenAPI

        :param architecture: The architecture of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type architecture: str
        :param features: The features of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type features: List[str]
        :param os: The os of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type os: str
        :param os_features: The os_features of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type os_features: List[str]
        :param os_version: The os_version of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type os_version: str
        :param variant: The variant of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :type variant: str
        """
        self.openapi_types = {
            'architecture': str,
            'features': List[str],
            'os': str,
            'os_features': List[str],
            'os_version': str,
            'variant': str
        }

        self.attribute_map = {
            'architecture': 'Architecture',
            'features': 'Features',
            'os': 'OS',
            'os_features': 'OSFeatures',
            'os_version': 'OSVersion',
            'variant': 'Variant'
        }

        self._architecture = architecture
        self._features = features
        self._os = os
        self._os_features = os_features
        self._os_version = os_version
        self._variant = variant

    @classmethod
    def from_dict(cls, dikt) -> 'DistributionInspect200ResponsePlatformsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DistributionInspect_200_response_Platforms_inner of this DistributionInspect200ResponsePlatformsInner.  # noqa: E501
        :rtype: DistributionInspect200ResponsePlatformsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self) -> str:
        """Gets the architecture of this DistributionInspect200ResponsePlatformsInner.


        :return: The architecture of this DistributionInspect200ResponsePlatformsInner.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture: str):
        """Sets the architecture of this DistributionInspect200ResponsePlatformsInner.


        :param architecture: The architecture of this DistributionInspect200ResponsePlatformsInner.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def features(self) -> List[str]:
        """Gets the features of this DistributionInspect200ResponsePlatformsInner.


        :return: The features of this DistributionInspect200ResponsePlatformsInner.
        :rtype: List[str]
        """
        return self._features

    @features.setter
    def features(self, features: List[str]):
        """Sets the features of this DistributionInspect200ResponsePlatformsInner.


        :param features: The features of this DistributionInspect200ResponsePlatformsInner.
        :type features: List[str]
        """

        self._features = features

    @property
    def os(self) -> str:
        """Gets the os of this DistributionInspect200ResponsePlatformsInner.


        :return: The os of this DistributionInspect200ResponsePlatformsInner.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os: str):
        """Sets the os of this DistributionInspect200ResponsePlatformsInner.


        :param os: The os of this DistributionInspect200ResponsePlatformsInner.
        :type os: str
        """

        self._os = os

    @property
    def os_features(self) -> List[str]:
        """Gets the os_features of this DistributionInspect200ResponsePlatformsInner.


        :return: The os_features of this DistributionInspect200ResponsePlatformsInner.
        :rtype: List[str]
        """
        return self._os_features

    @os_features.setter
    def os_features(self, os_features: List[str]):
        """Sets the os_features of this DistributionInspect200ResponsePlatformsInner.


        :param os_features: The os_features of this DistributionInspect200ResponsePlatformsInner.
        :type os_features: List[str]
        """

        self._os_features = os_features

    @property
    def os_version(self) -> str:
        """Gets the os_version of this DistributionInspect200ResponsePlatformsInner.


        :return: The os_version of this DistributionInspect200ResponsePlatformsInner.
        :rtype: str
        """
        return self._os_version

    @os_version.setter
    def os_version(self, os_version: str):
        """Sets the os_version of this DistributionInspect200ResponsePlatformsInner.


        :param os_version: The os_version of this DistributionInspect200ResponsePlatformsInner.
        :type os_version: str
        """

        self._os_version = os_version

    @property
    def variant(self) -> str:
        """Gets the variant of this DistributionInspect200ResponsePlatformsInner.


        :return: The variant of this DistributionInspect200ResponsePlatformsInner.
        :rtype: str
        """
        return self._variant

    @variant.setter
    def variant(self, variant: str):
        """Sets the variant of this DistributionInspect200ResponsePlatformsInner.


        :param variant: The variant of this DistributionInspect200ResponsePlatformsInner.
        :type variant: str
        """

        self._variant = variant
