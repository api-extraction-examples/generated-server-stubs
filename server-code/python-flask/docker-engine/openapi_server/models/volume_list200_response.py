from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.volume import Volume
from openapi_server import util

from openapi_server.models.volume import Volume  # noqa: E501

class VolumeList200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, volumes=None, warnings=None):  # noqa: E501
        """VolumeList200Response - a model defined in OpenAPI

        :param volumes: The volumes of this VolumeList200Response.  # noqa: E501
        :type volumes: List[Volume]
        :param warnings: The warnings of this VolumeList200Response.  # noqa: E501
        :type warnings: List[str]
        """
        self.openapi_types = {
            'volumes': List[Volume],
            'warnings': List[str]
        }

        self.attribute_map = {
            'volumes': 'Volumes',
            'warnings': 'Warnings'
        }

        self._volumes = volumes
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt) -> 'VolumeList200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VolumeList_200_response of this VolumeList200Response.  # noqa: E501
        :rtype: VolumeList200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def volumes(self) -> List[Volume]:
        """Gets the volumes of this VolumeList200Response.

        List of volumes  # noqa: E501

        :return: The volumes of this VolumeList200Response.
        :rtype: List[Volume]
        """
        return self._volumes

    @volumes.setter
    def volumes(self, volumes: List[Volume]):
        """Sets the volumes of this VolumeList200Response.

        List of volumes  # noqa: E501

        :param volumes: The volumes of this VolumeList200Response.
        :type volumes: List[Volume]
        """
        if volumes is None:
            raise ValueError("Invalid value for `volumes`, must not be `None`")  # noqa: E501

        self._volumes = volumes

    @property
    def warnings(self) -> List[str]:
        """Gets the warnings of this VolumeList200Response.

        Warnings that occurred when fetching the list of volumes  # noqa: E501

        :return: The warnings of this VolumeList200Response.
        :rtype: List[str]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings: List[str]):
        """Sets the warnings of this VolumeList200Response.

        Warnings that occurred when fetching the list of volumes  # noqa: E501

        :param warnings: The warnings of this VolumeList200Response.
        :type warnings: List[str]
        """
        if warnings is None:
            raise ValueError("Invalid value for `warnings`, must not be `None`")  # noqa: E501

        self._warnings = warnings
