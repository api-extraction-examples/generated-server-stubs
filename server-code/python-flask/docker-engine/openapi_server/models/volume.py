from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.volume_usage_data import VolumeUsageData
from openapi_server import util

from openapi_server.models.volume_usage_data import VolumeUsageData  # noqa: E501

class Volume(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_at=None, driver=None, labels=None, mountpoint=None, name=None, options=None, scope='local', status=None, usage_data=None):  # noqa: E501
        """Volume - a model defined in OpenAPI

        :param created_at: The created_at of this Volume.  # noqa: E501
        :type created_at: str
        :param driver: The driver of this Volume.  # noqa: E501
        :type driver: str
        :param labels: The labels of this Volume.  # noqa: E501
        :type labels: Dict[str, str]
        :param mountpoint: The mountpoint of this Volume.  # noqa: E501
        :type mountpoint: str
        :param name: The name of this Volume.  # noqa: E501
        :type name: str
        :param options: The options of this Volume.  # noqa: E501
        :type options: Dict[str, str]
        :param scope: The scope of this Volume.  # noqa: E501
        :type scope: str
        :param status: The status of this Volume.  # noqa: E501
        :type status: Dict[str, object]
        :param usage_data: The usage_data of this Volume.  # noqa: E501
        :type usage_data: VolumeUsageData
        """
        self.openapi_types = {
            'created_at': str,
            'driver': str,
            'labels': Dict[str, str],
            'mountpoint': str,
            'name': str,
            'options': Dict[str, str],
            'scope': str,
            'status': Dict[str, object],
            'usage_data': VolumeUsageData
        }

        self.attribute_map = {
            'created_at': 'CreatedAt',
            'driver': 'Driver',
            'labels': 'Labels',
            'mountpoint': 'Mountpoint',
            'name': 'Name',
            'options': 'Options',
            'scope': 'Scope',
            'status': 'Status',
            'usage_data': 'UsageData'
        }

        self._created_at = created_at
        self._driver = driver
        self._labels = labels
        self._mountpoint = mountpoint
        self._name = name
        self._options = options
        self._scope = scope
        self._status = status
        self._usage_data = usage_data

    @classmethod
    def from_dict(cls, dikt) -> 'Volume':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume of this Volume.  # noqa: E501
        :rtype: Volume
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_at(self) -> str:
        """Gets the created_at of this Volume.

        Date/Time the volume was created.  # noqa: E501

        :return: The created_at of this Volume.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this Volume.

        Date/Time the volume was created.  # noqa: E501

        :param created_at: The created_at of this Volume.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def driver(self) -> str:
        """Gets the driver of this Volume.

        Name of the volume driver used by the volume.  # noqa: E501

        :return: The driver of this Volume.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this Volume.

        Name of the volume driver used by the volume.  # noqa: E501

        :param driver: The driver of this Volume.
        :type driver: str
        """
        if driver is None:
            raise ValueError("Invalid value for `driver`, must not be `None`")  # noqa: E501

        self._driver = driver

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this Volume.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this Volume.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this Volume.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this Volume.
        :type labels: Dict[str, str]
        """
        if labels is None:
            raise ValueError("Invalid value for `labels`, must not be `None`")  # noqa: E501

        self._labels = labels

    @property
    def mountpoint(self) -> str:
        """Gets the mountpoint of this Volume.

        Mount path of the volume on the host.  # noqa: E501

        :return: The mountpoint of this Volume.
        :rtype: str
        """
        return self._mountpoint

    @mountpoint.setter
    def mountpoint(self, mountpoint: str):
        """Sets the mountpoint of this Volume.

        Mount path of the volume on the host.  # noqa: E501

        :param mountpoint: The mountpoint of this Volume.
        :type mountpoint: str
        """
        if mountpoint is None:
            raise ValueError("Invalid value for `mountpoint`, must not be `None`")  # noqa: E501

        self._mountpoint = mountpoint

    @property
    def name(self) -> str:
        """Gets the name of this Volume.

        Name of the volume.  # noqa: E501

        :return: The name of this Volume.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Volume.

        Name of the volume.  # noqa: E501

        :param name: The name of this Volume.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def options(self) -> Dict[str, str]:
        """Gets the options of this Volume.

        The driver specific options used when creating the volume.  # noqa: E501

        :return: The options of this Volume.
        :rtype: Dict[str, str]
        """
        return self._options

    @options.setter
    def options(self, options: Dict[str, str]):
        """Sets the options of this Volume.

        The driver specific options used when creating the volume.  # noqa: E501

        :param options: The options of this Volume.
        :type options: Dict[str, str]
        """
        if options is None:
            raise ValueError("Invalid value for `options`, must not be `None`")  # noqa: E501

        self._options = options

    @property
    def scope(self) -> str:
        """Gets the scope of this Volume.

        The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.  # noqa: E501

        :return: The scope of this Volume.
        :rtype: str
        """
        return self._scope

    @scope.setter
    def scope(self, scope: str):
        """Sets the scope of this Volume.

        The level at which the volume exists. Either `global` for cluster-wide, or `local` for machine level.  # noqa: E501

        :param scope: The scope of this Volume.
        :type scope: str
        """
        allowed_values = ["local", "global"]  # noqa: E501
        if scope not in allowed_values:
            raise ValueError(
                "Invalid value for `scope` ({0}), must be one of {1}"
                .format(scope, allowed_values)
            )

        self._scope = scope

    @property
    def status(self) -> Dict[str, object]:
        """Gets the status of this Volume.

        Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.   # noqa: E501

        :return: The status of this Volume.
        :rtype: Dict[str, object]
        """
        return self._status

    @status.setter
    def status(self, status: Dict[str, object]):
        """Sets the status of this Volume.

        Low-level details about the volume, provided by the volume driver. Details are returned as a map with key/value pairs: `{\"key\":\"value\",\"key2\":\"value2\"}`.  The `Status` field is optional, and is omitted if the volume driver does not support this feature.   # noqa: E501

        :param status: The status of this Volume.
        :type status: Dict[str, object]
        """

        self._status = status

    @property
    def usage_data(self) -> VolumeUsageData:
        """Gets the usage_data of this Volume.


        :return: The usage_data of this Volume.
        :rtype: VolumeUsageData
        """
        return self._usage_data

    @usage_data.setter
    def usage_data(self, usage_data: VolumeUsageData):
        """Sets the usage_data of this Volume.


        :param usage_data: The usage_data of this Volume.
        :type usage_data: VolumeUsageData
        """

        self._usage_data = usage_data
