from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerExecRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attach_stderr=None, attach_stdin=None, attach_stdout=None, cmd=None, detach_keys=None, env=None, privileged=False, tty=None, user=None):  # noqa: E501
        """ContainerExecRequest - a model defined in OpenAPI

        :param attach_stderr: The attach_stderr of this ContainerExecRequest.  # noqa: E501
        :type attach_stderr: bool
        :param attach_stdin: The attach_stdin of this ContainerExecRequest.  # noqa: E501
        :type attach_stdin: bool
        :param attach_stdout: The attach_stdout of this ContainerExecRequest.  # noqa: E501
        :type attach_stdout: bool
        :param cmd: The cmd of this ContainerExecRequest.  # noqa: E501
        :type cmd: List[str]
        :param detach_keys: The detach_keys of this ContainerExecRequest.  # noqa: E501
        :type detach_keys: str
        :param env: The env of this ContainerExecRequest.  # noqa: E501
        :type env: List[str]
        :param privileged: The privileged of this ContainerExecRequest.  # noqa: E501
        :type privileged: bool
        :param tty: The tty of this ContainerExecRequest.  # noqa: E501
        :type tty: bool
        :param user: The user of this ContainerExecRequest.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'attach_stderr': bool,
            'attach_stdin': bool,
            'attach_stdout': bool,
            'cmd': List[str],
            'detach_keys': str,
            'env': List[str],
            'privileged': bool,
            'tty': bool,
            'user': str
        }

        self.attribute_map = {
            'attach_stderr': 'AttachStderr',
            'attach_stdin': 'AttachStdin',
            'attach_stdout': 'AttachStdout',
            'cmd': 'Cmd',
            'detach_keys': 'DetachKeys',
            'env': 'Env',
            'privileged': 'Privileged',
            'tty': 'Tty',
            'user': 'User'
        }

        self._attach_stderr = attach_stderr
        self._attach_stdin = attach_stdin
        self._attach_stdout = attach_stdout
        self._cmd = cmd
        self._detach_keys = detach_keys
        self._env = env
        self._privileged = privileged
        self._tty = tty
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerExecRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerExec_request of this ContainerExecRequest.  # noqa: E501
        :rtype: ContainerExecRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attach_stderr(self) -> bool:
        """Gets the attach_stderr of this ContainerExecRequest.

        Attach to `stderr` of the exec command.  # noqa: E501

        :return: The attach_stderr of this ContainerExecRequest.
        :rtype: bool
        """
        return self._attach_stderr

    @attach_stderr.setter
    def attach_stderr(self, attach_stderr: bool):
        """Sets the attach_stderr of this ContainerExecRequest.

        Attach to `stderr` of the exec command.  # noqa: E501

        :param attach_stderr: The attach_stderr of this ContainerExecRequest.
        :type attach_stderr: bool
        """

        self._attach_stderr = attach_stderr

    @property
    def attach_stdin(self) -> bool:
        """Gets the attach_stdin of this ContainerExecRequest.

        Attach to `stdin` of the exec command.  # noqa: E501

        :return: The attach_stdin of this ContainerExecRequest.
        :rtype: bool
        """
        return self._attach_stdin

    @attach_stdin.setter
    def attach_stdin(self, attach_stdin: bool):
        """Sets the attach_stdin of this ContainerExecRequest.

        Attach to `stdin` of the exec command.  # noqa: E501

        :param attach_stdin: The attach_stdin of this ContainerExecRequest.
        :type attach_stdin: bool
        """

        self._attach_stdin = attach_stdin

    @property
    def attach_stdout(self) -> bool:
        """Gets the attach_stdout of this ContainerExecRequest.

        Attach to `stdout` of the exec command.  # noqa: E501

        :return: The attach_stdout of this ContainerExecRequest.
        :rtype: bool
        """
        return self._attach_stdout

    @attach_stdout.setter
    def attach_stdout(self, attach_stdout: bool):
        """Sets the attach_stdout of this ContainerExecRequest.

        Attach to `stdout` of the exec command.  # noqa: E501

        :param attach_stdout: The attach_stdout of this ContainerExecRequest.
        :type attach_stdout: bool
        """

        self._attach_stdout = attach_stdout

    @property
    def cmd(self) -> List[str]:
        """Gets the cmd of this ContainerExecRequest.

        Command to run, as a string or array of strings.  # noqa: E501

        :return: The cmd of this ContainerExecRequest.
        :rtype: List[str]
        """
        return self._cmd

    @cmd.setter
    def cmd(self, cmd: List[str]):
        """Sets the cmd of this ContainerExecRequest.

        Command to run, as a string or array of strings.  # noqa: E501

        :param cmd: The cmd of this ContainerExecRequest.
        :type cmd: List[str]
        """

        self._cmd = cmd

    @property
    def detach_keys(self) -> str:
        """Gets the detach_keys of this ContainerExecRequest.

        Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.  # noqa: E501

        :return: The detach_keys of this ContainerExecRequest.
        :rtype: str
        """
        return self._detach_keys

    @detach_keys.setter
    def detach_keys(self, detach_keys: str):
        """Sets the detach_keys of this ContainerExecRequest.

        Override the key sequence for detaching a container. Format is a single character `[a-Z]` or `ctrl-<value>` where `<value>` is one of: `a-z`, `@`, `^`, `[`, `,` or `_`.  # noqa: E501

        :param detach_keys: The detach_keys of this ContainerExecRequest.
        :type detach_keys: str
        """

        self._detach_keys = detach_keys

    @property
    def env(self) -> List[str]:
        """Gets the env of this ContainerExecRequest.

        A list of environment variables in the form `[\"VAR=value\", ...]`.  # noqa: E501

        :return: The env of this ContainerExecRequest.
        :rtype: List[str]
        """
        return self._env

    @env.setter
    def env(self, env: List[str]):
        """Sets the env of this ContainerExecRequest.

        A list of environment variables in the form `[\"VAR=value\", ...]`.  # noqa: E501

        :param env: The env of this ContainerExecRequest.
        :type env: List[str]
        """

        self._env = env

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this ContainerExecRequest.

        Runs the exec process with extended privileges.  # noqa: E501

        :return: The privileged of this ContainerExecRequest.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this ContainerExecRequest.

        Runs the exec process with extended privileges.  # noqa: E501

        :param privileged: The privileged of this ContainerExecRequest.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def tty(self) -> bool:
        """Gets the tty of this ContainerExecRequest.

        Allocate a pseudo-TTY.  # noqa: E501

        :return: The tty of this ContainerExecRequest.
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty: bool):
        """Sets the tty of this ContainerExecRequest.

        Allocate a pseudo-TTY.  # noqa: E501

        :param tty: The tty of this ContainerExecRequest.
        :type tty: bool
        """

        self._tty = tty

    @property
    def user(self) -> str:
        """Gets the user of this ContainerExecRequest.

        The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`.  # noqa: E501

        :return: The user of this ContainerExecRequest.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this ContainerExecRequest.

        The user, and optionally, group to run the exec process inside the container. Format is one of: `user`, `user:group`, `uid`, or `uid:gid`.  # noqa: E501

        :param user: The user of this ContainerExecRequest.
        :type user: str
        """

        self._user = user
