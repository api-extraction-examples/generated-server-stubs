from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SwarmSpecCAConfigExternalCAsInner(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ca_cert=None, options=None, protocol='cfssl', url=None):  # noqa: E501
        """SwarmSpecCAConfigExternalCAsInner - a model defined in OpenAPI

        :param ca_cert: The ca_cert of this SwarmSpecCAConfigExternalCAsInner.  # noqa: E501
        :type ca_cert: str
        :param options: The options of this SwarmSpecCAConfigExternalCAsInner.  # noqa: E501
        :type options: Dict[str, str]
        :param protocol: The protocol of this SwarmSpecCAConfigExternalCAsInner.  # noqa: E501
        :type protocol: str
        :param url: The url of this SwarmSpecCAConfigExternalCAsInner.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'ca_cert': str,
            'options': Dict[str, str],
            'protocol': str,
            'url': str
        }

        self.attribute_map = {
            'ca_cert': 'CACert',
            'options': 'Options',
            'protocol': 'Protocol',
            'url': 'URL'
        }

        self._ca_cert = ca_cert
        self._options = options
        self._protocol = protocol
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'SwarmSpecCAConfigExternalCAsInner':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SwarmSpec_CAConfig_ExternalCAs_inner of this SwarmSpecCAConfigExternalCAsInner.  # noqa: E501
        :rtype: SwarmSpecCAConfigExternalCAsInner
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ca_cert(self) -> str:
        """Gets the ca_cert of this SwarmSpecCAConfigExternalCAsInner.

        The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided).  # noqa: E501

        :return: The ca_cert of this SwarmSpecCAConfigExternalCAsInner.
        :rtype: str
        """
        return self._ca_cert

    @ca_cert.setter
    def ca_cert(self, ca_cert: str):
        """Sets the ca_cert of this SwarmSpecCAConfigExternalCAsInner.

        The root CA certificate (in PEM format) this external CA uses to issue TLS certificates (assumed to be to the current swarm root CA certificate if not provided).  # noqa: E501

        :param ca_cert: The ca_cert of this SwarmSpecCAConfigExternalCAsInner.
        :type ca_cert: str
        """

        self._ca_cert = ca_cert

    @property
    def options(self) -> Dict[str, str]:
        """Gets the options of this SwarmSpecCAConfigExternalCAsInner.

        An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver.  # noqa: E501

        :return: The options of this SwarmSpecCAConfigExternalCAsInner.
        :rtype: Dict[str, str]
        """
        return self._options

    @options.setter
    def options(self, options: Dict[str, str]):
        """Sets the options of this SwarmSpecCAConfigExternalCAsInner.

        An object with key/value pairs that are interpreted as protocol-specific options for the external CA driver.  # noqa: E501

        :param options: The options of this SwarmSpecCAConfigExternalCAsInner.
        :type options: Dict[str, str]
        """

        self._options = options

    @property
    def protocol(self) -> str:
        """Gets the protocol of this SwarmSpecCAConfigExternalCAsInner.

        Protocol for communication with the external CA (currently only `cfssl` is supported).  # noqa: E501

        :return: The protocol of this SwarmSpecCAConfigExternalCAsInner.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """Sets the protocol of this SwarmSpecCAConfigExternalCAsInner.

        Protocol for communication with the external CA (currently only `cfssl` is supported).  # noqa: E501

        :param protocol: The protocol of this SwarmSpecCAConfigExternalCAsInner.
        :type protocol: str
        """
        allowed_values = ["cfssl"]  # noqa: E501
        if protocol not in allowed_values:
            raise ValueError(
                "Invalid value for `protocol` ({0}), must be one of {1}"
                .format(protocol, allowed_values)
            )

        self._protocol = protocol

    @property
    def url(self) -> str:
        """Gets the url of this SwarmSpecCAConfigExternalCAsInner.

        URL where certificate signing requests should be sent.  # noqa: E501

        :return: The url of this SwarmSpecCAConfigExternalCAsInner.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this SwarmSpecCAConfigExternalCAsInner.

        URL where certificate signing requests should be sent.  # noqa: E501

        :param url: The url of this SwarmSpecCAConfigExternalCAsInner.
        :type url: str
        """

        self._url = url
