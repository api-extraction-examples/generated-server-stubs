from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.device_mapping import DeviceMapping
from openapi_server.models.resources_blkio_weight_device_inner import ResourcesBlkioWeightDeviceInner
from openapi_server.models.resources_ulimits_inner import ResourcesUlimitsInner
from openapi_server.models.throttle_device import ThrottleDevice
from openapi_server import util

from openapi_server.models.device_mapping import DeviceMapping  # noqa: E501
from openapi_server.models.resources_blkio_weight_device_inner import ResourcesBlkioWeightDeviceInner  # noqa: E501
from openapi_server.models.resources_ulimits_inner import ResourcesUlimitsInner  # noqa: E501
from openapi_server.models.throttle_device import ThrottleDevice  # noqa: E501

class Resources(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, blkio_device_read_bps=None, blkio_device_read_i_ops=None, blkio_device_write_bps=None, blkio_device_write_i_ops=None, blkio_weight=None, blkio_weight_device=None, cgroup_parent=None, cpu_count=None, cpu_percent=None, cpu_period=None, cpu_quota=None, cpu_realtime_period=None, cpu_realtime_runtime=None, cpu_shares=None, cpuset_cpus=None, cpuset_mems=None, device_cgroup_rules=None, devices=None, disk_quota=None, io_maximum_bandwidth=None, io_maximum_i_ops=None, kernel_memory=None, memory=0, memory_reservation=None, memory_swap=None, memory_swappiness=None, nano_cpus=None, oom_kill_disable=None, pids_limit=None, ulimits=None):  # noqa: E501
        """Resources - a model defined in OpenAPI

        :param blkio_device_read_bps: The blkio_device_read_bps of this Resources.  # noqa: E501
        :type blkio_device_read_bps: List[ThrottleDevice]
        :param blkio_device_read_i_ops: The blkio_device_read_i_ops of this Resources.  # noqa: E501
        :type blkio_device_read_i_ops: List[ThrottleDevice]
        :param blkio_device_write_bps: The blkio_device_write_bps of this Resources.  # noqa: E501
        :type blkio_device_write_bps: List[ThrottleDevice]
        :param blkio_device_write_i_ops: The blkio_device_write_i_ops of this Resources.  # noqa: E501
        :type blkio_device_write_i_ops: List[ThrottleDevice]
        :param blkio_weight: The blkio_weight of this Resources.  # noqa: E501
        :type blkio_weight: int
        :param blkio_weight_device: The blkio_weight_device of this Resources.  # noqa: E501
        :type blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]
        :param cgroup_parent: The cgroup_parent of this Resources.  # noqa: E501
        :type cgroup_parent: str
        :param cpu_count: The cpu_count of this Resources.  # noqa: E501
        :type cpu_count: int
        :param cpu_percent: The cpu_percent of this Resources.  # noqa: E501
        :type cpu_percent: int
        :param cpu_period: The cpu_period of this Resources.  # noqa: E501
        :type cpu_period: int
        :param cpu_quota: The cpu_quota of this Resources.  # noqa: E501
        :type cpu_quota: int
        :param cpu_realtime_period: The cpu_realtime_period of this Resources.  # noqa: E501
        :type cpu_realtime_period: int
        :param cpu_realtime_runtime: The cpu_realtime_runtime of this Resources.  # noqa: E501
        :type cpu_realtime_runtime: int
        :param cpu_shares: The cpu_shares of this Resources.  # noqa: E501
        :type cpu_shares: int
        :param cpuset_cpus: The cpuset_cpus of this Resources.  # noqa: E501
        :type cpuset_cpus: str
        :param cpuset_mems: The cpuset_mems of this Resources.  # noqa: E501
        :type cpuset_mems: str
        :param device_cgroup_rules: The device_cgroup_rules of this Resources.  # noqa: E501
        :type device_cgroup_rules: List[str]
        :param devices: The devices of this Resources.  # noqa: E501
        :type devices: List[DeviceMapping]
        :param disk_quota: The disk_quota of this Resources.  # noqa: E501
        :type disk_quota: int
        :param io_maximum_bandwidth: The io_maximum_bandwidth of this Resources.  # noqa: E501
        :type io_maximum_bandwidth: int
        :param io_maximum_i_ops: The io_maximum_i_ops of this Resources.  # noqa: E501
        :type io_maximum_i_ops: int
        :param kernel_memory: The kernel_memory of this Resources.  # noqa: E501
        :type kernel_memory: int
        :param memory: The memory of this Resources.  # noqa: E501
        :type memory: int
        :param memory_reservation: The memory_reservation of this Resources.  # noqa: E501
        :type memory_reservation: int
        :param memory_swap: The memory_swap of this Resources.  # noqa: E501
        :type memory_swap: int
        :param memory_swappiness: The memory_swappiness of this Resources.  # noqa: E501
        :type memory_swappiness: int
        :param nano_cpus: The nano_cpus of this Resources.  # noqa: E501
        :type nano_cpus: int
        :param oom_kill_disable: The oom_kill_disable of this Resources.  # noqa: E501
        :type oom_kill_disable: bool
        :param pids_limit: The pids_limit of this Resources.  # noqa: E501
        :type pids_limit: int
        :param ulimits: The ulimits of this Resources.  # noqa: E501
        :type ulimits: List[ResourcesUlimitsInner]
        """
        self.openapi_types = {
            'blkio_device_read_bps': List[ThrottleDevice],
            'blkio_device_read_i_ops': List[ThrottleDevice],
            'blkio_device_write_bps': List[ThrottleDevice],
            'blkio_device_write_i_ops': List[ThrottleDevice],
            'blkio_weight': int,
            'blkio_weight_device': List[ResourcesBlkioWeightDeviceInner],
            'cgroup_parent': str,
            'cpu_count': int,
            'cpu_percent': int,
            'cpu_period': int,
            'cpu_quota': int,
            'cpu_realtime_period': int,
            'cpu_realtime_runtime': int,
            'cpu_shares': int,
            'cpuset_cpus': str,
            'cpuset_mems': str,
            'device_cgroup_rules': List[str],
            'devices': List[DeviceMapping],
            'disk_quota': int,
            'io_maximum_bandwidth': int,
            'io_maximum_i_ops': int,
            'kernel_memory': int,
            'memory': int,
            'memory_reservation': int,
            'memory_swap': int,
            'memory_swappiness': int,
            'nano_cpus': int,
            'oom_kill_disable': bool,
            'pids_limit': int,
            'ulimits': List[ResourcesUlimitsInner]
        }

        self.attribute_map = {
            'blkio_device_read_bps': 'BlkioDeviceReadBps',
            'blkio_device_read_i_ops': 'BlkioDeviceReadIOps',
            'blkio_device_write_bps': 'BlkioDeviceWriteBps',
            'blkio_device_write_i_ops': 'BlkioDeviceWriteIOps',
            'blkio_weight': 'BlkioWeight',
            'blkio_weight_device': 'BlkioWeightDevice',
            'cgroup_parent': 'CgroupParent',
            'cpu_count': 'CpuCount',
            'cpu_percent': 'CpuPercent',
            'cpu_period': 'CpuPeriod',
            'cpu_quota': 'CpuQuota',
            'cpu_realtime_period': 'CpuRealtimePeriod',
            'cpu_realtime_runtime': 'CpuRealtimeRuntime',
            'cpu_shares': 'CpuShares',
            'cpuset_cpus': 'CpusetCpus',
            'cpuset_mems': 'CpusetMems',
            'device_cgroup_rules': 'DeviceCgroupRules',
            'devices': 'Devices',
            'disk_quota': 'DiskQuota',
            'io_maximum_bandwidth': 'IOMaximumBandwidth',
            'io_maximum_i_ops': 'IOMaximumIOps',
            'kernel_memory': 'KernelMemory',
            'memory': 'Memory',
            'memory_reservation': 'MemoryReservation',
            'memory_swap': 'MemorySwap',
            'memory_swappiness': 'MemorySwappiness',
            'nano_cpus': 'NanoCPUs',
            'oom_kill_disable': 'OomKillDisable',
            'pids_limit': 'PidsLimit',
            'ulimits': 'Ulimits'
        }

        self._blkio_device_read_bps = blkio_device_read_bps
        self._blkio_device_read_i_ops = blkio_device_read_i_ops
        self._blkio_device_write_bps = blkio_device_write_bps
        self._blkio_device_write_i_ops = blkio_device_write_i_ops
        self._blkio_weight = blkio_weight
        self._blkio_weight_device = blkio_weight_device
        self._cgroup_parent = cgroup_parent
        self._cpu_count = cpu_count
        self._cpu_percent = cpu_percent
        self._cpu_period = cpu_period
        self._cpu_quota = cpu_quota
        self._cpu_realtime_period = cpu_realtime_period
        self._cpu_realtime_runtime = cpu_realtime_runtime
        self._cpu_shares = cpu_shares
        self._cpuset_cpus = cpuset_cpus
        self._cpuset_mems = cpuset_mems
        self._device_cgroup_rules = device_cgroup_rules
        self._devices = devices
        self._disk_quota = disk_quota
        self._io_maximum_bandwidth = io_maximum_bandwidth
        self._io_maximum_i_ops = io_maximum_i_ops
        self._kernel_memory = kernel_memory
        self._memory = memory
        self._memory_reservation = memory_reservation
        self._memory_swap = memory_swap
        self._memory_swappiness = memory_swappiness
        self._nano_cpus = nano_cpus
        self._oom_kill_disable = oom_kill_disable
        self._pids_limit = pids_limit
        self._ulimits = ulimits

    @classmethod
    def from_dict(cls, dikt) -> 'Resources':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Resources of this Resources.  # noqa: E501
        :rtype: Resources
        """
        return util.deserialize_model(dikt, cls)

    @property
    def blkio_device_read_bps(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_read_bps of this Resources.

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_bps of this Resources.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_read_bps

    @blkio_device_read_bps.setter
    def blkio_device_read_bps(self, blkio_device_read_bps: List[ThrottleDevice]):
        """Sets the blkio_device_read_bps of this Resources.

        Limit read rate (bytes per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_bps: The blkio_device_read_bps of this Resources.
        :type blkio_device_read_bps: List[ThrottleDevice]
        """

        self._blkio_device_read_bps = blkio_device_read_bps

    @property
    def blkio_device_read_i_ops(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_read_i_ops of this Resources.

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_read_i_ops of this Resources.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_read_i_ops

    @blkio_device_read_i_ops.setter
    def blkio_device_read_i_ops(self, blkio_device_read_i_ops: List[ThrottleDevice]):
        """Sets the blkio_device_read_i_ops of this Resources.

        Limit read rate (IO per second) from a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_read_i_ops: The blkio_device_read_i_ops of this Resources.
        :type blkio_device_read_i_ops: List[ThrottleDevice]
        """

        self._blkio_device_read_i_ops = blkio_device_read_i_ops

    @property
    def blkio_device_write_bps(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_write_bps of this Resources.

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_bps of this Resources.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_write_bps

    @blkio_device_write_bps.setter
    def blkio_device_write_bps(self, blkio_device_write_bps: List[ThrottleDevice]):
        """Sets the blkio_device_write_bps of this Resources.

        Limit write rate (bytes per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_bps: The blkio_device_write_bps of this Resources.
        :type blkio_device_write_bps: List[ThrottleDevice]
        """

        self._blkio_device_write_bps = blkio_device_write_bps

    @property
    def blkio_device_write_i_ops(self) -> List[ThrottleDevice]:
        """Gets the blkio_device_write_i_ops of this Resources.

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :return: The blkio_device_write_i_ops of this Resources.
        :rtype: List[ThrottleDevice]
        """
        return self._blkio_device_write_i_ops

    @blkio_device_write_i_ops.setter
    def blkio_device_write_i_ops(self, blkio_device_write_i_ops: List[ThrottleDevice]):
        """Sets the blkio_device_write_i_ops of this Resources.

        Limit write rate (IO per second) to a device, in the form `[{\"Path\": \"device_path\", \"Rate\": rate}]`.   # noqa: E501

        :param blkio_device_write_i_ops: The blkio_device_write_i_ops of this Resources.
        :type blkio_device_write_i_ops: List[ThrottleDevice]
        """

        self._blkio_device_write_i_ops = blkio_device_write_i_ops

    @property
    def blkio_weight(self) -> int:
        """Gets the blkio_weight of this Resources.

        Block IO weight (relative weight).  # noqa: E501

        :return: The blkio_weight of this Resources.
        :rtype: int
        """
        return self._blkio_weight

    @blkio_weight.setter
    def blkio_weight(self, blkio_weight: int):
        """Sets the blkio_weight of this Resources.

        Block IO weight (relative weight).  # noqa: E501

        :param blkio_weight: The blkio_weight of this Resources.
        :type blkio_weight: int
        """
        if blkio_weight is not None and blkio_weight > 1000:  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value less than or equal to `1000`")  # noqa: E501
        if blkio_weight is not None and blkio_weight < 0:  # noqa: E501
            raise ValueError("Invalid value for `blkio_weight`, must be a value greater than or equal to `0`")  # noqa: E501

        self._blkio_weight = blkio_weight

    @property
    def blkio_weight_device(self) -> List[ResourcesBlkioWeightDeviceInner]:
        """Gets the blkio_weight_device of this Resources.

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :return: The blkio_weight_device of this Resources.
        :rtype: List[ResourcesBlkioWeightDeviceInner]
        """
        return self._blkio_weight_device

    @blkio_weight_device.setter
    def blkio_weight_device(self, blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]):
        """Sets the blkio_weight_device of this Resources.

        Block IO weight (relative device weight) in the form `[{\"Path\": \"device_path\", \"Weight\": weight}]`.   # noqa: E501

        :param blkio_weight_device: The blkio_weight_device of this Resources.
        :type blkio_weight_device: List[ResourcesBlkioWeightDeviceInner]
        """

        self._blkio_weight_device = blkio_weight_device

    @property
    def cgroup_parent(self) -> str:
        """Gets the cgroup_parent of this Resources.

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :return: The cgroup_parent of this Resources.
        :rtype: str
        """
        return self._cgroup_parent

    @cgroup_parent.setter
    def cgroup_parent(self, cgroup_parent: str):
        """Sets the cgroup_parent of this Resources.

        Path to `cgroups` under which the container's `cgroup` is created. If the path is not absolute, the path is considered to be relative to the `cgroups` path of the init process. Cgroups are created if they do not already exist.  # noqa: E501

        :param cgroup_parent: The cgroup_parent of this Resources.
        :type cgroup_parent: str
        """

        self._cgroup_parent = cgroup_parent

    @property
    def cpu_count(self) -> int:
        """Gets the cpu_count of this Resources.

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_count of this Resources.
        :rtype: int
        """
        return self._cpu_count

    @cpu_count.setter
    def cpu_count(self, cpu_count: int):
        """Sets the cpu_count of this Resources.

        The number of usable CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_count: The cpu_count of this Resources.
        :type cpu_count: int
        """

        self._cpu_count = cpu_count

    @property
    def cpu_percent(self) -> int:
        """Gets the cpu_percent of this Resources.

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :return: The cpu_percent of this Resources.
        :rtype: int
        """
        return self._cpu_percent

    @cpu_percent.setter
    def cpu_percent(self, cpu_percent: int):
        """Sets the cpu_percent of this Resources.

        The usable percentage of the available CPUs (Windows only).  On Windows Server containers, the processor resource controls are mutually exclusive. The order of precedence is `CPUCount` first, then `CPUShares`, and `CPUPercent` last.   # noqa: E501

        :param cpu_percent: The cpu_percent of this Resources.
        :type cpu_percent: int
        """

        self._cpu_percent = cpu_percent

    @property
    def cpu_period(self) -> int:
        """Gets the cpu_period of this Resources.

        The length of a CPU period in microseconds.  # noqa: E501

        :return: The cpu_period of this Resources.
        :rtype: int
        """
        return self._cpu_period

    @cpu_period.setter
    def cpu_period(self, cpu_period: int):
        """Sets the cpu_period of this Resources.

        The length of a CPU period in microseconds.  # noqa: E501

        :param cpu_period: The cpu_period of this Resources.
        :type cpu_period: int
        """

        self._cpu_period = cpu_period

    @property
    def cpu_quota(self) -> int:
        """Gets the cpu_quota of this Resources.

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :return: The cpu_quota of this Resources.
        :rtype: int
        """
        return self._cpu_quota

    @cpu_quota.setter
    def cpu_quota(self, cpu_quota: int):
        """Sets the cpu_quota of this Resources.

        Microseconds of CPU time that the container can get in a CPU period.  # noqa: E501

        :param cpu_quota: The cpu_quota of this Resources.
        :type cpu_quota: int
        """

        self._cpu_quota = cpu_quota

    @property
    def cpu_realtime_period(self) -> int:
        """Gets the cpu_realtime_period of this Resources.

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_period of this Resources.
        :rtype: int
        """
        return self._cpu_realtime_period

    @cpu_realtime_period.setter
    def cpu_realtime_period(self, cpu_realtime_period: int):
        """Sets the cpu_realtime_period of this Resources.

        The length of a CPU real-time period in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_period: The cpu_realtime_period of this Resources.
        :type cpu_realtime_period: int
        """

        self._cpu_realtime_period = cpu_realtime_period

    @property
    def cpu_realtime_runtime(self) -> int:
        """Gets the cpu_realtime_runtime of this Resources.

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :return: The cpu_realtime_runtime of this Resources.
        :rtype: int
        """
        return self._cpu_realtime_runtime

    @cpu_realtime_runtime.setter
    def cpu_realtime_runtime(self, cpu_realtime_runtime: int):
        """Sets the cpu_realtime_runtime of this Resources.

        The length of a CPU real-time runtime in microseconds. Set to 0 to allocate no time allocated to real-time tasks.  # noqa: E501

        :param cpu_realtime_runtime: The cpu_realtime_runtime of this Resources.
        :type cpu_realtime_runtime: int
        """

        self._cpu_realtime_runtime = cpu_realtime_runtime

    @property
    def cpu_shares(self) -> int:
        """Gets the cpu_shares of this Resources.

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :return: The cpu_shares of this Resources.
        :rtype: int
        """
        return self._cpu_shares

    @cpu_shares.setter
    def cpu_shares(self, cpu_shares: int):
        """Sets the cpu_shares of this Resources.

        An integer value representing this container's relative CPU weight versus other containers.  # noqa: E501

        :param cpu_shares: The cpu_shares of this Resources.
        :type cpu_shares: int
        """

        self._cpu_shares = cpu_shares

    @property
    def cpuset_cpus(self) -> str:
        """Gets the cpuset_cpus of this Resources.

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :return: The cpuset_cpus of this Resources.
        :rtype: str
        """
        return self._cpuset_cpus

    @cpuset_cpus.setter
    def cpuset_cpus(self, cpuset_cpus: str):
        """Sets the cpuset_cpus of this Resources.

        CPUs in which to allow execution (e.g., `0-3`, `0,1`)  # noqa: E501

        :param cpuset_cpus: The cpuset_cpus of this Resources.
        :type cpuset_cpus: str
        """

        self._cpuset_cpus = cpuset_cpus

    @property
    def cpuset_mems(self) -> str:
        """Gets the cpuset_mems of this Resources.

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :return: The cpuset_mems of this Resources.
        :rtype: str
        """
        return self._cpuset_mems

    @cpuset_mems.setter
    def cpuset_mems(self, cpuset_mems: str):
        """Sets the cpuset_mems of this Resources.

        Memory nodes (MEMs) in which to allow execution (0-3, 0,1). Only effective on NUMA systems.  # noqa: E501

        :param cpuset_mems: The cpuset_mems of this Resources.
        :type cpuset_mems: str
        """

        self._cpuset_mems = cpuset_mems

    @property
    def device_cgroup_rules(self) -> List[str]:
        """Gets the device_cgroup_rules of this Resources.

        a list of cgroup rules to apply to the container  # noqa: E501

        :return: The device_cgroup_rules of this Resources.
        :rtype: List[str]
        """
        return self._device_cgroup_rules

    @device_cgroup_rules.setter
    def device_cgroup_rules(self, device_cgroup_rules: List[str]):
        """Sets the device_cgroup_rules of this Resources.

        a list of cgroup rules to apply to the container  # noqa: E501

        :param device_cgroup_rules: The device_cgroup_rules of this Resources.
        :type device_cgroup_rules: List[str]
        """

        self._device_cgroup_rules = device_cgroup_rules

    @property
    def devices(self) -> List[DeviceMapping]:
        """Gets the devices of this Resources.

        A list of devices to add to the container.  # noqa: E501

        :return: The devices of this Resources.
        :rtype: List[DeviceMapping]
        """
        return self._devices

    @devices.setter
    def devices(self, devices: List[DeviceMapping]):
        """Sets the devices of this Resources.

        A list of devices to add to the container.  # noqa: E501

        :param devices: The devices of this Resources.
        :type devices: List[DeviceMapping]
        """

        self._devices = devices

    @property
    def disk_quota(self) -> int:
        """Gets the disk_quota of this Resources.

        Disk limit (in bytes).  # noqa: E501

        :return: The disk_quota of this Resources.
        :rtype: int
        """
        return self._disk_quota

    @disk_quota.setter
    def disk_quota(self, disk_quota: int):
        """Sets the disk_quota of this Resources.

        Disk limit (in bytes).  # noqa: E501

        :param disk_quota: The disk_quota of this Resources.
        :type disk_quota: int
        """

        self._disk_quota = disk_quota

    @property
    def io_maximum_bandwidth(self) -> int:
        """Gets the io_maximum_bandwidth of this Resources.

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_bandwidth of this Resources.
        :rtype: int
        """
        return self._io_maximum_bandwidth

    @io_maximum_bandwidth.setter
    def io_maximum_bandwidth(self, io_maximum_bandwidth: int):
        """Sets the io_maximum_bandwidth of this Resources.

        Maximum IO in bytes per second for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_bandwidth: The io_maximum_bandwidth of this Resources.
        :type io_maximum_bandwidth: int
        """

        self._io_maximum_bandwidth = io_maximum_bandwidth

    @property
    def io_maximum_i_ops(self) -> int:
        """Gets the io_maximum_i_ops of this Resources.

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :return: The io_maximum_i_ops of this Resources.
        :rtype: int
        """
        return self._io_maximum_i_ops

    @io_maximum_i_ops.setter
    def io_maximum_i_ops(self, io_maximum_i_ops: int):
        """Sets the io_maximum_i_ops of this Resources.

        Maximum IOps for the container system drive (Windows only)  # noqa: E501

        :param io_maximum_i_ops: The io_maximum_i_ops of this Resources.
        :type io_maximum_i_ops: int
        """

        self._io_maximum_i_ops = io_maximum_i_ops

    @property
    def kernel_memory(self) -> int:
        """Gets the kernel_memory of this Resources.

        Kernel memory limit in bytes.  # noqa: E501

        :return: The kernel_memory of this Resources.
        :rtype: int
        """
        return self._kernel_memory

    @kernel_memory.setter
    def kernel_memory(self, kernel_memory: int):
        """Sets the kernel_memory of this Resources.

        Kernel memory limit in bytes.  # noqa: E501

        :param kernel_memory: The kernel_memory of this Resources.
        :type kernel_memory: int
        """

        self._kernel_memory = kernel_memory

    @property
    def memory(self) -> int:
        """Gets the memory of this Resources.

        Memory limit in bytes.  # noqa: E501

        :return: The memory of this Resources.
        :rtype: int
        """
        return self._memory

    @memory.setter
    def memory(self, memory: int):
        """Sets the memory of this Resources.

        Memory limit in bytes.  # noqa: E501

        :param memory: The memory of this Resources.
        :type memory: int
        """

        self._memory = memory

    @property
    def memory_reservation(self) -> int:
        """Gets the memory_reservation of this Resources.

        Memory soft limit in bytes.  # noqa: E501

        :return: The memory_reservation of this Resources.
        :rtype: int
        """
        return self._memory_reservation

    @memory_reservation.setter
    def memory_reservation(self, memory_reservation: int):
        """Sets the memory_reservation of this Resources.

        Memory soft limit in bytes.  # noqa: E501

        :param memory_reservation: The memory_reservation of this Resources.
        :type memory_reservation: int
        """

        self._memory_reservation = memory_reservation

    @property
    def memory_swap(self) -> int:
        """Gets the memory_swap of this Resources.

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :return: The memory_swap of this Resources.
        :rtype: int
        """
        return self._memory_swap

    @memory_swap.setter
    def memory_swap(self, memory_swap: int):
        """Sets the memory_swap of this Resources.

        Total memory limit (memory + swap). Set as `-1` to enable unlimited swap.  # noqa: E501

        :param memory_swap: The memory_swap of this Resources.
        :type memory_swap: int
        """

        self._memory_swap = memory_swap

    @property
    def memory_swappiness(self) -> int:
        """Gets the memory_swappiness of this Resources.

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :return: The memory_swappiness of this Resources.
        :rtype: int
        """
        return self._memory_swappiness

    @memory_swappiness.setter
    def memory_swappiness(self, memory_swappiness: int):
        """Sets the memory_swappiness of this Resources.

        Tune a container's memory swappiness behavior. Accepts an integer between 0 and 100.  # noqa: E501

        :param memory_swappiness: The memory_swappiness of this Resources.
        :type memory_swappiness: int
        """
        if memory_swappiness is not None and memory_swappiness > 100:  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value less than or equal to `100`")  # noqa: E501
        if memory_swappiness is not None and memory_swappiness < 0:  # noqa: E501
            raise ValueError("Invalid value for `memory_swappiness`, must be a value greater than or equal to `0`")  # noqa: E501

        self._memory_swappiness = memory_swappiness

    @property
    def nano_cpus(self) -> int:
        """Gets the nano_cpus of this Resources.

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :return: The nano_cpus of this Resources.
        :rtype: int
        """
        return self._nano_cpus

    @nano_cpus.setter
    def nano_cpus(self, nano_cpus: int):
        """Sets the nano_cpus of this Resources.

        CPU quota in units of 10<sup>-9</sup> CPUs.  # noqa: E501

        :param nano_cpus: The nano_cpus of this Resources.
        :type nano_cpus: int
        """

        self._nano_cpus = nano_cpus

    @property
    def oom_kill_disable(self) -> bool:
        """Gets the oom_kill_disable of this Resources.

        Disable OOM Killer for the container.  # noqa: E501

        :return: The oom_kill_disable of this Resources.
        :rtype: bool
        """
        return self._oom_kill_disable

    @oom_kill_disable.setter
    def oom_kill_disable(self, oom_kill_disable: bool):
        """Sets the oom_kill_disable of this Resources.

        Disable OOM Killer for the container.  # noqa: E501

        :param oom_kill_disable: The oom_kill_disable of this Resources.
        :type oom_kill_disable: bool
        """

        self._oom_kill_disable = oom_kill_disable

    @property
    def pids_limit(self) -> int:
        """Gets the pids_limit of this Resources.

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :return: The pids_limit of this Resources.
        :rtype: int
        """
        return self._pids_limit

    @pids_limit.setter
    def pids_limit(self, pids_limit: int):
        """Sets the pids_limit of this Resources.

        Tune a container's pids limit. Set -1 for unlimited.  # noqa: E501

        :param pids_limit: The pids_limit of this Resources.
        :type pids_limit: int
        """

        self._pids_limit = pids_limit

    @property
    def ulimits(self) -> List[ResourcesUlimitsInner]:
        """Gets the ulimits of this Resources.

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :return: The ulimits of this Resources.
        :rtype: List[ResourcesUlimitsInner]
        """
        return self._ulimits

    @ulimits.setter
    def ulimits(self, ulimits: List[ResourcesUlimitsInner]):
        """Sets the ulimits of this Resources.

        A list of resource limits to set in the container. For example: `{\"Name\": \"nofile\", \"Soft\": 1024, \"Hard\": 2048}`\"   # noqa: E501

        :param ulimits: The ulimits of this Resources.
        :type ulimits: List[ResourcesUlimitsInner]
        """

        self._ulimits = ulimits
