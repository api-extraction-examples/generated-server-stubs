from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.service_spec_networks_inner import ServiceSpecNetworksInner
from openapi_server.models.task_spec_container_spec import TaskSpecContainerSpec
from openapi_server.models.task_spec_log_driver import TaskSpecLogDriver
from openapi_server.models.task_spec_placement import TaskSpecPlacement
from openapi_server.models.task_spec_plugin_spec import TaskSpecPluginSpec
from openapi_server.models.task_spec_resources import TaskSpecResources
from openapi_server.models.task_spec_restart_policy import TaskSpecRestartPolicy
from openapi_server import util

from openapi_server.models.service_spec_networks_inner import ServiceSpecNetworksInner  # noqa: E501
from openapi_server.models.task_spec_container_spec import TaskSpecContainerSpec  # noqa: E501
from openapi_server.models.task_spec_log_driver import TaskSpecLogDriver  # noqa: E501
from openapi_server.models.task_spec_placement import TaskSpecPlacement  # noqa: E501
from openapi_server.models.task_spec_plugin_spec import TaskSpecPluginSpec  # noqa: E501
from openapi_server.models.task_spec_resources import TaskSpecResources  # noqa: E501
from openapi_server.models.task_spec_restart_policy import TaskSpecRestartPolicy  # noqa: E501

class TaskSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, container_spec=None, force_update=None, log_driver=None, networks=None, placement=None, plugin_spec=None, resources=None, restart_policy=None, runtime=None):  # noqa: E501
        """TaskSpec - a model defined in OpenAPI

        :param container_spec: The container_spec of this TaskSpec.  # noqa: E501
        :type container_spec: TaskSpecContainerSpec
        :param force_update: The force_update of this TaskSpec.  # noqa: E501
        :type force_update: int
        :param log_driver: The log_driver of this TaskSpec.  # noqa: E501
        :type log_driver: TaskSpecLogDriver
        :param networks: The networks of this TaskSpec.  # noqa: E501
        :type networks: List[ServiceSpecNetworksInner]
        :param placement: The placement of this TaskSpec.  # noqa: E501
        :type placement: TaskSpecPlacement
        :param plugin_spec: The plugin_spec of this TaskSpec.  # noqa: E501
        :type plugin_spec: TaskSpecPluginSpec
        :param resources: The resources of this TaskSpec.  # noqa: E501
        :type resources: TaskSpecResources
        :param restart_policy: The restart_policy of this TaskSpec.  # noqa: E501
        :type restart_policy: TaskSpecRestartPolicy
        :param runtime: The runtime of this TaskSpec.  # noqa: E501
        :type runtime: str
        """
        self.openapi_types = {
            'container_spec': TaskSpecContainerSpec,
            'force_update': int,
            'log_driver': TaskSpecLogDriver,
            'networks': List[ServiceSpecNetworksInner],
            'placement': TaskSpecPlacement,
            'plugin_spec': TaskSpecPluginSpec,
            'resources': TaskSpecResources,
            'restart_policy': TaskSpecRestartPolicy,
            'runtime': str
        }

        self.attribute_map = {
            'container_spec': 'ContainerSpec',
            'force_update': 'ForceUpdate',
            'log_driver': 'LogDriver',
            'networks': 'Networks',
            'placement': 'Placement',
            'plugin_spec': 'PluginSpec',
            'resources': 'Resources',
            'restart_policy': 'RestartPolicy',
            'runtime': 'Runtime'
        }

        self._container_spec = container_spec
        self._force_update = force_update
        self._log_driver = log_driver
        self._networks = networks
        self._placement = placement
        self._plugin_spec = plugin_spec
        self._resources = resources
        self._restart_policy = restart_policy
        self._runtime = runtime

    @classmethod
    def from_dict(cls, dikt) -> 'TaskSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskSpec of this TaskSpec.  # noqa: E501
        :rtype: TaskSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def container_spec(self) -> TaskSpecContainerSpec:
        """Gets the container_spec of this TaskSpec.


        :return: The container_spec of this TaskSpec.
        :rtype: TaskSpecContainerSpec
        """
        return self._container_spec

    @container_spec.setter
    def container_spec(self, container_spec: TaskSpecContainerSpec):
        """Sets the container_spec of this TaskSpec.


        :param container_spec: The container_spec of this TaskSpec.
        :type container_spec: TaskSpecContainerSpec
        """

        self._container_spec = container_spec

    @property
    def force_update(self) -> int:
        """Gets the force_update of this TaskSpec.

        A counter that triggers an update even if no relevant parameters have been changed.  # noqa: E501

        :return: The force_update of this TaskSpec.
        :rtype: int
        """
        return self._force_update

    @force_update.setter
    def force_update(self, force_update: int):
        """Sets the force_update of this TaskSpec.

        A counter that triggers an update even if no relevant parameters have been changed.  # noqa: E501

        :param force_update: The force_update of this TaskSpec.
        :type force_update: int
        """

        self._force_update = force_update

    @property
    def log_driver(self) -> TaskSpecLogDriver:
        """Gets the log_driver of this TaskSpec.


        :return: The log_driver of this TaskSpec.
        :rtype: TaskSpecLogDriver
        """
        return self._log_driver

    @log_driver.setter
    def log_driver(self, log_driver: TaskSpecLogDriver):
        """Sets the log_driver of this TaskSpec.


        :param log_driver: The log_driver of this TaskSpec.
        :type log_driver: TaskSpecLogDriver
        """

        self._log_driver = log_driver

    @property
    def networks(self) -> List[ServiceSpecNetworksInner]:
        """Gets the networks of this TaskSpec.


        :return: The networks of this TaskSpec.
        :rtype: List[ServiceSpecNetworksInner]
        """
        return self._networks

    @networks.setter
    def networks(self, networks: List[ServiceSpecNetworksInner]):
        """Sets the networks of this TaskSpec.


        :param networks: The networks of this TaskSpec.
        :type networks: List[ServiceSpecNetworksInner]
        """

        self._networks = networks

    @property
    def placement(self) -> TaskSpecPlacement:
        """Gets the placement of this TaskSpec.


        :return: The placement of this TaskSpec.
        :rtype: TaskSpecPlacement
        """
        return self._placement

    @placement.setter
    def placement(self, placement: TaskSpecPlacement):
        """Sets the placement of this TaskSpec.


        :param placement: The placement of this TaskSpec.
        :type placement: TaskSpecPlacement
        """

        self._placement = placement

    @property
    def plugin_spec(self) -> TaskSpecPluginSpec:
        """Gets the plugin_spec of this TaskSpec.


        :return: The plugin_spec of this TaskSpec.
        :rtype: TaskSpecPluginSpec
        """
        return self._plugin_spec

    @plugin_spec.setter
    def plugin_spec(self, plugin_spec: TaskSpecPluginSpec):
        """Sets the plugin_spec of this TaskSpec.


        :param plugin_spec: The plugin_spec of this TaskSpec.
        :type plugin_spec: TaskSpecPluginSpec
        """

        self._plugin_spec = plugin_spec

    @property
    def resources(self) -> TaskSpecResources:
        """Gets the resources of this TaskSpec.


        :return: The resources of this TaskSpec.
        :rtype: TaskSpecResources
        """
        return self._resources

    @resources.setter
    def resources(self, resources: TaskSpecResources):
        """Sets the resources of this TaskSpec.


        :param resources: The resources of this TaskSpec.
        :type resources: TaskSpecResources
        """

        self._resources = resources

    @property
    def restart_policy(self) -> TaskSpecRestartPolicy:
        """Gets the restart_policy of this TaskSpec.


        :return: The restart_policy of this TaskSpec.
        :rtype: TaskSpecRestartPolicy
        """
        return self._restart_policy

    @restart_policy.setter
    def restart_policy(self, restart_policy: TaskSpecRestartPolicy):
        """Sets the restart_policy of this TaskSpec.


        :param restart_policy: The restart_policy of this TaskSpec.
        :type restart_policy: TaskSpecRestartPolicy
        """

        self._restart_policy = restart_policy

    @property
    def runtime(self) -> str:
        """Gets the runtime of this TaskSpec.

        Runtime is the type of runtime specified for the task executor.  # noqa: E501

        :return: The runtime of this TaskSpec.
        :rtype: str
        """
        return self._runtime

    @runtime.setter
    def runtime(self, runtime: str):
        """Sets the runtime of this TaskSpec.

        Runtime is the type of runtime specified for the task executor.  # noqa: E501

        :param runtime: The runtime of this TaskSpec.
        :type runtime: str
        """

        self._runtime = runtime
