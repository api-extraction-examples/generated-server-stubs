from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProcessConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments=None, entrypoint=None, privileged=None, tty=None, user=None):  # noqa: E501
        """ProcessConfig - a model defined in OpenAPI

        :param arguments: The arguments of this ProcessConfig.  # noqa: E501
        :type arguments: List[str]
        :param entrypoint: The entrypoint of this ProcessConfig.  # noqa: E501
        :type entrypoint: str
        :param privileged: The privileged of this ProcessConfig.  # noqa: E501
        :type privileged: bool
        :param tty: The tty of this ProcessConfig.  # noqa: E501
        :type tty: bool
        :param user: The user of this ProcessConfig.  # noqa: E501
        :type user: str
        """
        self.openapi_types = {
            'arguments': List[str],
            'entrypoint': str,
            'privileged': bool,
            'tty': bool,
            'user': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'entrypoint': 'entrypoint',
            'privileged': 'privileged',
            'tty': 'tty',
            'user': 'user'
        }

        self._arguments = arguments
        self._entrypoint = entrypoint
        self._privileged = privileged
        self._tty = tty
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'ProcessConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProcessConfig of this ProcessConfig.  # noqa: E501
        :rtype: ProcessConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self) -> List[str]:
        """Gets the arguments of this ProcessConfig.


        :return: The arguments of this ProcessConfig.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: List[str]):
        """Sets the arguments of this ProcessConfig.


        :param arguments: The arguments of this ProcessConfig.
        :type arguments: List[str]
        """

        self._arguments = arguments

    @property
    def entrypoint(self) -> str:
        """Gets the entrypoint of this ProcessConfig.


        :return: The entrypoint of this ProcessConfig.
        :rtype: str
        """
        return self._entrypoint

    @entrypoint.setter
    def entrypoint(self, entrypoint: str):
        """Sets the entrypoint of this ProcessConfig.


        :param entrypoint: The entrypoint of this ProcessConfig.
        :type entrypoint: str
        """

        self._entrypoint = entrypoint

    @property
    def privileged(self) -> bool:
        """Gets the privileged of this ProcessConfig.


        :return: The privileged of this ProcessConfig.
        :rtype: bool
        """
        return self._privileged

    @privileged.setter
    def privileged(self, privileged: bool):
        """Sets the privileged of this ProcessConfig.


        :param privileged: The privileged of this ProcessConfig.
        :type privileged: bool
        """

        self._privileged = privileged

    @property
    def tty(self) -> bool:
        """Gets the tty of this ProcessConfig.


        :return: The tty of this ProcessConfig.
        :rtype: bool
        """
        return self._tty

    @tty.setter
    def tty(self, tty: bool):
        """Sets the tty of this ProcessConfig.


        :param tty: The tty of this ProcessConfig.
        :type tty: bool
        """

        self._tty = tty

    @property
    def user(self) -> str:
        """Gets the user of this ProcessConfig.


        :return: The user of this ProcessConfig.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user: str):
        """Sets the user of this ProcessConfig.


        :param user: The user of this ProcessConfig.
        :type user: str
        """

        self._user = user
