from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class DistributionInspect200ResponseDescriptor(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, digest=None, media_type=None, size=None, urls=None):  # noqa: E501
        """DistributionInspect200ResponseDescriptor - a model defined in OpenAPI

        :param digest: The digest of this DistributionInspect200ResponseDescriptor.  # noqa: E501
        :type digest: str
        :param media_type: The media_type of this DistributionInspect200ResponseDescriptor.  # noqa: E501
        :type media_type: str
        :param size: The size of this DistributionInspect200ResponseDescriptor.  # noqa: E501
        :type size: int
        :param urls: The urls of this DistributionInspect200ResponseDescriptor.  # noqa: E501
        :type urls: List[str]
        """
        self.openapi_types = {
            'digest': str,
            'media_type': str,
            'size': int,
            'urls': List[str]
        }

        self.attribute_map = {
            'digest': 'Digest',
            'media_type': 'MediaType',
            'size': 'Size',
            'urls': 'URLs'
        }

        self._digest = digest
        self._media_type = media_type
        self._size = size
        self._urls = urls

    @classmethod
    def from_dict(cls, dikt) -> 'DistributionInspect200ResponseDescriptor':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DistributionInspect_200_response_Descriptor of this DistributionInspect200ResponseDescriptor.  # noqa: E501
        :rtype: DistributionInspect200ResponseDescriptor
        """
        return util.deserialize_model(dikt, cls)

    @property
    def digest(self) -> str:
        """Gets the digest of this DistributionInspect200ResponseDescriptor.


        :return: The digest of this DistributionInspect200ResponseDescriptor.
        :rtype: str
        """
        return self._digest

    @digest.setter
    def digest(self, digest: str):
        """Sets the digest of this DistributionInspect200ResponseDescriptor.


        :param digest: The digest of this DistributionInspect200ResponseDescriptor.
        :type digest: str
        """

        self._digest = digest

    @property
    def media_type(self) -> str:
        """Gets the media_type of this DistributionInspect200ResponseDescriptor.


        :return: The media_type of this DistributionInspect200ResponseDescriptor.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this DistributionInspect200ResponseDescriptor.


        :param media_type: The media_type of this DistributionInspect200ResponseDescriptor.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def size(self) -> int:
        """Gets the size of this DistributionInspect200ResponseDescriptor.


        :return: The size of this DistributionInspect200ResponseDescriptor.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this DistributionInspect200ResponseDescriptor.


        :param size: The size of this DistributionInspect200ResponseDescriptor.
        :type size: int
        """

        self._size = size

    @property
    def urls(self) -> List[str]:
        """Gets the urls of this DistributionInspect200ResponseDescriptor.


        :return: The urls of this DistributionInspect200ResponseDescriptor.
        :rtype: List[str]
        """
        return self._urls

    @urls.setter
    def urls(self, urls: List[str]):
        """Sets the urls of this DistributionInspect200ResponseDescriptor.


        :param urls: The urls of this DistributionInspect200ResponseDescriptor.
        :type urls: List[str]
        """

        self._urls = urls
