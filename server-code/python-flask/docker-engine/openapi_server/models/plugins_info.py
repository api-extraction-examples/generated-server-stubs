from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PluginsInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, authorization=None, log=None, network=None, volume=None):  # noqa: E501
        """PluginsInfo - a model defined in OpenAPI

        :param authorization: The authorization of this PluginsInfo.  # noqa: E501
        :type authorization: List[str]
        :param log: The log of this PluginsInfo.  # noqa: E501
        :type log: List[str]
        :param network: The network of this PluginsInfo.  # noqa: E501
        :type network: List[str]
        :param volume: The volume of this PluginsInfo.  # noqa: E501
        :type volume: List[str]
        """
        self.openapi_types = {
            'authorization': List[str],
            'log': List[str],
            'network': List[str],
            'volume': List[str]
        }

        self.attribute_map = {
            'authorization': 'Authorization',
            'log': 'Log',
            'network': 'Network',
            'volume': 'Volume'
        }

        self._authorization = authorization
        self._log = log
        self._network = network
        self._volume = volume

    @classmethod
    def from_dict(cls, dikt) -> 'PluginsInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PluginsInfo of this PluginsInfo.  # noqa: E501
        :rtype: PluginsInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def authorization(self) -> List[str]:
        """Gets the authorization of this PluginsInfo.

        Names of available authorization plugins.  # noqa: E501

        :return: The authorization of this PluginsInfo.
        :rtype: List[str]
        """
        return self._authorization

    @authorization.setter
    def authorization(self, authorization: List[str]):
        """Sets the authorization of this PluginsInfo.

        Names of available authorization plugins.  # noqa: E501

        :param authorization: The authorization of this PluginsInfo.
        :type authorization: List[str]
        """

        self._authorization = authorization

    @property
    def log(self) -> List[str]:
        """Gets the log of this PluginsInfo.

        Names of available logging-drivers, and logging-driver plugins.  # noqa: E501

        :return: The log of this PluginsInfo.
        :rtype: List[str]
        """
        return self._log

    @log.setter
    def log(self, log: List[str]):
        """Sets the log of this PluginsInfo.

        Names of available logging-drivers, and logging-driver plugins.  # noqa: E501

        :param log: The log of this PluginsInfo.
        :type log: List[str]
        """

        self._log = log

    @property
    def network(self) -> List[str]:
        """Gets the network of this PluginsInfo.

        Names of available network-drivers, and network-driver plugins.  # noqa: E501

        :return: The network of this PluginsInfo.
        :rtype: List[str]
        """
        return self._network

    @network.setter
    def network(self, network: List[str]):
        """Sets the network of this PluginsInfo.

        Names of available network-drivers, and network-driver plugins.  # noqa: E501

        :param network: The network of this PluginsInfo.
        :type network: List[str]
        """

        self._network = network

    @property
    def volume(self) -> List[str]:
        """Gets the volume of this PluginsInfo.

        Names of available volume-drivers, and network-driver plugins.  # noqa: E501

        :return: The volume of this PluginsInfo.
        :rtype: List[str]
        """
        return self._volume

    @volume.setter
    def volume(self, volume: List[str]):
        """Sets the volume of this PluginsInfo.

        Names of available volume-drivers, and network-driver plugins.  # noqa: E501

        :param volume: The volume of this PluginsInfo.
        :type volume: List[str]
        """

        self._volume = volume
