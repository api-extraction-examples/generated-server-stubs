from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Platform(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, architecture=None, os=None):  # noqa: E501
        """Platform - a model defined in OpenAPI

        :param architecture: The architecture of this Platform.  # noqa: E501
        :type architecture: str
        :param os: The os of this Platform.  # noqa: E501
        :type os: str
        """
        self.openapi_types = {
            'architecture': str,
            'os': str
        }

        self.attribute_map = {
            'architecture': 'Architecture',
            'os': 'OS'
        }

        self._architecture = architecture
        self._os = os

    @classmethod
    def from_dict(cls, dikt) -> 'Platform':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Platform of this Platform.  # noqa: E501
        :rtype: Platform
        """
        return util.deserialize_model(dikt, cls)

    @property
    def architecture(self) -> str:
        """Gets the architecture of this Platform.

        Architecture represents the hardware architecture (for example, `x86_64`).   # noqa: E501

        :return: The architecture of this Platform.
        :rtype: str
        """
        return self._architecture

    @architecture.setter
    def architecture(self, architecture: str):
        """Sets the architecture of this Platform.

        Architecture represents the hardware architecture (for example, `x86_64`).   # noqa: E501

        :param architecture: The architecture of this Platform.
        :type architecture: str
        """

        self._architecture = architecture

    @property
    def os(self) -> str:
        """Gets the os of this Platform.

        OS represents the Operating System (for example, `linux` or `windows`).   # noqa: E501

        :return: The os of this Platform.
        :rtype: str
        """
        return self._os

    @os.setter
    def os(self, os: str):
        """Sets the os of this Platform.

        OS represents the Operating System (for example, `linux` or `windows`).   # noqa: E501

        :param os: The os of this Platform.
        :type os: str
        """

        self._os = os
