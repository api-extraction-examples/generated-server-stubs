from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class NodeSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, availability=None, labels=None, name=None, role=None):  # noqa: E501
        """NodeSpec - a model defined in OpenAPI

        :param availability: The availability of this NodeSpec.  # noqa: E501
        :type availability: str
        :param labels: The labels of this NodeSpec.  # noqa: E501
        :type labels: Dict[str, str]
        :param name: The name of this NodeSpec.  # noqa: E501
        :type name: str
        :param role: The role of this NodeSpec.  # noqa: E501
        :type role: str
        """
        self.openapi_types = {
            'availability': str,
            'labels': Dict[str, str],
            'name': str,
            'role': str
        }

        self.attribute_map = {
            'availability': 'Availability',
            'labels': 'Labels',
            'name': 'Name',
            'role': 'Role'
        }

        self._availability = availability
        self._labels = labels
        self._name = name
        self._role = role

    @classmethod
    def from_dict(cls, dikt) -> 'NodeSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NodeSpec of this NodeSpec.  # noqa: E501
        :rtype: NodeSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def availability(self) -> str:
        """Gets the availability of this NodeSpec.

        Availability of the node.  # noqa: E501

        :return: The availability of this NodeSpec.
        :rtype: str
        """
        return self._availability

    @availability.setter
    def availability(self, availability: str):
        """Sets the availability of this NodeSpec.

        Availability of the node.  # noqa: E501

        :param availability: The availability of this NodeSpec.
        :type availability: str
        """
        allowed_values = ["active", "pause", "drain"]  # noqa: E501
        if availability not in allowed_values:
            raise ValueError(
                "Invalid value for `availability` ({0}), must be one of {1}"
                .format(availability, allowed_values)
            )

        self._availability = availability

    @property
    def labels(self) -> Dict[str, str]:
        """Gets the labels of this NodeSpec.

        User-defined key/value metadata.  # noqa: E501

        :return: The labels of this NodeSpec.
        :rtype: Dict[str, str]
        """
        return self._labels

    @labels.setter
    def labels(self, labels: Dict[str, str]):
        """Sets the labels of this NodeSpec.

        User-defined key/value metadata.  # noqa: E501

        :param labels: The labels of this NodeSpec.
        :type labels: Dict[str, str]
        """

        self._labels = labels

    @property
    def name(self) -> str:
        """Gets the name of this NodeSpec.

        Name for the node.  # noqa: E501

        :return: The name of this NodeSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NodeSpec.

        Name for the node.  # noqa: E501

        :param name: The name of this NodeSpec.
        :type name: str
        """

        self._name = name

    @property
    def role(self) -> str:
        """Gets the role of this NodeSpec.

        Role of the node.  # noqa: E501

        :return: The role of this NodeSpec.
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role: str):
        """Sets the role of this NodeSpec.

        Role of the node.  # noqa: E501

        :param role: The role of this NodeSpec.
        :type role: str
        """
        allowed_values = ["worker", "manager"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"
                .format(role, allowed_values)
            )

        self._role = role
