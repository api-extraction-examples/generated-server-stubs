from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.error_detail import ErrorDetail
from openapi_server.models.progress_detail import ProgressDetail
from openapi_server import util

from openapi_server.models.error_detail import ErrorDetail  # noqa: E501
from openapi_server.models.progress_detail import ProgressDetail  # noqa: E501

class BuildInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, error=None, error_detail=None, id=None, progress=None, progress_detail=None, status=None, stream=None):  # noqa: E501
        """BuildInfo - a model defined in OpenAPI

        :param error: The error of this BuildInfo.  # noqa: E501
        :type error: str
        :param error_detail: The error_detail of this BuildInfo.  # noqa: E501
        :type error_detail: ErrorDetail
        :param id: The id of this BuildInfo.  # noqa: E501
        :type id: str
        :param progress: The progress of this BuildInfo.  # noqa: E501
        :type progress: str
        :param progress_detail: The progress_detail of this BuildInfo.  # noqa: E501
        :type progress_detail: ProgressDetail
        :param status: The status of this BuildInfo.  # noqa: E501
        :type status: str
        :param stream: The stream of this BuildInfo.  # noqa: E501
        :type stream: str
        """
        self.openapi_types = {
            'error': str,
            'error_detail': ErrorDetail,
            'id': str,
            'progress': str,
            'progress_detail': ProgressDetail,
            'status': str,
            'stream': str
        }

        self.attribute_map = {
            'error': 'error',
            'error_detail': 'errorDetail',
            'id': 'id',
            'progress': 'progress',
            'progress_detail': 'progressDetail',
            'status': 'status',
            'stream': 'stream'
        }

        self._error = error
        self._error_detail = error_detail
        self._id = id
        self._progress = progress
        self._progress_detail = progress_detail
        self._status = status
        self._stream = stream

    @classmethod
    def from_dict(cls, dikt) -> 'BuildInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BuildInfo of this BuildInfo.  # noqa: E501
        :rtype: BuildInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def error(self) -> str:
        """Gets the error of this BuildInfo.


        :return: The error of this BuildInfo.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this BuildInfo.


        :param error: The error of this BuildInfo.
        :type error: str
        """

        self._error = error

    @property
    def error_detail(self) -> ErrorDetail:
        """Gets the error_detail of this BuildInfo.


        :return: The error_detail of this BuildInfo.
        :rtype: ErrorDetail
        """
        return self._error_detail

    @error_detail.setter
    def error_detail(self, error_detail: ErrorDetail):
        """Sets the error_detail of this BuildInfo.


        :param error_detail: The error_detail of this BuildInfo.
        :type error_detail: ErrorDetail
        """

        self._error_detail = error_detail

    @property
    def id(self) -> str:
        """Gets the id of this BuildInfo.


        :return: The id of this BuildInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this BuildInfo.


        :param id: The id of this BuildInfo.
        :type id: str
        """

        self._id = id

    @property
    def progress(self) -> str:
        """Gets the progress of this BuildInfo.


        :return: The progress of this BuildInfo.
        :rtype: str
        """
        return self._progress

    @progress.setter
    def progress(self, progress: str):
        """Sets the progress of this BuildInfo.


        :param progress: The progress of this BuildInfo.
        :type progress: str
        """

        self._progress = progress

    @property
    def progress_detail(self) -> ProgressDetail:
        """Gets the progress_detail of this BuildInfo.


        :return: The progress_detail of this BuildInfo.
        :rtype: ProgressDetail
        """
        return self._progress_detail

    @progress_detail.setter
    def progress_detail(self, progress_detail: ProgressDetail):
        """Sets the progress_detail of this BuildInfo.


        :param progress_detail: The progress_detail of this BuildInfo.
        :type progress_detail: ProgressDetail
        """

        self._progress_detail = progress_detail

    @property
    def status(self) -> str:
        """Gets the status of this BuildInfo.


        :return: The status of this BuildInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this BuildInfo.


        :param status: The status of this BuildInfo.
        :type status: str
        """

        self._status = status

    @property
    def stream(self) -> str:
        """Gets the stream of this BuildInfo.


        :return: The stream of this BuildInfo.
        :rtype: str
        """
        return self._stream

    @stream.setter
    def stream(self, stream: str):
        """Sets the stream of this BuildInfo.


        :param stream: The stream of this BuildInfo.
        :type stream: str
        """

        self._stream = stream
