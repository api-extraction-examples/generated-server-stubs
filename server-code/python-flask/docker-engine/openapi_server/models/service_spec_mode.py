from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.service_spec_mode_replicated import ServiceSpecModeReplicated
from openapi_server import util

from openapi_server.models.service_spec_mode_replicated import ServiceSpecModeReplicated  # noqa: E501

class ServiceSpecMode(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _global=None, replicated=None):  # noqa: E501
        """ServiceSpecMode - a model defined in OpenAPI

        :param _global: The _global of this ServiceSpecMode.  # noqa: E501
        :type _global: object
        :param replicated: The replicated of this ServiceSpecMode.  # noqa: E501
        :type replicated: ServiceSpecModeReplicated
        """
        self.openapi_types = {
            '_global': object,
            'replicated': ServiceSpecModeReplicated
        }

        self.attribute_map = {
            '_global': 'Global',
            'replicated': 'Replicated'
        }

        self.__global = _global
        self._replicated = replicated

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceSpecMode':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ServiceSpec_Mode of this ServiceSpecMode.  # noqa: E501
        :rtype: ServiceSpecMode
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _global(self) -> object:
        """Gets the _global of this ServiceSpecMode.


        :return: The _global of this ServiceSpecMode.
        :rtype: object
        """
        return self.__global

    @_global.setter
    def _global(self, _global: object):
        """Sets the _global of this ServiceSpecMode.


        :param _global: The _global of this ServiceSpecMode.
        :type _global: object
        """

        self.__global = _global

    @property
    def replicated(self) -> ServiceSpecModeReplicated:
        """Gets the replicated of this ServiceSpecMode.


        :return: The replicated of this ServiceSpecMode.
        :rtype: ServiceSpecModeReplicated
        """
        return self._replicated

    @replicated.setter
    def replicated(self, replicated: ServiceSpecModeReplicated):
        """Sets the replicated of this ServiceSpecMode.


        :param replicated: The replicated of this ServiceSpecMode.
        :type replicated: ServiceSpecModeReplicated
        """

        self._replicated = replicated
