from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ThrottleDevice(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path=None, rate=None):  # noqa: E501
        """ThrottleDevice - a model defined in OpenAPI

        :param path: The path of this ThrottleDevice.  # noqa: E501
        :type path: str
        :param rate: The rate of this ThrottleDevice.  # noqa: E501
        :type rate: int
        """
        self.openapi_types = {
            'path': str,
            'rate': int
        }

        self.attribute_map = {
            'path': 'Path',
            'rate': 'Rate'
        }

        self._path = path
        self._rate = rate

    @classmethod
    def from_dict(cls, dikt) -> 'ThrottleDevice':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ThrottleDevice of this ThrottleDevice.  # noqa: E501
        :rtype: ThrottleDevice
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this ThrottleDevice.

        Device path  # noqa: E501

        :return: The path of this ThrottleDevice.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this ThrottleDevice.

        Device path  # noqa: E501

        :param path: The path of this ThrottleDevice.
        :type path: str
        """

        self._path = path

    @property
    def rate(self) -> int:
        """Gets the rate of this ThrottleDevice.

        Rate  # noqa: E501

        :return: The rate of this ThrottleDevice.
        :rtype: int
        """
        return self._rate

    @rate.setter
    def rate(self, rate: int):
        """Sets the rate of this ThrottleDevice.

        Rate  # noqa: E501

        :param rate: The rate of this ThrottleDevice.
        :type rate: int
        """
        if rate is not None and rate < 0:  # noqa: E501
            raise ValueError("Invalid value for `rate`, must be a value greater than or equal to `0`")  # noqa: E501

        self._rate = rate
