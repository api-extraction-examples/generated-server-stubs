from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class VolumeUsageData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, ref_count=-1, size=-1):  # noqa: E501
        """VolumeUsageData - a model defined in OpenAPI

        :param ref_count: The ref_count of this VolumeUsageData.  # noqa: E501
        :type ref_count: int
        :param size: The size of this VolumeUsageData.  # noqa: E501
        :type size: int
        """
        self.openapi_types = {
            'ref_count': int,
            'size': int
        }

        self.attribute_map = {
            'ref_count': 'RefCount',
            'size': 'Size'
        }

        self._ref_count = ref_count
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'VolumeUsageData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Volume_UsageData of this VolumeUsageData.  # noqa: E501
        :rtype: VolumeUsageData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def ref_count(self) -> int:
        """Gets the ref_count of this VolumeUsageData.

        The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available.   # noqa: E501

        :return: The ref_count of this VolumeUsageData.
        :rtype: int
        """
        return self._ref_count

    @ref_count.setter
    def ref_count(self, ref_count: int):
        """Sets the ref_count of this VolumeUsageData.

        The number of containers referencing this volume. This field is set to `-1` if the reference-count is not available.   # noqa: E501

        :param ref_count: The ref_count of this VolumeUsageData.
        :type ref_count: int
        """
        if ref_count is None:
            raise ValueError("Invalid value for `ref_count`, must not be `None`")  # noqa: E501

        self._ref_count = ref_count

    @property
    def size(self) -> int:
        """Gets the size of this VolumeUsageData.

        Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")   # noqa: E501

        :return: The size of this VolumeUsageData.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this VolumeUsageData.

        Amount of disk space used by the volume (in bytes). This information is only available for volumes created with the `\"local\"` volume driver. For volumes created with other volume drivers, this field is set to `-1` (\"not available\")   # noqa: E501

        :param size: The size of this VolumeUsageData.
        :type size: int
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size
