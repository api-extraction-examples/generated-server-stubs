from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_interface_type import PluginInterfaceType
from openapi_server import util

from openapi_server.models.plugin_interface_type import PluginInterfaceType  # noqa: E501

class PluginConfigInterface(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, socket=None, types=None):  # noqa: E501
        """PluginConfigInterface - a model defined in OpenAPI

        :param socket: The socket of this PluginConfigInterface.  # noqa: E501
        :type socket: str
        :param types: The types of this PluginConfigInterface.  # noqa: E501
        :type types: List[PluginInterfaceType]
        """
        self.openapi_types = {
            'socket': str,
            'types': List[PluginInterfaceType]
        }

        self.attribute_map = {
            'socket': 'Socket',
            'types': 'Types'
        }

        self._socket = socket
        self._types = types

    @classmethod
    def from_dict(cls, dikt) -> 'PluginConfigInterface':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Plugin_Config_Interface of this PluginConfigInterface.  # noqa: E501
        :rtype: PluginConfigInterface
        """
        return util.deserialize_model(dikt, cls)

    @property
    def socket(self) -> str:
        """Gets the socket of this PluginConfigInterface.


        :return: The socket of this PluginConfigInterface.
        :rtype: str
        """
        return self._socket

    @socket.setter
    def socket(self, socket: str):
        """Sets the socket of this PluginConfigInterface.


        :param socket: The socket of this PluginConfigInterface.
        :type socket: str
        """
        if socket is None:
            raise ValueError("Invalid value for `socket`, must not be `None`")  # noqa: E501

        self._socket = socket

    @property
    def types(self) -> List[PluginInterfaceType]:
        """Gets the types of this PluginConfigInterface.


        :return: The types of this PluginConfigInterface.
        :rtype: List[PluginInterfaceType]
        """
        return self._types

    @types.setter
    def types(self, types: List[PluginInterfaceType]):
        """Sets the types of this PluginConfigInterface.


        :param types: The types of this PluginConfigInterface.
        :type types: List[PluginInterfaceType]
        """
        if types is None:
            raise ValueError("Invalid value for `types`, must not be `None`")  # noqa: E501

        self._types = types
