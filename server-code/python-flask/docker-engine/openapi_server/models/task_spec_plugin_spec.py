from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.plugin_pull_request_inner import PluginPullRequestInner
from openapi_server import util

from openapi_server.models.plugin_pull_request_inner import PluginPullRequestInner  # noqa: E501

class TaskSpecPluginSpec(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled=None, name=None, plugin_privilege=None, remote=None):  # noqa: E501
        """TaskSpecPluginSpec - a model defined in OpenAPI

        :param disabled: The disabled of this TaskSpecPluginSpec.  # noqa: E501
        :type disabled: bool
        :param name: The name of this TaskSpecPluginSpec.  # noqa: E501
        :type name: str
        :param plugin_privilege: The plugin_privilege of this TaskSpecPluginSpec.  # noqa: E501
        :type plugin_privilege: List[PluginPullRequestInner]
        :param remote: The remote of this TaskSpecPluginSpec.  # noqa: E501
        :type remote: str
        """
        self.openapi_types = {
            'disabled': bool,
            'name': str,
            'plugin_privilege': List[PluginPullRequestInner],
            'remote': str
        }

        self.attribute_map = {
            'disabled': 'Disabled',
            'name': 'Name',
            'plugin_privilege': 'PluginPrivilege',
            'remote': 'Remote'
        }

        self._disabled = disabled
        self._name = name
        self._plugin_privilege = plugin_privilege
        self._remote = remote

    @classmethod
    def from_dict(cls, dikt) -> 'TaskSpecPluginSpec':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The TaskSpec_PluginSpec of this TaskSpecPluginSpec.  # noqa: E501
        :rtype: TaskSpecPluginSpec
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self) -> bool:
        """Gets the disabled of this TaskSpecPluginSpec.

        Disable the plugin once scheduled.  # noqa: E501

        :return: The disabled of this TaskSpecPluginSpec.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled: bool):
        """Sets the disabled of this TaskSpecPluginSpec.

        Disable the plugin once scheduled.  # noqa: E501

        :param disabled: The disabled of this TaskSpecPluginSpec.
        :type disabled: bool
        """

        self._disabled = disabled

    @property
    def name(self) -> str:
        """Gets the name of this TaskSpecPluginSpec.

        The name or 'alias' to use for the plugin.  # noqa: E501

        :return: The name of this TaskSpecPluginSpec.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this TaskSpecPluginSpec.

        The name or 'alias' to use for the plugin.  # noqa: E501

        :param name: The name of this TaskSpecPluginSpec.
        :type name: str
        """

        self._name = name

    @property
    def plugin_privilege(self) -> List[PluginPullRequestInner]:
        """Gets the plugin_privilege of this TaskSpecPluginSpec.


        :return: The plugin_privilege of this TaskSpecPluginSpec.
        :rtype: List[PluginPullRequestInner]
        """
        return self._plugin_privilege

    @plugin_privilege.setter
    def plugin_privilege(self, plugin_privilege: List[PluginPullRequestInner]):
        """Sets the plugin_privilege of this TaskSpecPluginSpec.


        :param plugin_privilege: The plugin_privilege of this TaskSpecPluginSpec.
        :type plugin_privilege: List[PluginPullRequestInner]
        """

        self._plugin_privilege = plugin_privilege

    @property
    def remote(self) -> str:
        """Gets the remote of this TaskSpecPluginSpec.

        The plugin image reference to use.  # noqa: E501

        :return: The remote of this TaskSpecPluginSpec.
        :rtype: str
        """
        return self._remote

    @remote.setter
    def remote(self, remote: str):
        """Sets the remote of this TaskSpecPluginSpec.

        The plugin image reference to use.  # noqa: E501

        :param remote: The remote of this TaskSpecPluginSpec.
        :type remote: str
        """

        self._remote = remote
