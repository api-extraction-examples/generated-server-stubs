from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ContainerInspect200ResponseState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, dead=None, error=None, exit_code=None, finished_at=None, oom_killed=None, paused=None, pid=None, restarting=None, running=None, started_at=None, status=None):  # noqa: E501
        """ContainerInspect200ResponseState - a model defined in OpenAPI

        :param dead: The dead of this ContainerInspect200ResponseState.  # noqa: E501
        :type dead: bool
        :param error: The error of this ContainerInspect200ResponseState.  # noqa: E501
        :type error: str
        :param exit_code: The exit_code of this ContainerInspect200ResponseState.  # noqa: E501
        :type exit_code: int
        :param finished_at: The finished_at of this ContainerInspect200ResponseState.  # noqa: E501
        :type finished_at: str
        :param oom_killed: The oom_killed of this ContainerInspect200ResponseState.  # noqa: E501
        :type oom_killed: bool
        :param paused: The paused of this ContainerInspect200ResponseState.  # noqa: E501
        :type paused: bool
        :param pid: The pid of this ContainerInspect200ResponseState.  # noqa: E501
        :type pid: int
        :param restarting: The restarting of this ContainerInspect200ResponseState.  # noqa: E501
        :type restarting: bool
        :param running: The running of this ContainerInspect200ResponseState.  # noqa: E501
        :type running: bool
        :param started_at: The started_at of this ContainerInspect200ResponseState.  # noqa: E501
        :type started_at: str
        :param status: The status of this ContainerInspect200ResponseState.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'dead': bool,
            'error': str,
            'exit_code': int,
            'finished_at': str,
            'oom_killed': bool,
            'paused': bool,
            'pid': int,
            'restarting': bool,
            'running': bool,
            'started_at': str,
            'status': str
        }

        self.attribute_map = {
            'dead': 'Dead',
            'error': 'Error',
            'exit_code': 'ExitCode',
            'finished_at': 'FinishedAt',
            'oom_killed': 'OOMKilled',
            'paused': 'Paused',
            'pid': 'Pid',
            'restarting': 'Restarting',
            'running': 'Running',
            'started_at': 'StartedAt',
            'status': 'Status'
        }

        self._dead = dead
        self._error = error
        self._exit_code = exit_code
        self._finished_at = finished_at
        self._oom_killed = oom_killed
        self._paused = paused
        self._pid = pid
        self._restarting = restarting
        self._running = running
        self._started_at = started_at
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ContainerInspect200ResponseState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ContainerInspect_200_response_State of this ContainerInspect200ResponseState.  # noqa: E501
        :rtype: ContainerInspect200ResponseState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def dead(self) -> bool:
        """Gets the dead of this ContainerInspect200ResponseState.


        :return: The dead of this ContainerInspect200ResponseState.
        :rtype: bool
        """
        return self._dead

    @dead.setter
    def dead(self, dead: bool):
        """Sets the dead of this ContainerInspect200ResponseState.


        :param dead: The dead of this ContainerInspect200ResponseState.
        :type dead: bool
        """

        self._dead = dead

    @property
    def error(self) -> str:
        """Gets the error of this ContainerInspect200ResponseState.


        :return: The error of this ContainerInspect200ResponseState.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this ContainerInspect200ResponseState.


        :param error: The error of this ContainerInspect200ResponseState.
        :type error: str
        """

        self._error = error

    @property
    def exit_code(self) -> int:
        """Gets the exit_code of this ContainerInspect200ResponseState.

        The last exit code of this container  # noqa: E501

        :return: The exit_code of this ContainerInspect200ResponseState.
        :rtype: int
        """
        return self._exit_code

    @exit_code.setter
    def exit_code(self, exit_code: int):
        """Sets the exit_code of this ContainerInspect200ResponseState.

        The last exit code of this container  # noqa: E501

        :param exit_code: The exit_code of this ContainerInspect200ResponseState.
        :type exit_code: int
        """

        self._exit_code = exit_code

    @property
    def finished_at(self) -> str:
        """Gets the finished_at of this ContainerInspect200ResponseState.

        The time when this container last exited.  # noqa: E501

        :return: The finished_at of this ContainerInspect200ResponseState.
        :rtype: str
        """
        return self._finished_at

    @finished_at.setter
    def finished_at(self, finished_at: str):
        """Sets the finished_at of this ContainerInspect200ResponseState.

        The time when this container last exited.  # noqa: E501

        :param finished_at: The finished_at of this ContainerInspect200ResponseState.
        :type finished_at: str
        """

        self._finished_at = finished_at

    @property
    def oom_killed(self) -> bool:
        """Gets the oom_killed of this ContainerInspect200ResponseState.

        Whether this container has been killed because it ran out of memory.  # noqa: E501

        :return: The oom_killed of this ContainerInspect200ResponseState.
        :rtype: bool
        """
        return self._oom_killed

    @oom_killed.setter
    def oom_killed(self, oom_killed: bool):
        """Sets the oom_killed of this ContainerInspect200ResponseState.

        Whether this container has been killed because it ran out of memory.  # noqa: E501

        :param oom_killed: The oom_killed of this ContainerInspect200ResponseState.
        :type oom_killed: bool
        """

        self._oom_killed = oom_killed

    @property
    def paused(self) -> bool:
        """Gets the paused of this ContainerInspect200ResponseState.

        Whether this container is paused.  # noqa: E501

        :return: The paused of this ContainerInspect200ResponseState.
        :rtype: bool
        """
        return self._paused

    @paused.setter
    def paused(self, paused: bool):
        """Sets the paused of this ContainerInspect200ResponseState.

        Whether this container is paused.  # noqa: E501

        :param paused: The paused of this ContainerInspect200ResponseState.
        :type paused: bool
        """

        self._paused = paused

    @property
    def pid(self) -> int:
        """Gets the pid of this ContainerInspect200ResponseState.

        The process ID of this container  # noqa: E501

        :return: The pid of this ContainerInspect200ResponseState.
        :rtype: int
        """
        return self._pid

    @pid.setter
    def pid(self, pid: int):
        """Sets the pid of this ContainerInspect200ResponseState.

        The process ID of this container  # noqa: E501

        :param pid: The pid of this ContainerInspect200ResponseState.
        :type pid: int
        """

        self._pid = pid

    @property
    def restarting(self) -> bool:
        """Gets the restarting of this ContainerInspect200ResponseState.

        Whether this container is restarting.  # noqa: E501

        :return: The restarting of this ContainerInspect200ResponseState.
        :rtype: bool
        """
        return self._restarting

    @restarting.setter
    def restarting(self, restarting: bool):
        """Sets the restarting of this ContainerInspect200ResponseState.

        Whether this container is restarting.  # noqa: E501

        :param restarting: The restarting of this ContainerInspect200ResponseState.
        :type restarting: bool
        """

        self._restarting = restarting

    @property
    def running(self) -> bool:
        """Gets the running of this ContainerInspect200ResponseState.

        Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the cgroups freezer is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\".   # noqa: E501

        :return: The running of this ContainerInspect200ResponseState.
        :rtype: bool
        """
        return self._running

    @running.setter
    def running(self, running: bool):
        """Sets the running of this ContainerInspect200ResponseState.

        Whether this container is running.  Note that a running container can be _paused_. The `Running` and `Paused` booleans are not mutually exclusive:  When pausing a container (on Linux), the cgroups freezer is used to suspend all processes in the container. Freezing the process requires the process to be running. As a result, paused containers are both `Running` _and_ `Paused`.  Use the `Status` field instead to determine if a container's state is \"running\".   # noqa: E501

        :param running: The running of this ContainerInspect200ResponseState.
        :type running: bool
        """

        self._running = running

    @property
    def started_at(self) -> str:
        """Gets the started_at of this ContainerInspect200ResponseState.

        The time when this container was last started.  # noqa: E501

        :return: The started_at of this ContainerInspect200ResponseState.
        :rtype: str
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at: str):
        """Sets the started_at of this ContainerInspect200ResponseState.

        The time when this container was last started.  # noqa: E501

        :param started_at: The started_at of this ContainerInspect200ResponseState.
        :type started_at: str
        """

        self._started_at = started_at

    @property
    def status(self) -> str:
        """Gets the status of this ContainerInspect200ResponseState.

        The status of the container. For example, `\"running\"` or `\"exited\"`.   # noqa: E501

        :return: The status of this ContainerInspect200ResponseState.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ContainerInspect200ResponseState.

        The status of the container. For example, `\"running\"` or `\"exited\"`.   # noqa: E501

        :param status: The status of this ContainerInspect200ResponseState.
        :type status: str
        """
        allowed_values = ["created", "running", "paused", "restarting", "removing", "exited", "dead"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
