from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.index_info import IndexInfo
from openapi_server import util

from openapi_server.models.index_info import IndexInfo  # noqa: E501

class RegistryServiceConfig(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_nondistributable_artifacts_cidrs=None, allow_nondistributable_artifacts_hostnames=None, index_configs=None, insecure_registry_cidrs=None, mirrors=None):  # noqa: E501
        """RegistryServiceConfig - a model defined in OpenAPI

        :param allow_nondistributable_artifacts_cidrs: The allow_nondistributable_artifacts_cidrs of this RegistryServiceConfig.  # noqa: E501
        :type allow_nondistributable_artifacts_cidrs: List[str]
        :param allow_nondistributable_artifacts_hostnames: The allow_nondistributable_artifacts_hostnames of this RegistryServiceConfig.  # noqa: E501
        :type allow_nondistributable_artifacts_hostnames: List[str]
        :param index_configs: The index_configs of this RegistryServiceConfig.  # noqa: E501
        :type index_configs: Dict[str, IndexInfo]
        :param insecure_registry_cidrs: The insecure_registry_cidrs of this RegistryServiceConfig.  # noqa: E501
        :type insecure_registry_cidrs: List[str]
        :param mirrors: The mirrors of this RegistryServiceConfig.  # noqa: E501
        :type mirrors: List[str]
        """
        self.openapi_types = {
            'allow_nondistributable_artifacts_cidrs': List[str],
            'allow_nondistributable_artifacts_hostnames': List[str],
            'index_configs': Dict[str, IndexInfo],
            'insecure_registry_cidrs': List[str],
            'mirrors': List[str]
        }

        self.attribute_map = {
            'allow_nondistributable_artifacts_cidrs': 'AllowNondistributableArtifactsCIDRs',
            'allow_nondistributable_artifacts_hostnames': 'AllowNondistributableArtifactsHostnames',
            'index_configs': 'IndexConfigs',
            'insecure_registry_cidrs': 'InsecureRegistryCIDRs',
            'mirrors': 'Mirrors'
        }

        self._allow_nondistributable_artifacts_cidrs = allow_nondistributable_artifacts_cidrs
        self._allow_nondistributable_artifacts_hostnames = allow_nondistributable_artifacts_hostnames
        self._index_configs = index_configs
        self._insecure_registry_cidrs = insecure_registry_cidrs
        self._mirrors = mirrors

    @classmethod
    def from_dict(cls, dikt) -> 'RegistryServiceConfig':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RegistryServiceConfig of this RegistryServiceConfig.  # noqa: E501
        :rtype: RegistryServiceConfig
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_nondistributable_artifacts_cidrs(self) -> List[str]:
        """Gets the allow_nondistributable_artifacts_cidrs of this RegistryServiceConfig.

        List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.   # noqa: E501

        :return: The allow_nondistributable_artifacts_cidrs of this RegistryServiceConfig.
        :rtype: List[str]
        """
        return self._allow_nondistributable_artifacts_cidrs

    @allow_nondistributable_artifacts_cidrs.setter
    def allow_nondistributable_artifacts_cidrs(self, allow_nondistributable_artifacts_cidrs: List[str]):
        """Sets the allow_nondistributable_artifacts_cidrs of this RegistryServiceConfig.

        List of IP ranges to which nondistributable artifacts can be pushed, using the CIDR syntax [RFC 4632](https://tools.ietf.org/html/4632).  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior, and enables the daemon to push nondistributable artifacts to all registries whose resolved IP address is within the subnet described by the CIDR syntax.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.   # noqa: E501

        :param allow_nondistributable_artifacts_cidrs: The allow_nondistributable_artifacts_cidrs of this RegistryServiceConfig.
        :type allow_nondistributable_artifacts_cidrs: List[str]
        """

        self._allow_nondistributable_artifacts_cidrs = allow_nondistributable_artifacts_cidrs

    @property
    def allow_nondistributable_artifacts_hostnames(self) -> List[str]:
        """Gets the allow_nondistributable_artifacts_hostnames of this RegistryServiceConfig.

        List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.   # noqa: E501

        :return: The allow_nondistributable_artifacts_hostnames of this RegistryServiceConfig.
        :rtype: List[str]
        """
        return self._allow_nondistributable_artifacts_hostnames

    @allow_nondistributable_artifacts_hostnames.setter
    def allow_nondistributable_artifacts_hostnames(self, allow_nondistributable_artifacts_hostnames: List[str]):
        """Sets the allow_nondistributable_artifacts_hostnames of this RegistryServiceConfig.

        List of registry hostnames to which nondistributable artifacts can be pushed, using the format `<hostname>[:<port>]` or `<IP address>[:<port>]`.  Some images (for example, Windows base images) contain artifacts whose distribution is restricted by license. When these images are pushed to a registry, restricted artifacts are not included.  This configuration override this behavior for the specified registries.  This option is useful when pushing images containing nondistributable artifacts to a registry on an air-gapped network so hosts on that network can pull the images without connecting to another server.  > **Warning**: Nondistributable artifacts typically have restrictions > on how and where they can be distributed and shared. Only use this > feature to push artifacts to private registries and ensure that you > are in compliance with any terms that cover redistributing > nondistributable artifacts.   # noqa: E501

        :param allow_nondistributable_artifacts_hostnames: The allow_nondistributable_artifacts_hostnames of this RegistryServiceConfig.
        :type allow_nondistributable_artifacts_hostnames: List[str]
        """

        self._allow_nondistributable_artifacts_hostnames = allow_nondistributable_artifacts_hostnames

    @property
    def index_configs(self) -> Dict[str, IndexInfo]:
        """Gets the index_configs of this RegistryServiceConfig.


        :return: The index_configs of this RegistryServiceConfig.
        :rtype: Dict[str, IndexInfo]
        """
        return self._index_configs

    @index_configs.setter
    def index_configs(self, index_configs: Dict[str, IndexInfo]):
        """Sets the index_configs of this RegistryServiceConfig.


        :param index_configs: The index_configs of this RegistryServiceConfig.
        :type index_configs: Dict[str, IndexInfo]
        """

        self._index_configs = index_configs

    @property
    def insecure_registry_cidrs(self) -> List[str]:
        """Gets the insecure_registry_cidrs of this RegistryServiceConfig.

        List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system's list of trusted > CAs instead of enabling this option.   # noqa: E501

        :return: The insecure_registry_cidrs of this RegistryServiceConfig.
        :rtype: List[str]
        """
        return self._insecure_registry_cidrs

    @insecure_registry_cidrs.setter
    def insecure_registry_cidrs(self, insecure_registry_cidrs: List[str]):
        """Sets the insecure_registry_cidrs of this RegistryServiceConfig.

        List of IP ranges of insecure registries, using the CIDR syntax ([RFC 4632](https://tools.ietf.org/html/4632)). Insecure registries accept un-encrypted (HTTP) and/or untrusted (HTTPS with certificates from unknown CAs) communication.  By default, local registries (`127.0.0.0/8`) are configured as insecure. All other registries are secure. Communicating with an insecure registry is not possible if the daemon assumes that registry is secure.  This configuration override this behavior, insecure communication with registries whose resolved IP address is within the subnet described by the CIDR syntax.  Registries can also be marked insecure by hostname. Those registries are listed under `IndexConfigs` and have their `Secure` field set to `false`.  > **Warning**: Using this option can be useful when running a local > registry, but introduces security vulnerabilities. This option > should therefore ONLY be used for testing purposes. For increased > security, users should add their CA to their system's list of trusted > CAs instead of enabling this option.   # noqa: E501

        :param insecure_registry_cidrs: The insecure_registry_cidrs of this RegistryServiceConfig.
        :type insecure_registry_cidrs: List[str]
        """

        self._insecure_registry_cidrs = insecure_registry_cidrs

    @property
    def mirrors(self) -> List[str]:
        """Gets the mirrors of this RegistryServiceConfig.

        List of registry URLs that act as a mirror for the official (`docker.io`) registry.   # noqa: E501

        :return: The mirrors of this RegistryServiceConfig.
        :rtype: List[str]
        """
        return self._mirrors

    @mirrors.setter
    def mirrors(self, mirrors: List[str]):
        """Sets the mirrors of this RegistryServiceConfig.

        List of registry URLs that act as a mirror for the official (`docker.io`) registry.   # noqa: E501

        :param mirrors: The mirrors of this RegistryServiceConfig.
        :type mirrors: List[str]
        """

        self._mirrors = mirrors
