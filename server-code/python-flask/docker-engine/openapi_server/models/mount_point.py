from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class MountPoint(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, destination=None, driver=None, mode=None, name=None, propagation=None, rw=None, source=None, type=None):  # noqa: E501
        """MountPoint - a model defined in OpenAPI

        :param destination: The destination of this MountPoint.  # noqa: E501
        :type destination: str
        :param driver: The driver of this MountPoint.  # noqa: E501
        :type driver: str
        :param mode: The mode of this MountPoint.  # noqa: E501
        :type mode: str
        :param name: The name of this MountPoint.  # noqa: E501
        :type name: str
        :param propagation: The propagation of this MountPoint.  # noqa: E501
        :type propagation: str
        :param rw: The rw of this MountPoint.  # noqa: E501
        :type rw: bool
        :param source: The source of this MountPoint.  # noqa: E501
        :type source: str
        :param type: The type of this MountPoint.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'destination': str,
            'driver': str,
            'mode': str,
            'name': str,
            'propagation': str,
            'rw': bool,
            'source': str,
            'type': str
        }

        self.attribute_map = {
            'destination': 'Destination',
            'driver': 'Driver',
            'mode': 'Mode',
            'name': 'Name',
            'propagation': 'Propagation',
            'rw': 'RW',
            'source': 'Source',
            'type': 'Type'
        }

        self._destination = destination
        self._driver = driver
        self._mode = mode
        self._name = name
        self._propagation = propagation
        self._rw = rw
        self._source = source
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'MountPoint':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The MountPoint of this MountPoint.  # noqa: E501
        :rtype: MountPoint
        """
        return util.deserialize_model(dikt, cls)

    @property
    def destination(self) -> str:
        """Gets the destination of this MountPoint.


        :return: The destination of this MountPoint.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination: str):
        """Sets the destination of this MountPoint.


        :param destination: The destination of this MountPoint.
        :type destination: str
        """

        self._destination = destination

    @property
    def driver(self) -> str:
        """Gets the driver of this MountPoint.


        :return: The driver of this MountPoint.
        :rtype: str
        """
        return self._driver

    @driver.setter
    def driver(self, driver: str):
        """Sets the driver of this MountPoint.


        :param driver: The driver of this MountPoint.
        :type driver: str
        """

        self._driver = driver

    @property
    def mode(self) -> str:
        """Gets the mode of this MountPoint.


        :return: The mode of this MountPoint.
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode: str):
        """Sets the mode of this MountPoint.


        :param mode: The mode of this MountPoint.
        :type mode: str
        """

        self._mode = mode

    @property
    def name(self) -> str:
        """Gets the name of this MountPoint.


        :return: The name of this MountPoint.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this MountPoint.


        :param name: The name of this MountPoint.
        :type name: str
        """

        self._name = name

    @property
    def propagation(self) -> str:
        """Gets the propagation of this MountPoint.


        :return: The propagation of this MountPoint.
        :rtype: str
        """
        return self._propagation

    @propagation.setter
    def propagation(self, propagation: str):
        """Sets the propagation of this MountPoint.


        :param propagation: The propagation of this MountPoint.
        :type propagation: str
        """

        self._propagation = propagation

    @property
    def rw(self) -> bool:
        """Gets the rw of this MountPoint.


        :return: The rw of this MountPoint.
        :rtype: bool
        """
        return self._rw

    @rw.setter
    def rw(self, rw: bool):
        """Sets the rw of this MountPoint.


        :param rw: The rw of this MountPoint.
        :type rw: bool
        """

        self._rw = rw

    @property
    def source(self) -> str:
        """Gets the source of this MountPoint.


        :return: The source of this MountPoint.
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source: str):
        """Sets the source of this MountPoint.


        :param source: The source of this MountPoint.
        :type source: str
        """

        self._source = source

    @property
    def type(self) -> str:
        """Gets the type of this MountPoint.


        :return: The type of this MountPoint.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this MountPoint.


        :param type: The type of this MountPoint.
        :type type: str
        """

        self._type = type
