from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CurrentRideLocation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, lat=None, lng=None, bearing=None):  # noqa: E501
        """CurrentRideLocation - a model defined in OpenAPI

        :param lat: The lat of this CurrentRideLocation.  # noqa: E501
        :type lat: float
        :param lng: The lng of this CurrentRideLocation.  # noqa: E501
        :type lng: float
        :param bearing: The bearing of this CurrentRideLocation.  # noqa: E501
        :type bearing: float
        """
        self.openapi_types = {
            'lat': float,
            'lng': float,
            'bearing': float
        }

        self.attribute_map = {
            'lat': 'lat',
            'lng': 'lng',
            'bearing': 'bearing'
        }

        self._lat = lat
        self._lng = lng
        self._bearing = bearing

    @classmethod
    def from_dict(cls, dikt) -> 'CurrentRideLocation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CurrentRideLocation of this CurrentRideLocation.  # noqa: E501
        :rtype: CurrentRideLocation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def lat(self) -> float:
        """Gets the lat of this CurrentRideLocation.

        The latitude component of a location  # noqa: E501

        :return: The lat of this CurrentRideLocation.
        :rtype: float
        """
        return self._lat

    @lat.setter
    def lat(self, lat: float):
        """Sets the lat of this CurrentRideLocation.

        The latitude component of a location  # noqa: E501

        :param lat: The lat of this CurrentRideLocation.
        :type lat: float
        """
        if lat is None:
            raise ValueError("Invalid value for `lat`, must not be `None`")  # noqa: E501

        self._lat = lat

    @property
    def lng(self) -> float:
        """Gets the lng of this CurrentRideLocation.

        The longitude component of a location  # noqa: E501

        :return: The lng of this CurrentRideLocation.
        :rtype: float
        """
        return self._lng

    @lng.setter
    def lng(self, lng: float):
        """Sets the lng of this CurrentRideLocation.

        The longitude component of a location  # noqa: E501

        :param lng: The lng of this CurrentRideLocation.
        :type lng: float
        """
        if lng is None:
            raise ValueError("Invalid value for `lng`, must not be `None`")  # noqa: E501

        self._lng = lng

    @property
    def bearing(self) -> float:
        """Gets the bearing of this CurrentRideLocation.

        Bearing of the driver's car in degrees  # noqa: E501

        :return: The bearing of this CurrentRideLocation.
        :rtype: float
        """
        return self._bearing

    @bearing.setter
    def bearing(self, bearing: float):
        """Sets the bearing of this CurrentRideLocation.

        Bearing of the driver's car in degrees  # noqa: E501

        :param bearing: The bearing of this CurrentRideLocation.
        :type bearing: float
        """

        self._bearing = bearing
