from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.ride_type_enum import RideTypeEnum
from openapi_server import util

from openapi_server.models.ride_type_enum import RideTypeEnum  # noqa: E501

class Eta(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, display_name=None, eta_seconds=None, eta_seconds_max=None, is_valid_estimate=None, ride_type=None):  # noqa: E501
        """Eta - a model defined in OpenAPI

        :param display_name: The display_name of this Eta.  # noqa: E501
        :type display_name: str
        :param eta_seconds: The eta_seconds of this Eta.  # noqa: E501
        :type eta_seconds: int
        :param eta_seconds_max: The eta_seconds_max of this Eta.  # noqa: E501
        :type eta_seconds_max: int
        :param is_valid_estimate: The is_valid_estimate of this Eta.  # noqa: E501
        :type is_valid_estimate: bool
        :param ride_type: The ride_type of this Eta.  # noqa: E501
        :type ride_type: RideTypeEnum
        """
        self.openapi_types = {
            'display_name': str,
            'eta_seconds': int,
            'eta_seconds_max': int,
            'is_valid_estimate': bool,
            'ride_type': RideTypeEnum
        }

        self.attribute_map = {
            'display_name': 'display_name',
            'eta_seconds': 'eta_seconds',
            'eta_seconds_max': 'eta_seconds_max',
            'is_valid_estimate': 'is_valid_estimate',
            'ride_type': 'ride_type'
        }

        self._display_name = display_name
        self._eta_seconds = eta_seconds
        self._eta_seconds_max = eta_seconds_max
        self._is_valid_estimate = is_valid_estimate
        self._ride_type = ride_type

    @classmethod
    def from_dict(cls, dikt) -> 'Eta':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Eta of this Eta.  # noqa: E501
        :rtype: Eta
        """
        return util.deserialize_model(dikt, cls)

    @property
    def display_name(self) -> str:
        """Gets the display_name of this Eta.

        A human readable description of the ride type  # noqa: E501

        :return: The display_name of this Eta.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this Eta.

        A human readable description of the ride type  # noqa: E501

        :param display_name: The display_name of this Eta.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def eta_seconds(self) -> int:
        """Gets the eta_seconds of this Eta.

        Estimated seconds for a driver to arrive  # noqa: E501

        :return: The eta_seconds of this Eta.
        :rtype: int
        """
        return self._eta_seconds

    @eta_seconds.setter
    def eta_seconds(self, eta_seconds: int):
        """Sets the eta_seconds of this Eta.

        Estimated seconds for a driver to arrive  # noqa: E501

        :param eta_seconds: The eta_seconds of this Eta.
        :type eta_seconds: int
        """

        self._eta_seconds = eta_seconds

    @property
    def eta_seconds_max(self) -> int:
        """Gets the eta_seconds_max of this Eta.

        Estimated upper bound of seconds for a driver to arrive  # noqa: E501

        :return: The eta_seconds_max of this Eta.
        :rtype: int
        """
        return self._eta_seconds_max

    @eta_seconds_max.setter
    def eta_seconds_max(self, eta_seconds_max: int):
        """Sets the eta_seconds_max of this Eta.

        Estimated upper bound of seconds for a driver to arrive  # noqa: E501

        :param eta_seconds_max: The eta_seconds_max of this Eta.
        :type eta_seconds_max: int
        """

        self._eta_seconds_max = eta_seconds_max

    @property
    def is_valid_estimate(self) -> bool:
        """Gets the is_valid_estimate of this Eta.

        The validity of the ETA estimate returned  # noqa: E501

        :return: The is_valid_estimate of this Eta.
        :rtype: bool
        """
        return self._is_valid_estimate

    @is_valid_estimate.setter
    def is_valid_estimate(self, is_valid_estimate: bool):
        """Sets the is_valid_estimate of this Eta.

        The validity of the ETA estimate returned  # noqa: E501

        :param is_valid_estimate: The is_valid_estimate of this Eta.
        :type is_valid_estimate: bool
        """

        self._is_valid_estimate = is_valid_estimate

    @property
    def ride_type(self) -> RideTypeEnum:
        """Gets the ride_type of this Eta.


        :return: The ride_type of this Eta.
        :rtype: RideTypeEnum
        """
        return self._ride_type

    @ride_type.setter
    def ride_type(self, ride_type: RideTypeEnum):
        """Sets the ride_type of this Eta.


        :param ride_type: The ride_type of this Eta.
        :type ride_type: RideTypeEnum
        """

        self._ride_type = ride_type
