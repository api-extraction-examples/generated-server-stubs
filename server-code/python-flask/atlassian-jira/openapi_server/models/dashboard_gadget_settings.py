from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_gadget_position import DashboardGadgetPosition
from openapi_server import util

from openapi_server.models.dashboard_gadget_position import DashboardGadgetPosition  # noqa: E501

class DashboardGadgetSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, color=None, ignore_uri_and_module_key_validation=None, module_key=None, position=None, title=None, uri=None):  # noqa: E501
        """DashboardGadgetSettings - a model defined in OpenAPI

        :param color: The color of this DashboardGadgetSettings.  # noqa: E501
        :type color: str
        :param ignore_uri_and_module_key_validation: The ignore_uri_and_module_key_validation of this DashboardGadgetSettings.  # noqa: E501
        :type ignore_uri_and_module_key_validation: bool
        :param module_key: The module_key of this DashboardGadgetSettings.  # noqa: E501
        :type module_key: str
        :param position: The position of this DashboardGadgetSettings.  # noqa: E501
        :type position: DashboardGadgetPosition
        :param title: The title of this DashboardGadgetSettings.  # noqa: E501
        :type title: str
        :param uri: The uri of this DashboardGadgetSettings.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'color': str,
            'ignore_uri_and_module_key_validation': bool,
            'module_key': str,
            'position': DashboardGadgetPosition,
            'title': str,
            'uri': str
        }

        self.attribute_map = {
            'color': 'color',
            'ignore_uri_and_module_key_validation': 'ignoreUriAndModuleKeyValidation',
            'module_key': 'moduleKey',
            'position': 'position',
            'title': 'title',
            'uri': 'uri'
        }

        self._color = color
        self._ignore_uri_and_module_key_validation = ignore_uri_and_module_key_validation
        self._module_key = module_key
        self._position = position
        self._title = title
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardGadgetSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardGadgetSettings of this DashboardGadgetSettings.  # noqa: E501
        :rtype: DashboardGadgetSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def color(self) -> str:
        """Gets the color of this DashboardGadgetSettings.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :return: The color of this DashboardGadgetSettings.
        :rtype: str
        """
        return self._color

    @color.setter
    def color(self, color: str):
        """Sets the color of this DashboardGadgetSettings.

        The color of the gadget. Should be one of `blue`, `red`, `yellow`, `green`, `cyan`, `purple`, `gray`, or `white`.  # noqa: E501

        :param color: The color of this DashboardGadgetSettings.
        :type color: str
        """

        self._color = color

    @property
    def ignore_uri_and_module_key_validation(self) -> bool:
        """Gets the ignore_uri_and_module_key_validation of this DashboardGadgetSettings.

        Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.  # noqa: E501

        :return: The ignore_uri_and_module_key_validation of this DashboardGadgetSettings.
        :rtype: bool
        """
        return self._ignore_uri_and_module_key_validation

    @ignore_uri_and_module_key_validation.setter
    def ignore_uri_and_module_key_validation(self, ignore_uri_and_module_key_validation: bool):
        """Sets the ignore_uri_and_module_key_validation of this DashboardGadgetSettings.

        Whether to ignore the validation of module key and URI. For example, when a gadget is created that is a part of an application that isn't installed.  # noqa: E501

        :param ignore_uri_and_module_key_validation: The ignore_uri_and_module_key_validation of this DashboardGadgetSettings.
        :type ignore_uri_and_module_key_validation: bool
        """

        self._ignore_uri_and_module_key_validation = ignore_uri_and_module_key_validation

    @property
    def module_key(self) -> str:
        """Gets the module_key of this DashboardGadgetSettings.

        The module key of the gadget type. Can't be provided with `uri`.  # noqa: E501

        :return: The module_key of this DashboardGadgetSettings.
        :rtype: str
        """
        return self._module_key

    @module_key.setter
    def module_key(self, module_key: str):
        """Sets the module_key of this DashboardGadgetSettings.

        The module key of the gadget type. Can't be provided with `uri`.  # noqa: E501

        :param module_key: The module_key of this DashboardGadgetSettings.
        :type module_key: str
        """

        self._module_key = module_key

    @property
    def position(self) -> DashboardGadgetPosition:
        """Gets the position of this DashboardGadgetSettings.


        :return: The position of this DashboardGadgetSettings.
        :rtype: DashboardGadgetPosition
        """
        return self._position

    @position.setter
    def position(self, position: DashboardGadgetPosition):
        """Sets the position of this DashboardGadgetSettings.


        :param position: The position of this DashboardGadgetSettings.
        :type position: DashboardGadgetPosition
        """

        self._position = position

    @property
    def title(self) -> str:
        """Gets the title of this DashboardGadgetSettings.

        The title of the gadget.  # noqa: E501

        :return: The title of this DashboardGadgetSettings.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this DashboardGadgetSettings.

        The title of the gadget.  # noqa: E501

        :param title: The title of this DashboardGadgetSettings.
        :type title: str
        """

        self._title = title

    @property
    def uri(self) -> str:
        """Gets the uri of this DashboardGadgetSettings.

        The URI of the gadget type. Can't be provided with `moduleKey`.  # noqa: E501

        :return: The uri of this DashboardGadgetSettings.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this DashboardGadgetSettings.

        The URI of the gadget type. Can't be provided with `moduleKey`.  # noqa: E501

        :param uri: The uri of this DashboardGadgetSettings.
        :type uri: str
        """

        self._uri = uri
