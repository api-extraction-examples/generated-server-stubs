from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_clause import JqlQueryClause
from openapi_server import util

from openapi_server.models.jql_query_clause import JqlQueryClause  # noqa: E501

class CompoundClause(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, clauses=None, operator=None):  # noqa: E501
        """CompoundClause - a model defined in OpenAPI

        :param clauses: The clauses of this CompoundClause.  # noqa: E501
        :type clauses: List[JqlQueryClause]
        :param operator: The operator of this CompoundClause.  # noqa: E501
        :type operator: str
        """
        self.openapi_types = {
            'clauses': List[JqlQueryClause],
            'operator': str
        }

        self.attribute_map = {
            'clauses': 'clauses',
            'operator': 'operator'
        }

        self._clauses = clauses
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt) -> 'CompoundClause':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CompoundClause of this CompoundClause.  # noqa: E501
        :rtype: CompoundClause
        """
        return util.deserialize_model(dikt, cls)

    @property
    def clauses(self) -> List[JqlQueryClause]:
        """Gets the clauses of this CompoundClause.

        The list of nested clauses.  # noqa: E501

        :return: The clauses of this CompoundClause.
        :rtype: List[JqlQueryClause]
        """
        return self._clauses

    @clauses.setter
    def clauses(self, clauses: List[JqlQueryClause]):
        """Sets the clauses of this CompoundClause.

        The list of nested clauses.  # noqa: E501

        :param clauses: The clauses of this CompoundClause.
        :type clauses: List[JqlQueryClause]
        """
        if clauses is None:
            raise ValueError("Invalid value for `clauses`, must not be `None`")  # noqa: E501

        self._clauses = clauses

    @property
    def operator(self) -> str:
        """Gets the operator of this CompoundClause.

        The operator between the clauses.  # noqa: E501

        :return: The operator of this CompoundClause.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this CompoundClause.

        The operator between the clauses.  # noqa: E501

        :param operator: The operator of this CompoundClause.
        :type operator: str
        """
        allowed_values = ["and", "or", "not"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
