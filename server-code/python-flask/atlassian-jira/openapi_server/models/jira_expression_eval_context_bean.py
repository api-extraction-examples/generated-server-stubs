from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.custom_context_variable import CustomContextVariable
from openapi_server.models.id_or_key_bean import IdOrKeyBean
from openapi_server.models.jexp_issues import JexpIssues
from openapi_server import util

from openapi_server.models.custom_context_variable import CustomContextVariable  # noqa: E501
from openapi_server.models.id_or_key_bean import IdOrKeyBean  # noqa: E501
from openapi_server.models.jexp_issues import JexpIssues  # noqa: E501

class JiraExpressionEvalContextBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board=None, custom=None, customer_request=None, issue=None, issues=None, project=None, service_desk=None, sprint=None):  # noqa: E501
        """JiraExpressionEvalContextBean - a model defined in OpenAPI

        :param board: The board of this JiraExpressionEvalContextBean.  # noqa: E501
        :type board: int
        :param custom: The custom of this JiraExpressionEvalContextBean.  # noqa: E501
        :type custom: List[CustomContextVariable]
        :param customer_request: The customer_request of this JiraExpressionEvalContextBean.  # noqa: E501
        :type customer_request: int
        :param issue: The issue of this JiraExpressionEvalContextBean.  # noqa: E501
        :type issue: IdOrKeyBean
        :param issues: The issues of this JiraExpressionEvalContextBean.  # noqa: E501
        :type issues: JexpIssues
        :param project: The project of this JiraExpressionEvalContextBean.  # noqa: E501
        :type project: IdOrKeyBean
        :param service_desk: The service_desk of this JiraExpressionEvalContextBean.  # noqa: E501
        :type service_desk: int
        :param sprint: The sprint of this JiraExpressionEvalContextBean.  # noqa: E501
        :type sprint: int
        """
        self.openapi_types = {
            'board': int,
            'custom': List[CustomContextVariable],
            'customer_request': int,
            'issue': IdOrKeyBean,
            'issues': JexpIssues,
            'project': IdOrKeyBean,
            'service_desk': int,
            'sprint': int
        }

        self.attribute_map = {
            'board': 'board',
            'custom': 'custom',
            'customer_request': 'customerRequest',
            'issue': 'issue',
            'issues': 'issues',
            'project': 'project',
            'service_desk': 'serviceDesk',
            'sprint': 'sprint'
        }

        self._board = board
        self._custom = custom
        self._customer_request = customer_request
        self._issue = issue
        self._issues = issues
        self._project = project
        self._service_desk = service_desk
        self._sprint = sprint

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionEvalContextBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionEvalContextBean of this JiraExpressionEvalContextBean.  # noqa: E501
        :rtype: JiraExpressionEvalContextBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board(self) -> int:
        """Gets the board of this JiraExpressionEvalContextBean.

        The ID of the board that is available under the `board` variable when evaluating the expression.  # noqa: E501

        :return: The board of this JiraExpressionEvalContextBean.
        :rtype: int
        """
        return self._board

    @board.setter
    def board(self, board: int):
        """Sets the board of this JiraExpressionEvalContextBean.

        The ID of the board that is available under the `board` variable when evaluating the expression.  # noqa: E501

        :param board: The board of this JiraExpressionEvalContextBean.
        :type board: int
        """

        self._board = board

    @property
    def custom(self) -> List[CustomContextVariable]:
        """Gets the custom of this JiraExpressionEvalContextBean.

        Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.  # noqa: E501

        :return: The custom of this JiraExpressionEvalContextBean.
        :rtype: List[CustomContextVariable]
        """
        return self._custom

    @custom.setter
    def custom(self, custom: List[CustomContextVariable]):
        """Sets the custom of this JiraExpressionEvalContextBean.

        Custom context variables and their types. These variable types are available for use in a custom context:   *  `user`: A [user](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#user) specified as an Atlassian account ID.  *  `issue`: An [issue](https://developer.atlassian.com/cloud/jira/platform/jira-expressions-type-reference#issue) specified by ID or key. All the fields of the issue object are available in the Jira expression.  *  `json`: A JSON object containing custom content.  *  `list`: A JSON list of `user`, `issue`, or `json` variable types.  # noqa: E501

        :param custom: The custom of this JiraExpressionEvalContextBean.
        :type custom: List[CustomContextVariable]
        """

        self._custom = custom

    @property
    def customer_request(self) -> int:
        """Gets the customer_request of this JiraExpressionEvalContextBean.

        The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.  # noqa: E501

        :return: The customer_request of this JiraExpressionEvalContextBean.
        :rtype: int
        """
        return self._customer_request

    @customer_request.setter
    def customer_request(self, customer_request: int):
        """Sets the customer_request of this JiraExpressionEvalContextBean.

        The ID of the customer request that is available under the `customerRequest` variable when evaluating the expression. This is the same as the ID of the underlying Jira issue, but the customer request context variable will have a different type.  # noqa: E501

        :param customer_request: The customer_request of this JiraExpressionEvalContextBean.
        :type customer_request: int
        """

        self._customer_request = customer_request

    @property
    def issue(self) -> IdOrKeyBean:
        """Gets the issue of this JiraExpressionEvalContextBean.


        :return: The issue of this JiraExpressionEvalContextBean.
        :rtype: IdOrKeyBean
        """
        return self._issue

    @issue.setter
    def issue(self, issue: IdOrKeyBean):
        """Sets the issue of this JiraExpressionEvalContextBean.


        :param issue: The issue of this JiraExpressionEvalContextBean.
        :type issue: IdOrKeyBean
        """

        self._issue = issue

    @property
    def issues(self) -> JexpIssues:
        """Gets the issues of this JiraExpressionEvalContextBean.


        :return: The issues of this JiraExpressionEvalContextBean.
        :rtype: JexpIssues
        """
        return self._issues

    @issues.setter
    def issues(self, issues: JexpIssues):
        """Sets the issues of this JiraExpressionEvalContextBean.


        :param issues: The issues of this JiraExpressionEvalContextBean.
        :type issues: JexpIssues
        """

        self._issues = issues

    @property
    def project(self) -> IdOrKeyBean:
        """Gets the project of this JiraExpressionEvalContextBean.


        :return: The project of this JiraExpressionEvalContextBean.
        :rtype: IdOrKeyBean
        """
        return self._project

    @project.setter
    def project(self, project: IdOrKeyBean):
        """Sets the project of this JiraExpressionEvalContextBean.


        :param project: The project of this JiraExpressionEvalContextBean.
        :type project: IdOrKeyBean
        """

        self._project = project

    @property
    def service_desk(self) -> int:
        """Gets the service_desk of this JiraExpressionEvalContextBean.

        The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.  # noqa: E501

        :return: The service_desk of this JiraExpressionEvalContextBean.
        :rtype: int
        """
        return self._service_desk

    @service_desk.setter
    def service_desk(self, service_desk: int):
        """Sets the service_desk of this JiraExpressionEvalContextBean.

        The ID of the service desk that is available under the `serviceDesk` variable when evaluating the expression.  # noqa: E501

        :param service_desk: The service_desk of this JiraExpressionEvalContextBean.
        :type service_desk: int
        """

        self._service_desk = service_desk

    @property
    def sprint(self) -> int:
        """Gets the sprint of this JiraExpressionEvalContextBean.

        The ID of the sprint that is available under the `sprint` variable when evaluating the expression.  # noqa: E501

        :return: The sprint of this JiraExpressionEvalContextBean.
        :rtype: int
        """
        return self._sprint

    @sprint.setter
    def sprint(self, sprint: int):
        """Sets the sprint of this JiraExpressionEvalContextBean.

        The ID of the sprint that is available under the `sprint` variable when evaluating the expression.  # noqa: E501

        :param sprint: The sprint of this JiraExpressionEvalContextBean.
        :type sprint: int
        """

        self._sprint = sprint
