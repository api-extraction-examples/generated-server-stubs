from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.ui_modification_context_details import UiModificationContextDetails
from openapi_server import util

from openapi_server.models.ui_modification_context_details import UiModificationContextDetails  # noqa: E501

class CreateUiModificationDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, contexts=None, data=None, description=None, name=None):  # noqa: E501
        """CreateUiModificationDetails - a model defined in OpenAPI

        :param contexts: The contexts of this CreateUiModificationDetails.  # noqa: E501
        :type contexts: List[UiModificationContextDetails]
        :param data: The data of this CreateUiModificationDetails.  # noqa: E501
        :type data: str
        :param description: The description of this CreateUiModificationDetails.  # noqa: E501
        :type description: str
        :param name: The name of this CreateUiModificationDetails.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'contexts': List[UiModificationContextDetails],
            'data': str,
            'description': str,
            'name': str
        }

        self.attribute_map = {
            'contexts': 'contexts',
            'data': 'data',
            'description': 'description',
            'name': 'name'
        }

        self._contexts = contexts
        self._data = data
        self._description = description
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'CreateUiModificationDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateUiModificationDetails of this CreateUiModificationDetails.  # noqa: E501
        :rtype: CreateUiModificationDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def contexts(self) -> List[UiModificationContextDetails]:
        """Gets the contexts of this CreateUiModificationDetails.

        List of contexts of the UI modification. The maximum number of contexts is 1000.  # noqa: E501

        :return: The contexts of this CreateUiModificationDetails.
        :rtype: List[UiModificationContextDetails]
        """
        return self._contexts

    @contexts.setter
    def contexts(self, contexts: List[UiModificationContextDetails]):
        """Sets the contexts of this CreateUiModificationDetails.

        List of contexts of the UI modification. The maximum number of contexts is 1000.  # noqa: E501

        :param contexts: The contexts of this CreateUiModificationDetails.
        :type contexts: List[UiModificationContextDetails]
        """

        self._contexts = contexts

    @property
    def data(self) -> str:
        """Gets the data of this CreateUiModificationDetails.

        The data of the UI modification. The maximum size of the data is 50000 characters.  # noqa: E501

        :return: The data of this CreateUiModificationDetails.
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data: str):
        """Sets the data of this CreateUiModificationDetails.

        The data of the UI modification. The maximum size of the data is 50000 characters.  # noqa: E501

        :param data: The data of this CreateUiModificationDetails.
        :type data: str
        """

        self._data = data

    @property
    def description(self) -> str:
        """Gets the description of this CreateUiModificationDetails.

        The description of the UI modification. The maximum length is 255 characters.  # noqa: E501

        :return: The description of this CreateUiModificationDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateUiModificationDetails.

        The description of the UI modification. The maximum length is 255 characters.  # noqa: E501

        :param description: The description of this CreateUiModificationDetails.
        :type description: str
        """

        self._description = description

    @property
    def name(self) -> str:
        """Gets the name of this CreateUiModificationDetails.

        The name of the UI modification. The maximum length is 255 characters.  # noqa: E501

        :return: The name of this CreateUiModificationDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateUiModificationDetails.

        The name of the UI modification. The maximum length is 255 characters.  # noqa: E501

        :param name: The name of this CreateUiModificationDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
