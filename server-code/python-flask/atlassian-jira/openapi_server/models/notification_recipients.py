from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.group_name import GroupName
from openapi_server.models.user_details import UserDetails
from openapi_server import util

from openapi_server.models.group_name import GroupName  # noqa: E501
from openapi_server.models.user_details import UserDetails  # noqa: E501

class NotificationRecipients(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, assignee=None, group_ids=None, groups=None, reporter=None, users=None, voters=None, watchers=None):  # noqa: E501
        """NotificationRecipients - a model defined in OpenAPI

        :param assignee: The assignee of this NotificationRecipients.  # noqa: E501
        :type assignee: bool
        :param group_ids: The group_ids of this NotificationRecipients.  # noqa: E501
        :type group_ids: List[str]
        :param groups: The groups of this NotificationRecipients.  # noqa: E501
        :type groups: List[GroupName]
        :param reporter: The reporter of this NotificationRecipients.  # noqa: E501
        :type reporter: bool
        :param users: The users of this NotificationRecipients.  # noqa: E501
        :type users: List[UserDetails]
        :param voters: The voters of this NotificationRecipients.  # noqa: E501
        :type voters: bool
        :param watchers: The watchers of this NotificationRecipients.  # noqa: E501
        :type watchers: bool
        """
        self.openapi_types = {
            'assignee': bool,
            'group_ids': List[str],
            'groups': List[GroupName],
            'reporter': bool,
            'users': List[UserDetails],
            'voters': bool,
            'watchers': bool
        }

        self.attribute_map = {
            'assignee': 'assignee',
            'group_ids': 'groupIds',
            'groups': 'groups',
            'reporter': 'reporter',
            'users': 'users',
            'voters': 'voters',
            'watchers': 'watchers'
        }

        self._assignee = assignee
        self._group_ids = group_ids
        self._groups = groups
        self._reporter = reporter
        self._users = users
        self._voters = voters
        self._watchers = watchers

    @classmethod
    def from_dict(cls, dikt) -> 'NotificationRecipients':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NotificationRecipients of this NotificationRecipients.  # noqa: E501
        :rtype: NotificationRecipients
        """
        return util.deserialize_model(dikt, cls)

    @property
    def assignee(self) -> bool:
        """Gets the assignee of this NotificationRecipients.

        Whether the notification should be sent to the issue's assignees.  # noqa: E501

        :return: The assignee of this NotificationRecipients.
        :rtype: bool
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee: bool):
        """Sets the assignee of this NotificationRecipients.

        Whether the notification should be sent to the issue's assignees.  # noqa: E501

        :param assignee: The assignee of this NotificationRecipients.
        :type assignee: bool
        """

        self._assignee = assignee

    @property
    def group_ids(self) -> List[str]:
        """Gets the group_ids of this NotificationRecipients.

        List of groupIds to receive the notification.  # noqa: E501

        :return: The group_ids of this NotificationRecipients.
        :rtype: List[str]
        """
        return self._group_ids

    @group_ids.setter
    def group_ids(self, group_ids: List[str]):
        """Sets the group_ids of this NotificationRecipients.

        List of groupIds to receive the notification.  # noqa: E501

        :param group_ids: The group_ids of this NotificationRecipients.
        :type group_ids: List[str]
        """

        self._group_ids = group_ids

    @property
    def groups(self) -> List[GroupName]:
        """Gets the groups of this NotificationRecipients.

        List of groups to receive the notification.  # noqa: E501

        :return: The groups of this NotificationRecipients.
        :rtype: List[GroupName]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[GroupName]):
        """Sets the groups of this NotificationRecipients.

        List of groups to receive the notification.  # noqa: E501

        :param groups: The groups of this NotificationRecipients.
        :type groups: List[GroupName]
        """

        self._groups = groups

    @property
    def reporter(self) -> bool:
        """Gets the reporter of this NotificationRecipients.

        Whether the notification should be sent to the issue's reporter.  # noqa: E501

        :return: The reporter of this NotificationRecipients.
        :rtype: bool
        """
        return self._reporter

    @reporter.setter
    def reporter(self, reporter: bool):
        """Sets the reporter of this NotificationRecipients.

        Whether the notification should be sent to the issue's reporter.  # noqa: E501

        :param reporter: The reporter of this NotificationRecipients.
        :type reporter: bool
        """

        self._reporter = reporter

    @property
    def users(self) -> List[UserDetails]:
        """Gets the users of this NotificationRecipients.

        List of users to receive the notification.  # noqa: E501

        :return: The users of this NotificationRecipients.
        :rtype: List[UserDetails]
        """
        return self._users

    @users.setter
    def users(self, users: List[UserDetails]):
        """Sets the users of this NotificationRecipients.

        List of users to receive the notification.  # noqa: E501

        :param users: The users of this NotificationRecipients.
        :type users: List[UserDetails]
        """

        self._users = users

    @property
    def voters(self) -> bool:
        """Gets the voters of this NotificationRecipients.

        Whether the notification should be sent to the issue's voters.  # noqa: E501

        :return: The voters of this NotificationRecipients.
        :rtype: bool
        """
        return self._voters

    @voters.setter
    def voters(self, voters: bool):
        """Sets the voters of this NotificationRecipients.

        Whether the notification should be sent to the issue's voters.  # noqa: E501

        :param voters: The voters of this NotificationRecipients.
        :type voters: bool
        """

        self._voters = voters

    @property
    def watchers(self) -> bool:
        """Gets the watchers of this NotificationRecipients.

        Whether the notification should be sent to the issue's watchers.  # noqa: E501

        :return: The watchers of this NotificationRecipients.
        :rtype: bool
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers: bool):
        """Sets the watchers of this NotificationRecipients.

        Whether the notification should be sent to the issue's watchers.  # noqa: E501

        :param watchers: The watchers of this NotificationRecipients.
        :type watchers: bool
        """

        self._watchers = watchers
