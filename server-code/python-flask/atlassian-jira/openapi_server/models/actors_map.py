from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ActorsMap(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group=None, group_id=None, user=None):  # noqa: E501
        """ActorsMap - a model defined in OpenAPI

        :param group: The group of this ActorsMap.  # noqa: E501
        :type group: List[str]
        :param group_id: The group_id of this ActorsMap.  # noqa: E501
        :type group_id: List[str]
        :param user: The user of this ActorsMap.  # noqa: E501
        :type user: List[str]
        """
        self.openapi_types = {
            'group': List[str],
            'group_id': List[str],
            'user': List[str]
        }

        self.attribute_map = {
            'group': 'group',
            'group_id': 'groupId',
            'user': 'user'
        }

        self._group = group
        self._group_id = group_id
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'ActorsMap':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ActorsMap of this ActorsMap.  # noqa: E501
        :rtype: ActorsMap
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> List[str]:
        """Gets the group of this ActorsMap.

        The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.  # noqa: E501

        :return: The group of this ActorsMap.
        :rtype: List[str]
        """
        return self._group

    @group.setter
    def group(self, group: List[str]):
        """Sets the group of this ActorsMap.

        The name of the group to add. This parameter cannot be used with the `groupId` parameter. As a group's name can change, use of `groupId` is recommended.  # noqa: E501

        :param group: The group of this ActorsMap.
        :type group: List[str]
        """

        self._group = group

    @property
    def group_id(self) -> List[str]:
        """Gets the group_id of this ActorsMap.

        The ID of the group to add. This parameter cannot be used with the `group` parameter.  # noqa: E501

        :return: The group_id of this ActorsMap.
        :rtype: List[str]
        """
        return self._group_id

    @group_id.setter
    def group_id(self, group_id: List[str]):
        """Sets the group_id of this ActorsMap.

        The ID of the group to add. This parameter cannot be used with the `group` parameter.  # noqa: E501

        :param group_id: The group_id of this ActorsMap.
        :type group_id: List[str]
        """

        self._group_id = group_id

    @property
    def user(self) -> List[str]:
        """Gets the user of this ActorsMap.

        The user account ID of the user to add.  # noqa: E501

        :return: The user of this ActorsMap.
        :rtype: List[str]
        """
        return self._user

    @user.setter
    def user(self, user: List[str]):
        """Sets the user of this ActorsMap.

        The user account ID of the user to add.  # noqa: E501

        :param user: The user of this ActorsMap.
        :type user: List[str]
        """

        self._user = user
