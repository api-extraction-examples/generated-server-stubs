from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateCustomFieldContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, id=None, issue_type_ids=None, name=None, project_ids=None):  # noqa: E501
        """CreateCustomFieldContext - a model defined in OpenAPI

        :param description: The description of this CreateCustomFieldContext.  # noqa: E501
        :type description: str
        :param id: The id of this CreateCustomFieldContext.  # noqa: E501
        :type id: str
        :param issue_type_ids: The issue_type_ids of this CreateCustomFieldContext.  # noqa: E501
        :type issue_type_ids: List[str]
        :param name: The name of this CreateCustomFieldContext.  # noqa: E501
        :type name: str
        :param project_ids: The project_ids of this CreateCustomFieldContext.  # noqa: E501
        :type project_ids: List[str]
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'issue_type_ids': List[str],
            'name': str,
            'project_ids': List[str]
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'issue_type_ids': 'issueTypeIds',
            'name': 'name',
            'project_ids': 'projectIds'
        }

        self._description = description
        self._id = id
        self._issue_type_ids = issue_type_ids
        self._name = name
        self._project_ids = project_ids

    @classmethod
    def from_dict(cls, dikt) -> 'CreateCustomFieldContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateCustomFieldContext of this CreateCustomFieldContext.  # noqa: E501
        :rtype: CreateCustomFieldContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this CreateCustomFieldContext.

        The description of the context.  # noqa: E501

        :return: The description of this CreateCustomFieldContext.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreateCustomFieldContext.

        The description of the context.  # noqa: E501

        :param description: The description of this CreateCustomFieldContext.
        :type description: str
        """

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this CreateCustomFieldContext.

        The ID of the context.  # noqa: E501

        :return: The id of this CreateCustomFieldContext.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CreateCustomFieldContext.

        The ID of the context.  # noqa: E501

        :param id: The id of this CreateCustomFieldContext.
        :type id: str
        """

        self._id = id

    @property
    def issue_type_ids(self) -> List[str]:
        """Gets the issue_type_ids of this CreateCustomFieldContext.

        The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.  # noqa: E501

        :return: The issue_type_ids of this CreateCustomFieldContext.
        :rtype: List[str]
        """
        return self._issue_type_ids

    @issue_type_ids.setter
    def issue_type_ids(self, issue_type_ids: List[str]):
        """Sets the issue_type_ids of this CreateCustomFieldContext.

        The list of issue types IDs for the context. If the list is empty, the context refers to all issue types.  # noqa: E501

        :param issue_type_ids: The issue_type_ids of this CreateCustomFieldContext.
        :type issue_type_ids: List[str]
        """

        self._issue_type_ids = issue_type_ids

    @property
    def name(self) -> str:
        """Gets the name of this CreateCustomFieldContext.

        The name of the context.  # noqa: E501

        :return: The name of this CreateCustomFieldContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CreateCustomFieldContext.

        The name of the context.  # noqa: E501

        :param name: The name of this CreateCustomFieldContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def project_ids(self) -> List[str]:
        """Gets the project_ids of this CreateCustomFieldContext.

        The list of project IDs associated with the context. If the list is empty, the context is global.  # noqa: E501

        :return: The project_ids of this CreateCustomFieldContext.
        :rtype: List[str]
        """
        return self._project_ids

    @project_ids.setter
    def project_ids(self, project_ids: List[str]):
        """Sets the project_ids of this CreateCustomFieldContext.

        The list of project IDs associated with the context. If the list is empty, the context is global.  # noqa: E501

        :param project_ids: The project_ids of this CreateCustomFieldContext.
        :type project_ids: List[str]
        """

        self._project_ids = project_ids
