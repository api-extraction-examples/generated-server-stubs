from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.function_operand import FunctionOperand
from openapi_server.models.jql_query_unitary_operand import JqlQueryUnitaryOperand
from openapi_server.models.keyword_operand import KeywordOperand
from openapi_server.models.list_operand import ListOperand
from openapi_server.models.value_operand import ValueOperand
from openapi_server import util

from openapi_server.models.function_operand import FunctionOperand  # noqa: E501
from openapi_server.models.jql_query_unitary_operand import JqlQueryUnitaryOperand  # noqa: E501
from openapi_server.models.keyword_operand import KeywordOperand  # noqa: E501
from openapi_server.models.list_operand import ListOperand  # noqa: E501
from openapi_server.models.value_operand import ValueOperand  # noqa: E501

class JqlQueryClauseOperand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, encoded_operand=None, values=None, encoded_value=None, value=None, arguments=None, function=None, keyword=None):  # noqa: E501
        """JqlQueryClauseOperand - a model defined in OpenAPI

        :param encoded_operand: The encoded_operand of this JqlQueryClauseOperand.  # noqa: E501
        :type encoded_operand: str
        :param values: The values of this JqlQueryClauseOperand.  # noqa: E501
        :type values: List[JqlQueryUnitaryOperand]
        :param encoded_value: The encoded_value of this JqlQueryClauseOperand.  # noqa: E501
        :type encoded_value: str
        :param value: The value of this JqlQueryClauseOperand.  # noqa: E501
        :type value: str
        :param arguments: The arguments of this JqlQueryClauseOperand.  # noqa: E501
        :type arguments: List[str]
        :param function: The function of this JqlQueryClauseOperand.  # noqa: E501
        :type function: str
        :param keyword: The keyword of this JqlQueryClauseOperand.  # noqa: E501
        :type keyword: str
        """
        self.openapi_types = {
            'encoded_operand': str,
            'values': List[JqlQueryUnitaryOperand],
            'encoded_value': str,
            'value': str,
            'arguments': List[str],
            'function': str,
            'keyword': str
        }

        self.attribute_map = {
            'encoded_operand': 'encodedOperand',
            'values': 'values',
            'encoded_value': 'encodedValue',
            'value': 'value',
            'arguments': 'arguments',
            'function': 'function',
            'keyword': 'keyword'
        }

        self._encoded_operand = encoded_operand
        self._values = values
        self._encoded_value = encoded_value
        self._value = value
        self._arguments = arguments
        self._function = function
        self._keyword = keyword

    @classmethod
    def from_dict(cls, dikt) -> 'JqlQueryClauseOperand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JqlQueryClauseOperand of this JqlQueryClauseOperand.  # noqa: E501
        :rtype: JqlQueryClauseOperand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def encoded_operand(self) -> str:
        """Gets the encoded_operand of this JqlQueryClauseOperand.

        Encoded operand, which can be used directly in a JQL query.  # noqa: E501

        :return: The encoded_operand of this JqlQueryClauseOperand.
        :rtype: str
        """
        return self._encoded_operand

    @encoded_operand.setter
    def encoded_operand(self, encoded_operand: str):
        """Sets the encoded_operand of this JqlQueryClauseOperand.

        Encoded operand, which can be used directly in a JQL query.  # noqa: E501

        :param encoded_operand: The encoded_operand of this JqlQueryClauseOperand.
        :type encoded_operand: str
        """

        self._encoded_operand = encoded_operand

    @property
    def values(self) -> List[JqlQueryUnitaryOperand]:
        """Gets the values of this JqlQueryClauseOperand.

        The list of operand values.  # noqa: E501

        :return: The values of this JqlQueryClauseOperand.
        :rtype: List[JqlQueryUnitaryOperand]
        """
        return self._values

    @values.setter
    def values(self, values: List[JqlQueryUnitaryOperand]):
        """Sets the values of this JqlQueryClauseOperand.

        The list of operand values.  # noqa: E501

        :param values: The values of this JqlQueryClauseOperand.
        :type values: List[JqlQueryUnitaryOperand]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values

    @property
    def encoded_value(self) -> str:
        """Gets the encoded_value of this JqlQueryClauseOperand.

        Encoded value, which can be used directly in a JQL query.  # noqa: E501

        :return: The encoded_value of this JqlQueryClauseOperand.
        :rtype: str
        """
        return self._encoded_value

    @encoded_value.setter
    def encoded_value(self, encoded_value: str):
        """Sets the encoded_value of this JqlQueryClauseOperand.

        Encoded value, which can be used directly in a JQL query.  # noqa: E501

        :param encoded_value: The encoded_value of this JqlQueryClauseOperand.
        :type encoded_value: str
        """

        self._encoded_value = encoded_value

    @property
    def value(self) -> str:
        """Gets the value of this JqlQueryClauseOperand.

        The operand value.  # noqa: E501

        :return: The value of this JqlQueryClauseOperand.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this JqlQueryClauseOperand.

        The operand value.  # noqa: E501

        :param value: The value of this JqlQueryClauseOperand.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    @property
    def arguments(self) -> List[str]:
        """Gets the arguments of this JqlQueryClauseOperand.

        The list of function arguments.  # noqa: E501

        :return: The arguments of this JqlQueryClauseOperand.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: List[str]):
        """Sets the arguments of this JqlQueryClauseOperand.

        The list of function arguments.  # noqa: E501

        :param arguments: The arguments of this JqlQueryClauseOperand.
        :type arguments: List[str]
        """
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")  # noqa: E501

        self._arguments = arguments

    @property
    def function(self) -> str:
        """Gets the function of this JqlQueryClauseOperand.

        The name of the function.  # noqa: E501

        :return: The function of this JqlQueryClauseOperand.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function: str):
        """Sets the function of this JqlQueryClauseOperand.

        The name of the function.  # noqa: E501

        :param function: The function of this JqlQueryClauseOperand.
        :type function: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function

    @property
    def keyword(self) -> str:
        """Gets the keyword of this JqlQueryClauseOperand.

        The keyword that is the operand value.  # noqa: E501

        :return: The keyword of this JqlQueryClauseOperand.
        :rtype: str
        """
        return self._keyword

    @keyword.setter
    def keyword(self, keyword: str):
        """Sets the keyword of this JqlQueryClauseOperand.

        The keyword that is the operand value.  # noqa: E501

        :param keyword: The keyword of this JqlQueryClauseOperand.
        :type keyword: str
        """
        allowed_values = ["empty"]  # noqa: E501
        if keyword not in allowed_values:
            raise ValueError(
                "Invalid value for `keyword` ({0}), must be one of {1}"
                .format(keyword, allowed_values)
            )

        self._keyword = keyword
