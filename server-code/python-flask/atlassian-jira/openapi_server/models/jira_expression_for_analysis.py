from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JiraExpressionForAnalysis(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_variables=None, expressions=None):  # noqa: E501
        """JiraExpressionForAnalysis - a model defined in OpenAPI

        :param context_variables: The context_variables of this JiraExpressionForAnalysis.  # noqa: E501
        :type context_variables: Dict[str, str]
        :param expressions: The expressions of this JiraExpressionForAnalysis.  # noqa: E501
        :type expressions: List[str]
        """
        self.openapi_types = {
            'context_variables': Dict[str, str],
            'expressions': List[str]
        }

        self.attribute_map = {
            'context_variables': 'contextVariables',
            'expressions': 'expressions'
        }

        self._context_variables = context_variables
        self._expressions = expressions

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionForAnalysis':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionForAnalysis of this JiraExpressionForAnalysis.  # noqa: E501
        :rtype: JiraExpressionForAnalysis
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_variables(self) -> Dict[str, str]:
        """Gets the context_variables of this JiraExpressionForAnalysis.

        Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.  # noqa: E501

        :return: The context_variables of this JiraExpressionForAnalysis.
        :rtype: Dict[str, str]
        """
        return self._context_variables

    @context_variables.setter
    def context_variables(self, context_variables: Dict[str, str]):
        """Sets the context_variables of this JiraExpressionForAnalysis.

        Context variables and their types. The type checker assumes that [common context variables](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#context-variables), such as `issue` or `project`, are available in context and sets their type. Use this property to override the default types or provide details of new variables.  # noqa: E501

        :param context_variables: The context_variables of this JiraExpressionForAnalysis.
        :type context_variables: Dict[str, str]
        """

        self._context_variables = context_variables

    @property
    def expressions(self) -> List[str]:
        """Gets the expressions of this JiraExpressionForAnalysis.

        The list of Jira expressions to analyse.  # noqa: E501

        :return: The expressions of this JiraExpressionForAnalysis.
        :rtype: List[str]
        """
        return self._expressions

    @expressions.setter
    def expressions(self, expressions: List[str]):
        """Sets the expressions of this JiraExpressionForAnalysis.

        The list of Jira expressions to analyse.  # noqa: E501

        :param expressions: The expressions of this JiraExpressionForAnalysis.
        :type expressions: List[str]
        """
        if expressions is None:
            raise ValueError("Invalid value for `expressions`, must not be `None`")  # noqa: E501

        self._expressions = expressions
