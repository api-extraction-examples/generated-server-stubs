from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_bean import IssueBean
from openapi_server.models.json_type_bean import JsonTypeBean
from openapi_server import util

from openapi_server.models.issue_bean import IssueBean  # noqa: E501
from openapi_server.models.json_type_bean import JsonTypeBean  # noqa: E501

class SearchResults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, expand=None, issues=None, max_results=None, names=None, _schema=None, start_at=None, total=None, warning_messages=None):  # noqa: E501
        """SearchResults - a model defined in OpenAPI

        :param expand: The expand of this SearchResults.  # noqa: E501
        :type expand: str
        :param issues: The issues of this SearchResults.  # noqa: E501
        :type issues: List[IssueBean]
        :param max_results: The max_results of this SearchResults.  # noqa: E501
        :type max_results: int
        :param names: The names of this SearchResults.  # noqa: E501
        :type names: Dict[str, str]
        :param _schema: The _schema of this SearchResults.  # noqa: E501
        :type _schema: Dict[str, JsonTypeBean]
        :param start_at: The start_at of this SearchResults.  # noqa: E501
        :type start_at: int
        :param total: The total of this SearchResults.  # noqa: E501
        :type total: int
        :param warning_messages: The warning_messages of this SearchResults.  # noqa: E501
        :type warning_messages: List[str]
        """
        self.openapi_types = {
            'expand': str,
            'issues': List[IssueBean],
            'max_results': int,
            'names': Dict[str, str],
            '_schema': Dict[str, JsonTypeBean],
            'start_at': int,
            'total': int,
            'warning_messages': List[str]
        }

        self.attribute_map = {
            'expand': 'expand',
            'issues': 'issues',
            'max_results': 'maxResults',
            'names': 'names',
            '_schema': 'schema',
            'start_at': 'startAt',
            'total': 'total',
            'warning_messages': 'warningMessages'
        }

        self._expand = expand
        self._issues = issues
        self._max_results = max_results
        self._names = names
        self.__schema = _schema
        self._start_at = start_at
        self._total = total
        self._warning_messages = warning_messages

    @classmethod
    def from_dict(cls, dikt) -> 'SearchResults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SearchResults of this SearchResults.  # noqa: E501
        :rtype: SearchResults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def expand(self) -> str:
        """Gets the expand of this SearchResults.

        Expand options that include additional search result details in the response.  # noqa: E501

        :return: The expand of this SearchResults.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand: str):
        """Sets the expand of this SearchResults.

        Expand options that include additional search result details in the response.  # noqa: E501

        :param expand: The expand of this SearchResults.
        :type expand: str
        """

        self._expand = expand

    @property
    def issues(self) -> List[IssueBean]:
        """Gets the issues of this SearchResults.

        The list of issues found by the search.  # noqa: E501

        :return: The issues of this SearchResults.
        :rtype: List[IssueBean]
        """
        return self._issues

    @issues.setter
    def issues(self, issues: List[IssueBean]):
        """Sets the issues of this SearchResults.

        The list of issues found by the search.  # noqa: E501

        :param issues: The issues of this SearchResults.
        :type issues: List[IssueBean]
        """

        self._issues = issues

    @property
    def max_results(self) -> int:
        """Gets the max_results of this SearchResults.

        The maximum number of results that could be on the page.  # noqa: E501

        :return: The max_results of this SearchResults.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this SearchResults.

        The maximum number of results that could be on the page.  # noqa: E501

        :param max_results: The max_results of this SearchResults.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def names(self) -> Dict[str, str]:
        """Gets the names of this SearchResults.

        The ID and name of each field in the search results.  # noqa: E501

        :return: The names of this SearchResults.
        :rtype: Dict[str, str]
        """
        return self._names

    @names.setter
    def names(self, names: Dict[str, str]):
        """Sets the names of this SearchResults.

        The ID and name of each field in the search results.  # noqa: E501

        :param names: The names of this SearchResults.
        :type names: Dict[str, str]
        """

        self._names = names

    @property
    def _schema(self) -> Dict[str, JsonTypeBean]:
        """Gets the _schema of this SearchResults.

        The schema describing the field types in the search results.  # noqa: E501

        :return: The _schema of this SearchResults.
        :rtype: Dict[str, JsonTypeBean]
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: Dict[str, JsonTypeBean]):
        """Sets the _schema of this SearchResults.

        The schema describing the field types in the search results.  # noqa: E501

        :param _schema: The _schema of this SearchResults.
        :type _schema: Dict[str, JsonTypeBean]
        """

        self.__schema = _schema

    @property
    def start_at(self) -> int:
        """Gets the start_at of this SearchResults.

        The index of the first item returned on the page.  # noqa: E501

        :return: The start_at of this SearchResults.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at: int):
        """Sets the start_at of this SearchResults.

        The index of the first item returned on the page.  # noqa: E501

        :param start_at: The start_at of this SearchResults.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def total(self) -> int:
        """Gets the total of this SearchResults.

        The number of results on the page.  # noqa: E501

        :return: The total of this SearchResults.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this SearchResults.

        The number of results on the page.  # noqa: E501

        :param total: The total of this SearchResults.
        :type total: int
        """

        self._total = total

    @property
    def warning_messages(self) -> List[str]:
        """Gets the warning_messages of this SearchResults.

        Any warnings related to the JQL query.  # noqa: E501

        :return: The warning_messages of this SearchResults.
        :rtype: List[str]
        """
        return self._warning_messages

    @warning_messages.setter
    def warning_messages(self, warning_messages: List[str]):
        """Sets the warning_messages of this SearchResults.

        Any warnings related to the JQL query.  # noqa: E501

        :param warning_messages: The warning_messages of this SearchResults.
        :type warning_messages: List[str]
        """

        self._warning_messages = warning_messages
