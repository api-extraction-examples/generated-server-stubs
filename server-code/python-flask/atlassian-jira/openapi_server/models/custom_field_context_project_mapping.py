from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextProjectMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id=None, is_global_context=None, project_id=None):  # noqa: E501
        """CustomFieldContextProjectMapping - a model defined in OpenAPI

        :param context_id: The context_id of this CustomFieldContextProjectMapping.  # noqa: E501
        :type context_id: str
        :param is_global_context: The is_global_context of this CustomFieldContextProjectMapping.  # noqa: E501
        :type is_global_context: bool
        :param project_id: The project_id of this CustomFieldContextProjectMapping.  # noqa: E501
        :type project_id: str
        """
        self.openapi_types = {
            'context_id': str,
            'is_global_context': bool,
            'project_id': str
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'is_global_context': 'isGlobalContext',
            'project_id': 'projectId'
        }

        self._context_id = context_id
        self._is_global_context = is_global_context
        self._project_id = project_id

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldContextProjectMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldContextProjectMapping of this CustomFieldContextProjectMapping.  # noqa: E501
        :rtype: CustomFieldContextProjectMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self) -> str:
        """Gets the context_id of this CustomFieldContextProjectMapping.

        The ID of the context.  # noqa: E501

        :return: The context_id of this CustomFieldContextProjectMapping.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id: str):
        """Sets the context_id of this CustomFieldContextProjectMapping.

        The ID of the context.  # noqa: E501

        :param context_id: The context_id of this CustomFieldContextProjectMapping.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")  # noqa: E501

        self._context_id = context_id

    @property
    def is_global_context(self) -> bool:
        """Gets the is_global_context of this CustomFieldContextProjectMapping.

        Whether context is global.  # noqa: E501

        :return: The is_global_context of this CustomFieldContextProjectMapping.
        :rtype: bool
        """
        return self._is_global_context

    @is_global_context.setter
    def is_global_context(self, is_global_context: bool):
        """Sets the is_global_context of this CustomFieldContextProjectMapping.

        Whether context is global.  # noqa: E501

        :param is_global_context: The is_global_context of this CustomFieldContextProjectMapping.
        :type is_global_context: bool
        """

        self._is_global_context = is_global_context

    @property
    def project_id(self) -> str:
        """Gets the project_id of this CustomFieldContextProjectMapping.

        The ID of the project.  # noqa: E501

        :return: The project_id of this CustomFieldContextProjectMapping.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this CustomFieldContextProjectMapping.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this CustomFieldContextProjectMapping.
        :type project_id: str
        """

        self._project_id = project_id
