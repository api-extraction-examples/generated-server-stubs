from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.comment import Comment
from openapi_server import util

from openapi_server.models.comment import Comment  # noqa: E501

class PaginatedResponseComment(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results=None, results=None, start_at=None, total=None):  # noqa: E501
        """PaginatedResponseComment - a model defined in OpenAPI

        :param max_results: The max_results of this PaginatedResponseComment.  # noqa: E501
        :type max_results: int
        :param results: The results of this PaginatedResponseComment.  # noqa: E501
        :type results: List[Comment]
        :param start_at: The start_at of this PaginatedResponseComment.  # noqa: E501
        :type start_at: int
        :param total: The total of this PaginatedResponseComment.  # noqa: E501
        :type total: int
        """
        self.openapi_types = {
            'max_results': int,
            'results': List[Comment],
            'start_at': int,
            'total': int
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'results': 'results',
            'start_at': 'startAt',
            'total': 'total'
        }

        self._max_results = max_results
        self._results = results
        self._start_at = start_at
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'PaginatedResponseComment':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PaginatedResponseComment of this PaginatedResponseComment.  # noqa: E501
        :rtype: PaginatedResponseComment
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self) -> int:
        """Gets the max_results of this PaginatedResponseComment.


        :return: The max_results of this PaginatedResponseComment.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this PaginatedResponseComment.


        :param max_results: The max_results of this PaginatedResponseComment.
        :type max_results: int
        """

        self._max_results = max_results

    @property
    def results(self) -> List[Comment]:
        """Gets the results of this PaginatedResponseComment.


        :return: The results of this PaginatedResponseComment.
        :rtype: List[Comment]
        """
        return self._results

    @results.setter
    def results(self, results: List[Comment]):
        """Sets the results of this PaginatedResponseComment.


        :param results: The results of this PaginatedResponseComment.
        :type results: List[Comment]
        """

        self._results = results

    @property
    def start_at(self) -> int:
        """Gets the start_at of this PaginatedResponseComment.


        :return: The start_at of this PaginatedResponseComment.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at: int):
        """Sets the start_at of this PaginatedResponseComment.


        :param start_at: The start_at of this PaginatedResponseComment.
        :type start_at: int
        """

        self._start_at = start_at

    @property
    def total(self) -> int:
        """Gets the total of this PaginatedResponseComment.


        :return: The total of this PaginatedResponseComment.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this PaginatedResponseComment.


        :param total: The total of this PaginatedResponseComment.
        :type total: int
        """

        self._total = total
