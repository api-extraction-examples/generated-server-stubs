from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SoftwareNavigationInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, board_id=None, board_name=None, simple_board=None, total_boards_in_project=None):  # noqa: E501
        """SoftwareNavigationInfo - a model defined in OpenAPI

        :param board_id: The board_id of this SoftwareNavigationInfo.  # noqa: E501
        :type board_id: int
        :param board_name: The board_name of this SoftwareNavigationInfo.  # noqa: E501
        :type board_name: str
        :param simple_board: The simple_board of this SoftwareNavigationInfo.  # noqa: E501
        :type simple_board: bool
        :param total_boards_in_project: The total_boards_in_project of this SoftwareNavigationInfo.  # noqa: E501
        :type total_boards_in_project: int
        """
        self.openapi_types = {
            'board_id': int,
            'board_name': str,
            'simple_board': bool,
            'total_boards_in_project': int
        }

        self.attribute_map = {
            'board_id': 'boardId',
            'board_name': 'boardName',
            'simple_board': 'simpleBoard',
            'total_boards_in_project': 'totalBoardsInProject'
        }

        self._board_id = board_id
        self._board_name = board_name
        self._simple_board = simple_board
        self._total_boards_in_project = total_boards_in_project

    @classmethod
    def from_dict(cls, dikt) -> 'SoftwareNavigationInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SoftwareNavigationInfo of this SoftwareNavigationInfo.  # noqa: E501
        :rtype: SoftwareNavigationInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def board_id(self) -> int:
        """Gets the board_id of this SoftwareNavigationInfo.


        :return: The board_id of this SoftwareNavigationInfo.
        :rtype: int
        """
        return self._board_id

    @board_id.setter
    def board_id(self, board_id: int):
        """Sets the board_id of this SoftwareNavigationInfo.


        :param board_id: The board_id of this SoftwareNavigationInfo.
        :type board_id: int
        """

        self._board_id = board_id

    @property
    def board_name(self) -> str:
        """Gets the board_name of this SoftwareNavigationInfo.


        :return: The board_name of this SoftwareNavigationInfo.
        :rtype: str
        """
        return self._board_name

    @board_name.setter
    def board_name(self, board_name: str):
        """Sets the board_name of this SoftwareNavigationInfo.


        :param board_name: The board_name of this SoftwareNavigationInfo.
        :type board_name: str
        """

        self._board_name = board_name

    @property
    def simple_board(self) -> bool:
        """Gets the simple_board of this SoftwareNavigationInfo.


        :return: The simple_board of this SoftwareNavigationInfo.
        :rtype: bool
        """
        return self._simple_board

    @simple_board.setter
    def simple_board(self, simple_board: bool):
        """Sets the simple_board of this SoftwareNavigationInfo.


        :param simple_board: The simple_board of this SoftwareNavigationInfo.
        :type simple_board: bool
        """

        self._simple_board = simple_board

    @property
    def total_boards_in_project(self) -> int:
        """Gets the total_boards_in_project of this SoftwareNavigationInfo.


        :return: The total_boards_in_project of this SoftwareNavigationInfo.
        :rtype: int
        """
        return self._total_boards_in_project

    @total_boards_in_project.setter
    def total_boards_in_project(self, total_boards_in_project: int):
        """Sets the total_boards_in_project of this SoftwareNavigationInfo.


        :param total_boards_in_project: The total_boards_in_project of this SoftwareNavigationInfo.
        :type total_boards_in_project: int
        """

        self._total_boards_in_project = total_boards_in_project
