from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_link_type import IssueLinkType
from openapi_server.models.linked_issue import LinkedIssue
from openapi_server import util

from openapi_server.models.issue_link_type import IssueLinkType  # noqa: E501
from openapi_server.models.linked_issue import LinkedIssue  # noqa: E501

class IssueLink(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, inward_issue=None, outward_issue=None, _self=None, type=None):  # noqa: E501
        """IssueLink - a model defined in OpenAPI

        :param id: The id of this IssueLink.  # noqa: E501
        :type id: str
        :param inward_issue: The inward_issue of this IssueLink.  # noqa: E501
        :type inward_issue: LinkedIssue
        :param outward_issue: The outward_issue of this IssueLink.  # noqa: E501
        :type outward_issue: LinkedIssue
        :param _self: The _self of this IssueLink.  # noqa: E501
        :type _self: str
        :param type: The type of this IssueLink.  # noqa: E501
        :type type: IssueLinkType
        """
        self.openapi_types = {
            'id': str,
            'inward_issue': LinkedIssue,
            'outward_issue': LinkedIssue,
            '_self': str,
            'type': IssueLinkType
        }

        self.attribute_map = {
            'id': 'id',
            'inward_issue': 'inwardIssue',
            'outward_issue': 'outwardIssue',
            '_self': 'self',
            'type': 'type'
        }

        self._id = id
        self._inward_issue = inward_issue
        self._outward_issue = outward_issue
        self.__self = _self
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'IssueLink':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueLink of this IssueLink.  # noqa: E501
        :rtype: IssueLink
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this IssueLink.

        The ID of the issue link.  # noqa: E501

        :return: The id of this IssueLink.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this IssueLink.

        The ID of the issue link.  # noqa: E501

        :param id: The id of this IssueLink.
        :type id: str
        """

        self._id = id

    @property
    def inward_issue(self) -> LinkedIssue:
        """Gets the inward_issue of this IssueLink.


        :return: The inward_issue of this IssueLink.
        :rtype: LinkedIssue
        """
        return self._inward_issue

    @inward_issue.setter
    def inward_issue(self, inward_issue: LinkedIssue):
        """Sets the inward_issue of this IssueLink.


        :param inward_issue: The inward_issue of this IssueLink.
        :type inward_issue: LinkedIssue
        """
        if inward_issue is None:
            raise ValueError("Invalid value for `inward_issue`, must not be `None`")  # noqa: E501

        self._inward_issue = inward_issue

    @property
    def outward_issue(self) -> LinkedIssue:
        """Gets the outward_issue of this IssueLink.


        :return: The outward_issue of this IssueLink.
        :rtype: LinkedIssue
        """
        return self._outward_issue

    @outward_issue.setter
    def outward_issue(self, outward_issue: LinkedIssue):
        """Sets the outward_issue of this IssueLink.


        :param outward_issue: The outward_issue of this IssueLink.
        :type outward_issue: LinkedIssue
        """
        if outward_issue is None:
            raise ValueError("Invalid value for `outward_issue`, must not be `None`")  # noqa: E501

        self._outward_issue = outward_issue

    @property
    def _self(self) -> str:
        """Gets the _self of this IssueLink.

        The URL of the issue link.  # noqa: E501

        :return: The _self of this IssueLink.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this IssueLink.

        The URL of the issue link.  # noqa: E501

        :param _self: The _self of this IssueLink.
        :type _self: str
        """

        self.__self = _self

    @property
    def type(self) -> IssueLinkType:
        """Gets the type of this IssueLink.


        :return: The type of this IssueLink.
        :rtype: IssueLinkType
        """
        return self._type

    @type.setter
    def type(self, type: IssueLinkType):
        """Sets the type of this IssueLink.


        :param type: The type of this IssueLink.
        :type type: IssueLinkType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
