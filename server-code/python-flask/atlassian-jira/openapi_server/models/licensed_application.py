from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class LicensedApplication(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, plan=None):  # noqa: E501
        """LicensedApplication - a model defined in OpenAPI

        :param id: The id of this LicensedApplication.  # noqa: E501
        :type id: str
        :param plan: The plan of this LicensedApplication.  # noqa: E501
        :type plan: str
        """
        self.openapi_types = {
            'id': str,
            'plan': str
        }

        self.attribute_map = {
            'id': 'id',
            'plan': 'plan'
        }

        self._id = id
        self._plan = plan

    @classmethod
    def from_dict(cls, dikt) -> 'LicensedApplication':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LicensedApplication of this LicensedApplication.  # noqa: E501
        :rtype: LicensedApplication
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this LicensedApplication.

        The ID of the application.  # noqa: E501

        :return: The id of this LicensedApplication.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this LicensedApplication.

        The ID of the application.  # noqa: E501

        :param id: The id of this LicensedApplication.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def plan(self) -> str:
        """Gets the plan of this LicensedApplication.

        The licensing plan.  # noqa: E501

        :return: The plan of this LicensedApplication.
        :rtype: str
        """
        return self._plan

    @plan.setter
    def plan(self, plan: str):
        """Sets the plan of this LicensedApplication.

        The licensing plan.  # noqa: E501

        :param plan: The plan of this LicensedApplication.
        :type plan: str
        """
        allowed_values = ["UNLICENSED", "FREE", "PAID"]  # noqa: E501
        if plan not in allowed_values:
            raise ValueError(
                "Invalid value for `plan` ({0}), must be one of {1}"
                .format(plan, allowed_values)
            )

        self._plan = plan
