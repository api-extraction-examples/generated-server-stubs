from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.permission_holder import PermissionHolder
from openapi_server import util

from openapi_server.models.permission_holder import PermissionHolder  # noqa: E501

class IssueSecurityLevelMember(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, holder=None, id=None, issue_security_level_id=None):  # noqa: E501
        """IssueSecurityLevelMember - a model defined in OpenAPI

        :param holder: The holder of this IssueSecurityLevelMember.  # noqa: E501
        :type holder: PermissionHolder
        :param id: The id of this IssueSecurityLevelMember.  # noqa: E501
        :type id: int
        :param issue_security_level_id: The issue_security_level_id of this IssueSecurityLevelMember.  # noqa: E501
        :type issue_security_level_id: int
        """
        self.openapi_types = {
            'holder': PermissionHolder,
            'id': int,
            'issue_security_level_id': int
        }

        self.attribute_map = {
            'holder': 'holder',
            'id': 'id',
            'issue_security_level_id': 'issueSecurityLevelId'
        }

        self._holder = holder
        self._id = id
        self._issue_security_level_id = issue_security_level_id

    @classmethod
    def from_dict(cls, dikt) -> 'IssueSecurityLevelMember':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueSecurityLevelMember of this IssueSecurityLevelMember.  # noqa: E501
        :rtype: IssueSecurityLevelMember
        """
        return util.deserialize_model(dikt, cls)

    @property
    def holder(self) -> PermissionHolder:
        """Gets the holder of this IssueSecurityLevelMember.


        :return: The holder of this IssueSecurityLevelMember.
        :rtype: PermissionHolder
        """
        return self._holder

    @holder.setter
    def holder(self, holder: PermissionHolder):
        """Sets the holder of this IssueSecurityLevelMember.


        :param holder: The holder of this IssueSecurityLevelMember.
        :type holder: PermissionHolder
        """
        if holder is None:
            raise ValueError("Invalid value for `holder`, must not be `None`")  # noqa: E501

        self._holder = holder

    @property
    def id(self) -> int:
        """Gets the id of this IssueSecurityLevelMember.

        The ID of the issue security level member.  # noqa: E501

        :return: The id of this IssueSecurityLevelMember.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this IssueSecurityLevelMember.

        The ID of the issue security level member.  # noqa: E501

        :param id: The id of this IssueSecurityLevelMember.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def issue_security_level_id(self) -> int:
        """Gets the issue_security_level_id of this IssueSecurityLevelMember.

        The ID of the issue security level.  # noqa: E501

        :return: The issue_security_level_id of this IssueSecurityLevelMember.
        :rtype: int
        """
        return self._issue_security_level_id

    @issue_security_level_id.setter
    def issue_security_level_id(self, issue_security_level_id: int):
        """Sets the issue_security_level_id of this IssueSecurityLevelMember.

        The ID of the issue security level.  # noqa: E501

        :param issue_security_level_id: The issue_security_level_id of this IssueSecurityLevelMember.
        :type issue_security_level_id: int
        """
        if issue_security_level_id is None:
            raise ValueError("Invalid value for `issue_security_level_id`, must not be `None`")  # noqa: E501

        self._issue_security_level_id = issue_security_level_id
