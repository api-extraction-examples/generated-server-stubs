from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_id import WorkflowId
from openapi_server import util

from openapi_server.models.workflow_id import WorkflowId  # noqa: E501

class WorkflowTransitionRulesUpdateErrorDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, rule_update_errors=None, update_errors=None, workflow_id=None):  # noqa: E501
        """WorkflowTransitionRulesUpdateErrorDetails - a model defined in OpenAPI

        :param rule_update_errors: The rule_update_errors of this WorkflowTransitionRulesUpdateErrorDetails.  # noqa: E501
        :type rule_update_errors: Dict[str, list[str]]
        :param update_errors: The update_errors of this WorkflowTransitionRulesUpdateErrorDetails.  # noqa: E501
        :type update_errors: list[str]
        :param workflow_id: The workflow_id of this WorkflowTransitionRulesUpdateErrorDetails.  # noqa: E501
        :type workflow_id: WorkflowId
        """
        self.openapi_types = {
            'rule_update_errors': Dict[str, list[str]],
            'update_errors': list[str],
            'workflow_id': WorkflowId
        }

        self.attribute_map = {
            'rule_update_errors': 'ruleUpdateErrors',
            'update_errors': 'updateErrors',
            'workflow_id': 'workflowId'
        }

        self._rule_update_errors = rule_update_errors
        self._update_errors = update_errors
        self._workflow_id = workflow_id

    @classmethod
    def from_dict(cls, dikt) -> 'WorkflowTransitionRulesUpdateErrorDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowTransitionRulesUpdateErrorDetails of this WorkflowTransitionRulesUpdateErrorDetails.  # noqa: E501
        :rtype: WorkflowTransitionRulesUpdateErrorDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def rule_update_errors(self) -> Dict[str, list[str]]:
        """Gets the rule_update_errors of this WorkflowTransitionRulesUpdateErrorDetails.

        A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.  # noqa: E501

        :return: The rule_update_errors of this WorkflowTransitionRulesUpdateErrorDetails.
        :rtype: Dict[str, list[str]]
        """
        return self._rule_update_errors

    @rule_update_errors.setter
    def rule_update_errors(self, rule_update_errors: Dict[str, list[str]]):
        """Sets the rule_update_errors of this WorkflowTransitionRulesUpdateErrorDetails.

        A list of transition rule update errors, indexed by the transition rule ID. Any transition rule that appears here wasn't updated.  # noqa: E501

        :param rule_update_errors: The rule_update_errors of this WorkflowTransitionRulesUpdateErrorDetails.
        :type rule_update_errors: Dict[str, list[str]]
        """
        if rule_update_errors is None:
            raise ValueError("Invalid value for `rule_update_errors`, must not be `None`")  # noqa: E501

        self._rule_update_errors = rule_update_errors

    @property
    def update_errors(self) -> list[str]:
        """Gets the update_errors of this WorkflowTransitionRulesUpdateErrorDetails.

        The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.  # noqa: E501

        :return: The update_errors of this WorkflowTransitionRulesUpdateErrorDetails.
        :rtype: list[str]
        """
        return self._update_errors

    @update_errors.setter
    def update_errors(self, update_errors: list[str]):
        """Sets the update_errors of this WorkflowTransitionRulesUpdateErrorDetails.

        The list of errors that specify why the workflow update failed. The workflow was not updated if the list contains any entries.  # noqa: E501

        :param update_errors: The update_errors of this WorkflowTransitionRulesUpdateErrorDetails.
        :type update_errors: list[str]
        """
        if update_errors is None:
            raise ValueError("Invalid value for `update_errors`, must not be `None`")  # noqa: E501

        self._update_errors = update_errors

    @property
    def workflow_id(self) -> WorkflowId:
        """Gets the workflow_id of this WorkflowTransitionRulesUpdateErrorDetails.


        :return: The workflow_id of this WorkflowTransitionRulesUpdateErrorDetails.
        :rtype: WorkflowId
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id: WorkflowId):
        """Sets the workflow_id of this WorkflowTransitionRulesUpdateErrorDetails.


        :param workflow_id: The workflow_id of this WorkflowTransitionRulesUpdateErrorDetails.
        :type workflow_id: WorkflowId
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id
