from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ApplicationProperty(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values=None, default_value=None, desc=None, example=None, id=None, key=None, name=None, type=None, value=None):  # noqa: E501
        """ApplicationProperty - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this ApplicationProperty.  # noqa: E501
        :type allowed_values: List[str]
        :param default_value: The default_value of this ApplicationProperty.  # noqa: E501
        :type default_value: str
        :param desc: The desc of this ApplicationProperty.  # noqa: E501
        :type desc: str
        :param example: The example of this ApplicationProperty.  # noqa: E501
        :type example: str
        :param id: The id of this ApplicationProperty.  # noqa: E501
        :type id: str
        :param key: The key of this ApplicationProperty.  # noqa: E501
        :type key: str
        :param name: The name of this ApplicationProperty.  # noqa: E501
        :type name: str
        :param type: The type of this ApplicationProperty.  # noqa: E501
        :type type: str
        :param value: The value of this ApplicationProperty.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'allowed_values': List[str],
            'default_value': str,
            'desc': str,
            'example': str,
            'id': str,
            'key': str,
            'name': str,
            'type': str,
            'value': str
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'default_value': 'defaultValue',
            'desc': 'desc',
            'example': 'example',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'type': 'type',
            'value': 'value'
        }

        self._allowed_values = allowed_values
        self._default_value = default_value
        self._desc = desc
        self._example = example
        self._id = id
        self._key = key
        self._name = name
        self._type = type
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationProperty':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationProperty of this ApplicationProperty.  # noqa: E501
        :rtype: ApplicationProperty
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self) -> List[str]:
        """Gets the allowed_values of this ApplicationProperty.

        The allowed values, if applicable.  # noqa: E501

        :return: The allowed_values of this ApplicationProperty.
        :rtype: List[str]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values: List[str]):
        """Sets the allowed_values of this ApplicationProperty.

        The allowed values, if applicable.  # noqa: E501

        :param allowed_values: The allowed_values of this ApplicationProperty.
        :type allowed_values: List[str]
        """

        self._allowed_values = allowed_values

    @property
    def default_value(self) -> str:
        """Gets the default_value of this ApplicationProperty.

        The default value of the application property.  # noqa: E501

        :return: The default_value of this ApplicationProperty.
        :rtype: str
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value: str):
        """Sets the default_value of this ApplicationProperty.

        The default value of the application property.  # noqa: E501

        :param default_value: The default_value of this ApplicationProperty.
        :type default_value: str
        """

        self._default_value = default_value

    @property
    def desc(self) -> str:
        """Gets the desc of this ApplicationProperty.

        The description of the application property.  # noqa: E501

        :return: The desc of this ApplicationProperty.
        :rtype: str
        """
        return self._desc

    @desc.setter
    def desc(self, desc: str):
        """Sets the desc of this ApplicationProperty.

        The description of the application property.  # noqa: E501

        :param desc: The desc of this ApplicationProperty.
        :type desc: str
        """

        self._desc = desc

    @property
    def example(self) -> str:
        """Gets the example of this ApplicationProperty.


        :return: The example of this ApplicationProperty.
        :rtype: str
        """
        return self._example

    @example.setter
    def example(self, example: str):
        """Sets the example of this ApplicationProperty.


        :param example: The example of this ApplicationProperty.
        :type example: str
        """

        self._example = example

    @property
    def id(self) -> str:
        """Gets the id of this ApplicationProperty.

        The ID of the application property. The ID and key are the same.  # noqa: E501

        :return: The id of this ApplicationProperty.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ApplicationProperty.

        The ID of the application property. The ID and key are the same.  # noqa: E501

        :param id: The id of this ApplicationProperty.
        :type id: str
        """

        self._id = id

    @property
    def key(self) -> str:
        """Gets the key of this ApplicationProperty.

        The key of the application property. The ID and key are the same.  # noqa: E501

        :return: The key of this ApplicationProperty.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ApplicationProperty.

        The key of the application property. The ID and key are the same.  # noqa: E501

        :param key: The key of this ApplicationProperty.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this ApplicationProperty.

        The name of the application property.  # noqa: E501

        :return: The name of this ApplicationProperty.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApplicationProperty.

        The name of the application property.  # noqa: E501

        :param name: The name of this ApplicationProperty.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this ApplicationProperty.

        The data type of the application property.  # noqa: E501

        :return: The type of this ApplicationProperty.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ApplicationProperty.

        The data type of the application property.  # noqa: E501

        :param type: The type of this ApplicationProperty.
        :type type: str
        """

        self._type = type

    @property
    def value(self) -> str:
        """Gets the value of this ApplicationProperty.

        The new value.  # noqa: E501

        :return: The value of this ApplicationProperty.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this ApplicationProperty.

        The new value.  # noqa: E501

        :param value: The value of this ApplicationProperty.
        :type value: str
        """

        self._value = value
