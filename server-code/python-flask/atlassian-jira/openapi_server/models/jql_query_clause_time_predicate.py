from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_clause_operand import JqlQueryClauseOperand
from openapi_server import util

from openapi_server.models.jql_query_clause_operand import JqlQueryClauseOperand  # noqa: E501

class JqlQueryClauseTimePredicate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, operand=None, operator=None):  # noqa: E501
        """JqlQueryClauseTimePredicate - a model defined in OpenAPI

        :param operand: The operand of this JqlQueryClauseTimePredicate.  # noqa: E501
        :type operand: JqlQueryClauseOperand
        :param operator: The operator of this JqlQueryClauseTimePredicate.  # noqa: E501
        :type operator: str
        """
        self.openapi_types = {
            'operand': JqlQueryClauseOperand,
            'operator': str
        }

        self.attribute_map = {
            'operand': 'operand',
            'operator': 'operator'
        }

        self._operand = operand
        self._operator = operator

    @classmethod
    def from_dict(cls, dikt) -> 'JqlQueryClauseTimePredicate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JqlQueryClauseTimePredicate of this JqlQueryClauseTimePredicate.  # noqa: E501
        :rtype: JqlQueryClauseTimePredicate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def operand(self) -> JqlQueryClauseOperand:
        """Gets the operand of this JqlQueryClauseTimePredicate.


        :return: The operand of this JqlQueryClauseTimePredicate.
        :rtype: JqlQueryClauseOperand
        """
        return self._operand

    @operand.setter
    def operand(self, operand: JqlQueryClauseOperand):
        """Sets the operand of this JqlQueryClauseTimePredicate.


        :param operand: The operand of this JqlQueryClauseTimePredicate.
        :type operand: JqlQueryClauseOperand
        """
        if operand is None:
            raise ValueError("Invalid value for `operand`, must not be `None`")  # noqa: E501

        self._operand = operand

    @property
    def operator(self) -> str:
        """Gets the operator of this JqlQueryClauseTimePredicate.

        The operator between the field and the operand.  # noqa: E501

        :return: The operator of this JqlQueryClauseTimePredicate.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this JqlQueryClauseTimePredicate.

        The operator between the field and the operand.  # noqa: E501

        :param operator: The operator of this JqlQueryClauseTimePredicate.
        :type operator: str
        """
        allowed_values = ["before", "after", "from", "to", "true", "during", "by"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator
