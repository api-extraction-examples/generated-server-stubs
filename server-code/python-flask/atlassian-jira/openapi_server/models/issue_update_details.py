from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.entity_property import EntityProperty
from openapi_server.models.field_update_operation import FieldUpdateOperation
from openapi_server.models.history_metadata import HistoryMetadata
from openapi_server.models.issue_transition import IssueTransition
from openapi_server import util

from openapi_server.models.entity_property import EntityProperty  # noqa: E501
from openapi_server.models.field_update_operation import FieldUpdateOperation  # noqa: E501
from openapi_server.models.history_metadata import HistoryMetadata  # noqa: E501
from openapi_server.models.issue_transition import IssueTransition  # noqa: E501

class IssueUpdateDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields=None, history_metadata=None, properties=None, transition=None, update=None):  # noqa: E501
        """IssueUpdateDetails - a model defined in OpenAPI

        :param fields: The fields of this IssueUpdateDetails.  # noqa: E501
        :type fields: Dict[str, object]
        :param history_metadata: The history_metadata of this IssueUpdateDetails.  # noqa: E501
        :type history_metadata: HistoryMetadata
        :param properties: The properties of this IssueUpdateDetails.  # noqa: E501
        :type properties: List[EntityProperty]
        :param transition: The transition of this IssueUpdateDetails.  # noqa: E501
        :type transition: IssueTransition
        :param update: The update of this IssueUpdateDetails.  # noqa: E501
        :type update: Dict[str, List[FieldUpdateOperation]]
        """
        self.openapi_types = {
            'fields': Dict[str, object],
            'history_metadata': HistoryMetadata,
            'properties': List[EntityProperty],
            'transition': IssueTransition,
            'update': Dict[str, List[FieldUpdateOperation]]
        }

        self.attribute_map = {
            'fields': 'fields',
            'history_metadata': 'historyMetadata',
            'properties': 'properties',
            'transition': 'transition',
            'update': 'update'
        }

        self._fields = fields
        self._history_metadata = history_metadata
        self._properties = properties
        self._transition = transition
        self._update = update

    @classmethod
    def from_dict(cls, dikt) -> 'IssueUpdateDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueUpdateDetails of this IssueUpdateDetails.  # noqa: E501
        :rtype: IssueUpdateDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self) -> Dict[str, object]:
        """Gets the fields of this IssueUpdateDetails.

        List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.  # noqa: E501

        :return: The fields of this IssueUpdateDetails.
        :rtype: Dict[str, object]
        """
        return self._fields

    @fields.setter
    def fields(self, fields: Dict[str, object]):
        """Sets the fields of this IssueUpdateDetails.

        List of issue screen fields to update, specifying the sub-field to update and its value for each field. This field provides a straightforward option when setting a sub-field. When multiple sub-fields or other operations are required, use `update`. Fields included in here cannot be included in `update`.  # noqa: E501

        :param fields: The fields of this IssueUpdateDetails.
        :type fields: Dict[str, object]
        """

        self._fields = fields

    @property
    def history_metadata(self) -> HistoryMetadata:
        """Gets the history_metadata of this IssueUpdateDetails.


        :return: The history_metadata of this IssueUpdateDetails.
        :rtype: HistoryMetadata
        """
        return self._history_metadata

    @history_metadata.setter
    def history_metadata(self, history_metadata: HistoryMetadata):
        """Sets the history_metadata of this IssueUpdateDetails.


        :param history_metadata: The history_metadata of this IssueUpdateDetails.
        :type history_metadata: HistoryMetadata
        """

        self._history_metadata = history_metadata

    @property
    def properties(self) -> List[EntityProperty]:
        """Gets the properties of this IssueUpdateDetails.

        Details of issue properties to be add or update.  # noqa: E501

        :return: The properties of this IssueUpdateDetails.
        :rtype: List[EntityProperty]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: List[EntityProperty]):
        """Sets the properties of this IssueUpdateDetails.

        Details of issue properties to be add or update.  # noqa: E501

        :param properties: The properties of this IssueUpdateDetails.
        :type properties: List[EntityProperty]
        """

        self._properties = properties

    @property
    def transition(self) -> IssueTransition:
        """Gets the transition of this IssueUpdateDetails.


        :return: The transition of this IssueUpdateDetails.
        :rtype: IssueTransition
        """
        return self._transition

    @transition.setter
    def transition(self, transition: IssueTransition):
        """Sets the transition of this IssueUpdateDetails.


        :param transition: The transition of this IssueUpdateDetails.
        :type transition: IssueTransition
        """

        self._transition = transition

    @property
    def update(self) -> Dict[str, List[FieldUpdateOperation]]:
        """Gets the update of this IssueUpdateDetails.

        A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.  # noqa: E501

        :return: The update of this IssueUpdateDetails.
        :rtype: Dict[str, List[FieldUpdateOperation]]
        """
        return self._update

    @update.setter
    def update(self, update: Dict[str, List[FieldUpdateOperation]]):
        """Sets the update of this IssueUpdateDetails.

        A Map containing the field field name and a list of operations to perform on the issue screen field. Note that fields included in here cannot be included in `fields`.  # noqa: E501

        :param update: The update of this IssueUpdateDetails.
        :type update: Dict[str, List[FieldUpdateOperation]]
        """

        self._update = update
