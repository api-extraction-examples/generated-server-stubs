from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ReorderIssuePriorities(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, after=None, ids=None, position=None):  # noqa: E501
        """ReorderIssuePriorities - a model defined in OpenAPI

        :param after: The after of this ReorderIssuePriorities.  # noqa: E501
        :type after: str
        :param ids: The ids of this ReorderIssuePriorities.  # noqa: E501
        :type ids: List[str]
        :param position: The position of this ReorderIssuePriorities.  # noqa: E501
        :type position: str
        """
        self.openapi_types = {
            'after': str,
            'ids': List[str],
            'position': str
        }

        self.attribute_map = {
            'after': 'after',
            'ids': 'ids',
            'position': 'position'
        }

        self._after = after
        self._ids = ids
        self._position = position

    @classmethod
    def from_dict(cls, dikt) -> 'ReorderIssuePriorities':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ReorderIssuePriorities of this ReorderIssuePriorities.  # noqa: E501
        :rtype: ReorderIssuePriorities
        """
        return util.deserialize_model(dikt, cls)

    @property
    def after(self) -> str:
        """Gets the after of this ReorderIssuePriorities.

        The ID of the priority. Required if `position` isn't provided.  # noqa: E501

        :return: The after of this ReorderIssuePriorities.
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after: str):
        """Sets the after of this ReorderIssuePriorities.

        The ID of the priority. Required if `position` isn't provided.  # noqa: E501

        :param after: The after of this ReorderIssuePriorities.
        :type after: str
        """

        self._after = after

    @property
    def ids(self) -> List[str]:
        """Gets the ids of this ReorderIssuePriorities.

        The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.  # noqa: E501

        :return: The ids of this ReorderIssuePriorities.
        :rtype: List[str]
        """
        return self._ids

    @ids.setter
    def ids(self, ids: List[str]):
        """Sets the ids of this ReorderIssuePriorities.

        The list of issue IDs to be reordered. Cannot contain duplicates nor after ID.  # noqa: E501

        :param ids: The ids of this ReorderIssuePriorities.
        :type ids: List[str]
        """
        if ids is None:
            raise ValueError("Invalid value for `ids`, must not be `None`")  # noqa: E501

        self._ids = ids

    @property
    def position(self) -> str:
        """Gets the position of this ReorderIssuePriorities.

        The position for issue priorities to be moved to. Required if `after` isn't provided.  # noqa: E501

        :return: The position of this ReorderIssuePriorities.
        :rtype: str
        """
        return self._position

    @position.setter
    def position(self, position: str):
        """Sets the position of this ReorderIssuePriorities.

        The position for issue priorities to be moved to. Required if `after` isn't provided.  # noqa: E501

        :param position: The position of this ReorderIssuePriorities.
        :type position: str
        """

        self._position = position
