from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.json_node import JsonNode
from openapi_server import util

from openapi_server.models.json_node import JsonNode  # noqa: E501

class IssueEntityPropertiesForMultiUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_id=None, properties=None):  # noqa: E501
        """IssueEntityPropertiesForMultiUpdate - a model defined in OpenAPI

        :param issue_id: The issue_id of this IssueEntityPropertiesForMultiUpdate.  # noqa: E501
        :type issue_id: int
        :param properties: The properties of this IssueEntityPropertiesForMultiUpdate.  # noqa: E501
        :type properties: Dict[str, JsonNode]
        """
        self.openapi_types = {
            'issue_id': int,
            'properties': Dict[str, JsonNode]
        }

        self.attribute_map = {
            'issue_id': 'issueID',
            'properties': 'properties'
        }

        self._issue_id = issue_id
        self._properties = properties

    @classmethod
    def from_dict(cls, dikt) -> 'IssueEntityPropertiesForMultiUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueEntityPropertiesForMultiUpdate of this IssueEntityPropertiesForMultiUpdate.  # noqa: E501
        :rtype: IssueEntityPropertiesForMultiUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_id(self) -> int:
        """Gets the issue_id of this IssueEntityPropertiesForMultiUpdate.

        The ID of the issue.  # noqa: E501

        :return: The issue_id of this IssueEntityPropertiesForMultiUpdate.
        :rtype: int
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id: int):
        """Sets the issue_id of this IssueEntityPropertiesForMultiUpdate.

        The ID of the issue.  # noqa: E501

        :param issue_id: The issue_id of this IssueEntityPropertiesForMultiUpdate.
        :type issue_id: int
        """

        self._issue_id = issue_id

    @property
    def properties(self) -> Dict[str, JsonNode]:
        """Gets the properties of this IssueEntityPropertiesForMultiUpdate.

        Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.  # noqa: E501

        :return: The properties of this IssueEntityPropertiesForMultiUpdate.
        :rtype: Dict[str, JsonNode]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, JsonNode]):
        """Sets the properties of this IssueEntityPropertiesForMultiUpdate.

        Entity properties to set on the issue. The maximum length of an issue property value is 32768 characters.  # noqa: E501

        :param properties: The properties of this IssueEntityPropertiesForMultiUpdate.
        :type properties: Dict[str, JsonNode]
        """
        if properties is not None and len(properties) > 10:
            raise ValueError("Invalid value for `properties`, number of items must be less than or equal to `10`")  # noqa: E501
        if properties is not None and len(properties) < 1:
            raise ValueError("Invalid value for `properties`, number of items must be greater than or equal to `1`")  # noqa: E501

        self._properties = properties
