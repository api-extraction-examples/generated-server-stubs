from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.transition_screen_details import TransitionScreenDetails
from openapi_server.models.workflow_rules import WorkflowRules
from openapi_server import util

from openapi_server.models.transition_screen_details import TransitionScreenDetails  # noqa: E501
from openapi_server.models.workflow_rules import WorkflowRules  # noqa: E501

class Transition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, _from=None, id=None, name=None, properties=None, rules=None, screen=None, to=None, type=None):  # noqa: E501
        """Transition - a model defined in OpenAPI

        :param description: The description of this Transition.  # noqa: E501
        :type description: str
        :param _from: The _from of this Transition.  # noqa: E501
        :type _from: List[str]
        :param id: The id of this Transition.  # noqa: E501
        :type id: str
        :param name: The name of this Transition.  # noqa: E501
        :type name: str
        :param properties: The properties of this Transition.  # noqa: E501
        :type properties: Dict[str, object]
        :param rules: The rules of this Transition.  # noqa: E501
        :type rules: WorkflowRules
        :param screen: The screen of this Transition.  # noqa: E501
        :type screen: TransitionScreenDetails
        :param to: The to of this Transition.  # noqa: E501
        :type to: str
        :param type: The type of this Transition.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'description': str,
            '_from': List[str],
            'id': str,
            'name': str,
            'properties': Dict[str, object],
            'rules': WorkflowRules,
            'screen': TransitionScreenDetails,
            'to': str,
            'type': str
        }

        self.attribute_map = {
            'description': 'description',
            '_from': 'from',
            'id': 'id',
            'name': 'name',
            'properties': 'properties',
            'rules': 'rules',
            'screen': 'screen',
            'to': 'to',
            'type': 'type'
        }

        self._description = description
        self.__from = _from
        self._id = id
        self._name = name
        self._properties = properties
        self._rules = rules
        self._screen = screen
        self._to = to
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'Transition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Transition of this Transition.  # noqa: E501
        :rtype: Transition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this Transition.

        The description of the transition.  # noqa: E501

        :return: The description of this Transition.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Transition.

        The description of the transition.  # noqa: E501

        :param description: The description of this Transition.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def _from(self) -> List[str]:
        """Gets the _from of this Transition.

        The statuses the transition can start from.  # noqa: E501

        :return: The _from of this Transition.
        :rtype: List[str]
        """
        return self.__from

    @_from.setter
    def _from(self, _from: List[str]):
        """Sets the _from of this Transition.

        The statuses the transition can start from.  # noqa: E501

        :param _from: The _from of this Transition.
        :type _from: List[str]
        """
        if _from is None:
            raise ValueError("Invalid value for `_from`, must not be `None`")  # noqa: E501

        self.__from = _from

    @property
    def id(self) -> str:
        """Gets the id of this Transition.

        The ID of the transition.  # noqa: E501

        :return: The id of this Transition.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Transition.

        The ID of the transition.  # noqa: E501

        :param id: The id of this Transition.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Transition.

        The name of the transition.  # noqa: E501

        :return: The name of this Transition.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Transition.

        The name of the transition.  # noqa: E501

        :param name: The name of this Transition.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this Transition.

        The properties of the transition.  # noqa: E501

        :return: The properties of this Transition.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this Transition.

        The properties of the transition.  # noqa: E501

        :param properties: The properties of this Transition.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def rules(self) -> WorkflowRules:
        """Gets the rules of this Transition.


        :return: The rules of this Transition.
        :rtype: WorkflowRules
        """
        return self._rules

    @rules.setter
    def rules(self, rules: WorkflowRules):
        """Sets the rules of this Transition.


        :param rules: The rules of this Transition.
        :type rules: WorkflowRules
        """

        self._rules = rules

    @property
    def screen(self) -> TransitionScreenDetails:
        """Gets the screen of this Transition.


        :return: The screen of this Transition.
        :rtype: TransitionScreenDetails
        """
        return self._screen

    @screen.setter
    def screen(self, screen: TransitionScreenDetails):
        """Sets the screen of this Transition.


        :param screen: The screen of this Transition.
        :type screen: TransitionScreenDetails
        """

        self._screen = screen

    @property
    def to(self) -> str:
        """Gets the to of this Transition.

        The status the transition goes to.  # noqa: E501

        :return: The to of this Transition.
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to: str):
        """Sets the to of this Transition.

        The status the transition goes to.  # noqa: E501

        :param to: The to of this Transition.
        :type to: str
        """
        if to is None:
            raise ValueError("Invalid value for `to`, must not be `None`")  # noqa: E501

        self._to = to

    @property
    def type(self) -> str:
        """Gets the type of this Transition.

        The type of the transition.  # noqa: E501

        :return: The type of this Transition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this Transition.

        The type of the transition.  # noqa: E501

        :param type: The type of this Transition.
        :type type: str
        """
        allowed_values = ["global", "initial", "directed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
