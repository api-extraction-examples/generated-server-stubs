from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_type_screen_scheme_mapping import IssueTypeScreenSchemeMapping
from openapi_server import util

from openapi_server.models.issue_type_screen_scheme_mapping import IssueTypeScreenSchemeMapping  # noqa: E501

class IssueTypeScreenSchemeDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, issue_type_mappings=None, name=None):  # noqa: E501
        """IssueTypeScreenSchemeDetails - a model defined in OpenAPI

        :param description: The description of this IssueTypeScreenSchemeDetails.  # noqa: E501
        :type description: str
        :param issue_type_mappings: The issue_type_mappings of this IssueTypeScreenSchemeDetails.  # noqa: E501
        :type issue_type_mappings: List[IssueTypeScreenSchemeMapping]
        :param name: The name of this IssueTypeScreenSchemeDetails.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'description': str,
            'issue_type_mappings': List[IssueTypeScreenSchemeMapping],
            'name': str
        }

        self.attribute_map = {
            'description': 'description',
            'issue_type_mappings': 'issueTypeMappings',
            'name': 'name'
        }

        self._description = description
        self._issue_type_mappings = issue_type_mappings
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'IssueTypeScreenSchemeDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueTypeScreenSchemeDetails of this IssueTypeScreenSchemeDetails.  # noqa: E501
        :rtype: IssueTypeScreenSchemeDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this IssueTypeScreenSchemeDetails.

        The description of the issue type screen scheme. The maximum length is 255 characters.  # noqa: E501

        :return: The description of this IssueTypeScreenSchemeDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this IssueTypeScreenSchemeDetails.

        The description of the issue type screen scheme. The maximum length is 255 characters.  # noqa: E501

        :param description: The description of this IssueTypeScreenSchemeDetails.
        :type description: str
        """

        self._description = description

    @property
    def issue_type_mappings(self) -> List[IssueTypeScreenSchemeMapping]:
        """Gets the issue_type_mappings of this IssueTypeScreenSchemeDetails.

        The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.  # noqa: E501

        :return: The issue_type_mappings of this IssueTypeScreenSchemeDetails.
        :rtype: List[IssueTypeScreenSchemeMapping]
        """
        return self._issue_type_mappings

    @issue_type_mappings.setter
    def issue_type_mappings(self, issue_type_mappings: List[IssueTypeScreenSchemeMapping]):
        """Sets the issue_type_mappings of this IssueTypeScreenSchemeDetails.

        The IDs of the screen schemes for the issue type IDs and *default*. A *default* entry is required to create an issue type screen scheme, it defines the mapping for all issue types without a screen scheme.  # noqa: E501

        :param issue_type_mappings: The issue_type_mappings of this IssueTypeScreenSchemeDetails.
        :type issue_type_mappings: List[IssueTypeScreenSchemeMapping]
        """
        if issue_type_mappings is None:
            raise ValueError("Invalid value for `issue_type_mappings`, must not be `None`")  # noqa: E501

        self._issue_type_mappings = issue_type_mappings

    @property
    def name(self) -> str:
        """Gets the name of this IssueTypeScreenSchemeDetails.

        The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.  # noqa: E501

        :return: The name of this IssueTypeScreenSchemeDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IssueTypeScreenSchemeDetails.

        The name of the issue type screen scheme. The name must be unique. The maximum length is 255 characters.  # noqa: E501

        :param name: The name of this IssueTypeScreenSchemeDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
