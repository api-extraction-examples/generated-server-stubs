from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeWorkflowMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type=None, update_draft_if_needed=None, workflow=None):  # noqa: E501
        """IssueTypeWorkflowMapping - a model defined in OpenAPI

        :param issue_type: The issue_type of this IssueTypeWorkflowMapping.  # noqa: E501
        :type issue_type: str
        :param update_draft_if_needed: The update_draft_if_needed of this IssueTypeWorkflowMapping.  # noqa: E501
        :type update_draft_if_needed: bool
        :param workflow: The workflow of this IssueTypeWorkflowMapping.  # noqa: E501
        :type workflow: str
        """
        self.openapi_types = {
            'issue_type': str,
            'update_draft_if_needed': bool,
            'workflow': str
        }

        self.attribute_map = {
            'issue_type': 'issueType',
            'update_draft_if_needed': 'updateDraftIfNeeded',
            'workflow': 'workflow'
        }

        self._issue_type = issue_type
        self._update_draft_if_needed = update_draft_if_needed
        self._workflow = workflow

    @classmethod
    def from_dict(cls, dikt) -> 'IssueTypeWorkflowMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueTypeWorkflowMapping of this IssueTypeWorkflowMapping.  # noqa: E501
        :rtype: IssueTypeWorkflowMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type(self) -> str:
        """Gets the issue_type of this IssueTypeWorkflowMapping.

        The ID of the issue type. Not required if updating the issue type-workflow mapping.  # noqa: E501

        :return: The issue_type of this IssueTypeWorkflowMapping.
        :rtype: str
        """
        return self._issue_type

    @issue_type.setter
    def issue_type(self, issue_type: str):
        """Sets the issue_type of this IssueTypeWorkflowMapping.

        The ID of the issue type. Not required if updating the issue type-workflow mapping.  # noqa: E501

        :param issue_type: The issue_type of this IssueTypeWorkflowMapping.
        :type issue_type: str
        """

        self._issue_type = issue_type

    @property
    def update_draft_if_needed(self) -> bool:
        """Gets the update_draft_if_needed of this IssueTypeWorkflowMapping.

        Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.  # noqa: E501

        :return: The update_draft_if_needed of this IssueTypeWorkflowMapping.
        :rtype: bool
        """
        return self._update_draft_if_needed

    @update_draft_if_needed.setter
    def update_draft_if_needed(self, update_draft_if_needed: bool):
        """Sets the update_draft_if_needed of this IssueTypeWorkflowMapping.

        Set to true to create or update the draft of a workflow scheme and update the mapping in the draft, when the workflow scheme cannot be edited. Defaults to `false`. Only applicable when updating the workflow-issue types mapping.  # noqa: E501

        :param update_draft_if_needed: The update_draft_if_needed of this IssueTypeWorkflowMapping.
        :type update_draft_if_needed: bool
        """

        self._update_draft_if_needed = update_draft_if_needed

    @property
    def workflow(self) -> str:
        """Gets the workflow of this IssueTypeWorkflowMapping.

        The name of the workflow.  # noqa: E501

        :return: The workflow of this IssueTypeWorkflowMapping.
        :rtype: str
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow: str):
        """Sets the workflow of this IssueTypeWorkflowMapping.

        The name of the workflow.  # noqa: E501

        :param workflow: The workflow of this IssueTypeWorkflowMapping.
        :type workflow: str
        """

        self._workflow = workflow
