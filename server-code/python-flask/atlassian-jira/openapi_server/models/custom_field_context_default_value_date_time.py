from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextDefaultValueDateTime(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, date_time=None, type=None, use_current=False):  # noqa: E501
        """CustomFieldContextDefaultValueDateTime - a model defined in OpenAPI

        :param date_time: The date_time of this CustomFieldContextDefaultValueDateTime.  # noqa: E501
        :type date_time: str
        :param type: The type of this CustomFieldContextDefaultValueDateTime.  # noqa: E501
        :type type: str
        :param use_current: The use_current of this CustomFieldContextDefaultValueDateTime.  # noqa: E501
        :type use_current: bool
        """
        self.openapi_types = {
            'date_time': str,
            'type': str,
            'use_current': bool
        }

        self.attribute_map = {
            'date_time': 'dateTime',
            'type': 'type',
            'use_current': 'useCurrent'
        }

        self._date_time = date_time
        self._type = type
        self._use_current = use_current

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldContextDefaultValueDateTime':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldContextDefaultValueDateTime of this CustomFieldContextDefaultValueDateTime.  # noqa: E501
        :rtype: CustomFieldContextDefaultValueDateTime
        """
        return util.deserialize_model(dikt, cls)

    @property
    def date_time(self) -> str:
        """Gets the date_time of this CustomFieldContextDefaultValueDateTime.

        The default date-time in ISO format. Ignored if `useCurrent` is true.  # noqa: E501

        :return: The date_time of this CustomFieldContextDefaultValueDateTime.
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time: str):
        """Sets the date_time of this CustomFieldContextDefaultValueDateTime.

        The default date-time in ISO format. Ignored if `useCurrent` is true.  # noqa: E501

        :param date_time: The date_time of this CustomFieldContextDefaultValueDateTime.
        :type date_time: str
        """

        self._date_time = date_time

    @property
    def type(self) -> str:
        """Gets the type of this CustomFieldContextDefaultValueDateTime.


        :return: The type of this CustomFieldContextDefaultValueDateTime.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CustomFieldContextDefaultValueDateTime.


        :param type: The type of this CustomFieldContextDefaultValueDateTime.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def use_current(self) -> bool:
        """Gets the use_current of this CustomFieldContextDefaultValueDateTime.

        Whether to use the current date.  # noqa: E501

        :return: The use_current of this CustomFieldContextDefaultValueDateTime.
        :rtype: bool
        """
        return self._use_current

    @use_current.setter
    def use_current(self, use_current: bool):
        """Sets the use_current of this CustomFieldContextDefaultValueDateTime.

        Whether to use the current date.  # noqa: E501

        :param use_current: The use_current of this CustomFieldContextDefaultValueDateTime.
        :type use_current: bool
        """

        self._use_current = use_current
