from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.group_name import GroupName
from openapi_server.models.project import Project
from openapi_server.models.project_role import ProjectRole
from openapi_server.models.user_bean import UserBean
from openapi_server import util

from openapi_server.models.group_name import GroupName  # noqa: E501
from openapi_server.models.project import Project  # noqa: E501
from openapi_server.models.project_role import ProjectRole  # noqa: E501
from openapi_server.models.user_bean import UserBean  # noqa: E501

class SharePermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group=None, id=None, project=None, role=None, type=None, user=None):  # noqa: E501
        """SharePermission - a model defined in OpenAPI

        :param group: The group of this SharePermission.  # noqa: E501
        :type group: GroupName
        :param id: The id of this SharePermission.  # noqa: E501
        :type id: int
        :param project: The project of this SharePermission.  # noqa: E501
        :type project: Project
        :param role: The role of this SharePermission.  # noqa: E501
        :type role: ProjectRole
        :param type: The type of this SharePermission.  # noqa: E501
        :type type: str
        :param user: The user of this SharePermission.  # noqa: E501
        :type user: UserBean
        """
        self.openapi_types = {
            'group': GroupName,
            'id': int,
            'project': Project,
            'role': ProjectRole,
            'type': str,
            'user': UserBean
        }

        self.attribute_map = {
            'group': 'group',
            'id': 'id',
            'project': 'project',
            'role': 'role',
            'type': 'type',
            'user': 'user'
        }

        self._group = group
        self._id = id
        self._project = project
        self._role = role
        self._type = type
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'SharePermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SharePermission of this SharePermission.  # noqa: E501
        :rtype: SharePermission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group(self) -> GroupName:
        """Gets the group of this SharePermission.


        :return: The group of this SharePermission.
        :rtype: GroupName
        """
        return self._group

    @group.setter
    def group(self, group: GroupName):
        """Sets the group of this SharePermission.


        :param group: The group of this SharePermission.
        :type group: GroupName
        """

        self._group = group

    @property
    def id(self) -> int:
        """Gets the id of this SharePermission.

        The unique identifier of the share permission.  # noqa: E501

        :return: The id of this SharePermission.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this SharePermission.

        The unique identifier of the share permission.  # noqa: E501

        :param id: The id of this SharePermission.
        :type id: int
        """

        self._id = id

    @property
    def project(self) -> Project:
        """Gets the project of this SharePermission.


        :return: The project of this SharePermission.
        :rtype: Project
        """
        return self._project

    @project.setter
    def project(self, project: Project):
        """Sets the project of this SharePermission.


        :param project: The project of this SharePermission.
        :type project: Project
        """

        self._project = project

    @property
    def role(self) -> ProjectRole:
        """Gets the role of this SharePermission.


        :return: The role of this SharePermission.
        :rtype: ProjectRole
        """
        return self._role

    @role.setter
    def role(self, role: ProjectRole):
        """Sets the role of this SharePermission.


        :param role: The role of this SharePermission.
        :type role: ProjectRole
        """

        self._role = role

    @property
    def type(self) -> str:
        """Gets the type of this SharePermission.

        The type of share permission:   *  `user` Shared with a user.  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.  # noqa: E501

        :return: The type of this SharePermission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this SharePermission.

        The type of share permission:   *  `user` Shared with a user.  *  `group` Shared with a group. If set in a request, then specify `sharePermission.group` as well.  *  `project` Shared with a project. If set in a request, then specify `sharePermission.project` as well.  *  `projectRole` Share with a project role in a project. This value is not returned in responses. It is used in requests, where it needs to be specify with `projectId` and `projectRoleId`.  *  `global` Shared globally. If set in a request, no other `sharePermission` properties need to be specified.  *  `loggedin` Shared with all logged-in users. Note: This value is set in a request by specifying `authenticated` as the `type`.  *  `project-unknown` Shared with a project that the user does not have access to. Cannot be set in a request.  # noqa: E501

        :param type: The type of this SharePermission.
        :type type: str
        """
        allowed_values = ["user", "group", "project", "projectRole", "global", "loggedin", "authenticated", "project-unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user(self) -> UserBean:
        """Gets the user of this SharePermission.


        :return: The user of this SharePermission.
        :rtype: UserBean
        """
        return self._user

    @user.setter
    def user(self, user: UserBean):
        """Sets the user of this SharePermission.


        :param user: The user of this SharePermission.
        :type user: UserBean
        """

        self._user = user
