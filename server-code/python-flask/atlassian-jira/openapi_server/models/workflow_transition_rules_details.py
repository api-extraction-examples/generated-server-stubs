from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_id import WorkflowId
from openapi_server import util

from openapi_server.models.workflow_id import WorkflowId  # noqa: E501

class WorkflowTransitionRulesDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflow_id=None, workflow_rule_ids=None):  # noqa: E501
        """WorkflowTransitionRulesDetails - a model defined in OpenAPI

        :param workflow_id: The workflow_id of this WorkflowTransitionRulesDetails.  # noqa: E501
        :type workflow_id: WorkflowId
        :param workflow_rule_ids: The workflow_rule_ids of this WorkflowTransitionRulesDetails.  # noqa: E501
        :type workflow_rule_ids: list[str]
        """
        self.openapi_types = {
            'workflow_id': WorkflowId,
            'workflow_rule_ids': list[str]
        }

        self.attribute_map = {
            'workflow_id': 'workflowId',
            'workflow_rule_ids': 'workflowRuleIds'
        }

        self._workflow_id = workflow_id
        self._workflow_rule_ids = workflow_rule_ids

    @classmethod
    def from_dict(cls, dikt) -> 'WorkflowTransitionRulesDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowTransitionRulesDetails of this WorkflowTransitionRulesDetails.  # noqa: E501
        :rtype: WorkflowTransitionRulesDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflow_id(self) -> WorkflowId:
        """Gets the workflow_id of this WorkflowTransitionRulesDetails.


        :return: The workflow_id of this WorkflowTransitionRulesDetails.
        :rtype: WorkflowId
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id: WorkflowId):
        """Sets the workflow_id of this WorkflowTransitionRulesDetails.


        :param workflow_id: The workflow_id of this WorkflowTransitionRulesDetails.
        :type workflow_id: WorkflowId
        """
        if workflow_id is None:
            raise ValueError("Invalid value for `workflow_id`, must not be `None`")  # noqa: E501

        self._workflow_id = workflow_id

    @property
    def workflow_rule_ids(self) -> list[str]:
        """Gets the workflow_rule_ids of this WorkflowTransitionRulesDetails.

        The list of connect workflow rule IDs.  # noqa: E501

        :return: The workflow_rule_ids of this WorkflowTransitionRulesDetails.
        :rtype: list[str]
        """
        return self._workflow_rule_ids

    @workflow_rule_ids.setter
    def workflow_rule_ids(self, workflow_rule_ids: list[str]):
        """Sets the workflow_rule_ids of this WorkflowTransitionRulesDetails.

        The list of connect workflow rule IDs.  # noqa: E501

        :param workflow_rule_ids: The workflow_rule_ids of this WorkflowTransitionRulesDetails.
        :type workflow_rule_ids: list[str]
        """
        if workflow_rule_ids is None:
            raise ValueError("Invalid value for `workflow_rule_ids`, must not be `None`")  # noqa: E501

        self._workflow_rule_ids = workflow_rule_ids
