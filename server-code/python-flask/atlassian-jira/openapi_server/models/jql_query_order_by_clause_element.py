from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jql_query_field import JqlQueryField
from openapi_server import util

from openapi_server.models.jql_query_field import JqlQueryField  # noqa: E501

class JqlQueryOrderByClauseElement(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, direction=None, field=None):  # noqa: E501
        """JqlQueryOrderByClauseElement - a model defined in OpenAPI

        :param direction: The direction of this JqlQueryOrderByClauseElement.  # noqa: E501
        :type direction: str
        :param field: The field of this JqlQueryOrderByClauseElement.  # noqa: E501
        :type field: JqlQueryField
        """
        self.openapi_types = {
            'direction': str,
            'field': JqlQueryField
        }

        self.attribute_map = {
            'direction': 'direction',
            'field': 'field'
        }

        self._direction = direction
        self._field = field

    @classmethod
    def from_dict(cls, dikt) -> 'JqlQueryOrderByClauseElement':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JqlQueryOrderByClauseElement of this JqlQueryOrderByClauseElement.  # noqa: E501
        :rtype: JqlQueryOrderByClauseElement
        """
        return util.deserialize_model(dikt, cls)

    @property
    def direction(self) -> str:
        """Gets the direction of this JqlQueryOrderByClauseElement.

        The direction in which to order the results.  # noqa: E501

        :return: The direction of this JqlQueryOrderByClauseElement.
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction: str):
        """Sets the direction of this JqlQueryOrderByClauseElement.

        The direction in which to order the results.  # noqa: E501

        :param direction: The direction of this JqlQueryOrderByClauseElement.
        :type direction: str
        """
        allowed_values = ["asc", "desc"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def field(self) -> JqlQueryField:
        """Gets the field of this JqlQueryOrderByClauseElement.


        :return: The field of this JqlQueryOrderByClauseElement.
        :rtype: JqlQueryField
        """
        return self._field

    @field.setter
    def field(self, field: JqlQueryField):
        """Sets the field of this JqlQueryOrderByClauseElement.


        :param field: The field of this JqlQueryOrderByClauseElement.
        :type field: JqlQueryField
        """
        if field is None:
            raise ValueError("Invalid value for `field`, must not be `None`")  # noqa: E501

        self._field = field
