from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_context_variable import IssueContextVariable
from openapi_server.models.json_context_variable import JsonContextVariable
from openapi_server.models.user_context_variable import UserContextVariable
from openapi_server import util

from openapi_server.models.issue_context_variable import IssueContextVariable  # noqa: E501
from openapi_server.models.json_context_variable import JsonContextVariable  # noqa: E501
from openapi_server.models.user_context_variable import UserContextVariable  # noqa: E501

class CustomContextVariable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, account_id=None, id=None, key=None, value=None):  # noqa: E501
        """CustomContextVariable - a model defined in OpenAPI

        :param type: The type of this CustomContextVariable.  # noqa: E501
        :type type: str
        :param account_id: The account_id of this CustomContextVariable.  # noqa: E501
        :type account_id: str
        :param id: The id of this CustomContextVariable.  # noqa: E501
        :type id: int
        :param key: The key of this CustomContextVariable.  # noqa: E501
        :type key: str
        :param value: The value of this CustomContextVariable.  # noqa: E501
        :type value: object
        """
        self.openapi_types = {
            'type': str,
            'account_id': str,
            'id': int,
            'key': str,
            'value': object
        }

        self.attribute_map = {
            'type': 'type',
            'account_id': 'accountId',
            'id': 'id',
            'key': 'key',
            'value': 'value'
        }

        self._type = type
        self._account_id = account_id
        self._id = id
        self._key = key
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'CustomContextVariable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomContextVariable of this CustomContextVariable.  # noqa: E501
        :rtype: CustomContextVariable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this CustomContextVariable.

        Type of custom context variable.  # noqa: E501

        :return: The type of this CustomContextVariable.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CustomContextVariable.

        Type of custom context variable.  # noqa: E501

        :param type: The type of this CustomContextVariable.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def account_id(self) -> str:
        """Gets the account_id of this CustomContextVariable.

        The account ID of the user.  # noqa: E501

        :return: The account_id of this CustomContextVariable.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this CustomContextVariable.

        The account ID of the user.  # noqa: E501

        :param account_id: The account_id of this CustomContextVariable.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def id(self) -> int:
        """Gets the id of this CustomContextVariable.

        The issue ID.  # noqa: E501

        :return: The id of this CustomContextVariable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this CustomContextVariable.

        The issue ID.  # noqa: E501

        :param id: The id of this CustomContextVariable.
        :type id: int
        """

        self._id = id

    @property
    def key(self) -> str:
        """Gets the key of this CustomContextVariable.

        The issue key.  # noqa: E501

        :return: The key of this CustomContextVariable.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this CustomContextVariable.

        The issue key.  # noqa: E501

        :param key: The key of this CustomContextVariable.
        :type key: str
        """

        self._key = key

    @property
    def value(self) -> object:
        """Gets the value of this CustomContextVariable.

        A JSON object containing custom content.  # noqa: E501

        :return: The value of this CustomContextVariable.
        :rtype: object
        """
        return self._value

    @value.setter
    def value(self, value: object):
        """Sets the value of this CustomContextVariable.

        A JSON object containing custom content.  # noqa: E501

        :param value: The value of this CustomContextVariable.
        :type value: object
        """

        self._value = value
