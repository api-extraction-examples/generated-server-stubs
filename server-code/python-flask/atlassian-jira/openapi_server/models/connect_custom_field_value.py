from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ConnectCustomFieldValue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, type=None, field_id=None, issue_id=None, number=None, option_id=None, rich_text=None, string=None, text=None):  # noqa: E501
        """ConnectCustomFieldValue - a model defined in OpenAPI

        :param type: The type of this ConnectCustomFieldValue.  # noqa: E501
        :type type: str
        :param field_id: The field_id of this ConnectCustomFieldValue.  # noqa: E501
        :type field_id: int
        :param issue_id: The issue_id of this ConnectCustomFieldValue.  # noqa: E501
        :type issue_id: int
        :param number: The number of this ConnectCustomFieldValue.  # noqa: E501
        :type number: float
        :param option_id: The option_id of this ConnectCustomFieldValue.  # noqa: E501
        :type option_id: str
        :param rich_text: The rich_text of this ConnectCustomFieldValue.  # noqa: E501
        :type rich_text: str
        :param string: The string of this ConnectCustomFieldValue.  # noqa: E501
        :type string: str
        :param text: The text of this ConnectCustomFieldValue.  # noqa: E501
        :type text: str
        """
        self.openapi_types = {
            'type': str,
            'field_id': int,
            'issue_id': int,
            'number': float,
            'option_id': str,
            'rich_text': str,
            'string': str,
            'text': str
        }

        self.attribute_map = {
            'type': '_type',
            'field_id': 'fieldID',
            'issue_id': 'issueID',
            'number': 'number',
            'option_id': 'optionID',
            'rich_text': 'richText',
            'string': 'string',
            'text': 'text'
        }

        self._type = type
        self._field_id = field_id
        self._issue_id = issue_id
        self._number = number
        self._option_id = option_id
        self._rich_text = rich_text
        self._string = string
        self._text = text

    @classmethod
    def from_dict(cls, dikt) -> 'ConnectCustomFieldValue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ConnectCustomFieldValue of this ConnectCustomFieldValue.  # noqa: E501
        :rtype: ConnectCustomFieldValue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def type(self) -> str:
        """Gets the type of this ConnectCustomFieldValue.

        The type of custom field.  # noqa: E501

        :return: The type of this ConnectCustomFieldValue.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this ConnectCustomFieldValue.

        The type of custom field.  # noqa: E501

        :param type: The type of this ConnectCustomFieldValue.
        :type type: str
        """
        allowed_values = ["StringIssueField", "NumberIssueField", "RichTextIssueField", "SingleSelectIssueField", "MultiSelectIssueField", "TextIssueField"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def field_id(self) -> int:
        """Gets the field_id of this ConnectCustomFieldValue.

        The custom field ID.  # noqa: E501

        :return: The field_id of this ConnectCustomFieldValue.
        :rtype: int
        """
        return self._field_id

    @field_id.setter
    def field_id(self, field_id: int):
        """Sets the field_id of this ConnectCustomFieldValue.

        The custom field ID.  # noqa: E501

        :param field_id: The field_id of this ConnectCustomFieldValue.
        :type field_id: int
        """
        if field_id is None:
            raise ValueError("Invalid value for `field_id`, must not be `None`")  # noqa: E501

        self._field_id = field_id

    @property
    def issue_id(self) -> int:
        """Gets the issue_id of this ConnectCustomFieldValue.

        The issue ID.  # noqa: E501

        :return: The issue_id of this ConnectCustomFieldValue.
        :rtype: int
        """
        return self._issue_id

    @issue_id.setter
    def issue_id(self, issue_id: int):
        """Sets the issue_id of this ConnectCustomFieldValue.

        The issue ID.  # noqa: E501

        :param issue_id: The issue_id of this ConnectCustomFieldValue.
        :type issue_id: int
        """
        if issue_id is None:
            raise ValueError("Invalid value for `issue_id`, must not be `None`")  # noqa: E501

        self._issue_id = issue_id

    @property
    def number(self) -> float:
        """Gets the number of this ConnectCustomFieldValue.

        The value of number type custom field when `_type` is `NumberIssueField`.  # noqa: E501

        :return: The number of this ConnectCustomFieldValue.
        :rtype: float
        """
        return self._number

    @number.setter
    def number(self, number: float):
        """Sets the number of this ConnectCustomFieldValue.

        The value of number type custom field when `_type` is `NumberIssueField`.  # noqa: E501

        :param number: The number of this ConnectCustomFieldValue.
        :type number: float
        """

        self._number = number

    @property
    def option_id(self) -> str:
        """Gets the option_id of this ConnectCustomFieldValue.

        The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.  # noqa: E501

        :return: The option_id of this ConnectCustomFieldValue.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id: str):
        """Sets the option_id of this ConnectCustomFieldValue.

        The value of single select and multiselect custom field type when `_type` is `SingleSelectIssueField` or `MultiSelectIssueField`.  # noqa: E501

        :param option_id: The option_id of this ConnectCustomFieldValue.
        :type option_id: str
        """

        self._option_id = option_id

    @property
    def rich_text(self) -> str:
        """Gets the rich_text of this ConnectCustomFieldValue.

        The value of richText type custom field when `_type` is `RichTextIssueField`.  # noqa: E501

        :return: The rich_text of this ConnectCustomFieldValue.
        :rtype: str
        """
        return self._rich_text

    @rich_text.setter
    def rich_text(self, rich_text: str):
        """Sets the rich_text of this ConnectCustomFieldValue.

        The value of richText type custom field when `_type` is `RichTextIssueField`.  # noqa: E501

        :param rich_text: The rich_text of this ConnectCustomFieldValue.
        :type rich_text: str
        """

        self._rich_text = rich_text

    @property
    def string(self) -> str:
        """Gets the string of this ConnectCustomFieldValue.

        The value of string type custom field when `_type` is `StringIssueField`.  # noqa: E501

        :return: The string of this ConnectCustomFieldValue.
        :rtype: str
        """
        return self._string

    @string.setter
    def string(self, string: str):
        """Sets the string of this ConnectCustomFieldValue.

        The value of string type custom field when `_type` is `StringIssueField`.  # noqa: E501

        :param string: The string of this ConnectCustomFieldValue.
        :type string: str
        """

        self._string = string

    @property
    def text(self) -> str:
        """Gets the text of this ConnectCustomFieldValue.

        The value of of text custom field type when `_type` is `TextIssueField`.  # noqa: E501

        :return: The text of this ConnectCustomFieldValue.
        :rtype: str
        """
        return self._text

    @text.setter
    def text(self, text: str):
        """Sets the text of this ConnectCustomFieldValue.

        The value of of text custom field type when `_type` is `TextIssueField`.  # noqa: E501

        :param text: The text of this ConnectCustomFieldValue.
        :type text: str
        """

        self._text = text
