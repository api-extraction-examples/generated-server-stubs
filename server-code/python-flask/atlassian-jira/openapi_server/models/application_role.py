from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.group_name import GroupName
from openapi_server import util

from openapi_server.models.group_name import GroupName  # noqa: E501

class ApplicationRole(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, default_groups=None, default_groups_details=None, defined=None, group_details=None, groups=None, has_unlimited_seats=None, key=None, name=None, number_of_seats=None, platform=None, remaining_seats=None, selected_by_default=None, user_count=None, user_count_description=None):  # noqa: E501
        """ApplicationRole - a model defined in OpenAPI

        :param default_groups: The default_groups of this ApplicationRole.  # noqa: E501
        :type default_groups: list[str]
        :param default_groups_details: The default_groups_details of this ApplicationRole.  # noqa: E501
        :type default_groups_details: List[GroupName]
        :param defined: The defined of this ApplicationRole.  # noqa: E501
        :type defined: bool
        :param group_details: The group_details of this ApplicationRole.  # noqa: E501
        :type group_details: List[GroupName]
        :param groups: The groups of this ApplicationRole.  # noqa: E501
        :type groups: list[str]
        :param has_unlimited_seats: The has_unlimited_seats of this ApplicationRole.  # noqa: E501
        :type has_unlimited_seats: bool
        :param key: The key of this ApplicationRole.  # noqa: E501
        :type key: str
        :param name: The name of this ApplicationRole.  # noqa: E501
        :type name: str
        :param number_of_seats: The number_of_seats of this ApplicationRole.  # noqa: E501
        :type number_of_seats: int
        :param platform: The platform of this ApplicationRole.  # noqa: E501
        :type platform: bool
        :param remaining_seats: The remaining_seats of this ApplicationRole.  # noqa: E501
        :type remaining_seats: int
        :param selected_by_default: The selected_by_default of this ApplicationRole.  # noqa: E501
        :type selected_by_default: bool
        :param user_count: The user_count of this ApplicationRole.  # noqa: E501
        :type user_count: int
        :param user_count_description: The user_count_description of this ApplicationRole.  # noqa: E501
        :type user_count_description: str
        """
        self.openapi_types = {
            'default_groups': list[str],
            'default_groups_details': List[GroupName],
            'defined': bool,
            'group_details': List[GroupName],
            'groups': list[str],
            'has_unlimited_seats': bool,
            'key': str,
            'name': str,
            'number_of_seats': int,
            'platform': bool,
            'remaining_seats': int,
            'selected_by_default': bool,
            'user_count': int,
            'user_count_description': str
        }

        self.attribute_map = {
            'default_groups': 'defaultGroups',
            'default_groups_details': 'defaultGroupsDetails',
            'defined': 'defined',
            'group_details': 'groupDetails',
            'groups': 'groups',
            'has_unlimited_seats': 'hasUnlimitedSeats',
            'key': 'key',
            'name': 'name',
            'number_of_seats': 'numberOfSeats',
            'platform': 'platform',
            'remaining_seats': 'remainingSeats',
            'selected_by_default': 'selectedByDefault',
            'user_count': 'userCount',
            'user_count_description': 'userCountDescription'
        }

        self._default_groups = default_groups
        self._default_groups_details = default_groups_details
        self._defined = defined
        self._group_details = group_details
        self._groups = groups
        self._has_unlimited_seats = has_unlimited_seats
        self._key = key
        self._name = name
        self._number_of_seats = number_of_seats
        self._platform = platform
        self._remaining_seats = remaining_seats
        self._selected_by_default = selected_by_default
        self._user_count = user_count
        self._user_count_description = user_count_description

    @classmethod
    def from_dict(cls, dikt) -> 'ApplicationRole':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ApplicationRole of this ApplicationRole.  # noqa: E501
        :rtype: ApplicationRole
        """
        return util.deserialize_model(dikt, cls)

    @property
    def default_groups(self) -> list[str]:
        """Gets the default_groups of this ApplicationRole.

        The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.  # noqa: E501

        :return: The default_groups of this ApplicationRole.
        :rtype: list[str]
        """
        return self._default_groups

    @default_groups.setter
    def default_groups(self, default_groups: list[str]):
        """Sets the default_groups of this ApplicationRole.

        The groups that are granted default access for this application role. As a group's name can change, use of `defaultGroupsDetails` is recommended to identify a groups.  # noqa: E501

        :param default_groups: The default_groups of this ApplicationRole.
        :type default_groups: list[str]
        """

        self._default_groups = default_groups

    @property
    def default_groups_details(self) -> List[GroupName]:
        """Gets the default_groups_details of this ApplicationRole.

        The groups that are granted default access for this application role.  # noqa: E501

        :return: The default_groups_details of this ApplicationRole.
        :rtype: List[GroupName]
        """
        return self._default_groups_details

    @default_groups_details.setter
    def default_groups_details(self, default_groups_details: List[GroupName]):
        """Sets the default_groups_details of this ApplicationRole.

        The groups that are granted default access for this application role.  # noqa: E501

        :param default_groups_details: The default_groups_details of this ApplicationRole.
        :type default_groups_details: List[GroupName]
        """

        self._default_groups_details = default_groups_details

    @property
    def defined(self) -> bool:
        """Gets the defined of this ApplicationRole.

        Deprecated.  # noqa: E501

        :return: The defined of this ApplicationRole.
        :rtype: bool
        """
        return self._defined

    @defined.setter
    def defined(self, defined: bool):
        """Sets the defined of this ApplicationRole.

        Deprecated.  # noqa: E501

        :param defined: The defined of this ApplicationRole.
        :type defined: bool
        """

        self._defined = defined

    @property
    def group_details(self) -> List[GroupName]:
        """Gets the group_details of this ApplicationRole.

        The groups associated with the application role.  # noqa: E501

        :return: The group_details of this ApplicationRole.
        :rtype: List[GroupName]
        """
        return self._group_details

    @group_details.setter
    def group_details(self, group_details: List[GroupName]):
        """Sets the group_details of this ApplicationRole.

        The groups associated with the application role.  # noqa: E501

        :param group_details: The group_details of this ApplicationRole.
        :type group_details: List[GroupName]
        """

        self._group_details = group_details

    @property
    def groups(self) -> list[str]:
        """Gets the groups of this ApplicationRole.

        The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.  # noqa: E501

        :return: The groups of this ApplicationRole.
        :rtype: list[str]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: list[str]):
        """Sets the groups of this ApplicationRole.

        The groups associated with the application role. As a group's name can change, use of `groupDetails` is recommended to identify a groups.  # noqa: E501

        :param groups: The groups of this ApplicationRole.
        :type groups: list[str]
        """

        self._groups = groups

    @property
    def has_unlimited_seats(self) -> bool:
        """Gets the has_unlimited_seats of this ApplicationRole.


        :return: The has_unlimited_seats of this ApplicationRole.
        :rtype: bool
        """
        return self._has_unlimited_seats

    @has_unlimited_seats.setter
    def has_unlimited_seats(self, has_unlimited_seats: bool):
        """Sets the has_unlimited_seats of this ApplicationRole.


        :param has_unlimited_seats: The has_unlimited_seats of this ApplicationRole.
        :type has_unlimited_seats: bool
        """

        self._has_unlimited_seats = has_unlimited_seats

    @property
    def key(self) -> str:
        """Gets the key of this ApplicationRole.

        The key of the application role.  # noqa: E501

        :return: The key of this ApplicationRole.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this ApplicationRole.

        The key of the application role.  # noqa: E501

        :param key: The key of this ApplicationRole.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this ApplicationRole.

        The display name of the application role.  # noqa: E501

        :return: The name of this ApplicationRole.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ApplicationRole.

        The display name of the application role.  # noqa: E501

        :param name: The name of this ApplicationRole.
        :type name: str
        """

        self._name = name

    @property
    def number_of_seats(self) -> int:
        """Gets the number_of_seats of this ApplicationRole.

        The maximum count of users on your license.  # noqa: E501

        :return: The number_of_seats of this ApplicationRole.
        :rtype: int
        """
        return self._number_of_seats

    @number_of_seats.setter
    def number_of_seats(self, number_of_seats: int):
        """Sets the number_of_seats of this ApplicationRole.

        The maximum count of users on your license.  # noqa: E501

        :param number_of_seats: The number_of_seats of this ApplicationRole.
        :type number_of_seats: int
        """

        self._number_of_seats = number_of_seats

    @property
    def platform(self) -> bool:
        """Gets the platform of this ApplicationRole.

        Indicates if the application role belongs to Jira platform (`jira-core`).  # noqa: E501

        :return: The platform of this ApplicationRole.
        :rtype: bool
        """
        return self._platform

    @platform.setter
    def platform(self, platform: bool):
        """Sets the platform of this ApplicationRole.

        Indicates if the application role belongs to Jira platform (`jira-core`).  # noqa: E501

        :param platform: The platform of this ApplicationRole.
        :type platform: bool
        """

        self._platform = platform

    @property
    def remaining_seats(self) -> int:
        """Gets the remaining_seats of this ApplicationRole.

        The count of users remaining on your license.  # noqa: E501

        :return: The remaining_seats of this ApplicationRole.
        :rtype: int
        """
        return self._remaining_seats

    @remaining_seats.setter
    def remaining_seats(self, remaining_seats: int):
        """Sets the remaining_seats of this ApplicationRole.

        The count of users remaining on your license.  # noqa: E501

        :param remaining_seats: The remaining_seats of this ApplicationRole.
        :type remaining_seats: int
        """

        self._remaining_seats = remaining_seats

    @property
    def selected_by_default(self) -> bool:
        """Gets the selected_by_default of this ApplicationRole.

        Determines whether this application role should be selected by default on user creation.  # noqa: E501

        :return: The selected_by_default of this ApplicationRole.
        :rtype: bool
        """
        return self._selected_by_default

    @selected_by_default.setter
    def selected_by_default(self, selected_by_default: bool):
        """Sets the selected_by_default of this ApplicationRole.

        Determines whether this application role should be selected by default on user creation.  # noqa: E501

        :param selected_by_default: The selected_by_default of this ApplicationRole.
        :type selected_by_default: bool
        """

        self._selected_by_default = selected_by_default

    @property
    def user_count(self) -> int:
        """Gets the user_count of this ApplicationRole.

        The number of users counting against your license.  # noqa: E501

        :return: The user_count of this ApplicationRole.
        :rtype: int
        """
        return self._user_count

    @user_count.setter
    def user_count(self, user_count: int):
        """Sets the user_count of this ApplicationRole.

        The number of users counting against your license.  # noqa: E501

        :param user_count: The user_count of this ApplicationRole.
        :type user_count: int
        """

        self._user_count = user_count

    @property
    def user_count_description(self) -> str:
        """Gets the user_count_description of this ApplicationRole.

        The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.  # noqa: E501

        :return: The user_count_description of this ApplicationRole.
        :rtype: str
        """
        return self._user_count_description

    @user_count_description.setter
    def user_count_description(self, user_count_description: str):
        """Sets the user_count_description of this ApplicationRole.

        The [type of users](https://confluence.atlassian.com/x/lRW3Ng) being counted against your license.  # noqa: E501

        :param user_count_description: The user_count_description of this ApplicationRole.
        :type user_count_description: str
        """

        self._user_count_description = user_count_description
