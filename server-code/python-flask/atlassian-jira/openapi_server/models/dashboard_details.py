from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.share_permission import SharePermission
from openapi_server import util

from openapi_server.models.share_permission import SharePermission  # noqa: E501

class DashboardDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, edit_permissions=None, name=None, share_permissions=None):  # noqa: E501
        """DashboardDetails - a model defined in OpenAPI

        :param description: The description of this DashboardDetails.  # noqa: E501
        :type description: str
        :param edit_permissions: The edit_permissions of this DashboardDetails.  # noqa: E501
        :type edit_permissions: List[SharePermission]
        :param name: The name of this DashboardDetails.  # noqa: E501
        :type name: str
        :param share_permissions: The share_permissions of this DashboardDetails.  # noqa: E501
        :type share_permissions: List[SharePermission]
        """
        self.openapi_types = {
            'description': str,
            'edit_permissions': List[SharePermission],
            'name': str,
            'share_permissions': List[SharePermission]
        }

        self.attribute_map = {
            'description': 'description',
            'edit_permissions': 'editPermissions',
            'name': 'name',
            'share_permissions': 'sharePermissions'
        }

        self._description = description
        self._edit_permissions = edit_permissions
        self._name = name
        self._share_permissions = share_permissions

    @classmethod
    def from_dict(cls, dikt) -> 'DashboardDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DashboardDetails of this DashboardDetails.  # noqa: E501
        :rtype: DashboardDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this DashboardDetails.

        The description of the dashboard.  # noqa: E501

        :return: The description of this DashboardDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this DashboardDetails.

        The description of the dashboard.  # noqa: E501

        :param description: The description of this DashboardDetails.
        :type description: str
        """

        self._description = description

    @property
    def edit_permissions(self) -> List[SharePermission]:
        """Gets the edit_permissions of this DashboardDetails.

        The edit permissions for the dashboard.  # noqa: E501

        :return: The edit_permissions of this DashboardDetails.
        :rtype: List[SharePermission]
        """
        return self._edit_permissions

    @edit_permissions.setter
    def edit_permissions(self, edit_permissions: List[SharePermission]):
        """Sets the edit_permissions of this DashboardDetails.

        The edit permissions for the dashboard.  # noqa: E501

        :param edit_permissions: The edit_permissions of this DashboardDetails.
        :type edit_permissions: List[SharePermission]
        """
        if edit_permissions is None:
            raise ValueError("Invalid value for `edit_permissions`, must not be `None`")  # noqa: E501

        self._edit_permissions = edit_permissions

    @property
    def name(self) -> str:
        """Gets the name of this DashboardDetails.

        The name of the dashboard.  # noqa: E501

        :return: The name of this DashboardDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DashboardDetails.

        The name of the dashboard.  # noqa: E501

        :param name: The name of this DashboardDetails.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def share_permissions(self) -> List[SharePermission]:
        """Gets the share_permissions of this DashboardDetails.

        The share permissions for the dashboard.  # noqa: E501

        :return: The share_permissions of this DashboardDetails.
        :rtype: List[SharePermission]
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions: List[SharePermission]):
        """Sets the share_permissions of this DashboardDetails.

        The share permissions for the dashboard.  # noqa: E501

        :param share_permissions: The share_permissions of this DashboardDetails.
        :type share_permissions: List[SharePermission]
        """
        if share_permissions is None:
            raise ValueError("Invalid value for `share_permissions`, must not be `None`")  # noqa: E501

        self._share_permissions = share_permissions
