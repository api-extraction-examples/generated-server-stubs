from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserPickerUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, avatar_url=None, display_name=None, html=None, key=None, name=None):  # noqa: E501
        """UserPickerUser - a model defined in OpenAPI

        :param account_id: The account_id of this UserPickerUser.  # noqa: E501
        :type account_id: str
        :param avatar_url: The avatar_url of this UserPickerUser.  # noqa: E501
        :type avatar_url: str
        :param display_name: The display_name of this UserPickerUser.  # noqa: E501
        :type display_name: str
        :param html: The html of this UserPickerUser.  # noqa: E501
        :type html: str
        :param key: The key of this UserPickerUser.  # noqa: E501
        :type key: str
        :param name: The name of this UserPickerUser.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'account_id': str,
            'avatar_url': str,
            'display_name': str,
            'html': str,
            'key': str,
            'name': str
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'avatar_url': 'avatarUrl',
            'display_name': 'displayName',
            'html': 'html',
            'key': 'key',
            'name': 'name'
        }

        self._account_id = account_id
        self._avatar_url = avatar_url
        self._display_name = display_name
        self._html = html
        self._key = key
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'UserPickerUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserPickerUser of this UserPickerUser.  # noqa: E501
        :rtype: UserPickerUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this UserPickerUser.

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :return: The account_id of this UserPickerUser.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this UserPickerUser.

        The account ID of the user, which uniquely identifies the user across all Atlassian products. For example, *5b10ac8d82e05b22cc7d4ef5*.  # noqa: E501

        :param account_id: The account_id of this UserPickerUser.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def avatar_url(self) -> str:
        """Gets the avatar_url of this UserPickerUser.

        The avatar URL of the user.  # noqa: E501

        :return: The avatar_url of this UserPickerUser.
        :rtype: str
        """
        return self._avatar_url

    @avatar_url.setter
    def avatar_url(self, avatar_url: str):
        """Sets the avatar_url of this UserPickerUser.

        The avatar URL of the user.  # noqa: E501

        :param avatar_url: The avatar_url of this UserPickerUser.
        :type avatar_url: str
        """

        self._avatar_url = avatar_url

    @property
    def display_name(self) -> str:
        """Gets the display_name of this UserPickerUser.

        The display name of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :return: The display_name of this UserPickerUser.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this UserPickerUser.

        The display name of the user. Depending on the user’s privacy setting, this may be returned as null.  # noqa: E501

        :param display_name: The display_name of this UserPickerUser.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def html(self) -> str:
        """Gets the html of this UserPickerUser.

        The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :return: The html of this UserPickerUser.
        :rtype: str
        """
        return self._html

    @html.setter
    def html(self, html: str):
        """Sets the html of this UserPickerUser.

        The display name, email address, and key of the user with the matched query string highlighted with the HTML bold tag.  # noqa: E501

        :param html: The html of this UserPickerUser.
        :type html: str
        """

        self._html = html

    @property
    def key(self) -> str:
        """Gets the key of this UserPickerUser.

        This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The key of this UserPickerUser.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this UserPickerUser.

        This property is no longer available. See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param key: The key of this UserPickerUser.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this UserPickerUser.

        This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The name of this UserPickerUser.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserPickerUser.

        This property is no longer available . See the [deprecation notice](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param name: The name of this UserPickerUser.
        :type name: str
        """

        self._name = name
