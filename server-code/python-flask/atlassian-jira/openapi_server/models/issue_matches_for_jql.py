from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueMatchesForJQL(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors=None, matched_issues=None):  # noqa: E501
        """IssueMatchesForJQL - a model defined in OpenAPI

        :param errors: The errors of this IssueMatchesForJQL.  # noqa: E501
        :type errors: list[str]
        :param matched_issues: The matched_issues of this IssueMatchesForJQL.  # noqa: E501
        :type matched_issues: list[int]
        """
        self.openapi_types = {
            'errors': list[str],
            'matched_issues': list[int]
        }

        self.attribute_map = {
            'errors': 'errors',
            'matched_issues': 'matchedIssues'
        }

        self._errors = errors
        self._matched_issues = matched_issues

    @classmethod
    def from_dict(cls, dikt) -> 'IssueMatchesForJQL':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueMatchesForJQL of this IssueMatchesForJQL.  # noqa: E501
        :rtype: IssueMatchesForJQL
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self) -> list[str]:
        """Gets the errors of this IssueMatchesForJQL.

        A list of errors.  # noqa: E501

        :return: The errors of this IssueMatchesForJQL.
        :rtype: list[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: list[str]):
        """Sets the errors of this IssueMatchesForJQL.

        A list of errors.  # noqa: E501

        :param errors: The errors of this IssueMatchesForJQL.
        :type errors: list[str]
        """
        if errors is None:
            raise ValueError("Invalid value for `errors`, must not be `None`")  # noqa: E501

        self._errors = errors

    @property
    def matched_issues(self) -> list[int]:
        """Gets the matched_issues of this IssueMatchesForJQL.

        A list of issue IDs.  # noqa: E501

        :return: The matched_issues of this IssueMatchesForJQL.
        :rtype: list[int]
        """
        return self._matched_issues

    @matched_issues.setter
    def matched_issues(self, matched_issues: list[int]):
        """Sets the matched_issues of this IssueMatchesForJQL.

        A list of issue IDs.  # noqa: E501

        :param matched_issues: The matched_issues of this IssueMatchesForJQL.
        :type matched_issues: list[int]
        """
        if matched_issues is None:
            raise ValueError("Invalid value for `matched_issues`, must not be `None`")  # noqa: E501

        self._matched_issues = matched_issues
