from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.field_metadata_schema import FieldMetadataSchema
from openapi_server import util

from openapi_server.models.field_metadata_schema import FieldMetadataSchema  # noqa: E501

class FieldMetadata(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allowed_values=None, auto_complete_url=None, configuration=None, default_value=None, has_default_value=None, key=None, name=None, operations=None, required=None, _schema=None):  # noqa: E501
        """FieldMetadata - a model defined in OpenAPI

        :param allowed_values: The allowed_values of this FieldMetadata.  # noqa: E501
        :type allowed_values: List[object]
        :param auto_complete_url: The auto_complete_url of this FieldMetadata.  # noqa: E501
        :type auto_complete_url: str
        :param configuration: The configuration of this FieldMetadata.  # noqa: E501
        :type configuration: Dict[str, object]
        :param default_value: The default_value of this FieldMetadata.  # noqa: E501
        :type default_value: object
        :param has_default_value: The has_default_value of this FieldMetadata.  # noqa: E501
        :type has_default_value: bool
        :param key: The key of this FieldMetadata.  # noqa: E501
        :type key: str
        :param name: The name of this FieldMetadata.  # noqa: E501
        :type name: str
        :param operations: The operations of this FieldMetadata.  # noqa: E501
        :type operations: List[str]
        :param required: The required of this FieldMetadata.  # noqa: E501
        :type required: bool
        :param _schema: The _schema of this FieldMetadata.  # noqa: E501
        :type _schema: FieldMetadataSchema
        """
        self.openapi_types = {
            'allowed_values': List[object],
            'auto_complete_url': str,
            'configuration': Dict[str, object],
            'default_value': object,
            'has_default_value': bool,
            'key': str,
            'name': str,
            'operations': List[str],
            'required': bool,
            '_schema': FieldMetadataSchema
        }

        self.attribute_map = {
            'allowed_values': 'allowedValues',
            'auto_complete_url': 'autoCompleteUrl',
            'configuration': 'configuration',
            'default_value': 'defaultValue',
            'has_default_value': 'hasDefaultValue',
            'key': 'key',
            'name': 'name',
            'operations': 'operations',
            'required': 'required',
            '_schema': 'schema'
        }

        self._allowed_values = allowed_values
        self._auto_complete_url = auto_complete_url
        self._configuration = configuration
        self._default_value = default_value
        self._has_default_value = has_default_value
        self._key = key
        self._name = name
        self._operations = operations
        self._required = required
        self.__schema = _schema

    @classmethod
    def from_dict(cls, dikt) -> 'FieldMetadata':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FieldMetadata of this FieldMetadata.  # noqa: E501
        :rtype: FieldMetadata
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allowed_values(self) -> List[object]:
        """Gets the allowed_values of this FieldMetadata.

        The list of values allowed in the field.  # noqa: E501

        :return: The allowed_values of this FieldMetadata.
        :rtype: List[object]
        """
        return self._allowed_values

    @allowed_values.setter
    def allowed_values(self, allowed_values: List[object]):
        """Sets the allowed_values of this FieldMetadata.

        The list of values allowed in the field.  # noqa: E501

        :param allowed_values: The allowed_values of this FieldMetadata.
        :type allowed_values: List[object]
        """

        self._allowed_values = allowed_values

    @property
    def auto_complete_url(self) -> str:
        """Gets the auto_complete_url of this FieldMetadata.

        The URL that can be used to automatically complete the field.  # noqa: E501

        :return: The auto_complete_url of this FieldMetadata.
        :rtype: str
        """
        return self._auto_complete_url

    @auto_complete_url.setter
    def auto_complete_url(self, auto_complete_url: str):
        """Sets the auto_complete_url of this FieldMetadata.

        The URL that can be used to automatically complete the field.  # noqa: E501

        :param auto_complete_url: The auto_complete_url of this FieldMetadata.
        :type auto_complete_url: str
        """

        self._auto_complete_url = auto_complete_url

    @property
    def configuration(self) -> Dict[str, object]:
        """Gets the configuration of this FieldMetadata.

        The configuration properties.  # noqa: E501

        :return: The configuration of this FieldMetadata.
        :rtype: Dict[str, object]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: Dict[str, object]):
        """Sets the configuration of this FieldMetadata.

        The configuration properties.  # noqa: E501

        :param configuration: The configuration of this FieldMetadata.
        :type configuration: Dict[str, object]
        """

        self._configuration = configuration

    @property
    def default_value(self) -> object:
        """Gets the default_value of this FieldMetadata.

        The default value of the field.  # noqa: E501

        :return: The default_value of this FieldMetadata.
        :rtype: object
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value: object):
        """Sets the default_value of this FieldMetadata.

        The default value of the field.  # noqa: E501

        :param default_value: The default_value of this FieldMetadata.
        :type default_value: object
        """

        self._default_value = default_value

    @property
    def has_default_value(self) -> bool:
        """Gets the has_default_value of this FieldMetadata.

        Whether the field has a default value.  # noqa: E501

        :return: The has_default_value of this FieldMetadata.
        :rtype: bool
        """
        return self._has_default_value

    @has_default_value.setter
    def has_default_value(self, has_default_value: bool):
        """Sets the has_default_value of this FieldMetadata.

        Whether the field has a default value.  # noqa: E501

        :param has_default_value: The has_default_value of this FieldMetadata.
        :type has_default_value: bool
        """

        self._has_default_value = has_default_value

    @property
    def key(self) -> str:
        """Gets the key of this FieldMetadata.

        The key of the field.  # noqa: E501

        :return: The key of this FieldMetadata.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this FieldMetadata.

        The key of the field.  # noqa: E501

        :param key: The key of this FieldMetadata.
        :type key: str
        """
        if key is None:
            raise ValueError("Invalid value for `key`, must not be `None`")  # noqa: E501

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this FieldMetadata.

        The name of the field.  # noqa: E501

        :return: The name of this FieldMetadata.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this FieldMetadata.

        The name of the field.  # noqa: E501

        :param name: The name of this FieldMetadata.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def operations(self) -> List[str]:
        """Gets the operations of this FieldMetadata.

        The list of operations that can be performed on the field.  # noqa: E501

        :return: The operations of this FieldMetadata.
        :rtype: List[str]
        """
        return self._operations

    @operations.setter
    def operations(self, operations: List[str]):
        """Sets the operations of this FieldMetadata.

        The list of operations that can be performed on the field.  # noqa: E501

        :param operations: The operations of this FieldMetadata.
        :type operations: List[str]
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    @property
    def required(self) -> bool:
        """Gets the required of this FieldMetadata.

        Whether the field is required.  # noqa: E501

        :return: The required of this FieldMetadata.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required: bool):
        """Sets the required of this FieldMetadata.

        Whether the field is required.  # noqa: E501

        :param required: The required of this FieldMetadata.
        :type required: bool
        """
        if required is None:
            raise ValueError("Invalid value for `required`, must not be `None`")  # noqa: E501

        self._required = required

    @property
    def _schema(self) -> FieldMetadataSchema:
        """Gets the _schema of this FieldMetadata.


        :return: The _schema of this FieldMetadata.
        :rtype: FieldMetadataSchema
        """
        return self.__schema

    @_schema.setter
    def _schema(self, _schema: FieldMetadataSchema):
        """Sets the _schema of this FieldMetadata.


        :param _schema: The _schema of this FieldMetadata.
        :type _schema: FieldMetadataSchema
        """
        if _schema is None:
            raise ValueError("Invalid value for `_schema`, must not be `None`")  # noqa: E501

        self.__schema = _schema
