from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.suggested_issue import SuggestedIssue
from openapi_server import util

from openapi_server.models.suggested_issue import SuggestedIssue  # noqa: E501

class IssuePickerSuggestionsIssueType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, issues=None, label=None, msg=None, sub=None):  # noqa: E501
        """IssuePickerSuggestionsIssueType - a model defined in OpenAPI

        :param id: The id of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type id: str
        :param issues: The issues of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type issues: List[SuggestedIssue]
        :param label: The label of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type label: str
        :param msg: The msg of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type msg: str
        :param sub: The sub of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :type sub: str
        """
        self.openapi_types = {
            'id': str,
            'issues': List[SuggestedIssue],
            'label': str,
            'msg': str,
            'sub': str
        }

        self.attribute_map = {
            'id': 'id',
            'issues': 'issues',
            'label': 'label',
            'msg': 'msg',
            'sub': 'sub'
        }

        self._id = id
        self._issues = issues
        self._label = label
        self._msg = msg
        self._sub = sub

    @classmethod
    def from_dict(cls, dikt) -> 'IssuePickerSuggestionsIssueType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssuePickerSuggestionsIssueType of this IssuePickerSuggestionsIssueType.  # noqa: E501
        :rtype: IssuePickerSuggestionsIssueType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this IssuePickerSuggestionsIssueType.

        The ID of the type of issues suggested for use in auto-completion.  # noqa: E501

        :return: The id of this IssuePickerSuggestionsIssueType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this IssuePickerSuggestionsIssueType.

        The ID of the type of issues suggested for use in auto-completion.  # noqa: E501

        :param id: The id of this IssuePickerSuggestionsIssueType.
        :type id: str
        """

        self._id = id

    @property
    def issues(self) -> List[SuggestedIssue]:
        """Gets the issues of this IssuePickerSuggestionsIssueType.

        A list of issues suggested for use in auto-completion.  # noqa: E501

        :return: The issues of this IssuePickerSuggestionsIssueType.
        :rtype: List[SuggestedIssue]
        """
        return self._issues

    @issues.setter
    def issues(self, issues: List[SuggestedIssue]):
        """Sets the issues of this IssuePickerSuggestionsIssueType.

        A list of issues suggested for use in auto-completion.  # noqa: E501

        :param issues: The issues of this IssuePickerSuggestionsIssueType.
        :type issues: List[SuggestedIssue]
        """

        self._issues = issues

    @property
    def label(self) -> str:
        """Gets the label of this IssuePickerSuggestionsIssueType.

        The label of the type of issues suggested for use in auto-completion.  # noqa: E501

        :return: The label of this IssuePickerSuggestionsIssueType.
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label: str):
        """Sets the label of this IssuePickerSuggestionsIssueType.

        The label of the type of issues suggested for use in auto-completion.  # noqa: E501

        :param label: The label of this IssuePickerSuggestionsIssueType.
        :type label: str
        """

        self._label = label

    @property
    def msg(self) -> str:
        """Gets the msg of this IssuePickerSuggestionsIssueType.

        If no issue suggestions are found, returns a message indicating no suggestions were found,  # noqa: E501

        :return: The msg of this IssuePickerSuggestionsIssueType.
        :rtype: str
        """
        return self._msg

    @msg.setter
    def msg(self, msg: str):
        """Sets the msg of this IssuePickerSuggestionsIssueType.

        If no issue suggestions are found, returns a message indicating no suggestions were found,  # noqa: E501

        :param msg: The msg of this IssuePickerSuggestionsIssueType.
        :type msg: str
        """

        self._msg = msg

    @property
    def sub(self) -> str:
        """Gets the sub of this IssuePickerSuggestionsIssueType.

        If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.  # noqa: E501

        :return: The sub of this IssuePickerSuggestionsIssueType.
        :rtype: str
        """
        return self._sub

    @sub.setter
    def sub(self, sub: str):
        """Sets the sub of this IssuePickerSuggestionsIssueType.

        If issue suggestions are found, returns a message indicating the number of issues suggestions found and returned.  # noqa: E501

        :param sub: The sub of this IssuePickerSuggestionsIssueType.
        :type sub: str
        """

        self._sub = sub
