from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JqlFunctionPrecomputationBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments=None, created=None, field=None, function_key=None, function_name=None, id=None, operator=None, updated=None, used=None, value=None):  # noqa: E501
        """JqlFunctionPrecomputationBean - a model defined in OpenAPI

        :param arguments: The arguments of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type arguments: List[str]
        :param created: The created of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type created: datetime
        :param field: The field of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type field: str
        :param function_key: The function_key of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type function_key: str
        :param function_name: The function_name of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type function_name: str
        :param id: The id of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type id: str
        :param operator: The operator of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type operator: str
        :param updated: The updated of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type updated: datetime
        :param used: The used of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type used: datetime
        :param value: The value of this JqlFunctionPrecomputationBean.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'arguments': List[str],
            'created': datetime,
            'field': str,
            'function_key': str,
            'function_name': str,
            'id': str,
            'operator': str,
            'updated': datetime,
            'used': datetime,
            'value': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'created': 'created',
            'field': 'field',
            'function_key': 'functionKey',
            'function_name': 'functionName',
            'id': 'id',
            'operator': 'operator',
            'updated': 'updated',
            'used': 'used',
            'value': 'value'
        }

        self._arguments = arguments
        self._created = created
        self._field = field
        self._function_key = function_key
        self._function_name = function_name
        self._id = id
        self._operator = operator
        self._updated = updated
        self._used = used
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'JqlFunctionPrecomputationBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JqlFunctionPrecomputationBean of this JqlFunctionPrecomputationBean.  # noqa: E501
        :rtype: JqlFunctionPrecomputationBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self) -> List[str]:
        """Gets the arguments of this JqlFunctionPrecomputationBean.


        :return: The arguments of this JqlFunctionPrecomputationBean.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: List[str]):
        """Sets the arguments of this JqlFunctionPrecomputationBean.


        :param arguments: The arguments of this JqlFunctionPrecomputationBean.
        :type arguments: List[str]
        """

        self._arguments = arguments

    @property
    def created(self) -> datetime:
        """Gets the created of this JqlFunctionPrecomputationBean.


        :return: The created of this JqlFunctionPrecomputationBean.
        :rtype: datetime
        """
        return self._created

    @created.setter
    def created(self, created: datetime):
        """Sets the created of this JqlFunctionPrecomputationBean.


        :param created: The created of this JqlFunctionPrecomputationBean.
        :type created: datetime
        """

        self._created = created

    @property
    def field(self) -> str:
        """Gets the field of this JqlFunctionPrecomputationBean.


        :return: The field of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._field

    @field.setter
    def field(self, field: str):
        """Sets the field of this JqlFunctionPrecomputationBean.


        :param field: The field of this JqlFunctionPrecomputationBean.
        :type field: str
        """

        self._field = field

    @property
    def function_key(self) -> str:
        """Gets the function_key of this JqlFunctionPrecomputationBean.


        :return: The function_key of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._function_key

    @function_key.setter
    def function_key(self, function_key: str):
        """Sets the function_key of this JqlFunctionPrecomputationBean.


        :param function_key: The function_key of this JqlFunctionPrecomputationBean.
        :type function_key: str
        """

        self._function_key = function_key

    @property
    def function_name(self) -> str:
        """Gets the function_name of this JqlFunctionPrecomputationBean.


        :return: The function_name of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._function_name

    @function_name.setter
    def function_name(self, function_name: str):
        """Sets the function_name of this JqlFunctionPrecomputationBean.


        :param function_name: The function_name of this JqlFunctionPrecomputationBean.
        :type function_name: str
        """

        self._function_name = function_name

    @property
    def id(self) -> str:
        """Gets the id of this JqlFunctionPrecomputationBean.


        :return: The id of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this JqlFunctionPrecomputationBean.


        :param id: The id of this JqlFunctionPrecomputationBean.
        :type id: str
        """

        self._id = id

    @property
    def operator(self) -> str:
        """Gets the operator of this JqlFunctionPrecomputationBean.


        :return: The operator of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this JqlFunctionPrecomputationBean.


        :param operator: The operator of this JqlFunctionPrecomputationBean.
        :type operator: str
        """

        self._operator = operator

    @property
    def updated(self) -> datetime:
        """Gets the updated of this JqlFunctionPrecomputationBean.


        :return: The updated of this JqlFunctionPrecomputationBean.
        :rtype: datetime
        """
        return self._updated

    @updated.setter
    def updated(self, updated: datetime):
        """Sets the updated of this JqlFunctionPrecomputationBean.


        :param updated: The updated of this JqlFunctionPrecomputationBean.
        :type updated: datetime
        """

        self._updated = updated

    @property
    def used(self) -> datetime:
        """Gets the used of this JqlFunctionPrecomputationBean.


        :return: The used of this JqlFunctionPrecomputationBean.
        :rtype: datetime
        """
        return self._used

    @used.setter
    def used(self, used: datetime):
        """Sets the used of this JqlFunctionPrecomputationBean.


        :param used: The used of this JqlFunctionPrecomputationBean.
        :type used: datetime
        """

        self._used = used

    @property
    def value(self) -> str:
        """Gets the value of this JqlFunctionPrecomputationBean.


        :return: The value of this JqlFunctionPrecomputationBean.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this JqlFunctionPrecomputationBean.


        :param value: The value of this JqlFunctionPrecomputationBean.
        :type value: str
        """

        self._value = value
