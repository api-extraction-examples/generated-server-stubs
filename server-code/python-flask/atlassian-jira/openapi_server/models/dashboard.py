from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dashboard_owner import DashboardOwner
from openapi_server.models.share_permission import SharePermission
from openapi_server import util

from openapi_server.models.dashboard_owner import DashboardOwner  # noqa: E501
from openapi_server.models.share_permission import SharePermission  # noqa: E501

class Dashboard(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, automatic_refresh_ms=None, description=None, edit_permissions=None, id=None, is_favourite=None, is_writable=None, name=None, owner=None, popularity=None, rank=None, _self=None, share_permissions=None, system_dashboard=None, view=None):  # noqa: E501
        """Dashboard - a model defined in OpenAPI

        :param automatic_refresh_ms: The automatic_refresh_ms of this Dashboard.  # noqa: E501
        :type automatic_refresh_ms: int
        :param description: The description of this Dashboard.  # noqa: E501
        :type description: str
        :param edit_permissions: The edit_permissions of this Dashboard.  # noqa: E501
        :type edit_permissions: List[SharePermission]
        :param id: The id of this Dashboard.  # noqa: E501
        :type id: str
        :param is_favourite: The is_favourite of this Dashboard.  # noqa: E501
        :type is_favourite: bool
        :param is_writable: The is_writable of this Dashboard.  # noqa: E501
        :type is_writable: bool
        :param name: The name of this Dashboard.  # noqa: E501
        :type name: str
        :param owner: The owner of this Dashboard.  # noqa: E501
        :type owner: DashboardOwner
        :param popularity: The popularity of this Dashboard.  # noqa: E501
        :type popularity: int
        :param rank: The rank of this Dashboard.  # noqa: E501
        :type rank: int
        :param _self: The _self of this Dashboard.  # noqa: E501
        :type _self: str
        :param share_permissions: The share_permissions of this Dashboard.  # noqa: E501
        :type share_permissions: List[SharePermission]
        :param system_dashboard: The system_dashboard of this Dashboard.  # noqa: E501
        :type system_dashboard: bool
        :param view: The view of this Dashboard.  # noqa: E501
        :type view: str
        """
        self.openapi_types = {
            'automatic_refresh_ms': int,
            'description': str,
            'edit_permissions': List[SharePermission],
            'id': str,
            'is_favourite': bool,
            'is_writable': bool,
            'name': str,
            'owner': DashboardOwner,
            'popularity': int,
            'rank': int,
            '_self': str,
            'share_permissions': List[SharePermission],
            'system_dashboard': bool,
            'view': str
        }

        self.attribute_map = {
            'automatic_refresh_ms': 'automaticRefreshMs',
            'description': 'description',
            'edit_permissions': 'editPermissions',
            'id': 'id',
            'is_favourite': 'isFavourite',
            'is_writable': 'isWritable',
            'name': 'name',
            'owner': 'owner',
            'popularity': 'popularity',
            'rank': 'rank',
            '_self': 'self',
            'share_permissions': 'sharePermissions',
            'system_dashboard': 'systemDashboard',
            'view': 'view'
        }

        self._automatic_refresh_ms = automatic_refresh_ms
        self._description = description
        self._edit_permissions = edit_permissions
        self._id = id
        self._is_favourite = is_favourite
        self._is_writable = is_writable
        self._name = name
        self._owner = owner
        self._popularity = popularity
        self._rank = rank
        self.__self = _self
        self._share_permissions = share_permissions
        self._system_dashboard = system_dashboard
        self._view = view

    @classmethod
    def from_dict(cls, dikt) -> 'Dashboard':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Dashboard of this Dashboard.  # noqa: E501
        :rtype: Dashboard
        """
        return util.deserialize_model(dikt, cls)

    @property
    def automatic_refresh_ms(self) -> int:
        """Gets the automatic_refresh_ms of this Dashboard.

        The automatic refresh interval for the dashboard in milliseconds.  # noqa: E501

        :return: The automatic_refresh_ms of this Dashboard.
        :rtype: int
        """
        return self._automatic_refresh_ms

    @automatic_refresh_ms.setter
    def automatic_refresh_ms(self, automatic_refresh_ms: int):
        """Sets the automatic_refresh_ms of this Dashboard.

        The automatic refresh interval for the dashboard in milliseconds.  # noqa: E501

        :param automatic_refresh_ms: The automatic_refresh_ms of this Dashboard.
        :type automatic_refresh_ms: int
        """

        self._automatic_refresh_ms = automatic_refresh_ms

    @property
    def description(self) -> str:
        """Gets the description of this Dashboard.


        :return: The description of this Dashboard.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Dashboard.


        :param description: The description of this Dashboard.
        :type description: str
        """

        self._description = description

    @property
    def edit_permissions(self) -> List[SharePermission]:
        """Gets the edit_permissions of this Dashboard.

        The details of any edit share permissions for the dashboard.  # noqa: E501

        :return: The edit_permissions of this Dashboard.
        :rtype: List[SharePermission]
        """
        return self._edit_permissions

    @edit_permissions.setter
    def edit_permissions(self, edit_permissions: List[SharePermission]):
        """Sets the edit_permissions of this Dashboard.

        The details of any edit share permissions for the dashboard.  # noqa: E501

        :param edit_permissions: The edit_permissions of this Dashboard.
        :type edit_permissions: List[SharePermission]
        """

        self._edit_permissions = edit_permissions

    @property
    def id(self) -> str:
        """Gets the id of this Dashboard.

        The ID of the dashboard.  # noqa: E501

        :return: The id of this Dashboard.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Dashboard.

        The ID of the dashboard.  # noqa: E501

        :param id: The id of this Dashboard.
        :type id: str
        """

        self._id = id

    @property
    def is_favourite(self) -> bool:
        """Gets the is_favourite of this Dashboard.

        Whether the dashboard is selected as a favorite by the user.  # noqa: E501

        :return: The is_favourite of this Dashboard.
        :rtype: bool
        """
        return self._is_favourite

    @is_favourite.setter
    def is_favourite(self, is_favourite: bool):
        """Sets the is_favourite of this Dashboard.

        Whether the dashboard is selected as a favorite by the user.  # noqa: E501

        :param is_favourite: The is_favourite of this Dashboard.
        :type is_favourite: bool
        """

        self._is_favourite = is_favourite

    @property
    def is_writable(self) -> bool:
        """Gets the is_writable of this Dashboard.

        Whether the current user has permission to edit the dashboard.  # noqa: E501

        :return: The is_writable of this Dashboard.
        :rtype: bool
        """
        return self._is_writable

    @is_writable.setter
    def is_writable(self, is_writable: bool):
        """Sets the is_writable of this Dashboard.

        Whether the current user has permission to edit the dashboard.  # noqa: E501

        :param is_writable: The is_writable of this Dashboard.
        :type is_writable: bool
        """

        self._is_writable = is_writable

    @property
    def name(self) -> str:
        """Gets the name of this Dashboard.

        The name of the dashboard.  # noqa: E501

        :return: The name of this Dashboard.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Dashboard.

        The name of the dashboard.  # noqa: E501

        :param name: The name of this Dashboard.
        :type name: str
        """

        self._name = name

    @property
    def owner(self) -> DashboardOwner:
        """Gets the owner of this Dashboard.


        :return: The owner of this Dashboard.
        :rtype: DashboardOwner
        """
        return self._owner

    @owner.setter
    def owner(self, owner: DashboardOwner):
        """Sets the owner of this Dashboard.


        :param owner: The owner of this Dashboard.
        :type owner: DashboardOwner
        """

        self._owner = owner

    @property
    def popularity(self) -> int:
        """Gets the popularity of this Dashboard.

        The number of users who have this dashboard as a favorite.  # noqa: E501

        :return: The popularity of this Dashboard.
        :rtype: int
        """
        return self._popularity

    @popularity.setter
    def popularity(self, popularity: int):
        """Sets the popularity of this Dashboard.

        The number of users who have this dashboard as a favorite.  # noqa: E501

        :param popularity: The popularity of this Dashboard.
        :type popularity: int
        """

        self._popularity = popularity

    @property
    def rank(self) -> int:
        """Gets the rank of this Dashboard.

        The rank of this dashboard.  # noqa: E501

        :return: The rank of this Dashboard.
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank: int):
        """Sets the rank of this Dashboard.

        The rank of this dashboard.  # noqa: E501

        :param rank: The rank of this Dashboard.
        :type rank: int
        """

        self._rank = rank

    @property
    def _self(self) -> str:
        """Gets the _self of this Dashboard.

        The URL of these dashboard details.  # noqa: E501

        :return: The _self of this Dashboard.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this Dashboard.

        The URL of these dashboard details.  # noqa: E501

        :param _self: The _self of this Dashboard.
        :type _self: str
        """

        self.__self = _self

    @property
    def share_permissions(self) -> List[SharePermission]:
        """Gets the share_permissions of this Dashboard.

        The details of any view share permissions for the dashboard.  # noqa: E501

        :return: The share_permissions of this Dashboard.
        :rtype: List[SharePermission]
        """
        return self._share_permissions

    @share_permissions.setter
    def share_permissions(self, share_permissions: List[SharePermission]):
        """Sets the share_permissions of this Dashboard.

        The details of any view share permissions for the dashboard.  # noqa: E501

        :param share_permissions: The share_permissions of this Dashboard.
        :type share_permissions: List[SharePermission]
        """

        self._share_permissions = share_permissions

    @property
    def system_dashboard(self) -> bool:
        """Gets the system_dashboard of this Dashboard.

        Whether the current dashboard is system dashboard.  # noqa: E501

        :return: The system_dashboard of this Dashboard.
        :rtype: bool
        """
        return self._system_dashboard

    @system_dashboard.setter
    def system_dashboard(self, system_dashboard: bool):
        """Sets the system_dashboard of this Dashboard.

        Whether the current dashboard is system dashboard.  # noqa: E501

        :param system_dashboard: The system_dashboard of this Dashboard.
        :type system_dashboard: bool
        """

        self._system_dashboard = system_dashboard

    @property
    def view(self) -> str:
        """Gets the view of this Dashboard.

        The URL of the dashboard.  # noqa: E501

        :return: The view of this Dashboard.
        :rtype: str
        """
        return self._view

    @view.setter
    def view(self, view: str):
        """Sets the view of this Dashboard.

        The URL of the dashboard.  # noqa: E501

        :param view: The view of this Dashboard.
        :type view: str
        """

        self._view = view
