from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ProjectFeature(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, feature=None, image_uri=None, localised_description=None, localised_name=None, prerequisites=None, project_id=None, state=None, toggle_locked=None):  # noqa: E501
        """ProjectFeature - a model defined in OpenAPI

        :param feature: The feature of this ProjectFeature.  # noqa: E501
        :type feature: str
        :param image_uri: The image_uri of this ProjectFeature.  # noqa: E501
        :type image_uri: str
        :param localised_description: The localised_description of this ProjectFeature.  # noqa: E501
        :type localised_description: str
        :param localised_name: The localised_name of this ProjectFeature.  # noqa: E501
        :type localised_name: str
        :param prerequisites: The prerequisites of this ProjectFeature.  # noqa: E501
        :type prerequisites: List[str]
        :param project_id: The project_id of this ProjectFeature.  # noqa: E501
        :type project_id: int
        :param state: The state of this ProjectFeature.  # noqa: E501
        :type state: str
        :param toggle_locked: The toggle_locked of this ProjectFeature.  # noqa: E501
        :type toggle_locked: bool
        """
        self.openapi_types = {
            'feature': str,
            'image_uri': str,
            'localised_description': str,
            'localised_name': str,
            'prerequisites': List[str],
            'project_id': int,
            'state': str,
            'toggle_locked': bool
        }

        self.attribute_map = {
            'feature': 'feature',
            'image_uri': 'imageUri',
            'localised_description': 'localisedDescription',
            'localised_name': 'localisedName',
            'prerequisites': 'prerequisites',
            'project_id': 'projectId',
            'state': 'state',
            'toggle_locked': 'toggleLocked'
        }

        self._feature = feature
        self._image_uri = image_uri
        self._localised_description = localised_description
        self._localised_name = localised_name
        self._prerequisites = prerequisites
        self._project_id = project_id
        self._state = state
        self._toggle_locked = toggle_locked

    @classmethod
    def from_dict(cls, dikt) -> 'ProjectFeature':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ProjectFeature of this ProjectFeature.  # noqa: E501
        :rtype: ProjectFeature
        """
        return util.deserialize_model(dikt, cls)

    @property
    def feature(self) -> str:
        """Gets the feature of this ProjectFeature.

        The key of the feature.  # noqa: E501

        :return: The feature of this ProjectFeature.
        :rtype: str
        """
        return self._feature

    @feature.setter
    def feature(self, feature: str):
        """Sets the feature of this ProjectFeature.

        The key of the feature.  # noqa: E501

        :param feature: The feature of this ProjectFeature.
        :type feature: str
        """

        self._feature = feature

    @property
    def image_uri(self) -> str:
        """Gets the image_uri of this ProjectFeature.

        URI for the image representing the feature.  # noqa: E501

        :return: The image_uri of this ProjectFeature.
        :rtype: str
        """
        return self._image_uri

    @image_uri.setter
    def image_uri(self, image_uri: str):
        """Sets the image_uri of this ProjectFeature.

        URI for the image representing the feature.  # noqa: E501

        :param image_uri: The image_uri of this ProjectFeature.
        :type image_uri: str
        """

        self._image_uri = image_uri

    @property
    def localised_description(self) -> str:
        """Gets the localised_description of this ProjectFeature.

        Localized display description for the feature.  # noqa: E501

        :return: The localised_description of this ProjectFeature.
        :rtype: str
        """
        return self._localised_description

    @localised_description.setter
    def localised_description(self, localised_description: str):
        """Sets the localised_description of this ProjectFeature.

        Localized display description for the feature.  # noqa: E501

        :param localised_description: The localised_description of this ProjectFeature.
        :type localised_description: str
        """

        self._localised_description = localised_description

    @property
    def localised_name(self) -> str:
        """Gets the localised_name of this ProjectFeature.

        Localized display name for the feature.  # noqa: E501

        :return: The localised_name of this ProjectFeature.
        :rtype: str
        """
        return self._localised_name

    @localised_name.setter
    def localised_name(self, localised_name: str):
        """Sets the localised_name of this ProjectFeature.

        Localized display name for the feature.  # noqa: E501

        :param localised_name: The localised_name of this ProjectFeature.
        :type localised_name: str
        """

        self._localised_name = localised_name

    @property
    def prerequisites(self) -> List[str]:
        """Gets the prerequisites of this ProjectFeature.

        List of keys of the features required to enable the feature.  # noqa: E501

        :return: The prerequisites of this ProjectFeature.
        :rtype: List[str]
        """
        return self._prerequisites

    @prerequisites.setter
    def prerequisites(self, prerequisites: List[str]):
        """Sets the prerequisites of this ProjectFeature.

        List of keys of the features required to enable the feature.  # noqa: E501

        :param prerequisites: The prerequisites of this ProjectFeature.
        :type prerequisites: List[str]
        """

        self._prerequisites = prerequisites

    @property
    def project_id(self) -> int:
        """Gets the project_id of this ProjectFeature.

        The ID of the project.  # noqa: E501

        :return: The project_id of this ProjectFeature.
        :rtype: int
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: int):
        """Sets the project_id of this ProjectFeature.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this ProjectFeature.
        :type project_id: int
        """

        self._project_id = project_id

    @property
    def state(self) -> str:
        """Gets the state of this ProjectFeature.

        The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values  # noqa: E501

        :return: The state of this ProjectFeature.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this ProjectFeature.

        The state of the feature. When updating the state of a feature, only ENABLED and DISABLED are supported. Responses can contain all values  # noqa: E501

        :param state: The state of this ProjectFeature.
        :type state: str
        """
        allowed_values = ["ENABLED", "DISABLED", "COMING_SOON"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def toggle_locked(self) -> bool:
        """Gets the toggle_locked of this ProjectFeature.

        Whether the state of the feature can be updated.  # noqa: E501

        :return: The toggle_locked of this ProjectFeature.
        :rtype: bool
        """
        return self._toggle_locked

    @toggle_locked.setter
    def toggle_locked(self, toggle_locked: bool):
        """Sets the toggle_locked of this ProjectFeature.

        Whether the state of the feature can be updated.  # noqa: E501

        :param toggle_locked: The toggle_locked of this ProjectFeature.
        :type toggle_locked: bool
        """

        self._toggle_locked = toggle_locked
