from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AvailableDashboardGadget(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, module_key=None, title=None, uri=None):  # noqa: E501
        """AvailableDashboardGadget - a model defined in OpenAPI

        :param module_key: The module_key of this AvailableDashboardGadget.  # noqa: E501
        :type module_key: str
        :param title: The title of this AvailableDashboardGadget.  # noqa: E501
        :type title: str
        :param uri: The uri of this AvailableDashboardGadget.  # noqa: E501
        :type uri: str
        """
        self.openapi_types = {
            'module_key': str,
            'title': str,
            'uri': str
        }

        self.attribute_map = {
            'module_key': 'moduleKey',
            'title': 'title',
            'uri': 'uri'
        }

        self._module_key = module_key
        self._title = title
        self._uri = uri

    @classmethod
    def from_dict(cls, dikt) -> 'AvailableDashboardGadget':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AvailableDashboardGadget of this AvailableDashboardGadget.  # noqa: E501
        :rtype: AvailableDashboardGadget
        """
        return util.deserialize_model(dikt, cls)

    @property
    def module_key(self) -> str:
        """Gets the module_key of this AvailableDashboardGadget.

        The module key of the gadget type.  # noqa: E501

        :return: The module_key of this AvailableDashboardGadget.
        :rtype: str
        """
        return self._module_key

    @module_key.setter
    def module_key(self, module_key: str):
        """Sets the module_key of this AvailableDashboardGadget.

        The module key of the gadget type.  # noqa: E501

        :param module_key: The module_key of this AvailableDashboardGadget.
        :type module_key: str
        """

        self._module_key = module_key

    @property
    def title(self) -> str:
        """Gets the title of this AvailableDashboardGadget.

        The title of the gadget.  # noqa: E501

        :return: The title of this AvailableDashboardGadget.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this AvailableDashboardGadget.

        The title of the gadget.  # noqa: E501

        :param title: The title of this AvailableDashboardGadget.
        :type title: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")  # noqa: E501

        self._title = title

    @property
    def uri(self) -> str:
        """Gets the uri of this AvailableDashboardGadget.

        The URI of the gadget type.  # noqa: E501

        :return: The uri of this AvailableDashboardGadget.
        :rtype: str
        """
        return self._uri

    @uri.setter
    def uri(self, uri: str):
        """Sets the uri of this AvailableDashboardGadget.

        The URI of the gadget type.  # noqa: E501

        :param uri: The uri of this AvailableDashboardGadget.
        :type uri: str
        """

        self._uri = uri
