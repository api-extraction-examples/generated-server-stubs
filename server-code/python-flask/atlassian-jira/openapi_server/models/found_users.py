from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user_picker_user import UserPickerUser
from openapi_server import util

from openapi_server.models.user_picker_user import UserPickerUser  # noqa: E501

class FoundUsers(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, header=None, total=None, users=None):  # noqa: E501
        """FoundUsers - a model defined in OpenAPI

        :param header: The header of this FoundUsers.  # noqa: E501
        :type header: str
        :param total: The total of this FoundUsers.  # noqa: E501
        :type total: int
        :param users: The users of this FoundUsers.  # noqa: E501
        :type users: List[UserPickerUser]
        """
        self.openapi_types = {
            'header': str,
            'total': int,
            'users': List[UserPickerUser]
        }

        self.attribute_map = {
            'header': 'header',
            'total': 'total',
            'users': 'users'
        }

        self._header = header
        self._total = total
        self._users = users

    @classmethod
    def from_dict(cls, dikt) -> 'FoundUsers':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoundUsers of this FoundUsers.  # noqa: E501
        :rtype: FoundUsers
        """
        return util.deserialize_model(dikt, cls)

    @property
    def header(self) -> str:
        """Gets the header of this FoundUsers.

        Header text indicating the number of users in the response and the total number of users found in the search.  # noqa: E501

        :return: The header of this FoundUsers.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header: str):
        """Sets the header of this FoundUsers.

        Header text indicating the number of users in the response and the total number of users found in the search.  # noqa: E501

        :param header: The header of this FoundUsers.
        :type header: str
        """

        self._header = header

    @property
    def total(self) -> int:
        """Gets the total of this FoundUsers.

        The total number of users found in the search.  # noqa: E501

        :return: The total of this FoundUsers.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this FoundUsers.

        The total number of users found in the search.  # noqa: E501

        :param total: The total of this FoundUsers.
        :type total: int
        """

        self._total = total

    @property
    def users(self) -> List[UserPickerUser]:
        """Gets the users of this FoundUsers.


        :return: The users of this FoundUsers.
        :rtype: List[UserPickerUser]
        """
        return self._users

    @users.setter
    def users(self, users: List[UserPickerUser]):
        """Sets the users of this FoundUsers.


        :param users: The users of this FoundUsers.
        :type users: List[UserPickerUser]
        """

        self._users = users
