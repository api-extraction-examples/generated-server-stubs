from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class NewUserDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application_keys=None, display_name=None, email_address=None, key=None, name=None, password=None, products=None, _self=None):  # noqa: E501
        """NewUserDetails - a model defined in OpenAPI

        :param application_keys: The application_keys of this NewUserDetails.  # noqa: E501
        :type application_keys: List[str]
        :param display_name: The display_name of this NewUserDetails.  # noqa: E501
        :type display_name: str
        :param email_address: The email_address of this NewUserDetails.  # noqa: E501
        :type email_address: str
        :param key: The key of this NewUserDetails.  # noqa: E501
        :type key: str
        :param name: The name of this NewUserDetails.  # noqa: E501
        :type name: str
        :param password: The password of this NewUserDetails.  # noqa: E501
        :type password: str
        :param products: The products of this NewUserDetails.  # noqa: E501
        :type products: list[str]
        :param _self: The _self of this NewUserDetails.  # noqa: E501
        :type _self: str
        """
        self.openapi_types = {
            'application_keys': List[str],
            'display_name': str,
            'email_address': str,
            'key': str,
            'name': str,
            'password': str,
            'products': list[str],
            '_self': str
        }

        self.attribute_map = {
            'application_keys': 'applicationKeys',
            'display_name': 'displayName',
            'email_address': 'emailAddress',
            'key': 'key',
            'name': 'name',
            'password': 'password',
            'products': 'products',
            '_self': 'self'
        }

        self._application_keys = application_keys
        self._display_name = display_name
        self._email_address = email_address
        self._key = key
        self._name = name
        self._password = password
        self._products = products
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt) -> 'NewUserDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The NewUserDetails of this NewUserDetails.  # noqa: E501
        :rtype: NewUserDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application_keys(self) -> List[str]:
        """Gets the application_keys of this NewUserDetails.

        Deprecated, do not use.  # noqa: E501

        :return: The application_keys of this NewUserDetails.
        :rtype: List[str]
        """
        return self._application_keys

    @application_keys.setter
    def application_keys(self, application_keys: List[str]):
        """Sets the application_keys of this NewUserDetails.

        Deprecated, do not use.  # noqa: E501

        :param application_keys: The application_keys of this NewUserDetails.
        :type application_keys: List[str]
        """

        self._application_keys = application_keys

    @property
    def display_name(self) -> str:
        """Gets the display_name of this NewUserDetails.

        This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.  # noqa: E501

        :return: The display_name of this NewUserDetails.
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name: str):
        """Sets the display_name of this NewUserDetails.

        This property is no longer available. If the user has an Atlassian account, their display name is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.  # noqa: E501

        :param display_name: The display_name of this NewUserDetails.
        :type display_name: str
        """

        self._display_name = display_name

    @property
    def email_address(self) -> str:
        """Gets the email_address of this NewUserDetails.

        The email address for the user.  # noqa: E501

        :return: The email_address of this NewUserDetails.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address: str):
        """Sets the email_address of this NewUserDetails.

        The email address for the user.  # noqa: E501

        :param email_address: The email_address of this NewUserDetails.
        :type email_address: str
        """
        if email_address is None:
            raise ValueError("Invalid value for `email_address`, must not be `None`")  # noqa: E501

        self._email_address = email_address

    @property
    def key(self) -> str:
        """Gets the key of this NewUserDetails.

        This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The key of this NewUserDetails.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this NewUserDetails.

        This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param key: The key of this NewUserDetails.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this NewUserDetails.

        This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :return: The name of this NewUserDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this NewUserDetails.

        This property is no longer available. See the [migration guide](https://developer.atlassian.com/cloud/jira/platform/deprecation-notice-user-privacy-api-migration-guide/) for details.  # noqa: E501

        :param name: The name of this NewUserDetails.
        :type name: str
        """

        self._name = name

    @property
    def password(self) -> str:
        """Gets the password of this NewUserDetails.

        This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.  # noqa: E501

        :return: The password of this NewUserDetails.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this NewUserDetails.

        This property is no longer available. If the user has an Atlassian account, their password is not changed. If the user does not have an Atlassian account, they are sent an email asking them set up an account.  # noqa: E501

        :param password: The password of this NewUserDetails.
        :type password: str
        """

        self._password = password

    @property
    def products(self) -> list[str]:
        """Gets the products of this NewUserDetails.

        Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. If left empty, the user will get default product access. To create a user without product access, set this field to be an empty array.  # noqa: E501

        :return: The products of this NewUserDetails.
        :rtype: list[str]
        """
        return self._products

    @products.setter
    def products(self, products: list[str]):
        """Sets the products of this NewUserDetails.

        Products the new user has access to. Valid products are: jira-core, jira-servicedesk, jira-product-discovery, jira-software. If left empty, the user will get default product access. To create a user without product access, set this field to be an empty array.  # noqa: E501

        :param products: The products of this NewUserDetails.
        :type products: list[str]
        """

        self._products = products

    @property
    def _self(self) -> str:
        """Gets the _self of this NewUserDetails.

        The URL of the user.  # noqa: E501

        :return: The _self of this NewUserDetails.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this NewUserDetails.

        The URL of the user.  # noqa: E501

        :param _self: The _self of this NewUserDetails.
        :type _self: str
        """

        self.__self = _self
