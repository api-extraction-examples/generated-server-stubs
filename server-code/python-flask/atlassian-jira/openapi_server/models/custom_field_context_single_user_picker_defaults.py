from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user_filter import UserFilter
from openapi_server import util

from openapi_server.models.user_filter import UserFilter  # noqa: E501

class CustomFieldContextSingleUserPickerDefaults(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, context_id=None, type=None, user_filter=None):  # noqa: E501
        """CustomFieldContextSingleUserPickerDefaults - a model defined in OpenAPI

        :param account_id: The account_id of this CustomFieldContextSingleUserPickerDefaults.  # noqa: E501
        :type account_id: str
        :param context_id: The context_id of this CustomFieldContextSingleUserPickerDefaults.  # noqa: E501
        :type context_id: str
        :param type: The type of this CustomFieldContextSingleUserPickerDefaults.  # noqa: E501
        :type type: str
        :param user_filter: The user_filter of this CustomFieldContextSingleUserPickerDefaults.  # noqa: E501
        :type user_filter: UserFilter
        """
        self.openapi_types = {
            'account_id': str,
            'context_id': str,
            'type': str,
            'user_filter': UserFilter
        }

        self.attribute_map = {
            'account_id': 'accountId',
            'context_id': 'contextId',
            'type': 'type',
            'user_filter': 'userFilter'
        }

        self._account_id = account_id
        self._context_id = context_id
        self._type = type
        self._user_filter = user_filter

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldContextSingleUserPickerDefaults':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldContextSingleUserPickerDefaults of this CustomFieldContextSingleUserPickerDefaults.  # noqa: E501
        :rtype: CustomFieldContextSingleUserPickerDefaults
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this CustomFieldContextSingleUserPickerDefaults.

        The ID of the default user.  # noqa: E501

        :return: The account_id of this CustomFieldContextSingleUserPickerDefaults.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this CustomFieldContextSingleUserPickerDefaults.

        The ID of the default user.  # noqa: E501

        :param account_id: The account_id of this CustomFieldContextSingleUserPickerDefaults.
        :type account_id: str
        """
        if account_id is None:
            raise ValueError("Invalid value for `account_id`, must not be `None`")  # noqa: E501

        self._account_id = account_id

    @property
    def context_id(self) -> str:
        """Gets the context_id of this CustomFieldContextSingleUserPickerDefaults.

        The ID of the context.  # noqa: E501

        :return: The context_id of this CustomFieldContextSingleUserPickerDefaults.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id: str):
        """Sets the context_id of this CustomFieldContextSingleUserPickerDefaults.

        The ID of the context.  # noqa: E501

        :param context_id: The context_id of this CustomFieldContextSingleUserPickerDefaults.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")  # noqa: E501

        self._context_id = context_id

    @property
    def type(self) -> str:
        """Gets the type of this CustomFieldContextSingleUserPickerDefaults.


        :return: The type of this CustomFieldContextSingleUserPickerDefaults.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CustomFieldContextSingleUserPickerDefaults.


        :param type: The type of this CustomFieldContextSingleUserPickerDefaults.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def user_filter(self) -> UserFilter:
        """Gets the user_filter of this CustomFieldContextSingleUserPickerDefaults.


        :return: The user_filter of this CustomFieldContextSingleUserPickerDefaults.
        :rtype: UserFilter
        """
        return self._user_filter

    @user_filter.setter
    def user_filter(self, user_filter: UserFilter):
        """Sets the user_filter of this CustomFieldContextSingleUserPickerDefaults.


        :param user_filter: The user_filter of this CustomFieldContextSingleUserPickerDefaults.
        :type user_filter: UserFilter
        """
        if user_filter is None:
            raise ValueError("Invalid value for `user_filter`, must not be `None`")  # noqa: E501

        self._user_filter = user_filter
