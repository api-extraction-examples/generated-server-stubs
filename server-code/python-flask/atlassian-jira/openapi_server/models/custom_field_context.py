from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContext(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, id=None, is_any_issue_type=None, is_global_context=None, name=None):  # noqa: E501
        """CustomFieldContext - a model defined in OpenAPI

        :param description: The description of this CustomFieldContext.  # noqa: E501
        :type description: str
        :param id: The id of this CustomFieldContext.  # noqa: E501
        :type id: str
        :param is_any_issue_type: The is_any_issue_type of this CustomFieldContext.  # noqa: E501
        :type is_any_issue_type: bool
        :param is_global_context: The is_global_context of this CustomFieldContext.  # noqa: E501
        :type is_global_context: bool
        :param name: The name of this CustomFieldContext.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'description': str,
            'id': str,
            'is_any_issue_type': bool,
            'is_global_context': bool,
            'name': str
        }

        self.attribute_map = {
            'description': 'description',
            'id': 'id',
            'is_any_issue_type': 'isAnyIssueType',
            'is_global_context': 'isGlobalContext',
            'name': 'name'
        }

        self._description = description
        self._id = id
        self._is_any_issue_type = is_any_issue_type
        self._is_global_context = is_global_context
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldContext':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldContext of this CustomFieldContext.  # noqa: E501
        :rtype: CustomFieldContext
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this CustomFieldContext.

        The description of the context.  # noqa: E501

        :return: The description of this CustomFieldContext.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CustomFieldContext.

        The description of the context.  # noqa: E501

        :param description: The description of this CustomFieldContext.
        :type description: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")  # noqa: E501

        self._description = description

    @property
    def id(self) -> str:
        """Gets the id of this CustomFieldContext.

        The ID of the context.  # noqa: E501

        :return: The id of this CustomFieldContext.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CustomFieldContext.

        The ID of the context.  # noqa: E501

        :param id: The id of this CustomFieldContext.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def is_any_issue_type(self) -> bool:
        """Gets the is_any_issue_type of this CustomFieldContext.

        Whether the context apply to all issue types.  # noqa: E501

        :return: The is_any_issue_type of this CustomFieldContext.
        :rtype: bool
        """
        return self._is_any_issue_type

    @is_any_issue_type.setter
    def is_any_issue_type(self, is_any_issue_type: bool):
        """Sets the is_any_issue_type of this CustomFieldContext.

        Whether the context apply to all issue types.  # noqa: E501

        :param is_any_issue_type: The is_any_issue_type of this CustomFieldContext.
        :type is_any_issue_type: bool
        """
        if is_any_issue_type is None:
            raise ValueError("Invalid value for `is_any_issue_type`, must not be `None`")  # noqa: E501

        self._is_any_issue_type = is_any_issue_type

    @property
    def is_global_context(self) -> bool:
        """Gets the is_global_context of this CustomFieldContext.

        Whether the context is global.  # noqa: E501

        :return: The is_global_context of this CustomFieldContext.
        :rtype: bool
        """
        return self._is_global_context

    @is_global_context.setter
    def is_global_context(self, is_global_context: bool):
        """Sets the is_global_context of this CustomFieldContext.

        Whether the context is global.  # noqa: E501

        :param is_global_context: The is_global_context of this CustomFieldContext.
        :type is_global_context: bool
        """
        if is_global_context is None:
            raise ValueError("Invalid value for `is_global_context`, must not be `None`")  # noqa: E501

        self._is_global_context = is_global_context

    @property
    def name(self) -> str:
        """Gets the name of this CustomFieldContext.

        The name of the context.  # noqa: E501

        :return: The name of this CustomFieldContext.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this CustomFieldContext.

        The name of the context.  # noqa: E501

        :param name: The name of this CustomFieldContext.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name
