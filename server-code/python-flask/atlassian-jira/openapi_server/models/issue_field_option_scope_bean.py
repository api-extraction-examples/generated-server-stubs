from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.global_scope_bean import GlobalScopeBean
from openapi_server.models.project_scope_bean import ProjectScopeBean
from openapi_server import util

from openapi_server.models.global_scope_bean import GlobalScopeBean  # noqa: E501
from openapi_server.models.project_scope_bean import ProjectScopeBean  # noqa: E501

class IssueFieldOptionScopeBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, _global=None, projects=None, projects2=None):  # noqa: E501
        """IssueFieldOptionScopeBean - a model defined in OpenAPI

        :param _global: The _global of this IssueFieldOptionScopeBean.  # noqa: E501
        :type _global: GlobalScopeBean
        :param projects: The projects of this IssueFieldOptionScopeBean.  # noqa: E501
        :type projects: list[int]
        :param projects2: The projects2 of this IssueFieldOptionScopeBean.  # noqa: E501
        :type projects2: list[ProjectScopeBean]
        """
        self.openapi_types = {
            '_global': GlobalScopeBean,
            'projects': list[int],
            'projects2': list[ProjectScopeBean]
        }

        self.attribute_map = {
            '_global': 'global',
            'projects': 'projects',
            'projects2': 'projects2'
        }

        self.__global = _global
        self._projects = projects
        self._projects2 = projects2

    @classmethod
    def from_dict(cls, dikt) -> 'IssueFieldOptionScopeBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueFieldOptionScopeBean of this IssueFieldOptionScopeBean.  # noqa: E501
        :rtype: IssueFieldOptionScopeBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def _global(self) -> GlobalScopeBean:
        """Gets the _global of this IssueFieldOptionScopeBean.


        :return: The _global of this IssueFieldOptionScopeBean.
        :rtype: GlobalScopeBean
        """
        return self.__global

    @_global.setter
    def _global(self, _global: GlobalScopeBean):
        """Sets the _global of this IssueFieldOptionScopeBean.


        :param _global: The _global of this IssueFieldOptionScopeBean.
        :type _global: GlobalScopeBean
        """

        self.__global = _global

    @property
    def projects(self) -> list[int]:
        """Gets the projects of this IssueFieldOptionScopeBean.

        DEPRECATED  # noqa: E501

        :return: The projects of this IssueFieldOptionScopeBean.
        :rtype: list[int]
        """
        return self._projects

    @projects.setter
    def projects(self, projects: list[int]):
        """Sets the projects of this IssueFieldOptionScopeBean.

        DEPRECATED  # noqa: E501

        :param projects: The projects of this IssueFieldOptionScopeBean.
        :type projects: list[int]
        """

        self._projects = projects

    @property
    def projects2(self) -> list[ProjectScopeBean]:
        """Gets the projects2 of this IssueFieldOptionScopeBean.

        Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.  # noqa: E501

        :return: The projects2 of this IssueFieldOptionScopeBean.
        :rtype: list[ProjectScopeBean]
        """
        return self._projects2

    @projects2.setter
    def projects2(self, projects2: list[ProjectScopeBean]):
        """Sets the projects2 of this IssueFieldOptionScopeBean.

        Defines the projects in which the option is available and the behavior of the option within each project. Specify one object per project. The behavior of the option in a project context overrides the behavior in the global context.  # noqa: E501

        :param projects2: The projects2 of this IssueFieldOptionScopeBean.
        :type projects2: list[ProjectScopeBean]
        """

        self._projects2 = projects2
