from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IncludedFields(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, actually_included=None, excluded=None, included=None):  # noqa: E501
        """IncludedFields - a model defined in OpenAPI

        :param actually_included: The actually_included of this IncludedFields.  # noqa: E501
        :type actually_included: list[str]
        :param excluded: The excluded of this IncludedFields.  # noqa: E501
        :type excluded: list[str]
        :param included: The included of this IncludedFields.  # noqa: E501
        :type included: list[str]
        """
        self.openapi_types = {
            'actually_included': list[str],
            'excluded': list[str],
            'included': list[str]
        }

        self.attribute_map = {
            'actually_included': 'actuallyIncluded',
            'excluded': 'excluded',
            'included': 'included'
        }

        self._actually_included = actually_included
        self._excluded = excluded
        self._included = included

    @classmethod
    def from_dict(cls, dikt) -> 'IncludedFields':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IncludedFields of this IncludedFields.  # noqa: E501
        :rtype: IncludedFields
        """
        return util.deserialize_model(dikt, cls)

    @property
    def actually_included(self) -> list[str]:
        """Gets the actually_included of this IncludedFields.


        :return: The actually_included of this IncludedFields.
        :rtype: list[str]
        """
        return self._actually_included

    @actually_included.setter
    def actually_included(self, actually_included: list[str]):
        """Sets the actually_included of this IncludedFields.


        :param actually_included: The actually_included of this IncludedFields.
        :type actually_included: list[str]
        """

        self._actually_included = actually_included

    @property
    def excluded(self) -> list[str]:
        """Gets the excluded of this IncludedFields.


        :return: The excluded of this IncludedFields.
        :rtype: list[str]
        """
        return self._excluded

    @excluded.setter
    def excluded(self, excluded: list[str]):
        """Sets the excluded of this IncludedFields.


        :param excluded: The excluded of this IncludedFields.
        :type excluded: list[str]
        """

        self._excluded = excluded

    @property
    def included(self) -> list[str]:
        """Gets the included of this IncludedFields.


        :return: The included of this IncludedFields.
        :rtype: list[str]
        """
        return self._included

    @included.setter
    def included(self, included: list[str]):
        """Sets the included of this IncludedFields.


        :param included: The included of this IncludedFields.
        :type included: list[str]
        """

        self._included = included
