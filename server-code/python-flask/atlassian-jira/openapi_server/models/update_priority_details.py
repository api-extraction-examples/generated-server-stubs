from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdatePriorityDetails(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, icon_url=None, name=None, status_color=None):  # noqa: E501
        """UpdatePriorityDetails - a model defined in OpenAPI

        :param description: The description of this UpdatePriorityDetails.  # noqa: E501
        :type description: str
        :param icon_url: The icon_url of this UpdatePriorityDetails.  # noqa: E501
        :type icon_url: str
        :param name: The name of this UpdatePriorityDetails.  # noqa: E501
        :type name: str
        :param status_color: The status_color of this UpdatePriorityDetails.  # noqa: E501
        :type status_color: str
        """
        self.openapi_types = {
            'description': str,
            'icon_url': str,
            'name': str,
            'status_color': str
        }

        self.attribute_map = {
            'description': 'description',
            'icon_url': 'iconUrl',
            'name': 'name',
            'status_color': 'statusColor'
        }

        self._description = description
        self._icon_url = icon_url
        self._name = name
        self._status_color = status_color

    @classmethod
    def from_dict(cls, dikt) -> 'UpdatePriorityDetails':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdatePriorityDetails of this UpdatePriorityDetails.  # noqa: E501
        :rtype: UpdatePriorityDetails
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this UpdatePriorityDetails.

        The description of the priority.  # noqa: E501

        :return: The description of this UpdatePriorityDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UpdatePriorityDetails.

        The description of the priority.  # noqa: E501

        :param description: The description of this UpdatePriorityDetails.
        :type description: str
        """
        if description is not None and len(description) > 255:
            raise ValueError("Invalid value for `description`, length must be less than or equal to `255`")  # noqa: E501

        self._description = description

    @property
    def icon_url(self) -> str:
        """Gets the icon_url of this UpdatePriorityDetails.

        The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.  # noqa: E501

        :return: The icon_url of this UpdatePriorityDetails.
        :rtype: str
        """
        return self._icon_url

    @icon_url.setter
    def icon_url(self, icon_url: str):
        """Sets the icon_url of this UpdatePriorityDetails.

        The URL of an icon for the priority. Accepted protocols are HTTP and HTTPS. Built in icons can also be used.  # noqa: E501

        :param icon_url: The icon_url of this UpdatePriorityDetails.
        :type icon_url: str
        """
        allowed_values = ["/images/icons/priorities/blocker.png", "/images/icons/priorities/critical.png", "/images/icons/priorities/high.png", "/images/icons/priorities/highest.png", "/images/icons/priorities/low.png", "/images/icons/priorities/lowest.png", "/images/icons/priorities/major.png", "/images/icons/priorities/medium.png", "/images/icons/priorities/minor.png", "/images/icons/priorities/trivial.png"]  # noqa: E501
        if icon_url not in allowed_values:
            raise ValueError(
                "Invalid value for `icon_url` ({0}), must be one of {1}"
                .format(icon_url, allowed_values)
            )

        self._icon_url = icon_url

    @property
    def name(self) -> str:
        """Gets the name of this UpdatePriorityDetails.

        The name of the priority. Must be unique.  # noqa: E501

        :return: The name of this UpdatePriorityDetails.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UpdatePriorityDetails.

        The name of the priority. Must be unique.  # noqa: E501

        :param name: The name of this UpdatePriorityDetails.
        :type name: str
        """
        if name is not None and len(name) > 60:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `60`")  # noqa: E501

        self._name = name

    @property
    def status_color(self) -> str:
        """Gets the status_color of this UpdatePriorityDetails.

        The status color of the priority in 3-digit or 6-digit hexadecimal format.  # noqa: E501

        :return: The status_color of this UpdatePriorityDetails.
        :rtype: str
        """
        return self._status_color

    @status_color.setter
    def status_color(self, status_color: str):
        """Sets the status_color of this UpdatePriorityDetails.

        The status color of the priority in 3-digit or 6-digit hexadecimal format.  # noqa: E501

        :param status_color: The status_color of this UpdatePriorityDetails.
        :type status_color: str
        """

        self._status_color = status_color
