from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class FunctionOperand(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arguments=None, encoded_operand=None, function=None):  # noqa: E501
        """FunctionOperand - a model defined in OpenAPI

        :param arguments: The arguments of this FunctionOperand.  # noqa: E501
        :type arguments: List[str]
        :param encoded_operand: The encoded_operand of this FunctionOperand.  # noqa: E501
        :type encoded_operand: str
        :param function: The function of this FunctionOperand.  # noqa: E501
        :type function: str
        """
        self.openapi_types = {
            'arguments': List[str],
            'encoded_operand': str,
            'function': str
        }

        self.attribute_map = {
            'arguments': 'arguments',
            'encoded_operand': 'encodedOperand',
            'function': 'function'
        }

        self._arguments = arguments
        self._encoded_operand = encoded_operand
        self._function = function

    @classmethod
    def from_dict(cls, dikt) -> 'FunctionOperand':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FunctionOperand of this FunctionOperand.  # noqa: E501
        :rtype: FunctionOperand
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arguments(self) -> List[str]:
        """Gets the arguments of this FunctionOperand.

        The list of function arguments.  # noqa: E501

        :return: The arguments of this FunctionOperand.
        :rtype: List[str]
        """
        return self._arguments

    @arguments.setter
    def arguments(self, arguments: List[str]):
        """Sets the arguments of this FunctionOperand.

        The list of function arguments.  # noqa: E501

        :param arguments: The arguments of this FunctionOperand.
        :type arguments: List[str]
        """
        if arguments is None:
            raise ValueError("Invalid value for `arguments`, must not be `None`")  # noqa: E501

        self._arguments = arguments

    @property
    def encoded_operand(self) -> str:
        """Gets the encoded_operand of this FunctionOperand.

        Encoded operand, which can be used directly in a JQL query.  # noqa: E501

        :return: The encoded_operand of this FunctionOperand.
        :rtype: str
        """
        return self._encoded_operand

    @encoded_operand.setter
    def encoded_operand(self, encoded_operand: str):
        """Sets the encoded_operand of this FunctionOperand.

        Encoded operand, which can be used directly in a JQL query.  # noqa: E501

        :param encoded_operand: The encoded_operand of this FunctionOperand.
        :type encoded_operand: str
        """

        self._encoded_operand = encoded_operand

    @property
    def function(self) -> str:
        """Gets the function of this FunctionOperand.

        The name of the function.  # noqa: E501

        :return: The function of this FunctionOperand.
        :rtype: str
        """
        return self._function

    @function.setter
    def function(self, function: str):
        """Sets the function of this FunctionOperand.

        The name of the function.  # noqa: E501

        :param function: The function of this FunctionOperand.
        :type function: str
        """
        if function is None:
            raise ValueError("Invalid value for `function`, must not be `None`")  # noqa: E501

        self._function = function
