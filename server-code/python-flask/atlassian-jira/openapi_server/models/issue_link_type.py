from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueLinkType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, inward=None, name=None, outward=None, _self=None):  # noqa: E501
        """IssueLinkType - a model defined in OpenAPI

        :param id: The id of this IssueLinkType.  # noqa: E501
        :type id: str
        :param inward: The inward of this IssueLinkType.  # noqa: E501
        :type inward: str
        :param name: The name of this IssueLinkType.  # noqa: E501
        :type name: str
        :param outward: The outward of this IssueLinkType.  # noqa: E501
        :type outward: str
        :param _self: The _self of this IssueLinkType.  # noqa: E501
        :type _self: str
        """
        self.openapi_types = {
            'id': str,
            'inward': str,
            'name': str,
            'outward': str,
            '_self': str
        }

        self.attribute_map = {
            'id': 'id',
            'inward': 'inward',
            'name': 'name',
            'outward': 'outward',
            '_self': 'self'
        }

        self._id = id
        self._inward = inward
        self._name = name
        self._outward = outward
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt) -> 'IssueLinkType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueLinkType of this IssueLinkType.  # noqa: E501
        :rtype: IssueLinkType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this IssueLinkType.

        The ID of the issue link type and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.  # noqa: E501

        :return: The id of this IssueLinkType.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this IssueLinkType.

        The ID of the issue link type and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `name` isn't provided. Otherwise, read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is read only.  # noqa: E501

        :param id: The id of this IssueLinkType.
        :type id: str
        """

        self._id = id

    @property
    def inward(self) -> str:
        """Gets the inward of this IssueLinkType.

        The description of the issue link type inward link and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :return: The inward of this IssueLinkType.
        :rtype: str
        """
        return self._inward

    @inward.setter
    def inward(self, inward: str):
        """Sets the inward of this IssueLinkType.

        The description of the issue link type inward link and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :param inward: The inward of this IssueLinkType.
        :type inward: str
        """

        self._inward = inward

    @property
    def name(self) -> str:
        """Gets the name of this IssueLinkType.

        The name of the issue link type and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :return: The name of this IssueLinkType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this IssueLinkType.

        The name of the issue link type and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is the type of issue link. Required on create when `id` isn't provided. Otherwise, read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :param name: The name of this IssueLinkType.
        :type name: str
        """

        self._name = name

    @property
    def outward(self) -> str:
        """Gets the outward of this IssueLinkType.

        The description of the issue link type outward link and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :return: The outward of this IssueLinkType.
        :rtype: str
        """
        return self._outward

    @outward.setter
    def outward(self, outward: str):
        """Sets the outward of this IssueLinkType.

        The description of the issue link type outward link and is used as follows:   *  In the [ issueLink](#api-rest-api-3-issueLink-post) resource it is read only.  *  In the [ issueLinkType](#api-rest-api-3-issueLinkType-post) resource it is required on create and optional on update. Otherwise, read only.  # noqa: E501

        :param outward: The outward of this IssueLinkType.
        :type outward: str
        """

        self._outward = outward

    @property
    def _self(self) -> str:
        """Gets the _self of this IssueLinkType.

        The URL of the issue link type. Read only.  # noqa: E501

        :return: The _self of this IssueLinkType.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this IssueLinkType.

        The URL of the issue link type. Read only.  # noqa: E501

        :param _self: The _self of this IssueLinkType.
        :type _self: str
        """

        self.__self = _self
