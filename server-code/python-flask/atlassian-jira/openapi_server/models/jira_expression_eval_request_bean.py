from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jira_expression_eval_context_bean import JiraExpressionEvalContextBean
from openapi_server import util

from openapi_server.models.jira_expression_eval_context_bean import JiraExpressionEvalContextBean  # noqa: E501

class JiraExpressionEvalRequestBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context=None, expression=None):  # noqa: E501
        """JiraExpressionEvalRequestBean - a model defined in OpenAPI

        :param context: The context of this JiraExpressionEvalRequestBean.  # noqa: E501
        :type context: JiraExpressionEvalContextBean
        :param expression: The expression of this JiraExpressionEvalRequestBean.  # noqa: E501
        :type expression: str
        """
        self.openapi_types = {
            'context': JiraExpressionEvalContextBean,
            'expression': str
        }

        self.attribute_map = {
            'context': 'context',
            'expression': 'expression'
        }

        self._context = context
        self._expression = expression

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionEvalRequestBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionEvalRequestBean of this JiraExpressionEvalRequestBean.  # noqa: E501
        :rtype: JiraExpressionEvalRequestBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> JiraExpressionEvalContextBean:
        """Gets the context of this JiraExpressionEvalRequestBean.


        :return: The context of this JiraExpressionEvalRequestBean.
        :rtype: JiraExpressionEvalContextBean
        """
        return self._context

    @context.setter
    def context(self, context: JiraExpressionEvalContextBean):
        """Sets the context of this JiraExpressionEvalRequestBean.


        :param context: The context of this JiraExpressionEvalRequestBean.
        :type context: JiraExpressionEvalContextBean
        """

        self._context = context

    @property
    def expression(self) -> str:
        """Gets the expression of this JiraExpressionEvalRequestBean.

        The Jira expression to evaluate.  # noqa: E501

        :return: The expression of this JiraExpressionEvalRequestBean.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression: str):
        """Sets the expression of this JiraExpressionEvalRequestBean.

        The Jira expression to evaluate.  # noqa: E501

        :param expression: The expression of this JiraExpressionEvalRequestBean.
        :type expression: str
        """
        if expression is None:
            raise ValueError("Invalid value for `expression`, must not be `None`")  # noqa: E501

        self._expression = expression
