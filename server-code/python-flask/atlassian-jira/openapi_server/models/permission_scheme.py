from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.permission_grant import PermissionGrant
from openapi_server.models.scope import Scope
from openapi_server import util

from openapi_server.models.permission_grant import PermissionGrant  # noqa: E501
from openapi_server.models.scope import Scope  # noqa: E501

class PermissionScheme(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, description=None, expand=None, id=None, name=None, permissions=None, scope=None, _self=None):  # noqa: E501
        """PermissionScheme - a model defined in OpenAPI

        :param description: The description of this PermissionScheme.  # noqa: E501
        :type description: str
        :param expand: The expand of this PermissionScheme.  # noqa: E501
        :type expand: str
        :param id: The id of this PermissionScheme.  # noqa: E501
        :type id: int
        :param name: The name of this PermissionScheme.  # noqa: E501
        :type name: str
        :param permissions: The permissions of this PermissionScheme.  # noqa: E501
        :type permissions: List[PermissionGrant]
        :param scope: The scope of this PermissionScheme.  # noqa: E501
        :type scope: Scope
        :param _self: The _self of this PermissionScheme.  # noqa: E501
        :type _self: str
        """
        self.openapi_types = {
            'description': str,
            'expand': str,
            'id': int,
            'name': str,
            'permissions': List[PermissionGrant],
            'scope': Scope,
            '_self': str
        }

        self.attribute_map = {
            'description': 'description',
            'expand': 'expand',
            'id': 'id',
            'name': 'name',
            'permissions': 'permissions',
            'scope': 'scope',
            '_self': 'self'
        }

        self._description = description
        self._expand = expand
        self._id = id
        self._name = name
        self._permissions = permissions
        self._scope = scope
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt) -> 'PermissionScheme':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PermissionScheme of this PermissionScheme.  # noqa: E501
        :rtype: PermissionScheme
        """
        return util.deserialize_model(dikt, cls)

    @property
    def description(self) -> str:
        """Gets the description of this PermissionScheme.

        A description for the permission scheme.  # noqa: E501

        :return: The description of this PermissionScheme.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this PermissionScheme.

        A description for the permission scheme.  # noqa: E501

        :param description: The description of this PermissionScheme.
        :type description: str
        """

        self._description = description

    @property
    def expand(self) -> str:
        """Gets the expand of this PermissionScheme.

        The expand options available for the permission scheme.  # noqa: E501

        :return: The expand of this PermissionScheme.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand: str):
        """Sets the expand of this PermissionScheme.

        The expand options available for the permission scheme.  # noqa: E501

        :param expand: The expand of this PermissionScheme.
        :type expand: str
        """

        self._expand = expand

    @property
    def id(self) -> int:
        """Gets the id of this PermissionScheme.

        The ID of the permission scheme.  # noqa: E501

        :return: The id of this PermissionScheme.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this PermissionScheme.

        The ID of the permission scheme.  # noqa: E501

        :param id: The id of this PermissionScheme.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this PermissionScheme.

        The name of the permission scheme. Must be unique.  # noqa: E501

        :return: The name of this PermissionScheme.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this PermissionScheme.

        The name of the permission scheme. Must be unique.  # noqa: E501

        :param name: The name of this PermissionScheme.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def permissions(self) -> List[PermissionGrant]:
        """Gets the permissions of this PermissionScheme.

        The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.  # noqa: E501

        :return: The permissions of this PermissionScheme.
        :rtype: List[PermissionGrant]
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: List[PermissionGrant]):
        """Sets the permissions of this PermissionScheme.

        The permission scheme to create or update. See [About permission schemes and grants](../api-group-permission-schemes/#about-permission-schemes-and-grants) for more information.  # noqa: E501

        :param permissions: The permissions of this PermissionScheme.
        :type permissions: List[PermissionGrant]
        """

        self._permissions = permissions

    @property
    def scope(self) -> Scope:
        """Gets the scope of this PermissionScheme.


        :return: The scope of this PermissionScheme.
        :rtype: Scope
        """
        return self._scope

    @scope.setter
    def scope(self, scope: Scope):
        """Sets the scope of this PermissionScheme.


        :param scope: The scope of this PermissionScheme.
        :type scope: Scope
        """

        self._scope = scope

    @property
    def _self(self) -> str:
        """Gets the _self of this PermissionScheme.

        The URL of the permission scheme.  # noqa: E501

        :return: The _self of this PermissionScheme.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this PermissionScheme.

        The URL of the permission scheme.  # noqa: E501

        :param _self: The _self of this PermissionScheme.
        :type _self: str
        """

        self.__self = _self
