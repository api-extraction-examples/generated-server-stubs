from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeIds(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, issue_type_ids=None):  # noqa: E501
        """IssueTypeIds - a model defined in OpenAPI

        :param issue_type_ids: The issue_type_ids of this IssueTypeIds.  # noqa: E501
        :type issue_type_ids: List[str]
        """
        self.openapi_types = {
            'issue_type_ids': List[str]
        }

        self.attribute_map = {
            'issue_type_ids': 'issueTypeIds'
        }

        self._issue_type_ids = issue_type_ids

    @classmethod
    def from_dict(cls, dikt) -> 'IssueTypeIds':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueTypeIds of this IssueTypeIds.  # noqa: E501
        :rtype: IssueTypeIds
        """
        return util.deserialize_model(dikt, cls)

    @property
    def issue_type_ids(self) -> List[str]:
        """Gets the issue_type_ids of this IssueTypeIds.

        The list of issue type IDs.  # noqa: E501

        :return: The issue_type_ids of this IssueTypeIds.
        :rtype: List[str]
        """
        return self._issue_type_ids

    @issue_type_ids.setter
    def issue_type_ids(self, issue_type_ids: List[str]):
        """Sets the issue_type_ids of this IssueTypeIds.

        The list of issue type IDs.  # noqa: E501

        :param issue_type_ids: The issue_type_ids of this IssueTypeIds.
        :type issue_type_ids: List[str]
        """
        if issue_type_ids is None:
            raise ValueError("Invalid value for `issue_type_ids`, must not be `None`")  # noqa: E501

        self._issue_type_ids = issue_type_ids
