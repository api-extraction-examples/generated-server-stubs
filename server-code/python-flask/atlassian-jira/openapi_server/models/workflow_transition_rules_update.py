from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.workflow_transition_rules import WorkflowTransitionRules
from openapi_server import util

from openapi_server.models.workflow_transition_rules import WorkflowTransitionRules  # noqa: E501

class WorkflowTransitionRulesUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, workflows=None):  # noqa: E501
        """WorkflowTransitionRulesUpdate - a model defined in OpenAPI

        :param workflows: The workflows of this WorkflowTransitionRulesUpdate.  # noqa: E501
        :type workflows: List[WorkflowTransitionRules]
        """
        self.openapi_types = {
            'workflows': List[WorkflowTransitionRules]
        }

        self.attribute_map = {
            'workflows': 'workflows'
        }

        self._workflows = workflows

    @classmethod
    def from_dict(cls, dikt) -> 'WorkflowTransitionRulesUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowTransitionRulesUpdate of this WorkflowTransitionRulesUpdate.  # noqa: E501
        :rtype: WorkflowTransitionRulesUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def workflows(self) -> List[WorkflowTransitionRules]:
        """Gets the workflows of this WorkflowTransitionRulesUpdate.

        The list of workflows with transition rules to update.  # noqa: E501

        :return: The workflows of this WorkflowTransitionRulesUpdate.
        :rtype: List[WorkflowTransitionRules]
        """
        return self._workflows

    @workflows.setter
    def workflows(self, workflows: List[WorkflowTransitionRules]):
        """Sets the workflows of this WorkflowTransitionRulesUpdate.

        The list of workflows with transition rules to update.  # noqa: E501

        :param workflows: The workflows of this WorkflowTransitionRulesUpdate.
        :type workflows: List[WorkflowTransitionRules]
        """
        if workflows is None:
            raise ValueError("Invalid value for `workflows`, must not be `None`")  # noqa: E501

        self._workflows = workflows
