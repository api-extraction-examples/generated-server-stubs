from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.status_create import StatusCreate
from openapi_server.models.status_scope import StatusScope
from openapi_server import util

from openapi_server.models.status_create import StatusCreate  # noqa: E501
from openapi_server.models.status_scope import StatusScope  # noqa: E501

class StatusCreateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope=None, statuses=None):  # noqa: E501
        """StatusCreateRequest - a model defined in OpenAPI

        :param scope: The scope of this StatusCreateRequest.  # noqa: E501
        :type scope: StatusScope
        :param statuses: The statuses of this StatusCreateRequest.  # noqa: E501
        :type statuses: List[StatusCreate]
        """
        self.openapi_types = {
            'scope': StatusScope,
            'statuses': List[StatusCreate]
        }

        self.attribute_map = {
            'scope': 'scope',
            'statuses': 'statuses'
        }

        self._scope = scope
        self._statuses = statuses

    @classmethod
    def from_dict(cls, dikt) -> 'StatusCreateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The StatusCreateRequest of this StatusCreateRequest.  # noqa: E501
        :rtype: StatusCreateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self) -> StatusScope:
        """Gets the scope of this StatusCreateRequest.


        :return: The scope of this StatusCreateRequest.
        :rtype: StatusScope
        """
        return self._scope

    @scope.setter
    def scope(self, scope: StatusScope):
        """Sets the scope of this StatusCreateRequest.


        :param scope: The scope of this StatusCreateRequest.
        :type scope: StatusScope
        """
        if scope is None:
            raise ValueError("Invalid value for `scope`, must not be `None`")  # noqa: E501

        self._scope = scope

    @property
    def statuses(self) -> List[StatusCreate]:
        """Gets the statuses of this StatusCreateRequest.

        Details of the statuses being created.  # noqa: E501

        :return: The statuses of this StatusCreateRequest.
        :rtype: List[StatusCreate]
        """
        return self._statuses

    @statuses.setter
    def statuses(self, statuses: List[StatusCreate]):
        """Sets the statuses of this StatusCreateRequest.

        Details of the statuses being created.  # noqa: E501

        :param statuses: The statuses of this StatusCreateRequest.
        :type statuses: List[StatusCreate]
        """
        if statuses is None:
            raise ValueError("Invalid value for `statuses`, must not be `None`")  # noqa: E501

        self._statuses = statuses
