from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CustomFieldContextOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, disabled=None, id=None, option_id=None, value=None):  # noqa: E501
        """CustomFieldContextOption - a model defined in OpenAPI

        :param disabled: The disabled of this CustomFieldContextOption.  # noqa: E501
        :type disabled: bool
        :param id: The id of this CustomFieldContextOption.  # noqa: E501
        :type id: str
        :param option_id: The option_id of this CustomFieldContextOption.  # noqa: E501
        :type option_id: str
        :param value: The value of this CustomFieldContextOption.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'disabled': bool,
            'id': str,
            'option_id': str,
            'value': str
        }

        self.attribute_map = {
            'disabled': 'disabled',
            'id': 'id',
            'option_id': 'optionId',
            'value': 'value'
        }

        self._disabled = disabled
        self._id = id
        self._option_id = option_id
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'CustomFieldContextOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CustomFieldContextOption of this CustomFieldContextOption.  # noqa: E501
        :rtype: CustomFieldContextOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def disabled(self) -> bool:
        """Gets the disabled of this CustomFieldContextOption.

        Whether the option is disabled.  # noqa: E501

        :return: The disabled of this CustomFieldContextOption.
        :rtype: bool
        """
        return self._disabled

    @disabled.setter
    def disabled(self, disabled: bool):
        """Sets the disabled of this CustomFieldContextOption.

        Whether the option is disabled.  # noqa: E501

        :param disabled: The disabled of this CustomFieldContextOption.
        :type disabled: bool
        """
        if disabled is None:
            raise ValueError("Invalid value for `disabled`, must not be `None`")  # noqa: E501

        self._disabled = disabled

    @property
    def id(self) -> str:
        """Gets the id of this CustomFieldContextOption.

        The ID of the custom field option.  # noqa: E501

        :return: The id of this CustomFieldContextOption.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CustomFieldContextOption.

        The ID of the custom field option.  # noqa: E501

        :param id: The id of this CustomFieldContextOption.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def option_id(self) -> str:
        """Gets the option_id of this CustomFieldContextOption.

        For cascading options, the ID of the custom field option containing the cascading option.  # noqa: E501

        :return: The option_id of this CustomFieldContextOption.
        :rtype: str
        """
        return self._option_id

    @option_id.setter
    def option_id(self, option_id: str):
        """Sets the option_id of this CustomFieldContextOption.

        For cascading options, the ID of the custom field option containing the cascading option.  # noqa: E501

        :param option_id: The option_id of this CustomFieldContextOption.
        :type option_id: str
        """

        self._option_id = option_id

    @property
    def value(self) -> str:
        """Gets the value of this CustomFieldContextOption.

        The value of the custom field option.  # noqa: E501

        :return: The value of this CustomFieldContextOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this CustomFieldContextOption.

        The value of the custom field option.  # noqa: E501

        :param value: The value of this CustomFieldContextOption.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
