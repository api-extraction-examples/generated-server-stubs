from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JsonTypeBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, configuration=None, custom=None, custom_id=None, items=None, system=None, type=None):  # noqa: E501
        """JsonTypeBean - a model defined in OpenAPI

        :param configuration: The configuration of this JsonTypeBean.  # noqa: E501
        :type configuration: Dict[str, object]
        :param custom: The custom of this JsonTypeBean.  # noqa: E501
        :type custom: str
        :param custom_id: The custom_id of this JsonTypeBean.  # noqa: E501
        :type custom_id: int
        :param items: The items of this JsonTypeBean.  # noqa: E501
        :type items: str
        :param system: The system of this JsonTypeBean.  # noqa: E501
        :type system: str
        :param type: The type of this JsonTypeBean.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'configuration': Dict[str, object],
            'custom': str,
            'custom_id': int,
            'items': str,
            'system': str,
            'type': str
        }

        self.attribute_map = {
            'configuration': 'configuration',
            'custom': 'custom',
            'custom_id': 'customId',
            'items': 'items',
            'system': 'system',
            'type': 'type'
        }

        self._configuration = configuration
        self._custom = custom
        self._custom_id = custom_id
        self._items = items
        self._system = system
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'JsonTypeBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JsonTypeBean of this JsonTypeBean.  # noqa: E501
        :rtype: JsonTypeBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def configuration(self) -> Dict[str, object]:
        """Gets the configuration of this JsonTypeBean.

        If the field is a custom field, the configuration of the field.  # noqa: E501

        :return: The configuration of this JsonTypeBean.
        :rtype: Dict[str, object]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: Dict[str, object]):
        """Sets the configuration of this JsonTypeBean.

        If the field is a custom field, the configuration of the field.  # noqa: E501

        :param configuration: The configuration of this JsonTypeBean.
        :type configuration: Dict[str, object]
        """

        self._configuration = configuration

    @property
    def custom(self) -> str:
        """Gets the custom of this JsonTypeBean.

        If the field is a custom field, the URI of the field.  # noqa: E501

        :return: The custom of this JsonTypeBean.
        :rtype: str
        """
        return self._custom

    @custom.setter
    def custom(self, custom: str):
        """Sets the custom of this JsonTypeBean.

        If the field is a custom field, the URI of the field.  # noqa: E501

        :param custom: The custom of this JsonTypeBean.
        :type custom: str
        """

        self._custom = custom

    @property
    def custom_id(self) -> int:
        """Gets the custom_id of this JsonTypeBean.

        If the field is a custom field, the custom ID of the field.  # noqa: E501

        :return: The custom_id of this JsonTypeBean.
        :rtype: int
        """
        return self._custom_id

    @custom_id.setter
    def custom_id(self, custom_id: int):
        """Sets the custom_id of this JsonTypeBean.

        If the field is a custom field, the custom ID of the field.  # noqa: E501

        :param custom_id: The custom_id of this JsonTypeBean.
        :type custom_id: int
        """

        self._custom_id = custom_id

    @property
    def items(self) -> str:
        """Gets the items of this JsonTypeBean.

        When the data type is an array, the name of the field items within the array.  # noqa: E501

        :return: The items of this JsonTypeBean.
        :rtype: str
        """
        return self._items

    @items.setter
    def items(self, items: str):
        """Sets the items of this JsonTypeBean.

        When the data type is an array, the name of the field items within the array.  # noqa: E501

        :param items: The items of this JsonTypeBean.
        :type items: str
        """

        self._items = items

    @property
    def system(self) -> str:
        """Gets the system of this JsonTypeBean.

        If the field is a system field, the name of the field.  # noqa: E501

        :return: The system of this JsonTypeBean.
        :rtype: str
        """
        return self._system

    @system.setter
    def system(self, system: str):
        """Sets the system of this JsonTypeBean.

        If the field is a system field, the name of the field.  # noqa: E501

        :param system: The system of this JsonTypeBean.
        :type system: str
        """

        self._system = system

    @property
    def type(self) -> str:
        """Gets the type of this JsonTypeBean.

        The data type of the field.  # noqa: E501

        :return: The type of this JsonTypeBean.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this JsonTypeBean.

        The data type of the field.  # noqa: E501

        :param type: The type of this JsonTypeBean.
        :type type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type
