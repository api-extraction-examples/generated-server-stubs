from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssueTypeToContextMapping(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context_id=None, is_any_issue_type=None, issue_type_id=None):  # noqa: E501
        """IssueTypeToContextMapping - a model defined in OpenAPI

        :param context_id: The context_id of this IssueTypeToContextMapping.  # noqa: E501
        :type context_id: str
        :param is_any_issue_type: The is_any_issue_type of this IssueTypeToContextMapping.  # noqa: E501
        :type is_any_issue_type: bool
        :param issue_type_id: The issue_type_id of this IssueTypeToContextMapping.  # noqa: E501
        :type issue_type_id: str
        """
        self.openapi_types = {
            'context_id': str,
            'is_any_issue_type': bool,
            'issue_type_id': str
        }

        self.attribute_map = {
            'context_id': 'contextId',
            'is_any_issue_type': 'isAnyIssueType',
            'issue_type_id': 'issueTypeId'
        }

        self._context_id = context_id
        self._is_any_issue_type = is_any_issue_type
        self._issue_type_id = issue_type_id

    @classmethod
    def from_dict(cls, dikt) -> 'IssueTypeToContextMapping':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueTypeToContextMapping of this IssueTypeToContextMapping.  # noqa: E501
        :rtype: IssueTypeToContextMapping
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context_id(self) -> str:
        """Gets the context_id of this IssueTypeToContextMapping.

        The ID of the context.  # noqa: E501

        :return: The context_id of this IssueTypeToContextMapping.
        :rtype: str
        """
        return self._context_id

    @context_id.setter
    def context_id(self, context_id: str):
        """Sets the context_id of this IssueTypeToContextMapping.

        The ID of the context.  # noqa: E501

        :param context_id: The context_id of this IssueTypeToContextMapping.
        :type context_id: str
        """
        if context_id is None:
            raise ValueError("Invalid value for `context_id`, must not be `None`")  # noqa: E501

        self._context_id = context_id

    @property
    def is_any_issue_type(self) -> bool:
        """Gets the is_any_issue_type of this IssueTypeToContextMapping.

        Whether the context is mapped to any issue type.  # noqa: E501

        :return: The is_any_issue_type of this IssueTypeToContextMapping.
        :rtype: bool
        """
        return self._is_any_issue_type

    @is_any_issue_type.setter
    def is_any_issue_type(self, is_any_issue_type: bool):
        """Sets the is_any_issue_type of this IssueTypeToContextMapping.

        Whether the context is mapped to any issue type.  # noqa: E501

        :param is_any_issue_type: The is_any_issue_type of this IssueTypeToContextMapping.
        :type is_any_issue_type: bool
        """

        self._is_any_issue_type = is_any_issue_type

    @property
    def issue_type_id(self) -> str:
        """Gets the issue_type_id of this IssueTypeToContextMapping.

        The ID of the issue type.  # noqa: E501

        :return: The issue_type_id of this IssueTypeToContextMapping.
        :rtype: str
        """
        return self._issue_type_id

    @issue_type_id.setter
    def issue_type_id(self, issue_type_id: str):
        """Sets the issue_type_id of this IssueTypeToContextMapping.

        The ID of the issue type.  # noqa: E501

        :param issue_type_id: The issue_type_id of this IssueTypeToContextMapping.
        :type issue_type_id: str
        """

        self._issue_type_id = issue_type_id
