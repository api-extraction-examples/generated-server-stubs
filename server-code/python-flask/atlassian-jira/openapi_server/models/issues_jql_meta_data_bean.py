from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class IssuesJqlMetaDataBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, count=None, max_results=None, start_at=None, total_count=None, validation_warnings=None):  # noqa: E501
        """IssuesJqlMetaDataBean - a model defined in OpenAPI

        :param count: The count of this IssuesJqlMetaDataBean.  # noqa: E501
        :type count: int
        :param max_results: The max_results of this IssuesJqlMetaDataBean.  # noqa: E501
        :type max_results: int
        :param start_at: The start_at of this IssuesJqlMetaDataBean.  # noqa: E501
        :type start_at: int
        :param total_count: The total_count of this IssuesJqlMetaDataBean.  # noqa: E501
        :type total_count: int
        :param validation_warnings: The validation_warnings of this IssuesJqlMetaDataBean.  # noqa: E501
        :type validation_warnings: List[str]
        """
        self.openapi_types = {
            'count': int,
            'max_results': int,
            'start_at': int,
            'total_count': int,
            'validation_warnings': List[str]
        }

        self.attribute_map = {
            'count': 'count',
            'max_results': 'maxResults',
            'start_at': 'startAt',
            'total_count': 'totalCount',
            'validation_warnings': 'validationWarnings'
        }

        self._count = count
        self._max_results = max_results
        self._start_at = start_at
        self._total_count = total_count
        self._validation_warnings = validation_warnings

    @classmethod
    def from_dict(cls, dikt) -> 'IssuesJqlMetaDataBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssuesJqlMetaDataBean of this IssuesJqlMetaDataBean.  # noqa: E501
        :rtype: IssuesJqlMetaDataBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def count(self) -> int:
        """Gets the count of this IssuesJqlMetaDataBean.

        The number of issues that were loaded in this evaluation.  # noqa: E501

        :return: The count of this IssuesJqlMetaDataBean.
        :rtype: int
        """
        return self._count

    @count.setter
    def count(self, count: int):
        """Sets the count of this IssuesJqlMetaDataBean.

        The number of issues that were loaded in this evaluation.  # noqa: E501

        :param count: The count of this IssuesJqlMetaDataBean.
        :type count: int
        """
        if count is None:
            raise ValueError("Invalid value for `count`, must not be `None`")  # noqa: E501

        self._count = count

    @property
    def max_results(self) -> int:
        """Gets the max_results of this IssuesJqlMetaDataBean.

        The maximum number of issues that could be loaded in this evaluation.  # noqa: E501

        :return: The max_results of this IssuesJqlMetaDataBean.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this IssuesJqlMetaDataBean.

        The maximum number of issues that could be loaded in this evaluation.  # noqa: E501

        :param max_results: The max_results of this IssuesJqlMetaDataBean.
        :type max_results: int
        """
        if max_results is None:
            raise ValueError("Invalid value for `max_results`, must not be `None`")  # noqa: E501

        self._max_results = max_results

    @property
    def start_at(self) -> int:
        """Gets the start_at of this IssuesJqlMetaDataBean.

        The index of the first issue.  # noqa: E501

        :return: The start_at of this IssuesJqlMetaDataBean.
        :rtype: int
        """
        return self._start_at

    @start_at.setter
    def start_at(self, start_at: int):
        """Sets the start_at of this IssuesJqlMetaDataBean.

        The index of the first issue.  # noqa: E501

        :param start_at: The start_at of this IssuesJqlMetaDataBean.
        :type start_at: int
        """
        if start_at is None:
            raise ValueError("Invalid value for `start_at`, must not be `None`")  # noqa: E501

        self._start_at = start_at

    @property
    def total_count(self) -> int:
        """Gets the total_count of this IssuesJqlMetaDataBean.

        The total number of issues the JQL returned.  # noqa: E501

        :return: The total_count of this IssuesJqlMetaDataBean.
        :rtype: int
        """
        return self._total_count

    @total_count.setter
    def total_count(self, total_count: int):
        """Sets the total_count of this IssuesJqlMetaDataBean.

        The total number of issues the JQL returned.  # noqa: E501

        :param total_count: The total_count of this IssuesJqlMetaDataBean.
        :type total_count: int
        """
        if total_count is None:
            raise ValueError("Invalid value for `total_count`, must not be `None`")  # noqa: E501

        self._total_count = total_count

    @property
    def validation_warnings(self) -> List[str]:
        """Gets the validation_warnings of this IssuesJqlMetaDataBean.

        Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.  # noqa: E501

        :return: The validation_warnings of this IssuesJqlMetaDataBean.
        :rtype: List[str]
        """
        return self._validation_warnings

    @validation_warnings.setter
    def validation_warnings(self, validation_warnings: List[str]):
        """Sets the validation_warnings of this IssuesJqlMetaDataBean.

        Any warnings related to the JQL query. Present only if the validation mode was set to `warn`.  # noqa: E501

        :param validation_warnings: The validation_warnings of this IssuesJqlMetaDataBean.
        :type validation_warnings: List[str]
        """

        self._validation_warnings = validation_warnings
