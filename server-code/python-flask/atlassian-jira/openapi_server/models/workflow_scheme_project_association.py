from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class WorkflowSchemeProjectAssociation(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, project_id=None, workflow_scheme_id=None):  # noqa: E501
        """WorkflowSchemeProjectAssociation - a model defined in OpenAPI

        :param project_id: The project_id of this WorkflowSchemeProjectAssociation.  # noqa: E501
        :type project_id: str
        :param workflow_scheme_id: The workflow_scheme_id of this WorkflowSchemeProjectAssociation.  # noqa: E501
        :type workflow_scheme_id: str
        """
        self.openapi_types = {
            'project_id': str,
            'workflow_scheme_id': str
        }

        self.attribute_map = {
            'project_id': 'projectId',
            'workflow_scheme_id': 'workflowSchemeId'
        }

        self._project_id = project_id
        self._workflow_scheme_id = workflow_scheme_id

    @classmethod
    def from_dict(cls, dikt) -> 'WorkflowSchemeProjectAssociation':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The WorkflowSchemeProjectAssociation of this WorkflowSchemeProjectAssociation.  # noqa: E501
        :rtype: WorkflowSchemeProjectAssociation
        """
        return util.deserialize_model(dikt, cls)

    @property
    def project_id(self) -> str:
        """Gets the project_id of this WorkflowSchemeProjectAssociation.

        The ID of the project.  # noqa: E501

        :return: The project_id of this WorkflowSchemeProjectAssociation.
        :rtype: str
        """
        return self._project_id

    @project_id.setter
    def project_id(self, project_id: str):
        """Sets the project_id of this WorkflowSchemeProjectAssociation.

        The ID of the project.  # noqa: E501

        :param project_id: The project_id of this WorkflowSchemeProjectAssociation.
        :type project_id: str
        """
        if project_id is None:
            raise ValueError("Invalid value for `project_id`, must not be `None`")  # noqa: E501

        self._project_id = project_id

    @property
    def workflow_scheme_id(self) -> str:
        """Gets the workflow_scheme_id of this WorkflowSchemeProjectAssociation.

        The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.  # noqa: E501

        :return: The workflow_scheme_id of this WorkflowSchemeProjectAssociation.
        :rtype: str
        """
        return self._workflow_scheme_id

    @workflow_scheme_id.setter
    def workflow_scheme_id(self, workflow_scheme_id: str):
        """Sets the workflow_scheme_id of this WorkflowSchemeProjectAssociation.

        The ID of the workflow scheme. If the workflow scheme ID is `null`, the operation assigns the default workflow scheme.  # noqa: E501

        :param workflow_scheme_id: The workflow_scheme_id of this WorkflowSchemeProjectAssociation.
        :type workflow_scheme_id: str
        """

        self._workflow_scheme_id = workflow_scheme_id
