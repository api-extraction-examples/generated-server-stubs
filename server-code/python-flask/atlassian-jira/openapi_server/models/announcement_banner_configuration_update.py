from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class AnnouncementBannerConfigurationUpdate(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, is_dismissible=None, is_enabled=None, message=None, visibility=None):  # noqa: E501
        """AnnouncementBannerConfigurationUpdate - a model defined in OpenAPI

        :param is_dismissible: The is_dismissible of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type is_dismissible: bool
        :param is_enabled: The is_enabled of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type is_enabled: bool
        :param message: The message of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type message: str
        :param visibility: The visibility of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :type visibility: str
        """
        self.openapi_types = {
            'is_dismissible': bool,
            'is_enabled': bool,
            'message': str,
            'visibility': str
        }

        self.attribute_map = {
            'is_dismissible': 'isDismissible',
            'is_enabled': 'isEnabled',
            'message': 'message',
            'visibility': 'visibility'
        }

        self._is_dismissible = is_dismissible
        self._is_enabled = is_enabled
        self._message = message
        self._visibility = visibility

    @classmethod
    def from_dict(cls, dikt) -> 'AnnouncementBannerConfigurationUpdate':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AnnouncementBannerConfigurationUpdate of this AnnouncementBannerConfigurationUpdate.  # noqa: E501
        :rtype: AnnouncementBannerConfigurationUpdate
        """
        return util.deserialize_model(dikt, cls)

    @property
    def is_dismissible(self) -> bool:
        """Gets the is_dismissible of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner can be dismissed by the user.  # noqa: E501

        :return: The is_dismissible of this AnnouncementBannerConfigurationUpdate.
        :rtype: bool
        """
        return self._is_dismissible

    @is_dismissible.setter
    def is_dismissible(self, is_dismissible: bool):
        """Sets the is_dismissible of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner can be dismissed by the user.  # noqa: E501

        :param is_dismissible: The is_dismissible of this AnnouncementBannerConfigurationUpdate.
        :type is_dismissible: bool
        """

        self._is_dismissible = is_dismissible

    @property
    def is_enabled(self) -> bool:
        """Gets the is_enabled of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner is enabled or not.  # noqa: E501

        :return: The is_enabled of this AnnouncementBannerConfigurationUpdate.
        :rtype: bool
        """
        return self._is_enabled

    @is_enabled.setter
    def is_enabled(self, is_enabled: bool):
        """Sets the is_enabled of this AnnouncementBannerConfigurationUpdate.

        Flag indicating if the announcement banner is enabled or not.  # noqa: E501

        :param is_enabled: The is_enabled of this AnnouncementBannerConfigurationUpdate.
        :type is_enabled: bool
        """

        self._is_enabled = is_enabled

    @property
    def message(self) -> str:
        """Gets the message of this AnnouncementBannerConfigurationUpdate.

        The text on the announcement banner.  # noqa: E501

        :return: The message of this AnnouncementBannerConfigurationUpdate.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this AnnouncementBannerConfigurationUpdate.

        The text on the announcement banner.  # noqa: E501

        :param message: The message of this AnnouncementBannerConfigurationUpdate.
        :type message: str
        """

        self._message = message

    @property
    def visibility(self) -> str:
        """Gets the visibility of this AnnouncementBannerConfigurationUpdate.

        Visibility of the announcement banner. Can be public or private.  # noqa: E501

        :return: The visibility of this AnnouncementBannerConfigurationUpdate.
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility: str):
        """Sets the visibility of this AnnouncementBannerConfigurationUpdate.

        Visibility of the announcement banner. Can be public or private.  # noqa: E501

        :param visibility: The visibility of this AnnouncementBannerConfigurationUpdate.
        :type visibility: str
        """

        self._visibility = visibility
