from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.field_details import FieldDetails
from openapi_server.models.group_name import GroupName
from openapi_server.models.project_role import ProjectRole
from openapi_server.models.user_details import UserDetails
from openapi_server import util

from openapi_server.models.field_details import FieldDetails  # noqa: E501
from openapi_server.models.group_name import GroupName  # noqa: E501
from openapi_server.models.project_role import ProjectRole  # noqa: E501
from openapi_server.models.user_details import UserDetails  # noqa: E501

class EventNotification(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, email_address=None, expand=None, field=None, group=None, id=None, notification_type=None, parameter=None, project_role=None, recipient=None, user=None):  # noqa: E501
        """EventNotification - a model defined in OpenAPI

        :param email_address: The email_address of this EventNotification.  # noqa: E501
        :type email_address: str
        :param expand: The expand of this EventNotification.  # noqa: E501
        :type expand: str
        :param field: The field of this EventNotification.  # noqa: E501
        :type field: FieldDetails
        :param group: The group of this EventNotification.  # noqa: E501
        :type group: GroupName
        :param id: The id of this EventNotification.  # noqa: E501
        :type id: int
        :param notification_type: The notification_type of this EventNotification.  # noqa: E501
        :type notification_type: str
        :param parameter: The parameter of this EventNotification.  # noqa: E501
        :type parameter: str
        :param project_role: The project_role of this EventNotification.  # noqa: E501
        :type project_role: ProjectRole
        :param recipient: The recipient of this EventNotification.  # noqa: E501
        :type recipient: str
        :param user: The user of this EventNotification.  # noqa: E501
        :type user: UserDetails
        """
        self.openapi_types = {
            'email_address': str,
            'expand': str,
            'field': FieldDetails,
            'group': GroupName,
            'id': int,
            'notification_type': str,
            'parameter': str,
            'project_role': ProjectRole,
            'recipient': str,
            'user': UserDetails
        }

        self.attribute_map = {
            'email_address': 'emailAddress',
            'expand': 'expand',
            'field': 'field',
            'group': 'group',
            'id': 'id',
            'notification_type': 'notificationType',
            'parameter': 'parameter',
            'project_role': 'projectRole',
            'recipient': 'recipient',
            'user': 'user'
        }

        self._email_address = email_address
        self._expand = expand
        self._field = field
        self._group = group
        self._id = id
        self._notification_type = notification_type
        self._parameter = parameter
        self._project_role = project_role
        self._recipient = recipient
        self._user = user

    @classmethod
    def from_dict(cls, dikt) -> 'EventNotification':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EventNotification of this EventNotification.  # noqa: E501
        :rtype: EventNotification
        """
        return util.deserialize_model(dikt, cls)

    @property
    def email_address(self) -> str:
        """Gets the email_address of this EventNotification.

        The email address.  # noqa: E501

        :return: The email_address of this EventNotification.
        :rtype: str
        """
        return self._email_address

    @email_address.setter
    def email_address(self, email_address: str):
        """Sets the email_address of this EventNotification.

        The email address.  # noqa: E501

        :param email_address: The email_address of this EventNotification.
        :type email_address: str
        """

        self._email_address = email_address

    @property
    def expand(self) -> str:
        """Gets the expand of this EventNotification.

        Expand options that include additional event notification details in the response.  # noqa: E501

        :return: The expand of this EventNotification.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand: str):
        """Sets the expand of this EventNotification.

        Expand options that include additional event notification details in the response.  # noqa: E501

        :param expand: The expand of this EventNotification.
        :type expand: str
        """

        self._expand = expand

    @property
    def field(self) -> FieldDetails:
        """Gets the field of this EventNotification.


        :return: The field of this EventNotification.
        :rtype: FieldDetails
        """
        return self._field

    @field.setter
    def field(self, field: FieldDetails):
        """Sets the field of this EventNotification.


        :param field: The field of this EventNotification.
        :type field: FieldDetails
        """

        self._field = field

    @property
    def group(self) -> GroupName:
        """Gets the group of this EventNotification.


        :return: The group of this EventNotification.
        :rtype: GroupName
        """
        return self._group

    @group.setter
    def group(self, group: GroupName):
        """Sets the group of this EventNotification.


        :param group: The group of this EventNotification.
        :type group: GroupName
        """

        self._group = group

    @property
    def id(self) -> int:
        """Gets the id of this EventNotification.

        The ID of the notification.  # noqa: E501

        :return: The id of this EventNotification.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this EventNotification.

        The ID of the notification.  # noqa: E501

        :param id: The id of this EventNotification.
        :type id: int
        """

        self._id = id

    @property
    def notification_type(self) -> str:
        """Gets the notification_type of this EventNotification.

        Identifies the recipients of the notification.  # noqa: E501

        :return: The notification_type of this EventNotification.
        :rtype: str
        """
        return self._notification_type

    @notification_type.setter
    def notification_type(self, notification_type: str):
        """Sets the notification_type of this EventNotification.

        Identifies the recipients of the notification.  # noqa: E501

        :param notification_type: The notification_type of this EventNotification.
        :type notification_type: str
        """
        allowed_values = ["CurrentAssignee", "Reporter", "CurrentUser", "ProjectLead", "ComponentLead", "User", "Group", "ProjectRole", "EmailAddress", "AllWatchers", "UserCustomField", "GroupCustomField"]  # noqa: E501
        if notification_type not in allowed_values:
            raise ValueError(
                "Invalid value for `notification_type` ({0}), must be one of {1}"
                .format(notification_type, allowed_values)
            )

        self._notification_type = notification_type

    @property
    def parameter(self) -> str:
        """Gets the parameter of this EventNotification.

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.  # noqa: E501

        :return: The parameter of this EventNotification.
        :rtype: str
        """
        return self._parameter

    @parameter.setter
    def parameter(self, parameter: str):
        """Sets the parameter of this EventNotification.

        As a group's name can change, use of `recipient` is recommended. The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by `notificationType` value. So, when `notificationType` is:   *  `User` The `parameter` is the user account ID.  *  `Group` The `parameter` is the group name.  *  `ProjectRole` The `parameter` is the project role ID.  *  `UserCustomField` The `parameter` is the ID of the custom field.  *  `GroupCustomField` The `parameter` is the ID of the custom field.  # noqa: E501

        :param parameter: The parameter of this EventNotification.
        :type parameter: str
        """

        self._parameter = parameter

    @property
    def project_role(self) -> ProjectRole:
        """Gets the project_role of this EventNotification.


        :return: The project_role of this EventNotification.
        :rtype: ProjectRole
        """
        return self._project_role

    @project_role.setter
    def project_role(self, project_role: ProjectRole):
        """Sets the project_role of this EventNotification.


        :param project_role: The project_role of this EventNotification.
        :type project_role: ProjectRole
        """

        self._project_role = project_role

    @property
    def recipient(self) -> str:
        """Gets the recipient of this EventNotification.

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.  # noqa: E501

        :return: The recipient of this EventNotification.
        :rtype: str
        """
        return self._recipient

    @recipient.setter
    def recipient(self, recipient: str):
        """Sets the recipient of this EventNotification.

        The identifier associated with the `notificationType` value that defines the receiver of the notification, where the receiver isn't implied by the `notificationType` value. So, when `notificationType` is:   *  `User`, `recipient` is the user account ID.  *  `Group`, `recipient` is the group ID.  *  `ProjectRole`, `recipient` is the project role ID.  *  `UserCustomField`, `recipient` is the ID of the custom field.  *  `GroupCustomField`, `recipient` is the ID of the custom field.  # noqa: E501

        :param recipient: The recipient of this EventNotification.
        :type recipient: str
        """

        self._recipient = recipient

    @property
    def user(self) -> UserDetails:
        """Gets the user of this EventNotification.


        :return: The user of this EventNotification.
        :rtype: UserDetails
        """
        return self._user

    @user.setter
    def user(self, user: UserDetails):
        """Sets the user of this EventNotification.


        :param user: The user of this EventNotification.
        :type user: UserDetails
        """

        self._user = user
