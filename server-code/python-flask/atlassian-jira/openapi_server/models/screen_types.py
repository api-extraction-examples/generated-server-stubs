from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ScreenTypes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, create=None, default=None, edit=None, view=None):  # noqa: E501
        """ScreenTypes - a model defined in OpenAPI

        :param create: The create of this ScreenTypes.  # noqa: E501
        :type create: int
        :param default: The default of this ScreenTypes.  # noqa: E501
        :type default: int
        :param edit: The edit of this ScreenTypes.  # noqa: E501
        :type edit: int
        :param view: The view of this ScreenTypes.  # noqa: E501
        :type view: int
        """
        self.openapi_types = {
            'create': int,
            'default': int,
            'edit': int,
            'view': int
        }

        self.attribute_map = {
            'create': 'create',
            'default': 'default',
            'edit': 'edit',
            'view': 'view'
        }

        self._create = create
        self._default = default
        self._edit = edit
        self._view = view

    @classmethod
    def from_dict(cls, dikt) -> 'ScreenTypes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ScreenTypes of this ScreenTypes.  # noqa: E501
        :rtype: ScreenTypes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def create(self) -> int:
        """Gets the create of this ScreenTypes.

        The ID of the create screen.  # noqa: E501

        :return: The create of this ScreenTypes.
        :rtype: int
        """
        return self._create

    @create.setter
    def create(self, create: int):
        """Sets the create of this ScreenTypes.

        The ID of the create screen.  # noqa: E501

        :param create: The create of this ScreenTypes.
        :type create: int
        """

        self._create = create

    @property
    def default(self) -> int:
        """Gets the default of this ScreenTypes.

        The ID of the default screen. Required when creating a screen scheme.  # noqa: E501

        :return: The default of this ScreenTypes.
        :rtype: int
        """
        return self._default

    @default.setter
    def default(self, default: int):
        """Sets the default of this ScreenTypes.

        The ID of the default screen. Required when creating a screen scheme.  # noqa: E501

        :param default: The default of this ScreenTypes.
        :type default: int
        """

        self._default = default

    @property
    def edit(self) -> int:
        """Gets the edit of this ScreenTypes.

        The ID of the edit screen.  # noqa: E501

        :return: The edit of this ScreenTypes.
        :rtype: int
        """
        return self._edit

    @edit.setter
    def edit(self, edit: int):
        """Sets the edit of this ScreenTypes.

        The ID of the edit screen.  # noqa: E501

        :param edit: The edit of this ScreenTypes.
        :type edit: int
        """

        self._edit = edit

    @property
    def view(self) -> int:
        """Gets the view of this ScreenTypes.

        The ID of the view screen.  # noqa: E501

        :return: The view of this ScreenTypes.
        :rtype: int
        """
        return self._view

    @view.setter
    def view(self, view: int):
        """Sets the view of this ScreenTypes.

        The ID of the view screen.  # noqa: E501

        :param view: The view of this ScreenTypes.
        :type view: int
        """

        self._view = view
