from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.found_group import FoundGroup
from openapi_server import util

from openapi_server.models.found_group import FoundGroup  # noqa: E501

class FoundGroups(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, groups=None, header=None, total=None):  # noqa: E501
        """FoundGroups - a model defined in OpenAPI

        :param groups: The groups of this FoundGroups.  # noqa: E501
        :type groups: List[FoundGroup]
        :param header: The header of this FoundGroups.  # noqa: E501
        :type header: str
        :param total: The total of this FoundGroups.  # noqa: E501
        :type total: int
        """
        self.openapi_types = {
            'groups': List[FoundGroup],
            'header': str,
            'total': int
        }

        self.attribute_map = {
            'groups': 'groups',
            'header': 'header',
            'total': 'total'
        }

        self._groups = groups
        self._header = header
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'FoundGroups':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FoundGroups of this FoundGroups.  # noqa: E501
        :rtype: FoundGroups
        """
        return util.deserialize_model(dikt, cls)

    @property
    def groups(self) -> List[FoundGroup]:
        """Gets the groups of this FoundGroups.


        :return: The groups of this FoundGroups.
        :rtype: List[FoundGroup]
        """
        return self._groups

    @groups.setter
    def groups(self, groups: List[FoundGroup]):
        """Sets the groups of this FoundGroups.


        :param groups: The groups of this FoundGroups.
        :type groups: List[FoundGroup]
        """

        self._groups = groups

    @property
    def header(self) -> str:
        """Gets the header of this FoundGroups.

        Header text indicating the number of groups in the response and the total number of groups found in the search.  # noqa: E501

        :return: The header of this FoundGroups.
        :rtype: str
        """
        return self._header

    @header.setter
    def header(self, header: str):
        """Sets the header of this FoundGroups.

        Header text indicating the number of groups in the response and the total number of groups found in the search.  # noqa: E501

        :param header: The header of this FoundGroups.
        :type header: str
        """

        self._header = header

    @property
    def total(self) -> int:
        """Gets the total of this FoundGroups.

        The total number of groups found in the search.  # noqa: E501

        :return: The total of this FoundGroups.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this FoundGroups.

        The total number of groups found in the search.  # noqa: E501

        :param total: The total of this FoundGroups.
        :type total: int
        """

        self._total = total
