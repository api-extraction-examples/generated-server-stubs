from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.attachment_archive_item_readable import AttachmentArchiveItemReadable
from openapi_server import util

from openapi_server.models.attachment_archive_item_readable import AttachmentArchiveItemReadable  # noqa: E501

class AttachmentArchiveMetadataReadable(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, entries=None, id=None, media_type=None, name=None, total_entry_count=None):  # noqa: E501
        """AttachmentArchiveMetadataReadable - a model defined in OpenAPI

        :param entries: The entries of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :type entries: List[AttachmentArchiveItemReadable]
        :param id: The id of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :type id: int
        :param media_type: The media_type of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :type media_type: str
        :param name: The name of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :type name: str
        :param total_entry_count: The total_entry_count of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :type total_entry_count: int
        """
        self.openapi_types = {
            'entries': List[AttachmentArchiveItemReadable],
            'id': int,
            'media_type': str,
            'name': str,
            'total_entry_count': int
        }

        self.attribute_map = {
            'entries': 'entries',
            'id': 'id',
            'media_type': 'mediaType',
            'name': 'name',
            'total_entry_count': 'totalEntryCount'
        }

        self._entries = entries
        self._id = id
        self._media_type = media_type
        self._name = name
        self._total_entry_count = total_entry_count

    @classmethod
    def from_dict(cls, dikt) -> 'AttachmentArchiveMetadataReadable':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AttachmentArchiveMetadataReadable of this AttachmentArchiveMetadataReadable.  # noqa: E501
        :rtype: AttachmentArchiveMetadataReadable
        """
        return util.deserialize_model(dikt, cls)

    @property
    def entries(self) -> List[AttachmentArchiveItemReadable]:
        """Gets the entries of this AttachmentArchiveMetadataReadable.

        The list of the items included in the archive.  # noqa: E501

        :return: The entries of this AttachmentArchiveMetadataReadable.
        :rtype: List[AttachmentArchiveItemReadable]
        """
        return self._entries

    @entries.setter
    def entries(self, entries: List[AttachmentArchiveItemReadable]):
        """Sets the entries of this AttachmentArchiveMetadataReadable.

        The list of the items included in the archive.  # noqa: E501

        :param entries: The entries of this AttachmentArchiveMetadataReadable.
        :type entries: List[AttachmentArchiveItemReadable]
        """

        self._entries = entries

    @property
    def id(self) -> int:
        """Gets the id of this AttachmentArchiveMetadataReadable.

        The ID of the attachment.  # noqa: E501

        :return: The id of this AttachmentArchiveMetadataReadable.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this AttachmentArchiveMetadataReadable.

        The ID of the attachment.  # noqa: E501

        :param id: The id of this AttachmentArchiveMetadataReadable.
        :type id: int
        """

        self._id = id

    @property
    def media_type(self) -> str:
        """Gets the media_type of this AttachmentArchiveMetadataReadable.

        The MIME type of the attachment.  # noqa: E501

        :return: The media_type of this AttachmentArchiveMetadataReadable.
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type: str):
        """Sets the media_type of this AttachmentArchiveMetadataReadable.

        The MIME type of the attachment.  # noqa: E501

        :param media_type: The media_type of this AttachmentArchiveMetadataReadable.
        :type media_type: str
        """

        self._media_type = media_type

    @property
    def name(self) -> str:
        """Gets the name of this AttachmentArchiveMetadataReadable.

        The name of the archive file.  # noqa: E501

        :return: The name of this AttachmentArchiveMetadataReadable.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this AttachmentArchiveMetadataReadable.

        The name of the archive file.  # noqa: E501

        :param name: The name of this AttachmentArchiveMetadataReadable.
        :type name: str
        """

        self._name = name

    @property
    def total_entry_count(self) -> int:
        """Gets the total_entry_count of this AttachmentArchiveMetadataReadable.

        The number of items included in the archive.  # noqa: E501

        :return: The total_entry_count of this AttachmentArchiveMetadataReadable.
        :rtype: int
        """
        return self._total_entry_count

    @total_entry_count.setter
    def total_entry_count(self, total_entry_count: int):
        """Sets the total_entry_count of this AttachmentArchiveMetadataReadable.

        The number of items included in the archive.  # noqa: E501

        :param total_entry_count: The total_entry_count of this AttachmentArchiveMetadataReadable.
        :type total_entry_count: int
        """

        self._total_entry_count = total_entry_count
