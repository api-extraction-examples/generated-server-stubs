from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.linked_issue_fields import LinkedIssueFields
from openapi_server import util

from openapi_server.models.linked_issue_fields import LinkedIssueFields  # noqa: E501

class LinkedIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, fields=None, id=None, key=None, _self=None):  # noqa: E501
        """LinkedIssue - a model defined in OpenAPI

        :param fields: The fields of this LinkedIssue.  # noqa: E501
        :type fields: LinkedIssueFields
        :param id: The id of this LinkedIssue.  # noqa: E501
        :type id: str
        :param key: The key of this LinkedIssue.  # noqa: E501
        :type key: str
        :param _self: The _self of this LinkedIssue.  # noqa: E501
        :type _self: str
        """
        self.openapi_types = {
            'fields': LinkedIssueFields,
            'id': str,
            'key': str,
            '_self': str
        }

        self.attribute_map = {
            'fields': 'fields',
            'id': 'id',
            'key': 'key',
            '_self': 'self'
        }

        self._fields = fields
        self._id = id
        self._key = key
        self.__self = _self

    @classmethod
    def from_dict(cls, dikt) -> 'LinkedIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The LinkedIssue of this LinkedIssue.  # noqa: E501
        :rtype: LinkedIssue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def fields(self) -> LinkedIssueFields:
        """Gets the fields of this LinkedIssue.


        :return: The fields of this LinkedIssue.
        :rtype: LinkedIssueFields
        """
        return self._fields

    @fields.setter
    def fields(self, fields: LinkedIssueFields):
        """Sets the fields of this LinkedIssue.


        :param fields: The fields of this LinkedIssue.
        :type fields: LinkedIssueFields
        """

        self._fields = fields

    @property
    def id(self) -> str:
        """Gets the id of this LinkedIssue.

        The ID of an issue. Required if `key` isn't provided.  # noqa: E501

        :return: The id of this LinkedIssue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this LinkedIssue.

        The ID of an issue. Required if `key` isn't provided.  # noqa: E501

        :param id: The id of this LinkedIssue.
        :type id: str
        """

        self._id = id

    @property
    def key(self) -> str:
        """Gets the key of this LinkedIssue.

        The key of an issue. Required if `id` isn't provided.  # noqa: E501

        :return: The key of this LinkedIssue.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this LinkedIssue.

        The key of an issue. Required if `id` isn't provided.  # noqa: E501

        :param key: The key of this LinkedIssue.
        :type key: str
        """

        self._key = key

    @property
    def _self(self) -> str:
        """Gets the _self of this LinkedIssue.

        The URL of the issue.  # noqa: E501

        :return: The _self of this LinkedIssue.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this LinkedIssue.

        The URL of the issue.  # noqa: E501

        :param _self: The _self of this LinkedIssue.
        :type _self: str
        """

        self.__self = _self
