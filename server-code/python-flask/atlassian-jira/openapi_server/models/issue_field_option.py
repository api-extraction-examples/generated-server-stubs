from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_field_option_configuration import IssueFieldOptionConfiguration
from openapi_server import util

from openapi_server.models.issue_field_option_configuration import IssueFieldOptionConfiguration  # noqa: E501

class IssueFieldOption(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, config=None, id=None, properties=None, value=None):  # noqa: E501
        """IssueFieldOption - a model defined in OpenAPI

        :param config: The config of this IssueFieldOption.  # noqa: E501
        :type config: IssueFieldOptionConfiguration
        :param id: The id of this IssueFieldOption.  # noqa: E501
        :type id: int
        :param properties: The properties of this IssueFieldOption.  # noqa: E501
        :type properties: Dict[str, object]
        :param value: The value of this IssueFieldOption.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'config': IssueFieldOptionConfiguration,
            'id': int,
            'properties': Dict[str, object],
            'value': str
        }

        self.attribute_map = {
            'config': 'config',
            'id': 'id',
            'properties': 'properties',
            'value': 'value'
        }

        self._config = config
        self._id = id
        self._properties = properties
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'IssueFieldOption':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The IssueFieldOption of this IssueFieldOption.  # noqa: E501
        :rtype: IssueFieldOption
        """
        return util.deserialize_model(dikt, cls)

    @property
    def config(self) -> IssueFieldOptionConfiguration:
        """Gets the config of this IssueFieldOption.


        :return: The config of this IssueFieldOption.
        :rtype: IssueFieldOptionConfiguration
        """
        return self._config

    @config.setter
    def config(self, config: IssueFieldOptionConfiguration):
        """Sets the config of this IssueFieldOption.


        :param config: The config of this IssueFieldOption.
        :type config: IssueFieldOptionConfiguration
        """

        self._config = config

    @property
    def id(self) -> int:
        """Gets the id of this IssueFieldOption.

        The unique identifier for the option. This is only unique within the select field's set of options.  # noqa: E501

        :return: The id of this IssueFieldOption.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this IssueFieldOption.

        The unique identifier for the option. This is only unique within the select field's set of options.  # noqa: E501

        :param id: The id of this IssueFieldOption.
        :type id: int
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this IssueFieldOption.

        The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.  # noqa: E501

        :return: The properties of this IssueFieldOption.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this IssueFieldOption.

        The properties of the object, as arbitrary key-value pairs. These properties can be searched using JQL, if the extractions (see [Issue Field Option Property Index](https://developer.atlassian.com/cloud/jira/platform/modules/issue-field-option-property-index/)) are defined in the descriptor for the issue field module.  # noqa: E501

        :param properties: The properties of this IssueFieldOption.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def value(self) -> str:
        """Gets the value of this IssueFieldOption.

        The option's name, which is displayed in Jira.  # noqa: E501

        :return: The value of this IssueFieldOption.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this IssueFieldOption.

        The option's name, which is displayed in Jira.  # noqa: E501

        :param value: The value of this IssueFieldOption.
        :type value: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value
