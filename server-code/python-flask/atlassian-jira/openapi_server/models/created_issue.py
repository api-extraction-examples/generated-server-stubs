from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.created_issue_transition import CreatedIssueTransition
from openapi_server.models.created_issue_watchers import CreatedIssueWatchers
from openapi_server import util

from openapi_server.models.created_issue_transition import CreatedIssueTransition  # noqa: E501
from openapi_server.models.created_issue_watchers import CreatedIssueWatchers  # noqa: E501

class CreatedIssue(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, key=None, _self=None, transition=None, watchers=None):  # noqa: E501
        """CreatedIssue - a model defined in OpenAPI

        :param id: The id of this CreatedIssue.  # noqa: E501
        :type id: str
        :param key: The key of this CreatedIssue.  # noqa: E501
        :type key: str
        :param _self: The _self of this CreatedIssue.  # noqa: E501
        :type _self: str
        :param transition: The transition of this CreatedIssue.  # noqa: E501
        :type transition: CreatedIssueTransition
        :param watchers: The watchers of this CreatedIssue.  # noqa: E501
        :type watchers: CreatedIssueWatchers
        """
        self.openapi_types = {
            'id': str,
            'key': str,
            '_self': str,
            'transition': CreatedIssueTransition,
            'watchers': CreatedIssueWatchers
        }

        self.attribute_map = {
            'id': 'id',
            'key': 'key',
            '_self': 'self',
            'transition': 'transition',
            'watchers': 'watchers'
        }

        self._id = id
        self._key = key
        self.__self = _self
        self._transition = transition
        self._watchers = watchers

    @classmethod
    def from_dict(cls, dikt) -> 'CreatedIssue':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreatedIssue of this CreatedIssue.  # noqa: E501
        :rtype: CreatedIssue
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this CreatedIssue.

        The ID of the created issue or subtask.  # noqa: E501

        :return: The id of this CreatedIssue.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this CreatedIssue.

        The ID of the created issue or subtask.  # noqa: E501

        :param id: The id of this CreatedIssue.
        :type id: str
        """

        self._id = id

    @property
    def key(self) -> str:
        """Gets the key of this CreatedIssue.

        The key of the created issue or subtask.  # noqa: E501

        :return: The key of this CreatedIssue.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this CreatedIssue.

        The key of the created issue or subtask.  # noqa: E501

        :param key: The key of this CreatedIssue.
        :type key: str
        """

        self._key = key

    @property
    def _self(self) -> str:
        """Gets the _self of this CreatedIssue.

        The URL of the created issue or subtask.  # noqa: E501

        :return: The _self of this CreatedIssue.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this CreatedIssue.

        The URL of the created issue or subtask.  # noqa: E501

        :param _self: The _self of this CreatedIssue.
        :type _self: str
        """

        self.__self = _self

    @property
    def transition(self) -> CreatedIssueTransition:
        """Gets the transition of this CreatedIssue.


        :return: The transition of this CreatedIssue.
        :rtype: CreatedIssueTransition
        """
        return self._transition

    @transition.setter
    def transition(self, transition: CreatedIssueTransition):
        """Sets the transition of this CreatedIssue.


        :param transition: The transition of this CreatedIssue.
        :type transition: CreatedIssueTransition
        """

        self._transition = transition

    @property
    def watchers(self) -> CreatedIssueWatchers:
        """Gets the watchers of this CreatedIssue.


        :return: The watchers of this CreatedIssue.
        :rtype: CreatedIssueWatchers
        """
        return self._watchers

    @watchers.setter
    def watchers(self, watchers: CreatedIssueWatchers):
        """Sets the watchers of this CreatedIssue.


        :param watchers: The watchers of this CreatedIssue.
        :type watchers: CreatedIssueWatchers
        """

        self._watchers = watchers
