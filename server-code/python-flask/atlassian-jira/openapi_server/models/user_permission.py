from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserPermission(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, deprecated_key=None, description=None, have_permission=None, id=None, key=None, name=None, type=None):  # noqa: E501
        """UserPermission - a model defined in OpenAPI

        :param deprecated_key: The deprecated_key of this UserPermission.  # noqa: E501
        :type deprecated_key: bool
        :param description: The description of this UserPermission.  # noqa: E501
        :type description: str
        :param have_permission: The have_permission of this UserPermission.  # noqa: E501
        :type have_permission: bool
        :param id: The id of this UserPermission.  # noqa: E501
        :type id: str
        :param key: The key of this UserPermission.  # noqa: E501
        :type key: str
        :param name: The name of this UserPermission.  # noqa: E501
        :type name: str
        :param type: The type of this UserPermission.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'deprecated_key': bool,
            'description': str,
            'have_permission': bool,
            'id': str,
            'key': str,
            'name': str,
            'type': str
        }

        self.attribute_map = {
            'deprecated_key': 'deprecatedKey',
            'description': 'description',
            'have_permission': 'havePermission',
            'id': 'id',
            'key': 'key',
            'name': 'name',
            'type': 'type'
        }

        self._deprecated_key = deprecated_key
        self._description = description
        self._have_permission = have_permission
        self._id = id
        self._key = key
        self._name = name
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'UserPermission':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UserPermission of this UserPermission.  # noqa: E501
        :rtype: UserPermission
        """
        return util.deserialize_model(dikt, cls)

    @property
    def deprecated_key(self) -> bool:
        """Gets the deprecated_key of this UserPermission.

        Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`  # noqa: E501

        :return: The deprecated_key of this UserPermission.
        :rtype: bool
        """
        return self._deprecated_key

    @deprecated_key.setter
    def deprecated_key(self, deprecated_key: bool):
        """Sets the deprecated_key of this UserPermission.

        Indicate whether the permission key is deprecated. Note that deprecated keys cannot be used in the `permissions parameter of Get my permissions. Deprecated keys are not returned by Get all permissions.`  # noqa: E501

        :param deprecated_key: The deprecated_key of this UserPermission.
        :type deprecated_key: bool
        """

        self._deprecated_key = deprecated_key

    @property
    def description(self) -> str:
        """Gets the description of this UserPermission.

        The description of the permission.  # noqa: E501

        :return: The description of this UserPermission.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this UserPermission.

        The description of the permission.  # noqa: E501

        :param description: The description of this UserPermission.
        :type description: str
        """

        self._description = description

    @property
    def have_permission(self) -> bool:
        """Gets the have_permission of this UserPermission.

        Whether the permission is available to the user in the queried context.  # noqa: E501

        :return: The have_permission of this UserPermission.
        :rtype: bool
        """
        return self._have_permission

    @have_permission.setter
    def have_permission(self, have_permission: bool):
        """Sets the have_permission of this UserPermission.

        Whether the permission is available to the user in the queried context.  # noqa: E501

        :param have_permission: The have_permission of this UserPermission.
        :type have_permission: bool
        """

        self._have_permission = have_permission

    @property
    def id(self) -> str:
        """Gets the id of this UserPermission.

        The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.  # noqa: E501

        :return: The id of this UserPermission.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserPermission.

        The ID of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.  # noqa: E501

        :param id: The id of this UserPermission.
        :type id: str
        """

        self._id = id

    @property
    def key(self) -> str:
        """Gets the key of this UserPermission.

        The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.  # noqa: E501

        :return: The key of this UserPermission.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this UserPermission.

        The key of the permission. Either `id` or `key` must be specified. Use [Get all permissions](#api-rest-api-3-permissions-get) to get the list of permissions.  # noqa: E501

        :param key: The key of this UserPermission.
        :type key: str
        """

        self._key = key

    @property
    def name(self) -> str:
        """Gets the name of this UserPermission.

        The name of the permission.  # noqa: E501

        :return: The name of this UserPermission.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this UserPermission.

        The name of the permission.  # noqa: E501

        :param name: The name of this UserPermission.
        :type name: str
        """

        self._name = name

    @property
    def type(self) -> str:
        """Gets the type of this UserPermission.

        The type of the permission.  # noqa: E501

        :return: The type of this UserPermission.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this UserPermission.

        The type of the permission.  # noqa: E501

        :param type: The type of this UserPermission.
        :type type: str
        """
        allowed_values = ["GLOBAL", "PROJECT"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
