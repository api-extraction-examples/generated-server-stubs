from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.application import Application
from openapi_server.models.remote_object import RemoteObject
from openapi_server import util

from openapi_server.models.application import Application  # noqa: E501
from openapi_server.models.remote_object import RemoteObject  # noqa: E501

class RemoteIssueLinkRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, application=None, global_id=None, object=None, relationship=None):  # noqa: E501
        """RemoteIssueLinkRequest - a model defined in OpenAPI

        :param application: The application of this RemoteIssueLinkRequest.  # noqa: E501
        :type application: Application
        :param global_id: The global_id of this RemoteIssueLinkRequest.  # noqa: E501
        :type global_id: str
        :param object: The object of this RemoteIssueLinkRequest.  # noqa: E501
        :type object: RemoteObject
        :param relationship: The relationship of this RemoteIssueLinkRequest.  # noqa: E501
        :type relationship: str
        """
        self.openapi_types = {
            'application': Application,
            'global_id': str,
            'object': RemoteObject,
            'relationship': str
        }

        self.attribute_map = {
            'application': 'application',
            'global_id': 'globalId',
            'object': 'object',
            'relationship': 'relationship'
        }

        self._application = application
        self._global_id = global_id
        self._object = object
        self._relationship = relationship

    @classmethod
    def from_dict(cls, dikt) -> 'RemoteIssueLinkRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RemoteIssueLinkRequest of this RemoteIssueLinkRequest.  # noqa: E501
        :rtype: RemoteIssueLinkRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def application(self) -> Application:
        """Gets the application of this RemoteIssueLinkRequest.


        :return: The application of this RemoteIssueLinkRequest.
        :rtype: Application
        """
        return self._application

    @application.setter
    def application(self, application: Application):
        """Sets the application of this RemoteIssueLinkRequest.


        :param application: The application of this RemoteIssueLinkRequest.
        :type application: Application
        """

        self._application = application

    @property
    def global_id(self) -> str:
        """Gets the global_id of this RemoteIssueLinkRequest.

        An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.  The maximum length is 255 characters.  # noqa: E501

        :return: The global_id of this RemoteIssueLinkRequest.
        :rtype: str
        """
        return self._global_id

    @global_id.setter
    def global_id(self, global_id: str):
        """Sets the global_id of this RemoteIssueLinkRequest.

        An identifier for the remote item in the remote system. For example, the global ID for a remote item in Confluence would consist of the app ID and page ID, like this: `appId=456&pageId=123`.  Setting this field enables the remote issue link details to be updated or deleted using remote system and item details as the record identifier, rather than using the record's Jira ID.  The maximum length is 255 characters.  # noqa: E501

        :param global_id: The global_id of this RemoteIssueLinkRequest.
        :type global_id: str
        """

        self._global_id = global_id

    @property
    def object(self) -> RemoteObject:
        """Gets the object of this RemoteIssueLinkRequest.


        :return: The object of this RemoteIssueLinkRequest.
        :rtype: RemoteObject
        """
        return self._object

    @object.setter
    def object(self, object: RemoteObject):
        """Sets the object of this RemoteIssueLinkRequest.


        :param object: The object of this RemoteIssueLinkRequest.
        :type object: RemoteObject
        """
        if object is None:
            raise ValueError("Invalid value for `object`, must not be `None`")  # noqa: E501

        self._object = object

    @property
    def relationship(self) -> str:
        """Gets the relationship of this RemoteIssueLinkRequest.

        Description of the relationship between the issue and the linked item. If not set, the relationship description \"links to\" is used in Jira.  # noqa: E501

        :return: The relationship of this RemoteIssueLinkRequest.
        :rtype: str
        """
        return self._relationship

    @relationship.setter
    def relationship(self, relationship: str):
        """Sets the relationship of this RemoteIssueLinkRequest.

        Description of the relationship between the issue and the linked item. If not set, the relationship description \"links to\" is used in Jira.  # noqa: E501

        :param relationship: The relationship of this RemoteIssueLinkRequest.
        :type relationship: str
        """

        self._relationship = relationship
