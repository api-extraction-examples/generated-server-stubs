from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class JiraExpressionValidationError(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, column=None, expression=None, line=None, message=None, type=None):  # noqa: E501
        """JiraExpressionValidationError - a model defined in OpenAPI

        :param column: The column of this JiraExpressionValidationError.  # noqa: E501
        :type column: int
        :param expression: The expression of this JiraExpressionValidationError.  # noqa: E501
        :type expression: str
        :param line: The line of this JiraExpressionValidationError.  # noqa: E501
        :type line: int
        :param message: The message of this JiraExpressionValidationError.  # noqa: E501
        :type message: str
        :param type: The type of this JiraExpressionValidationError.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'column': int,
            'expression': str,
            'line': int,
            'message': str,
            'type': str
        }

        self.attribute_map = {
            'column': 'column',
            'expression': 'expression',
            'line': 'line',
            'message': 'message',
            'type': 'type'
        }

        self._column = column
        self._expression = expression
        self._line = line
        self._message = message
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionValidationError':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionValidationError of this JiraExpressionValidationError.  # noqa: E501
        :rtype: JiraExpressionValidationError
        """
        return util.deserialize_model(dikt, cls)

    @property
    def column(self) -> int:
        """Gets the column of this JiraExpressionValidationError.

        The text column in which the error occurred.  # noqa: E501

        :return: The column of this JiraExpressionValidationError.
        :rtype: int
        """
        return self._column

    @column.setter
    def column(self, column: int):
        """Sets the column of this JiraExpressionValidationError.

        The text column in which the error occurred.  # noqa: E501

        :param column: The column of this JiraExpressionValidationError.
        :type column: int
        """

        self._column = column

    @property
    def expression(self) -> str:
        """Gets the expression of this JiraExpressionValidationError.

        The part of the expression in which the error occurred.  # noqa: E501

        :return: The expression of this JiraExpressionValidationError.
        :rtype: str
        """
        return self._expression

    @expression.setter
    def expression(self, expression: str):
        """Sets the expression of this JiraExpressionValidationError.

        The part of the expression in which the error occurred.  # noqa: E501

        :param expression: The expression of this JiraExpressionValidationError.
        :type expression: str
        """

        self._expression = expression

    @property
    def line(self) -> int:
        """Gets the line of this JiraExpressionValidationError.

        The text line in which the error occurred.  # noqa: E501

        :return: The line of this JiraExpressionValidationError.
        :rtype: int
        """
        return self._line

    @line.setter
    def line(self, line: int):
        """Sets the line of this JiraExpressionValidationError.

        The text line in which the error occurred.  # noqa: E501

        :param line: The line of this JiraExpressionValidationError.
        :type line: int
        """

        self._line = line

    @property
    def message(self) -> str:
        """Gets the message of this JiraExpressionValidationError.

        Details about the error.  # noqa: E501

        :return: The message of this JiraExpressionValidationError.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this JiraExpressionValidationError.

        Details about the error.  # noqa: E501

        :param message: The message of this JiraExpressionValidationError.
        :type message: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def type(self) -> str:
        """Gets the type of this JiraExpressionValidationError.

        The error type.  # noqa: E501

        :return: The type of this JiraExpressionValidationError.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this JiraExpressionValidationError.

        The error type.  # noqa: E501

        :param type: The type of this JiraExpressionValidationError.
        :type type: str
        """
        allowed_values = ["syntax", "type", "other"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
