from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issues_meta_bean import IssuesMetaBean
from openapi_server.models.jira_expressions_complexity_bean import JiraExpressionsComplexityBean
from openapi_server import util

from openapi_server.models.issues_meta_bean import IssuesMetaBean  # noqa: E501
from openapi_server.models.jira_expressions_complexity_bean import JiraExpressionsComplexityBean  # noqa: E501

class JiraExpressionEvaluationMetaDataBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, complexity=None, issues=None):  # noqa: E501
        """JiraExpressionEvaluationMetaDataBean - a model defined in OpenAPI

        :param complexity: The complexity of this JiraExpressionEvaluationMetaDataBean.  # noqa: E501
        :type complexity: JiraExpressionsComplexityBean
        :param issues: The issues of this JiraExpressionEvaluationMetaDataBean.  # noqa: E501
        :type issues: IssuesMetaBean
        """
        self.openapi_types = {
            'complexity': JiraExpressionsComplexityBean,
            'issues': IssuesMetaBean
        }

        self.attribute_map = {
            'complexity': 'complexity',
            'issues': 'issues'
        }

        self._complexity = complexity
        self._issues = issues

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionEvaluationMetaDataBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionEvaluationMetaDataBean of this JiraExpressionEvaluationMetaDataBean.  # noqa: E501
        :rtype: JiraExpressionEvaluationMetaDataBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def complexity(self) -> JiraExpressionsComplexityBean:
        """Gets the complexity of this JiraExpressionEvaluationMetaDataBean.


        :return: The complexity of this JiraExpressionEvaluationMetaDataBean.
        :rtype: JiraExpressionsComplexityBean
        """
        return self._complexity

    @complexity.setter
    def complexity(self, complexity: JiraExpressionsComplexityBean):
        """Sets the complexity of this JiraExpressionEvaluationMetaDataBean.


        :param complexity: The complexity of this JiraExpressionEvaluationMetaDataBean.
        :type complexity: JiraExpressionsComplexityBean
        """

        self._complexity = complexity

    @property
    def issues(self) -> IssuesMetaBean:
        """Gets the issues of this JiraExpressionEvaluationMetaDataBean.


        :return: The issues of this JiraExpressionEvaluationMetaDataBean.
        :rtype: IssuesMetaBean
        """
        return self._issues

    @issues.setter
    def issues(self, issues: IssuesMetaBean):
        """Sets the issues of this JiraExpressionEvaluationMetaDataBean.


        :param issues: The issues of this JiraExpressionEvaluationMetaDataBean.
        :type issues: IssuesMetaBean
        """

        self._issues = issues
