from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.jira_expressions_complexity_value_bean import JiraExpressionsComplexityValueBean
from openapi_server import util

from openapi_server.models.jira_expressions_complexity_value_bean import JiraExpressionsComplexityValueBean  # noqa: E501

class JiraExpressionsComplexityBean(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, beans=None, expensive_operations=None, primitive_values=None, steps=None):  # noqa: E501
        """JiraExpressionsComplexityBean - a model defined in OpenAPI

        :param beans: The beans of this JiraExpressionsComplexityBean.  # noqa: E501
        :type beans: JiraExpressionsComplexityValueBean
        :param expensive_operations: The expensive_operations of this JiraExpressionsComplexityBean.  # noqa: E501
        :type expensive_operations: JiraExpressionsComplexityValueBean
        :param primitive_values: The primitive_values of this JiraExpressionsComplexityBean.  # noqa: E501
        :type primitive_values: JiraExpressionsComplexityValueBean
        :param steps: The steps of this JiraExpressionsComplexityBean.  # noqa: E501
        :type steps: JiraExpressionsComplexityValueBean
        """
        self.openapi_types = {
            'beans': JiraExpressionsComplexityValueBean,
            'expensive_operations': JiraExpressionsComplexityValueBean,
            'primitive_values': JiraExpressionsComplexityValueBean,
            'steps': JiraExpressionsComplexityValueBean
        }

        self.attribute_map = {
            'beans': 'beans',
            'expensive_operations': 'expensiveOperations',
            'primitive_values': 'primitiveValues',
            'steps': 'steps'
        }

        self._beans = beans
        self._expensive_operations = expensive_operations
        self._primitive_values = primitive_values
        self._steps = steps

    @classmethod
    def from_dict(cls, dikt) -> 'JiraExpressionsComplexityBean':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The JiraExpressionsComplexityBean of this JiraExpressionsComplexityBean.  # noqa: E501
        :rtype: JiraExpressionsComplexityBean
        """
        return util.deserialize_model(dikt, cls)

    @property
    def beans(self) -> JiraExpressionsComplexityValueBean:
        """Gets the beans of this JiraExpressionsComplexityBean.


        :return: The beans of this JiraExpressionsComplexityBean.
        :rtype: JiraExpressionsComplexityValueBean
        """
        return self._beans

    @beans.setter
    def beans(self, beans: JiraExpressionsComplexityValueBean):
        """Sets the beans of this JiraExpressionsComplexityBean.


        :param beans: The beans of this JiraExpressionsComplexityBean.
        :type beans: JiraExpressionsComplexityValueBean
        """
        if beans is None:
            raise ValueError("Invalid value for `beans`, must not be `None`")  # noqa: E501

        self._beans = beans

    @property
    def expensive_operations(self) -> JiraExpressionsComplexityValueBean:
        """Gets the expensive_operations of this JiraExpressionsComplexityBean.


        :return: The expensive_operations of this JiraExpressionsComplexityBean.
        :rtype: JiraExpressionsComplexityValueBean
        """
        return self._expensive_operations

    @expensive_operations.setter
    def expensive_operations(self, expensive_operations: JiraExpressionsComplexityValueBean):
        """Sets the expensive_operations of this JiraExpressionsComplexityBean.


        :param expensive_operations: The expensive_operations of this JiraExpressionsComplexityBean.
        :type expensive_operations: JiraExpressionsComplexityValueBean
        """
        if expensive_operations is None:
            raise ValueError("Invalid value for `expensive_operations`, must not be `None`")  # noqa: E501

        self._expensive_operations = expensive_operations

    @property
    def primitive_values(self) -> JiraExpressionsComplexityValueBean:
        """Gets the primitive_values of this JiraExpressionsComplexityBean.


        :return: The primitive_values of this JiraExpressionsComplexityBean.
        :rtype: JiraExpressionsComplexityValueBean
        """
        return self._primitive_values

    @primitive_values.setter
    def primitive_values(self, primitive_values: JiraExpressionsComplexityValueBean):
        """Sets the primitive_values of this JiraExpressionsComplexityBean.


        :param primitive_values: The primitive_values of this JiraExpressionsComplexityBean.
        :type primitive_values: JiraExpressionsComplexityValueBean
        """
        if primitive_values is None:
            raise ValueError("Invalid value for `primitive_values`, must not be `None`")  # noqa: E501

        self._primitive_values = primitive_values

    @property
    def steps(self) -> JiraExpressionsComplexityValueBean:
        """Gets the steps of this JiraExpressionsComplexityBean.


        :return: The steps of this JiraExpressionsComplexityBean.
        :rtype: JiraExpressionsComplexityValueBean
        """
        return self._steps

    @steps.setter
    def steps(self, steps: JiraExpressionsComplexityValueBean):
        """Sets the steps of this JiraExpressionsComplexityBean.


        :param steps: The steps of this JiraExpressionsComplexityBean.
        :type steps: JiraExpressionsComplexityValueBean
        """
        if steps is None:
            raise ValueError("Invalid value for `steps`, must not be `None`")  # noqa: E501

        self._steps = steps
