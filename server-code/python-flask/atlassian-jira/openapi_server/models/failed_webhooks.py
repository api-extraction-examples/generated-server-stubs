from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.failed_webhook import FailedWebhook
from openapi_server import util

from openapi_server.models.failed_webhook import FailedWebhook  # noqa: E501

class FailedWebhooks(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, max_results=None, next=None, values=None):  # noqa: E501
        """FailedWebhooks - a model defined in OpenAPI

        :param max_results: The max_results of this FailedWebhooks.  # noqa: E501
        :type max_results: int
        :param next: The next of this FailedWebhooks.  # noqa: E501
        :type next: str
        :param values: The values of this FailedWebhooks.  # noqa: E501
        :type values: List[FailedWebhook]
        """
        self.openapi_types = {
            'max_results': int,
            'next': str,
            'values': List[FailedWebhook]
        }

        self.attribute_map = {
            'max_results': 'maxResults',
            'next': 'next',
            'values': 'values'
        }

        self._max_results = max_results
        self._next = next
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'FailedWebhooks':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FailedWebhooks of this FailedWebhooks.  # noqa: E501
        :rtype: FailedWebhooks
        """
        return util.deserialize_model(dikt, cls)

    @property
    def max_results(self) -> int:
        """Gets the max_results of this FailedWebhooks.

        The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.  # noqa: E501

        :return: The max_results of this FailedWebhooks.
        :rtype: int
        """
        return self._max_results

    @max_results.setter
    def max_results(self, max_results: int):
        """Sets the max_results of this FailedWebhooks.

        The maximum number of items on the page. If the list of values is shorter than this number, then there are no more pages.  # noqa: E501

        :param max_results: The max_results of this FailedWebhooks.
        :type max_results: int
        """
        if max_results is None:
            raise ValueError("Invalid value for `max_results`, must not be `None`")  # noqa: E501

        self._max_results = max_results

    @property
    def next(self) -> str:
        """Gets the next of this FailedWebhooks.

        The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).  # noqa: E501

        :return: The next of this FailedWebhooks.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this FailedWebhooks.

        The URL to the next page of results. Present only if the request returned at least one result.The next page may be empty at the time of receiving the response, but new failed webhooks may appear in time. You can save the URL to the next page and query for new results periodically (for example, every hour).  # noqa: E501

        :param next: The next of this FailedWebhooks.
        :type next: str
        """

        self._next = next

    @property
    def values(self) -> List[FailedWebhook]:
        """Gets the values of this FailedWebhooks.

        The list of webhooks.  # noqa: E501

        :return: The values of this FailedWebhooks.
        :rtype: List[FailedWebhook]
        """
        return self._values

    @values.setter
    def values(self, values: List[FailedWebhook]):
        """Sets the values of this FailedWebhooks.

        The list of webhooks.  # noqa: E501

        :param values: The values of this FailedWebhooks.
        :type values: List[FailedWebhook]
        """
        if values is None:
            raise ValueError("Invalid value for `values`, must not be `None`")  # noqa: E501

        self._values = values
