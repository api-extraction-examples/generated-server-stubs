from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.issue_type_details import IssueTypeDetails
from openapi_server.models.project_archived_by import ProjectArchivedBy
from openapi_server.models.project_avatar_urls import ProjectAvatarUrls
from openapi_server.models.project_component import ProjectComponent
from openapi_server.models.project_deleted_by import ProjectDeletedBy
from openapi_server.models.project_insight import ProjectInsight
from openapi_server.models.project_issue_type_hierarchy import ProjectIssueTypeHierarchy
from openapi_server.models.project_landing_page_info import ProjectLandingPageInfo
from openapi_server.models.project_lead import ProjectLead
from openapi_server.models.project_permissions import ProjectPermissions
from openapi_server.models.project_project_category import ProjectProjectCategory
from openapi_server.models.version import Version
from openapi_server import util

from openapi_server.models.issue_type_details import IssueTypeDetails  # noqa: E501
from openapi_server.models.project_archived_by import ProjectArchivedBy  # noqa: E501
from openapi_server.models.project_avatar_urls import ProjectAvatarUrls  # noqa: E501
from openapi_server.models.project_component import ProjectComponent  # noqa: E501
from openapi_server.models.project_deleted_by import ProjectDeletedBy  # noqa: E501
from openapi_server.models.project_insight import ProjectInsight  # noqa: E501
from openapi_server.models.project_issue_type_hierarchy import ProjectIssueTypeHierarchy  # noqa: E501
from openapi_server.models.project_landing_page_info import ProjectLandingPageInfo  # noqa: E501
from openapi_server.models.project_lead import ProjectLead  # noqa: E501
from openapi_server.models.project_permissions import ProjectPermissions  # noqa: E501
from openapi_server.models.project_project_category import ProjectProjectCategory  # noqa: E501
from openapi_server.models.version import Version  # noqa: E501

class Project(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, archived=None, archived_by=None, archived_date=None, assignee_type=None, avatar_urls=None, components=None, deleted=None, deleted_by=None, deleted_date=None, description=None, email=None, expand=None, favourite=None, id=None, insight=None, is_private=None, issue_type_hierarchy=None, issue_types=None, key=None, landing_page_info=None, lead=None, name=None, permissions=None, project_category=None, project_type_key=None, properties=None, retention_till_date=None, roles=None, _self=None, simplified=None, style=None, url=None, uuid=None, versions=None):  # noqa: E501
        """Project - a model defined in OpenAPI

        :param archived: The archived of this Project.  # noqa: E501
        :type archived: bool
        :param archived_by: The archived_by of this Project.  # noqa: E501
        :type archived_by: ProjectArchivedBy
        :param archived_date: The archived_date of this Project.  # noqa: E501
        :type archived_date: datetime
        :param assignee_type: The assignee_type of this Project.  # noqa: E501
        :type assignee_type: str
        :param avatar_urls: The avatar_urls of this Project.  # noqa: E501
        :type avatar_urls: ProjectAvatarUrls
        :param components: The components of this Project.  # noqa: E501
        :type components: List[ProjectComponent]
        :param deleted: The deleted of this Project.  # noqa: E501
        :type deleted: bool
        :param deleted_by: The deleted_by of this Project.  # noqa: E501
        :type deleted_by: ProjectDeletedBy
        :param deleted_date: The deleted_date of this Project.  # noqa: E501
        :type deleted_date: datetime
        :param description: The description of this Project.  # noqa: E501
        :type description: str
        :param email: The email of this Project.  # noqa: E501
        :type email: str
        :param expand: The expand of this Project.  # noqa: E501
        :type expand: str
        :param favourite: The favourite of this Project.  # noqa: E501
        :type favourite: bool
        :param id: The id of this Project.  # noqa: E501
        :type id: str
        :param insight: The insight of this Project.  # noqa: E501
        :type insight: ProjectInsight
        :param is_private: The is_private of this Project.  # noqa: E501
        :type is_private: bool
        :param issue_type_hierarchy: The issue_type_hierarchy of this Project.  # noqa: E501
        :type issue_type_hierarchy: ProjectIssueTypeHierarchy
        :param issue_types: The issue_types of this Project.  # noqa: E501
        :type issue_types: List[IssueTypeDetails]
        :param key: The key of this Project.  # noqa: E501
        :type key: str
        :param landing_page_info: The landing_page_info of this Project.  # noqa: E501
        :type landing_page_info: ProjectLandingPageInfo
        :param lead: The lead of this Project.  # noqa: E501
        :type lead: ProjectLead
        :param name: The name of this Project.  # noqa: E501
        :type name: str
        :param permissions: The permissions of this Project.  # noqa: E501
        :type permissions: ProjectPermissions
        :param project_category: The project_category of this Project.  # noqa: E501
        :type project_category: ProjectProjectCategory
        :param project_type_key: The project_type_key of this Project.  # noqa: E501
        :type project_type_key: str
        :param properties: The properties of this Project.  # noqa: E501
        :type properties: Dict[str, object]
        :param retention_till_date: The retention_till_date of this Project.  # noqa: E501
        :type retention_till_date: datetime
        :param roles: The roles of this Project.  # noqa: E501
        :type roles: Dict[str, str]
        :param _self: The _self of this Project.  # noqa: E501
        :type _self: str
        :param simplified: The simplified of this Project.  # noqa: E501
        :type simplified: bool
        :param style: The style of this Project.  # noqa: E501
        :type style: str
        :param url: The url of this Project.  # noqa: E501
        :type url: str
        :param uuid: The uuid of this Project.  # noqa: E501
        :type uuid: str
        :param versions: The versions of this Project.  # noqa: E501
        :type versions: List[Version]
        """
        self.openapi_types = {
            'archived': bool,
            'archived_by': ProjectArchivedBy,
            'archived_date': datetime,
            'assignee_type': str,
            'avatar_urls': ProjectAvatarUrls,
            'components': List[ProjectComponent],
            'deleted': bool,
            'deleted_by': ProjectDeletedBy,
            'deleted_date': datetime,
            'description': str,
            'email': str,
            'expand': str,
            'favourite': bool,
            'id': str,
            'insight': ProjectInsight,
            'is_private': bool,
            'issue_type_hierarchy': ProjectIssueTypeHierarchy,
            'issue_types': List[IssueTypeDetails],
            'key': str,
            'landing_page_info': ProjectLandingPageInfo,
            'lead': ProjectLead,
            'name': str,
            'permissions': ProjectPermissions,
            'project_category': ProjectProjectCategory,
            'project_type_key': str,
            'properties': Dict[str, object],
            'retention_till_date': datetime,
            'roles': Dict[str, str],
            '_self': str,
            'simplified': bool,
            'style': str,
            'url': str,
            'uuid': str,
            'versions': List[Version]
        }

        self.attribute_map = {
            'archived': 'archived',
            'archived_by': 'archivedBy',
            'archived_date': 'archivedDate',
            'assignee_type': 'assigneeType',
            'avatar_urls': 'avatarUrls',
            'components': 'components',
            'deleted': 'deleted',
            'deleted_by': 'deletedBy',
            'deleted_date': 'deletedDate',
            'description': 'description',
            'email': 'email',
            'expand': 'expand',
            'favourite': 'favourite',
            'id': 'id',
            'insight': 'insight',
            'is_private': 'isPrivate',
            'issue_type_hierarchy': 'issueTypeHierarchy',
            'issue_types': 'issueTypes',
            'key': 'key',
            'landing_page_info': 'landingPageInfo',
            'lead': 'lead',
            'name': 'name',
            'permissions': 'permissions',
            'project_category': 'projectCategory',
            'project_type_key': 'projectTypeKey',
            'properties': 'properties',
            'retention_till_date': 'retentionTillDate',
            'roles': 'roles',
            '_self': 'self',
            'simplified': 'simplified',
            'style': 'style',
            'url': 'url',
            'uuid': 'uuid',
            'versions': 'versions'
        }

        self._archived = archived
        self._archived_by = archived_by
        self._archived_date = archived_date
        self._assignee_type = assignee_type
        self._avatar_urls = avatar_urls
        self._components = components
        self._deleted = deleted
        self._deleted_by = deleted_by
        self._deleted_date = deleted_date
        self._description = description
        self._email = email
        self._expand = expand
        self._favourite = favourite
        self._id = id
        self._insight = insight
        self._is_private = is_private
        self._issue_type_hierarchy = issue_type_hierarchy
        self._issue_types = issue_types
        self._key = key
        self._landing_page_info = landing_page_info
        self._lead = lead
        self._name = name
        self._permissions = permissions
        self._project_category = project_category
        self._project_type_key = project_type_key
        self._properties = properties
        self._retention_till_date = retention_till_date
        self._roles = roles
        self.__self = _self
        self._simplified = simplified
        self._style = style
        self._url = url
        self._uuid = uuid
        self._versions = versions

    @classmethod
    def from_dict(cls, dikt) -> 'Project':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Project of this Project.  # noqa: E501
        :rtype: Project
        """
        return util.deserialize_model(dikt, cls)

    @property
    def archived(self) -> bool:
        """Gets the archived of this Project.

        Whether the project is archived.  # noqa: E501

        :return: The archived of this Project.
        :rtype: bool
        """
        return self._archived

    @archived.setter
    def archived(self, archived: bool):
        """Sets the archived of this Project.

        Whether the project is archived.  # noqa: E501

        :param archived: The archived of this Project.
        :type archived: bool
        """

        self._archived = archived

    @property
    def archived_by(self) -> ProjectArchivedBy:
        """Gets the archived_by of this Project.


        :return: The archived_by of this Project.
        :rtype: ProjectArchivedBy
        """
        return self._archived_by

    @archived_by.setter
    def archived_by(self, archived_by: ProjectArchivedBy):
        """Sets the archived_by of this Project.


        :param archived_by: The archived_by of this Project.
        :type archived_by: ProjectArchivedBy
        """

        self._archived_by = archived_by

    @property
    def archived_date(self) -> datetime:
        """Gets the archived_date of this Project.

        The date when the project was archived.  # noqa: E501

        :return: The archived_date of this Project.
        :rtype: datetime
        """
        return self._archived_date

    @archived_date.setter
    def archived_date(self, archived_date: datetime):
        """Sets the archived_date of this Project.

        The date when the project was archived.  # noqa: E501

        :param archived_date: The archived_date of this Project.
        :type archived_date: datetime
        """

        self._archived_date = archived_date

    @property
    def assignee_type(self) -> str:
        """Gets the assignee_type of this Project.

        The default assignee when creating issues for this project.  # noqa: E501

        :return: The assignee_type of this Project.
        :rtype: str
        """
        return self._assignee_type

    @assignee_type.setter
    def assignee_type(self, assignee_type: str):
        """Sets the assignee_type of this Project.

        The default assignee when creating issues for this project.  # noqa: E501

        :param assignee_type: The assignee_type of this Project.
        :type assignee_type: str
        """
        allowed_values = ["PROJECT_LEAD", "UNASSIGNED"]  # noqa: E501
        if assignee_type not in allowed_values:
            raise ValueError(
                "Invalid value for `assignee_type` ({0}), must be one of {1}"
                .format(assignee_type, allowed_values)
            )

        self._assignee_type = assignee_type

    @property
    def avatar_urls(self) -> ProjectAvatarUrls:
        """Gets the avatar_urls of this Project.


        :return: The avatar_urls of this Project.
        :rtype: ProjectAvatarUrls
        """
        return self._avatar_urls

    @avatar_urls.setter
    def avatar_urls(self, avatar_urls: ProjectAvatarUrls):
        """Sets the avatar_urls of this Project.


        :param avatar_urls: The avatar_urls of this Project.
        :type avatar_urls: ProjectAvatarUrls
        """

        self._avatar_urls = avatar_urls

    @property
    def components(self) -> List[ProjectComponent]:
        """Gets the components of this Project.

        List of the components contained in the project.  # noqa: E501

        :return: The components of this Project.
        :rtype: List[ProjectComponent]
        """
        return self._components

    @components.setter
    def components(self, components: List[ProjectComponent]):
        """Sets the components of this Project.

        List of the components contained in the project.  # noqa: E501

        :param components: The components of this Project.
        :type components: List[ProjectComponent]
        """

        self._components = components

    @property
    def deleted(self) -> bool:
        """Gets the deleted of this Project.

        Whether the project is marked as deleted.  # noqa: E501

        :return: The deleted of this Project.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted: bool):
        """Sets the deleted of this Project.

        Whether the project is marked as deleted.  # noqa: E501

        :param deleted: The deleted of this Project.
        :type deleted: bool
        """

        self._deleted = deleted

    @property
    def deleted_by(self) -> ProjectDeletedBy:
        """Gets the deleted_by of this Project.


        :return: The deleted_by of this Project.
        :rtype: ProjectDeletedBy
        """
        return self._deleted_by

    @deleted_by.setter
    def deleted_by(self, deleted_by: ProjectDeletedBy):
        """Sets the deleted_by of this Project.


        :param deleted_by: The deleted_by of this Project.
        :type deleted_by: ProjectDeletedBy
        """

        self._deleted_by = deleted_by

    @property
    def deleted_date(self) -> datetime:
        """Gets the deleted_date of this Project.

        The date when the project was marked as deleted.  # noqa: E501

        :return: The deleted_date of this Project.
        :rtype: datetime
        """
        return self._deleted_date

    @deleted_date.setter
    def deleted_date(self, deleted_date: datetime):
        """Sets the deleted_date of this Project.

        The date when the project was marked as deleted.  # noqa: E501

        :param deleted_date: The deleted_date of this Project.
        :type deleted_date: datetime
        """

        self._deleted_date = deleted_date

    @property
    def description(self) -> str:
        """Gets the description of this Project.

        A brief description of the project.  # noqa: E501

        :return: The description of this Project.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this Project.

        A brief description of the project.  # noqa: E501

        :param description: The description of this Project.
        :type description: str
        """

        self._description = description

    @property
    def email(self) -> str:
        """Gets the email of this Project.

        An email address associated with the project.  # noqa: E501

        :return: The email of this Project.
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email: str):
        """Sets the email of this Project.

        An email address associated with the project.  # noqa: E501

        :param email: The email of this Project.
        :type email: str
        """

        self._email = email

    @property
    def expand(self) -> str:
        """Gets the expand of this Project.

        Expand options that include additional project details in the response.  # noqa: E501

        :return: The expand of this Project.
        :rtype: str
        """
        return self._expand

    @expand.setter
    def expand(self, expand: str):
        """Sets the expand of this Project.

        Expand options that include additional project details in the response.  # noqa: E501

        :param expand: The expand of this Project.
        :type expand: str
        """

        self._expand = expand

    @property
    def favourite(self) -> bool:
        """Gets the favourite of this Project.

        Whether the project is selected as a favorite.  # noqa: E501

        :return: The favourite of this Project.
        :rtype: bool
        """
        return self._favourite

    @favourite.setter
    def favourite(self, favourite: bool):
        """Sets the favourite of this Project.

        Whether the project is selected as a favorite.  # noqa: E501

        :param favourite: The favourite of this Project.
        :type favourite: bool
        """

        self._favourite = favourite

    @property
    def id(self) -> str:
        """Gets the id of this Project.

        The ID of the project.  # noqa: E501

        :return: The id of this Project.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Project.

        The ID of the project.  # noqa: E501

        :param id: The id of this Project.
        :type id: str
        """

        self._id = id

    @property
    def insight(self) -> ProjectInsight:
        """Gets the insight of this Project.


        :return: The insight of this Project.
        :rtype: ProjectInsight
        """
        return self._insight

    @insight.setter
    def insight(self, insight: ProjectInsight):
        """Sets the insight of this Project.


        :param insight: The insight of this Project.
        :type insight: ProjectInsight
        """

        self._insight = insight

    @property
    def is_private(self) -> bool:
        """Gets the is_private of this Project.

        Whether the project is private.  # noqa: E501

        :return: The is_private of this Project.
        :rtype: bool
        """
        return self._is_private

    @is_private.setter
    def is_private(self, is_private: bool):
        """Sets the is_private of this Project.

        Whether the project is private.  # noqa: E501

        :param is_private: The is_private of this Project.
        :type is_private: bool
        """

        self._is_private = is_private

    @property
    def issue_type_hierarchy(self) -> ProjectIssueTypeHierarchy:
        """Gets the issue_type_hierarchy of this Project.


        :return: The issue_type_hierarchy of this Project.
        :rtype: ProjectIssueTypeHierarchy
        """
        return self._issue_type_hierarchy

    @issue_type_hierarchy.setter
    def issue_type_hierarchy(self, issue_type_hierarchy: ProjectIssueTypeHierarchy):
        """Sets the issue_type_hierarchy of this Project.


        :param issue_type_hierarchy: The issue_type_hierarchy of this Project.
        :type issue_type_hierarchy: ProjectIssueTypeHierarchy
        """

        self._issue_type_hierarchy = issue_type_hierarchy

    @property
    def issue_types(self) -> List[IssueTypeDetails]:
        """Gets the issue_types of this Project.

        List of the issue types available in the project.  # noqa: E501

        :return: The issue_types of this Project.
        :rtype: List[IssueTypeDetails]
        """
        return self._issue_types

    @issue_types.setter
    def issue_types(self, issue_types: List[IssueTypeDetails]):
        """Sets the issue_types of this Project.

        List of the issue types available in the project.  # noqa: E501

        :param issue_types: The issue_types of this Project.
        :type issue_types: List[IssueTypeDetails]
        """

        self._issue_types = issue_types

    @property
    def key(self) -> str:
        """Gets the key of this Project.

        The key of the project.  # noqa: E501

        :return: The key of this Project.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this Project.

        The key of the project.  # noqa: E501

        :param key: The key of this Project.
        :type key: str
        """

        self._key = key

    @property
    def landing_page_info(self) -> ProjectLandingPageInfo:
        """Gets the landing_page_info of this Project.


        :return: The landing_page_info of this Project.
        :rtype: ProjectLandingPageInfo
        """
        return self._landing_page_info

    @landing_page_info.setter
    def landing_page_info(self, landing_page_info: ProjectLandingPageInfo):
        """Sets the landing_page_info of this Project.


        :param landing_page_info: The landing_page_info of this Project.
        :type landing_page_info: ProjectLandingPageInfo
        """

        self._landing_page_info = landing_page_info

    @property
    def lead(self) -> ProjectLead:
        """Gets the lead of this Project.


        :return: The lead of this Project.
        :rtype: ProjectLead
        """
        return self._lead

    @lead.setter
    def lead(self, lead: ProjectLead):
        """Sets the lead of this Project.


        :param lead: The lead of this Project.
        :type lead: ProjectLead
        """

        self._lead = lead

    @property
    def name(self) -> str:
        """Gets the name of this Project.

        The name of the project.  # noqa: E501

        :return: The name of this Project.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Project.

        The name of the project.  # noqa: E501

        :param name: The name of this Project.
        :type name: str
        """

        self._name = name

    @property
    def permissions(self) -> ProjectPermissions:
        """Gets the permissions of this Project.


        :return: The permissions of this Project.
        :rtype: ProjectPermissions
        """
        return self._permissions

    @permissions.setter
    def permissions(self, permissions: ProjectPermissions):
        """Sets the permissions of this Project.


        :param permissions: The permissions of this Project.
        :type permissions: ProjectPermissions
        """

        self._permissions = permissions

    @property
    def project_category(self) -> ProjectProjectCategory:
        """Gets the project_category of this Project.


        :return: The project_category of this Project.
        :rtype: ProjectProjectCategory
        """
        return self._project_category

    @project_category.setter
    def project_category(self, project_category: ProjectProjectCategory):
        """Sets the project_category of this Project.


        :param project_category: The project_category of this Project.
        :type project_category: ProjectProjectCategory
        """

        self._project_category = project_category

    @property
    def project_type_key(self) -> str:
        """Gets the project_type_key of this Project.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.  # noqa: E501

        :return: The project_type_key of this Project.
        :rtype: str
        """
        return self._project_type_key

    @project_type_key.setter
    def project_type_key(self, project_type_key: str):
        """Sets the project_type_key of this Project.

        The [project type](https://confluence.atlassian.com/x/GwiiLQ#Jiraapplicationsoverview-Productfeaturesandprojecttypes) of the project.  # noqa: E501

        :param project_type_key: The project_type_key of this Project.
        :type project_type_key: str
        """
        allowed_values = ["software", "service_desk", "business"]  # noqa: E501
        if project_type_key not in allowed_values:
            raise ValueError(
                "Invalid value for `project_type_key` ({0}), must be one of {1}"
                .format(project_type_key, allowed_values)
            )

        self._project_type_key = project_type_key

    @property
    def properties(self) -> Dict[str, object]:
        """Gets the properties of this Project.

        Map of project properties  # noqa: E501

        :return: The properties of this Project.
        :rtype: Dict[str, object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties: Dict[str, object]):
        """Sets the properties of this Project.

        Map of project properties  # noqa: E501

        :param properties: The properties of this Project.
        :type properties: Dict[str, object]
        """

        self._properties = properties

    @property
    def retention_till_date(self) -> datetime:
        """Gets the retention_till_date of this Project.

        The date when the project is deleted permanently.  # noqa: E501

        :return: The retention_till_date of this Project.
        :rtype: datetime
        """
        return self._retention_till_date

    @retention_till_date.setter
    def retention_till_date(self, retention_till_date: datetime):
        """Sets the retention_till_date of this Project.

        The date when the project is deleted permanently.  # noqa: E501

        :param retention_till_date: The retention_till_date of this Project.
        :type retention_till_date: datetime
        """

        self._retention_till_date = retention_till_date

    @property
    def roles(self) -> Dict[str, str]:
        """Gets the roles of this Project.

        The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).  # noqa: E501

        :return: The roles of this Project.
        :rtype: Dict[str, str]
        """
        return self._roles

    @roles.setter
    def roles(self, roles: Dict[str, str]):
        """Sets the roles of this Project.

        The name and self URL for each role defined in the project. For more information, see [Create project role](#api-rest-api-3-role-post).  # noqa: E501

        :param roles: The roles of this Project.
        :type roles: Dict[str, str]
        """

        self._roles = roles

    @property
    def _self(self) -> str:
        """Gets the _self of this Project.

        The URL of the project details.  # noqa: E501

        :return: The _self of this Project.
        :rtype: str
        """
        return self.__self

    @_self.setter
    def _self(self, _self: str):
        """Sets the _self of this Project.

        The URL of the project details.  # noqa: E501

        :param _self: The _self of this Project.
        :type _self: str
        """

        self.__self = _self

    @property
    def simplified(self) -> bool:
        """Gets the simplified of this Project.

        Whether the project is simplified.  # noqa: E501

        :return: The simplified of this Project.
        :rtype: bool
        """
        return self._simplified

    @simplified.setter
    def simplified(self, simplified: bool):
        """Sets the simplified of this Project.

        Whether the project is simplified.  # noqa: E501

        :param simplified: The simplified of this Project.
        :type simplified: bool
        """

        self._simplified = simplified

    @property
    def style(self) -> str:
        """Gets the style of this Project.

        The type of the project.  # noqa: E501

        :return: The style of this Project.
        :rtype: str
        """
        return self._style

    @style.setter
    def style(self, style: str):
        """Sets the style of this Project.

        The type of the project.  # noqa: E501

        :param style: The style of this Project.
        :type style: str
        """
        allowed_values = ["classic", "next-gen"]  # noqa: E501
        if style not in allowed_values:
            raise ValueError(
                "Invalid value for `style` ({0}), must be one of {1}"
                .format(style, allowed_values)
            )

        self._style = style

    @property
    def url(self) -> str:
        """Gets the url of this Project.

        A link to information about this project, such as project documentation.  # noqa: E501

        :return: The url of this Project.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Project.

        A link to information about this project, such as project documentation.  # noqa: E501

        :param url: The url of this Project.
        :type url: str
        """

        self._url = url

    @property
    def uuid(self) -> str:
        """Gets the uuid of this Project.

        Unique ID for next-gen projects.  # noqa: E501

        :return: The uuid of this Project.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this Project.

        Unique ID for next-gen projects.  # noqa: E501

        :param uuid: The uuid of this Project.
        :type uuid: str
        """

        self._uuid = uuid

    @property
    def versions(self) -> List[Version]:
        """Gets the versions of this Project.

        The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).  # noqa: E501

        :return: The versions of this Project.
        :rtype: List[Version]
        """
        return self._versions

    @versions.setter
    def versions(self, versions: List[Version]):
        """Sets the versions of this Project.

        The versions defined in the project. For more information, see [Create version](#api-rest-api-3-version-post).  # noqa: E501

        :param versions: The versions of this Project.
        :type versions: List[Version]
        """

        self._versions = versions
