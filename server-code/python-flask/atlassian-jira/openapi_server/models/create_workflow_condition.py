from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreateWorkflowCondition(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, conditions=None, configuration=None, operator=None, type=None):  # noqa: E501
        """CreateWorkflowCondition - a model defined in OpenAPI

        :param conditions: The conditions of this CreateWorkflowCondition.  # noqa: E501
        :type conditions: List[CreateWorkflowCondition]
        :param configuration: The configuration of this CreateWorkflowCondition.  # noqa: E501
        :type configuration: Dict[str, object]
        :param operator: The operator of this CreateWorkflowCondition.  # noqa: E501
        :type operator: str
        :param type: The type of this CreateWorkflowCondition.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'conditions': List[CreateWorkflowCondition],
            'configuration': Dict[str, object],
            'operator': str,
            'type': str
        }

        self.attribute_map = {
            'conditions': 'conditions',
            'configuration': 'configuration',
            'operator': 'operator',
            'type': 'type'
        }

        self._conditions = conditions
        self._configuration = configuration
        self._operator = operator
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'CreateWorkflowCondition':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreateWorkflowCondition of this CreateWorkflowCondition.  # noqa: E501
        :rtype: CreateWorkflowCondition
        """
        return util.deserialize_model(dikt, cls)

    @property
    def conditions(self) -> List[CreateWorkflowCondition]:
        """Gets the conditions of this CreateWorkflowCondition.

        The list of workflow conditions.  # noqa: E501

        :return: The conditions of this CreateWorkflowCondition.
        :rtype: List[CreateWorkflowCondition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions: List[CreateWorkflowCondition]):
        """Sets the conditions of this CreateWorkflowCondition.

        The list of workflow conditions.  # noqa: E501

        :param conditions: The conditions of this CreateWorkflowCondition.
        :type conditions: List[CreateWorkflowCondition]
        """

        self._conditions = conditions

    @property
    def configuration(self) -> Dict[str, object]:
        """Gets the configuration of this CreateWorkflowCondition.

        EXPERIMENTAL. The configuration of the transition rule.  # noqa: E501

        :return: The configuration of this CreateWorkflowCondition.
        :rtype: Dict[str, object]
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration: Dict[str, object]):
        """Sets the configuration of this CreateWorkflowCondition.

        EXPERIMENTAL. The configuration of the transition rule.  # noqa: E501

        :param configuration: The configuration of this CreateWorkflowCondition.
        :type configuration: Dict[str, object]
        """

        self._configuration = configuration

    @property
    def operator(self) -> str:
        """Gets the operator of this CreateWorkflowCondition.

        The compound condition operator.  # noqa: E501

        :return: The operator of this CreateWorkflowCondition.
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator: str):
        """Sets the operator of this CreateWorkflowCondition.

        The compound condition operator.  # noqa: E501

        :param operator: The operator of this CreateWorkflowCondition.
        :type operator: str
        """
        allowed_values = ["AND", "OR"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def type(self) -> str:
        """Gets the type of this CreateWorkflowCondition.

        The type of the transition rule.  # noqa: E501

        :return: The type of this CreateWorkflowCondition.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this CreateWorkflowCondition.

        The type of the transition rule.  # noqa: E501

        :param type: The type of this CreateWorkflowCondition.
        :type type: str
        """

        self._type = type
