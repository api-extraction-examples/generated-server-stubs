from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UserUserIdGet200Response(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, allow_notes=None, bio=None, followers_count=None, following_count=None, fullname=None, has_list=None, id=None, image_url=None, is_book_author=None, is_suspended=None, is_writer_program_enrolled=None, medium_member_at=None, top_writer_in=None, twitter_username=None, username=None):  # noqa: E501
        """UserUserIdGet200Response - a model defined in OpenAPI

        :param allow_notes: The allow_notes of this UserUserIdGet200Response.  # noqa: E501
        :type allow_notes: bool
        :param bio: The bio of this UserUserIdGet200Response.  # noqa: E501
        :type bio: str
        :param followers_count: The followers_count of this UserUserIdGet200Response.  # noqa: E501
        :type followers_count: int
        :param following_count: The following_count of this UserUserIdGet200Response.  # noqa: E501
        :type following_count: int
        :param fullname: The fullname of this UserUserIdGet200Response.  # noqa: E501
        :type fullname: str
        :param has_list: The has_list of this UserUserIdGet200Response.  # noqa: E501
        :type has_list: bool
        :param id: The id of this UserUserIdGet200Response.  # noqa: E501
        :type id: str
        :param image_url: The image_url of this UserUserIdGet200Response.  # noqa: E501
        :type image_url: str
        :param is_book_author: The is_book_author of this UserUserIdGet200Response.  # noqa: E501
        :type is_book_author: bool
        :param is_suspended: The is_suspended of this UserUserIdGet200Response.  # noqa: E501
        :type is_suspended: bool
        :param is_writer_program_enrolled: The is_writer_program_enrolled of this UserUserIdGet200Response.  # noqa: E501
        :type is_writer_program_enrolled: bool
        :param medium_member_at: The medium_member_at of this UserUserIdGet200Response.  # noqa: E501
        :type medium_member_at: str
        :param top_writer_in: The top_writer_in of this UserUserIdGet200Response.  # noqa: E501
        :type top_writer_in: List[str]
        :param twitter_username: The twitter_username of this UserUserIdGet200Response.  # noqa: E501
        :type twitter_username: str
        :param username: The username of this UserUserIdGet200Response.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'allow_notes': bool,
            'bio': str,
            'followers_count': int,
            'following_count': int,
            'fullname': str,
            'has_list': bool,
            'id': str,
            'image_url': str,
            'is_book_author': bool,
            'is_suspended': bool,
            'is_writer_program_enrolled': bool,
            'medium_member_at': str,
            'top_writer_in': List[str],
            'twitter_username': str,
            'username': str
        }

        self.attribute_map = {
            'allow_notes': 'allow_notes',
            'bio': 'bio',
            'followers_count': 'followers_count',
            'following_count': 'following_count',
            'fullname': 'fullname',
            'has_list': 'has_list',
            'id': 'id',
            'image_url': 'image_url',
            'is_book_author': 'is_book_author',
            'is_suspended': 'is_suspended',
            'is_writer_program_enrolled': 'is_writer_program_enrolled',
            'medium_member_at': 'medium_member_at',
            'top_writer_in': 'top_writer_in',
            'twitter_username': 'twitter_username',
            'username': 'username'
        }

        self._allow_notes = allow_notes
        self._bio = bio
        self._followers_count = followers_count
        self._following_count = following_count
        self._fullname = fullname
        self._has_list = has_list
        self._id = id
        self._image_url = image_url
        self._is_book_author = is_book_author
        self._is_suspended = is_suspended
        self._is_writer_program_enrolled = is_writer_program_enrolled
        self._medium_member_at = medium_member_at
        self._top_writer_in = top_writer_in
        self._twitter_username = twitter_username
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'UserUserIdGet200Response':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The _user__user_id__get_200_response of this UserUserIdGet200Response.  # noqa: E501
        :rtype: UserUserIdGet200Response
        """
        return util.deserialize_model(dikt, cls)

    @property
    def allow_notes(self) -> bool:
        """Gets the allow_notes of this UserUserIdGet200Response.


        :return: The allow_notes of this UserUserIdGet200Response.
        :rtype: bool
        """
        return self._allow_notes

    @allow_notes.setter
    def allow_notes(self, allow_notes: bool):
        """Sets the allow_notes of this UserUserIdGet200Response.


        :param allow_notes: The allow_notes of this UserUserIdGet200Response.
        :type allow_notes: bool
        """

        self._allow_notes = allow_notes

    @property
    def bio(self) -> str:
        """Gets the bio of this UserUserIdGet200Response.


        :return: The bio of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._bio

    @bio.setter
    def bio(self, bio: str):
        """Sets the bio of this UserUserIdGet200Response.


        :param bio: The bio of this UserUserIdGet200Response.
        :type bio: str
        """

        self._bio = bio

    @property
    def followers_count(self) -> int:
        """Gets the followers_count of this UserUserIdGet200Response.


        :return: The followers_count of this UserUserIdGet200Response.
        :rtype: int
        """
        return self._followers_count

    @followers_count.setter
    def followers_count(self, followers_count: int):
        """Sets the followers_count of this UserUserIdGet200Response.


        :param followers_count: The followers_count of this UserUserIdGet200Response.
        :type followers_count: int
        """

        self._followers_count = followers_count

    @property
    def following_count(self) -> int:
        """Gets the following_count of this UserUserIdGet200Response.


        :return: The following_count of this UserUserIdGet200Response.
        :rtype: int
        """
        return self._following_count

    @following_count.setter
    def following_count(self, following_count: int):
        """Sets the following_count of this UserUserIdGet200Response.


        :param following_count: The following_count of this UserUserIdGet200Response.
        :type following_count: int
        """

        self._following_count = following_count

    @property
    def fullname(self) -> str:
        """Gets the fullname of this UserUserIdGet200Response.


        :return: The fullname of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._fullname

    @fullname.setter
    def fullname(self, fullname: str):
        """Sets the fullname of this UserUserIdGet200Response.


        :param fullname: The fullname of this UserUserIdGet200Response.
        :type fullname: str
        """

        self._fullname = fullname

    @property
    def has_list(self) -> bool:
        """Gets the has_list of this UserUserIdGet200Response.


        :return: The has_list of this UserUserIdGet200Response.
        :rtype: bool
        """
        return self._has_list

    @has_list.setter
    def has_list(self, has_list: bool):
        """Sets the has_list of this UserUserIdGet200Response.


        :param has_list: The has_list of this UserUserIdGet200Response.
        :type has_list: bool
        """

        self._has_list = has_list

    @property
    def id(self) -> str:
        """Gets the id of this UserUserIdGet200Response.


        :return: The id of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this UserUserIdGet200Response.


        :param id: The id of this UserUserIdGet200Response.
        :type id: str
        """

        self._id = id

    @property
    def image_url(self) -> str:
        """Gets the image_url of this UserUserIdGet200Response.


        :return: The image_url of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._image_url

    @image_url.setter
    def image_url(self, image_url: str):
        """Sets the image_url of this UserUserIdGet200Response.


        :param image_url: The image_url of this UserUserIdGet200Response.
        :type image_url: str
        """

        self._image_url = image_url

    @property
    def is_book_author(self) -> bool:
        """Gets the is_book_author of this UserUserIdGet200Response.


        :return: The is_book_author of this UserUserIdGet200Response.
        :rtype: bool
        """
        return self._is_book_author

    @is_book_author.setter
    def is_book_author(self, is_book_author: bool):
        """Sets the is_book_author of this UserUserIdGet200Response.


        :param is_book_author: The is_book_author of this UserUserIdGet200Response.
        :type is_book_author: bool
        """

        self._is_book_author = is_book_author

    @property
    def is_suspended(self) -> bool:
        """Gets the is_suspended of this UserUserIdGet200Response.


        :return: The is_suspended of this UserUserIdGet200Response.
        :rtype: bool
        """
        return self._is_suspended

    @is_suspended.setter
    def is_suspended(self, is_suspended: bool):
        """Sets the is_suspended of this UserUserIdGet200Response.


        :param is_suspended: The is_suspended of this UserUserIdGet200Response.
        :type is_suspended: bool
        """

        self._is_suspended = is_suspended

    @property
    def is_writer_program_enrolled(self) -> bool:
        """Gets the is_writer_program_enrolled of this UserUserIdGet200Response.


        :return: The is_writer_program_enrolled of this UserUserIdGet200Response.
        :rtype: bool
        """
        return self._is_writer_program_enrolled

    @is_writer_program_enrolled.setter
    def is_writer_program_enrolled(self, is_writer_program_enrolled: bool):
        """Sets the is_writer_program_enrolled of this UserUserIdGet200Response.


        :param is_writer_program_enrolled: The is_writer_program_enrolled of this UserUserIdGet200Response.
        :type is_writer_program_enrolled: bool
        """

        self._is_writer_program_enrolled = is_writer_program_enrolled

    @property
    def medium_member_at(self) -> str:
        """Gets the medium_member_at of this UserUserIdGet200Response.


        :return: The medium_member_at of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._medium_member_at

    @medium_member_at.setter
    def medium_member_at(self, medium_member_at: str):
        """Sets the medium_member_at of this UserUserIdGet200Response.


        :param medium_member_at: The medium_member_at of this UserUserIdGet200Response.
        :type medium_member_at: str
        """

        self._medium_member_at = medium_member_at

    @property
    def top_writer_in(self) -> List[str]:
        """Gets the top_writer_in of this UserUserIdGet200Response.


        :return: The top_writer_in of this UserUserIdGet200Response.
        :rtype: List[str]
        """
        return self._top_writer_in

    @top_writer_in.setter
    def top_writer_in(self, top_writer_in: List[str]):
        """Sets the top_writer_in of this UserUserIdGet200Response.


        :param top_writer_in: The top_writer_in of this UserUserIdGet200Response.
        :type top_writer_in: List[str]
        """

        self._top_writer_in = top_writer_in

    @property
    def twitter_username(self) -> str:
        """Gets the twitter_username of this UserUserIdGet200Response.


        :return: The twitter_username of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._twitter_username

    @twitter_username.setter
    def twitter_username(self, twitter_username: str):
        """Sets the twitter_username of this UserUserIdGet200Response.


        :param twitter_username: The twitter_username of this UserUserIdGet200Response.
        :type twitter_username: str
        """

        self._twitter_username = twitter_username

    @property
    def username(self) -> str:
        """Gets the username of this UserUserIdGet200Response.


        :return: The username of this UserUserIdGet200Response.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this UserUserIdGet200Response.


        :param username: The username of this UserUserIdGet200Response.
        :type username: str
        """

        self._username = username
