from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipStatus(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, outgoing_status=None):  # noqa: E501
        """RelationshipStatus - a model defined in OpenAPI

        :param outgoing_status: The outgoing_status of this RelationshipStatus.  # noqa: E501
        :type outgoing_status: str
        """
        self.openapi_types = {
            'outgoing_status': str
        }

        self.attribute_map = {
            'outgoing_status': 'outgoing_status'
        }

        self._outgoing_status = outgoing_status

    @classmethod
    def from_dict(cls, dikt) -> 'RelationshipStatus':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RelationshipStatus of this RelationshipStatus.  # noqa: E501
        :rtype: RelationshipStatus
        """
        return util.deserialize_model(dikt, cls)

    @property
    def outgoing_status(self) -> str:
        """Gets the outgoing_status of this RelationshipStatus.

        Status of outgoing relationship  # noqa: E501

        :return: The outgoing_status of this RelationshipStatus.
        :rtype: str
        """
        return self._outgoing_status

    @outgoing_status.setter
    def outgoing_status(self, outgoing_status: str):
        """Sets the outgoing_status of this RelationshipStatus.

        Status of outgoing relationship  # noqa: E501

        :param outgoing_status: The outgoing_status of this RelationshipStatus.
        :type outgoing_status: str
        """
        allowed_values = ["none", "follows", "requested"]  # noqa: E501
        if outgoing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `outgoing_status` ({0}), must be one of {1}"
                .format(outgoing_status, allowed_values)
            )

        self._outgoing_status = outgoing_status
