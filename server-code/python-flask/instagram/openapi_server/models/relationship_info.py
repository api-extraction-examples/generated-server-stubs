from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class RelationshipInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, incoming_status=None, outgoing_status=None, target_user_is_private=None):  # noqa: E501
        """RelationshipInfo - a model defined in OpenAPI

        :param incoming_status: The incoming_status of this RelationshipInfo.  # noqa: E501
        :type incoming_status: str
        :param outgoing_status: The outgoing_status of this RelationshipInfo.  # noqa: E501
        :type outgoing_status: str
        :param target_user_is_private: The target_user_is_private of this RelationshipInfo.  # noqa: E501
        :type target_user_is_private: bool
        """
        self.openapi_types = {
            'incoming_status': str,
            'outgoing_status': str,
            'target_user_is_private': bool
        }

        self.attribute_map = {
            'incoming_status': 'incoming_status',
            'outgoing_status': 'outgoing_status',
            'target_user_is_private': 'target_user_is_private'
        }

        self._incoming_status = incoming_status
        self._outgoing_status = outgoing_status
        self._target_user_is_private = target_user_is_private

    @classmethod
    def from_dict(cls, dikt) -> 'RelationshipInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The RelationshipInfo of this RelationshipInfo.  # noqa: E501
        :rtype: RelationshipInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def incoming_status(self) -> str:
        """Gets the incoming_status of this RelationshipInfo.

        Status of incoming relationship  # noqa: E501

        :return: The incoming_status of this RelationshipInfo.
        :rtype: str
        """
        return self._incoming_status

    @incoming_status.setter
    def incoming_status(self, incoming_status: str):
        """Sets the incoming_status of this RelationshipInfo.

        Status of incoming relationship  # noqa: E501

        :param incoming_status: The incoming_status of this RelationshipInfo.
        :type incoming_status: str
        """
        allowed_values = ["none", "followed_by", "requested_by"]  # noqa: E501
        if incoming_status not in allowed_values:
            raise ValueError(
                "Invalid value for `incoming_status` ({0}), must be one of {1}"
                .format(incoming_status, allowed_values)
            )

        self._incoming_status = incoming_status

    @property
    def outgoing_status(self) -> str:
        """Gets the outgoing_status of this RelationshipInfo.

        Status of outgoing relationship  # noqa: E501

        :return: The outgoing_status of this RelationshipInfo.
        :rtype: str
        """
        return self._outgoing_status

    @outgoing_status.setter
    def outgoing_status(self, outgoing_status: str):
        """Sets the outgoing_status of this RelationshipInfo.

        Status of outgoing relationship  # noqa: E501

        :param outgoing_status: The outgoing_status of this RelationshipInfo.
        :type outgoing_status: str
        """
        allowed_values = ["none", "follows", "requested"]  # noqa: E501
        if outgoing_status not in allowed_values:
            raise ValueError(
                "Invalid value for `outgoing_status` ({0}), must be one of {1}"
                .format(outgoing_status, allowed_values)
            )

        self._outgoing_status = outgoing_status

    @property
    def target_user_is_private(self) -> bool:
        """Gets the target_user_is_private of this RelationshipInfo.

        Indicates whether target user is private or not  # noqa: E501

        :return: The target_user_is_private of this RelationshipInfo.
        :rtype: bool
        """
        return self._target_user_is_private

    @target_user_is_private.setter
    def target_user_is_private(self, target_user_is_private: bool):
        """Sets the target_user_is_private of this RelationshipInfo.

        Indicates whether target user is private or not  # noqa: E501

        :param target_user_is_private: The target_user_is_private of this RelationshipInfo.
        :type target_user_is_private: bool
        """

        self._target_user_is_private = target_user_is_private
