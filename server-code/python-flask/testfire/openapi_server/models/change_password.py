from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ChangePassword(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, password1=None, password2=None, username=None):  # noqa: E501
        """ChangePassword - a model defined in OpenAPI

        :param password1: The password1 of this ChangePassword.  # noqa: E501
        :type password1: str
        :param password2: The password2 of this ChangePassword.  # noqa: E501
        :type password2: str
        :param username: The username of this ChangePassword.  # noqa: E501
        :type username: str
        """
        self.openapi_types = {
            'password1': str,
            'password2': str,
            'username': str
        }

        self.attribute_map = {
            'password1': 'password1',
            'password2': 'password2',
            'username': 'username'
        }

        self._password1 = password1
        self._password2 = password2
        self._username = username

    @classmethod
    def from_dict(cls, dikt) -> 'ChangePassword':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The changePassword of this ChangePassword.  # noqa: E501
        :rtype: ChangePassword
        """
        return util.deserialize_model(dikt, cls)

    @property
    def password1(self) -> str:
        """Gets the password1 of this ChangePassword.


        :return: The password1 of this ChangePassword.
        :rtype: str
        """
        return self._password1

    @password1.setter
    def password1(self, password1: str):
        """Sets the password1 of this ChangePassword.


        :param password1: The password1 of this ChangePassword.
        :type password1: str
        """

        self._password1 = password1

    @property
    def password2(self) -> str:
        """Gets the password2 of this ChangePassword.


        :return: The password2 of this ChangePassword.
        :rtype: str
        """
        return self._password2

    @password2.setter
    def password2(self, password2: str):
        """Sets the password2 of this ChangePassword.


        :param password2: The password2 of this ChangePassword.
        :type password2: str
        """
        if password2 is None:
            raise ValueError("Invalid value for `password2`, must not be `None`")  # noqa: E501

        self._password2 = password2

    @property
    def username(self) -> str:
        """Gets the username of this ChangePassword.


        :return: The username of this ChangePassword.
        :rtype: str
        """
        return self._username

    @username.setter
    def username(self, username: str):
        """Sets the username of this ChangePassword.


        :param username: The username of this ChangePassword.
        :type username: str
        """
        if username is None:
            raise ValueError("Invalid value for `username`, must not be `None`")  # noqa: E501

        self._username = username
