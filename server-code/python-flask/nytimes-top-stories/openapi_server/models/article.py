from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.article_multimedia_inner import ArticleMultimediaInner
from openapi_server.models.article_related_urls_inner import ArticleRelatedUrlsInner
from openapi_server import util

from openapi_server.models.article_multimedia_inner import ArticleMultimediaInner  # noqa: E501
from openapi_server.models.article_related_urls_inner import ArticleRelatedUrlsInner  # noqa: E501

class Article(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, abstract=None, byline=None, created_date=None, des_facet=None, geo_facet=None, item_type=None, kicker=None, material_type_facet=None, multimedia=None, org_facet=None, per_facet=None, published_date=None, related_urls=None, section=None, short_url=None, subsection=None, thumbnail_standard=None, title=None, updated_date=None, url=None):  # noqa: E501
        """Article - a model defined in OpenAPI

        :param abstract: The abstract of this Article.  # noqa: E501
        :type abstract: str
        :param byline: The byline of this Article.  # noqa: E501
        :type byline: str
        :param created_date: The created_date of this Article.  # noqa: E501
        :type created_date: str
        :param des_facet: The des_facet of this Article.  # noqa: E501
        :type des_facet: List[str]
        :param geo_facet: The geo_facet of this Article.  # noqa: E501
        :type geo_facet: List[str]
        :param item_type: The item_type of this Article.  # noqa: E501
        :type item_type: str
        :param kicker: The kicker of this Article.  # noqa: E501
        :type kicker: str
        :param material_type_facet: The material_type_facet of this Article.  # noqa: E501
        :type material_type_facet: str
        :param multimedia: The multimedia of this Article.  # noqa: E501
        :type multimedia: List[ArticleMultimediaInner]
        :param org_facet: The org_facet of this Article.  # noqa: E501
        :type org_facet: List[str]
        :param per_facet: The per_facet of this Article.  # noqa: E501
        :type per_facet: List[str]
        :param published_date: The published_date of this Article.  # noqa: E501
        :type published_date: str
        :param related_urls: The related_urls of this Article.  # noqa: E501
        :type related_urls: List[ArticleRelatedUrlsInner]
        :param section: The section of this Article.  # noqa: E501
        :type section: str
        :param short_url: The short_url of this Article.  # noqa: E501
        :type short_url: str
        :param subsection: The subsection of this Article.  # noqa: E501
        :type subsection: str
        :param thumbnail_standard: The thumbnail_standard of this Article.  # noqa: E501
        :type thumbnail_standard: str
        :param title: The title of this Article.  # noqa: E501
        :type title: str
        :param updated_date: The updated_date of this Article.  # noqa: E501
        :type updated_date: str
        :param url: The url of this Article.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'abstract': str,
            'byline': str,
            'created_date': str,
            'des_facet': List[str],
            'geo_facet': List[str],
            'item_type': str,
            'kicker': str,
            'material_type_facet': str,
            'multimedia': List[ArticleMultimediaInner],
            'org_facet': List[str],
            'per_facet': List[str],
            'published_date': str,
            'related_urls': List[ArticleRelatedUrlsInner],
            'section': str,
            'short_url': str,
            'subsection': str,
            'thumbnail_standard': str,
            'title': str,
            'updated_date': str,
            'url': str
        }

        self.attribute_map = {
            'abstract': 'abstract',
            'byline': 'byline',
            'created_date': 'created_date',
            'des_facet': 'des_facet',
            'geo_facet': 'geo_facet',
            'item_type': 'item_type',
            'kicker': 'kicker',
            'material_type_facet': 'material_type_facet',
            'multimedia': 'multimedia',
            'org_facet': 'org_facet',
            'per_facet': 'per_facet',
            'published_date': 'published_date',
            'related_urls': 'related_urls',
            'section': 'section',
            'short_url': 'short_url',
            'subsection': 'subsection',
            'thumbnail_standard': 'thumbnail_standard',
            'title': 'title',
            'updated_date': 'updated_date',
            'url': 'url'
        }

        self._abstract = abstract
        self._byline = byline
        self._created_date = created_date
        self._des_facet = des_facet
        self._geo_facet = geo_facet
        self._item_type = item_type
        self._kicker = kicker
        self._material_type_facet = material_type_facet
        self._multimedia = multimedia
        self._org_facet = org_facet
        self._per_facet = per_facet
        self._published_date = published_date
        self._related_urls = related_urls
        self._section = section
        self._short_url = short_url
        self._subsection = subsection
        self._thumbnail_standard = thumbnail_standard
        self._title = title
        self._updated_date = updated_date
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'Article':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Article of this Article.  # noqa: E501
        :rtype: Article
        """
        return util.deserialize_model(dikt, cls)

    @property
    def abstract(self) -> str:
        """Gets the abstract of this Article.


        :return: The abstract of this Article.
        :rtype: str
        """
        return self._abstract

    @abstract.setter
    def abstract(self, abstract: str):
        """Sets the abstract of this Article.


        :param abstract: The abstract of this Article.
        :type abstract: str
        """

        self._abstract = abstract

    @property
    def byline(self) -> str:
        """Gets the byline of this Article.


        :return: The byline of this Article.
        :rtype: str
        """
        return self._byline

    @byline.setter
    def byline(self, byline: str):
        """Sets the byline of this Article.


        :param byline: The byline of this Article.
        :type byline: str
        """

        self._byline = byline

    @property
    def created_date(self) -> str:
        """Gets the created_date of this Article.


        :return: The created_date of this Article.
        :rtype: str
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: str):
        """Sets the created_date of this Article.


        :param created_date: The created_date of this Article.
        :type created_date: str
        """

        self._created_date = created_date

    @property
    def des_facet(self) -> List[str]:
        """Gets the des_facet of this Article.


        :return: The des_facet of this Article.
        :rtype: List[str]
        """
        return self._des_facet

    @des_facet.setter
    def des_facet(self, des_facet: List[str]):
        """Sets the des_facet of this Article.


        :param des_facet: The des_facet of this Article.
        :type des_facet: List[str]
        """

        self._des_facet = des_facet

    @property
    def geo_facet(self) -> List[str]:
        """Gets the geo_facet of this Article.


        :return: The geo_facet of this Article.
        :rtype: List[str]
        """
        return self._geo_facet

    @geo_facet.setter
    def geo_facet(self, geo_facet: List[str]):
        """Sets the geo_facet of this Article.


        :param geo_facet: The geo_facet of this Article.
        :type geo_facet: List[str]
        """

        self._geo_facet = geo_facet

    @property
    def item_type(self) -> str:
        """Gets the item_type of this Article.


        :return: The item_type of this Article.
        :rtype: str
        """
        return self._item_type

    @item_type.setter
    def item_type(self, item_type: str):
        """Sets the item_type of this Article.


        :param item_type: The item_type of this Article.
        :type item_type: str
        """

        self._item_type = item_type

    @property
    def kicker(self) -> str:
        """Gets the kicker of this Article.


        :return: The kicker of this Article.
        :rtype: str
        """
        return self._kicker

    @kicker.setter
    def kicker(self, kicker: str):
        """Sets the kicker of this Article.


        :param kicker: The kicker of this Article.
        :type kicker: str
        """

        self._kicker = kicker

    @property
    def material_type_facet(self) -> str:
        """Gets the material_type_facet of this Article.


        :return: The material_type_facet of this Article.
        :rtype: str
        """
        return self._material_type_facet

    @material_type_facet.setter
    def material_type_facet(self, material_type_facet: str):
        """Sets the material_type_facet of this Article.


        :param material_type_facet: The material_type_facet of this Article.
        :type material_type_facet: str
        """

        self._material_type_facet = material_type_facet

    @property
    def multimedia(self) -> List[ArticleMultimediaInner]:
        """Gets the multimedia of this Article.


        :return: The multimedia of this Article.
        :rtype: List[ArticleMultimediaInner]
        """
        return self._multimedia

    @multimedia.setter
    def multimedia(self, multimedia: List[ArticleMultimediaInner]):
        """Sets the multimedia of this Article.


        :param multimedia: The multimedia of this Article.
        :type multimedia: List[ArticleMultimediaInner]
        """

        self._multimedia = multimedia

    @property
    def org_facet(self) -> List[str]:
        """Gets the org_facet of this Article.


        :return: The org_facet of this Article.
        :rtype: List[str]
        """
        return self._org_facet

    @org_facet.setter
    def org_facet(self, org_facet: List[str]):
        """Sets the org_facet of this Article.


        :param org_facet: The org_facet of this Article.
        :type org_facet: List[str]
        """

        self._org_facet = org_facet

    @property
    def per_facet(self) -> List[str]:
        """Gets the per_facet of this Article.


        :return: The per_facet of this Article.
        :rtype: List[str]
        """
        return self._per_facet

    @per_facet.setter
    def per_facet(self, per_facet: List[str]):
        """Sets the per_facet of this Article.


        :param per_facet: The per_facet of this Article.
        :type per_facet: List[str]
        """

        self._per_facet = per_facet

    @property
    def published_date(self) -> str:
        """Gets the published_date of this Article.


        :return: The published_date of this Article.
        :rtype: str
        """
        return self._published_date

    @published_date.setter
    def published_date(self, published_date: str):
        """Sets the published_date of this Article.


        :param published_date: The published_date of this Article.
        :type published_date: str
        """

        self._published_date = published_date

    @property
    def related_urls(self) -> List[ArticleRelatedUrlsInner]:
        """Gets the related_urls of this Article.


        :return: The related_urls of this Article.
        :rtype: List[ArticleRelatedUrlsInner]
        """
        return self._related_urls

    @related_urls.setter
    def related_urls(self, related_urls: List[ArticleRelatedUrlsInner]):
        """Sets the related_urls of this Article.


        :param related_urls: The related_urls of this Article.
        :type related_urls: List[ArticleRelatedUrlsInner]
        """

        self._related_urls = related_urls

    @property
    def section(self) -> str:
        """Gets the section of this Article.


        :return: The section of this Article.
        :rtype: str
        """
        return self._section

    @section.setter
    def section(self, section: str):
        """Sets the section of this Article.


        :param section: The section of this Article.
        :type section: str
        """

        self._section = section

    @property
    def short_url(self) -> str:
        """Gets the short_url of this Article.


        :return: The short_url of this Article.
        :rtype: str
        """
        return self._short_url

    @short_url.setter
    def short_url(self, short_url: str):
        """Sets the short_url of this Article.


        :param short_url: The short_url of this Article.
        :type short_url: str
        """

        self._short_url = short_url

    @property
    def subsection(self) -> str:
        """Gets the subsection of this Article.


        :return: The subsection of this Article.
        :rtype: str
        """
        return self._subsection

    @subsection.setter
    def subsection(self, subsection: str):
        """Sets the subsection of this Article.


        :param subsection: The subsection of this Article.
        :type subsection: str
        """

        self._subsection = subsection

    @property
    def thumbnail_standard(self) -> str:
        """Gets the thumbnail_standard of this Article.


        :return: The thumbnail_standard of this Article.
        :rtype: str
        """
        return self._thumbnail_standard

    @thumbnail_standard.setter
    def thumbnail_standard(self, thumbnail_standard: str):
        """Sets the thumbnail_standard of this Article.


        :param thumbnail_standard: The thumbnail_standard of this Article.
        :type thumbnail_standard: str
        """

        self._thumbnail_standard = thumbnail_standard

    @property
    def title(self) -> str:
        """Gets the title of this Article.


        :return: The title of this Article.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title: str):
        """Sets the title of this Article.


        :param title: The title of this Article.
        :type title: str
        """

        self._title = title

    @property
    def updated_date(self) -> str:
        """Gets the updated_date of this Article.


        :return: The updated_date of this Article.
        :rtype: str
        """
        return self._updated_date

    @updated_date.setter
    def updated_date(self, updated_date: str):
        """Sets the updated_date of this Article.


        :param updated_date: The updated_date of this Article.
        :type updated_date: str
        """

        self._updated_date = updated_date

    @property
    def url(self) -> str:
        """Gets the url of this Article.


        :return: The url of this Article.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this Article.


        :param url: The url of this Article.
        :type url: str
        """

        self._url = url
