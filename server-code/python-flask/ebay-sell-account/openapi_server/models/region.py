from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Region(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, region_name=None, region_type=None):  # noqa: E501
        """Region - a model defined in OpenAPI

        :param region_name: The region_name of this Region.  # noqa: E501
        :type region_name: str
        :param region_type: The region_type of this Region.  # noqa: E501
        :type region_type: str
        """
        self.openapi_types = {
            'region_name': str,
            'region_type': str
        }

        self.attribute_map = {
            'region_name': 'regionName',
            'region_type': 'regionType'
        }

        self._region_name = region_name
        self._region_type = region_type

    @classmethod
    def from_dict(cls, dikt) -> 'Region':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Region of this Region.  # noqa: E501
        :rtype: Region
        """
        return util.deserialize_model(dikt, cls)

    @property
    def region_name(self) -> str:
        """Gets the region_name of this Region.

        A string that indicates the name of a region, as defined by eBay. A \"region\" can be either a 'world region' (e.g., the \"Middle East\" or \"Southeast Asia\"), a country (represented with a two-letter country code), a state or province (represented with a two-letter code), or a special domestic region within a country. <br /><br />The <b>GeteBayDetails</b> call in the Trading API can be used to retrieve the world regions and special domestic regions within a specific country. To get these enumeration values, call <b>GeteBayDetails</b> with the <b>DetailName</b> value set to <b>ExcludeShippingLocationDetails</b>.  # noqa: E501

        :return: The region_name of this Region.
        :rtype: str
        """
        return self._region_name

    @region_name.setter
    def region_name(self, region_name: str):
        """Sets the region_name of this Region.

        A string that indicates the name of a region, as defined by eBay. A \"region\" can be either a 'world region' (e.g., the \"Middle East\" or \"Southeast Asia\"), a country (represented with a two-letter country code), a state or province (represented with a two-letter code), or a special domestic region within a country. <br /><br />The <b>GeteBayDetails</b> call in the Trading API can be used to retrieve the world regions and special domestic regions within a specific country. To get these enumeration values, call <b>GeteBayDetails</b> with the <b>DetailName</b> value set to <b>ExcludeShippingLocationDetails</b>.  # noqa: E501

        :param region_name: The region_name of this Region.
        :type region_name: str
        """

        self._region_name = region_name

    @property
    def region_type(self) -> str:
        """Gets the region_type of this Region.

        Reserved for future use. <!--The region's type, which can be one of the following: 'COUNTRY', 'COUNTRY_REGION', 'STATE_OR_PROVINCE', 'WORLD_REGION', or 'WORLDWIDE'.--> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:RegionTypeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The region_type of this Region.
        :rtype: str
        """
        return self._region_type

    @region_type.setter
    def region_type(self, region_type: str):
        """Sets the region_type of this Region.

        Reserved for future use. <!--The region's type, which can be one of the following: 'COUNTRY', 'COUNTRY_REGION', 'STATE_OR_PROVINCE', 'WORLD_REGION', or 'WORLDWIDE'.--> For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:RegionTypeEnum'>eBay API documentation</a>  # noqa: E501

        :param region_type: The region_type of this Region.
        :type region_type: str
        """

        self._region_type = region_type
