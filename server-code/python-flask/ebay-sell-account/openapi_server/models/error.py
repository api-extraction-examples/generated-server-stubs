from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.error_parameter import ErrorParameter
from openapi_server import util

from openapi_server.models.error_parameter import ErrorParameter  # noqa: E501

class Error(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, category=None, domain=None, error_id=None, input_ref_ids=None, long_message=None, message=None, output_ref_ids=None, parameters=None, subdomain=None):  # noqa: E501
        """Error - a model defined in OpenAPI

        :param category: The category of this Error.  # noqa: E501
        :type category: str
        :param domain: The domain of this Error.  # noqa: E501
        :type domain: str
        :param error_id: The error_id of this Error.  # noqa: E501
        :type error_id: int
        :param input_ref_ids: The input_ref_ids of this Error.  # noqa: E501
        :type input_ref_ids: List[str]
        :param long_message: The long_message of this Error.  # noqa: E501
        :type long_message: str
        :param message: The message of this Error.  # noqa: E501
        :type message: str
        :param output_ref_ids: The output_ref_ids of this Error.  # noqa: E501
        :type output_ref_ids: List[str]
        :param parameters: The parameters of this Error.  # noqa: E501
        :type parameters: List[ErrorParameter]
        :param subdomain: The subdomain of this Error.  # noqa: E501
        :type subdomain: str
        """
        self.openapi_types = {
            'category': str,
            'domain': str,
            'error_id': int,
            'input_ref_ids': List[str],
            'long_message': str,
            'message': str,
            'output_ref_ids': List[str],
            'parameters': List[ErrorParameter],
            'subdomain': str
        }

        self.attribute_map = {
            'category': 'category',
            'domain': 'domain',
            'error_id': 'errorId',
            'input_ref_ids': 'inputRefIds',
            'long_message': 'longMessage',
            'message': 'message',
            'output_ref_ids': 'outputRefIds',
            'parameters': 'parameters',
            'subdomain': 'subdomain'
        }

        self._category = category
        self._domain = domain
        self._error_id = error_id
        self._input_ref_ids = input_ref_ids
        self._long_message = long_message
        self._message = message
        self._output_ref_ids = output_ref_ids
        self._parameters = parameters
        self._subdomain = subdomain

    @classmethod
    def from_dict(cls, dikt) -> 'Error':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Error of this Error.  # noqa: E501
        :rtype: Error
        """
        return util.deserialize_model(dikt, cls)

    @property
    def category(self) -> str:
        """Gets the category of this Error.

        The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul>  # noqa: E501

        :return: The category of this Error.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category: str):
        """Sets the category of this Error.

        The category type for this error or warning. It is a string that can have one of three values:<ul><li><code>Application</code>: Indicates an exception or error occurred in the application code or at runtime. Examples include catching an exception in a service's business logic, system failures, or request errors from a dependency.</li><li><code>Business</code>: Used when your service or a dependent service refused to continue processing on the resource because of a business rule violation such as \"Seller does not ship item to Antarctica\" or \"Buyer ineligible to purchase an alcoholic item\". Business errors are not syntactical input errors.</li><li><code>Request</code>: Used when there is anything wrong with the request, such as authentication, syntactical errors, rate limiting or missing headers, bad HTTP header values, and so on.</li></ul>  # noqa: E501

        :param category: The category of this Error.
        :type category: str
        """

        self._category = category

    @property
    def domain(self) -> str:
        """Gets the domain of this Error.

        Name of the domain ,or primary system, of the service or application where the error occurred.  # noqa: E501

        :return: The domain of this Error.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this Error.

        Name of the domain ,or primary system, of the service or application where the error occurred.  # noqa: E501

        :param domain: The domain of this Error.
        :type domain: str
        """

        self._domain = domain

    @property
    def error_id(self) -> int:
        """Gets the error_id of this Error.

        A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.  # noqa: E501

        :return: The error_id of this Error.
        :rtype: int
        """
        return self._error_id

    @error_id.setter
    def error_id(self, error_id: int):
        """Sets the error_id of this Error.

        A positive integer that uniquely identifies the specific error condition that occurred. Your application can use error codes as identifiers in your customized error-handling algorithms.  # noqa: E501

        :param error_id: The error_id of this Error.
        :type error_id: int
        """

        self._error_id = error_id

    @property
    def input_ref_ids(self) -> List[str]:
        """Gets the input_ref_ids of this Error.

        Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation.  # noqa: E501

        :return: The input_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._input_ref_ids

    @input_ref_ids.setter
    def input_ref_ids(self, input_ref_ids: List[str]):
        """Sets the input_ref_ids of this Error.

        Identifies specific request elements associated with the error, if any. inputRefId's response is format specific. For JSON, use <i>JSONPath</i> notation.  # noqa: E501

        :param input_ref_ids: The input_ref_ids of this Error.
        :type input_ref_ids: List[str]
        """

        self._input_ref_ids = input_ref_ids

    @property
    def long_message(self) -> str:
        """Gets the long_message of this Error.

        A more detailed explanation of the error than given in the <code>message</code> error field.  # noqa: E501

        :return: The long_message of this Error.
        :rtype: str
        """
        return self._long_message

    @long_message.setter
    def long_message(self, long_message: str):
        """Sets the long_message of this Error.

        A more detailed explanation of the error than given in the <code>message</code> error field.  # noqa: E501

        :param long_message: The long_message of this Error.
        :type long_message: str
        """

        self._long_message = long_message

    @property
    def message(self) -> str:
        """Gets the message of this Error.

        Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.  # noqa: E501

        :return: The message of this Error.
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message: str):
        """Sets the message of this Error.

        Information on how to correct the problem, in the end user's terms and language where applicable. Its value is at most 50 characters long. If applicable, the value is localized in the end user's requested locale.  # noqa: E501

        :param message: The message of this Error.
        :type message: str
        """

        self._message = message

    @property
    def output_ref_ids(self) -> List[str]:
        """Gets the output_ref_ids of this Error.

        Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>.  # noqa: E501

        :return: The output_ref_ids of this Error.
        :rtype: List[str]
        """
        return self._output_ref_ids

    @output_ref_ids.setter
    def output_ref_ids(self, output_ref_ids: List[str]):
        """Sets the output_ref_ids of this Error.

        Identifies specific response elements associated with the error, if any. Path format is the same as <code>inputRefId</code>.  # noqa: E501

        :param output_ref_ids: The output_ref_ids of this Error.
        :type output_ref_ids: List[str]
        """

        self._output_ref_ids = output_ref_ids

    @property
    def parameters(self) -> List[ErrorParameter]:
        """Gets the parameters of this Error.

        This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>.  # noqa: E501

        :return: The parameters of this Error.
        :rtype: List[ErrorParameter]
        """
        return self._parameters

    @parameters.setter
    def parameters(self, parameters: List[ErrorParameter]):
        """Sets the parameters of this Error.

        This optional list of name/value pairs that contain context-specific <code>ErrorParameter</code> objects, with each item in the list being a parameter (or input field name) that caused an error condition. Each <code>ErrorParameter</code> object consists of two fields, a <code>name</code> and a <code>value</code>.  # noqa: E501

        :param parameters: The parameters of this Error.
        :type parameters: List[ErrorParameter]
        """

        self._parameters = parameters

    @property
    def subdomain(self) -> str:
        """Gets the subdomain of this Error.

        If present, indicates the subsystem in which the error occurred.  # noqa: E501

        :return: The subdomain of this Error.
        :rtype: str
        """
        return self._subdomain

    @subdomain.setter
    def subdomain(self, subdomain: str):
        """Sets the subdomain of this Error.

        If present, indicates the subsystem in which the error occurred.  # noqa: E501

        :param subdomain: The subdomain of this Error.
        :type subdomain: str
        """

        self._subdomain = subdomain
