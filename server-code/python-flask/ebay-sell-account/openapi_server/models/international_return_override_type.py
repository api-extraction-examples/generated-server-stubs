from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.time_duration import TimeDuration
from openapi_server import util

from openapi_server.models.time_duration import TimeDuration  # noqa: E501

class InternationalReturnOverrideType(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, return_method=None, return_period=None, return_shipping_cost_payer=None, returns_accepted=None):  # noqa: E501
        """InternationalReturnOverrideType - a model defined in OpenAPI

        :param return_method: The return_method of this InternationalReturnOverrideType.  # noqa: E501
        :type return_method: str
        :param return_period: The return_period of this InternationalReturnOverrideType.  # noqa: E501
        :type return_period: TimeDuration
        :param return_shipping_cost_payer: The return_shipping_cost_payer of this InternationalReturnOverrideType.  # noqa: E501
        :type return_shipping_cost_payer: str
        :param returns_accepted: The returns_accepted of this InternationalReturnOverrideType.  # noqa: E501
        :type returns_accepted: bool
        """
        self.openapi_types = {
            'return_method': str,
            'return_period': TimeDuration,
            'return_shipping_cost_payer': str,
            'returns_accepted': bool
        }

        self.attribute_map = {
            'return_method': 'returnMethod',
            'return_period': 'returnPeriod',
            'return_shipping_cost_payer': 'returnShippingCostPayer',
            'returns_accepted': 'returnsAccepted'
        }

        self._return_method = return_method
        self._return_period = return_period
        self._return_shipping_cost_payer = return_shipping_cost_payer
        self._returns_accepted = returns_accepted

    @classmethod
    def from_dict(cls, dikt) -> 'InternationalReturnOverrideType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InternationalReturnOverrideType of this InternationalReturnOverrideType.  # noqa: E501
        :rtype: InternationalReturnOverrideType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def return_method(self) -> str:
        """Gets the return_method of this InternationalReturnOverrideType.

        This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>  # noqa: E501

        :return: The return_method of this InternationalReturnOverrideType.
        :rtype: str
        """
        return self._return_method

    @return_method.setter
    def return_method(self, return_method: str):
        """Sets the return_method of this InternationalReturnOverrideType.

        This field sets/indicates if the seller offers replacement items to the buyer in the case of an international return. The buyer must be willing to accept a replacement item; otherwise, the seller will need to issue a refund for a return. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnMethodEnum'>eBay API documentation</a>  # noqa: E501

        :param return_method: The return_method of this InternationalReturnOverrideType.
        :type return_method: str
        """

        self._return_method = return_method

    @property
    def return_period(self) -> TimeDuration:
        """Gets the return_period of this InternationalReturnOverrideType.


        :return: The return_period of this InternationalReturnOverrideType.
        :rtype: TimeDuration
        """
        return self._return_period

    @return_period.setter
    def return_period(self, return_period: TimeDuration):
        """Sets the return_period of this InternationalReturnOverrideType.


        :param return_period: The return_period of this InternationalReturnOverrideType.
        :type return_period: TimeDuration
        """

        self._return_period = return_period

    @property
    def return_shipping_cost_payer(self) -> str:
        """Gets the return_shipping_cost_payer of this InternationalReturnOverrideType.

        This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for 'significantly not as described' (SNAD) issues.  <br/><br/>This field is conditionally required if the <b>internationalOverride.returnsAccepted</b> field is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>  # noqa: E501

        :return: The return_shipping_cost_payer of this InternationalReturnOverrideType.
        :rtype: str
        """
        return self._return_shipping_cost_payer

    @return_shipping_cost_payer.setter
    def return_shipping_cost_payer(self, return_shipping_cost_payer: str):
        """Sets the return_shipping_cost_payer of this InternationalReturnOverrideType.

        This field indicates who is responsible for paying for the shipping charges for returned items. The field can be set to either <code>BUYER</code> or <code>SELLER</code>.  <br/><br/>Depending on the return policy and specifics of the return, either the buyer or the seller can be responsible for the return shipping costs. Note that the seller is always responsible for return shipping costs for 'significantly not as described' (SNAD) issues.  <br/><br/>This field is conditionally required if the <b>internationalOverride.returnsAccepted</b> field is set to <code>true</code>. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/api:ReturnShippingCostPayerEnum'>eBay API documentation</a>  # noqa: E501

        :param return_shipping_cost_payer: The return_shipping_cost_payer of this InternationalReturnOverrideType.
        :type return_shipping_cost_payer: str
        """

        self._return_shipping_cost_payer = return_shipping_cost_payer

    @property
    def returns_accepted(self) -> bool:
        """Gets the returns_accepted of this InternationalReturnOverrideType.

        If set to <code>true</code>, the seller accepts international returns. If set to <code>false</code>, the seller does not accept international returns.  <br/><br/>This field is conditionally required if the seller chooses to have a separate international return policy.  # noqa: E501

        :return: The returns_accepted of this InternationalReturnOverrideType.
        :rtype: bool
        """
        return self._returns_accepted

    @returns_accepted.setter
    def returns_accepted(self, returns_accepted: bool):
        """Sets the returns_accepted of this InternationalReturnOverrideType.

        If set to <code>true</code>, the seller accepts international returns. If set to <code>false</code>, the seller does not accept international returns.  <br/><br/>This field is conditionally required if the seller chooses to have a separate international return policy.  # noqa: E501

        :param returns_accepted: The returns_accepted of this InternationalReturnOverrideType.
        :type returns_accepted: bool
        """

        self._returns_accepted = returns_accepted
