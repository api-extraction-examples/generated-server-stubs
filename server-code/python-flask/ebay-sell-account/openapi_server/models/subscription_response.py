from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.subscription import Subscription
from openapi_server import util

from openapi_server.models.subscription import Subscription  # noqa: E501

class SubscriptionResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, href=None, limit=None, next=None, subscriptions=None, total=None):  # noqa: E501
        """SubscriptionResponse - a model defined in OpenAPI

        :param href: The href of this SubscriptionResponse.  # noqa: E501
        :type href: str
        :param limit: The limit of this SubscriptionResponse.  # noqa: E501
        :type limit: int
        :param next: The next of this SubscriptionResponse.  # noqa: E501
        :type next: str
        :param subscriptions: The subscriptions of this SubscriptionResponse.  # noqa: E501
        :type subscriptions: List[Subscription]
        :param total: The total of this SubscriptionResponse.  # noqa: E501
        :type total: int
        """
        self.openapi_types = {
            'href': str,
            'limit': int,
            'next': str,
            'subscriptions': List[Subscription],
            'total': int
        }

        self.attribute_map = {
            'href': 'href',
            'limit': 'limit',
            'next': 'next',
            'subscriptions': 'subscriptions',
            'total': 'total'
        }

        self._href = href
        self._limit = limit
        self._next = next
        self._subscriptions = subscriptions
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'SubscriptionResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SubscriptionResponse of this SubscriptionResponse.  # noqa: E501
        :rtype: SubscriptionResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def href(self) -> str:
        """Gets the href of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :return: The href of this SubscriptionResponse.
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href: str):
        """Sets the href of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :param href: The href of this SubscriptionResponse.
        :type href: str
        """

        self._href = href

    @property
    def limit(self) -> int:
        """Gets the limit of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :return: The limit of this SubscriptionResponse.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :param limit: The limit of this SubscriptionResponse.
        :type limit: int
        """

        self._limit = limit

    @property
    def next(self) -> str:
        """Gets the next of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :return: The next of this SubscriptionResponse.
        :rtype: str
        """
        return self._next

    @next.setter
    def next(self, next: str):
        """Sets the next of this SubscriptionResponse.

        This field is for future use.  # noqa: E501

        :param next: The next of this SubscriptionResponse.
        :type next: str
        """

        self._next = next

    @property
    def subscriptions(self) -> List[Subscription]:
        """Gets the subscriptions of this SubscriptionResponse.

        An array of subscriptions associated with the seller account.  # noqa: E501

        :return: The subscriptions of this SubscriptionResponse.
        :rtype: List[Subscription]
        """
        return self._subscriptions

    @subscriptions.setter
    def subscriptions(self, subscriptions: List[Subscription]):
        """Sets the subscriptions of this SubscriptionResponse.

        An array of subscriptions associated with the seller account.  # noqa: E501

        :param subscriptions: The subscriptions of this SubscriptionResponse.
        :type subscriptions: List[Subscription]
        """

        self._subscriptions = subscriptions

    @property
    def total(self) -> int:
        """Gets the total of this SubscriptionResponse.

        The total number of subscriptions displayed on the current page of results.  # noqa: E501

        :return: The total of this SubscriptionResponse.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this SubscriptionResponse.

        The total number of subscriptions displayed on the current page of results.  # noqa: E501

        :param total: The total of this SubscriptionResponse.
        :type total: int
        """

        self._total = total
