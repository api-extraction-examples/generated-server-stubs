from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SalesTax(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, country_code=None, sales_tax_jurisdiction_id=None, sales_tax_percentage=None, shipping_and_handling_taxed=None):  # noqa: E501
        """SalesTax - a model defined in OpenAPI

        :param country_code: The country_code of this SalesTax.  # noqa: E501
        :type country_code: str
        :param sales_tax_jurisdiction_id: The sales_tax_jurisdiction_id of this SalesTax.  # noqa: E501
        :type sales_tax_jurisdiction_id: str
        :param sales_tax_percentage: The sales_tax_percentage of this SalesTax.  # noqa: E501
        :type sales_tax_percentage: str
        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this SalesTax.  # noqa: E501
        :type shipping_and_handling_taxed: bool
        """
        self.openapi_types = {
            'country_code': str,
            'sales_tax_jurisdiction_id': str,
            'sales_tax_percentage': str,
            'shipping_and_handling_taxed': bool
        }

        self.attribute_map = {
            'country_code': 'countryCode',
            'sales_tax_jurisdiction_id': 'salesTaxJurisdictionId',
            'sales_tax_percentage': 'salesTaxPercentage',
            'shipping_and_handling_taxed': 'shippingAndHandlingTaxed'
        }

        self._country_code = country_code
        self._sales_tax_jurisdiction_id = sales_tax_jurisdiction_id
        self._sales_tax_percentage = sales_tax_percentage
        self._shipping_and_handling_taxed = shipping_and_handling_taxed

    @classmethod
    def from_dict(cls, dikt) -> 'SalesTax':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The SalesTax of this SalesTax.  # noqa: E501
        :rtype: SalesTax
        """
        return util.deserialize_model(dikt, cls)

    @property
    def country_code(self) -> str:
        """Gets the country_code of this SalesTax.

        The country code enumeration value identifies the country to which this sales tax rate applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum'>eBay API documentation</a>  # noqa: E501

        :return: The country_code of this SalesTax.
        :rtype: str
        """
        return self._country_code

    @country_code.setter
    def country_code(self, country_code: str):
        """Sets the country_code of this SalesTax.

        The country code enumeration value identifies the country to which this sales tax rate applies. For implementation help, refer to <a href='https://developer.ebay.com/api-docs/sell/account/types/ba:CountryCodeEnum'>eBay API documentation</a>  # noqa: E501

        :param country_code: The country_code of this SalesTax.
        :type country_code: str
        """

        self._country_code = country_code

    @property
    def sales_tax_jurisdiction_id(self) -> str:
        """Gets the sales_tax_jurisdiction_id of this SalesTax.

        A unique ID that identifies the sales tax jurisdiction to which the sales tax rate applies (for example, a state within the United States).  # noqa: E501

        :return: The sales_tax_jurisdiction_id of this SalesTax.
        :rtype: str
        """
        return self._sales_tax_jurisdiction_id

    @sales_tax_jurisdiction_id.setter
    def sales_tax_jurisdiction_id(self, sales_tax_jurisdiction_id: str):
        """Sets the sales_tax_jurisdiction_id of this SalesTax.

        A unique ID that identifies the sales tax jurisdiction to which the sales tax rate applies (for example, a state within the United States).  # noqa: E501

        :param sales_tax_jurisdiction_id: The sales_tax_jurisdiction_id of this SalesTax.
        :type sales_tax_jurisdiction_id: str
        """

        self._sales_tax_jurisdiction_id = sales_tax_jurisdiction_id

    @property
    def sales_tax_percentage(self) -> str:
        """Gets the sales_tax_percentage of this SalesTax.

        The sales tax rate that will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is returned here, such as <code>7.75</code>  # noqa: E501

        :return: The sales_tax_percentage of this SalesTax.
        :rtype: str
        """
        return self._sales_tax_percentage

    @sales_tax_percentage.setter
    def sales_tax_percentage(self, sales_tax_percentage: str):
        """Sets the sales_tax_percentage of this SalesTax.

        The sales tax rate that will be applied to sales price. The <b>shippingAndHandlingTaxed</b> value will indicate whether or not sales tax is also applied to shipping and handling charges<br><br>Although it is a string, a percentage value is returned here, such as <code>7.75</code>  # noqa: E501

        :param sales_tax_percentage: The sales_tax_percentage of this SalesTax.
        :type sales_tax_percentage: str
        """

        self._sales_tax_percentage = sales_tax_percentage

    @property
    def shipping_and_handling_taxed(self) -> bool:
        """Gets the shipping_and_handling_taxed of this SalesTax.

        If returned as <code>true</code>, sales tax is also applied to shipping and handling charges, and not just the total sales price of the order.  # noqa: E501

        :return: The shipping_and_handling_taxed of this SalesTax.
        :rtype: bool
        """
        return self._shipping_and_handling_taxed

    @shipping_and_handling_taxed.setter
    def shipping_and_handling_taxed(self, shipping_and_handling_taxed: bool):
        """Sets the shipping_and_handling_taxed of this SalesTax.

        If returned as <code>true</code>, sales tax is also applied to shipping and handling charges, and not just the total sales price of the order.  # noqa: E501

        :param shipping_and_handling_taxed: The shipping_and_handling_taxed of this SalesTax.
        :type shipping_and_handling_taxed: bool
        """

        self._shipping_and_handling_taxed = shipping_and_handling_taxed
