from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class Merchant(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, name=None):  # noqa: E501
        """Merchant - a model defined in OpenAPI

        :param id: The id of this Merchant.  # noqa: E501
        :type id: str
        :param name: The name of this Merchant.  # noqa: E501
        :type name: str
        """
        self.openapi_types = {
            'id': str,
            'name': str
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name'
        }

        self._id = id
        self._name = name

    @classmethod
    def from_dict(cls, dikt) -> 'Merchant':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Merchant of this Merchant.  # noqa: E501
        :rtype: Merchant
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this Merchant.

        Merchant id  # noqa: E501

        :return: The id of this Merchant.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this Merchant.

        Merchant id  # noqa: E501

        :param id: The id of this Merchant.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501
        if id is not None and len(id) > 256:
            raise ValueError("Invalid value for `id`, length must be less than or equal to `256`")  # noqa: E501
        if id is not None and len(id) < 1:
            raise ValueError("Invalid value for `id`, length must be greater than or equal to `1`")  # noqa: E501

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Merchant.

        Merchant name  # noqa: E501

        :return: The name of this Merchant.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Merchant.

        Merchant name  # noqa: E501

        :param name: The name of this Merchant.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501
        if name is not None and len(name) > 256:
            raise ValueError("Invalid value for `name`, length must be less than or equal to `256`")  # noqa: E501
        if name is not None and len(name) < 1:
            raise ValueError("Invalid value for `name`, length must be greater than or equal to `1`")  # noqa: E501

        self._name = name
