from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_account import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_address import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_agent import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_debtor_account import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_debtor_agent import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_instructed_amount import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
from openapi_server.models.request_pis_domestic_schedule import RequestPisDomesticSchedule
from openapi_server import util

from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_account import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount  # noqa: E501
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_address import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress  # noqa: E501
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_creditor_agent import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent  # noqa: E501
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_debtor_account import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount  # noqa: E501
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_debtor_agent import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent  # noqa: E501
from openapi_server.models.post_payments_domestic_credit_transfers_consents_params_body_payments_instructed_amount import PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount  # noqa: E501
from openapi_server.models.request_pis_domestic_schedule import RequestPisDomesticSchedule  # noqa: E501

class PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, creditor_account=None, creditor_address=None, creditor_agent=None, creditor_name=None, debtor_account=None, debtor_agent=None, end_to_end_identification=None, instructed_amount=None, instruction_identification=None, instruction_priority=None, local_instrument=None, remittance_information_reference=None, remittance_information_unstructured=None, requested_execution_date=None, schedule=None):  # noqa: E501
        """PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments - a model defined in OpenAPI

        :param creditor_account: The creditor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type creditor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
        :param creditor_address: The creditor_address of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type creditor_address: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
        :param creditor_agent: The creditor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type creditor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
        :param creditor_name: The creditor_name of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type creditor_name: str
        :param debtor_account: The debtor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type debtor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
        :param debtor_agent: The debtor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type debtor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
        :param end_to_end_identification: The end_to_end_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type end_to_end_identification: str
        :param instructed_amount: The instructed_amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type instructed_amount: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
        :param instruction_identification: The instruction_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type instruction_identification: str
        :param instruction_priority: The instruction_priority of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type instruction_priority: str
        :param local_instrument: The local_instrument of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type local_instrument: str
        :param remittance_information_reference: The remittance_information_reference of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type remittance_information_reference: str
        :param remittance_information_unstructured: The remittance_information_unstructured of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type remittance_information_unstructured: str
        :param requested_execution_date: The requested_execution_date of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type requested_execution_date: date
        :param schedule: The schedule of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :type schedule: RequestPisDomesticSchedule
        """
        self.openapi_types = {
            'creditor_account': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount,
            'creditor_address': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress,
            'creditor_agent': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent,
            'creditor_name': str,
            'debtor_account': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount,
            'debtor_agent': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent,
            'end_to_end_identification': str,
            'instructed_amount': PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount,
            'instruction_identification': str,
            'instruction_priority': str,
            'local_instrument': str,
            'remittance_information_reference': str,
            'remittance_information_unstructured': str,
            'requested_execution_date': date,
            'schedule': RequestPisDomesticSchedule
        }

        self.attribute_map = {
            'creditor_account': 'creditorAccount',
            'creditor_address': 'creditorAddress',
            'creditor_agent': 'creditorAgent',
            'creditor_name': 'creditorName',
            'debtor_account': 'debtorAccount',
            'debtor_agent': 'debtorAgent',
            'end_to_end_identification': 'endToEndIdentification',
            'instructed_amount': 'instructedAmount',
            'instruction_identification': 'instructionIdentification',
            'instruction_priority': 'instructionPriority',
            'local_instrument': 'localInstrument',
            'remittance_information_reference': 'remittanceInformationReference',
            'remittance_information_unstructured': 'remittanceInformationUnstructured',
            'requested_execution_date': 'requestedExecutionDate',
            'schedule': 'schedule'
        }

        self._creditor_account = creditor_account
        self._creditor_address = creditor_address
        self._creditor_agent = creditor_agent
        self._creditor_name = creditor_name
        self._debtor_account = debtor_account
        self._debtor_agent = debtor_agent
        self._end_to_end_identification = end_to_end_identification
        self._instructed_amount = instructed_amount
        self._instruction_identification = instruction_identification
        self._instruction_priority = instruction_priority
        self._local_instrument = local_instrument
        self._remittance_information_reference = remittance_information_reference
        self._remittance_information_unstructured = remittance_information_unstructured
        self._requested_execution_date = requested_execution_date
        self._schedule = schedule

    @classmethod
    def from_dict(cls, dikt) -> 'PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The postPaymentsDomesticCreditTransfersConsentsParamsBodyPayments of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.  # noqa: E501
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments
        """
        return util.deserialize_model(dikt, cls)

    @property
    def creditor_account(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount:
        """Gets the creditor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
        """
        return self._creditor_account

    @creditor_account.setter
    def creditor_account(self, creditor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount):
        """Sets the creditor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param creditor_account: The creditor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type creditor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAccount
        """
        if creditor_account is None:
            raise ValueError("Invalid value for `creditor_account`, must not be `None`")  # noqa: E501

        self._creditor_account = creditor_account

    @property
    def creditor_address(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress:
        """Gets the creditor_address of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_address of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
        """
        return self._creditor_address

    @creditor_address.setter
    def creditor_address(self, creditor_address: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress):
        """Sets the creditor_address of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param creditor_address: The creditor_address of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type creditor_address: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAddress
        """

        self._creditor_address = creditor_address

    @property
    def creditor_agent(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent:
        """Gets the creditor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The creditor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
        """
        return self._creditor_agent

    @creditor_agent.setter
    def creditor_agent(self, creditor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent):
        """Sets the creditor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param creditor_agent: The creditor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type creditor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsCreditorAgent
        """

        self._creditor_agent = creditor_agent

    @property
    def creditor_name(self) -> str:
        """Gets the creditor_name of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Bank name  # noqa: E501

        :return: The creditor_name of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._creditor_name

    @creditor_name.setter
    def creditor_name(self, creditor_name: str):
        """Sets the creditor_name of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Bank name  # noqa: E501

        :param creditor_name: The creditor_name of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type creditor_name: str
        """
        if creditor_name is None:
            raise ValueError("Invalid value for `creditor_name`, must not be `None`")  # noqa: E501
        if creditor_name is not None and len(creditor_name) > 70:
            raise ValueError("Invalid value for `creditor_name`, length must be less than or equal to `70`")  # noqa: E501
        if creditor_name is not None and len(creditor_name) < 1:
            raise ValueError("Invalid value for `creditor_name`, length must be greater than or equal to `1`")  # noqa: E501

        self._creditor_name = creditor_name

    @property
    def debtor_account(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount:
        """Gets the debtor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The debtor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
        """
        return self._debtor_account

    @debtor_account.setter
    def debtor_account(self, debtor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount):
        """Sets the debtor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param debtor_account: The debtor_account of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type debtor_account: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAccount
        """

        self._debtor_account = debtor_account

    @property
    def debtor_agent(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent:
        """Gets the debtor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The debtor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
        """
        return self._debtor_agent

    @debtor_agent.setter
    def debtor_agent(self, debtor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent):
        """Sets the debtor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param debtor_agent: The debtor_agent of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type debtor_agent: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsDebtorAgent
        """

        self._debtor_agent = debtor_agent

    @property
    def end_to_end_identification(self) -> str:
        """Gets the end_to_end_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Payment end to end identification  # noqa: E501

        :return: The end_to_end_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._end_to_end_identification

    @end_to_end_identification.setter
    def end_to_end_identification(self, end_to_end_identification: str):
        """Sets the end_to_end_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Payment end to end identification  # noqa: E501

        :param end_to_end_identification: The end_to_end_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type end_to_end_identification: str
        """
        if end_to_end_identification is None:
            raise ValueError("Invalid value for `end_to_end_identification`, must not be `None`")  # noqa: E501
        if end_to_end_identification is not None and len(end_to_end_identification) > 18:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be less than or equal to `18`")  # noqa: E501
        if end_to_end_identification is not None and len(end_to_end_identification) < 1:
            raise ValueError("Invalid value for `end_to_end_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._end_to_end_identification = end_to_end_identification

    @property
    def instructed_amount(self) -> PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount:
        """Gets the instructed_amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The instructed_amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
        """
        return self._instructed_amount

    @instructed_amount.setter
    def instructed_amount(self, instructed_amount: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount):
        """Sets the instructed_amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param instructed_amount: The instructed_amount of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type instructed_amount: PostPaymentsDomesticCreditTransfersConsentsParamsBodyPaymentsInstructedAmount
        """
        if instructed_amount is None:
            raise ValueError("Invalid value for `instructed_amount`, must not be `None`")  # noqa: E501

        self._instructed_amount = instructed_amount

    @property
    def instruction_identification(self) -> str:
        """Gets the instruction_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.  # noqa: E501

        :return: The instruction_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._instruction_identification

    @instruction_identification.setter
    def instruction_identification(self, instruction_identification: str):
        """Sets the instruction_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.  # noqa: E501

        :param instruction_identification: The instruction_identification of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type instruction_identification: str
        """
        if instruction_identification is not None and len(instruction_identification) > 256:
            raise ValueError("Invalid value for `instruction_identification`, length must be less than or equal to `256`")  # noqa: E501
        if instruction_identification is not None and len(instruction_identification) < 1:
            raise ValueError("Invalid value for `instruction_identification`, length must be greater than or equal to `1`")  # noqa: E501

        self._instruction_identification = instruction_identification

    @property
    def instruction_priority(self) -> str:
        """Gets the instruction_priority of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Indicator of the urgency or order of importance  # noqa: E501

        :return: The instruction_priority of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._instruction_priority

    @instruction_priority.setter
    def instruction_priority(self, instruction_priority: str):
        """Sets the instruction_priority of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Indicator of the urgency or order of importance  # noqa: E501

        :param instruction_priority: The instruction_priority of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type instruction_priority: str
        """
        allowed_values = ["Normal", "Urgent"]  # noqa: E501
        if instruction_priority not in allowed_values:
            raise ValueError(
                "Invalid value for `instruction_priority` ({0}), must be one of {1}"
                .format(instruction_priority, allowed_values)
            )

        self._instruction_priority = instruction_priority

    @property
    def local_instrument(self) -> str:
        """Gets the local_instrument of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        User community specific instrument.  # noqa: E501

        :return: The local_instrument of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._local_instrument

    @local_instrument.setter
    def local_instrument(self, local_instrument: str):
        """Sets the local_instrument of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        User community specific instrument.  # noqa: E501

        :param local_instrument: The local_instrument of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type local_instrument: str
        """
        allowed_values = ["UK.FasterPayments", "PL.Elixir"]  # noqa: E501
        if local_instrument not in allowed_values:
            raise ValueError(
                "Invalid value for `local_instrument` ({0}), must be one of {1}"
                .format(local_instrument, allowed_values)
            )

        self._local_instrument = local_instrument

    @property
    def remittance_information_reference(self) -> str:
        """Gets the remittance_information_reference of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)  # noqa: E501

        :return: The remittance_information_reference of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._remittance_information_reference

    @remittance_information_reference.setter
    def remittance_information_reference(self, remittance_information_reference: str):
        """Sets the remittance_information_reference of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)  # noqa: E501

        :param remittance_information_reference: The remittance_information_reference of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type remittance_information_reference: str
        """
        if remittance_information_reference is not None and len(remittance_information_reference) > 256:
            raise ValueError("Invalid value for `remittance_information_reference`, length must be less than or equal to `256`")  # noqa: E501
        if remittance_information_reference is not None and len(remittance_information_reference) < 1:
            raise ValueError("Invalid value for `remittance_information_reference`, length must be greater than or equal to `1`")  # noqa: E501

        self._remittance_information_reference = remittance_information_reference

    @property
    def remittance_information_unstructured(self) -> str:
        """Gets the remittance_information_unstructured of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Description of the payment  # noqa: E501

        :return: The remittance_information_unstructured of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: str
        """
        return self._remittance_information_unstructured

    @remittance_information_unstructured.setter
    def remittance_information_unstructured(self, remittance_information_unstructured: str):
        """Sets the remittance_information_unstructured of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Description of the payment  # noqa: E501

        :param remittance_information_unstructured: The remittance_information_unstructured of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type remittance_information_unstructured: str
        """
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) > 140:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be less than or equal to `140`")  # noqa: E501
        if remittance_information_unstructured is not None and len(remittance_information_unstructured) < 1:
            raise ValueError("Invalid value for `remittance_information_unstructured`, length must be greater than or equal to `1`")  # noqa: E501

        self._remittance_information_unstructured = remittance_information_unstructured

    @property
    def requested_execution_date(self) -> date:
        """Gets the requested_execution_date of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Scheduled Payment Date  # noqa: E501

        :return: The requested_execution_date of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: date
        """
        return self._requested_execution_date

    @requested_execution_date.setter
    def requested_execution_date(self, requested_execution_date: date):
        """Sets the requested_execution_date of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.

        Scheduled Payment Date  # noqa: E501

        :param requested_execution_date: The requested_execution_date of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type requested_execution_date: date
        """

        self._requested_execution_date = requested_execution_date

    @property
    def schedule(self) -> RequestPisDomesticSchedule:
        """Gets the schedule of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :return: The schedule of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :rtype: RequestPisDomesticSchedule
        """
        return self._schedule

    @schedule.setter
    def schedule(self, schedule: RequestPisDomesticSchedule):
        """Sets the schedule of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.


        :param schedule: The schedule of this PostPaymentsDomesticCreditTransfersConsentsParamsBodyPayments.
        :type schedule: RequestPisDomesticSchedule
        """

        self._schedule = schedule
