from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, action_used=None, additional_results=None, assistant_hint=None, error=None, id=None, input_params=None, result=None, result_field_labels=None, review_url=None, status='success'):  # noqa: E501
        """ExecuteResponse - a model defined in OpenAPI

        :param action_used: The action_used of this ExecuteResponse.  # noqa: E501
        :type action_used: str
        :param additional_results: The additional_results of this ExecuteResponse.  # noqa: E501
        :type additional_results: List[object]
        :param assistant_hint: The assistant_hint of this ExecuteResponse.  # noqa: E501
        :type assistant_hint: str
        :param error: The error of this ExecuteResponse.  # noqa: E501
        :type error: str
        :param id: The id of this ExecuteResponse.  # noqa: E501
        :type id: str
        :param input_params: The input_params of this ExecuteResponse.  # noqa: E501
        :type input_params: object
        :param result: The result of this ExecuteResponse.  # noqa: E501
        :type result: object
        :param result_field_labels: The result_field_labels of this ExecuteResponse.  # noqa: E501
        :type result_field_labels: object
        :param review_url: The review_url of this ExecuteResponse.  # noqa: E501
        :type review_url: str
        :param status: The status of this ExecuteResponse.  # noqa: E501
        :type status: str
        """
        self.openapi_types = {
            'action_used': str,
            'additional_results': List[object],
            'assistant_hint': str,
            'error': str,
            'id': str,
            'input_params': object,
            'result': object,
            'result_field_labels': object,
            'review_url': str,
            'status': str
        }

        self.attribute_map = {
            'action_used': 'action_used',
            'additional_results': 'additional_results',
            'assistant_hint': 'assistant_hint',
            'error': 'error',
            'id': 'id',
            'input_params': 'input_params',
            'result': 'result',
            'result_field_labels': 'result_field_labels',
            'review_url': 'review_url',
            'status': 'status'
        }

        self._action_used = action_used
        self._additional_results = additional_results
        self._assistant_hint = assistant_hint
        self._error = error
        self._id = id
        self._input_params = input_params
        self._result = result
        self._result_field_labels = result_field_labels
        self._review_url = review_url
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'ExecuteResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecuteResponse of this ExecuteResponse.  # noqa: E501
        :rtype: ExecuteResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def action_used(self) -> str:
        """Gets the action_used of this ExecuteResponse.

        The name of the action that was executed.  # noqa: E501

        :return: The action_used of this ExecuteResponse.
        :rtype: str
        """
        return self._action_used

    @action_used.setter
    def action_used(self, action_used: str):
        """Sets the action_used of this ExecuteResponse.

        The name of the action that was executed.  # noqa: E501

        :param action_used: The action_used of this ExecuteResponse.
        :type action_used: str
        """
        if action_used is None:
            raise ValueError("Invalid value for `action_used`, must not be `None`")  # noqa: E501

        self._action_used = action_used

    @property
    def additional_results(self) -> List[object]:
        """Gets the additional_results of this ExecuteResponse.

        The rest of the full results. Always returns an array of objects  # noqa: E501

        :return: The additional_results of this ExecuteResponse.
        :rtype: List[object]
        """
        return self._additional_results

    @additional_results.setter
    def additional_results(self, additional_results: List[object]):
        """Sets the additional_results of this ExecuteResponse.

        The rest of the full results. Always returns an array of objects  # noqa: E501

        :param additional_results: The additional_results of this ExecuteResponse.
        :type additional_results: List[object]
        """
        if additional_results is None:
            raise ValueError("Invalid value for `additional_results`, must not be `None`")  # noqa: E501

        self._additional_results = additional_results

    @property
    def assistant_hint(self) -> str:
        """Gets the assistant_hint of this ExecuteResponse.

        A hint for the assistant on what to do next.  # noqa: E501

        :return: The assistant_hint of this ExecuteResponse.
        :rtype: str
        """
        return self._assistant_hint

    @assistant_hint.setter
    def assistant_hint(self, assistant_hint: str):
        """Sets the assistant_hint of this ExecuteResponse.

        A hint for the assistant on what to do next.  # noqa: E501

        :param assistant_hint: The assistant_hint of this ExecuteResponse.
        :type assistant_hint: str
        """

        self._assistant_hint = assistant_hint

    @property
    def error(self) -> str:
        """Gets the error of this ExecuteResponse.

        The error message if the execution failed.  # noqa: E501

        :return: The error of this ExecuteResponse.
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error: str):
        """Sets the error of this ExecuteResponse.

        The error message if the execution failed.  # noqa: E501

        :param error: The error of this ExecuteResponse.
        :type error: str
        """

        self._error = error

    @property
    def id(self) -> str:
        """Gets the id of this ExecuteResponse.

        The id of the execution log.  # noqa: E501

        :return: The id of this ExecuteResponse.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ExecuteResponse.

        The id of the execution log.  # noqa: E501

        :param id: The id of this ExecuteResponse.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def input_params(self) -> object:
        """Gets the input_params of this ExecuteResponse.

        The params we used / will use to execute the action.  # noqa: E501

        :return: The input_params of this ExecuteResponse.
        :rtype: object
        """
        return self._input_params

    @input_params.setter
    def input_params(self, input_params: object):
        """Sets the input_params of this ExecuteResponse.

        The params we used / will use to execute the action.  # noqa: E501

        :param input_params: The input_params of this ExecuteResponse.
        :type input_params: object
        """
        if input_params is None:
            raise ValueError("Invalid value for `input_params`, must not be `None`")  # noqa: E501

        self._input_params = input_params

    @property
    def result(self) -> object:
        """Gets the result of this ExecuteResponse.

        A trimmed down result of the first item of the full results. Ideal for humans and language models!  # noqa: E501

        :return: The result of this ExecuteResponse.
        :rtype: object
        """
        return self._result

    @result.setter
    def result(self, result: object):
        """Sets the result of this ExecuteResponse.

        A trimmed down result of the first item of the full results. Ideal for humans and language models!  # noqa: E501

        :param result: The result of this ExecuteResponse.
        :type result: object
        """

        self._result = result

    @property
    def result_field_labels(self) -> object:
        """Gets the result_field_labels of this ExecuteResponse.

        Human readable labels for some of the keys in the result.  # noqa: E501

        :return: The result_field_labels of this ExecuteResponse.
        :rtype: object
        """
        return self._result_field_labels

    @result_field_labels.setter
    def result_field_labels(self, result_field_labels: object):
        """Sets the result_field_labels of this ExecuteResponse.

        Human readable labels for some of the keys in the result.  # noqa: E501

        :param result_field_labels: The result_field_labels of this ExecuteResponse.
        :type result_field_labels: object
        """

        self._result_field_labels = result_field_labels

    @property
    def review_url(self) -> str:
        """Gets the review_url of this ExecuteResponse.

        The URL to run the action or review the AI choices the AI made for input_params given instructions.  # noqa: E501

        :return: The review_url of this ExecuteResponse.
        :rtype: str
        """
        return self._review_url

    @review_url.setter
    def review_url(self, review_url: str):
        """Sets the review_url of this ExecuteResponse.

        The URL to run the action or review the AI choices the AI made for input_params given instructions.  # noqa: E501

        :param review_url: The review_url of this ExecuteResponse.
        :type review_url: str
        """
        if review_url is None:
            raise ValueError("Invalid value for `review_url`, must not be `None`")  # noqa: E501

        self._review_url = review_url

    @property
    def status(self) -> str:
        """Gets the status of this ExecuteResponse.

        The status of the execution.  # noqa: E501

        :return: The status of this ExecuteResponse.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """Sets the status of this ExecuteResponse.

        The status of the execution.  # noqa: E501

        :param status: The status of this ExecuteResponse.
        :type status: str
        """
        allowed_values = ["success", "error", "empty", "preview"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status
