from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ExecuteRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, instructions=None, preview_only=False):  # noqa: E501
        """ExecuteRequest - a model defined in OpenAPI

        :param instructions: The instructions of this ExecuteRequest.  # noqa: E501
        :type instructions: str
        :param preview_only: The preview_only of this ExecuteRequest.  # noqa: E501
        :type preview_only: bool
        """
        self.openapi_types = {
            'instructions': str,
            'preview_only': bool
        }

        self.attribute_map = {
            'instructions': 'instructions',
            'preview_only': 'preview_only'
        }

        self._instructions = instructions
        self._preview_only = preview_only

    @classmethod
    def from_dict(cls, dikt) -> 'ExecuteRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ExecuteRequest of this ExecuteRequest.  # noqa: E501
        :rtype: ExecuteRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def instructions(self) -> str:
        """Gets the instructions of this ExecuteRequest.

        Plain english instructions. Provide as much detail as possible, even if other fields are present.  # noqa: E501

        :return: The instructions of this ExecuteRequest.
        :rtype: str
        """
        return self._instructions

    @instructions.setter
    def instructions(self, instructions: str):
        """Sets the instructions of this ExecuteRequest.

        Plain english instructions. Provide as much detail as possible, even if other fields are present.  # noqa: E501

        :param instructions: The instructions of this ExecuteRequest.
        :type instructions: str
        """
        if instructions is None:
            raise ValueError("Invalid value for `instructions`, must not be `None`")  # noqa: E501

        self._instructions = instructions

    @property
    def preview_only(self) -> bool:
        """Gets the preview_only of this ExecuteRequest.

        If true, we will not execute the action, but will return the params of the preview.  # noqa: E501

        :return: The preview_only of this ExecuteRequest.
        :rtype: bool
        """
        return self._preview_only

    @preview_only.setter
    def preview_only(self, preview_only: bool):
        """Sets the preview_only of this ExecuteRequest.

        If true, we will not execute the action, but will return the params of the preview.  # noqa: E501

        :param preview_only: The preview_only of this ExecuteRequest.
        :type preview_only: bool
        """

        self._preview_only = preview_only
