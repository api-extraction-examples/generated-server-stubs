from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.minify_options import MinifyOptions
from openapi_server.models.site_processing_settings_html import SiteProcessingSettingsHtml
from openapi_server.models.site_processing_settings_images import SiteProcessingSettingsImages
from openapi_server import util

from openapi_server.models.minify_options import MinifyOptions  # noqa: E501
from openapi_server.models.site_processing_settings_html import SiteProcessingSettingsHtml  # noqa: E501
from openapi_server.models.site_processing_settings_images import SiteProcessingSettingsImages  # noqa: E501

class SiteProcessingSettings(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, css=None, html=None, images=None, js=None, skip=None):  # noqa: E501
        """SiteProcessingSettings - a model defined in OpenAPI

        :param css: The css of this SiteProcessingSettings.  # noqa: E501
        :type css: MinifyOptions
        :param html: The html of this SiteProcessingSettings.  # noqa: E501
        :type html: SiteProcessingSettingsHtml
        :param images: The images of this SiteProcessingSettings.  # noqa: E501
        :type images: SiteProcessingSettingsImages
        :param js: The js of this SiteProcessingSettings.  # noqa: E501
        :type js: MinifyOptions
        :param skip: The skip of this SiteProcessingSettings.  # noqa: E501
        :type skip: bool
        """
        self.openapi_types = {
            'css': MinifyOptions,
            'html': SiteProcessingSettingsHtml,
            'images': SiteProcessingSettingsImages,
            'js': MinifyOptions,
            'skip': bool
        }

        self.attribute_map = {
            'css': 'css',
            'html': 'html',
            'images': 'images',
            'js': 'js',
            'skip': 'skip'
        }

        self._css = css
        self._html = html
        self._images = images
        self._js = js
        self._skip = skip

    @classmethod
    def from_dict(cls, dikt) -> 'SiteProcessingSettings':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The site_processing_settings of this SiteProcessingSettings.  # noqa: E501
        :rtype: SiteProcessingSettings
        """
        return util.deserialize_model(dikt, cls)

    @property
    def css(self) -> MinifyOptions:
        """Gets the css of this SiteProcessingSettings.


        :return: The css of this SiteProcessingSettings.
        :rtype: MinifyOptions
        """
        return self._css

    @css.setter
    def css(self, css: MinifyOptions):
        """Sets the css of this SiteProcessingSettings.


        :param css: The css of this SiteProcessingSettings.
        :type css: MinifyOptions
        """

        self._css = css

    @property
    def html(self) -> SiteProcessingSettingsHtml:
        """Gets the html of this SiteProcessingSettings.


        :return: The html of this SiteProcessingSettings.
        :rtype: SiteProcessingSettingsHtml
        """
        return self._html

    @html.setter
    def html(self, html: SiteProcessingSettingsHtml):
        """Sets the html of this SiteProcessingSettings.


        :param html: The html of this SiteProcessingSettings.
        :type html: SiteProcessingSettingsHtml
        """

        self._html = html

    @property
    def images(self) -> SiteProcessingSettingsImages:
        """Gets the images of this SiteProcessingSettings.


        :return: The images of this SiteProcessingSettings.
        :rtype: SiteProcessingSettingsImages
        """
        return self._images

    @images.setter
    def images(self, images: SiteProcessingSettingsImages):
        """Sets the images of this SiteProcessingSettings.


        :param images: The images of this SiteProcessingSettings.
        :type images: SiteProcessingSettingsImages
        """

        self._images = images

    @property
    def js(self) -> MinifyOptions:
        """Gets the js of this SiteProcessingSettings.


        :return: The js of this SiteProcessingSettings.
        :rtype: MinifyOptions
        """
        return self._js

    @js.setter
    def js(self, js: MinifyOptions):
        """Sets the js of this SiteProcessingSettings.


        :param js: The js of this SiteProcessingSettings.
        :type js: MinifyOptions
        """

        self._js = js

    @property
    def skip(self) -> bool:
        """Gets the skip of this SiteProcessingSettings.


        :return: The skip of this SiteProcessingSettings.
        :rtype: bool
        """
        return self._skip

    @skip.setter
    def skip(self, skip: bool):
        """Sets the skip of this SiteProcessingSettings.


        :param skip: The skip of this SiteProcessingSettings.
        :type skip: bool
        """

        self._skip = skip
