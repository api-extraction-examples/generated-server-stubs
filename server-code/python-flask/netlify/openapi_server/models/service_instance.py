from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class ServiceInstance(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auth_url=None, config=None, created_at=None, env=None, external_attributes=None, id=None, service_name=None, service_path=None, service_slug=None, snippets=None, updated_at=None, url=None):  # noqa: E501
        """ServiceInstance - a model defined in OpenAPI

        :param auth_url: The auth_url of this ServiceInstance.  # noqa: E501
        :type auth_url: str
        :param config: The config of this ServiceInstance.  # noqa: E501
        :type config: object
        :param created_at: The created_at of this ServiceInstance.  # noqa: E501
        :type created_at: str
        :param env: The env of this ServiceInstance.  # noqa: E501
        :type env: object
        :param external_attributes: The external_attributes of this ServiceInstance.  # noqa: E501
        :type external_attributes: object
        :param id: The id of this ServiceInstance.  # noqa: E501
        :type id: str
        :param service_name: The service_name of this ServiceInstance.  # noqa: E501
        :type service_name: str
        :param service_path: The service_path of this ServiceInstance.  # noqa: E501
        :type service_path: str
        :param service_slug: The service_slug of this ServiceInstance.  # noqa: E501
        :type service_slug: str
        :param snippets: The snippets of this ServiceInstance.  # noqa: E501
        :type snippets: List[object]
        :param updated_at: The updated_at of this ServiceInstance.  # noqa: E501
        :type updated_at: str
        :param url: The url of this ServiceInstance.  # noqa: E501
        :type url: str
        """
        self.openapi_types = {
            'auth_url': str,
            'config': object,
            'created_at': str,
            'env': object,
            'external_attributes': object,
            'id': str,
            'service_name': str,
            'service_path': str,
            'service_slug': str,
            'snippets': List[object],
            'updated_at': str,
            'url': str
        }

        self.attribute_map = {
            'auth_url': 'auth_url',
            'config': 'config',
            'created_at': 'created_at',
            'env': 'env',
            'external_attributes': 'external_attributes',
            'id': 'id',
            'service_name': 'service_name',
            'service_path': 'service_path',
            'service_slug': 'service_slug',
            'snippets': 'snippets',
            'updated_at': 'updated_at',
            'url': 'url'
        }

        self._auth_url = auth_url
        self._config = config
        self._created_at = created_at
        self._env = env
        self._external_attributes = external_attributes
        self._id = id
        self._service_name = service_name
        self._service_path = service_path
        self._service_slug = service_slug
        self._snippets = snippets
        self._updated_at = updated_at
        self._url = url

    @classmethod
    def from_dict(cls, dikt) -> 'ServiceInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The serviceInstance of this ServiceInstance.  # noqa: E501
        :rtype: ServiceInstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auth_url(self) -> str:
        """Gets the auth_url of this ServiceInstance.


        :return: The auth_url of this ServiceInstance.
        :rtype: str
        """
        return self._auth_url

    @auth_url.setter
    def auth_url(self, auth_url: str):
        """Sets the auth_url of this ServiceInstance.


        :param auth_url: The auth_url of this ServiceInstance.
        :type auth_url: str
        """

        self._auth_url = auth_url

    @property
    def config(self) -> object:
        """Gets the config of this ServiceInstance.


        :return: The config of this ServiceInstance.
        :rtype: object
        """
        return self._config

    @config.setter
    def config(self, config: object):
        """Sets the config of this ServiceInstance.


        :param config: The config of this ServiceInstance.
        :type config: object
        """

        self._config = config

    @property
    def created_at(self) -> str:
        """Gets the created_at of this ServiceInstance.


        :return: The created_at of this ServiceInstance.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this ServiceInstance.


        :param created_at: The created_at of this ServiceInstance.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def env(self) -> object:
        """Gets the env of this ServiceInstance.


        :return: The env of this ServiceInstance.
        :rtype: object
        """
        return self._env

    @env.setter
    def env(self, env: object):
        """Sets the env of this ServiceInstance.


        :param env: The env of this ServiceInstance.
        :type env: object
        """

        self._env = env

    @property
    def external_attributes(self) -> object:
        """Gets the external_attributes of this ServiceInstance.


        :return: The external_attributes of this ServiceInstance.
        :rtype: object
        """
        return self._external_attributes

    @external_attributes.setter
    def external_attributes(self, external_attributes: object):
        """Sets the external_attributes of this ServiceInstance.


        :param external_attributes: The external_attributes of this ServiceInstance.
        :type external_attributes: object
        """

        self._external_attributes = external_attributes

    @property
    def id(self) -> str:
        """Gets the id of this ServiceInstance.


        :return: The id of this ServiceInstance.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this ServiceInstance.


        :param id: The id of this ServiceInstance.
        :type id: str
        """

        self._id = id

    @property
    def service_name(self) -> str:
        """Gets the service_name of this ServiceInstance.


        :return: The service_name of this ServiceInstance.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name: str):
        """Sets the service_name of this ServiceInstance.


        :param service_name: The service_name of this ServiceInstance.
        :type service_name: str
        """

        self._service_name = service_name

    @property
    def service_path(self) -> str:
        """Gets the service_path of this ServiceInstance.


        :return: The service_path of this ServiceInstance.
        :rtype: str
        """
        return self._service_path

    @service_path.setter
    def service_path(self, service_path: str):
        """Sets the service_path of this ServiceInstance.


        :param service_path: The service_path of this ServiceInstance.
        :type service_path: str
        """

        self._service_path = service_path

    @property
    def service_slug(self) -> str:
        """Gets the service_slug of this ServiceInstance.


        :return: The service_slug of this ServiceInstance.
        :rtype: str
        """
        return self._service_slug

    @service_slug.setter
    def service_slug(self, service_slug: str):
        """Sets the service_slug of this ServiceInstance.


        :param service_slug: The service_slug of this ServiceInstance.
        :type service_slug: str
        """

        self._service_slug = service_slug

    @property
    def snippets(self) -> List[object]:
        """Gets the snippets of this ServiceInstance.


        :return: The snippets of this ServiceInstance.
        :rtype: List[object]
        """
        return self._snippets

    @snippets.setter
    def snippets(self, snippets: List[object]):
        """Sets the snippets of this ServiceInstance.


        :param snippets: The snippets of this ServiceInstance.
        :type snippets: List[object]
        """

        self._snippets = snippets

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this ServiceInstance.


        :return: The updated_at of this ServiceInstance.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this ServiceInstance.


        :param updated_at: The updated_at of this ServiceInstance.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def url(self) -> str:
        """Gets the url of this ServiceInstance.


        :return: The url of this ServiceInstance.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url: str):
        """Sets the url of this ServiceInstance.


        :param url: The url of this ServiceInstance.
        :type url: str
        """

        self._url = url
