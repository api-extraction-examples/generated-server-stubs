from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.dns_record import DnsRecord
from openapi_server import util

from openapi_server.models.dns_record import DnsRecord  # noqa: E501

class DnsZone(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, account_id=None, account_name=None, account_slug=None, created_at=None, dedicated=None, dns_servers=None, domain=None, errors=None, id=None, ipv6_enabled=None, name=None, records=None, site_id=None, supported_record_types=None, updated_at=None, user_id=None):  # noqa: E501
        """DnsZone - a model defined in OpenAPI

        :param account_id: The account_id of this DnsZone.  # noqa: E501
        :type account_id: str
        :param account_name: The account_name of this DnsZone.  # noqa: E501
        :type account_name: str
        :param account_slug: The account_slug of this DnsZone.  # noqa: E501
        :type account_slug: str
        :param created_at: The created_at of this DnsZone.  # noqa: E501
        :type created_at: str
        :param dedicated: The dedicated of this DnsZone.  # noqa: E501
        :type dedicated: bool
        :param dns_servers: The dns_servers of this DnsZone.  # noqa: E501
        :type dns_servers: List[str]
        :param domain: The domain of this DnsZone.  # noqa: E501
        :type domain: str
        :param errors: The errors of this DnsZone.  # noqa: E501
        :type errors: List[str]
        :param id: The id of this DnsZone.  # noqa: E501
        :type id: str
        :param ipv6_enabled: The ipv6_enabled of this DnsZone.  # noqa: E501
        :type ipv6_enabled: bool
        :param name: The name of this DnsZone.  # noqa: E501
        :type name: str
        :param records: The records of this DnsZone.  # noqa: E501
        :type records: List[DnsRecord]
        :param site_id: The site_id of this DnsZone.  # noqa: E501
        :type site_id: str
        :param supported_record_types: The supported_record_types of this DnsZone.  # noqa: E501
        :type supported_record_types: List[str]
        :param updated_at: The updated_at of this DnsZone.  # noqa: E501
        :type updated_at: str
        :param user_id: The user_id of this DnsZone.  # noqa: E501
        :type user_id: str
        """
        self.openapi_types = {
            'account_id': str,
            'account_name': str,
            'account_slug': str,
            'created_at': str,
            'dedicated': bool,
            'dns_servers': List[str],
            'domain': str,
            'errors': List[str],
            'id': str,
            'ipv6_enabled': bool,
            'name': str,
            'records': List[DnsRecord],
            'site_id': str,
            'supported_record_types': List[str],
            'updated_at': str,
            'user_id': str
        }

        self.attribute_map = {
            'account_id': 'account_id',
            'account_name': 'account_name',
            'account_slug': 'account_slug',
            'created_at': 'created_at',
            'dedicated': 'dedicated',
            'dns_servers': 'dns_servers',
            'domain': 'domain',
            'errors': 'errors',
            'id': 'id',
            'ipv6_enabled': 'ipv6_enabled',
            'name': 'name',
            'records': 'records',
            'site_id': 'site_id',
            'supported_record_types': 'supported_record_types',
            'updated_at': 'updated_at',
            'user_id': 'user_id'
        }

        self._account_id = account_id
        self._account_name = account_name
        self._account_slug = account_slug
        self._created_at = created_at
        self._dedicated = dedicated
        self._dns_servers = dns_servers
        self._domain = domain
        self._errors = errors
        self._id = id
        self._ipv6_enabled = ipv6_enabled
        self._name = name
        self._records = records
        self._site_id = site_id
        self._supported_record_types = supported_record_types
        self._updated_at = updated_at
        self._user_id = user_id

    @classmethod
    def from_dict(cls, dikt) -> 'DnsZone':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The dnsZone of this DnsZone.  # noqa: E501
        :rtype: DnsZone
        """
        return util.deserialize_model(dikt, cls)

    @property
    def account_id(self) -> str:
        """Gets the account_id of this DnsZone.


        :return: The account_id of this DnsZone.
        :rtype: str
        """
        return self._account_id

    @account_id.setter
    def account_id(self, account_id: str):
        """Sets the account_id of this DnsZone.


        :param account_id: The account_id of this DnsZone.
        :type account_id: str
        """

        self._account_id = account_id

    @property
    def account_name(self) -> str:
        """Gets the account_name of this DnsZone.


        :return: The account_name of this DnsZone.
        :rtype: str
        """
        return self._account_name

    @account_name.setter
    def account_name(self, account_name: str):
        """Sets the account_name of this DnsZone.


        :param account_name: The account_name of this DnsZone.
        :type account_name: str
        """

        self._account_name = account_name

    @property
    def account_slug(self) -> str:
        """Gets the account_slug of this DnsZone.


        :return: The account_slug of this DnsZone.
        :rtype: str
        """
        return self._account_slug

    @account_slug.setter
    def account_slug(self, account_slug: str):
        """Sets the account_slug of this DnsZone.


        :param account_slug: The account_slug of this DnsZone.
        :type account_slug: str
        """

        self._account_slug = account_slug

    @property
    def created_at(self) -> str:
        """Gets the created_at of this DnsZone.


        :return: The created_at of this DnsZone.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this DnsZone.


        :param created_at: The created_at of this DnsZone.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def dedicated(self) -> bool:
        """Gets the dedicated of this DnsZone.


        :return: The dedicated of this DnsZone.
        :rtype: bool
        """
        return self._dedicated

    @dedicated.setter
    def dedicated(self, dedicated: bool):
        """Sets the dedicated of this DnsZone.


        :param dedicated: The dedicated of this DnsZone.
        :type dedicated: bool
        """

        self._dedicated = dedicated

    @property
    def dns_servers(self) -> List[str]:
        """Gets the dns_servers of this DnsZone.


        :return: The dns_servers of this DnsZone.
        :rtype: List[str]
        """
        return self._dns_servers

    @dns_servers.setter
    def dns_servers(self, dns_servers: List[str]):
        """Sets the dns_servers of this DnsZone.


        :param dns_servers: The dns_servers of this DnsZone.
        :type dns_servers: List[str]
        """

        self._dns_servers = dns_servers

    @property
    def domain(self) -> str:
        """Gets the domain of this DnsZone.


        :return: The domain of this DnsZone.
        :rtype: str
        """
        return self._domain

    @domain.setter
    def domain(self, domain: str):
        """Sets the domain of this DnsZone.


        :param domain: The domain of this DnsZone.
        :type domain: str
        """

        self._domain = domain

    @property
    def errors(self) -> List[str]:
        """Gets the errors of this DnsZone.


        :return: The errors of this DnsZone.
        :rtype: List[str]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[str]):
        """Sets the errors of this DnsZone.


        :param errors: The errors of this DnsZone.
        :type errors: List[str]
        """

        self._errors = errors

    @property
    def id(self) -> str:
        """Gets the id of this DnsZone.


        :return: The id of this DnsZone.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this DnsZone.


        :param id: The id of this DnsZone.
        :type id: str
        """

        self._id = id

    @property
    def ipv6_enabled(self) -> bool:
        """Gets the ipv6_enabled of this DnsZone.


        :return: The ipv6_enabled of this DnsZone.
        :rtype: bool
        """
        return self._ipv6_enabled

    @ipv6_enabled.setter
    def ipv6_enabled(self, ipv6_enabled: bool):
        """Sets the ipv6_enabled of this DnsZone.


        :param ipv6_enabled: The ipv6_enabled of this DnsZone.
        :type ipv6_enabled: bool
        """

        self._ipv6_enabled = ipv6_enabled

    @property
    def name(self) -> str:
        """Gets the name of this DnsZone.


        :return: The name of this DnsZone.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DnsZone.


        :param name: The name of this DnsZone.
        :type name: str
        """

        self._name = name

    @property
    def records(self) -> List[DnsRecord]:
        """Gets the records of this DnsZone.


        :return: The records of this DnsZone.
        :rtype: List[DnsRecord]
        """
        return self._records

    @records.setter
    def records(self, records: List[DnsRecord]):
        """Sets the records of this DnsZone.


        :param records: The records of this DnsZone.
        :type records: List[DnsRecord]
        """

        self._records = records

    @property
    def site_id(self) -> str:
        """Gets the site_id of this DnsZone.


        :return: The site_id of this DnsZone.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: str):
        """Sets the site_id of this DnsZone.


        :param site_id: The site_id of this DnsZone.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def supported_record_types(self) -> List[str]:
        """Gets the supported_record_types of this DnsZone.


        :return: The supported_record_types of this DnsZone.
        :rtype: List[str]
        """
        return self._supported_record_types

    @supported_record_types.setter
    def supported_record_types(self, supported_record_types: List[str]):
        """Sets the supported_record_types of this DnsZone.


        :param supported_record_types: The supported_record_types of this DnsZone.
        :type supported_record_types: List[str]
        """

        self._supported_record_types = supported_record_types

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this DnsZone.


        :return: The updated_at of this DnsZone.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this DnsZone.


        :param updated_at: The updated_at of this DnsZone.
        :type updated_at: str
        """

        self._updated_at = updated_at

    @property
    def user_id(self) -> str:
        """Gets the user_id of this DnsZone.


        :return: The user_id of this DnsZone.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this DnsZone.


        :param user_id: The user_id of this DnsZone.
        :type user_id: str
        """

        self._user_id = user_id
