from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class File(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, id=None, mime_type=None, path=None, sha=None, size=None):  # noqa: E501
        """File - a model defined in OpenAPI

        :param id: The id of this File.  # noqa: E501
        :type id: str
        :param mime_type: The mime_type of this File.  # noqa: E501
        :type mime_type: str
        :param path: The path of this File.  # noqa: E501
        :type path: str
        :param sha: The sha of this File.  # noqa: E501
        :type sha: str
        :param size: The size of this File.  # noqa: E501
        :type size: int
        """
        self.openapi_types = {
            'id': str,
            'mime_type': str,
            'path': str,
            'sha': str,
            'size': int
        }

        self.attribute_map = {
            'id': 'id',
            'mime_type': 'mime_type',
            'path': 'path',
            'sha': 'sha',
            'size': 'size'
        }

        self._id = id
        self._mime_type = mime_type
        self._path = path
        self._sha = sha
        self._size = size

    @classmethod
    def from_dict(cls, dikt) -> 'File':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The file of this File.  # noqa: E501
        :rtype: File
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> str:
        """Gets the id of this File.


        :return: The id of this File.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this File.


        :param id: The id of this File.
        :type id: str
        """

        self._id = id

    @property
    def mime_type(self) -> str:
        """Gets the mime_type of this File.


        :return: The mime_type of this File.
        :rtype: str
        """
        return self._mime_type

    @mime_type.setter
    def mime_type(self, mime_type: str):
        """Sets the mime_type of this File.


        :param mime_type: The mime_type of this File.
        :type mime_type: str
        """

        self._mime_type = mime_type

    @property
    def path(self) -> str:
        """Gets the path of this File.


        :return: The path of this File.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this File.


        :param path: The path of this File.
        :type path: str
        """

        self._path = path

    @property
    def sha(self) -> str:
        """Gets the sha of this File.


        :return: The sha of this File.
        :rtype: str
        """
        return self._sha

    @sha.setter
    def sha(self, sha: str):
        """Sets the sha of this File.


        :param sha: The sha of this File.
        :type sha: str
        """

        self._sha = sha

    @property
    def size(self) -> int:
        """Gets the size of this File.


        :return: The size of this File.
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size: int):
        """Sets the size of this File.


        :param size: The size of this File.
        :type size: int
        """

        self._size = size
