from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SetEnvVarValueRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, context=None, value=None):  # noqa: E501
        """SetEnvVarValueRequest - a model defined in OpenAPI

        :param context: The context of this SetEnvVarValueRequest.  # noqa: E501
        :type context: str
        :param value: The value of this SetEnvVarValueRequest.  # noqa: E501
        :type value: str
        """
        self.openapi_types = {
            'context': str,
            'value': str
        }

        self.attribute_map = {
            'context': 'context',
            'value': 'value'
        }

        self._context = context
        self._value = value

    @classmethod
    def from_dict(cls, dikt) -> 'SetEnvVarValueRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The setEnvVarValue_request of this SetEnvVarValueRequest.  # noqa: E501
        :rtype: SetEnvVarValueRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def context(self) -> str:
        """Gets the context of this SetEnvVarValueRequest.

        The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.  # noqa: E501

        :return: The context of this SetEnvVarValueRequest.
        :rtype: str
        """
        return self._context

    @context.setter
    def context(self, context: str):
        """Sets the context of this SetEnvVarValueRequest.

        The deploy context in which this value will be used. `dev` refers to local development when running `netlify dev`.  # noqa: E501

        :param context: The context of this SetEnvVarValueRequest.
        :type context: str
        """
        allowed_values = ["dev", "branch-deploy", "deploy-preview", "production"]  # noqa: E501
        if context not in allowed_values:
            raise ValueError(
                "Invalid value for `context` ({0}), must be one of {1}"
                .format(context, allowed_values)
            )

        self._context = context

    @property
    def value(self) -> str:
        """Gets the value of this SetEnvVarValueRequest.

        The environment variable's unencrypted value  # noqa: E501

        :return: The value of this SetEnvVarValueRequest.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value: str):
        """Sets the value of this SetEnvVarValueRequest.

        The environment variable's unencrypted value  # noqa: E501

        :param value: The value of this SetEnvVarValueRequest.
        :type value: str
        """

        self._value = value
