from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class SplitTest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, active=None, branches=None, created_at=None, id=None, name=None, path=None, site_id=None, unpublished_at=None, updated_at=None):  # noqa: E501
        """SplitTest - a model defined in OpenAPI

        :param active: The active of this SplitTest.  # noqa: E501
        :type active: bool
        :param branches: The branches of this SplitTest.  # noqa: E501
        :type branches: List[object]
        :param created_at: The created_at of this SplitTest.  # noqa: E501
        :type created_at: str
        :param id: The id of this SplitTest.  # noqa: E501
        :type id: str
        :param name: The name of this SplitTest.  # noqa: E501
        :type name: str
        :param path: The path of this SplitTest.  # noqa: E501
        :type path: str
        :param site_id: The site_id of this SplitTest.  # noqa: E501
        :type site_id: str
        :param unpublished_at: The unpublished_at of this SplitTest.  # noqa: E501
        :type unpublished_at: str
        :param updated_at: The updated_at of this SplitTest.  # noqa: E501
        :type updated_at: str
        """
        self.openapi_types = {
            'active': bool,
            'branches': List[object],
            'created_at': str,
            'id': str,
            'name': str,
            'path': str,
            'site_id': str,
            'unpublished_at': str,
            'updated_at': str
        }

        self.attribute_map = {
            'active': 'active',
            'branches': 'branches',
            'created_at': 'created_at',
            'id': 'id',
            'name': 'name',
            'path': 'path',
            'site_id': 'site_id',
            'unpublished_at': 'unpublished_at',
            'updated_at': 'updated_at'
        }

        self._active = active
        self._branches = branches
        self._created_at = created_at
        self._id = id
        self._name = name
        self._path = path
        self._site_id = site_id
        self._unpublished_at = unpublished_at
        self._updated_at = updated_at

    @classmethod
    def from_dict(cls, dikt) -> 'SplitTest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The splitTest of this SplitTest.  # noqa: E501
        :rtype: SplitTest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active(self) -> bool:
        """Gets the active of this SplitTest.


        :return: The active of this SplitTest.
        :rtype: bool
        """
        return self._active

    @active.setter
    def active(self, active: bool):
        """Sets the active of this SplitTest.


        :param active: The active of this SplitTest.
        :type active: bool
        """

        self._active = active

    @property
    def branches(self) -> List[object]:
        """Gets the branches of this SplitTest.


        :return: The branches of this SplitTest.
        :rtype: List[object]
        """
        return self._branches

    @branches.setter
    def branches(self, branches: List[object]):
        """Sets the branches of this SplitTest.


        :param branches: The branches of this SplitTest.
        :type branches: List[object]
        """

        self._branches = branches

    @property
    def created_at(self) -> str:
        """Gets the created_at of this SplitTest.


        :return: The created_at of this SplitTest.
        :rtype: str
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at: str):
        """Sets the created_at of this SplitTest.


        :param created_at: The created_at of this SplitTest.
        :type created_at: str
        """

        self._created_at = created_at

    @property
    def id(self) -> str:
        """Gets the id of this SplitTest.


        :return: The id of this SplitTest.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this SplitTest.


        :param id: The id of this SplitTest.
        :type id: str
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this SplitTest.


        :return: The name of this SplitTest.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this SplitTest.


        :param name: The name of this SplitTest.
        :type name: str
        """

        self._name = name

    @property
    def path(self) -> str:
        """Gets the path of this SplitTest.


        :return: The path of this SplitTest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this SplitTest.


        :param path: The path of this SplitTest.
        :type path: str
        """

        self._path = path

    @property
    def site_id(self) -> str:
        """Gets the site_id of this SplitTest.


        :return: The site_id of this SplitTest.
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id: str):
        """Sets the site_id of this SplitTest.


        :param site_id: The site_id of this SplitTest.
        :type site_id: str
        """

        self._site_id = site_id

    @property
    def unpublished_at(self) -> str:
        """Gets the unpublished_at of this SplitTest.


        :return: The unpublished_at of this SplitTest.
        :rtype: str
        """
        return self._unpublished_at

    @unpublished_at.setter
    def unpublished_at(self, unpublished_at: str):
        """Sets the unpublished_at of this SplitTest.


        :param unpublished_at: The unpublished_at of this SplitTest.
        :type unpublished_at: str
        """

        self._unpublished_at = unpublished_at

    @property
    def updated_at(self) -> str:
        """Gets the updated_at of this SplitTest.


        :return: The updated_at of this SplitTest.
        :rtype: str
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: str):
        """Sets the updated_at of this SplitTest.


        :param updated_at: The updated_at of this SplitTest.
        :type updated_at: str
        """

        self._updated_at = updated_at
