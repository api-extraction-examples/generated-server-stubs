from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.env_var_user import EnvVarUser
from openapi_server.models.env_var_value import EnvVarValue
from openapi_server import util

from openapi_server.models.env_var_user import EnvVarUser  # noqa: E501
from openapi_server.models.env_var_value import EnvVarValue  # noqa: E501

class EnvVar(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, key=None, scopes=None, updated_at=None, updated_by=None, values=None):  # noqa: E501
        """EnvVar - a model defined in OpenAPI

        :param key: The key of this EnvVar.  # noqa: E501
        :type key: str
        :param scopes: The scopes of this EnvVar.  # noqa: E501
        :type scopes: List[str]
        :param updated_at: The updated_at of this EnvVar.  # noqa: E501
        :type updated_at: datetime
        :param updated_by: The updated_by of this EnvVar.  # noqa: E501
        :type updated_by: EnvVarUser
        :param values: The values of this EnvVar.  # noqa: E501
        :type values: List[EnvVarValue]
        """
        self.openapi_types = {
            'key': str,
            'scopes': List[str],
            'updated_at': datetime,
            'updated_by': EnvVarUser,
            'values': List[EnvVarValue]
        }

        self.attribute_map = {
            'key': 'key',
            'scopes': 'scopes',
            'updated_at': 'updated_at',
            'updated_by': 'updated_by',
            'values': 'values'
        }

        self._key = key
        self._scopes = scopes
        self._updated_at = updated_at
        self._updated_by = updated_by
        self._values = values

    @classmethod
    def from_dict(cls, dikt) -> 'EnvVar':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The envVar of this EnvVar.  # noqa: E501
        :rtype: EnvVar
        """
        return util.deserialize_model(dikt, cls)

    @property
    def key(self) -> str:
        """Gets the key of this EnvVar.

        The environment variable key, like ALGOLIA_ID (case-sensitive)  # noqa: E501

        :return: The key of this EnvVar.
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key: str):
        """Sets the key of this EnvVar.

        The environment variable key, like ALGOLIA_ID (case-sensitive)  # noqa: E501

        :param key: The key of this EnvVar.
        :type key: str
        """

        self._key = key

    @property
    def scopes(self) -> List[str]:
        """Gets the scopes of this EnvVar.

        The scopes that this environment variable is set to  # noqa: E501

        :return: The scopes of this EnvVar.
        :rtype: List[str]
        """
        return self._scopes

    @scopes.setter
    def scopes(self, scopes: List[str]):
        """Sets the scopes of this EnvVar.

        The scopes that this environment variable is set to  # noqa: E501

        :param scopes: The scopes of this EnvVar.
        :type scopes: List[str]
        """
        allowed_values = ["builds", "functions", "runtime", "post-processing"]  # noqa: E501
        if not set(scopes).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `scopes` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(scopes) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._scopes = scopes

    @property
    def updated_at(self) -> datetime:
        """Gets the updated_at of this EnvVar.

        The timestamp of when the value was last updated  # noqa: E501

        :return: The updated_at of this EnvVar.
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at: datetime):
        """Sets the updated_at of this EnvVar.

        The timestamp of when the value was last updated  # noqa: E501

        :param updated_at: The updated_at of this EnvVar.
        :type updated_at: datetime
        """

        self._updated_at = updated_at

    @property
    def updated_by(self) -> EnvVarUser:
        """Gets the updated_by of this EnvVar.


        :return: The updated_by of this EnvVar.
        :rtype: EnvVarUser
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by: EnvVarUser):
        """Sets the updated_by of this EnvVar.


        :param updated_by: The updated_by of this EnvVar.
        :type updated_by: EnvVarUser
        """

        self._updated_by = updated_by

    @property
    def values(self) -> List[EnvVarValue]:
        """Gets the values of this EnvVar.

        An array of Value objects containing values and metadata  # noqa: E501

        :return: The values of this EnvVar.
        :rtype: List[EnvVarValue]
        """
        return self._values

    @values.setter
    def values(self, values: List[EnvVarValue]):
        """Sets the values of this EnvVar.

        An array of Value objects containing values and metadata  # noqa: E501

        :param values: The values of this EnvVar.
        :type values: List[EnvVarValue]
        """

        self._values = values
