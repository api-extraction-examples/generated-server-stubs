from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateGroupRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name=None, new_path=None, new_group_name=None):  # noqa: E501
        """UpdateGroupRequest - a model defined in OpenAPI

        :param group_name: The group_name of this UpdateGroupRequest.  # noqa: E501
        :type group_name: str
        :param new_path: The new_path of this UpdateGroupRequest.  # noqa: E501
        :type new_path: str
        :param new_group_name: The new_group_name of this UpdateGroupRequest.  # noqa: E501
        :type new_group_name: str
        """
        self.openapi_types = {
            'group_name': str,
            'new_path': str,
            'new_group_name': str
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'new_path': 'NewPath',
            'new_group_name': 'NewGroupName'
        }

        self._group_name = group_name
        self._new_path = new_path
        self._new_group_name = new_group_name

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateGroupRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateGroupRequest of this UpdateGroupRequest.  # noqa: E501
        :rtype: UpdateGroupRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self) -> str:
        """Gets the group_name of this UpdateGroupRequest.


        :return: The group_name of this UpdateGroupRequest.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this UpdateGroupRequest.


        :param group_name: The group_name of this UpdateGroupRequest.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def new_path(self) -> str:
        """Gets the new_path of this UpdateGroupRequest.


        :return: The new_path of this UpdateGroupRequest.
        :rtype: str
        """
        return self._new_path

    @new_path.setter
    def new_path(self, new_path: str):
        """Sets the new_path of this UpdateGroupRequest.


        :param new_path: The new_path of this UpdateGroupRequest.
        :type new_path: str
        """

        self._new_path = new_path

    @property
    def new_group_name(self) -> str:
        """Gets the new_group_name of this UpdateGroupRequest.


        :return: The new_group_name of this UpdateGroupRequest.
        :rtype: str
        """
        return self._new_group_name

    @new_group_name.setter
    def new_group_name(self, new_group_name: str):
        """Sets the new_group_name of this UpdateGroupRequest.


        :param new_group_name: The new_group_name of this UpdateGroupRequest.
        :type new_group_name: str
        """

        self._new_group_name = new_group_name
