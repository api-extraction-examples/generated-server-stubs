from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.user_permissions_boundary import UserPermissionsBoundary
from openapi_server import util

from openapi_server.models.user_permissions_boundary import UserPermissionsBoundary  # noqa: E501

class VirtualMFADeviceUser(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path=None, user_name=None, user_id=None, arn=None, create_date=None, password_last_used=None, permissions_boundary=None, tags=None):  # noqa: E501
        """VirtualMFADeviceUser - a model defined in OpenAPI

        :param path: The path of this VirtualMFADeviceUser.  # noqa: E501
        :type path: str
        :param user_name: The user_name of this VirtualMFADeviceUser.  # noqa: E501
        :type user_name: str
        :param user_id: The user_id of this VirtualMFADeviceUser.  # noqa: E501
        :type user_id: str
        :param arn: The arn of this VirtualMFADeviceUser.  # noqa: E501
        :type arn: str
        :param create_date: The create_date of this VirtualMFADeviceUser.  # noqa: E501
        :type create_date: datetime
        :param password_last_used: The password_last_used of this VirtualMFADeviceUser.  # noqa: E501
        :type password_last_used: datetime
        :param permissions_boundary: The permissions_boundary of this VirtualMFADeviceUser.  # noqa: E501
        :type permissions_boundary: UserPermissionsBoundary
        :param tags: The tags of this VirtualMFADeviceUser.  # noqa: E501
        :type tags: List
        """
        self.openapi_types = {
            'path': str,
            'user_name': str,
            'user_id': str,
            'arn': str,
            'create_date': datetime,
            'password_last_used': datetime,
            'permissions_boundary': UserPermissionsBoundary,
            'tags': List
        }

        self.attribute_map = {
            'path': 'Path',
            'user_name': 'UserName',
            'user_id': 'UserId',
            'arn': 'Arn',
            'create_date': 'CreateDate',
            'password_last_used': 'PasswordLastUsed',
            'permissions_boundary': 'PermissionsBoundary',
            'tags': 'Tags'
        }

        self._path = path
        self._user_name = user_name
        self._user_id = user_id
        self._arn = arn
        self._create_date = create_date
        self._password_last_used = password_last_used
        self._permissions_boundary = permissions_boundary
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'VirtualMFADeviceUser':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VirtualMFADevice_User of this VirtualMFADeviceUser.  # noqa: E501
        :rtype: VirtualMFADeviceUser
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this VirtualMFADeviceUser.


        :return: The path of this VirtualMFADeviceUser.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this VirtualMFADeviceUser.


        :param path: The path of this VirtualMFADeviceUser.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def user_name(self) -> str:
        """Gets the user_name of this VirtualMFADeviceUser.


        :return: The user_name of this VirtualMFADeviceUser.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this VirtualMFADeviceUser.


        :param user_name: The user_name of this VirtualMFADeviceUser.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this VirtualMFADeviceUser.


        :return: The user_id of this VirtualMFADeviceUser.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this VirtualMFADeviceUser.


        :param user_id: The user_id of this VirtualMFADeviceUser.
        :type user_id: str
        """
        if user_id is None:
            raise ValueError("Invalid value for `user_id`, must not be `None`")  # noqa: E501

        self._user_id = user_id

    @property
    def arn(self) -> str:
        """Gets the arn of this VirtualMFADeviceUser.


        :return: The arn of this VirtualMFADeviceUser.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn: str):
        """Sets the arn of this VirtualMFADeviceUser.


        :param arn: The arn of this VirtualMFADeviceUser.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")  # noqa: E501

        self._arn = arn

    @property
    def create_date(self) -> datetime:
        """Gets the create_date of this VirtualMFADeviceUser.


        :return: The create_date of this VirtualMFADeviceUser.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date: datetime):
        """Sets the create_date of this VirtualMFADeviceUser.


        :param create_date: The create_date of this VirtualMFADeviceUser.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def password_last_used(self) -> datetime:
        """Gets the password_last_used of this VirtualMFADeviceUser.


        :return: The password_last_used of this VirtualMFADeviceUser.
        :rtype: datetime
        """
        return self._password_last_used

    @password_last_used.setter
    def password_last_used(self, password_last_used: datetime):
        """Sets the password_last_used of this VirtualMFADeviceUser.


        :param password_last_used: The password_last_used of this VirtualMFADeviceUser.
        :type password_last_used: datetime
        """

        self._password_last_used = password_last_used

    @property
    def permissions_boundary(self) -> UserPermissionsBoundary:
        """Gets the permissions_boundary of this VirtualMFADeviceUser.


        :return: The permissions_boundary of this VirtualMFADeviceUser.
        :rtype: UserPermissionsBoundary
        """
        return self._permissions_boundary

    @permissions_boundary.setter
    def permissions_boundary(self, permissions_boundary: UserPermissionsBoundary):
        """Sets the permissions_boundary of this VirtualMFADeviceUser.


        :param permissions_boundary: The permissions_boundary of this VirtualMFADeviceUser.
        :type permissions_boundary: UserPermissionsBoundary
        """

        self._permissions_boundary = permissions_boundary

    @property
    def tags(self) -> List:
        """Gets the tags of this VirtualMFADeviceUser.


        :return: The tags of this VirtualMFADeviceUser.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List):
        """Sets the tags of this VirtualMFADeviceUser.


        :param tags: The tags of this VirtualMFADeviceUser.
        :type tags: List
        """

        self._tags = tags
