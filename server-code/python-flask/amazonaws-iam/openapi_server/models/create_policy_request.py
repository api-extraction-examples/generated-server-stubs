from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class CreatePolicyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, policy_name=None, path=None, policy_document=None, description=None, tags=None):  # noqa: E501
        """CreatePolicyRequest - a model defined in OpenAPI

        :param policy_name: The policy_name of this CreatePolicyRequest.  # noqa: E501
        :type policy_name: str
        :param path: The path of this CreatePolicyRequest.  # noqa: E501
        :type path: str
        :param policy_document: The policy_document of this CreatePolicyRequest.  # noqa: E501
        :type policy_document: str
        :param description: The description of this CreatePolicyRequest.  # noqa: E501
        :type description: str
        :param tags: The tags of this CreatePolicyRequest.  # noqa: E501
        :type tags: List
        """
        self.openapi_types = {
            'policy_name': str,
            'path': str,
            'policy_document': str,
            'description': str,
            'tags': List
        }

        self.attribute_map = {
            'policy_name': 'PolicyName',
            'path': 'Path',
            'policy_document': 'PolicyDocument',
            'description': 'Description',
            'tags': 'Tags'
        }

        self._policy_name = policy_name
        self._path = path
        self._policy_document = policy_document
        self._description = description
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'CreatePolicyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The CreatePolicyRequest of this CreatePolicyRequest.  # noqa: E501
        :rtype: CreatePolicyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def policy_name(self) -> str:
        """Gets the policy_name of this CreatePolicyRequest.


        :return: The policy_name of this CreatePolicyRequest.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name: str):
        """Sets the policy_name of this CreatePolicyRequest.


        :param policy_name: The policy_name of this CreatePolicyRequest.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")  # noqa: E501

        self._policy_name = policy_name

    @property
    def path(self) -> str:
        """Gets the path of this CreatePolicyRequest.


        :return: The path of this CreatePolicyRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this CreatePolicyRequest.


        :param path: The path of this CreatePolicyRequest.
        :type path: str
        """

        self._path = path

    @property
    def policy_document(self) -> str:
        """Gets the policy_document of this CreatePolicyRequest.


        :return: The policy_document of this CreatePolicyRequest.
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document: str):
        """Sets the policy_document of this CreatePolicyRequest.


        :param policy_document: The policy_document of this CreatePolicyRequest.
        :type policy_document: str
        """
        if policy_document is None:
            raise ValueError("Invalid value for `policy_document`, must not be `None`")  # noqa: E501

        self._policy_document = policy_document

    @property
    def description(self) -> str:
        """Gets the description of this CreatePolicyRequest.


        :return: The description of this CreatePolicyRequest.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description: str):
        """Sets the description of this CreatePolicyRequest.


        :param description: The description of this CreatePolicyRequest.
        :type description: str
        """

        self._description = description

    @property
    def tags(self) -> List:
        """Gets the tags of this CreatePolicyRequest.


        :return: The tags of this CreatePolicyRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List):
        """Sets the tags of this CreatePolicyRequest.


        :param tags: The tags of this CreatePolicyRequest.
        :type tags: List
        """

        self._tags = tags
