from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.policy_owner_entity_type import PolicyOwnerEntityType
from openapi_server import util

from openapi_server.models.policy_owner_entity_type import PolicyOwnerEntityType  # noqa: E501

class EntityInfo(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, arn=None, name=None, type=None, id=None, path=None):  # noqa: E501
        """EntityInfo - a model defined in OpenAPI

        :param arn: The arn of this EntityInfo.  # noqa: E501
        :type arn: str
        :param name: The name of this EntityInfo.  # noqa: E501
        :type name: str
        :param type: The type of this EntityInfo.  # noqa: E501
        :type type: PolicyOwnerEntityType
        :param id: The id of this EntityInfo.  # noqa: E501
        :type id: str
        :param path: The path of this EntityInfo.  # noqa: E501
        :type path: str
        """
        self.openapi_types = {
            'arn': str,
            'name': str,
            'type': PolicyOwnerEntityType,
            'id': str,
            'path': str
        }

        self.attribute_map = {
            'arn': 'Arn',
            'name': 'Name',
            'type': 'Type',
            'id': 'Id',
            'path': 'Path'
        }

        self._arn = arn
        self._name = name
        self._type = type
        self._id = id
        self._path = path

    @classmethod
    def from_dict(cls, dikt) -> 'EntityInfo':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EntityInfo of this EntityInfo.  # noqa: E501
        :rtype: EntityInfo
        """
        return util.deserialize_model(dikt, cls)

    @property
    def arn(self) -> str:
        """Gets the arn of this EntityInfo.

        <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>  # noqa: E501

        :return: The arn of this EntityInfo.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn: str):
        """Sets the arn of this EntityInfo.

        <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>  # noqa: E501

        :param arn: The arn of this EntityInfo.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")  # noqa: E501
        if arn is not None and len(arn) > 2048:
            raise ValueError("Invalid value for `arn`, length must be less than or equal to `2048`")  # noqa: E501
        if arn is not None and len(arn) < 20:
            raise ValueError("Invalid value for `arn`, length must be greater than or equal to `20`")  # noqa: E501

        self._arn = arn

    @property
    def name(self) -> str:
        """Gets the name of this EntityInfo.


        :return: The name of this EntityInfo.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this EntityInfo.


        :param name: The name of this EntityInfo.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def type(self) -> PolicyOwnerEntityType:
        """Gets the type of this EntityInfo.


        :return: The type of this EntityInfo.
        :rtype: PolicyOwnerEntityType
        """
        return self._type

    @type.setter
    def type(self, type: PolicyOwnerEntityType):
        """Sets the type of this EntityInfo.


        :param type: The type of this EntityInfo.
        :type type: PolicyOwnerEntityType
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501

        self._type = type

    @property
    def id(self) -> str:
        """Gets the id of this EntityInfo.


        :return: The id of this EntityInfo.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this EntityInfo.


        :param id: The id of this EntityInfo.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def path(self) -> str:
        """Gets the path of this EntityInfo.


        :return: The path of this EntityInfo.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this EntityInfo.


        :param path: The path of this EntityInfo.
        :type path: str
        """

        self._path = path
