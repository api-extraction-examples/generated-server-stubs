from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GetAccessKeyLastUsedResponseAccessKeyLastUsed(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, last_used_date=None, service_name=None, region=None):  # noqa: E501
        """GetAccessKeyLastUsedResponseAccessKeyLastUsed - a model defined in OpenAPI

        :param last_used_date: The last_used_date of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.  # noqa: E501
        :type last_used_date: datetime
        :param service_name: The service_name of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.  # noqa: E501
        :type service_name: str
        :param region: The region of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.  # noqa: E501
        :type region: str
        """
        self.openapi_types = {
            'last_used_date': datetime,
            'service_name': str,
            'region': str
        }

        self.attribute_map = {
            'last_used_date': 'LastUsedDate',
            'service_name': 'ServiceName',
            'region': 'Region'
        }

        self._last_used_date = last_used_date
        self._service_name = service_name
        self._region = region

    @classmethod
    def from_dict(cls, dikt) -> 'GetAccessKeyLastUsedResponseAccessKeyLastUsed':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetAccessKeyLastUsedResponse_AccessKeyLastUsed of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.  # noqa: E501
        :rtype: GetAccessKeyLastUsedResponseAccessKeyLastUsed
        """
        return util.deserialize_model(dikt, cls)

    @property
    def last_used_date(self) -> datetime:
        """Gets the last_used_date of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :return: The last_used_date of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :rtype: datetime
        """
        return self._last_used_date

    @last_used_date.setter
    def last_used_date(self, last_used_date: datetime):
        """Sets the last_used_date of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :param last_used_date: The last_used_date of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :type last_used_date: datetime
        """
        if last_used_date is None:
            raise ValueError("Invalid value for `last_used_date`, must not be `None`")  # noqa: E501

        self._last_used_date = last_used_date

    @property
    def service_name(self) -> str:
        """Gets the service_name of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :return: The service_name of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :rtype: str
        """
        return self._service_name

    @service_name.setter
    def service_name(self, service_name: str):
        """Sets the service_name of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :param service_name: The service_name of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :type service_name: str
        """
        if service_name is None:
            raise ValueError("Invalid value for `service_name`, must not be `None`")  # noqa: E501

        self._service_name = service_name

    @property
    def region(self) -> str:
        """Gets the region of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :return: The region of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region: str):
        """Sets the region of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.


        :param region: The region of this GetAccessKeyLastUsedResponseAccessKeyLastUsed.
        :type region: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region
