from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UploadServerCertificateRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path=None, server_certificate_name=None, certificate_body=None, private_key=None, certificate_chain=None, tags=None):  # noqa: E501
        """UploadServerCertificateRequest - a model defined in OpenAPI

        :param path: The path of this UploadServerCertificateRequest.  # noqa: E501
        :type path: str
        :param server_certificate_name: The server_certificate_name of this UploadServerCertificateRequest.  # noqa: E501
        :type server_certificate_name: str
        :param certificate_body: The certificate_body of this UploadServerCertificateRequest.  # noqa: E501
        :type certificate_body: str
        :param private_key: The private_key of this UploadServerCertificateRequest.  # noqa: E501
        :type private_key: str
        :param certificate_chain: The certificate_chain of this UploadServerCertificateRequest.  # noqa: E501
        :type certificate_chain: str
        :param tags: The tags of this UploadServerCertificateRequest.  # noqa: E501
        :type tags: List
        """
        self.openapi_types = {
            'path': str,
            'server_certificate_name': str,
            'certificate_body': str,
            'private_key': str,
            'certificate_chain': str,
            'tags': List
        }

        self.attribute_map = {
            'path': 'Path',
            'server_certificate_name': 'ServerCertificateName',
            'certificate_body': 'CertificateBody',
            'private_key': 'PrivateKey',
            'certificate_chain': 'CertificateChain',
            'tags': 'Tags'
        }

        self._path = path
        self._server_certificate_name = server_certificate_name
        self._certificate_body = certificate_body
        self._private_key = private_key
        self._certificate_chain = certificate_chain
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'UploadServerCertificateRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UploadServerCertificateRequest of this UploadServerCertificateRequest.  # noqa: E501
        :rtype: UploadServerCertificateRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this UploadServerCertificateRequest.


        :return: The path of this UploadServerCertificateRequest.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this UploadServerCertificateRequest.


        :param path: The path of this UploadServerCertificateRequest.
        :type path: str
        """

        self._path = path

    @property
    def server_certificate_name(self) -> str:
        """Gets the server_certificate_name of this UploadServerCertificateRequest.


        :return: The server_certificate_name of this UploadServerCertificateRequest.
        :rtype: str
        """
        return self._server_certificate_name

    @server_certificate_name.setter
    def server_certificate_name(self, server_certificate_name: str):
        """Sets the server_certificate_name of this UploadServerCertificateRequest.


        :param server_certificate_name: The server_certificate_name of this UploadServerCertificateRequest.
        :type server_certificate_name: str
        """
        if server_certificate_name is None:
            raise ValueError("Invalid value for `server_certificate_name`, must not be `None`")  # noqa: E501

        self._server_certificate_name = server_certificate_name

    @property
    def certificate_body(self) -> str:
        """Gets the certificate_body of this UploadServerCertificateRequest.


        :return: The certificate_body of this UploadServerCertificateRequest.
        :rtype: str
        """
        return self._certificate_body

    @certificate_body.setter
    def certificate_body(self, certificate_body: str):
        """Sets the certificate_body of this UploadServerCertificateRequest.


        :param certificate_body: The certificate_body of this UploadServerCertificateRequest.
        :type certificate_body: str
        """
        if certificate_body is None:
            raise ValueError("Invalid value for `certificate_body`, must not be `None`")  # noqa: E501

        self._certificate_body = certificate_body

    @property
    def private_key(self) -> str:
        """Gets the private_key of this UploadServerCertificateRequest.


        :return: The private_key of this UploadServerCertificateRequest.
        :rtype: str
        """
        return self._private_key

    @private_key.setter
    def private_key(self, private_key: str):
        """Sets the private_key of this UploadServerCertificateRequest.


        :param private_key: The private_key of this UploadServerCertificateRequest.
        :type private_key: str
        """
        if private_key is None:
            raise ValueError("Invalid value for `private_key`, must not be `None`")  # noqa: E501

        self._private_key = private_key

    @property
    def certificate_chain(self) -> str:
        """Gets the certificate_chain of this UploadServerCertificateRequest.


        :return: The certificate_chain of this UploadServerCertificateRequest.
        :rtype: str
        """
        return self._certificate_chain

    @certificate_chain.setter
    def certificate_chain(self, certificate_chain: str):
        """Sets the certificate_chain of this UploadServerCertificateRequest.


        :param certificate_chain: The certificate_chain of this UploadServerCertificateRequest.
        :type certificate_chain: str
        """

        self._certificate_chain = certificate_chain

    @property
    def tags(self) -> List:
        """Gets the tags of this UploadServerCertificateRequest.


        :return: The tags of this UploadServerCertificateRequest.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List):
        """Sets the tags of this UploadServerCertificateRequest.


        :param tags: The tags of this UploadServerCertificateRequest.
        :type tags: List
        """

        self._tags = tags
