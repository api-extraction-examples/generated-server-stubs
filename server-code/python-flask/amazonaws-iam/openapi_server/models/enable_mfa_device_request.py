from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class EnableMFADeviceRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, serial_number=None, authentication_code1=None, authentication_code2=None):  # noqa: E501
        """EnableMFADeviceRequest - a model defined in OpenAPI

        :param user_name: The user_name of this EnableMFADeviceRequest.  # noqa: E501
        :type user_name: str
        :param serial_number: The serial_number of this EnableMFADeviceRequest.  # noqa: E501
        :type serial_number: str
        :param authentication_code1: The authentication_code1 of this EnableMFADeviceRequest.  # noqa: E501
        :type authentication_code1: str
        :param authentication_code2: The authentication_code2 of this EnableMFADeviceRequest.  # noqa: E501
        :type authentication_code2: str
        """
        self.openapi_types = {
            'user_name': str,
            'serial_number': str,
            'authentication_code1': str,
            'authentication_code2': str
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'serial_number': 'SerialNumber',
            'authentication_code1': 'AuthenticationCode1',
            'authentication_code2': 'AuthenticationCode2'
        }

        self._user_name = user_name
        self._serial_number = serial_number
        self._authentication_code1 = authentication_code1
        self._authentication_code2 = authentication_code2

    @classmethod
    def from_dict(cls, dikt) -> 'EnableMFADeviceRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The EnableMFADeviceRequest of this EnableMFADeviceRequest.  # noqa: E501
        :rtype: EnableMFADeviceRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this EnableMFADeviceRequest.


        :return: The user_name of this EnableMFADeviceRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this EnableMFADeviceRequest.


        :param user_name: The user_name of this EnableMFADeviceRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def serial_number(self) -> str:
        """Gets the serial_number of this EnableMFADeviceRequest.


        :return: The serial_number of this EnableMFADeviceRequest.
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number: str):
        """Sets the serial_number of this EnableMFADeviceRequest.


        :param serial_number: The serial_number of this EnableMFADeviceRequest.
        :type serial_number: str
        """
        if serial_number is None:
            raise ValueError("Invalid value for `serial_number`, must not be `None`")  # noqa: E501

        self._serial_number = serial_number

    @property
    def authentication_code1(self) -> str:
        """Gets the authentication_code1 of this EnableMFADeviceRequest.


        :return: The authentication_code1 of this EnableMFADeviceRequest.
        :rtype: str
        """
        return self._authentication_code1

    @authentication_code1.setter
    def authentication_code1(self, authentication_code1: str):
        """Sets the authentication_code1 of this EnableMFADeviceRequest.


        :param authentication_code1: The authentication_code1 of this EnableMFADeviceRequest.
        :type authentication_code1: str
        """
        if authentication_code1 is None:
            raise ValueError("Invalid value for `authentication_code1`, must not be `None`")  # noqa: E501

        self._authentication_code1 = authentication_code1

    @property
    def authentication_code2(self) -> str:
        """Gets the authentication_code2 of this EnableMFADeviceRequest.


        :return: The authentication_code2 of this EnableMFADeviceRequest.
        :rtype: str
        """
        return self._authentication_code2

    @authentication_code2.setter
    def authentication_code2(self, authentication_code2: str):
        """Sets the authentication_code2 of this EnableMFADeviceRequest.


        :param authentication_code2: The authentication_code2 of this EnableMFADeviceRequest.
        :type authentication_code2: str
        """
        if authentication_code2 is None:
            raise ValueError("Invalid value for `authentication_code2`, must not be `None`")  # noqa: E501

        self._authentication_code2 = authentication_code2
