from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class GetGroupPolicyResponse(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, group_name=None, policy_name=None, policy_document=None):  # noqa: E501
        """GetGroupPolicyResponse - a model defined in OpenAPI

        :param group_name: The group_name of this GetGroupPolicyResponse.  # noqa: E501
        :type group_name: str
        :param policy_name: The policy_name of this GetGroupPolicyResponse.  # noqa: E501
        :type policy_name: str
        :param policy_document: The policy_document of this GetGroupPolicyResponse.  # noqa: E501
        :type policy_document: str
        """
        self.openapi_types = {
            'group_name': str,
            'policy_name': str,
            'policy_document': str
        }

        self.attribute_map = {
            'group_name': 'GroupName',
            'policy_name': 'PolicyName',
            'policy_document': 'PolicyDocument'
        }

        self._group_name = group_name
        self._policy_name = policy_name
        self._policy_document = policy_document

    @classmethod
    def from_dict(cls, dikt) -> 'GetGroupPolicyResponse':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetGroupPolicyResponse of this GetGroupPolicyResponse.  # noqa: E501
        :rtype: GetGroupPolicyResponse
        """
        return util.deserialize_model(dikt, cls)

    @property
    def group_name(self) -> str:
        """Gets the group_name of this GetGroupPolicyResponse.


        :return: The group_name of this GetGroupPolicyResponse.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name: str):
        """Sets the group_name of this GetGroupPolicyResponse.


        :param group_name: The group_name of this GetGroupPolicyResponse.
        :type group_name: str
        """
        if group_name is None:
            raise ValueError("Invalid value for `group_name`, must not be `None`")  # noqa: E501

        self._group_name = group_name

    @property
    def policy_name(self) -> str:
        """Gets the policy_name of this GetGroupPolicyResponse.


        :return: The policy_name of this GetGroupPolicyResponse.
        :rtype: str
        """
        return self._policy_name

    @policy_name.setter
    def policy_name(self, policy_name: str):
        """Sets the policy_name of this GetGroupPolicyResponse.


        :param policy_name: The policy_name of this GetGroupPolicyResponse.
        :type policy_name: str
        """
        if policy_name is None:
            raise ValueError("Invalid value for `policy_name`, must not be `None`")  # noqa: E501

        self._policy_name = policy_name

    @property
    def policy_document(self) -> str:
        """Gets the policy_document of this GetGroupPolicyResponse.


        :return: The policy_document of this GetGroupPolicyResponse.
        :rtype: str
        """
        return self._policy_document

    @policy_document.setter
    def policy_document(self, policy_document: str):
        """Sets the policy_document of this GetGroupPolicyResponse.


        :param policy_document: The policy_document of this GetGroupPolicyResponse.
        :type policy_document: str
        """
        if policy_document is None:
            raise ValueError("Invalid value for `policy_document`, must not be `None`")  # noqa: E501

        self._policy_document = policy_document
