from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.policy_scope_type import PolicyScopeType
from openapi_server.models.policy_usage_type import PolicyUsageType
from openapi_server import util

from openapi_server.models.policy_scope_type import PolicyScopeType  # noqa: E501
from openapi_server.models.policy_usage_type import PolicyUsageType  # noqa: E501

class ListPoliciesRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, scope=None, only_attached=None, path_prefix=None, policy_usage_filter=None, marker=None, max_items=None):  # noqa: E501
        """ListPoliciesRequest - a model defined in OpenAPI

        :param scope: The scope of this ListPoliciesRequest.  # noqa: E501
        :type scope: PolicyScopeType
        :param only_attached: The only_attached of this ListPoliciesRequest.  # noqa: E501
        :type only_attached: bool
        :param path_prefix: The path_prefix of this ListPoliciesRequest.  # noqa: E501
        :type path_prefix: str
        :param policy_usage_filter: The policy_usage_filter of this ListPoliciesRequest.  # noqa: E501
        :type policy_usage_filter: PolicyUsageType
        :param marker: The marker of this ListPoliciesRequest.  # noqa: E501
        :type marker: str
        :param max_items: The max_items of this ListPoliciesRequest.  # noqa: E501
        :type max_items: int
        """
        self.openapi_types = {
            'scope': PolicyScopeType,
            'only_attached': bool,
            'path_prefix': str,
            'policy_usage_filter': PolicyUsageType,
            'marker': str,
            'max_items': int
        }

        self.attribute_map = {
            'scope': 'Scope',
            'only_attached': 'OnlyAttached',
            'path_prefix': 'PathPrefix',
            'policy_usage_filter': 'PolicyUsageFilter',
            'marker': 'Marker',
            'max_items': 'MaxItems'
        }

        self._scope = scope
        self._only_attached = only_attached
        self._path_prefix = path_prefix
        self._policy_usage_filter = policy_usage_filter
        self._marker = marker
        self._max_items = max_items

    @classmethod
    def from_dict(cls, dikt) -> 'ListPoliciesRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ListPoliciesRequest of this ListPoliciesRequest.  # noqa: E501
        :rtype: ListPoliciesRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def scope(self) -> PolicyScopeType:
        """Gets the scope of this ListPoliciesRequest.


        :return: The scope of this ListPoliciesRequest.
        :rtype: PolicyScopeType
        """
        return self._scope

    @scope.setter
    def scope(self, scope: PolicyScopeType):
        """Sets the scope of this ListPoliciesRequest.


        :param scope: The scope of this ListPoliciesRequest.
        :type scope: PolicyScopeType
        """

        self._scope = scope

    @property
    def only_attached(self) -> bool:
        """Gets the only_attached of this ListPoliciesRequest.


        :return: The only_attached of this ListPoliciesRequest.
        :rtype: bool
        """
        return self._only_attached

    @only_attached.setter
    def only_attached(self, only_attached: bool):
        """Sets the only_attached of this ListPoliciesRequest.


        :param only_attached: The only_attached of this ListPoliciesRequest.
        :type only_attached: bool
        """

        self._only_attached = only_attached

    @property
    def path_prefix(self) -> str:
        """Gets the path_prefix of this ListPoliciesRequest.


        :return: The path_prefix of this ListPoliciesRequest.
        :rtype: str
        """
        return self._path_prefix

    @path_prefix.setter
    def path_prefix(self, path_prefix: str):
        """Sets the path_prefix of this ListPoliciesRequest.


        :param path_prefix: The path_prefix of this ListPoliciesRequest.
        :type path_prefix: str
        """

        self._path_prefix = path_prefix

    @property
    def policy_usage_filter(self) -> PolicyUsageType:
        """Gets the policy_usage_filter of this ListPoliciesRequest.


        :return: The policy_usage_filter of this ListPoliciesRequest.
        :rtype: PolicyUsageType
        """
        return self._policy_usage_filter

    @policy_usage_filter.setter
    def policy_usage_filter(self, policy_usage_filter: PolicyUsageType):
        """Sets the policy_usage_filter of this ListPoliciesRequest.


        :param policy_usage_filter: The policy_usage_filter of this ListPoliciesRequest.
        :type policy_usage_filter: PolicyUsageType
        """

        self._policy_usage_filter = policy_usage_filter

    @property
    def marker(self) -> str:
        """Gets the marker of this ListPoliciesRequest.


        :return: The marker of this ListPoliciesRequest.
        :rtype: str
        """
        return self._marker

    @marker.setter
    def marker(self, marker: str):
        """Sets the marker of this ListPoliciesRequest.


        :param marker: The marker of this ListPoliciesRequest.
        :type marker: str
        """

        self._marker = marker

    @property
    def max_items(self) -> int:
        """Gets the max_items of this ListPoliciesRequest.


        :return: The max_items of this ListPoliciesRequest.
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items: int):
        """Sets the max_items of this ListPoliciesRequest.


        :param max_items: The max_items of this ListPoliciesRequest.
        :type max_items: int
        """

        self._max_items = max_items
