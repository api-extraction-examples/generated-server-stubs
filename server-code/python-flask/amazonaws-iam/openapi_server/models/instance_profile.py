from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class InstanceProfile(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, path=None, instance_profile_name=None, instance_profile_id=None, arn=None, create_date=None, roles=None, tags=None):  # noqa: E501
        """InstanceProfile - a model defined in OpenAPI

        :param path: The path of this InstanceProfile.  # noqa: E501
        :type path: str
        :param instance_profile_name: The instance_profile_name of this InstanceProfile.  # noqa: E501
        :type instance_profile_name: str
        :param instance_profile_id: The instance_profile_id of this InstanceProfile.  # noqa: E501
        :type instance_profile_id: str
        :param arn: The arn of this InstanceProfile.  # noqa: E501
        :type arn: str
        :param create_date: The create_date of this InstanceProfile.  # noqa: E501
        :type create_date: datetime
        :param roles: The roles of this InstanceProfile.  # noqa: E501
        :type roles: List
        :param tags: The tags of this InstanceProfile.  # noqa: E501
        :type tags: List
        """
        self.openapi_types = {
            'path': str,
            'instance_profile_name': str,
            'instance_profile_id': str,
            'arn': str,
            'create_date': datetime,
            'roles': List,
            'tags': List
        }

        self.attribute_map = {
            'path': 'Path',
            'instance_profile_name': 'InstanceProfileName',
            'instance_profile_id': 'InstanceProfileId',
            'arn': 'Arn',
            'create_date': 'CreateDate',
            'roles': 'Roles',
            'tags': 'Tags'
        }

        self._path = path
        self._instance_profile_name = instance_profile_name
        self._instance_profile_id = instance_profile_id
        self._arn = arn
        self._create_date = create_date
        self._roles = roles
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'InstanceProfile':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The InstanceProfile of this InstanceProfile.  # noqa: E501
        :rtype: InstanceProfile
        """
        return util.deserialize_model(dikt, cls)

    @property
    def path(self) -> str:
        """Gets the path of this InstanceProfile.


        :return: The path of this InstanceProfile.
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path: str):
        """Sets the path of this InstanceProfile.


        :param path: The path of this InstanceProfile.
        :type path: str
        """
        if path is None:
            raise ValueError("Invalid value for `path`, must not be `None`")  # noqa: E501

        self._path = path

    @property
    def instance_profile_name(self) -> str:
        """Gets the instance_profile_name of this InstanceProfile.


        :return: The instance_profile_name of this InstanceProfile.
        :rtype: str
        """
        return self._instance_profile_name

    @instance_profile_name.setter
    def instance_profile_name(self, instance_profile_name: str):
        """Sets the instance_profile_name of this InstanceProfile.


        :param instance_profile_name: The instance_profile_name of this InstanceProfile.
        :type instance_profile_name: str
        """
        if instance_profile_name is None:
            raise ValueError("Invalid value for `instance_profile_name`, must not be `None`")  # noqa: E501

        self._instance_profile_name = instance_profile_name

    @property
    def instance_profile_id(self) -> str:
        """Gets the instance_profile_id of this InstanceProfile.


        :return: The instance_profile_id of this InstanceProfile.
        :rtype: str
        """
        return self._instance_profile_id

    @instance_profile_id.setter
    def instance_profile_id(self, instance_profile_id: str):
        """Sets the instance_profile_id of this InstanceProfile.


        :param instance_profile_id: The instance_profile_id of this InstanceProfile.
        :type instance_profile_id: str
        """
        if instance_profile_id is None:
            raise ValueError("Invalid value for `instance_profile_id`, must not be `None`")  # noqa: E501

        self._instance_profile_id = instance_profile_id

    @property
    def arn(self) -> str:
        """Gets the arn of this InstanceProfile.


        :return: The arn of this InstanceProfile.
        :rtype: str
        """
        return self._arn

    @arn.setter
    def arn(self, arn: str):
        """Sets the arn of this InstanceProfile.


        :param arn: The arn of this InstanceProfile.
        :type arn: str
        """
        if arn is None:
            raise ValueError("Invalid value for `arn`, must not be `None`")  # noqa: E501

        self._arn = arn

    @property
    def create_date(self) -> datetime:
        """Gets the create_date of this InstanceProfile.


        :return: The create_date of this InstanceProfile.
        :rtype: datetime
        """
        return self._create_date

    @create_date.setter
    def create_date(self, create_date: datetime):
        """Sets the create_date of this InstanceProfile.


        :param create_date: The create_date of this InstanceProfile.
        :type create_date: datetime
        """
        if create_date is None:
            raise ValueError("Invalid value for `create_date`, must not be `None`")  # noqa: E501

        self._create_date = create_date

    @property
    def roles(self) -> List:
        """Gets the roles of this InstanceProfile.


        :return: The roles of this InstanceProfile.
        :rtype: List
        """
        return self._roles

    @roles.setter
    def roles(self, roles: List):
        """Sets the roles of this InstanceProfile.


        :param roles: The roles of this InstanceProfile.
        :type roles: List
        """
        if roles is None:
            raise ValueError("Invalid value for `roles`, must not be `None`")  # noqa: E501

        self._roles = roles

    @property
    def tags(self) -> List:
        """Gets the tags of this InstanceProfile.


        :return: The tags of this InstanceProfile.
        :rtype: List
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List):
        """Sets the tags of this InstanceProfile.


        :param tags: The tags of this InstanceProfile.
        :type tags: List
        """

        self._tags = tags
