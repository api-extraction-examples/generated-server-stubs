from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class UpdateLoginProfileRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, password=None, password_reset_required=None):  # noqa: E501
        """UpdateLoginProfileRequest - a model defined in OpenAPI

        :param user_name: The user_name of this UpdateLoginProfileRequest.  # noqa: E501
        :type user_name: str
        :param password: The password of this UpdateLoginProfileRequest.  # noqa: E501
        :type password: str
        :param password_reset_required: The password_reset_required of this UpdateLoginProfileRequest.  # noqa: E501
        :type password_reset_required: bool
        """
        self.openapi_types = {
            'user_name': str,
            'password': str,
            'password_reset_required': bool
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'password': 'Password',
            'password_reset_required': 'PasswordResetRequired'
        }

        self._user_name = user_name
        self._password = password
        self._password_reset_required = password_reset_required

    @classmethod
    def from_dict(cls, dikt) -> 'UpdateLoginProfileRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The UpdateLoginProfileRequest of this UpdateLoginProfileRequest.  # noqa: E501
        :rtype: UpdateLoginProfileRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this UpdateLoginProfileRequest.


        :return: The user_name of this UpdateLoginProfileRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this UpdateLoginProfileRequest.


        :param user_name: The user_name of this UpdateLoginProfileRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def password(self) -> str:
        """Gets the password of this UpdateLoginProfileRequest.


        :return: The password of this UpdateLoginProfileRequest.
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password: str):
        """Sets the password of this UpdateLoginProfileRequest.


        :param password: The password of this UpdateLoginProfileRequest.
        :type password: str
        """

        self._password = password

    @property
    def password_reset_required(self) -> bool:
        """Gets the password_reset_required of this UpdateLoginProfileRequest.


        :return: The password_reset_required of this UpdateLoginProfileRequest.
        :rtype: bool
        """
        return self._password_reset_required

    @password_reset_required.setter
    def password_reset_required(self, password_reset_required: bool):
        """Sets the password_reset_required of this UpdateLoginProfileRequest.


        :param password_reset_required: The password_reset_required of this UpdateLoginProfileRequest.
        :type password_reset_required: bool
        """

        self._password_reset_required = password_reset_required
