from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.encoding_type import EncodingType
from openapi_server import util

from openapi_server.models.encoding_type import EncodingType  # noqa: E501

class GetSSHPublicKeyRequest(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, user_name=None, ssh_public_key_id=None, encoding=None):  # noqa: E501
        """GetSSHPublicKeyRequest - a model defined in OpenAPI

        :param user_name: The user_name of this GetSSHPublicKeyRequest.  # noqa: E501
        :type user_name: str
        :param ssh_public_key_id: The ssh_public_key_id of this GetSSHPublicKeyRequest.  # noqa: E501
        :type ssh_public_key_id: str
        :param encoding: The encoding of this GetSSHPublicKeyRequest.  # noqa: E501
        :type encoding: EncodingType
        """
        self.openapi_types = {
            'user_name': str,
            'ssh_public_key_id': str,
            'encoding': EncodingType
        }

        self.attribute_map = {
            'user_name': 'UserName',
            'ssh_public_key_id': 'SSHPublicKeyId',
            'encoding': 'Encoding'
        }

        self._user_name = user_name
        self._ssh_public_key_id = ssh_public_key_id
        self._encoding = encoding

    @classmethod
    def from_dict(cls, dikt) -> 'GetSSHPublicKeyRequest':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The GetSSHPublicKeyRequest of this GetSSHPublicKeyRequest.  # noqa: E501
        :rtype: GetSSHPublicKeyRequest
        """
        return util.deserialize_model(dikt, cls)

    @property
    def user_name(self) -> str:
        """Gets the user_name of this GetSSHPublicKeyRequest.


        :return: The user_name of this GetSSHPublicKeyRequest.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this GetSSHPublicKeyRequest.


        :param user_name: The user_name of this GetSSHPublicKeyRequest.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def ssh_public_key_id(self) -> str:
        """Gets the ssh_public_key_id of this GetSSHPublicKeyRequest.


        :return: The ssh_public_key_id of this GetSSHPublicKeyRequest.
        :rtype: str
        """
        return self._ssh_public_key_id

    @ssh_public_key_id.setter
    def ssh_public_key_id(self, ssh_public_key_id: str):
        """Sets the ssh_public_key_id of this GetSSHPublicKeyRequest.


        :param ssh_public_key_id: The ssh_public_key_id of this GetSSHPublicKeyRequest.
        :type ssh_public_key_id: str
        """
        if ssh_public_key_id is None:
            raise ValueError("Invalid value for `ssh_public_key_id`, must not be `None`")  # noqa: E501

        self._ssh_public_key_id = ssh_public_key_id

    @property
    def encoding(self) -> EncodingType:
        """Gets the encoding of this GetSSHPublicKeyRequest.


        :return: The encoding of this GetSSHPublicKeyRequest.
        :rtype: EncodingType
        """
        return self._encoding

    @encoding.setter
    def encoding(self, encoding: EncodingType):
        """Sets the encoding of this GetSSHPublicKeyRequest.


        :param encoding: The encoding of this GetSSHPublicKeyRequest.
        :type encoding: EncodingType
        """
        if encoding is None:
            raise ValueError("Invalid value for `encoding`, must not be `None`")  # noqa: E501

        self._encoding = encoding
