from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_id_platform import BundleIdPlatform
from openapi_server import util

from openapi_server.models.bundle_id_platform import BundleIdPlatform  # noqa: E501

class BundleIdAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, identifier=None, name=None, platform=None, seed_id=None):  # noqa: E501
        """BundleIdAttributes - a model defined in OpenAPI

        :param identifier: The identifier of this BundleIdAttributes.  # noqa: E501
        :type identifier: str
        :param name: The name of this BundleIdAttributes.  # noqa: E501
        :type name: str
        :param platform: The platform of this BundleIdAttributes.  # noqa: E501
        :type platform: BundleIdPlatform
        :param seed_id: The seed_id of this BundleIdAttributes.  # noqa: E501
        :type seed_id: str
        """
        self.openapi_types = {
            'identifier': str,
            'name': str,
            'platform': BundleIdPlatform,
            'seed_id': str
        }

        self.attribute_map = {
            'identifier': 'identifier',
            'name': 'name',
            'platform': 'platform',
            'seed_id': 'seedId'
        }

        self._identifier = identifier
        self._name = name
        self._platform = platform
        self._seed_id = seed_id

    @classmethod
    def from_dict(cls, dikt) -> 'BundleIdAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BundleId_attributes of this BundleIdAttributes.  # noqa: E501
        :rtype: BundleIdAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def identifier(self) -> str:
        """Gets the identifier of this BundleIdAttributes.


        :return: The identifier of this BundleIdAttributes.
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier: str):
        """Sets the identifier of this BundleIdAttributes.


        :param identifier: The identifier of this BundleIdAttributes.
        :type identifier: str
        """

        self._identifier = identifier

    @property
    def name(self) -> str:
        """Gets the name of this BundleIdAttributes.


        :return: The name of this BundleIdAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this BundleIdAttributes.


        :param name: The name of this BundleIdAttributes.
        :type name: str
        """

        self._name = name

    @property
    def platform(self) -> BundleIdPlatform:
        """Gets the platform of this BundleIdAttributes.


        :return: The platform of this BundleIdAttributes.
        :rtype: BundleIdPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform: BundleIdPlatform):
        """Sets the platform of this BundleIdAttributes.


        :param platform: The platform of this BundleIdAttributes.
        :type platform: BundleIdPlatform
        """

        self._platform = platform

    @property
    def seed_id(self) -> str:
        """Gets the seed_id of this BundleIdAttributes.


        :return: The seed_id of this BundleIdAttributes.
        :rtype: str
        """
        return self._seed_id

    @seed_id.setter
    def seed_id(self, seed_id: str):
        """Sets the seed_id of this BundleIdAttributes.


        :param seed_id: The seed_id of this BundleIdAttributes.
        :type seed_id: str
        """

        self._seed_id = seed_id
