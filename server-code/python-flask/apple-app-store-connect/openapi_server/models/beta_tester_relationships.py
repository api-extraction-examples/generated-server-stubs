from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.app_relationships_beta_groups import AppRelationshipsBetaGroups
from openapi_server.models.app_relationships_builds import AppRelationshipsBuilds
from openapi_server.models.beta_tester_relationships_apps import BetaTesterRelationshipsApps
from openapi_server import util

from openapi_server.models.app_relationships_beta_groups import AppRelationshipsBetaGroups  # noqa: E501
from openapi_server.models.app_relationships_builds import AppRelationshipsBuilds  # noqa: E501
from openapi_server.models.beta_tester_relationships_apps import BetaTesterRelationshipsApps  # noqa: E501

class BetaTesterRelationships(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, apps=None, beta_groups=None, builds=None):  # noqa: E501
        """BetaTesterRelationships - a model defined in OpenAPI

        :param apps: The apps of this BetaTesterRelationships.  # noqa: E501
        :type apps: BetaTesterRelationshipsApps
        :param beta_groups: The beta_groups of this BetaTesterRelationships.  # noqa: E501
        :type beta_groups: AppRelationshipsBetaGroups
        :param builds: The builds of this BetaTesterRelationships.  # noqa: E501
        :type builds: AppRelationshipsBuilds
        """
        self.openapi_types = {
            'apps': BetaTesterRelationshipsApps,
            'beta_groups': AppRelationshipsBetaGroups,
            'builds': AppRelationshipsBuilds
        }

        self.attribute_map = {
            'apps': 'apps',
            'beta_groups': 'betaGroups',
            'builds': 'builds'
        }

        self._apps = apps
        self._beta_groups = beta_groups
        self._builds = builds

    @classmethod
    def from_dict(cls, dikt) -> 'BetaTesterRelationships':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BetaTester_relationships of this BetaTesterRelationships.  # noqa: E501
        :rtype: BetaTesterRelationships
        """
        return util.deserialize_model(dikt, cls)

    @property
    def apps(self) -> BetaTesterRelationshipsApps:
        """Gets the apps of this BetaTesterRelationships.


        :return: The apps of this BetaTesterRelationships.
        :rtype: BetaTesterRelationshipsApps
        """
        return self._apps

    @apps.setter
    def apps(self, apps: BetaTesterRelationshipsApps):
        """Sets the apps of this BetaTesterRelationships.


        :param apps: The apps of this BetaTesterRelationships.
        :type apps: BetaTesterRelationshipsApps
        """

        self._apps = apps

    @property
    def beta_groups(self) -> AppRelationshipsBetaGroups:
        """Gets the beta_groups of this BetaTesterRelationships.


        :return: The beta_groups of this BetaTesterRelationships.
        :rtype: AppRelationshipsBetaGroups
        """
        return self._beta_groups

    @beta_groups.setter
    def beta_groups(self, beta_groups: AppRelationshipsBetaGroups):
        """Sets the beta_groups of this BetaTesterRelationships.


        :param beta_groups: The beta_groups of this BetaTesterRelationships.
        :type beta_groups: AppRelationshipsBetaGroups
        """

        self._beta_groups = beta_groups

    @property
    def builds(self) -> AppRelationshipsBuilds:
        """Gets the builds of this BetaTesterRelationships.


        :return: The builds of this BetaTesterRelationships.
        :rtype: AppRelationshipsBuilds
        """
        return self._builds

    @builds.setter
    def builds(self, builds: AppRelationshipsBuilds):
        """Sets the builds of this BetaTesterRelationships.


        :param builds: The builds of this BetaTesterRelationships.
        :type builds: AppRelationshipsBuilds
        """

        self._builds = builds
