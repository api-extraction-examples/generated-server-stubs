from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.app_screenshot_set_attributes import AppScreenshotSetAttributes
from openapi_server.models.app_screenshot_set_relationships import AppScreenshotSetRelationships
from openapi_server.models.resource_links import ResourceLinks
from openapi_server import util

from openapi_server.models.app_screenshot_set_attributes import AppScreenshotSetAttributes  # noqa: E501
from openapi_server.models.app_screenshot_set_relationships import AppScreenshotSetRelationships  # noqa: E501
from openapi_server.models.resource_links import ResourceLinks  # noqa: E501

class AppScreenshotSet(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, attributes=None, id=None, links=None, relationships=None, type=None):  # noqa: E501
        """AppScreenshotSet - a model defined in OpenAPI

        :param attributes: The attributes of this AppScreenshotSet.  # noqa: E501
        :type attributes: AppScreenshotSetAttributes
        :param id: The id of this AppScreenshotSet.  # noqa: E501
        :type id: str
        :param links: The links of this AppScreenshotSet.  # noqa: E501
        :type links: ResourceLinks
        :param relationships: The relationships of this AppScreenshotSet.  # noqa: E501
        :type relationships: AppScreenshotSetRelationships
        :param type: The type of this AppScreenshotSet.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'attributes': AppScreenshotSetAttributes,
            'id': str,
            'links': ResourceLinks,
            'relationships': AppScreenshotSetRelationships,
            'type': str
        }

        self.attribute_map = {
            'attributes': 'attributes',
            'id': 'id',
            'links': 'links',
            'relationships': 'relationships',
            'type': 'type'
        }

        self._attributes = attributes
        self._id = id
        self._links = links
        self._relationships = relationships
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'AppScreenshotSet':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppScreenshotSet of this AppScreenshotSet.  # noqa: E501
        :rtype: AppScreenshotSet
        """
        return util.deserialize_model(dikt, cls)

    @property
    def attributes(self) -> AppScreenshotSetAttributes:
        """Gets the attributes of this AppScreenshotSet.


        :return: The attributes of this AppScreenshotSet.
        :rtype: AppScreenshotSetAttributes
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes: AppScreenshotSetAttributes):
        """Sets the attributes of this AppScreenshotSet.


        :param attributes: The attributes of this AppScreenshotSet.
        :type attributes: AppScreenshotSetAttributes
        """

        self._attributes = attributes

    @property
    def id(self) -> str:
        """Gets the id of this AppScreenshotSet.


        :return: The id of this AppScreenshotSet.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id: str):
        """Sets the id of this AppScreenshotSet.


        :param id: The id of this AppScreenshotSet.
        :type id: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def links(self) -> ResourceLinks:
        """Gets the links of this AppScreenshotSet.


        :return: The links of this AppScreenshotSet.
        :rtype: ResourceLinks
        """
        return self._links

    @links.setter
    def links(self, links: ResourceLinks):
        """Sets the links of this AppScreenshotSet.


        :param links: The links of this AppScreenshotSet.
        :type links: ResourceLinks
        """
        if links is None:
            raise ValueError("Invalid value for `links`, must not be `None`")  # noqa: E501

        self._links = links

    @property
    def relationships(self) -> AppScreenshotSetRelationships:
        """Gets the relationships of this AppScreenshotSet.


        :return: The relationships of this AppScreenshotSet.
        :rtype: AppScreenshotSetRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships: AppScreenshotSetRelationships):
        """Sets the relationships of this AppScreenshotSet.


        :param relationships: The relationships of this AppScreenshotSet.
        :type relationships: AppScreenshotSetRelationships
        """

        self._relationships = relationships

    @property
    def type(self) -> str:
        """Gets the type of this AppScreenshotSet.


        :return: The type of this AppScreenshotSet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this AppScreenshotSet.


        :param type: The type of this AppScreenshotSet.
        :type type: str
        """
        allowed_values = ["appScreenshotSets"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
