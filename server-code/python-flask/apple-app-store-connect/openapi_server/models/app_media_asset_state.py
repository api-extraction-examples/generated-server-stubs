from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.app_media_state_error import AppMediaStateError
from openapi_server import util

from openapi_server.models.app_media_state_error import AppMediaStateError  # noqa: E501

class AppMediaAssetState(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, errors=None, state=None, warnings=None):  # noqa: E501
        """AppMediaAssetState - a model defined in OpenAPI

        :param errors: The errors of this AppMediaAssetState.  # noqa: E501
        :type errors: List[AppMediaStateError]
        :param state: The state of this AppMediaAssetState.  # noqa: E501
        :type state: str
        :param warnings: The warnings of this AppMediaAssetState.  # noqa: E501
        :type warnings: List[AppMediaStateError]
        """
        self.openapi_types = {
            'errors': List[AppMediaStateError],
            'state': str,
            'warnings': List[AppMediaStateError]
        }

        self.attribute_map = {
            'errors': 'errors',
            'state': 'state',
            'warnings': 'warnings'
        }

        self._errors = errors
        self._state = state
        self._warnings = warnings

    @classmethod
    def from_dict(cls, dikt) -> 'AppMediaAssetState':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The AppMediaAssetState of this AppMediaAssetState.  # noqa: E501
        :rtype: AppMediaAssetState
        """
        return util.deserialize_model(dikt, cls)

    @property
    def errors(self) -> List[AppMediaStateError]:
        """Gets the errors of this AppMediaAssetState.


        :return: The errors of this AppMediaAssetState.
        :rtype: List[AppMediaStateError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors: List[AppMediaStateError]):
        """Sets the errors of this AppMediaAssetState.


        :param errors: The errors of this AppMediaAssetState.
        :type errors: List[AppMediaStateError]
        """

        self._errors = errors

    @property
    def state(self) -> str:
        """Gets the state of this AppMediaAssetState.


        :return: The state of this AppMediaAssetState.
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state: str):
        """Sets the state of this AppMediaAssetState.


        :param state: The state of this AppMediaAssetState.
        :type state: str
        """
        allowed_values = ["AWAITING_UPLOAD", "UPLOAD_COMPLETE", "COMPLETE", "FAILED"]  # noqa: E501
        if state not in allowed_values:
            raise ValueError(
                "Invalid value for `state` ({0}), must be one of {1}"
                .format(state, allowed_values)
            )

        self._state = state

    @property
    def warnings(self) -> List[AppMediaStateError]:
        """Gets the warnings of this AppMediaAssetState.


        :return: The warnings of this AppMediaAssetState.
        :rtype: List[AppMediaStateError]
        """
        return self._warnings

    @warnings.setter
    def warnings(self, warnings: List[AppMediaStateError]):
        """Sets the warnings of this AppMediaAssetState.


        :param warnings: The warnings of this AppMediaAssetState.
        :type warnings: List[AppMediaStateError]
        """

        self._warnings = warnings
