from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_id_platform import BundleIdPlatform
from openapi_server import util

from openapi_server.models.bundle_id_platform import BundleIdPlatform  # noqa: E501

class DeviceCreateRequestDataAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, name=None, platform=None, udid=None):  # noqa: E501
        """DeviceCreateRequestDataAttributes - a model defined in OpenAPI

        :param name: The name of this DeviceCreateRequestDataAttributes.  # noqa: E501
        :type name: str
        :param platform: The platform of this DeviceCreateRequestDataAttributes.  # noqa: E501
        :type platform: BundleIdPlatform
        :param udid: The udid of this DeviceCreateRequestDataAttributes.  # noqa: E501
        :type udid: str
        """
        self.openapi_types = {
            'name': str,
            'platform': BundleIdPlatform,
            'udid': str
        }

        self.attribute_map = {
            'name': 'name',
            'platform': 'platform',
            'udid': 'udid'
        }

        self._name = name
        self._platform = platform
        self._udid = udid

    @classmethod
    def from_dict(cls, dikt) -> 'DeviceCreateRequestDataAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The DeviceCreateRequest_data_attributes of this DeviceCreateRequestDataAttributes.  # noqa: E501
        :rtype: DeviceCreateRequestDataAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this DeviceCreateRequestDataAttributes.


        :return: The name of this DeviceCreateRequestDataAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this DeviceCreateRequestDataAttributes.


        :param name: The name of this DeviceCreateRequestDataAttributes.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def platform(self) -> BundleIdPlatform:
        """Gets the platform of this DeviceCreateRequestDataAttributes.


        :return: The platform of this DeviceCreateRequestDataAttributes.
        :rtype: BundleIdPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform: BundleIdPlatform):
        """Sets the platform of this DeviceCreateRequestDataAttributes.


        :param platform: The platform of this DeviceCreateRequestDataAttributes.
        :type platform: BundleIdPlatform
        """
        if platform is None:
            raise ValueError("Invalid value for `platform`, must not be `None`")  # noqa: E501

        self._platform = platform

    @property
    def udid(self) -> str:
        """Gets the udid of this DeviceCreateRequestDataAttributes.


        :return: The udid of this DeviceCreateRequestDataAttributes.
        :rtype: str
        """
        return self._udid

    @udid.setter
    def udid(self, udid: str):
        """Sets the udid of this DeviceCreateRequestDataAttributes.


        :param udid: The udid of this DeviceCreateRequestDataAttributes.
        :type udid: str
        """
        if udid is None:
            raise ValueError("Invalid value for `udid`, must not be `None`")  # noqa: E501

        self._udid = udid
