from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server import util


class PagingInformationPaging(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, limit=None, total=None):  # noqa: E501
        """PagingInformationPaging - a model defined in OpenAPI

        :param limit: The limit of this PagingInformationPaging.  # noqa: E501
        :type limit: int
        :param total: The total of this PagingInformationPaging.  # noqa: E501
        :type total: int
        """
        self.openapi_types = {
            'limit': int,
            'total': int
        }

        self.attribute_map = {
            'limit': 'limit',
            'total': 'total'
        }

        self._limit = limit
        self._total = total

    @classmethod
    def from_dict(cls, dikt) -> 'PagingInformationPaging':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The PagingInformation_paging of this PagingInformationPaging.  # noqa: E501
        :rtype: PagingInformationPaging
        """
        return util.deserialize_model(dikt, cls)

    @property
    def limit(self) -> int:
        """Gets the limit of this PagingInformationPaging.


        :return: The limit of this PagingInformationPaging.
        :rtype: int
        """
        return self._limit

    @limit.setter
    def limit(self, limit: int):
        """Sets the limit of this PagingInformationPaging.


        :param limit: The limit of this PagingInformationPaging.
        :type limit: int
        """
        if limit is None:
            raise ValueError("Invalid value for `limit`, must not be `None`")  # noqa: E501

        self._limit = limit

    @property
    def total(self) -> int:
        """Gets the total of this PagingInformationPaging.


        :return: The total of this PagingInformationPaging.
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total: int):
        """Sets the total of this PagingInformationPaging.


        :param total: The total of this PagingInformationPaging.
        :type total: int
        """
        if total is None:
            raise ValueError("Invalid value for `total`, must not be `None`")  # noqa: E501

        self._total = total
