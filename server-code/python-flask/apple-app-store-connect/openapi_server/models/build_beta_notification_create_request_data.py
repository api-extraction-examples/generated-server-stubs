from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.beta_app_review_submission_create_request_data_relationships import BetaAppReviewSubmissionCreateRequestDataRelationships
from openapi_server import util

from openapi_server.models.beta_app_review_submission_create_request_data_relationships import BetaAppReviewSubmissionCreateRequestDataRelationships  # noqa: E501

class BuildBetaNotificationCreateRequestData(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, relationships=None, type=None):  # noqa: E501
        """BuildBetaNotificationCreateRequestData - a model defined in OpenAPI

        :param relationships: The relationships of this BuildBetaNotificationCreateRequestData.  # noqa: E501
        :type relationships: BetaAppReviewSubmissionCreateRequestDataRelationships
        :param type: The type of this BuildBetaNotificationCreateRequestData.  # noqa: E501
        :type type: str
        """
        self.openapi_types = {
            'relationships': BetaAppReviewSubmissionCreateRequestDataRelationships,
            'type': str
        }

        self.attribute_map = {
            'relationships': 'relationships',
            'type': 'type'
        }

        self._relationships = relationships
        self._type = type

    @classmethod
    def from_dict(cls, dikt) -> 'BuildBetaNotificationCreateRequestData':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The BuildBetaNotificationCreateRequest_data of this BuildBetaNotificationCreateRequestData.  # noqa: E501
        :rtype: BuildBetaNotificationCreateRequestData
        """
        return util.deserialize_model(dikt, cls)

    @property
    def relationships(self) -> BetaAppReviewSubmissionCreateRequestDataRelationships:
        """Gets the relationships of this BuildBetaNotificationCreateRequestData.


        :return: The relationships of this BuildBetaNotificationCreateRequestData.
        :rtype: BetaAppReviewSubmissionCreateRequestDataRelationships
        """
        return self._relationships

    @relationships.setter
    def relationships(self, relationships: BetaAppReviewSubmissionCreateRequestDataRelationships):
        """Sets the relationships of this BuildBetaNotificationCreateRequestData.


        :param relationships: The relationships of this BuildBetaNotificationCreateRequestData.
        :type relationships: BetaAppReviewSubmissionCreateRequestDataRelationships
        """
        if relationships is None:
            raise ValueError("Invalid value for `relationships`, must not be `None`")  # noqa: E501

        self._relationships = relationships

    @property
    def type(self) -> str:
        """Gets the type of this BuildBetaNotificationCreateRequestData.


        :return: The type of this BuildBetaNotificationCreateRequestData.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type: str):
        """Sets the type of this BuildBetaNotificationCreateRequestData.


        :param type: The type of this BuildBetaNotificationCreateRequestData.
        :type type: str
        """
        allowed_values = ["buildBetaNotifications"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type
