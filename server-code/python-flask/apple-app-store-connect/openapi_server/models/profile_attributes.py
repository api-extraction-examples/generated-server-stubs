from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.bundle_id_platform import BundleIdPlatform
from openapi_server import util

from openapi_server.models.bundle_id_platform import BundleIdPlatform  # noqa: E501

class ProfileAttributes(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, created_date=None, expiration_date=None, name=None, platform=None, profile_content=None, profile_state=None, profile_type=None, uuid=None):  # noqa: E501
        """ProfileAttributes - a model defined in OpenAPI

        :param created_date: The created_date of this ProfileAttributes.  # noqa: E501
        :type created_date: datetime
        :param expiration_date: The expiration_date of this ProfileAttributes.  # noqa: E501
        :type expiration_date: datetime
        :param name: The name of this ProfileAttributes.  # noqa: E501
        :type name: str
        :param platform: The platform of this ProfileAttributes.  # noqa: E501
        :type platform: BundleIdPlatform
        :param profile_content: The profile_content of this ProfileAttributes.  # noqa: E501
        :type profile_content: str
        :param profile_state: The profile_state of this ProfileAttributes.  # noqa: E501
        :type profile_state: str
        :param profile_type: The profile_type of this ProfileAttributes.  # noqa: E501
        :type profile_type: str
        :param uuid: The uuid of this ProfileAttributes.  # noqa: E501
        :type uuid: str
        """
        self.openapi_types = {
            'created_date': datetime,
            'expiration_date': datetime,
            'name': str,
            'platform': BundleIdPlatform,
            'profile_content': str,
            'profile_state': str,
            'profile_type': str,
            'uuid': str
        }

        self.attribute_map = {
            'created_date': 'createdDate',
            'expiration_date': 'expirationDate',
            'name': 'name',
            'platform': 'platform',
            'profile_content': 'profileContent',
            'profile_state': 'profileState',
            'profile_type': 'profileType',
            'uuid': 'uuid'
        }

        self._created_date = created_date
        self._expiration_date = expiration_date
        self._name = name
        self._platform = platform
        self._profile_content = profile_content
        self._profile_state = profile_state
        self._profile_type = profile_type
        self._uuid = uuid

    @classmethod
    def from_dict(cls, dikt) -> 'ProfileAttributes':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Profile_attributes of this ProfileAttributes.  # noqa: E501
        :rtype: ProfileAttributes
        """
        return util.deserialize_model(dikt, cls)

    @property
    def created_date(self) -> datetime:
        """Gets the created_date of this ProfileAttributes.


        :return: The created_date of this ProfileAttributes.
        :rtype: datetime
        """
        return self._created_date

    @created_date.setter
    def created_date(self, created_date: datetime):
        """Sets the created_date of this ProfileAttributes.


        :param created_date: The created_date of this ProfileAttributes.
        :type created_date: datetime
        """

        self._created_date = created_date

    @property
    def expiration_date(self) -> datetime:
        """Gets the expiration_date of this ProfileAttributes.


        :return: The expiration_date of this ProfileAttributes.
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date: datetime):
        """Sets the expiration_date of this ProfileAttributes.


        :param expiration_date: The expiration_date of this ProfileAttributes.
        :type expiration_date: datetime
        """

        self._expiration_date = expiration_date

    @property
    def name(self) -> str:
        """Gets the name of this ProfileAttributes.


        :return: The name of this ProfileAttributes.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this ProfileAttributes.


        :param name: The name of this ProfileAttributes.
        :type name: str
        """

        self._name = name

    @property
    def platform(self) -> BundleIdPlatform:
        """Gets the platform of this ProfileAttributes.


        :return: The platform of this ProfileAttributes.
        :rtype: BundleIdPlatform
        """
        return self._platform

    @platform.setter
    def platform(self, platform: BundleIdPlatform):
        """Sets the platform of this ProfileAttributes.


        :param platform: The platform of this ProfileAttributes.
        :type platform: BundleIdPlatform
        """

        self._platform = platform

    @property
    def profile_content(self) -> str:
        """Gets the profile_content of this ProfileAttributes.


        :return: The profile_content of this ProfileAttributes.
        :rtype: str
        """
        return self._profile_content

    @profile_content.setter
    def profile_content(self, profile_content: str):
        """Sets the profile_content of this ProfileAttributes.


        :param profile_content: The profile_content of this ProfileAttributes.
        :type profile_content: str
        """

        self._profile_content = profile_content

    @property
    def profile_state(self) -> str:
        """Gets the profile_state of this ProfileAttributes.


        :return: The profile_state of this ProfileAttributes.
        :rtype: str
        """
        return self._profile_state

    @profile_state.setter
    def profile_state(self, profile_state: str):
        """Sets the profile_state of this ProfileAttributes.


        :param profile_state: The profile_state of this ProfileAttributes.
        :type profile_state: str
        """
        allowed_values = ["ACTIVE", "INVALID"]  # noqa: E501
        if profile_state not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_state` ({0}), must be one of {1}"
                .format(profile_state, allowed_values)
            )

        self._profile_state = profile_state

    @property
    def profile_type(self) -> str:
        """Gets the profile_type of this ProfileAttributes.


        :return: The profile_type of this ProfileAttributes.
        :rtype: str
        """
        return self._profile_type

    @profile_type.setter
    def profile_type(self, profile_type: str):
        """Sets the profile_type of this ProfileAttributes.


        :param profile_type: The profile_type of this ProfileAttributes.
        :type profile_type: str
        """
        allowed_values = ["IOS_APP_DEVELOPMENT", "IOS_APP_STORE", "IOS_APP_ADHOC", "IOS_APP_INHOUSE", "MAC_APP_DEVELOPMENT", "MAC_APP_STORE", "MAC_APP_DIRECT", "TVOS_APP_DEVELOPMENT", "TVOS_APP_STORE", "TVOS_APP_ADHOC", "TVOS_APP_INHOUSE", "MAC_CATALYST_APP_DEVELOPMENT", "MAC_CATALYST_APP_STORE", "MAC_CATALYST_APP_DIRECT"]  # noqa: E501
        if profile_type not in allowed_values:
            raise ValueError(
                "Invalid value for `profile_type` ({0}), must be one of {1}"
                .format(profile_type, allowed_values)
            )

        self._profile_type = profile_type

    @property
    def uuid(self) -> str:
        """Gets the uuid of this ProfileAttributes.


        :return: The uuid of this ProfileAttributes.
        :rtype: str
        """
        return self._uuid

    @uuid.setter
    def uuid(self, uuid: str):
        """Sets the uuid of this ProfileAttributes.


        :param uuid: The uuid of this ProfileAttributes.
        :type uuid: str
        """

        self._uuid = uuid
