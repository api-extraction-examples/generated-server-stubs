from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from openapi_server.models.base_model import Model
from openapi_server.models.account_auto_collection import AccountAutoCollection
from openapi_server.models.account_status import AccountStatus
from openapi_server.models.plan import Plan
from openapi_server import util

from openapi_server.models.account_auto_collection import AccountAutoCollection  # noqa: E501
from openapi_server.models.account_status import AccountStatus  # noqa: E501
from openapi_server.models.plan import Plan  # noqa: E501

class Account(Model):
    """NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).

    Do not edit the class manually.
    """

    def __init__(self, auto_collection=None, balance=None, balance_currency_code=None, free_target_quantity=None, has_used_trial=None, heroku=None, next_billing_at=None, plan=None, plan_target_quantity=None, pool_size=None, status=None, trial_end=None):  # noqa: E501
        """Account - a model defined in OpenAPI

        :param auto_collection: The auto_collection of this Account.  # noqa: E501
        :type auto_collection: AccountAutoCollection
        :param balance: The balance of this Account.  # noqa: E501
        :type balance: int
        :param balance_currency_code: The balance_currency_code of this Account.  # noqa: E501
        :type balance_currency_code: str
        :param free_target_quantity: The free_target_quantity of this Account.  # noqa: E501
        :type free_target_quantity: int
        :param has_used_trial: The has_used_trial of this Account.  # noqa: E501
        :type has_used_trial: bool
        :param heroku: The heroku of this Account.  # noqa: E501
        :type heroku: bool
        :param next_billing_at: The next_billing_at of this Account.  # noqa: E501
        :type next_billing_at: date
        :param plan: The plan of this Account.  # noqa: E501
        :type plan: Plan
        :param plan_target_quantity: The plan_target_quantity of this Account.  # noqa: E501
        :type plan_target_quantity: int
        :param pool_size: The pool_size of this Account.  # noqa: E501
        :type pool_size: int
        :param status: The status of this Account.  # noqa: E501
        :type status: AccountStatus
        :param trial_end: The trial_end of this Account.  # noqa: E501
        :type trial_end: datetime
        """
        self.openapi_types = {
            'auto_collection': AccountAutoCollection,
            'balance': int,
            'balance_currency_code': str,
            'free_target_quantity': int,
            'has_used_trial': bool,
            'heroku': bool,
            'next_billing_at': date,
            'plan': Plan,
            'plan_target_quantity': int,
            'pool_size': int,
            'status': AccountStatus,
            'trial_end': datetime
        }

        self.attribute_map = {
            'auto_collection': 'auto_collection',
            'balance': 'balance',
            'balance_currency_code': 'balance_currency_code',
            'free_target_quantity': 'free_target_quantity',
            'has_used_trial': 'has_used_trial',
            'heroku': 'heroku',
            'next_billing_at': 'next_billing_at',
            'plan': 'plan',
            'plan_target_quantity': 'plan_target_quantity',
            'pool_size': 'pool_size',
            'status': 'status',
            'trial_end': 'trialEnd'
        }

        self._auto_collection = auto_collection
        self._balance = balance
        self._balance_currency_code = balance_currency_code
        self._free_target_quantity = free_target_quantity
        self._has_used_trial = has_used_trial
        self._heroku = heroku
        self._next_billing_at = next_billing_at
        self._plan = plan
        self._plan_target_quantity = plan_target_quantity
        self._pool_size = pool_size
        self._status = status
        self._trial_end = trial_end

    @classmethod
    def from_dict(cls, dikt) -> 'Account':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Account of this Account.  # noqa: E501
        :rtype: Account
        """
        return util.deserialize_model(dikt, cls)

    @property
    def auto_collection(self) -> AccountAutoCollection:
        """Gets the auto_collection of this Account.


        :return: The auto_collection of this Account.
        :rtype: AccountAutoCollection
        """
        return self._auto_collection

    @auto_collection.setter
    def auto_collection(self, auto_collection: AccountAutoCollection):
        """Sets the auto_collection of this Account.


        :param auto_collection: The auto_collection of this Account.
        :type auto_collection: AccountAutoCollection
        """

        self._auto_collection = auto_collection

    @property
    def balance(self) -> int:
        """Gets the balance of this Account.

        Account balance in cents  # noqa: E501

        :return: The balance of this Account.
        :rtype: int
        """
        return self._balance

    @balance.setter
    def balance(self, balance: int):
        """Sets the balance of this Account.

        Account balance in cents  # noqa: E501

        :param balance: The balance of this Account.
        :type balance: int
        """

        self._balance = balance

    @property
    def balance_currency_code(self) -> str:
        """Gets the balance_currency_code of this Account.

        3 letter currency code  # noqa: E501

        :return: The balance_currency_code of this Account.
        :rtype: str
        """
        return self._balance_currency_code

    @balance_currency_code.setter
    def balance_currency_code(self, balance_currency_code: str):
        """Sets the balance_currency_code of this Account.

        3 letter currency code  # noqa: E501

        :param balance_currency_code: The balance_currency_code of this Account.
        :type balance_currency_code: str
        """

        self._balance_currency_code = balance_currency_code

    @property
    def free_target_quantity(self) -> int:
        """Gets the free_target_quantity of this Account.

        Number of free targets  # noqa: E501

        :return: The free_target_quantity of this Account.
        :rtype: int
        """
        return self._free_target_quantity

    @free_target_quantity.setter
    def free_target_quantity(self, free_target_quantity: int):
        """Sets the free_target_quantity of this Account.

        Number of free targets  # noqa: E501

        :param free_target_quantity: The free_target_quantity of this Account.
        :type free_target_quantity: int
        """

        self._free_target_quantity = free_target_quantity

    @property
    def has_used_trial(self) -> bool:
        """Gets the has_used_trial of this Account.

        Has account used up it's trial  # noqa: E501

        :return: The has_used_trial of this Account.
        :rtype: bool
        """
        return self._has_used_trial

    @has_used_trial.setter
    def has_used_trial(self, has_used_trial: bool):
        """Sets the has_used_trial of this Account.

        Has account used up it's trial  # noqa: E501

        :param has_used_trial: The has_used_trial of this Account.
        :type has_used_trial: bool
        """

        self._has_used_trial = has_used_trial

    @property
    def heroku(self) -> bool:
        """Gets the heroku of this Account.

        Heroku accounts (for future use)  # noqa: E501

        :return: The heroku of this Account.
        :rtype: bool
        """
        return self._heroku

    @heroku.setter
    def heroku(self, heroku: bool):
        """Sets the heroku of this Account.

        Heroku accounts (for future use)  # noqa: E501

        :param heroku: The heroku of this Account.
        :type heroku: bool
        """

        self._heroku = heroku

    @property
    def next_billing_at(self) -> date:
        """Gets the next_billing_at of this Account.

        Date of next billing  # noqa: E501

        :return: The next_billing_at of this Account.
        :rtype: date
        """
        return self._next_billing_at

    @next_billing_at.setter
    def next_billing_at(self, next_billing_at: date):
        """Sets the next_billing_at of this Account.

        Date of next billing  # noqa: E501

        :param next_billing_at: The next_billing_at of this Account.
        :type next_billing_at: date
        """

        self._next_billing_at = next_billing_at

    @property
    def plan(self) -> Plan:
        """Gets the plan of this Account.


        :return: The plan of this Account.
        :rtype: Plan
        """
        return self._plan

    @plan.setter
    def plan(self, plan: Plan):
        """Sets the plan of this Account.


        :param plan: The plan of this Account.
        :type plan: Plan
        """

        self._plan = plan

    @property
    def plan_target_quantity(self) -> int:
        """Gets the plan_target_quantity of this Account.

        Number of subscribed targets  # noqa: E501

        :return: The plan_target_quantity of this Account.
        :rtype: int
        """
        return self._plan_target_quantity

    @plan_target_quantity.setter
    def plan_target_quantity(self, plan_target_quantity: int):
        """Sets the plan_target_quantity of this Account.

        Number of subscribed targets  # noqa: E501

        :param plan_target_quantity: The plan_target_quantity of this Account.
        :type plan_target_quantity: int
        """

        self._plan_target_quantity = plan_target_quantity

    @property
    def pool_size(self) -> int:
        """Gets the pool_size of this Account.

        Maximum number of subscribed target for pool plans  # noqa: E501

        :return: The pool_size of this Account.
        :rtype: int
        """
        return self._pool_size

    @pool_size.setter
    def pool_size(self, pool_size: int):
        """Sets the pool_size of this Account.

        Maximum number of subscribed target for pool plans  # noqa: E501

        :param pool_size: The pool_size of this Account.
        :type pool_size: int
        """

        self._pool_size = pool_size

    @property
    def status(self) -> AccountStatus:
        """Gets the status of this Account.


        :return: The status of this Account.
        :rtype: AccountStatus
        """
        return self._status

    @status.setter
    def status(self, status: AccountStatus):
        """Sets the status of this Account.


        :param status: The status of this Account.
        :type status: AccountStatus
        """

        self._status = status

    @property
    def trial_end(self) -> datetime:
        """Gets the trial_end of this Account.

        Trial termination date  # noqa: E501

        :return: The trial_end of this Account.
        :rtype: datetime
        """
        return self._trial_end

    @trial_end.setter
    def trial_end(self, trial_end: datetime):
        """Sets the trial_end of this Account.

        Trial termination date  # noqa: E501

        :param trial_end: The trial_end of this Account.
        :type trial_end: datetime
        """

        self._trial_end = trial_end
