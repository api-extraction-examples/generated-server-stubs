/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// Dealer - the representation of an dealer
type Dealer struct {

	Links SelfLink `json:"_links"`

	Address Address `json:"address,omitempty"`

	// network brand codes of the dealer, dealer numbers
	BrandCodes []BrandCode `json:"brandCodes,omitempty"`

	Communication CommunicationChannels `json:"communication,omitempty"`

	// GSSN unique ID, main identifier
	DealerId string `json:"dealerId"`

	Distance TheDistance `json:"distance,omitempty"`

	// list of functions for the dealer
	Functions []Function `json:"functions,omitempty"`

	GeoCoordinates GeoCoordinates `json:"geoCoordinates,omitempty"`

	// legal name of the company
	LegalName string `json:"legalName"`

	// name addition, country specific use
	NameAddition string `json:"nameAddition,omitempty"`

	// List of opening hours for each customer relevant function for each day 
	OpeningHours []FunctionOpeningHours `json:"openingHours,omitempty"`

	Region RegionRepresentation `json:"region,omitempty"`
}

// AssertDealerRequired checks if the required fields are not zero-ed
func AssertDealerRequired(obj Dealer) error {
	elements := map[string]interface{}{
		"_links": obj.Links,
		"dealerId": obj.DealerId,
		"legalName": obj.LegalName,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertSelfLinkRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertAddressRequired(obj.Address); err != nil {
		return err
	}
	for _, el := range obj.BrandCodes {
		if err := AssertBrandCodeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertCommunicationChannelsRequired(obj.Communication); err != nil {
		return err
	}
	if err := AssertTheDistanceRequired(obj.Distance); err != nil {
		return err
	}
	for _, el := range obj.Functions {
		if err := AssertFunctionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertGeoCoordinatesRequired(obj.GeoCoordinates); err != nil {
		return err
	}
	for _, el := range obj.OpeningHours {
		if err := AssertFunctionOpeningHoursRequired(el); err != nil {
			return err
		}
	}
	if err := AssertRegionRepresentationRequired(obj.Region); err != nil {
		return err
	}
	return nil
}

// AssertDealerConstraints checks if the values respects the defined constraints
func AssertDealerConstraints(obj Dealer) error {
	return nil
}
