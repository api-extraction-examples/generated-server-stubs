/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReferencesAPIController binds http requests to an api service and writes the service results to the http response
type ReferencesAPIController struct {
	service ReferencesAPIServicer
	errorHandler ErrorHandler
}

// ReferencesAPIOption for how the controller is set up.
type ReferencesAPIOption func(*ReferencesAPIController)

// WithReferencesAPIErrorHandler inject ErrorHandler into controller
func WithReferencesAPIErrorHandler(h ErrorHandler) ReferencesAPIOption {
	return func(c *ReferencesAPIController) {
		c.errorHandler = h
	}
}

// NewReferencesAPIController creates a default api controller
func NewReferencesAPIController(s ReferencesAPIServicer, opts ...ReferencesAPIOption) Router {
	controller := &ReferencesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReferencesAPIController
func (c *ReferencesAPIController) Routes() Routes {
	return Routes{
		"CountriesGET": Route{
			strings.ToUpper("Get"),
			"/dealer_tryout/v1/countries",
			c.CountriesGET,
		},
	}
}

// CountriesGET - 
func (c *ReferencesAPIController) CountriesGET(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.CountriesGET(r.Context(), pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
