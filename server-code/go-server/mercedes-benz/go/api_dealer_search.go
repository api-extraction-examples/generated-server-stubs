/*
 * Dealer
 *
 * The Dealer API provides Dealer search functions.
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DealerSearchAPIController binds http requests to an api service and writes the service results to the http response
type DealerSearchAPIController struct {
	service DealerSearchAPIServicer
	errorHandler ErrorHandler
}

// DealerSearchAPIOption for how the controller is set up.
type DealerSearchAPIOption func(*DealerSearchAPIController)

// WithDealerSearchAPIErrorHandler inject ErrorHandler into controller
func WithDealerSearchAPIErrorHandler(h ErrorHandler) DealerSearchAPIOption {
	return func(c *DealerSearchAPIController) {
		c.errorHandler = h
	}
}

// NewDealerSearchAPIController creates a default api controller
func NewDealerSearchAPIController(s DealerSearchAPIServicer, opts ...DealerSearchAPIOption) Router {
	controller := &DealerSearchAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DealerSearchAPIController
func (c *DealerSearchAPIController) Routes() Routes {
	return Routes{
		"DealerGET": Route{
			strings.ToUpper("Get"),
			"/dealer_tryout/v1/dealers/{dealerId}",
			c.DealerGET,
		},
		"DealersGET": Route{
			strings.ToUpper("Get"),
			"/dealer_tryout/v1/dealers",
			c.DealersGET,
		},
	}
}

// DealerGET - 
func (c *DealerSearchAPIController) DealerGET(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	dealerIdParam := params["dealerId"]
	if dealerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dealerId"}, nil)
		return
	}
	var fieldsParam string
	if query.Has("fields") {
		param := query.Get("fields")

		fieldsParam = param
	} else {
	}
	result, err := c.service.DealerGET(r.Context(), dealerIdParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DealersGET - 
func (c *DealerSearchAPIController) DealersGET(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dealerIdsParam []string
	if query.Has("dealerIds") {
		dealerIdsParam = strings.Split(query.Get("dealerIds"), ",")
	}
	var latitudeParam float32
	if query.Has("latitude") {
		param, err := parseNumericParameter[float32](
			query.Get("latitude"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		latitudeParam = param
	} else {
	}
	var longitudeParam float32
	if query.Has("longitude") {
		param, err := parseNumericParameter[float32](
			query.Get("longitude"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		longitudeParam = param
	} else {
	}
	var radiusValueParam int32
	if query.Has("radiusValue") {
		param, err := parseNumericParameter[int32](
			query.Get("radiusValue"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		radiusValueParam = param
	} else {
		var param int32 = 10
		radiusValueParam = param
	}
	var radiusUnitParam string
	if query.Has("radiusUnit") {
		param := query.Get("radiusUnit")

		radiusUnitParam = param
	} else {
		param := KM
		radiusUnitParam = param
	}
	var countryIsoCodeParam string
	if query.Has("countryIsoCode") {
		param := query.Get("countryIsoCode")

		countryIsoCodeParam = param
	} else {
	}
	var cityParam string
	if query.Has("city") {
		param := query.Get("city")

		cityParam = param
	} else {
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	var brandParam string
	if query.Has("brand") {
		param := query.Get("brand")

		brandParam = param
	} else {
	}
	var productGroupParam string
	if query.Has("productGroup") {
		param := query.Get("productGroup")

		productGroupParam = param
	} else {
	}
	var activityParam string
	if query.Has("activity") {
		param := query.Get("activity")

		activityParam = param
	} else {
	}
	var fieldsParam string
	if query.Has("fields") {
		param := query.Get("fields")

		fieldsParam = param
	} else {
	}
	var pageParam int32
	if query.Has("page") {
		param, err := parseNumericParameter[int32](
			query.Get("page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("pageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("pageSize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	result, err := c.service.DealersGET(r.Context(), dealerIdsParam, latitudeParam, longitudeParam, radiusValueParam, radiusUnitParam, countryIsoCodeParam, cityParam, nameParam, brandParam, productGroupParam, activityParam, fieldsParam, pageParam, pageSizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
