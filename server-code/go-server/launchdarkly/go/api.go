/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"reflect"
)



// AccessTokensAPIRouter defines the required methods for binding the api requests to a responses for the AccessTokensAPI
// The AccessTokensAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AccessTokensAPIServicer to perform the required actions, then write the service results to the http response.
type AccessTokensAPIRouter interface { 
	DeleteToken(http.ResponseWriter, *http.Request)
	GetToken(http.ResponseWriter, *http.Request)
	GetTokens(http.ResponseWriter, *http.Request)
	PatchToken(http.ResponseWriter, *http.Request)
	PostToken(http.ResponseWriter, *http.Request)
	ResetToken(http.ResponseWriter, *http.Request)
}
// AuditLogAPIRouter defines the required methods for binding the api requests to a responses for the AuditLogAPI
// The AuditLogAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuditLogAPIServicer to perform the required actions, then write the service results to the http response.
type AuditLogAPIRouter interface { 
	GetAuditLogEntries(http.ResponseWriter, *http.Request)
	GetAuditLogEntry(http.ResponseWriter, *http.Request)
}
// CustomRolesAPIRouter defines the required methods for binding the api requests to a responses for the CustomRolesAPI
// The CustomRolesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CustomRolesAPIServicer to perform the required actions, then write the service results to the http response.
type CustomRolesAPIRouter interface { 
	DeleteCustomRole(http.ResponseWriter, *http.Request)
	GetCustomRole(http.ResponseWriter, *http.Request)
	GetCustomRoles(http.ResponseWriter, *http.Request)
	PatchCustomRole(http.ResponseWriter, *http.Request)
	PostCustomRole(http.ResponseWriter, *http.Request)
}
// CustomerMetricsAPIRouter defines the required methods for binding the api requests to a responses for the CustomerMetricsAPI
// The CustomerMetricsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CustomerMetricsAPIServicer to perform the required actions, then write the service results to the http response.
type CustomerMetricsAPIRouter interface { 
	GetEvaluations(http.ResponseWriter, *http.Request)
	GetEvent(http.ResponseWriter, *http.Request)
	GetEvents(http.ResponseWriter, *http.Request)
	GetMAU(http.ResponseWriter, *http.Request)
	GetMAUByCategory(http.ResponseWriter, *http.Request)
	GetStream(http.ResponseWriter, *http.Request)
	GetStreamBySDK(http.ResponseWriter, *http.Request)
	GetStreamSDKVersion(http.ResponseWriter, *http.Request)
	GetStreams(http.ResponseWriter, *http.Request)
	GetUsage(http.ResponseWriter, *http.Request)
}
// DataExportDestinationsAPIRouter defines the required methods for binding the api requests to a responses for the DataExportDestinationsAPI
// The DataExportDestinationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DataExportDestinationsAPIServicer to perform the required actions, then write the service results to the http response.
type DataExportDestinationsAPIRouter interface { 
	DeleteDestination(http.ResponseWriter, *http.Request)
	GetDestination(http.ResponseWriter, *http.Request)
	GetDestinations(http.ResponseWriter, *http.Request)
	PatchDestination(http.ResponseWriter, *http.Request)
	PostDestination(http.ResponseWriter, *http.Request)
}
// EnvironmentsAPIRouter defines the required methods for binding the api requests to a responses for the EnvironmentsAPI
// The EnvironmentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EnvironmentsAPIServicer to perform the required actions, then write the service results to the http response.
type EnvironmentsAPIRouter interface { 
	DeleteEnvironment(http.ResponseWriter, *http.Request)
	GetEnvironment(http.ResponseWriter, *http.Request)
	PatchEnvironment(http.ResponseWriter, *http.Request)
	PostEnvironment(http.ResponseWriter, *http.Request)
	ResetEnvironmentMobileKey(http.ResponseWriter, *http.Request)
	ResetEnvironmentSDKKey(http.ResponseWriter, *http.Request)
}
// FeatureFlagsAPIRouter defines the required methods for binding the api requests to a responses for the FeatureFlagsAPI
// The FeatureFlagsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FeatureFlagsAPIServicer to perform the required actions, then write the service results to the http response.
type FeatureFlagsAPIRouter interface { 
	CopyFeatureFlag(http.ResponseWriter, *http.Request)
	DeleteApprovalRequest(http.ResponseWriter, *http.Request)
	DeleteFeatureFlag(http.ResponseWriter, *http.Request)
	DeleteFlagConfigScheduledChanges(http.ResponseWriter, *http.Request)
	FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(http.ResponseWriter, *http.Request)
	FlagsProjectKeyFeatureFlagKeyDependentFlagsGet(http.ResponseWriter, *http.Request)
	GetApprovalRequest(http.ResponseWriter, *http.Request)
	GetApprovalRequests(http.ResponseWriter, *http.Request)
	GetExpiringUserTargets(http.ResponseWriter, *http.Request)
	GetFeatureFlag(http.ResponseWriter, *http.Request)
	GetFeatureFlagStatus(http.ResponseWriter, *http.Request)
	GetFeatureFlagStatusAcrossEnvironments(http.ResponseWriter, *http.Request)
	GetFeatureFlagStatuses(http.ResponseWriter, *http.Request)
	GetFeatureFlags(http.ResponseWriter, *http.Request)
	GetFlagConfigScheduledChange(http.ResponseWriter, *http.Request)
	GetFlagConfigScheduledChanges(http.ResponseWriter, *http.Request)
	GetFlagConfigScheduledChangesConflicts(http.ResponseWriter, *http.Request)
	PatchExpiringUserTargets(http.ResponseWriter, *http.Request)
	PatchFeatureFlag(http.ResponseWriter, *http.Request)
	PatchFlagConfigScheduledChange(http.ResponseWriter, *http.Request)
	PostApplyApprovalRequest(http.ResponseWriter, *http.Request)
	PostApprovalRequest(http.ResponseWriter, *http.Request)
	PostFeatureFlag(http.ResponseWriter, *http.Request)
	PostFlagConfigScheduledChanges(http.ResponseWriter, *http.Request)
	PostReviewApprovalRequest(http.ResponseWriter, *http.Request)
}
// IntegrationsAPIRouter defines the required methods for binding the api requests to a responses for the IntegrationsAPI
// The IntegrationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IntegrationsAPIServicer to perform the required actions, then write the service results to the http response.
type IntegrationsAPIRouter interface { 
	DeleteIntegrationSubscription(http.ResponseWriter, *http.Request)
	GetIntegrationSubscription(http.ResponseWriter, *http.Request)
	GetIntegrationSubscriptions(http.ResponseWriter, *http.Request)
	GetIntegrations(http.ResponseWriter, *http.Request)
	PatchIntegrationSubscription(http.ResponseWriter, *http.Request)
	PostIntegrationSubscription(http.ResponseWriter, *http.Request)
}
// ProjectsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectsAPI
// The ProjectsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectsAPIRouter interface { 
	DeleteProject(http.ResponseWriter, *http.Request)
	GetProject(http.ResponseWriter, *http.Request)
	GetProjects(http.ResponseWriter, *http.Request)
	PatchProject(http.ResponseWriter, *http.Request)
	PostProject(http.ResponseWriter, *http.Request)
}
// RelayProxyConfigurationsAPIRouter defines the required methods for binding the api requests to a responses for the RelayProxyConfigurationsAPI
// The RelayProxyConfigurationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RelayProxyConfigurationsAPIServicer to perform the required actions, then write the service results to the http response.
type RelayProxyConfigurationsAPIRouter interface { 
	DeleteRelayProxyConfig(http.ResponseWriter, *http.Request)
	GetRelayProxyConfig(http.ResponseWriter, *http.Request)
	GetRelayProxyConfigs(http.ResponseWriter, *http.Request)
	PatchRelayProxyConfig(http.ResponseWriter, *http.Request)
	PostRelayAutoConfig(http.ResponseWriter, *http.Request)
	ResetRelayProxyConfig(http.ResponseWriter, *http.Request)
}
// RootAPIRouter defines the required methods for binding the api requests to a responses for the RootAPI
// The RootAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RootAPIServicer to perform the required actions, then write the service results to the http response.
type RootAPIRouter interface { 
	GetRoot(http.ResponseWriter, *http.Request)
}
// TeamMembersAPIRouter defines the required methods for binding the api requests to a responses for the TeamMembersAPI
// The TeamMembersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TeamMembersAPIServicer to perform the required actions, then write the service results to the http response.
type TeamMembersAPIRouter interface { 
	DeleteMember(http.ResponseWriter, *http.Request)
	GetMe(http.ResponseWriter, *http.Request)
	GetMember(http.ResponseWriter, *http.Request)
	GetMembers(http.ResponseWriter, *http.Request)
	PatchMember(http.ResponseWriter, *http.Request)
	PostMembers(http.ResponseWriter, *http.Request)
}
// UserSegmentsAPIRouter defines the required methods for binding the api requests to a responses for the UserSegmentsAPI
// The UserSegmentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserSegmentsAPIServicer to perform the required actions, then write the service results to the http response.
type UserSegmentsAPIRouter interface { 
	DeleteUserSegment(http.ResponseWriter, *http.Request)
	GetExpiringUserTargetsOnSegment(http.ResponseWriter, *http.Request)
	GetUserSegment(http.ResponseWriter, *http.Request)
	GetUserSegments(http.ResponseWriter, *http.Request)
	PatchExpiringUserTargetsOnSegment(http.ResponseWriter, *http.Request)
	PatchUserSegment(http.ResponseWriter, *http.Request)
	PostUserSegment(http.ResponseWriter, *http.Request)
	UpdateBigSegmentTargets(http.ResponseWriter, *http.Request)
}
// UserSettingsAPIRouter defines the required methods for binding the api requests to a responses for the UserSettingsAPI
// The UserSettingsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserSettingsAPIServicer to perform the required actions, then write the service results to the http response.
type UserSettingsAPIRouter interface { 
	GetExpiringUserTargetsForUser(http.ResponseWriter, *http.Request)
	GetUserFlagSetting(http.ResponseWriter, *http.Request)
	GetUserFlagSettings(http.ResponseWriter, *http.Request)
	PatchExpiringUserTargetsForFlags(http.ResponseWriter, *http.Request)
	PutFlagSetting(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	DeleteUser(http.ResponseWriter, *http.Request)
	GetSearchUsers(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
}
// WebhooksAPIRouter defines the required methods for binding the api requests to a responses for the WebhooksAPI
// The WebhooksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WebhooksAPIServicer to perform the required actions, then write the service results to the http response.
type WebhooksAPIRouter interface { 
	DeleteWebhook(http.ResponseWriter, *http.Request)
	GetWebhook(http.ResponseWriter, *http.Request)
	GetWebhooks(http.ResponseWriter, *http.Request)
	PatchWebhook(http.ResponseWriter, *http.Request)
	PostWebhook(http.ResponseWriter, *http.Request)
}


// AccessTokensAPIServicer defines the api actions for the AccessTokensAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccessTokensAPIServicer interface { 
	DeleteToken(context.Context, string) (ImplResponse, error)
	GetToken(context.Context, string) (ImplResponse, error)
	GetTokens(context.Context, bool) (ImplResponse, error)
	PatchToken(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostToken(context.Context, PostTokenRequest) (ImplResponse, error)
	ResetToken(context.Context, string, int64) (ImplResponse, error)
}


// AuditLogAPIServicer defines the api actions for the AuditLogAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuditLogAPIServicer interface { 
	GetAuditLogEntries(context.Context, int64, int64, string, float32, string) (ImplResponse, error)
	GetAuditLogEntry(context.Context, string) (ImplResponse, error)
}


// CustomRolesAPIServicer defines the api actions for the CustomRolesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CustomRolesAPIServicer interface { 
	DeleteCustomRole(context.Context, string) (ImplResponse, error)
	GetCustomRole(context.Context, string) (ImplResponse, error)
	GetCustomRoles(context.Context) (ImplResponse, error)
	PatchCustomRole(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostCustomRole(context.Context, PostCustomRoleRequest) (ImplResponse, error)
}


// CustomerMetricsAPIServicer defines the api actions for the CustomerMetricsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CustomerMetricsAPIServicer interface { 
	GetEvaluations(context.Context, string, string) (ImplResponse, error)
	GetEvent(context.Context, string) (ImplResponse, error)
	GetEvents(context.Context) (ImplResponse, error)
	GetMAU(context.Context) (ImplResponse, error)
	GetMAUByCategory(context.Context) (ImplResponse, error)
	GetStream(context.Context, string) (ImplResponse, error)
	GetStreamBySDK(context.Context, string) (ImplResponse, error)
	GetStreamSDKVersion(context.Context, string) (ImplResponse, error)
	GetStreams(context.Context) (ImplResponse, error)
	GetUsage(context.Context) (ImplResponse, error)
}


// DataExportDestinationsAPIServicer defines the api actions for the DataExportDestinationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DataExportDestinationsAPIServicer interface { 
	DeleteDestination(context.Context, string, string, string) (ImplResponse, error)
	GetDestination(context.Context, string, string, string) (ImplResponse, error)
	GetDestinations(context.Context) (ImplResponse, error)
	PatchDestination(context.Context, string, string, string, []PatchOperation) (ImplResponse, error)
	PostDestination(context.Context, string, string, PostDestinationRequest) (ImplResponse, error)
}


// EnvironmentsAPIServicer defines the api actions for the EnvironmentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EnvironmentsAPIServicer interface { 
	DeleteEnvironment(context.Context, string, string) (ImplResponse, error)
	GetEnvironment(context.Context, string, string) (ImplResponse, error)
	PatchEnvironment(context.Context, string, string, []PatchOperation) (ImplResponse, error)
	PostEnvironment(context.Context, string, EnvironmentPost) (ImplResponse, error)
	ResetEnvironmentMobileKey(context.Context, string, string, int64) (ImplResponse, error)
	ResetEnvironmentSDKKey(context.Context, string, string, int64) (ImplResponse, error)
}


// FeatureFlagsAPIServicer defines the api actions for the FeatureFlagsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FeatureFlagsAPIServicer interface { 
	CopyFeatureFlag(context.Context, string, string, CopyFeatureFlagRequest) (ImplResponse, error)
	DeleteApprovalRequest(context.Context, string, string, string, string, PostApprovalRequestRequest) (ImplResponse, error)
	DeleteFeatureFlag(context.Context, string, string) (ImplResponse, error)
	DeleteFlagConfigScheduledChanges(context.Context, string, string, string, string) (ImplResponse, error)
	FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(context.Context, string, string, string) (ImplResponse, error)
	FlagsProjectKeyFeatureFlagKeyDependentFlagsGet(context.Context, string, string) (ImplResponse, error)
	GetApprovalRequest(context.Context, string, string, string, string) (ImplResponse, error)
	GetApprovalRequests(context.Context, string, string, string) (ImplResponse, error)
	GetExpiringUserTargets(context.Context, string, string, string) (ImplResponse, error)
	GetFeatureFlag(context.Context, string, string, []string) (ImplResponse, error)
	GetFeatureFlagStatus(context.Context, string, string, string) (ImplResponse, error)
	GetFeatureFlagStatusAcrossEnvironments(context.Context, string, string) (ImplResponse, error)
	GetFeatureFlagStatuses(context.Context, string, string) (ImplResponse, error)
	GetFeatureFlags(context.Context, string, []string, bool, bool, float32, float32, string, string, string) (ImplResponse, error)
	GetFlagConfigScheduledChange(context.Context, string, string, string, string) (ImplResponse, error)
	GetFlagConfigScheduledChanges(context.Context, string, string, string) (ImplResponse, error)
	GetFlagConfigScheduledChangesConflicts(context.Context, string, string, string, GetFlagConfigScheduledChangesConflictsRequest) (ImplResponse, error)
	PatchExpiringUserTargets(context.Context, string, string, string, []SemanticPatchOperation) (ImplResponse, error)
	PatchFeatureFlag(context.Context, string, string, PatchFeatureFlagRequest) (ImplResponse, error)
	PatchFlagConfigScheduledChange(context.Context, string, string, string, string, PatchFlagConfigScheduledChangeRequest) (ImplResponse, error)
	PostApplyApprovalRequest(context.Context, string, string, string, string, PostApplyApprovalRequestRequest) (ImplResponse, error)
	PostApprovalRequest(context.Context, string, string, string, string, PostApprovalRequestRequest) (ImplResponse, error)
	PostFeatureFlag(context.Context, string, PostFeatureFlagRequest, string) (ImplResponse, error)
	PostFlagConfigScheduledChanges(context.Context, string, string, string, PostFlagConfigScheduledChangesRequest) (ImplResponse, error)
	PostReviewApprovalRequest(context.Context, string, string, string, string, PostReviewApprovalRequestRequest) (ImplResponse, error)
}


// IntegrationsAPIServicer defines the api actions for the IntegrationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IntegrationsAPIServicer interface { 
	DeleteIntegrationSubscription(context.Context, string, string) (ImplResponse, error)
	GetIntegrationSubscription(context.Context, string, string) (ImplResponse, error)
	GetIntegrationSubscriptions(context.Context, string) (ImplResponse, error)
	GetIntegrations(context.Context) (ImplResponse, error)
	PatchIntegrationSubscription(context.Context, string, string, []PatchOperation) (ImplResponse, error)
	PostIntegrationSubscription(context.Context, string, PostIntegrationSubscriptionRequest) (ImplResponse, error)
}


// ProjectsAPIServicer defines the api actions for the ProjectsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectsAPIServicer interface { 
	DeleteProject(context.Context, string) (ImplResponse, error)
	GetProject(context.Context, string) (ImplResponse, error)
	GetProjects(context.Context) (ImplResponse, error)
	PatchProject(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostProject(context.Context, PostProjectRequest) (ImplResponse, error)
}


// RelayProxyConfigurationsAPIServicer defines the api actions for the RelayProxyConfigurationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RelayProxyConfigurationsAPIServicer interface { 
	DeleteRelayProxyConfig(context.Context, string) (ImplResponse, error)
	GetRelayProxyConfig(context.Context, string) (ImplResponse, error)
	GetRelayProxyConfigs(context.Context) (ImplResponse, error)
	PatchRelayProxyConfig(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostRelayAutoConfig(context.Context, PostRelayAutoConfigRequest) (ImplResponse, error)
	ResetRelayProxyConfig(context.Context, string, int64) (ImplResponse, error)
}


// RootAPIServicer defines the api actions for the RootAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RootAPIServicer interface { 
	GetRoot(context.Context) (ImplResponse, error)
}


// TeamMembersAPIServicer defines the api actions for the TeamMembersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TeamMembersAPIServicer interface { 
	DeleteMember(context.Context, string) (ImplResponse, error)
	GetMe(context.Context) (ImplResponse, error)
	GetMember(context.Context, string) (ImplResponse, error)
	GetMembers(context.Context, float32, float32, string, string) (ImplResponse, error)
	PatchMember(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostMembers(context.Context, []PostMembersRequestInner) (ImplResponse, error)
}


// UserSegmentsAPIServicer defines the api actions for the UserSegmentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserSegmentsAPIServicer interface { 
	DeleteUserSegment(context.Context, string, string, string) (ImplResponse, error)
	GetExpiringUserTargetsOnSegment(context.Context, string, string, string) (ImplResponse, error)
	GetUserSegment(context.Context, string, string, string) (ImplResponse, error)
	GetUserSegments(context.Context, string, string, string) (ImplResponse, error)
	PatchExpiringUserTargetsOnSegment(context.Context, string, string, string, []SemanticPatchOperation) (ImplResponse, error)
	PatchUserSegment(context.Context, string, string, string, []PatchOperation) (ImplResponse, error)
	PostUserSegment(context.Context, string, string, PostUserSegmentRequest) (ImplResponse, error)
	UpdateBigSegmentTargets(context.Context, string, string, string, UpdateBigSegmentTargetsRequest) (ImplResponse, error)
}


// UserSettingsAPIServicer defines the api actions for the UserSettingsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserSettingsAPIServicer interface { 
	GetExpiringUserTargetsForUser(context.Context, string, string, string) (ImplResponse, error)
	GetUserFlagSetting(context.Context, string, string, string, string) (ImplResponse, error)
	GetUserFlagSettings(context.Context, string, string, string) (ImplResponse, error)
	PatchExpiringUserTargetsForFlags(context.Context, string, string, string, []SemanticPatchOperation) (ImplResponse, error)
	PutFlagSetting(context.Context, string, string, string, string, PutFlagSettingRequest) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	DeleteUser(context.Context, string, string, string) (ImplResponse, error)
	GetSearchUsers(context.Context, string, string, string, int32, int32, int64) (ImplResponse, error)
	GetUser(context.Context, string, string, string) (ImplResponse, error)
	GetUsers(context.Context, string, string, int32, string, string) (ImplResponse, error)
}


// WebhooksAPIServicer defines the api actions for the WebhooksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WebhooksAPIServicer interface { 
	DeleteWebhook(context.Context, string) (ImplResponse, error)
	GetWebhook(context.Context, string) (ImplResponse, error)
	GetWebhooks(context.Context) (ImplResponse, error)
	PatchWebhook(context.Context, string, []PatchOperation) (ImplResponse, error)
	PostWebhook(context.Context, PostWebhookRequest) (ImplResponse, error)
}
