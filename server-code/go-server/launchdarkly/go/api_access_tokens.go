/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AccessTokensAPIController binds http requests to an api service and writes the service results to the http response
type AccessTokensAPIController struct {
	service AccessTokensAPIServicer
	errorHandler ErrorHandler
}

// AccessTokensAPIOption for how the controller is set up.
type AccessTokensAPIOption func(*AccessTokensAPIController)

// WithAccessTokensAPIErrorHandler inject ErrorHandler into controller
func WithAccessTokensAPIErrorHandler(h ErrorHandler) AccessTokensAPIOption {
	return func(c *AccessTokensAPIController) {
		c.errorHandler = h
	}
}

// NewAccessTokensAPIController creates a default api controller
func NewAccessTokensAPIController(s AccessTokensAPIServicer, opts ...AccessTokensAPIOption) Router {
	controller := &AccessTokensAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccessTokensAPIController
func (c *AccessTokensAPIController) Routes() Routes {
	return Routes{
		"DeleteToken": Route{
			strings.ToUpper("Delete"),
			"/api/v2/tokens/{tokenId}",
			c.DeleteToken,
		},
		"GetToken": Route{
			strings.ToUpper("Get"),
			"/api/v2/tokens/{tokenId}",
			c.GetToken,
		},
		"GetTokens": Route{
			strings.ToUpper("Get"),
			"/api/v2/tokens",
			c.GetTokens,
		},
		"PatchToken": Route{
			strings.ToUpper("Patch"),
			"/api/v2/tokens/{tokenId}",
			c.PatchToken,
		},
		"PostToken": Route{
			strings.ToUpper("Post"),
			"/api/v2/tokens",
			c.PostToken,
		},
		"ResetToken": Route{
			strings.ToUpper("Post"),
			"/api/v2/tokens/{tokenId}/reset",
			c.ResetToken,
		},
	}
}

// DeleteToken - Delete an access token by ID.
func (c *AccessTokensAPIController) DeleteToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	result, err := c.service.DeleteToken(r.Context(), tokenIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetToken - Get a single access token by ID.
func (c *AccessTokensAPIController) GetToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	result, err := c.service.GetToken(r.Context(), tokenIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTokens - Returns a list of tokens in the account.
func (c *AccessTokensAPIController) GetTokens(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var showAllParam bool
	if query.Has("showAll") {
		param, err := parseBoolParameter(
			query.Get("showAll"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllParam = param
	} else {
	}
	result, err := c.service.GetTokens(r.Context(), showAllParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchToken - Modify an access token by ID.
func (c *AccessTokensAPIController) PatchToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchToken(r.Context(), tokenIdParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostToken - Create a new token.
func (c *AccessTokensAPIController) PostToken(w http.ResponseWriter, r *http.Request) {
	tokenBodyParam := PostTokenRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tokenBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostTokenRequestRequired(tokenBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostTokenRequestConstraints(tokenBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostToken(r.Context(), tokenBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetToken - Reset an access token's secret key with an optional expiry time for the old key.
func (c *AccessTokensAPIController) ResetToken(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	tokenIdParam := params["tokenId"]
	if tokenIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tokenId"}, nil)
		return
	}
	var expiryParam int64
	if query.Has("expiry") {
		param, err := parseNumericParameter[int64](
			query.Get("expiry"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		expiryParam = param
	} else {
	}
	result, err := c.service.ResetToken(r.Context(), tokenIdParam, expiryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
