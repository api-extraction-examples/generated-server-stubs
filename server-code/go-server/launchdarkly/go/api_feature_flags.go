/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// FeatureFlagsAPIController binds http requests to an api service and writes the service results to the http response
type FeatureFlagsAPIController struct {
	service FeatureFlagsAPIServicer
	errorHandler ErrorHandler
}

// FeatureFlagsAPIOption for how the controller is set up.
type FeatureFlagsAPIOption func(*FeatureFlagsAPIController)

// WithFeatureFlagsAPIErrorHandler inject ErrorHandler into controller
func WithFeatureFlagsAPIErrorHandler(h ErrorHandler) FeatureFlagsAPIOption {
	return func(c *FeatureFlagsAPIController) {
		c.errorHandler = h
	}
}

// NewFeatureFlagsAPIController creates a default api controller
func NewFeatureFlagsAPIController(s FeatureFlagsAPIServicer, opts ...FeatureFlagsAPIOption) Router {
	controller := &FeatureFlagsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FeatureFlagsAPIController
func (c *FeatureFlagsAPIController) Routes() Routes {
	return Routes{
		"CopyFeatureFlag": Route{
			strings.ToUpper("Post"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}/copy",
			c.CopyFeatureFlag,
		},
		"DeleteApprovalRequest": Route{
			strings.ToUpper("Delete"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
			c.DeleteApprovalRequest,
		},
		"DeleteFeatureFlag": Route{
			strings.ToUpper("Delete"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}",
			c.DeleteFeatureFlag,
		},
		"DeleteFlagConfigScheduledChanges": Route{
			strings.ToUpper("Delete"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
			c.DeleteFlagConfigScheduledChanges,
		},
		"FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet": Route{
			strings.ToUpper("Get"),
			"/api/v2/flags/{projectKey}/{environmentKey}/{featureFlagKey}/dependent-flags",
			c.FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet,
		},
		"FlagsProjectKeyFeatureFlagKeyDependentFlagsGet": Route{
			strings.ToUpper("Get"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}/dependent-flags",
			c.FlagsProjectKeyFeatureFlagKeyDependentFlagsGet,
		},
		"GetApprovalRequest": Route{
			strings.ToUpper("Get"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
			c.GetApprovalRequest,
		},
		"GetApprovalRequests": Route{
			strings.ToUpper("Get"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests",
			c.GetApprovalRequests,
		},
		"GetExpiringUserTargets": Route{
			strings.ToUpper("Get"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
			c.GetExpiringUserTargets,
		},
		"GetFeatureFlag": Route{
			strings.ToUpper("Get"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}",
			c.GetFeatureFlag,
		},
		"GetFeatureFlagStatus": Route{
			strings.ToUpper("Get"),
			"/api/v2/flag-statuses/{projectKey}/{environmentKey}/{featureFlagKey}",
			c.GetFeatureFlagStatus,
		},
		"GetFeatureFlagStatusAcrossEnvironments": Route{
			strings.ToUpper("Get"),
			"/api/v2/flag-status/{projectKey}/{featureFlagKey}",
			c.GetFeatureFlagStatusAcrossEnvironments,
		},
		"GetFeatureFlagStatuses": Route{
			strings.ToUpper("Get"),
			"/api/v2/flag-statuses/{projectKey}/{environmentKey}",
			c.GetFeatureFlagStatuses,
		},
		"GetFeatureFlags": Route{
			strings.ToUpper("Get"),
			"/api/v2/flags/{projectKey}",
			c.GetFeatureFlags,
		},
		"GetFlagConfigScheduledChange": Route{
			strings.ToUpper("Get"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
			c.GetFlagConfigScheduledChange,
		},
		"GetFlagConfigScheduledChanges": Route{
			strings.ToUpper("Get"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
			c.GetFlagConfigScheduledChanges,
		},
		"GetFlagConfigScheduledChangesConflicts": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes-conflicts",
			c.GetFlagConfigScheduledChangesConflicts,
		},
		"PatchExpiringUserTargets": Route{
			strings.ToUpper("Patch"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}/expiring-user-targets/{environmentKey}",
			c.PatchExpiringUserTargets,
		},
		"PatchFeatureFlag": Route{
			strings.ToUpper("Patch"),
			"/api/v2/flags/{projectKey}/{featureFlagKey}",
			c.PatchFeatureFlag,
		},
		"PatchFlagConfigScheduledChange": Route{
			strings.ToUpper("Patch"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes/{scheduledChangeId}",
			c.PatchFlagConfigScheduledChange,
		},
		"PostApplyApprovalRequest": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/apply",
			c.PostApplyApprovalRequest,
		},
		"PostApprovalRequest": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}",
			c.PostApprovalRequest,
		},
		"PostFeatureFlag": Route{
			strings.ToUpper("Post"),
			"/api/v2/flags/{projectKey}",
			c.PostFeatureFlag,
		},
		"PostFlagConfigScheduledChanges": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/scheduled-changes",
			c.PostFlagConfigScheduledChanges,
		},
		"PostReviewApprovalRequest": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/flags/{featureFlagKey}/environments/{environmentKey}/approval-requests/{approvalRequestId}/review",
			c.PostReviewApprovalRequest,
		},
	}
}

// CopyFeatureFlag - Copies the feature flag configuration from one environment to the same feature flag in another environment.
func (c *FeatureFlagsAPIController) CopyFeatureFlag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	featureFlagCopyBodyParam := CopyFeatureFlagRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&featureFlagCopyBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCopyFeatureFlagRequestRequired(featureFlagCopyBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCopyFeatureFlagRequestConstraints(featureFlagCopyBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CopyFeatureFlag(r.Context(), projectKeyParam, featureFlagKeyParam, featureFlagCopyBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteApprovalRequest - Delete an approval request for a feature flag config
func (c *FeatureFlagsAPIController) DeleteApprovalRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	approvalRequestIdParam := params["approvalRequestId"]
	if approvalRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"approvalRequestId"}, nil)
		return
	}
	approvalRequestConfigBodyParam := PostApprovalRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approvalRequestConfigBodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostApprovalRequestRequestRequired(approvalRequestConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostApprovalRequestRequestConstraints(approvalRequestConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteApprovalRequest(r.Context(), projectKeyParam, environmentKeyParam, featureFlagKeyParam, approvalRequestIdParam, approvalRequestConfigBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFeatureFlag - Delete a feature flag in all environments. Be careful-- only delete feature flags that are no longer being used by your application.
func (c *FeatureFlagsAPIController) DeleteFeatureFlag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.DeleteFeatureFlag(r.Context(), projectKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFlagConfigScheduledChanges - Delete a scheduled change on a feature flag in an environment.
func (c *FeatureFlagsAPIController) DeleteFlagConfigScheduledChanges(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	scheduledChangeIdParam := params["scheduledChangeId"]
	if scheduledChangeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"scheduledChangeId"}, nil)
		return
	}
	result, err := c.service.DeleteFlagConfigScheduledChanges(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, scheduledChangeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet - Get dependent flags for the flag in the environment specified in path parameters
func (c *FeatureFlagsAPIController) FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.FlagsProjectKeyEnvironmentKeyFeatureFlagKeyDependentFlagsGet(r.Context(), projectKeyParam, environmentKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FlagsProjectKeyFeatureFlagKeyDependentFlagsGet - Get dependent flags across all environments for the flag specified in the path parameters
func (c *FeatureFlagsAPIController) FlagsProjectKeyFeatureFlagKeyDependentFlagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.FlagsProjectKeyFeatureFlagKeyDependentFlagsGet(r.Context(), projectKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetApprovalRequest - Get a single approval request for a feature flag config
func (c *FeatureFlagsAPIController) GetApprovalRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	approvalRequestIdParam := params["approvalRequestId"]
	if approvalRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"approvalRequestId"}, nil)
		return
	}
	result, err := c.service.GetApprovalRequest(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, approvalRequestIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetApprovalRequests - Get all approval requests for a feature flag config
func (c *FeatureFlagsAPIController) GetApprovalRequests(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	result, err := c.service.GetApprovalRequests(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExpiringUserTargets - Get expiring user targets for feature flag
func (c *FeatureFlagsAPIController) GetExpiringUserTargets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.GetExpiringUserTargets(r.Context(), projectKeyParam, environmentKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeatureFlag - Get a single feature flag by key.
func (c *FeatureFlagsAPIController) GetFeatureFlag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	var envParam []string
	if query.Has("env") {
		envParam = strings.Split(query.Get("env"), ",")
	}
	result, err := c.service.GetFeatureFlag(r.Context(), projectKeyParam, featureFlagKeyParam, envParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeatureFlagStatus - Get the status for a particular feature flag.
func (c *FeatureFlagsAPIController) GetFeatureFlagStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.GetFeatureFlagStatus(r.Context(), projectKeyParam, environmentKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeatureFlagStatusAcrossEnvironments - Get the status for a particular feature flag across environments
func (c *FeatureFlagsAPIController) GetFeatureFlagStatusAcrossEnvironments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.GetFeatureFlagStatusAcrossEnvironments(r.Context(), projectKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeatureFlagStatuses - Get a list of statuses for all feature flags. The status includes the last time the feature flag was requested, as well as the state of the flag.
func (c *FeatureFlagsAPIController) GetFeatureFlagStatuses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	result, err := c.service.GetFeatureFlagStatuses(r.Context(), projectKeyParam, environmentKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFeatureFlags - Get a list of all features in the given project.
func (c *FeatureFlagsAPIController) GetFeatureFlags(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	var envParam []string
	if query.Has("env") {
		envParam = strings.Split(query.Get("env"), ",")
	}
	var summaryParam bool
	if query.Has("summary") {
		param, err := parseBoolParameter(
			query.Get("summary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		summaryParam = param
	} else {
	}
	var archivedParam bool
	if query.Has("archived") {
		param, err := parseBoolParameter(
			query.Get("archived"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		archivedParam = param
	} else {
	}
	var limitParam float32
	if query.Has("limit") {
		param, err := parseNumericParameter[float32](
			query.Get("limit"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam float32
	if query.Has("offset") {
		param, err := parseNumericParameter[float32](
			query.Get("offset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var tagParam string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = param
	} else {
	}
	result, err := c.service.GetFeatureFlags(r.Context(), projectKeyParam, envParam, summaryParam, archivedParam, limitParam, offsetParam, filterParam, sortParam, tagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFlagConfigScheduledChange - Get a scheduled change on a feature flag by id.
func (c *FeatureFlagsAPIController) GetFlagConfigScheduledChange(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	scheduledChangeIdParam := params["scheduledChangeId"]
	if scheduledChangeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"scheduledChangeId"}, nil)
		return
	}
	result, err := c.service.GetFlagConfigScheduledChange(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, scheduledChangeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFlagConfigScheduledChanges - Get all scheduled workflows for a feature flag by key.
func (c *FeatureFlagsAPIController) GetFlagConfigScheduledChanges(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	result, err := c.service.GetFlagConfigScheduledChanges(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFlagConfigScheduledChangesConflicts - Lists conflicts between the given instructions and any existing scheduled changes for the feature flag. The actual HTTP verb should be REPORT, not POST.
func (c *FeatureFlagsAPIController) GetFlagConfigScheduledChangesConflicts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	flagConfigScheduledChangesConflictsBodyParam := GetFlagConfigScheduledChangesConflictsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&flagConfigScheduledChangesConflictsBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetFlagConfigScheduledChangesConflictsRequestRequired(flagConfigScheduledChangesConflictsBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetFlagConfigScheduledChangesConflictsRequestConstraints(flagConfigScheduledChangesConflictsBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetFlagConfigScheduledChangesConflicts(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, flagConfigScheduledChangesConflictsBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchExpiringUserTargets - Update, add, or delete expiring user targets on feature flag
func (c *FeatureFlagsAPIController) PatchExpiringUserTargets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	semanticPatchWithCommentParam := []SemanticPatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&semanticPatchWithCommentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range semanticPatchWithCommentParam {
		if err := AssertSemanticPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchExpiringUserTargets(r.Context(), projectKeyParam, environmentKeyParam, featureFlagKeyParam, semanticPatchWithCommentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchFeatureFlag - Perform a partial update to a feature.
func (c *FeatureFlagsAPIController) PatchFeatureFlag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	patchCommentParam := PatchFeatureFlagRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchCommentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPatchFeatureFlagRequestRequired(patchCommentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPatchFeatureFlagRequestConstraints(patchCommentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchFeatureFlag(r.Context(), projectKeyParam, featureFlagKeyParam, patchCommentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchFlagConfigScheduledChange - Updates an existing scheduled-change on a feature flag in an environment.
func (c *FeatureFlagsAPIController) PatchFlagConfigScheduledChange(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	scheduledChangeIdParam := params["scheduledChangeId"]
	if scheduledChangeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"scheduledChangeId"}, nil)
		return
	}
	flagConfigScheduledChangesPatchBodyParam := PatchFlagConfigScheduledChangeRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&flagConfigScheduledChangesPatchBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPatchFlagConfigScheduledChangeRequestRequired(flagConfigScheduledChangesPatchBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPatchFlagConfigScheduledChangeRequestConstraints(flagConfigScheduledChangesPatchBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PatchFlagConfigScheduledChange(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, scheduledChangeIdParam, flagConfigScheduledChangesPatchBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostApplyApprovalRequest - Apply approval request for a feature flag config
func (c *FeatureFlagsAPIController) PostApplyApprovalRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	approvalRequestIdParam := params["approvalRequestId"]
	if approvalRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"approvalRequestId"}, nil)
		return
	}
	approvalRequestApplyConfigBodyParam := PostApplyApprovalRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approvalRequestApplyConfigBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostApplyApprovalRequestRequestRequired(approvalRequestApplyConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostApplyApprovalRequestRequestConstraints(approvalRequestApplyConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostApplyApprovalRequest(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, approvalRequestIdParam, approvalRequestApplyConfigBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostApprovalRequest - Create an approval request for a feature flag config
func (c *FeatureFlagsAPIController) PostApprovalRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	approvalRequestIdParam := params["approvalRequestId"]
	if approvalRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"approvalRequestId"}, nil)
		return
	}
	approvalRequestConfigBodyParam := PostApprovalRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approvalRequestConfigBodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostApprovalRequestRequestRequired(approvalRequestConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostApprovalRequestRequestConstraints(approvalRequestConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostApprovalRequest(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, approvalRequestIdParam, approvalRequestConfigBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostFeatureFlag - Creates a new feature flag.
func (c *FeatureFlagsAPIController) PostFeatureFlag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagBodyParam := PostFeatureFlagRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&featureFlagBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostFeatureFlagRequestRequired(featureFlagBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostFeatureFlagRequestConstraints(featureFlagBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var cloneParam string
	if query.Has("clone") {
		param := query.Get("clone")

		cloneParam = param
	} else {
	}
	result, err := c.service.PostFeatureFlag(r.Context(), projectKeyParam, featureFlagBodyParam, cloneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostFlagConfigScheduledChanges - Creates a new scheduled change for a feature flag.
func (c *FeatureFlagsAPIController) PostFlagConfigScheduledChanges(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	flagConfigScheduledChangesPostBodyParam := PostFlagConfigScheduledChangesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&flagConfigScheduledChangesPostBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostFlagConfigScheduledChangesRequestRequired(flagConfigScheduledChangesPostBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostFlagConfigScheduledChangesRequestConstraints(flagConfigScheduledChangesPostBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostFlagConfigScheduledChanges(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, flagConfigScheduledChangesPostBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostReviewApprovalRequest - Review approval request for a feature flag config
func (c *FeatureFlagsAPIController) PostReviewApprovalRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	approvalRequestIdParam := params["approvalRequestId"]
	if approvalRequestIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"approvalRequestId"}, nil)
		return
	}
	approvalRequestReviewConfigBodyParam := PostReviewApprovalRequestRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&approvalRequestReviewConfigBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostReviewApprovalRequestRequestRequired(approvalRequestReviewConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostReviewApprovalRequestRequestConstraints(approvalRequestReviewConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostReviewApprovalRequest(r.Context(), projectKeyParam, featureFlagKeyParam, environmentKeyParam, approvalRequestIdParam, approvalRequestReviewConfigBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
