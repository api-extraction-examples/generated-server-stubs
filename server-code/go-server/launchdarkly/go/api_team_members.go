/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TeamMembersAPIController binds http requests to an api service and writes the service results to the http response
type TeamMembersAPIController struct {
	service TeamMembersAPIServicer
	errorHandler ErrorHandler
}

// TeamMembersAPIOption for how the controller is set up.
type TeamMembersAPIOption func(*TeamMembersAPIController)

// WithTeamMembersAPIErrorHandler inject ErrorHandler into controller
func WithTeamMembersAPIErrorHandler(h ErrorHandler) TeamMembersAPIOption {
	return func(c *TeamMembersAPIController) {
		c.errorHandler = h
	}
}

// NewTeamMembersAPIController creates a default api controller
func NewTeamMembersAPIController(s TeamMembersAPIServicer, opts ...TeamMembersAPIOption) Router {
	controller := &TeamMembersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TeamMembersAPIController
func (c *TeamMembersAPIController) Routes() Routes {
	return Routes{
		"DeleteMember": Route{
			strings.ToUpper("Delete"),
			"/api/v2/members/{memberId}",
			c.DeleteMember,
		},
		"GetMe": Route{
			strings.ToUpper("Get"),
			"/api/v2/members/me",
			c.GetMe,
		},
		"GetMember": Route{
			strings.ToUpper("Get"),
			"/api/v2/members/{memberId}",
			c.GetMember,
		},
		"GetMembers": Route{
			strings.ToUpper("Get"),
			"/api/v2/members",
			c.GetMembers,
		},
		"PatchMember": Route{
			strings.ToUpper("Patch"),
			"/api/v2/members/{memberId}",
			c.PatchMember,
		},
		"PostMembers": Route{
			strings.ToUpper("Post"),
			"/api/v2/members",
			c.PostMembers,
		},
	}
}

// DeleteMember - Delete a team member by ID.
func (c *TeamMembersAPIController) DeleteMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	memberIdParam := params["memberId"]
	if memberIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"memberId"}, nil)
		return
	}
	result, err := c.service.DeleteMember(r.Context(), memberIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMe - Get the current team member associated with the token
func (c *TeamMembersAPIController) GetMe(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMe(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMember - Get a single team member by ID.
func (c *TeamMembersAPIController) GetMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	memberIdParam := params["memberId"]
	if memberIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"memberId"}, nil)
		return
	}
	result, err := c.service.GetMember(r.Context(), memberIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMembers - Returns a list of all members in the account.
func (c *TeamMembersAPIController) GetMembers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam float32
	if query.Has("limit") {
		param, err := parseNumericParameter[float32](
			query.Get("limit"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam float32
	if query.Has("offset") {
		param, err := parseNumericParameter[float32](
			query.Get("offset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	result, err := c.service.GetMembers(r.Context(), limitParam, offsetParam, filterParam, sortParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchMember - Modify a team member by ID.
func (c *TeamMembersAPIController) PatchMember(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	memberIdParam := params["memberId"]
	if memberIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"memberId"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchMember(r.Context(), memberIdParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostMembers - Invite new members.
func (c *TeamMembersAPIController) PostMembers(w http.ResponseWriter, r *http.Request) {
	membersBodyParam := []PostMembersRequestInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&membersBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range membersBodyParam {
		if err := AssertPostMembersRequestInnerRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PostMembers(r.Context(), membersBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
