/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/api/v2/users/{projectKey}/{environmentKey}/{userKey}",
			c.DeleteUser,
		},
		"GetSearchUsers": Route{
			strings.ToUpper("Get"),
			"/api/v2/user-search/{projectKey}/{environmentKey}",
			c.GetSearchUsers,
		},
		"GetUser": Route{
			strings.ToUpper("Get"),
			"/api/v2/users/{projectKey}/{environmentKey}/{userKey}",
			c.GetUser,
		},
		"GetUsers": Route{
			strings.ToUpper("Get"),
			"/api/v2/users/{projectKey}/{environmentKey}",
			c.GetUsers,
		},
	}
}

// DeleteUser - Delete a user by ID.
func (c *UsersAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSearchUsers - Search users in LaunchDarkly based on their last active date, or a search query. It should not be used to enumerate all users in LaunchDarkly-- use the List users API resource.
func (c *UsersAPIController) GetSearchUsers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var afterParam int64
	if query.Has("after") {
		param, err := parseNumericParameter[int64](
			query.Get("after"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		afterParam = param
	} else {
	}
	result, err := c.service.GetSearchUsers(r.Context(), projectKeyParam, environmentKeyParam, qParam, limitParam, offsetParam, afterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUser - Get a user by key.
func (c *UsersAPIController) GetUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	result, err := c.service.GetUser(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsers - List all users in the environment. Includes the total count of users. In each page, there will be up to 'limit' users returned (default 20). This is useful for exporting all users in the system for further analysis. Paginated collections will include a next link containing a URL with the next set of elements in the collection.
func (c *UsersAPIController) GetUsers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var hParam string
	if query.Has("h") {
		param := query.Get("h")

		hParam = param
	} else {
	}
	var scrollIdParam string
	if query.Has("scrollId") {
		param := query.Get("scrollId")

		scrollIdParam = param
	} else {
	}
	result, err := c.service.GetUsers(r.Context(), projectKeyParam, environmentKeyParam, limitParam, hParam, scrollIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
