/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomerMetricsAPIController binds http requests to an api service and writes the service results to the http response
type CustomerMetricsAPIController struct {
	service CustomerMetricsAPIServicer
	errorHandler ErrorHandler
}

// CustomerMetricsAPIOption for how the controller is set up.
type CustomerMetricsAPIOption func(*CustomerMetricsAPIController)

// WithCustomerMetricsAPIErrorHandler inject ErrorHandler into controller
func WithCustomerMetricsAPIErrorHandler(h ErrorHandler) CustomerMetricsAPIOption {
	return func(c *CustomerMetricsAPIController) {
		c.errorHandler = h
	}
}

// NewCustomerMetricsAPIController creates a default api controller
func NewCustomerMetricsAPIController(s CustomerMetricsAPIServicer, opts ...CustomerMetricsAPIOption) Router {
	controller := &CustomerMetricsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomerMetricsAPIController
func (c *CustomerMetricsAPIController) Routes() Routes {
	return Routes{
		"GetEvaluations": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/evaluations/{envId}/{flagKey}",
			c.GetEvaluations,
		},
		"GetEvent": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/events/{type}",
			c.GetEvent,
		},
		"GetEvents": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/events",
			c.GetEvents,
		},
		"GetMAU": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/mau",
			c.GetMAU,
		},
		"GetMAUByCategory": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/mau/bycategory",
			c.GetMAUByCategory,
		},
		"GetStream": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/streams/{source}",
			c.GetStream,
		},
		"GetStreamBySDK": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/streams/{source}/bysdkversion",
			c.GetStreamBySDK,
		},
		"GetStreamSDKVersion": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/streams/{source}/sdkversions",
			c.GetStreamSDKVersion,
		},
		"GetStreams": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage/streams",
			c.GetStreams,
		},
		"GetUsage": Route{
			strings.ToUpper("Get"),
			"/api/v2/usage",
			c.GetUsage,
		},
	}
}

// GetEvaluations - Get events usage by event id and the feature flag key.
func (c *CustomerMetricsAPIController) GetEvaluations(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	envIdParam := params["envId"]
	if envIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"envId"}, nil)
		return
	}
	flagKeyParam := params["flagKey"]
	if flagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"flagKey"}, nil)
		return
	}
	result, err := c.service.GetEvaluations(r.Context(), envIdParam, flagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEvent - Get events usage by event type.
func (c *CustomerMetricsAPIController) GetEvent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	result, err := c.service.GetEvent(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEvents - Get events usage endpoints.
func (c *CustomerMetricsAPIController) GetEvents(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetEvents(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMAU - Get monthly active user data.
func (c *CustomerMetricsAPIController) GetMAU(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMAU(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMAUByCategory - Get monthly active user data by category.
func (c *CustomerMetricsAPIController) GetMAUByCategory(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetMAUByCategory(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStream - Get a stream endpoint and return timeseries data.
func (c *CustomerMetricsAPIController) GetStream(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sourceParam := params["source"]
	if sourceParam == "" {
		c.errorHandler(w, r, &RequiredError{"source"}, nil)
		return
	}
	result, err := c.service.GetStream(r.Context(), sourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStreamBySDK - Get a stream timeseries data by source show sdk version metadata.
func (c *CustomerMetricsAPIController) GetStreamBySDK(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sourceParam := params["source"]
	if sourceParam == "" {
		c.errorHandler(w, r, &RequiredError{"source"}, nil)
		return
	}
	result, err := c.service.GetStreamBySDK(r.Context(), sourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStreamSDKVersion - Get a stream timeseries data by source and show all sdk version associated.
func (c *CustomerMetricsAPIController) GetStreamSDKVersion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sourceParam := params["source"]
	if sourceParam == "" {
		c.errorHandler(w, r, &RequiredError{"source"}, nil)
		return
	}
	result, err := c.service.GetStreamSDKVersion(r.Context(), sourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStreams - Returns a list of all streams.
func (c *CustomerMetricsAPIController) GetStreams(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStreams(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsage - Returns of the usage endpoints available.
func (c *CustomerMetricsAPIController) GetUsage(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetUsage(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
