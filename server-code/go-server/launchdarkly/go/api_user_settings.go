/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserSettingsAPIController binds http requests to an api service and writes the service results to the http response
type UserSettingsAPIController struct {
	service UserSettingsAPIServicer
	errorHandler ErrorHandler
}

// UserSettingsAPIOption for how the controller is set up.
type UserSettingsAPIOption func(*UserSettingsAPIController)

// WithUserSettingsAPIErrorHandler inject ErrorHandler into controller
func WithUserSettingsAPIErrorHandler(h ErrorHandler) UserSettingsAPIOption {
	return func(c *UserSettingsAPIController) {
		c.errorHandler = h
	}
}

// NewUserSettingsAPIController creates a default api controller
func NewUserSettingsAPIController(s UserSettingsAPIServicer, opts ...UserSettingsAPIOption) Router {
	controller := &UserSettingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserSettingsAPIController
func (c *UserSettingsAPIController) Routes() Routes {
	return Routes{
		"GetExpiringUserTargetsForUser": Route{
			strings.ToUpper("Get"),
			"/api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
			c.GetExpiringUserTargetsForUser,
		},
		"GetUserFlagSetting": Route{
			strings.ToUpper("Get"),
			"/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
			c.GetUserFlagSetting,
		},
		"GetUserFlagSettings": Route{
			strings.ToUpper("Get"),
			"/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags",
			c.GetUserFlagSettings,
		},
		"PatchExpiringUserTargetsForFlags": Route{
			strings.ToUpper("Patch"),
			"/api/v2/users/{projectKey}/{userKey}/expiring-user-targets/{environmentKey}",
			c.PatchExpiringUserTargetsForFlags,
		},
		"PutFlagSetting": Route{
			strings.ToUpper("Put"),
			"/api/v2/users/{projectKey}/{environmentKey}/{userKey}/flags/{featureFlagKey}",
			c.PutFlagSetting,
		},
	}
}

// GetExpiringUserTargetsForUser - Get expiring dates on flags for user
func (c *UserSettingsAPIController) GetExpiringUserTargetsForUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	result, err := c.service.GetExpiringUserTargetsForUser(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserFlagSetting - Fetch a single flag setting for a user by key.
func (c *UserSettingsAPIController) GetUserFlagSetting(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	result, err := c.service.GetUserFlagSetting(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam, featureFlagKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserFlagSettings - Fetch a single flag setting for a user by key.
func (c *UserSettingsAPIController) GetUserFlagSettings(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	result, err := c.service.GetUserFlagSettings(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchExpiringUserTargetsForFlags - Update, add, or delete expiring user targets for a single user on all flags
func (c *UserSettingsAPIController) PatchExpiringUserTargetsForFlags(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	semanticPatchWithCommentParam := []SemanticPatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&semanticPatchWithCommentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range semanticPatchWithCommentParam {
		if err := AssertSemanticPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchExpiringUserTargetsForFlags(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam, semanticPatchWithCommentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutFlagSetting - Specifically enable or disable a feature flag for a user based on their key.
func (c *UserSettingsAPIController) PutFlagSetting(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	userKeyParam := params["userKey"]
	if userKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"userKey"}, nil)
		return
	}
	featureFlagKeyParam := params["featureFlagKey"]
	if featureFlagKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureFlagKey"}, nil)
		return
	}
	userSettingsBodyParam := PutFlagSettingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userSettingsBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutFlagSettingRequestRequired(userSettingsBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutFlagSettingRequestConstraints(userSettingsBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutFlagSetting(r.Context(), projectKeyParam, environmentKeyParam, userKeyParam, featureFlagKeyParam, userSettingsBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
