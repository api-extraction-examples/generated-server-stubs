/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type CopyActions string

// List of CopyActions
const (
	UPDATE_ON CopyActions = "updateOn"
	UPDATE_PREREQUISITES CopyActions = "updatePrerequisites"
	UPDATE_TARGETS CopyActions = "updateTargets"
	UPDATE_RULES CopyActions = "updateRules"
	UPDATE_FALLTHROUGH CopyActions = "updateFallthrough"
	UPDATE_OFF_VARIATION CopyActions = "updateOffVariation"
)

// AllowedCopyActionsEnumValues is all the allowed values of CopyActions enum
var AllowedCopyActionsEnumValues = []CopyActions{
	"updateOn",
	"updatePrerequisites",
	"updateTargets",
	"updateRules",
	"updateFallthrough",
	"updateOffVariation",
}

// validCopyActionsEnumValue provides a map of CopyActionss for fast verification of use input
var validCopyActionsEnumValues = map[CopyActions]struct{}{
	"updateOn": {},
	"updatePrerequisites": {},
	"updateTargets": {},
	"updateRules": {},
	"updateFallthrough": {},
	"updateOffVariation": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CopyActions) IsValid() bool {
	_, ok := validCopyActionsEnumValues[v]
	return ok
}

// NewCopyActionsFromValue returns a pointer to a valid CopyActions
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCopyActionsFromValue(v string) (CopyActions, error) {
	ev := CopyActions(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for CopyActions: valid values are %v", v, AllowedCopyActionsEnumValues)
	}
}



// AssertCopyActionsRequired checks if the required fields are not zero-ed
func AssertCopyActionsRequired(obj CopyActions) error {
	return nil
}

// AssertCopyActionsConstraints checks if the values respects the defined constraints
func AssertCopyActionsConstraints(obj CopyActions) error {
	return nil
}
