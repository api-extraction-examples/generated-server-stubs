/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type Token struct {

	// The unique resource id.
	Id string `json:"_id,omitempty"`

	Links Links `json:"_links,omitempty"`

	Member Member `json:"_member,omitempty"`

	// A unix epoch time in milliseconds specifying the creation time of this access token.
	CreationDate int64 `json:"creationDate,omitempty"`

	// A list of custom role IDs to use as access limits for the access token
	CustomRoleIds []string `json:"customRoleIds,omitempty"`

	// The default API version for this token
	DefaultApiVersion int32 `json:"defaultApiVersion,omitempty"`

	InlineRole []Statement `json:"inlineRole,omitempty"`

	// A unix epoch time in milliseconds specifying the last time this access token was modified.
	LastModified int64 `json:"lastModified,omitempty"`

	// A unix epoch time in milliseconds specifying the last time this access token was used to authorize access to the LaunchDarkly REST API.
	LastUsed int64 `json:"lastUsed,omitempty"`

	// The unique resource id.
	MemberId string `json:"memberId,omitempty"`

	// A human-friendly name for the access token
	Name string `json:"name,omitempty"`

	// The unique resource id.
	OwnerId string `json:"ownerId,omitempty"`

	// The name of a built-in role for the token
	Role string `json:"role,omitempty"`

	// Whether the token will be a service token https://docs.launchdarkly.com/home/account-security/api-access-tokens#service-tokens
	ServiceToken bool `json:"serviceToken,omitempty"`

	// The last 4 digits of the unique secret key for this access token. If creating or resetting the token, this will be the full token secret.
	Token string `json:"token,omitempty"`
}

// AssertTokenRequired checks if the required fields are not zero-ed
func AssertTokenRequired(obj Token) error {
	if err := AssertLinksRequired(obj.Links); err != nil {
		return err
	}
	if err := AssertMemberRequired(obj.Member); err != nil {
		return err
	}
	for _, el := range obj.InlineRole {
		if err := AssertStatementRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertTokenConstraints checks if the values respects the defined constraints
func AssertTokenConstraints(obj Token) error {
	return nil
}
