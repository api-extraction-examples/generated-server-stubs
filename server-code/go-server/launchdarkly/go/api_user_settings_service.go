/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// UserSettingsAPIService is a service that implements the logic for the UserSettingsAPIServicer
// This service should implement the business logic for every endpoint for the UserSettingsAPI API.
// Include any external packages or services that will be required by this service.
type UserSettingsAPIService struct {
}

// NewUserSettingsAPIService creates a default api service
func NewUserSettingsAPIService() UserSettingsAPIServicer {
	return &UserSettingsAPIService{}
}

// GetExpiringUserTargetsForUser - Get expiring dates on flags for user
func (s *UserSettingsAPIService) GetExpiringUserTargetsForUser(ctx context.Context, projectKey string, environmentKey string, userKey string) (ImplResponse, error) {
	// TODO - update GetExpiringUserTargetsForUser with the required logic for this service method.
	// Add api_user_settings_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, UserTargetingExpirationOnFlagsForUser{}) or use other options such as http.Ok ...
	// return Response(200, UserTargetingExpirationOnFlagsForUser{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetExpiringUserTargetsForUser method not implemented")
}

// GetUserFlagSetting - Fetch a single flag setting for a user by key.
func (s *UserSettingsAPIService) GetUserFlagSetting(ctx context.Context, projectKey string, environmentKey string, userKey string, featureFlagKey string) (ImplResponse, error) {
	// TODO - update GetUserFlagSetting with the required logic for this service method.
	// Add api_user_settings_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, UserFlagSetting{}) or use other options such as http.Ok ...
	// return Response(200, UserFlagSetting{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetUserFlagSetting method not implemented")
}

// GetUserFlagSettings - Fetch a single flag setting for a user by key.
func (s *UserSettingsAPIService) GetUserFlagSettings(ctx context.Context, projectKey string, environmentKey string, userKey string) (ImplResponse, error) {
	// TODO - update GetUserFlagSettings with the required logic for this service method.
	// Add api_user_settings_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, UserFlagSettings{}) or use other options such as http.Ok ...
	// return Response(200, UserFlagSettings{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetUserFlagSettings method not implemented")
}

// PatchExpiringUserTargetsForFlags - Update, add, or delete expiring user targets for a single user on all flags
func (s *UserSettingsAPIService) PatchExpiringUserTargetsForFlags(ctx context.Context, projectKey string, environmentKey string, userKey string, semanticPatchWithComment []SemanticPatchOperation) (ImplResponse, error) {
	// TODO - update PatchExpiringUserTargetsForFlags with the required logic for this service method.
	// Add api_user_settings_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, UserTargetingExpirationOnFlagsForUser{}) or use other options such as http.Ok ...
	// return Response(200, UserTargetingExpirationOnFlagsForUser{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	// TODO: Uncomment the next line to return response Response(409, {}) or use other options such as http.Ok ...
	// return Response(409, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("PatchExpiringUserTargetsForFlags method not implemented")
}

// PutFlagSetting - Specifically enable or disable a feature flag for a user based on their key.
func (s *UserSettingsAPIService) PutFlagSetting(ctx context.Context, projectKey string, environmentKey string, userKey string, featureFlagKey string, userSettingsBody PutFlagSettingRequest) (ImplResponse, error) {
	// TODO - update PutFlagSetting with the required logic for this service method.
	// Add api_user_settings_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("PutFlagSetting method not implemented")
}
