/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IntegrationsAPIController binds http requests to an api service and writes the service results to the http response
type IntegrationsAPIController struct {
	service IntegrationsAPIServicer
	errorHandler ErrorHandler
}

// IntegrationsAPIOption for how the controller is set up.
type IntegrationsAPIOption func(*IntegrationsAPIController)

// WithIntegrationsAPIErrorHandler inject ErrorHandler into controller
func WithIntegrationsAPIErrorHandler(h ErrorHandler) IntegrationsAPIOption {
	return func(c *IntegrationsAPIController) {
		c.errorHandler = h
	}
}

// NewIntegrationsAPIController creates a default api controller
func NewIntegrationsAPIController(s IntegrationsAPIServicer, opts ...IntegrationsAPIOption) Router {
	controller := &IntegrationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IntegrationsAPIController
func (c *IntegrationsAPIController) Routes() Routes {
	return Routes{
		"DeleteIntegrationSubscription": Route{
			strings.ToUpper("Delete"),
			"/api/v2/integrations/{integrationKey}/{integrationId}",
			c.DeleteIntegrationSubscription,
		},
		"GetIntegrationSubscription": Route{
			strings.ToUpper("Get"),
			"/api/v2/integrations/{integrationKey}/{integrationId}",
			c.GetIntegrationSubscription,
		},
		"GetIntegrationSubscriptions": Route{
			strings.ToUpper("Get"),
			"/api/v2/integrations/{integrationKey}",
			c.GetIntegrationSubscriptions,
		},
		"GetIntegrations": Route{
			strings.ToUpper("Get"),
			"/api/v2/integrations",
			c.GetIntegrations,
		},
		"PatchIntegrationSubscription": Route{
			strings.ToUpper("Patch"),
			"/api/v2/integrations/{integrationKey}/{integrationId}",
			c.PatchIntegrationSubscription,
		},
		"PostIntegrationSubscription": Route{
			strings.ToUpper("Post"),
			"/api/v2/integrations/{integrationKey}",
			c.PostIntegrationSubscription,
		},
	}
}

// DeleteIntegrationSubscription - Delete an integration subscription by ID.
func (c *IntegrationsAPIController) DeleteIntegrationSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	integrationKeyParam := params["integrationKey"]
	if integrationKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationKey"}, nil)
		return
	}
	integrationIdParam := params["integrationId"]
	if integrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationId"}, nil)
		return
	}
	result, err := c.service.DeleteIntegrationSubscription(r.Context(), integrationKeyParam, integrationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIntegrationSubscription - Get a single integration subscription by ID.
func (c *IntegrationsAPIController) GetIntegrationSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	integrationKeyParam := params["integrationKey"]
	if integrationKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationKey"}, nil)
		return
	}
	integrationIdParam := params["integrationId"]
	if integrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationId"}, nil)
		return
	}
	result, err := c.service.GetIntegrationSubscription(r.Context(), integrationKeyParam, integrationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIntegrationSubscriptions - Get a list of all configured integrations of a given kind.
func (c *IntegrationsAPIController) GetIntegrationSubscriptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	integrationKeyParam := params["integrationKey"]
	if integrationKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationKey"}, nil)
		return
	}
	result, err := c.service.GetIntegrationSubscriptions(r.Context(), integrationKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIntegrations - Get a list of all configured audit log event integrations associated with this account.
func (c *IntegrationsAPIController) GetIntegrations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetIntegrations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchIntegrationSubscription - Modify an integration subscription by ID.
func (c *IntegrationsAPIController) PatchIntegrationSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	integrationKeyParam := params["integrationKey"]
	if integrationKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationKey"}, nil)
		return
	}
	integrationIdParam := params["integrationId"]
	if integrationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationId"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchIntegrationSubscription(r.Context(), integrationKeyParam, integrationIdParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostIntegrationSubscription - Create a new integration subscription of a given kind.
func (c *IntegrationsAPIController) PostIntegrationSubscription(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	integrationKeyParam := params["integrationKey"]
	if integrationKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"integrationKey"}, nil)
		return
	}
	subscriptionBodyParam := PostIntegrationSubscriptionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&subscriptionBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostIntegrationSubscriptionRequestRequired(subscriptionBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostIntegrationSubscriptionRequestConstraints(subscriptionBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostIntegrationSubscription(r.Context(), integrationKeyParam, subscriptionBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
