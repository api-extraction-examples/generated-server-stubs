/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomRolesAPIController binds http requests to an api service and writes the service results to the http response
type CustomRolesAPIController struct {
	service CustomRolesAPIServicer
	errorHandler ErrorHandler
}

// CustomRolesAPIOption for how the controller is set up.
type CustomRolesAPIOption func(*CustomRolesAPIController)

// WithCustomRolesAPIErrorHandler inject ErrorHandler into controller
func WithCustomRolesAPIErrorHandler(h ErrorHandler) CustomRolesAPIOption {
	return func(c *CustomRolesAPIController) {
		c.errorHandler = h
	}
}

// NewCustomRolesAPIController creates a default api controller
func NewCustomRolesAPIController(s CustomRolesAPIServicer, opts ...CustomRolesAPIOption) Router {
	controller := &CustomRolesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomRolesAPIController
func (c *CustomRolesAPIController) Routes() Routes {
	return Routes{
		"DeleteCustomRole": Route{
			strings.ToUpper("Delete"),
			"/api/v2/roles/{customRoleKey}",
			c.DeleteCustomRole,
		},
		"GetCustomRole": Route{
			strings.ToUpper("Get"),
			"/api/v2/roles/{customRoleKey}",
			c.GetCustomRole,
		},
		"GetCustomRoles": Route{
			strings.ToUpper("Get"),
			"/api/v2/roles",
			c.GetCustomRoles,
		},
		"PatchCustomRole": Route{
			strings.ToUpper("Patch"),
			"/api/v2/roles/{customRoleKey}",
			c.PatchCustomRole,
		},
		"PostCustomRole": Route{
			strings.ToUpper("Post"),
			"/api/v2/roles",
			c.PostCustomRole,
		},
	}
}

// DeleteCustomRole - Delete a custom role by key.
func (c *CustomRolesAPIController) DeleteCustomRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customRoleKeyParam := params["customRoleKey"]
	if customRoleKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"customRoleKey"}, nil)
		return
	}
	result, err := c.service.DeleteCustomRole(r.Context(), customRoleKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomRole - Get one custom role by key.
func (c *CustomRolesAPIController) GetCustomRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customRoleKeyParam := params["customRoleKey"]
	if customRoleKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"customRoleKey"}, nil)
		return
	}
	result, err := c.service.GetCustomRole(r.Context(), customRoleKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomRoles - Return a complete list of custom roles.
func (c *CustomRolesAPIController) GetCustomRoles(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCustomRoles(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchCustomRole - Modify a custom role by key.
func (c *CustomRolesAPIController) PatchCustomRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customRoleKeyParam := params["customRoleKey"]
	if customRoleKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"customRoleKey"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchCustomRole(r.Context(), customRoleKeyParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostCustomRole - Create a new custom role.
func (c *CustomRolesAPIController) PostCustomRole(w http.ResponseWriter, r *http.Request) {
	customRoleBodyParam := PostCustomRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customRoleBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostCustomRoleRequestRequired(customRoleBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostCustomRoleRequestConstraints(customRoleBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostCustomRole(r.Context(), customRoleBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
