/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RelayProxyConfigurationsAPIController binds http requests to an api service and writes the service results to the http response
type RelayProxyConfigurationsAPIController struct {
	service RelayProxyConfigurationsAPIServicer
	errorHandler ErrorHandler
}

// RelayProxyConfigurationsAPIOption for how the controller is set up.
type RelayProxyConfigurationsAPIOption func(*RelayProxyConfigurationsAPIController)

// WithRelayProxyConfigurationsAPIErrorHandler inject ErrorHandler into controller
func WithRelayProxyConfigurationsAPIErrorHandler(h ErrorHandler) RelayProxyConfigurationsAPIOption {
	return func(c *RelayProxyConfigurationsAPIController) {
		c.errorHandler = h
	}
}

// NewRelayProxyConfigurationsAPIController creates a default api controller
func NewRelayProxyConfigurationsAPIController(s RelayProxyConfigurationsAPIServicer, opts ...RelayProxyConfigurationsAPIOption) Router {
	controller := &RelayProxyConfigurationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RelayProxyConfigurationsAPIController
func (c *RelayProxyConfigurationsAPIController) Routes() Routes {
	return Routes{
		"DeleteRelayProxyConfig": Route{
			strings.ToUpper("Delete"),
			"/api/v2/account/relay-auto-configs/{id}",
			c.DeleteRelayProxyConfig,
		},
		"GetRelayProxyConfig": Route{
			strings.ToUpper("Get"),
			"/api/v2/account/relay-auto-configs/{id}",
			c.GetRelayProxyConfig,
		},
		"GetRelayProxyConfigs": Route{
			strings.ToUpper("Get"),
			"/api/v2/account/relay-auto-configs",
			c.GetRelayProxyConfigs,
		},
		"PatchRelayProxyConfig": Route{
			strings.ToUpper("Patch"),
			"/api/v2/account/relay-auto-configs/{id}",
			c.PatchRelayProxyConfig,
		},
		"PostRelayAutoConfig": Route{
			strings.ToUpper("Post"),
			"/api/v2/account/relay-auto-configs",
			c.PostRelayAutoConfig,
		},
		"ResetRelayProxyConfig": Route{
			strings.ToUpper("Post"),
			"/api/v2/account/relay-auto-configs/{id}/reset",
			c.ResetRelayProxyConfig,
		},
	}
}

// DeleteRelayProxyConfig - Delete a relay proxy configuration by ID.
func (c *RelayProxyConfigurationsAPIController) DeleteRelayProxyConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteRelayProxyConfig(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRelayProxyConfig - Get a single relay proxy configuration by ID.
func (c *RelayProxyConfigurationsAPIController) GetRelayProxyConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRelayProxyConfig(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRelayProxyConfigs - Returns a list of relay proxy configurations in the account.
func (c *RelayProxyConfigurationsAPIController) GetRelayProxyConfigs(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetRelayProxyConfigs(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchRelayProxyConfig - Modify a relay proxy configuration by ID.
func (c *RelayProxyConfigurationsAPIController) PatchRelayProxyConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchRelayProxyConfig(r.Context(), idParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostRelayAutoConfig - Create a new relay proxy config.
func (c *RelayProxyConfigurationsAPIController) PostRelayAutoConfig(w http.ResponseWriter, r *http.Request) {
	relayProxyConfigBodyParam := PostRelayAutoConfigRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&relayProxyConfigBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostRelayAutoConfigRequestRequired(relayProxyConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostRelayAutoConfigRequestConstraints(relayProxyConfigBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostRelayAutoConfig(r.Context(), relayProxyConfigBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetRelayProxyConfig - Reset a relay proxy configuration's secret key with an optional expiry time for the old key.
func (c *RelayProxyConfigurationsAPIController) ResetRelayProxyConfig(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var expiryParam int64
	if query.Has("expiry") {
		param, err := parseNumericParameter[int64](
			query.Get("expiry"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		expiryParam = param
	} else {
	}
	result, err := c.service.ResetRelayProxyConfig(r.Context(), idParam, expiryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
