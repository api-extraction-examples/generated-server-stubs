/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DataExportDestinationsAPIController binds http requests to an api service and writes the service results to the http response
type DataExportDestinationsAPIController struct {
	service DataExportDestinationsAPIServicer
	errorHandler ErrorHandler
}

// DataExportDestinationsAPIOption for how the controller is set up.
type DataExportDestinationsAPIOption func(*DataExportDestinationsAPIController)

// WithDataExportDestinationsAPIErrorHandler inject ErrorHandler into controller
func WithDataExportDestinationsAPIErrorHandler(h ErrorHandler) DataExportDestinationsAPIOption {
	return func(c *DataExportDestinationsAPIController) {
		c.errorHandler = h
	}
}

// NewDataExportDestinationsAPIController creates a default api controller
func NewDataExportDestinationsAPIController(s DataExportDestinationsAPIServicer, opts ...DataExportDestinationsAPIOption) Router {
	controller := &DataExportDestinationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DataExportDestinationsAPIController
func (c *DataExportDestinationsAPIController) Routes() Routes {
	return Routes{
		"DeleteDestination": Route{
			strings.ToUpper("Delete"),
			"/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}",
			c.DeleteDestination,
		},
		"GetDestination": Route{
			strings.ToUpper("Get"),
			"/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}",
			c.GetDestination,
		},
		"GetDestinations": Route{
			strings.ToUpper("Get"),
			"/api/v2/destinations",
			c.GetDestinations,
		},
		"PatchDestination": Route{
			strings.ToUpper("Patch"),
			"/api/v2/destinations/{projectKey}/{environmentKey}/{destinationId}",
			c.PatchDestination,
		},
		"PostDestination": Route{
			strings.ToUpper("Post"),
			"/api/v2/destinations/{projectKey}/{environmentKey}",
			c.PostDestination,
		},
	}
}

// DeleteDestination - Get a single data export destination by ID
func (c *DataExportDestinationsAPIController) DeleteDestination(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	destinationIdParam := params["destinationId"]
	if destinationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"destinationId"}, nil)
		return
	}
	result, err := c.service.DeleteDestination(r.Context(), projectKeyParam, environmentKeyParam, destinationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDestination - Get a single data export destination by ID
func (c *DataExportDestinationsAPIController) GetDestination(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	destinationIdParam := params["destinationId"]
	if destinationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"destinationId"}, nil)
		return
	}
	result, err := c.service.GetDestination(r.Context(), projectKeyParam, environmentKeyParam, destinationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDestinations - Returns a list of all data export destinations.
func (c *DataExportDestinationsAPIController) GetDestinations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDestinations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchDestination - Perform a partial update to a data export destination.
func (c *DataExportDestinationsAPIController) PatchDestination(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	destinationIdParam := params["destinationId"]
	if destinationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"destinationId"}, nil)
		return
	}
	patchOnlyParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchOnlyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchOnlyParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchDestination(r.Context(), projectKeyParam, environmentKeyParam, destinationIdParam, patchOnlyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostDestination - Create a new data export destination
func (c *DataExportDestinationsAPIController) PostDestination(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	destinationBodyParam := PostDestinationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&destinationBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostDestinationRequestRequired(destinationBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostDestinationRequestConstraints(destinationBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostDestination(r.Context(), projectKeyParam, environmentKeyParam, destinationBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
