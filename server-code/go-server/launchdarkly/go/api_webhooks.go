/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WebhooksAPIController binds http requests to an api service and writes the service results to the http response
type WebhooksAPIController struct {
	service WebhooksAPIServicer
	errorHandler ErrorHandler
}

// WebhooksAPIOption for how the controller is set up.
type WebhooksAPIOption func(*WebhooksAPIController)

// WithWebhooksAPIErrorHandler inject ErrorHandler into controller
func WithWebhooksAPIErrorHandler(h ErrorHandler) WebhooksAPIOption {
	return func(c *WebhooksAPIController) {
		c.errorHandler = h
	}
}

// NewWebhooksAPIController creates a default api controller
func NewWebhooksAPIController(s WebhooksAPIServicer, opts ...WebhooksAPIOption) Router {
	controller := &WebhooksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WebhooksAPIController
func (c *WebhooksAPIController) Routes() Routes {
	return Routes{
		"DeleteWebhook": Route{
			strings.ToUpper("Delete"),
			"/api/v2/webhooks/{resourceId}",
			c.DeleteWebhook,
		},
		"GetWebhook": Route{
			strings.ToUpper("Get"),
			"/api/v2/webhooks/{resourceId}",
			c.GetWebhook,
		},
		"GetWebhooks": Route{
			strings.ToUpper("Get"),
			"/api/v2/webhooks",
			c.GetWebhooks,
		},
		"PatchWebhook": Route{
			strings.ToUpper("Patch"),
			"/api/v2/webhooks/{resourceId}",
			c.PatchWebhook,
		},
		"PostWebhook": Route{
			strings.ToUpper("Post"),
			"/api/v2/webhooks",
			c.PostWebhook,
		},
	}
}

// DeleteWebhook - Delete a webhook by ID.
func (c *WebhooksAPIController) DeleteWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceIdParam := params["resourceId"]
	if resourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"resourceId"}, nil)
		return
	}
	result, err := c.service.DeleteWebhook(r.Context(), resourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWebhook - Get a webhook by ID.
func (c *WebhooksAPIController) GetWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceIdParam := params["resourceId"]
	if resourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"resourceId"}, nil)
		return
	}
	result, err := c.service.GetWebhook(r.Context(), resourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWebhooks - Fetch a list of all webhooks.
func (c *WebhooksAPIController) GetWebhooks(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetWebhooks(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchWebhook - Modify a webhook by ID.
func (c *WebhooksAPIController) PatchWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceIdParam := params["resourceId"]
	if resourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"resourceId"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchWebhook(r.Context(), resourceIdParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostWebhook - Create a webhook.
func (c *WebhooksAPIController) PostWebhook(w http.ResponseWriter, r *http.Request) {
	webhookBodyParam := PostWebhookRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&webhookBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostWebhookRequestRequired(webhookBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostWebhookRequestConstraints(webhookBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostWebhook(r.Context(), webhookBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
