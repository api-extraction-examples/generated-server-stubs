/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AuditLogAPIController binds http requests to an api service and writes the service results to the http response
type AuditLogAPIController struct {
	service AuditLogAPIServicer
	errorHandler ErrorHandler
}

// AuditLogAPIOption for how the controller is set up.
type AuditLogAPIOption func(*AuditLogAPIController)

// WithAuditLogAPIErrorHandler inject ErrorHandler into controller
func WithAuditLogAPIErrorHandler(h ErrorHandler) AuditLogAPIOption {
	return func(c *AuditLogAPIController) {
		c.errorHandler = h
	}
}

// NewAuditLogAPIController creates a default api controller
func NewAuditLogAPIController(s AuditLogAPIServicer, opts ...AuditLogAPIOption) Router {
	controller := &AuditLogAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuditLogAPIController
func (c *AuditLogAPIController) Routes() Routes {
	return Routes{
		"GetAuditLogEntries": Route{
			strings.ToUpper("Get"),
			"/api/v2/auditlog",
			c.GetAuditLogEntries,
		},
		"GetAuditLogEntry": Route{
			strings.ToUpper("Get"),
			"/api/v2/auditlog/{resourceId}",
			c.GetAuditLogEntry,
		},
	}
}

// GetAuditLogEntries - Get a list of all audit log entries. The query parameters allow you to restrict the returned results by date ranges, resource specifiers, or a full-text search query.
func (c *AuditLogAPIController) GetAuditLogEntries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var beforeParam int64
	if query.Has("before") {
		param, err := parseNumericParameter[int64](
			query.Get("before"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		beforeParam = param
	} else {
	}
	var afterParam int64
	if query.Has("after") {
		param, err := parseNumericParameter[int64](
			query.Get("after"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		afterParam = param
	} else {
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
	}
	var limitParam float32
	if query.Has("limit") {
		param, err := parseNumericParameter[float32](
			query.Get("limit"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var specParam string
	if query.Has("spec") {
		param := query.Get("spec")

		specParam = param
	} else {
	}
	result, err := c.service.GetAuditLogEntries(r.Context(), beforeParam, afterParam, qParam, limitParam, specParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAuditLogEntry - Use this endpoint to fetch a single audit log entry by its resouce ID.
func (c *AuditLogAPIController) GetAuditLogEntry(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	resourceIdParam := params["resourceId"]
	if resourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"resourceId"}, nil)
		return
	}
	result, err := c.service.GetAuditLogEntry(r.Context(), resourceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
