/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Role string

// List of Role
const (
	WRITER Role = "writer"
	READER Role = "reader"
	ADMIN Role = "admin"
	OWNER Role = "owner"
)

// AllowedRoleEnumValues is all the allowed values of Role enum
var AllowedRoleEnumValues = []Role{
	"writer",
	"reader",
	"admin",
	"owner",
}

// validRoleEnumValue provides a map of Roles for fast verification of use input
var validRoleEnumValues = map[Role]struct{}{
	"writer": {},
	"reader": {},
	"admin": {},
	"owner": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Role) IsValid() bool {
	_, ok := validRoleEnumValues[v]
	return ok
}

// NewRoleFromValue returns a pointer to a valid Role
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoleFromValue(v string) (Role, error) {
	ev := Role(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Role: valid values are %v", v, AllowedRoleEnumValues)
	}
}



// AssertRoleRequired checks if the required fields are not zero-ed
func AssertRoleRequired(obj Role) error {
	return nil
}

// AssertRoleConstraints checks if the values respects the defined constraints
func AssertRoleConstraints(obj Role) error {
	return nil
}
