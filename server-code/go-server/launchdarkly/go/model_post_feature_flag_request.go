/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type PostFeatureFlagRequest struct {

	ClientSideAvailability ClientSideAvailability `json:"clientSideAvailability,omitempty"`

	Defaults Defaults `json:"defaults,omitempty"`

	// A description of the feature flag.
	Description string `json:"description,omitempty"`

	// Whether or not this flag should be made available to the client-side JavaScript SDK.
	IncludeInSnippet bool `json:"includeInSnippet,omitempty"`

	// A unique key that will be used to reference the flag in your code.
	Key string `json:"key"`

	// A human-friendly name for the feature flag. Remember to note if this flag is intended to be temporary or permanent.
	Name string `json:"name"`

	// Tags for the feature flag.
	Tags []string `json:"tags,omitempty"`

	// Whether or not the flag is a temporary flag.
	Temporary bool `json:"temporary,omitempty"`

	// An array of possible variations for the flag.
	Variations []Variation `json:"variations"`
}

// AssertPostFeatureFlagRequestRequired checks if the required fields are not zero-ed
func AssertPostFeatureFlagRequestRequired(obj PostFeatureFlagRequest) error {
	elements := map[string]interface{}{
		"key": obj.Key,
		"name": obj.Name,
		"variations": obj.Variations,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertClientSideAvailabilityRequired(obj.ClientSideAvailability); err != nil {
		return err
	}
	if err := AssertDefaultsRequired(obj.Defaults); err != nil {
		return err
	}
	for _, el := range obj.Variations {
		if err := AssertVariationRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertPostFeatureFlagRequestConstraints checks if the values respects the defined constraints
func AssertPostFeatureFlagRequestConstraints(obj PostFeatureFlagRequest) error {
	return nil
}
