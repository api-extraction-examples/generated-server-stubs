/*
 * LaunchDarkly REST API
 *
 * Build custom integrations with the LaunchDarkly REST API
 *
 * API version: 5.3.0
 * Contact: support@launchdarkly.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EnvironmentsAPIController binds http requests to an api service and writes the service results to the http response
type EnvironmentsAPIController struct {
	service EnvironmentsAPIServicer
	errorHandler ErrorHandler
}

// EnvironmentsAPIOption for how the controller is set up.
type EnvironmentsAPIOption func(*EnvironmentsAPIController)

// WithEnvironmentsAPIErrorHandler inject ErrorHandler into controller
func WithEnvironmentsAPIErrorHandler(h ErrorHandler) EnvironmentsAPIOption {
	return func(c *EnvironmentsAPIController) {
		c.errorHandler = h
	}
}

// NewEnvironmentsAPIController creates a default api controller
func NewEnvironmentsAPIController(s EnvironmentsAPIServicer, opts ...EnvironmentsAPIOption) Router {
	controller := &EnvironmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EnvironmentsAPIController
func (c *EnvironmentsAPIController) Routes() Routes {
	return Routes{
		"DeleteEnvironment": Route{
			strings.ToUpper("Delete"),
			"/api/v2/projects/{projectKey}/environments/{environmentKey}",
			c.DeleteEnvironment,
		},
		"GetEnvironment": Route{
			strings.ToUpper("Get"),
			"/api/v2/projects/{projectKey}/environments/{environmentKey}",
			c.GetEnvironment,
		},
		"PatchEnvironment": Route{
			strings.ToUpper("Patch"),
			"/api/v2/projects/{projectKey}/environments/{environmentKey}",
			c.PatchEnvironment,
		},
		"PostEnvironment": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/environments",
			c.PostEnvironment,
		},
		"ResetEnvironmentMobileKey": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/environments/{environmentKey}/mobileKey",
			c.ResetEnvironmentMobileKey,
		},
		"ResetEnvironmentSDKKey": Route{
			strings.ToUpper("Post"),
			"/api/v2/projects/{projectKey}/environments/{environmentKey}/apiKey",
			c.ResetEnvironmentSDKKey,
		},
	}
}

// DeleteEnvironment - Delete an environment in a specific project.
func (c *EnvironmentsAPIController) DeleteEnvironment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	result, err := c.service.DeleteEnvironment(r.Context(), projectKeyParam, environmentKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEnvironment - Get an environment given a project and key.
func (c *EnvironmentsAPIController) GetEnvironment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	result, err := c.service.GetEnvironment(r.Context(), projectKeyParam, environmentKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchEnvironment - Modify an environment by ID. If you try to patch the environment by setting both required and requiredApprovalTags, it will result in an error. Users can specify either required approvals for all flags in an environment or those with specific tags, but not both. Only customers on an Enterprise plan can require approval for flag updates with either mechanism.
func (c *EnvironmentsAPIController) PatchEnvironment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	patchDeltaParam := []PatchOperation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchDeltaParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchDeltaParam {
		if err := AssertPatchOperationRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchEnvironment(r.Context(), projectKeyParam, environmentKeyParam, patchDeltaParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostEnvironment - Create a new environment in a specified project with a given name, key, and swatch color.
func (c *EnvironmentsAPIController) PostEnvironment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentBodyParam := EnvironmentPost{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&environmentBodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEnvironmentPostRequired(environmentBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertEnvironmentPostConstraints(environmentBodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostEnvironment(r.Context(), projectKeyParam, environmentBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetEnvironmentMobileKey - Reset an environment's mobile key. The optional expiry for the old key is deprecated for this endpoint, so the old key will always expire immediately.
func (c *EnvironmentsAPIController) ResetEnvironmentMobileKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	var expiryParam int64
	if query.Has("expiry") {
		param, err := parseNumericParameter[int64](
			query.Get("expiry"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		expiryParam = param
	} else {
	}
	result, err := c.service.ResetEnvironmentMobileKey(r.Context(), projectKeyParam, environmentKeyParam, expiryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetEnvironmentSDKKey - Reset an environment's SDK key with an optional expiry time for the old key.
func (c *EnvironmentsAPIController) ResetEnvironmentSDKKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyParam := params["projectKey"]
	if projectKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKey"}, nil)
		return
	}
	environmentKeyParam := params["environmentKey"]
	if environmentKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"environmentKey"}, nil)
		return
	}
	var expiryParam int64
	if query.Has("expiry") {
		param, err := parseNumericParameter[int64](
			query.Get("expiry"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		expiryParam = param
	} else {
	}
	result, err := c.service.ResetEnvironmentSDKKey(r.Context(), projectKeyParam, environmentKeyParam, expiryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
