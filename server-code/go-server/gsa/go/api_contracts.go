/*
 * Discovery Market Research
 *
 * <p>This API drives the <a href=\"https://discovery.gsa.gov\">Discovery Market Research Tool</a>. It contains information on the vendors that are part of the OASIS and OASIS Small Business contracting vehicles, such as their contracting history, their elligibility for contract awards, and their small business designations. To learn more about the tool, please visit <a href=\"https://discovery.gsa.gov\">Discovery</a> or see the README on our <a href=\"https://github.com/PSHCDevOps/discovery\">GitHub repository</a>.</p> <p><strong>Please note that the base path for this API is <code>https://api.data.gov/gsa/discovery/</code></strong></p> <p>It requires an API key, obtainable at <a href=\"http://api.data.gov/\">api.data.gov</a>. It must be passed in the <code>api_key</code> parameter with each request.</p>
 *
 * API version: 0.1
 * Contact: discovery-18f@gsa.gov
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContractsAPIController binds http requests to an api service and writes the service results to the http response
type ContractsAPIController struct {
	service ContractsAPIServicer
	errorHandler ErrorHandler
}

// ContractsAPIOption for how the controller is set up.
type ContractsAPIOption func(*ContractsAPIController)

// WithContractsAPIErrorHandler inject ErrorHandler into controller
func WithContractsAPIErrorHandler(h ErrorHandler) ContractsAPIOption {
	return func(c *ContractsAPIController) {
		c.errorHandler = h
	}
}

// NewContractsAPIController creates a default api controller
func NewContractsAPIController(s ContractsAPIServicer, opts ...ContractsAPIOption) Router {
	controller := &ContractsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContractsAPIController
func (c *ContractsAPIController) Routes() Routes {
	return Routes{
		"ListContractsGET": Route{
			strings.ToUpper("Get"),
			"/api/contracts/",
			c.ListContractsGET,
		},
	}
}

// ListContractsGET - This endpoint returns contract history from FPDS for a specific vendor
func (c *ContractsAPIController) ListContractsGET(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dunsParam string
	if query.Has("duns") {
		param := query.Get("duns")

		dunsParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "duns"}, nil)
		return
	}
	var naicsParam string
	if query.Has("naics") {
		param := query.Get("naics")

		naicsParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var directionParam string
	if query.Has("direction") {
		param := query.Get("direction")

		directionParam = param
	} else {
	}
	var pageParam string
	if query.Has("page") {
		param := query.Get("page")

		pageParam = param
	} else {
	}
	result, err := c.service.ListContractsGET(r.Context(), dunsParam, naicsParam, sortParam, directionParam, pageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
