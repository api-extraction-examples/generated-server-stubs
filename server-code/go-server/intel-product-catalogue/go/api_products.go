/*
 * Intel Product Catalogue Service
 *
 * This is the documentation for PIM Micro services. In order to use this tool you need to have Basic Auth credentials and a client id. If you dont have one, please make sure to request one by sending an email to the PIM MS team: [pim.360.team@intel.com](mailto:pim.360.team@intel.com?subject=PIMServices)
 *
 * API version: 0.1.0
 * Contact: pim.360.team@intel.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProductsAPIController binds http requests to an api service and writes the service results to the http response
type ProductsAPIController struct {
	service ProductsAPIServicer
	errorHandler ErrorHandler
}

// ProductsAPIOption for how the controller is set up.
type ProductsAPIOption func(*ProductsAPIController)

// WithProductsAPIErrorHandler inject ErrorHandler into controller
func WithProductsAPIErrorHandler(h ErrorHandler) ProductsAPIOption {
	return func(c *ProductsAPIController) {
		c.errorHandler = h
	}
}

// NewProductsAPIController creates a default api controller
func NewProductsAPIController(s ProductsAPIServicer, opts ...ProductsAPIOption) Router {
	controller := &ProductsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProductsAPIController
func (c *ProductsAPIController) Routes() Routes {
	return Routes{
		"GetCodeName": Route{
			strings.ToUpper("Get"),
			"/api/products/get-codename",
			c.GetCodeName,
		},
		"GetProductInfo": Route{
			strings.ToUpper("Get"),
			"/api/products/get-products-info",
			c.GetProductInfo,
		},
		"GetProductList": Route{
			strings.ToUpper("Get"),
			"/api/products/get-products",
			c.GetProductList,
		},
		"Getorderinginfo": Route{
			strings.ToUpper("Get"),
			"/api/products/get-ordering-info",
			c.Getorderinginfo,
		},
	}
}

// GetCodeName - 5. Get list of codename details for Intel products.
func (c *ProductsAPIController) GetCodeName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localeGeoIdParam string
	if query.Has("locale_geo_id") {
		param := query.Get("locale_geo_id")

		localeGeoIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "locale_geo_id"}, nil)
		return
	}
	result, err := c.service.GetCodeName(r.Context(), localeGeoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProductInfo - 2. Get complete product info with product id.
func (c *ProductsAPIController) GetProductInfo(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localeGeoIdParam string
	if query.Has("locale_geo_id") {
		param := query.Get("locale_geo_id")

		localeGeoIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "locale_geo_id"}, nil)
		return
	}
	var productIdParam string
	if query.Has("product_id") {
		param := query.Get("product_id")

		productIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "product_id"}, nil)
		return
	}
	var includeReferenceParam string
	if query.Has("include_reference") {
		param := query.Get("include_reference")

		includeReferenceParam = param
	} else {
	}
	result, err := c.service.GetProductInfo(r.Context(), localeGeoIdParam, productIdParam, includeReferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProductList - 1. Find products by product id or category id
func (c *ProductsAPIController) GetProductList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localeGeoIdParam string
	if query.Has("locale_geo_id") {
		param := query.Get("locale_geo_id")

		localeGeoIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "locale_geo_id"}, nil)
		return
	}
	var categoryIdParam string
	if query.Has("category_id") {
		param := query.Get("category_id")

		categoryIdParam = param
	} else {
	}
	var productIdParam string
	if query.Has("product_id") {
		param := query.Get("product_id")

		productIdParam = param
	} else {
	}
	var highlightsParam string
	if query.Has("highlights") {
		param := query.Get("highlights")

		highlightsParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	var perPageParam int32
	if query.Has("per_page") {
		param, err := parseNumericParameter[int32](
			query.Get("per_page"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		perPageParam = param
	} else {
	}
	var pageNoParam int32
	if query.Has("page_no") {
		param, err := parseNumericParameter[int32](
			query.Get("page_no"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageNoParam = param
	} else {
	}
	result, err := c.service.GetProductList(r.Context(), localeGeoIdParam, categoryIdParam, productIdParam, highlightsParam, sortParam, filtersParam, perPageParam, pageNoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Getorderinginfo - 3. Get ordering info for product id's requested.
func (c *ProductsAPIController) Getorderinginfo(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var productIdParam string
	if query.Has("product_id") {
		param := query.Get("product_id")

		productIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "product_id"}, nil)
		return
	}
	var localeGeoIdParam string
	if query.Has("locale_geo_id") {
		param := query.Get("locale_geo_id")

		localeGeoIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "locale_geo_id"}, nil)
		return
	}
	result, err := c.service.Getorderinginfo(r.Context(), productIdParam, localeGeoIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
