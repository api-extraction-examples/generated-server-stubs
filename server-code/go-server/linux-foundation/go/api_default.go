/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ExpenseAction": Route{
			strings.ToUpper("Post"),
			"/v1/expense/{action}/{reportId}",
			c.ExpenseAction,
		},
		"HealthCheck": Route{
			strings.ToUpper("Get"),
			"/v1/health",
			c.HealthCheck,
		},
		"ResetPolicy": Route{
			strings.ToUpper("Post"),
			"/v1/reset",
			c.ResetPolicy,
		},
		"TagPolicy": Route{
			strings.ToUpper("Post"),
			"/v1/tag",
			c.TagPolicy,
		},
	}
}

// ExpenseAction - Expense Action
func (c *DefaultAPIController) ExpenseAction(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	actionParam := params["action"]
	if actionParam == "" {
		c.errorHandler(w, r, &RequiredError{"action"}, nil)
		return
	}
	reportIdParam := params["reportId"]
	if reportIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"reportId"}, nil)
		return
	}
	result, err := c.service.ExpenseAction(r.Context(), actionParam, reportIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HealthCheck - Get API Health Status
func (c *DefaultAPIController) HealthCheck(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HealthCheck(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetPolicy - Reset Policy
func (c *DefaultAPIController) ResetPolicy(w http.ResponseWriter, r *http.Request) {
	bodyParam := PolicyResetInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPolicyResetInputRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPolicyResetInputConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ResetPolicy(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TagPolicy - Tag Policy
func (c *DefaultAPIController) TagPolicy(w http.ResponseWriter, r *http.Request) {
	bodyParam := PolicyTagInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPolicyTagInputRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPolicyTagInputConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.TagPolicy(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
