/*
 * Reimbursements API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ReimbursementAPIController binds http requests to an api service and writes the service results to the http response
type ReimbursementAPIController struct {
	service ReimbursementAPIServicer
	errorHandler ErrorHandler
}

// ReimbursementAPIOption for how the controller is set up.
type ReimbursementAPIOption func(*ReimbursementAPIController)

// WithReimbursementAPIErrorHandler inject ErrorHandler into controller
func WithReimbursementAPIErrorHandler(h ErrorHandler) ReimbursementAPIOption {
	return func(c *ReimbursementAPIController) {
		c.errorHandler = h
	}
}

// NewReimbursementAPIController creates a default api controller
func NewReimbursementAPIController(s ReimbursementAPIServicer, opts ...ReimbursementAPIOption) Router {
	controller := &ReimbursementAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ReimbursementAPIController
func (c *ReimbursementAPIController) Routes() Routes {
	return Routes{
		"CreateReimbursement": Route{
			strings.ToUpper("Post"),
			"/v1/reimbursement/{projectId}",
			c.CreateReimbursement,
		},
		"UpdateReimbursement": Route{
			strings.ToUpper("Patch"),
			"/v1/reimbursement/{projectId}",
			c.UpdateReimbursement,
		},
	}
}

// CreateReimbursement - Create Reimbursement
func (c *ReimbursementAPIController) CreateReimbursement(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	bodyParam := CreateReimbursementRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateReimbursementRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateReimbursementRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateReimbursement(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateReimbursement - Update Reimbursement
func (c *ReimbursementAPIController) UpdateReimbursement(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam := params["projectId"]
	if projectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectId"}, nil)
		return
	}
	bodyParam := PolicyUpdateInput{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPolicyUpdateInputRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPolicyUpdateInputConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateReimbursement(r.Context(), projectIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
