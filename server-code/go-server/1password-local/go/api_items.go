/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * API version: 1.5.7
 * Contact: support@1password.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemsAPIController binds http requests to an api service and writes the service results to the http response
type ItemsAPIController struct {
	service ItemsAPIServicer
	errorHandler ErrorHandler
}

// ItemsAPIOption for how the controller is set up.
type ItemsAPIOption func(*ItemsAPIController)

// WithItemsAPIErrorHandler inject ErrorHandler into controller
func WithItemsAPIErrorHandler(h ErrorHandler) ItemsAPIOption {
	return func(c *ItemsAPIController) {
		c.errorHandler = h
	}
}

// NewItemsAPIController creates a default api controller
func NewItemsAPIController(s ItemsAPIServicer, opts ...ItemsAPIOption) Router {
	controller := &ItemsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemsAPIController
func (c *ItemsAPIController) Routes() Routes {
	return Routes{
		"CreateVaultItem": Route{
			strings.ToUpper("Post"),
			"/vaults/{vaultUuid}/items",
			c.CreateVaultItem,
		},
		"DeleteVaultItem": Route{
			strings.ToUpper("Delete"),
			"/vaults/{vaultUuid}/items/{itemUuid}",
			c.DeleteVaultItem,
		},
		"GetVaultItemById": Route{
			strings.ToUpper("Get"),
			"/vaults/{vaultUuid}/items/{itemUuid}",
			c.GetVaultItemById,
		},
		"GetVaultItems": Route{
			strings.ToUpper("Get"),
			"/vaults/{vaultUuid}/items",
			c.GetVaultItems,
		},
		"PatchVaultItem": Route{
			strings.ToUpper("Patch"),
			"/vaults/{vaultUuid}/items/{itemUuid}",
			c.PatchVaultItem,
		},
		"UpdateVaultItem": Route{
			strings.ToUpper("Put"),
			"/vaults/{vaultUuid}/items/{itemUuid}",
			c.UpdateVaultItem,
		},
	}
}

// CreateVaultItem - Create a new Item
func (c *ItemsAPIController) CreateVaultItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	fullItemParam := FullItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&fullItemParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFullItemRequired(fullItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFullItemConstraints(fullItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateVaultItem(r.Context(), vaultUuidParam, fullItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteVaultItem - Delete an Item
func (c *ItemsAPIController) DeleteVaultItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	result, err := c.service.DeleteVaultItem(r.Context(), vaultUuidParam, itemUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVaultItemById - Get the details of an Item
func (c *ItemsAPIController) GetVaultItemById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	result, err := c.service.GetVaultItemById(r.Context(), vaultUuidParam, itemUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVaultItems - Get all items for inside a Vault
func (c *ItemsAPIController) GetVaultItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	result, err := c.service.GetVaultItems(r.Context(), vaultUuidParam, filterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PatchVaultItem - Update a subset of Item attributes
func (c *ItemsAPIController) PatchVaultItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	patchInnerParam := []PatchInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&patchInnerParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range patchInnerParam {
		if err := AssertPatchInnerRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PatchVaultItem(r.Context(), vaultUuidParam, itemUuidParam, patchInnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateVaultItem - Update an Item
func (c *ItemsAPIController) UpdateVaultItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	fullItemParam := FullItem{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&fullItemParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFullItemRequired(fullItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFullItemConstraints(fullItemParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateVaultItem(r.Context(), vaultUuidParam, itemUuidParam, fullItemParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
