/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * API version: 1.5.7
 * Contact: support@1password.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ActivityAPIController binds http requests to an api service and writes the service results to the http response
type ActivityAPIController struct {
	service ActivityAPIServicer
	errorHandler ErrorHandler
}

// ActivityAPIOption for how the controller is set up.
type ActivityAPIOption func(*ActivityAPIController)

// WithActivityAPIErrorHandler inject ErrorHandler into controller
func WithActivityAPIErrorHandler(h ErrorHandler) ActivityAPIOption {
	return func(c *ActivityAPIController) {
		c.errorHandler = h
	}
}

// NewActivityAPIController creates a default api controller
func NewActivityAPIController(s ActivityAPIServicer, opts ...ActivityAPIOption) Router {
	controller := &ActivityAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ActivityAPIController
func (c *ActivityAPIController) Routes() Routes {
	return Routes{
		"GetApiActivity": Route{
			strings.ToUpper("Get"),
			"/activity",
			c.GetApiActivity,
		},
	}
}

// GetApiActivity - Retrieve a list of API Requests that have been made.
func (c *ActivityAPIController) GetApiActivity(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 50
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	result, err := c.service.GetApiActivity(r.Context(), limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
