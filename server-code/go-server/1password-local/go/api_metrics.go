/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * API version: 1.5.7
 * Contact: support@1password.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MetricsAPIController binds http requests to an api service and writes the service results to the http response
type MetricsAPIController struct {
	service MetricsAPIServicer
	errorHandler ErrorHandler
}

// MetricsAPIOption for how the controller is set up.
type MetricsAPIOption func(*MetricsAPIController)

// WithMetricsAPIErrorHandler inject ErrorHandler into controller
func WithMetricsAPIErrorHandler(h ErrorHandler) MetricsAPIOption {
	return func(c *MetricsAPIController) {
		c.errorHandler = h
	}
}

// NewMetricsAPIController creates a default api controller
func NewMetricsAPIController(s MetricsAPIServicer, opts ...MetricsAPIOption) Router {
	controller := &MetricsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MetricsAPIController
func (c *MetricsAPIController) Routes() Routes {
	return Routes{
		"GetPrometheusMetrics": Route{
			strings.ToUpper("Get"),
			"/metrics",
			c.GetPrometheusMetrics,
		},
	}
}

// GetPrometheusMetrics - Query server for exposed Prometheus metrics
func (c *MetricsAPIController) GetPrometheusMetrics(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPrometheusMetrics(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
