/*
 * 1Password Connect
 *
 * REST API interface for 1Password Connect.
 *
 * API version: 1.5.7
 * Contact: support@1password.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FilesAPIController binds http requests to an api service and writes the service results to the http response
type FilesAPIController struct {
	service FilesAPIServicer
	errorHandler ErrorHandler
}

// FilesAPIOption for how the controller is set up.
type FilesAPIOption func(*FilesAPIController)

// WithFilesAPIErrorHandler inject ErrorHandler into controller
func WithFilesAPIErrorHandler(h ErrorHandler) FilesAPIOption {
	return func(c *FilesAPIController) {
		c.errorHandler = h
	}
}

// NewFilesAPIController creates a default api controller
func NewFilesAPIController(s FilesAPIServicer, opts ...FilesAPIOption) Router {
	controller := &FilesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FilesAPIController
func (c *FilesAPIController) Routes() Routes {
	return Routes{
		"DownloadFileByID": Route{
			strings.ToUpper("Get"),
			"/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}/content",
			c.DownloadFileByID,
		},
		"GetDetailsOfFileById": Route{
			strings.ToUpper("Get"),
			"/vaults/{vaultUuid}/items/{itemUuid}/files/{fileUuid}",
			c.GetDetailsOfFileById,
		},
		"GetItemFiles": Route{
			strings.ToUpper("Get"),
			"/vaults/{vaultUuid}/items/{itemUuid}/files",
			c.GetItemFiles,
		},
	}
}

// DownloadFileByID - Get the content of a File
func (c *FilesAPIController) DownloadFileByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	fileUuidParam := params["fileUuid"]
	if fileUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"fileUuid"}, nil)
		return
	}
	result, err := c.service.DownloadFileByID(r.Context(), vaultUuidParam, itemUuidParam, fileUuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDetailsOfFileById - Get the details of a File
func (c *FilesAPIController) GetDetailsOfFileById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	fileUuidParam := params["fileUuid"]
	if fileUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"fileUuid"}, nil)
		return
	}
	var inlineFilesParam bool
	if query.Has("inline_files") {
		param, err := parseBoolParameter(
			query.Get("inline_files"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		inlineFilesParam = param
	} else {
	}
	result, err := c.service.GetDetailsOfFileById(r.Context(), vaultUuidParam, itemUuidParam, fileUuidParam, inlineFilesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemFiles - Get all the files inside an Item
func (c *FilesAPIController) GetItemFiles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	vaultUuidParam := params["vaultUuid"]
	if vaultUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"vaultUuid"}, nil)
		return
	}
	itemUuidParam := params["itemUuid"]
	if itemUuidParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemUuid"}, nil)
		return
	}
	var inlineFilesParam bool
	if query.Has("inline_files") {
		param, err := parseBoolParameter(
			query.Get("inline_files"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		inlineFilesParam = param
	} else {
	}
	result, err := c.service.GetItemFiles(r.Context(), vaultUuidParam, itemUuidParam, inlineFilesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
