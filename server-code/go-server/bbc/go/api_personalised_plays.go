/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PersonalisedPlaysAPIController binds http requests to an api service and writes the service results to the http response
type PersonalisedPlaysAPIController struct {
	service PersonalisedPlaysAPIServicer
	errorHandler ErrorHandler
}

// PersonalisedPlaysAPIOption for how the controller is set up.
type PersonalisedPlaysAPIOption func(*PersonalisedPlaysAPIController)

// WithPersonalisedPlaysAPIErrorHandler inject ErrorHandler into controller
func WithPersonalisedPlaysAPIErrorHandler(h ErrorHandler) PersonalisedPlaysAPIOption {
	return func(c *PersonalisedPlaysAPIController) {
		c.errorHandler = h
	}
}

// NewPersonalisedPlaysAPIController creates a default api controller
func NewPersonalisedPlaysAPIController(s PersonalisedPlaysAPIServicer, opts ...PersonalisedPlaysAPIOption) Router {
	controller := &PersonalisedPlaysAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PersonalisedPlaysAPIController
func (c *PersonalisedPlaysAPIController) Routes() Routes {
	return Routes{
		"MyPlaysPost": Route{
			strings.ToUpper("Post"),
			"/my/plays",
			c.MyPlaysPost,
		},
	}
}

// MyPlaysPost - Write Play Event
func (c *PersonalisedPlaysAPIController) MyPlaysPost(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := Body4{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBody4Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBody4Constraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MyPlaysPost(r.Context(), authorizationParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
