/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PersonalisedCategoriesAPIController binds http requests to an api service and writes the service results to the http response
type PersonalisedCategoriesAPIController struct {
	service PersonalisedCategoriesAPIServicer
	errorHandler ErrorHandler
}

// PersonalisedCategoriesAPIOption for how the controller is set up.
type PersonalisedCategoriesAPIOption func(*PersonalisedCategoriesAPIController)

// WithPersonalisedCategoriesAPIErrorHandler inject ErrorHandler into controller
func WithPersonalisedCategoriesAPIErrorHandler(h ErrorHandler) PersonalisedCategoriesAPIOption {
	return func(c *PersonalisedCategoriesAPIController) {
		c.errorHandler = h
	}
}

// NewPersonalisedCategoriesAPIController creates a default api controller
func NewPersonalisedCategoriesAPIController(s PersonalisedCategoriesAPIServicer, opts ...PersonalisedCategoriesAPIOption) Router {
	controller := &PersonalisedCategoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PersonalisedCategoriesAPIController
func (c *PersonalisedCategoriesAPIController) Routes() Routes {
	return Routes{
		"MyCategoriesFollowsDelete": Route{
			strings.ToUpper("Delete"),
			"/my/categories/follows",
			c.MyCategoriesFollowsDelete,
		},
		"MyCategoriesFollowsGet": Route{
			strings.ToUpper("Get"),
			"/my/categories/follows",
			c.MyCategoriesFollowsGet,
		},
		"MyCategoriesFollowsPost": Route{
			strings.ToUpper("Post"),
			"/my/categories/follows",
			c.MyCategoriesFollowsPost,
		},
	}
}

// MyCategoriesFollowsDelete - Unfollow category
func (c *PersonalisedCategoriesAPIController) MyCategoriesFollowsDelete(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := Body1{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBody1Required(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBody1Constraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MyCategoriesFollowsDelete(r.Context(), authorizationParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MyCategoriesFollowsGet - List of followed categories
func (c *PersonalisedCategoriesAPIController) MyCategoriesFollowsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.MyCategoriesFollowsGet(r.Context(), authorizationParam, xAPIKeyParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MyCategoriesFollowsPost - Follow category
func (c *PersonalisedCategoriesAPIController) MyCategoriesFollowsPost(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := Body{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBodyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBodyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MyCategoriesFollowsPost(r.Context(), authorizationParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
