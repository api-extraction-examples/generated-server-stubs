/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CollectionsAPIController binds http requests to an api service and writes the service results to the http response
type CollectionsAPIController struct {
	service CollectionsAPIServicer
	errorHandler ErrorHandler
}

// CollectionsAPIOption for how the controller is set up.
type CollectionsAPIOption func(*CollectionsAPIController)

// WithCollectionsAPIErrorHandler inject ErrorHandler into controller
func WithCollectionsAPIErrorHandler(h ErrorHandler) CollectionsAPIOption {
	return func(c *CollectionsAPIController) {
		c.errorHandler = h
	}
}

// NewCollectionsAPIController creates a default api controller
func NewCollectionsAPIController(s CollectionsAPIServicer, opts ...CollectionsAPIOption) Router {
	controller := &CollectionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CollectionsAPIController
func (c *CollectionsAPIController) Routes() Routes {
	return Routes{
		"GetCollectionMembers": Route{
			strings.ToUpper("Get"),
			"/collections/{pid}/members",
			c.GetCollectionMembers,
		},
	}
}

// GetCollectionMembers - Collection Members
func (c *CollectionsAPIController) GetCollectionMembers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetCollectionMembers(r.Context(), xAPIKeyParam, pidParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
