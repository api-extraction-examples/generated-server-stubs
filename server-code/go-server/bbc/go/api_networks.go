/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NetworksAPIController binds http requests to an api service and writes the service results to the http response
type NetworksAPIController struct {
	service NetworksAPIServicer
	errorHandler ErrorHandler
}

// NetworksAPIOption for how the controller is set up.
type NetworksAPIOption func(*NetworksAPIController)

// WithNetworksAPIErrorHandler inject ErrorHandler into controller
func WithNetworksAPIErrorHandler(h ErrorHandler) NetworksAPIOption {
	return func(c *NetworksAPIController) {
		c.errorHandler = h
	}
}

// NewNetworksAPIController creates a default api controller
func NewNetworksAPIController(s NetworksAPIServicer, opts ...NetworksAPIOption) Router {
	controller := &NetworksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NetworksAPIController
func (c *NetworksAPIController) Routes() Routes {
	return Routes{
		"GetRadioNetworks": Route{
			strings.ToUpper("Get"),
			"/radio/networks.json",
			c.GetRadioNetworks,
		},
	}
}

// GetRadioNetworks - Networks
func (c *NetworksAPIController) GetRadioNetworks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var presetParam bool
	if query.Has("preset") {
		param, err := parseBoolParameter(
			query.Get("preset"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		presetParam = param
	} else {
	}
	var internationalParam bool
	if query.Has("international") {
		param, err := parseBoolParameter(
			query.Get("international"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		internationalParam = param
	} else {
	}
	result, err := c.service.GetRadioNetworks(r.Context(), xAPIKeyParam, presetParam, internationalParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
