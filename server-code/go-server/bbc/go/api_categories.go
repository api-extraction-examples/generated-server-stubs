/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CategoriesAPIController binds http requests to an api service and writes the service results to the http response
type CategoriesAPIController struct {
	service CategoriesAPIServicer
	errorHandler ErrorHandler
}

// CategoriesAPIOption for how the controller is set up.
type CategoriesAPIOption func(*CategoriesAPIController)

// WithCategoriesAPIErrorHandler inject ErrorHandler into controller
func WithCategoriesAPIErrorHandler(h ErrorHandler) CategoriesAPIOption {
	return func(c *CategoriesAPIController) {
		c.errorHandler = h
	}
}

// NewCategoriesAPIController creates a default api controller
func NewCategoriesAPIController(s CategoriesAPIServicer, opts ...CategoriesAPIOption) Router {
	controller := &CategoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CategoriesAPIController
func (c *CategoriesAPIController) Routes() Routes {
	return Routes{
		"CategoriesGet": Route{
			strings.ToUpper("Get"),
			"/categories",
			c.CategoriesGet,
		},
		"CategoriesIdGet": Route{
			strings.ToUpper("Get"),
			"/categories/{id}",
			c.CategoriesIdGet,
		},
	}
}

// CategoriesGet - List of categories
func (c *CategoriesAPIController) CategoriesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var kindParam string
	if query.Has("kind") {
		param := query.Get("kind")

		kindParam = param
	} else {
	}
	result, err := c.service.CategoriesGet(r.Context(), xAPIKeyParam, kindParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CategoriesIdGet - Category by ID
func (c *CategoriesAPIController) CategoriesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	xAPIKeyParam := r.Header.Get("X-API-Key")
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.CategoriesIdGet(r.Context(), xAPIKeyParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
