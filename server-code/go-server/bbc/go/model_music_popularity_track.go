/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type MusicPopularityTrack struct {

	Album string `json:"album,omitempty"`

	ArtistGid string `json:"artistGid,omitempty"`

	ArtistName string `json:"artistName,omitempty"`

	Artists []MusicTrackArtist `json:"artists,omitempty"`

	BaseTitle string `json:"baseTitle,omitempty"`

	Classical bool `json:"classical,omitempty"`

	Id string `json:"id"`

	MergedIds []string `json:"mergedIds,omitempty"`

	PreferredMultiplayRecordAudio MusicRecordAudio `json:"preferredMultiplayRecordAudio,omitempty"`

	PreferredRecordAudio MusicRecordAudio `json:"preferredRecordAudio,omitempty"`

	RadioEdit bool `json:"radioEdit,omitempty"`

	RecordAudio []MusicRecordAudio `json:"recordAudio,omitempty"`

	RecordImageHref string `json:"recordImageHref,omitempty"`

	RecordImagePid string `json:"recordImagePid,omitempty"`

	Score int32 `json:"score"`

	Title string `json:"title,omitempty"`

	Type string `json:"type,omitempty"`
}

// AssertMusicPopularityTrackRequired checks if the required fields are not zero-ed
func AssertMusicPopularityTrackRequired(obj MusicPopularityTrack) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"score": obj.Score,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Artists {
		if err := AssertMusicTrackArtistRequired(el); err != nil {
			return err
		}
	}
	if err := AssertMusicRecordAudioRequired(obj.PreferredMultiplayRecordAudio); err != nil {
		return err
	}
	if err := AssertMusicRecordAudioRequired(obj.PreferredRecordAudio); err != nil {
		return err
	}
	for _, el := range obj.RecordAudio {
		if err := AssertMusicRecordAudioRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertMusicPopularityTrackConstraints checks if the values respects the defined constraints
func AssertMusicPopularityTrackConstraints(obj MusicPopularityTrack) error {
	return nil
}
