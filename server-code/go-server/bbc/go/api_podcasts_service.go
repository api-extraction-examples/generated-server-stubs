/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// PodcastsAPIService is a service that implements the logic for the PodcastsAPIServicer
// This service should implement the business logic for every endpoint for the PodcastsAPI API.
// Include any external packages or services that will be required by this service.
type PodcastsAPIService struct {
}

// NewPodcastsAPIService creates a default api service
func NewPodcastsAPIService() PodcastsAPIServicer {
	return &PodcastsAPIService{}
}

// GetPodcastByPid - Podcast
func (s *PodcastsAPIService) GetPodcastByPid(ctx context.Context, xAPIKey string, pid string, offset int32, limit int32) (ImplResponse, error) {
	// TODO - update GetPodcastByPid with the required logic for this service method.
	// Add api_podcasts_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PodcastsResponse{}) or use other options such as http.Ok ...
	// return Response(200, PodcastsResponse{}), nil

	// TODO: Uncomment the next line to return response Response(0, PodcastErrorResponse{}) or use other options such as http.Ok ...
	// return Response(0, PodcastErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPodcastByPid method not implemented")
}

// GetPodcastEpisodes - Podcast Episodes
func (s *PodcastsAPIService) GetPodcastEpisodes(ctx context.Context, xAPIKey string, pid string, offset int32, limit int32) (ImplResponse, error) {
	// TODO - update GetPodcastEpisodes with the required logic for this service method.
	// Add api_podcasts_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PodcastEpisodesResponse{}) or use other options such as http.Ok ...
	// return Response(200, PodcastEpisodesResponse{}), nil

	// TODO: Uncomment the next line to return response Response(0, PodcastErrorResponse{}) or use other options such as http.Ok ...
	// return Response(0, PodcastErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPodcastEpisodes method not implemented")
}

// GetPodcasts - All Podcasts
func (s *PodcastsAPIService) GetPodcasts(ctx context.Context, xAPIKey string, offset int32, limit int32, sort string, network string, networkUrlKey string, category string, q string, coverage string) (ImplResponse, error) {
	// TODO - update GetPodcasts with the required logic for this service method.
	// Add api_podcasts_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PodcastsResponse{}) or use other options such as http.Ok ...
	// return Response(200, PodcastsResponse{}), nil

	// TODO: Uncomment the next line to return response Response(0, PodcastErrorResponse{}) or use other options such as http.Ok ...
	// return Response(0, PodcastErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPodcasts method not implemented")
}

// GetPodcastsFeatured - Featured Podcasts
func (s *PodcastsAPIService) GetPodcastsFeatured(ctx context.Context, xAPIKey string) (ImplResponse, error) {
	// TODO - update GetPodcastsFeatured with the required logic for this service method.
	// Add api_podcasts_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PodcastsFeaturedResponse{}) or use other options such as http.Ok ...
	// return Response(200, PodcastsFeaturedResponse{}), nil

	// TODO: Uncomment the next line to return response Response(0, PodcastErrorResponse{}) or use other options such as http.Ok ...
	// return Response(0, PodcastErrorResponse{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPodcastsFeatured method not implemented")
}
