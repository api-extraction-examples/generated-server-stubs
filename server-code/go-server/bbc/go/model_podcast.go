/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type Podcast struct {

	CategorySummaries []CategorySummary `json:"category_summaries"`

	DaysAvailable int32 `json:"days_available"`

	EntityType string `json:"entity_type"`

	FirstPublishedDate string `json:"first_published_date"`

	Frequency string `json:"frequency"`

	Images []Image `json:"images"`

	LatestAvailableEpisodes []PodcastEpisodeSummary `json:"latest_available_episodes"`

	NetworkSummary NetworkSummary `json:"network_summary"`

	Pid string `json:"pid"`

	RssUrl string `json:"rss_url"`

	Synopses PodcastSynopses `json:"synopses"`

	Territory string `json:"territory"`

	Titles ProgrammeTitles `json:"titles"`

	TotalAvailableEpisodes int32 `json:"total_available_episodes"`

	Type string `json:"type"`

	UpdatedAt string `json:"updated_at"`
}

// AssertPodcastRequired checks if the required fields are not zero-ed
func AssertPodcastRequired(obj Podcast) error {
	elements := map[string]interface{}{
		"category_summaries": obj.CategorySummaries,
		"days_available": obj.DaysAvailable,
		"entity_type": obj.EntityType,
		"first_published_date": obj.FirstPublishedDate,
		"frequency": obj.Frequency,
		"images": obj.Images,
		"latest_available_episodes": obj.LatestAvailableEpisodes,
		"network_summary": obj.NetworkSummary,
		"pid": obj.Pid,
		"rss_url": obj.RssUrl,
		"synopses": obj.Synopses,
		"territory": obj.Territory,
		"titles": obj.Titles,
		"total_available_episodes": obj.TotalAvailableEpisodes,
		"type": obj.Type,
		"updated_at": obj.UpdatedAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.CategorySummaries {
		if err := AssertCategorySummaryRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Images {
		if err := AssertImageRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.LatestAvailableEpisodes {
		if err := AssertPodcastEpisodeSummaryRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkSummaryRequired(obj.NetworkSummary); err != nil {
		return err
	}
	if err := AssertPodcastSynopsesRequired(obj.Synopses); err != nil {
		return err
	}
	if err := AssertProgrammeTitlesRequired(obj.Titles); err != nil {
		return err
	}
	return nil
}

// AssertPodcastConstraints checks if the values respects the defined constraints
func AssertPodcastConstraints(obj Podcast) error {
	return nil
}
