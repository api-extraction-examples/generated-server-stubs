/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RadioAPIController binds http requests to an api service and writes the service results to the http response
type RadioAPIController struct {
	service RadioAPIServicer
	errorHandler ErrorHandler
}

// RadioAPIOption for how the controller is set up.
type RadioAPIOption func(*RadioAPIController)

// WithRadioAPIErrorHandler inject ErrorHandler into controller
func WithRadioAPIErrorHandler(h ErrorHandler) RadioAPIOption {
	return func(c *RadioAPIController) {
		c.errorHandler = h
	}
}

// NewRadioAPIController creates a default api controller
func NewRadioAPIController(s RadioAPIServicer, opts ...RadioAPIOption) Router {
	controller := &RadioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RadioAPIController
func (c *RadioAPIController) Routes() Routes {
	return Routes{
		"DeletePersonalisedRadioByActivityTypeById": Route{
			strings.ToUpper("Delete"),
			"/my/radio/favourites/{type}/{pid}",
			c.DeletePersonalisedRadioByActivityTypeById,
		},
		"DeletePersonalisedRadioFollowsByTypeById": Route{
			strings.ToUpper("Delete"),
			"/my/radio/follows/{type}/{pid}",
			c.DeletePersonalisedRadioFollowsByTypeById,
		},
		"GetPersonalisedRadioByActivityTypeById": Route{
			strings.ToUpper("Get"),
			"/my/radio/favourites/{type}/{pid}",
			c.GetPersonalisedRadioByActivityTypeById,
		},
		"GetPersonalisedRadioFavourites": Route{
			strings.ToUpper("Get"),
			"/my/radio/favourites",
			c.GetPersonalisedRadioFavourites,
		},
		"GetPersonalisedRadioFavouritesByType": Route{
			strings.ToUpper("Get"),
			"/my/radio/favourites/{type}",
			c.GetPersonalisedRadioFavouritesByType,
		},
		"GetPersonalisedRadioFollows": Route{
			strings.ToUpper("Get"),
			"/my/radio/follows",
			c.GetPersonalisedRadioFollows,
		},
		"GetPersonalisedRadioFollowsByType": Route{
			strings.ToUpper("Get"),
			"/my/radio/follows/{type}",
			c.GetPersonalisedRadioFollowsByType,
		},
		"GetPersonalisedRadioFollowsByTypeById": Route{
			strings.ToUpper("Get"),
			"/my/radio/follows/{type}/{pid}",
			c.GetPersonalisedRadioFollowsByTypeById,
		},
		"GetPersonalisedRadioPlays": Route{
			strings.ToUpper("Get"),
			"/my/radio/plays",
			c.GetPersonalisedRadioPlays,
		},
		"PostPersonalisedRadioBatch": Route{
			strings.ToUpper("Post"),
			"/my/radio/favourites",
			c.PostPersonalisedRadioBatch,
		},
		"PostPersonalisedRadioByActivityTypeById": Route{
			strings.ToUpper("Post"),
			"/my/radio/favourites/{type}/{pid}",
			c.PostPersonalisedRadioByActivityTypeById,
		},
		"PostPersonalisedRadioFollowsBatch": Route{
			strings.ToUpper("Post"),
			"/my/radio/follows",
			c.PostPersonalisedRadioFollowsBatch,
		},
		"PostPersonalisedRadioFollowsByTypeById": Route{
			strings.ToUpper("Post"),
			"/my/radio/follows/{type}/{pid}",
			c.PostPersonalisedRadioFollowsByTypeById,
		},
		"PutPersonalisedRadioBatch": Route{
			strings.ToUpper("Put"),
			"/my/radio/favourites",
			c.PutPersonalisedRadioBatch,
		},
		"PutPersonalisedRadioByActivityTypeById": Route{
			strings.ToUpper("Put"),
			"/my/radio/favourites/{type}/{pid}",
			c.PutPersonalisedRadioByActivityTypeById,
		},
		"PutPersonalisedRadioFollowsBatch": Route{
			strings.ToUpper("Put"),
			"/my/radio/follows",
			c.PutPersonalisedRadioFollowsBatch,
		},
		"PutPersonalisedRadioFollowsByTypeById": Route{
			strings.ToUpper("Put"),
			"/my/radio/follows/{type}/{pid}",
			c.PutPersonalisedRadioFollowsByTypeById,
		},
	}
}

// DeletePersonalisedRadioByActivityTypeById - Favourite Episode or Clip
func (c *RadioAPIController) DeletePersonalisedRadioByActivityTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	result, err := c.service.DeletePersonalisedRadioByActivityTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePersonalisedRadioFollowsByTypeById - Followed Brand or Series
func (c *RadioAPIController) DeletePersonalisedRadioFollowsByTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	result, err := c.service.DeletePersonalisedRadioFollowsByTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioByActivityTypeById - Favourite Episode or Clip
func (c *RadioAPIController) GetPersonalisedRadioByActivityTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioByActivityTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam, showAllActivityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioFavourites - Favourite Episodes and Clips
func (c *RadioAPIController) GetPersonalisedRadioFavourites(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioFavourites(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, offsetParam, limitParam, sortParam, showAllActivityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioFavouritesByType - Favourite Episodes and Clips by Type
func (c *RadioAPIController) GetPersonalisedRadioFavouritesByType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioFavouritesByType(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, sortParam, showAllActivityParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioFollows - Followed Brands and Series
func (c *RadioAPIController) GetPersonalisedRadioFollows(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioFollows(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, offsetParam, limitParam, sortParam, showAllActivityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioFollowsByType - Followed Brands or Series by Type
func (c *RadioAPIController) GetPersonalisedRadioFollowsByType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioFollowsByType(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, sortParam, offsetParam, limitParam, showAllActivityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioFollowsByTypeById - Followed Brand or Series
func (c *RadioAPIController) GetPersonalisedRadioFollowsByTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	result, err := c.service.GetPersonalisedRadioFollowsByTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonalisedRadioPlays - Played Episode or Clip
func (c *RadioAPIController) GetPersonalisedRadioPlays(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var showAllActivityParam bool
	if query.Has("show_all_activity") {
		param, err := parseBoolParameter(
			query.Get("show_all_activity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAllActivityParam = param
	} else {
	}
	result, err := c.service.GetPersonalisedRadioPlays(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, offsetParam, limitParam, sortParam, showAllActivityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPersonalisedRadioBatch - Favourite Episodes and Clips
func (c *RadioAPIController) PostPersonalisedRadioBatch(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := []PersonalisedRadioBatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range bodyParam {
		if err := AssertPersonalisedRadioBatchRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PostPersonalisedRadioBatch(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPersonalisedRadioByActivityTypeById - Favourite Episode or Clip
func (c *RadioAPIController) PostPersonalisedRadioByActivityTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	bodyParam := PersonalisedRadioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPersonalisedRadioByActivityTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPersonalisedRadioFollowsBatch - Followed Brands and Series
func (c *RadioAPIController) PostPersonalisedRadioFollowsBatch(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := []PersonalisedRadioBatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range bodyParam {
		if err := AssertPersonalisedRadioBatchRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PostPersonalisedRadioFollowsBatch(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostPersonalisedRadioFollowsByTypeById - Followed Brand or Series
func (c *RadioAPIController) PostPersonalisedRadioFollowsByTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	bodyParam := PersonalisedRadioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PostPersonalisedRadioFollowsByTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPersonalisedRadioBatch - Favourite Episodes and Clips
func (c *RadioAPIController) PutPersonalisedRadioBatch(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := []PersonalisedRadioBatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range bodyParam {
		if err := AssertPersonalisedRadioBatchRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PutPersonalisedRadioBatch(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPersonalisedRadioByActivityTypeById - Favourite Episode or Clip
func (c *RadioAPIController) PutPersonalisedRadioByActivityTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	bodyParam := PersonalisedRadioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutPersonalisedRadioByActivityTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPersonalisedRadioFollowsBatch - Followed Brands and Series
func (c *RadioAPIController) PutPersonalisedRadioFollowsBatch(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	bodyParam := []PersonalisedRadioBatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range bodyParam {
		if err := AssertPersonalisedRadioBatchRequestRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PutPersonalisedRadioFollowsBatch(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutPersonalisedRadioFollowsByTypeById - Followed Brand or Series
func (c *RadioAPIController) PutPersonalisedRadioFollowsByTypeById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	xAuthenticationProviderParam := r.Header.Get("X-Authentication-Provider")
	xAPIKeyParam := r.Header.Get("X-API-Key")
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	bodyParam := PersonalisedRadioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonalisedRadioRequestConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutPersonalisedRadioFollowsByTypeById(r.Context(), authorizationParam, xAuthenticationProviderParam, xAPIKeyParam, type_Param, pidParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
