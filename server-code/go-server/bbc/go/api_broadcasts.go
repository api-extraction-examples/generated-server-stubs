/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BroadcastsAPIController binds http requests to an api service and writes the service results to the http response
type BroadcastsAPIController struct {
	service BroadcastsAPIServicer
	errorHandler ErrorHandler
}

// BroadcastsAPIOption for how the controller is set up.
type BroadcastsAPIOption func(*BroadcastsAPIController)

// WithBroadcastsAPIErrorHandler inject ErrorHandler into controller
func WithBroadcastsAPIErrorHandler(h ErrorHandler) BroadcastsAPIOption {
	return func(c *BroadcastsAPIController) {
		c.errorHandler = h
	}
}

// NewBroadcastsAPIController creates a default api controller
func NewBroadcastsAPIController(s BroadcastsAPIServicer, opts ...BroadcastsAPIOption) Router {
	controller := &BroadcastsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BroadcastsAPIController
func (c *BroadcastsAPIController) Routes() Routes {
	return Routes{
		"BroadcastsGet": Route{
			strings.ToUpper("Get"),
			"/broadcasts",
			c.BroadcastsGet,
		},
		"BroadcastsLatestGet": Route{
			strings.ToUpper("Get"),
			"/broadcasts/latest",
			c.BroadcastsLatestGet,
		},
		"GetBroadcastByPid": Route{
			strings.ToUpper("Get"),
			"/broadcasts/{pid}",
			c.GetBroadcastByPid,
		},
	}
}

// BroadcastsGet - Broadcasts
func (c *BroadcastsAPIController) BroadcastsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var serviceIdParam string
	if query.Has("service_id") {
		param := query.Get("service_id")

		serviceIdParam = param
	} else {
	}
	var dateParam string
	if query.Has("date") {
		param := query.Get("date")

		dateParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	result, err := c.service.BroadcastsGet(r.Context(), xAPIKeyParam, offsetParam, limitParam, serviceIdParam, dateParam, sortParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BroadcastsLatestGet - Latest Broadcasts
func (c *BroadcastsAPIController) BroadcastsLatestGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var serviceIdParam string
	if query.Has("service_id") {
		param := query.Get("service_id")

		serviceIdParam = param
	} else {
	}
	var onAirParam string
	if query.Has("on_air") {
		param := query.Get("on_air")

		onAirParam = param
	} else {
	}
	var nextParam string
	if query.Has("next") {
		param := query.Get("next")

		nextParam = param
	} else {
	}
	var previousParam string
	if query.Has("previous") {
		param := query.Get("previous")

		previousParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	result, err := c.service.BroadcastsLatestGet(r.Context(), xAPIKeyParam, offsetParam, limitParam, serviceIdParam, onAirParam, nextParam, previousParam, sortParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBroadcastByPid - Broadcasts by PID
func (c *BroadcastsAPIController) GetBroadcastByPid(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	xAPIKeyParam := r.Header.Get("X-API-Key")
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	result, err := c.service.GetBroadcastByPid(r.Context(), xAPIKeyParam, pidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
