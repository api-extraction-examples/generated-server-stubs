/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type ClipSummary struct {

	Ancestors []AncestorSummary `json:"ancestors"`

	AvailableVersions []AvailableVersions `json:"available_versions"`

	Images []Image `json:"images"`

	MediaType string `json:"media_type"`

	NetworkSummary NetworkSummary `json:"network_summary"`

	Pid string `json:"pid"`

	ReleaseDate string `json:"release_date"`

	ShortSynopsis string `json:"short_synopsis"`

	Titles ProgrammeTitles `json:"titles"`

	Type string `json:"type"`
}

// AssertClipSummaryRequired checks if the required fields are not zero-ed
func AssertClipSummaryRequired(obj ClipSummary) error {
	elements := map[string]interface{}{
		"ancestors": obj.Ancestors,
		"available_versions": obj.AvailableVersions,
		"images": obj.Images,
		"media_type": obj.MediaType,
		"network_summary": obj.NetworkSummary,
		"pid": obj.Pid,
		"release_date": obj.ReleaseDate,
		"short_synopsis": obj.ShortSynopsis,
		"titles": obj.Titles,
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	for _, el := range obj.Ancestors {
		if err := AssertAncestorSummaryRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.AvailableVersions {
		if err := AssertAvailableVersionsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Images {
		if err := AssertImageRequired(el); err != nil {
			return err
		}
	}
	if err := AssertNetworkSummaryRequired(obj.NetworkSummary); err != nil {
		return err
	}
	if err := AssertProgrammeTitlesRequired(obj.Titles); err != nil {
		return err
	}
	return nil
}

// AssertClipSummaryConstraints checks if the values respects the defined constraints
func AssertClipSummaryConstraints(obj ClipSummary) error {
	return nil
}
