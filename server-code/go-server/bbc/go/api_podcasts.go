/*
 * Radio & Music Services
 *
 * We encapsulate Radio & Music business logic for iPlayer Radio and BBC Music products on all platforms. We add value by reliably providing the right blend of metadata needed by clients.
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PodcastsAPIController binds http requests to an api service and writes the service results to the http response
type PodcastsAPIController struct {
	service PodcastsAPIServicer
	errorHandler ErrorHandler
}

// PodcastsAPIOption for how the controller is set up.
type PodcastsAPIOption func(*PodcastsAPIController)

// WithPodcastsAPIErrorHandler inject ErrorHandler into controller
func WithPodcastsAPIErrorHandler(h ErrorHandler) PodcastsAPIOption {
	return func(c *PodcastsAPIController) {
		c.errorHandler = h
	}
}

// NewPodcastsAPIController creates a default api controller
func NewPodcastsAPIController(s PodcastsAPIServicer, opts ...PodcastsAPIOption) Router {
	controller := &PodcastsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PodcastsAPIController
func (c *PodcastsAPIController) Routes() Routes {
	return Routes{
		"GetPodcastByPid": Route{
			strings.ToUpper("Get"),
			"/podcasts/{pid}",
			c.GetPodcastByPid,
		},
		"GetPodcastEpisodes": Route{
			strings.ToUpper("Get"),
			"/podcasts/{pid}/episodes",
			c.GetPodcastEpisodes,
		},
		"GetPodcasts": Route{
			strings.ToUpper("Get"),
			"/podcasts",
			c.GetPodcasts,
		},
		"GetPodcastsFeatured": Route{
			strings.ToUpper("Get"),
			"/podcasts/featured",
			c.GetPodcastsFeatured,
		},
	}
}

// GetPodcastByPid - Podcast
func (c *PodcastsAPIController) GetPodcastByPid(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetPodcastByPid(r.Context(), xAPIKeyParam, pidParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPodcastEpisodes - Podcast Episodes
func (c *PodcastsAPIController) GetPodcastEpisodes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	pidParam := params["pid"]
	if pidParam == "" {
		c.errorHandler(w, r, &RequiredError{"pid"}, nil)
		return
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GetPodcastEpisodes(r.Context(), xAPIKeyParam, pidParam, offsetParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPodcasts - All Podcasts
func (c *PodcastsAPIController) GetPodcasts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xAPIKeyParam := r.Header.Get("X-API-Key")
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var sortParam string
	if query.Has("sort") {
		param := query.Get("sort")

		sortParam = param
	} else {
	}
	var networkParam string
	if query.Has("network") {
		param := query.Get("network")

		networkParam = param
	} else {
	}
	var networkUrlKeyParam string
	if query.Has("network_url_key") {
		param := query.Get("network_url_key")

		networkUrlKeyParam = param
	} else {
	}
	var categoryParam string
	if query.Has("category") {
		param := query.Get("category")

		categoryParam = param
	} else {
	}
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
	}
	var coverageParam string
	if query.Has("coverage") {
		param := query.Get("coverage")

		coverageParam = param
	} else {
	}
	result, err := c.service.GetPodcasts(r.Context(), xAPIKeyParam, offsetParam, limitParam, sortParam, networkParam, networkUrlKeyParam, categoryParam, qParam, coverageParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPodcastsFeatured - Featured Podcasts
func (c *PodcastsAPIController) GetPodcastsFeatured(w http.ResponseWriter, r *http.Request) {
	xAPIKeyParam := r.Header.Get("X-API-Key")
	result, err := c.service.GetPodcastsFeatured(r.Context(), xAPIKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
