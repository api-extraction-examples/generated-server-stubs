/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 *
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * API version: 2019.10.15
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// Air02 - Map Data Object
type Air02 struct {

	// The facility's 3-year compliance status history by quarter (3-month period). Each character represents a quarter of compliance, going from oldest to most recent. Character values correspond to the following compliance statuses: _ -�No Violation Identified V -�Violation Identified S -�High Priority Violation U - Undetermined
	CAAstatus string `json:"CAAstatus"`

	// The number of formal enforcement actions that have been taken against the facility
	FormalCount string `json:"FormalCount"`

	// Name of each individual icon file within the URL base
	ICON string `json:"ICON"`

	// The number of informal enforcement actions that have been taken against the facility
	InformalCount string `json:"InformalCount"`

	// The latitude of the facility in degrees, to four decimal places
	LAT string `json:"LAT"`

	// The longitude of the facility in degrees, to four decimal places
	LON string `json:"LON"`

	// The unique identifier for the last inspection
	LastInsp string `json:"LastInsp"`

	// For DFR, this is the Facility name. The name corresponds to the TYPE value
	NAME string `json:"NAME"`

	// Pop up value. Combine with PopUpBaseURL to give the popup for the facility
	PUV string `json:"PUV"`

	// For DFR, this is always facility
	TYPE string `json:"TYPE"`
}

// AssertAir02Required checks if the required fields are not zero-ed
func AssertAir02Required(obj Air02) error {
	elements := map[string]interface{}{
		"CAAstatus": obj.CAAstatus,
		"FormalCount": obj.FormalCount,
		"ICON": obj.ICON,
		"InformalCount": obj.InformalCount,
		"LAT": obj.LAT,
		"LON": obj.LON,
		"LastInsp": obj.LastInsp,
		"NAME": obj.NAME,
		"PUV": obj.PUV,
		"TYPE": obj.TYPE,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertAir02Constraints checks if the values respects the defined constraints
func AssertAir02Constraints(obj Air02) error {
	return nil
}
