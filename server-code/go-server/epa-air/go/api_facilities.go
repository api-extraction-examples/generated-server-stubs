/*
 * U.S. EPA Enforcement and Compliance History Online (ECHO) - Clean Air Act
 *
 * Enforcement and Compliance History Online (ECHO) is a tool developed and maintained by EPA's Office of Enforcement and Compliance Assurance for public use. ECHO provides integrated compliance and enforcement information for over 1 million regulated facilities nationwide.  Air Rest Services provides multiple service endpoints, each with specific capabilities, to search and retrieve data on facilities regulated under the Clean Air Act (CAA). The returned results reflect data drawn from EPA's ICIS-Air database.  The get_facilities, get_map, get_qid, and get_download end points are meant to be used together, while the enhanced get_facility_info end point is self contained. The get_facility_info end point returns either an array of state, county or zip clusters with summary statistics per cluster or an array of facilities.  The recommended use scenario for get_facilities, get_qid, get_map, and get_downoad is:  <b>1)</b>  Use get_facilities to validate passed query parameters, obtain summary statistics and to obtain a query_id (QID).  QIDs are time sensitive and will be valid for approximately 30 minutes. <b>2)</b>  Use get_qid, with the returned QID, to paginate through arrays of facility results. <b>3)</b>  Use get_map, with the returned QID, to zoom in/out and pan on the clustered and individual facility coordinates that meet the QID query criteria. <b>4)</b>  Use get_download, with the returned QID, to generate a Comma Separated Value (CSV) file of facility information that meets the QID query criteria.  Use the qcolumns parameter to customize your search results.  Use the Metadata service endpoint for a list of available output objects, their Column Ids, and their definitions to help you build your customized output.   Additional ECHO Resources:   <a href=\"https://echo.epa.gov/tools/web-services\">Web Services</a>, <a href=\"https://echo.epa.gov/resources/echo-data/about-the-data\">About ECHO's Data</a>, <a href=\"https://echo.epa.gov/tools/data-downloads\">Data Downloads</a>
 *
 * API version: 2019.10.15
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FacilitiesAPIController binds http requests to an api service and writes the service results to the http response
type FacilitiesAPIController struct {
	service FacilitiesAPIServicer
	errorHandler ErrorHandler
}

// FacilitiesAPIOption for how the controller is set up.
type FacilitiesAPIOption func(*FacilitiesAPIController)

// WithFacilitiesAPIErrorHandler inject ErrorHandler into controller
func WithFacilitiesAPIErrorHandler(h ErrorHandler) FacilitiesAPIOption {
	return func(c *FacilitiesAPIController) {
		c.errorHandler = h
	}
}

// NewFacilitiesAPIController creates a default api controller
func NewFacilitiesAPIController(s FacilitiesAPIServicer, opts ...FacilitiesAPIOption) Router {
	controller := &FacilitiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FacilitiesAPIController
func (c *FacilitiesAPIController) Routes() Routes {
	return Routes{
		"AirRestServicesGetDownloadGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_download",
			c.AirRestServicesGetDownloadGet,
		},
		"AirRestServicesGetDownloadPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_download",
			c.AirRestServicesGetDownloadPost,
		},
		"AirRestServicesGetFacilitiesGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_facilities",
			c.AirRestServicesGetFacilitiesGet,
		},
		"AirRestServicesGetFacilitiesPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_facilities",
			c.AirRestServicesGetFacilitiesPost,
		},
		"AirRestServicesGetFacilityInfoGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_facility_info",
			c.AirRestServicesGetFacilityInfoGet,
		},
		"AirRestServicesGetFacilityInfoPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_facility_info",
			c.AirRestServicesGetFacilityInfoPost,
		},
		"AirRestServicesGetGeojsonGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_geojson",
			c.AirRestServicesGetGeojsonGet,
		},
		"AirRestServicesGetGeojsonPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_geojson",
			c.AirRestServicesGetGeojsonPost,
		},
		"AirRestServicesGetInfoClustersGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_info_clusters",
			c.AirRestServicesGetInfoClustersGet,
		},
		"AirRestServicesGetInfoClustersPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_info_clusters",
			c.AirRestServicesGetInfoClustersPost,
		},
		"AirRestServicesGetMapGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_map",
			c.AirRestServicesGetMapGet,
		},
		"AirRestServicesGetMapPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_map",
			c.AirRestServicesGetMapPost,
		},
		"AirRestServicesGetQidGet": Route{
			strings.ToUpper("Get"),
			"/echo/air_rest_services.get_qid",
			c.AirRestServicesGetQidGet,
		},
		"AirRestServicesGetQidPost": Route{
			strings.ToUpper("Post"),
			"/echo/air_rest_services.get_qid",
			c.AirRestServicesGetQidPost,
		},
	}
}

// AirRestServicesGetDownloadGet - Clean Air Act Download Data Service
func (c *FacilitiesAPIController) AirRestServicesGetDownloadGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qidParam string
	if query.Has("qid") {
		param := query.Get("qid")

		qidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "qid"}, nil)
		return
	}
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var qcolumnsParam string
	if query.Has("qcolumns") {
		param := query.Get("qcolumns")

		qcolumnsParam = param
	} else {
	}
	var pPrettyPrintParam float32
	if query.Has("p_pretty_print") {
		param, err := parseNumericParameter[float32](
			query.Get("p_pretty_print"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pPrettyPrintParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetDownloadGet(r.Context(), qidParam, outputParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetDownloadPost - Clean Air Act Download Data Service
func (c *FacilitiesAPIController) AirRestServicesGetDownloadPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	qidParam := r.FormValue("qid")
	
	
	outputParam := r.FormValue("output")
	
	
	qcolumnsParam := r.FormValue("qcolumns")
	
	
	pPrettyPrintParam := r.FormValue("p_pretty_print")
	result, err := c.service.AirRestServicesGetDownloadPost(r.Context(), qidParam, outputParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetFacilitiesGet - Clean Air Act Facility Search
func (c *FacilitiesAPIController) AirRestServicesGetFacilitiesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var pFnParam string
	if query.Has("p_fn") {
		param := query.Get("p_fn")

		pFnParam = param
	} else {
	}
	var pSaParam string
	if query.Has("p_sa") {
		param := query.Get("p_sa")

		pSaParam = param
	} else {
	}
	var pSa1Param string
	if query.Has("p_sa1") {
		param := query.Get("p_sa1")

		pSa1Param = param
	} else {
	}
	var pCtParam string
	if query.Has("p_ct") {
		param := query.Get("p_ct")

		pCtParam = param
	} else {
	}
	var pCoParam string
	if query.Has("p_co") {
		param := query.Get("p_co")

		pCoParam = param
	} else {
	}
	var pFipsParam string
	if query.Has("p_fips") {
		param := query.Get("p_fips")

		pFipsParam = param
	} else {
	}
	var pStParam string
	if query.Has("p_st") {
		param := query.Get("p_st")

		pStParam = param
	} else {
	}
	var pZipParam string
	if query.Has("p_zip") {
		param := query.Get("p_zip")

		pZipParam = param
	} else {
	}
	var pLconParam string
	if query.Has("p_lcon") {
		param := query.Get("p_lcon")

		pLconParam = param
	} else {
	}
	var pFrsParam string
	if query.Has("p_frs") {
		param := query.Get("p_frs")

		pFrsParam = param
	} else {
	}
	var pRegParam string
	if query.Has("p_reg") {
		param := query.Get("p_reg")

		pRegParam = param
	} else {
	}
	var pSicParam string
	if query.Has("p_sic") {
		param := query.Get("p_sic")

		pSicParam = param
	} else {
	}
	var pNcsParam string
	if query.Has("p_ncs") {
		param := query.Get("p_ncs")

		pNcsParam = param
	} else {
	}
	var pQncParam float32
	if query.Has("p_qnc") {
		param, err := parseNumericParameter[float32](
			query.Get("p_qnc"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pQncParam = param
	} else {
	}
	var pPenParam string
	if query.Has("p_pen") {
		param := query.Get("p_pen")

		pPenParam = param
	} else {
	}
	var pOpstParam string
	if query.Has("p_opst") {
		param := query.Get("p_opst")

		pOpstParam = param
	} else {
	}
	var pC1latParam float32
	if query.Has("p_c1lat") {
		param, err := parseNumericParameter[float32](
			query.Get("p_c1lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pC1latParam = param
	} else {
	}
	var pC1lonParam float32
	if query.Has("p_c1lon") {
		param, err := parseNumericParameter[float32](
			query.Get("p_c1lon"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pC1lonParam = param
	} else {
	}
	var pC2latParam float32
	if query.Has("p_c2lat") {
		param, err := parseNumericParameter[float32](
			query.Get("p_c2lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pC2latParam = param
	} else {
	}
	var pC2lonParam float32
	if query.Has("p_c2lon") {
		param, err := parseNumericParameter[float32](
			query.Get("p_c2lon"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pC2lonParam = param
	} else {
	}
	var pUsmexParam string
	if query.Has("p_usmex") {
		param := query.Get("p_usmex")

		pUsmexParam = param
	} else {
	}
	var pSic2Param string
	if query.Has("p_sic2") {
		param := query.Get("p_sic2")

		pSic2Param = param
	} else {
	}
	var pSic4Param string
	if query.Has("p_sic4") {
		param := query.Get("p_sic4")

		pSic4Param = param
	} else {
	}
	var pFaParam string
	if query.Has("p_fa") {
		param := query.Get("p_fa")

		pFaParam = param
	} else {
	}
	var pActParam string
	if query.Has("p_act") {
		param := query.Get("p_act")

		pActParam = param
	} else {
	}
	var pMajParam string
	if query.Has("p_maj") {
		param := query.Get("p_maj")

		pMajParam = param
	} else {
	}
	var pMactParam string
	if query.Has("p_mact") {
		param := query.Get("p_mact")

		pMactParam = param
	} else {
	}
	var pNspsParam string
	if query.Has("p_nsps") {
		param := query.Get("p_nsps")

		pNspsParam = param
	} else {
	}
	var pNspsmParam string
	if query.Has("p_nspsm") {
		param := query.Get("p_nspsm")

		pNspsmParam = param
	} else {
	}
	var pProgParam string
	if query.Has("p_prog") {
		param := query.Get("p_prog")

		pProgParam = param
	} else {
	}
	var pFeaParam string
	if query.Has("p_fea") {
		param := query.Get("p_fea")

		pFeaParam = param
	} else {
	}
	var pFeayParam float32
	if query.Has("p_feay") {
		param, err := parseNumericParameter[float32](
			query.Get("p_feay"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pFeayParam = param
	} else {
	}
	var pFeaaParam string
	if query.Has("p_feaa") {
		param := query.Get("p_feaa")

		pFeaaParam = param
	} else {
	}
	var pIeaParam string
	if query.Has("p_iea") {
		param := query.Get("p_iea")

		pIeaParam = param
	} else {
	}
	var pIeayParam float32
	if query.Has("p_ieay") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ieay"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pIeayParam = param
	} else {
	}
	var pIeaaParam string
	if query.Has("p_ieaa") {
		param := query.Get("p_ieaa")

		pIeaaParam = param
	} else {
	}
	var pQivParam string
	if query.Has("p_qiv") {
		param := query.Get("p_qiv")

		pQivParam = param
	} else {
	}
	var pNaaParam string
	if query.Has("p_naa") {
		param := query.Get("p_naa")

		pNaaParam = param
	} else {
	}
	var pImpwParam string
	if query.Has("p_impw") {
		param := query.Get("p_impw")

		pImpwParam = param
	} else {
	}
	var pTrepParam string
	if query.Has("p_trep") {
		param := query.Get("p_trep")

		pTrepParam = param
	} else {
	}
	var pTriCatParam string
	if query.Has("p_tri_cat") {
		param := query.Get("p_tri_cat")

		pTriCatParam = param
	} else {
	}
	var pTriAmtParam string
	if query.Has("p_tri_amt") {
		param := query.Get("p_tri_amt")

		pTriAmtParam = param
	} else {
	}
	var pTriAnyAmtParam float32
	if query.Has("p_tri_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tri_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTriAnyAmtParam = param
	} else {
	}
	var pTriPolParam string
	if query.Has("p_tri_pol") {
		param := query.Get("p_tri_pol")

		pTriPolParam = param
	} else {
	}
	var pGhgCatParam string
	if query.Has("p_ghg_cat") {
		param := query.Get("p_ghg_cat")

		pGhgCatParam = param
	} else {
	}
	var pGhgAmtParam string
	if query.Has("p_ghg_amt") {
		param := query.Get("p_ghg_amt")

		pGhgAmtParam = param
	} else {
	}
	var pGhgAnyAmtParam float32
	if query.Has("p_ghg_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ghg_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pGhgAnyAmtParam = param
	} else {
	}
	var pGhgYrParam string
	if query.Has("p_ghg_yr") {
		param := query.Get("p_ghg_yr")

		pGhgYrParam = param
	} else {
	}
	var pNeiPolParam string
	if query.Has("p_nei_pol") {
		param := query.Get("p_nei_pol")

		pNeiPolParam = param
	} else {
	}
	var pNeiAmtParam string
	if query.Has("p_nei_amt") {
		param := query.Get("p_nei_amt")

		pNeiAmtParam = param
	} else {
	}
	var pNeiAnyAmtParam float32
	if query.Has("p_nei_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_nei_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pNeiAnyAmtParam = param
	} else {
	}
	var pNeiYrParam string
	if query.Has("p_nei_yr") {
		param := query.Get("p_nei_yr")

		pNeiYrParam = param
	} else {
	}
	var pNeiCatParam string
	if query.Has("p_nei_cat") {
		param := query.Get("p_nei_cat")

		pNeiCatParam = param
	} else {
	}
	var pPmParam string
	if query.Has("p_pm") {
		param := query.Get("p_pm")

		pPmParam = param
	} else {
	}
	var pPdParam string
	if query.Has("p_pd") {
		param := query.Get("p_pd")

		pPdParam = param
	} else {
	}
	var pIcoParam string
	if query.Has("p_ico") {
		param := query.Get("p_ico")

		pIcoParam = param
	} else {
	}
	var pHucParam string
	if query.Has("p_huc") {
		param := query.Get("p_huc")

		pHucParam = param
	} else {
	}
	var pWbdParam string
	if query.Has("p_wbd") {
		param := query.Get("p_wbd")

		pWbdParam = param
	} else {
	}
	var pPidParam string
	if query.Has("p_pid") {
		param := query.Get("p_pid")

		pPidParam = param
	} else {
	}
	var pMedParam string
	if query.Has("p_med") {
		param := query.Get("p_med")

		pMedParam = param
	} else {
	}
	var pYslParam string
	if query.Has("p_ysl") {
		param := query.Get("p_ysl")

		pYslParam = param
	} else {
	}
	var pYslyParam float32
	if query.Has("p_ysly") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ysly"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pYslyParam = param
	} else {
	}
	var pYslaParam string
	if query.Has("p_ysla") {
		param := query.Get("p_ysla")

		pYslaParam = param
	} else {
	}
	var pStslParam string
	if query.Has("p_stsl") {
		param := query.Get("p_stsl")

		pStslParam = param
	} else {
	}
	var pStslyParam float32
	if query.Has("p_stsly") {
		param, err := parseNumericParameter[float32](
			query.Get("p_stsly"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pStslyParam = param
	} else {
	}
	var pStslaParam string
	if query.Has("p_stsla") {
		param := query.Get("p_stsla")

		pStslaParam = param
	} else {
	}
	var pStresParam string
	if query.Has("p_stres") {
		param := query.Get("p_stres")

		pStresParam = param
	} else {
	}
	var pSttypParam string
	if query.Has("p_sttyp") {
		param := query.Get("p_sttyp")

		pSttypParam = param
	} else {
	}
	var pQsParam string
	if query.Has("p_qs") {
		param := query.Get("p_qs")

		pQsParam = param
	} else {
	}
	var pSfsParam string
	if query.Has("p_sfs") {
		param := query.Get("p_sfs")

		pSfsParam = param
	} else {
	}
	var pTribeidParam float32
	if query.Has("p_tribeid") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tribeid"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTribeidParam = param
	} else {
	}
	var pTribenameParam string
	if query.Has("p_tribename") {
		param := query.Get("p_tribename")

		pTribenameParam = param
	} else {
	}
	var pTribedistParam float32
	if query.Has("p_tribedist") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tribedist"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTribedistParam = param
	} else {
	}
	var pOwopParam string
	if query.Has("p_owop") {
		param := query.Get("p_owop")

		pOwopParam = param
	} else {
	}
	var pAgooParam string
	if query.Has("p_agoo") {
		param := query.Get("p_agoo")

		pAgooParam = param
	} else {
	}
	var pIdt1Param string
	if query.Has("p_idt1") {
		param := query.Get("p_idt1")

		pIdt1Param = param
	} else {
	}
	var pIdt2Param string
	if query.Has("p_idt2") {
		param := query.Get("p_idt2")

		pIdt2Param = param
	} else {
	}
	var pStdt1Param string
	if query.Has("p_stdt1") {
		param := query.Get("p_stdt1")

		pStdt1Param = param
	} else {
	}
	var pStdt2Param string
	if query.Has("p_stdt2") {
		param := query.Get("p_stdt2")

		pStdt2Param = param
	} else {
	}
	var pPitypParam string
	if query.Has("p_pityp") {
		param := query.Get("p_pityp")

		pPitypParam = param
	} else {
	}
	var pCifdiParam string
	if query.Has("p_cifdi") {
		param := query.Get("p_cifdi")

		pCifdiParam = param
	} else {
	}
	var pPfead1Param string
	if query.Has("p_pfead1") {
		param := query.Get("p_pfead1")

		pPfead1Param = param
	} else {
	}
	var pPfead2Param string
	if query.Has("p_pfead2") {
		param := query.Get("p_pfead2")

		pPfead2Param = param
	} else {
	}
	var pPfeatParam string
	if query.Has("p_pfeat") {
		param := query.Get("p_pfeat")

		pPfeatParam = param
	} else {
	}
	var pPsncqParam string
	if query.Has("p_psncq") {
		param := query.Get("p_psncq")

		pPsncqParam = param
	} else {
	}
	var pPctrackParam string
	if query.Has("p_pctrack") {
		param := query.Get("p_pctrack")

		pPctrackParam = param
	} else {
	}
	var pSwpaParam string
	if query.Has("p_swpa") {
		param := query.Get("p_swpa")

		pSwpaParam = param
	} else {
	}
	var pDesParam string
	if query.Has("p_des") {
		param := query.Get("p_des")

		pDesParam = param
	} else {
	}
	var pFntypeParam string
	if query.Has("p_fntype") {
		param := query.Get("p_fntype")

		pFntypeParam = param
	} else {
	}
	var pHpvmthParam string
	if query.Has("p_hpvmth") {
		param := query.Get("p_hpvmth")

		pHpvmthParam = param
	} else {
	}
	var pRecvioParam string
	if query.Has("p_recvio") {
		param := query.Get("p_recvio")

		pRecvioParam = param
	} else {
	}
	var pPollvioParam string
	if query.Has("p_pollvio") {
		param := query.Get("p_pollvio")

		pPollvioParam = param
	} else {
	}
	var pArParam string
	if query.Has("p_ar") {
		param := query.Get("p_ar")

		pArParam = param
	} else {
	}
	var pTriYrParam string
	if query.Has("p_tri_yr") {
		param := query.Get("p_tri_yr")

		pTriYrParam = param
	} else {
	}
	var pPidallParam string
	if query.Has("p_pidall") {
		param := query.Get("p_pidall")

		pPidallParam = param
	} else {
	}
	var pFacIcoParam string
	if query.Has("p_fac_ico") {
		param := query.Get("p_fac_ico")

		pFacIcoParam = param
	} else {
	}
	var pIcooParam string
	if query.Has("p_icoo") {
		param := query.Get("p_icoo")

		pIcooParam = param
	} else {
	}
	var pFacIcosParam string
	if query.Has("p_fac_icos") {
		param := query.Get("p_fac_icos")

		pFacIcosParam = param
	} else {
	}
	var pEjscreenParam string
	if query.Has("p_ejscreen") {
		param := query.Get("p_ejscreen")

		pEjscreenParam = param
	} else {
	}
	var pLimitAddrParam string
	if query.Has("p_limit_addr") {
		param := query.Get("p_limit_addr")

		pLimitAddrParam = param
	} else {
	}
	var pLatParam float32
	if query.Has("p_lat") {
		param, err := parseNumericParameter[float32](
			query.Get("p_lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pLatParam = param
	} else {
	}
	var pLongParam float32
	if query.Has("p_long") {
		param, err := parseNumericParameter[float32](
			query.Get("p_long"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pLongParam = param
	} else {
	}
	var pRadiusParam float32
	if query.Has("p_radius") {
		param, err := parseNumericParameter[float32](
			query.Get("p_radius"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pRadiusParam = param
	} else {
	}
	var pDecoupleParam string
	if query.Has("p_decouple") {
		param := query.Get("p_decouple")

		pDecoupleParam = param
	} else {
	}
	var pEjscreenOver80cntParam string
	if query.Has("p_ejscreen_over80cnt") {
		param := query.Get("p_ejscreen_over80cnt")

		pEjscreenOver80cntParam = param
	} else {
	}
	var querysetParam float32
	if query.Has("queryset") {
		param, err := parseNumericParameter[float32](
			query.Get("queryset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		querysetParam = param
	} else {
	}
	var responsesetParam float32
	if query.Has("responseset") {
		param, err := parseNumericParameter[float32](
			query.Get("responseset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		responsesetParam = param
	} else {
	}
	var tablelistParam string
	if query.Has("tablelist") {
		param := query.Get("tablelist")

		tablelistParam = param
	} else {
	}
	var maplistParam string
	if query.Has("maplist") {
		param := query.Get("maplist")

		maplistParam = param
	} else {
	}
	var summarylistParam string
	if query.Has("summarylist") {
		param := query.Get("summarylist")

		summarylistParam = param
	} else {
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	var qcolumnsParam string
	if query.Has("qcolumns") {
		param := query.Get("qcolumns")

		qcolumnsParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetFacilitiesGet(r.Context(), outputParam, pFnParam, pSaParam, pSa1Param, pCtParam, pCoParam, pFipsParam, pStParam, pZipParam, pLconParam, pFrsParam, pRegParam, pSicParam, pNcsParam, pQncParam, pPenParam, pOpstParam, pC1latParam, pC1lonParam, pC2latParam, pC2lonParam, pUsmexParam, pSic2Param, pSic4Param, pFaParam, pActParam, pMajParam, pMactParam, pNspsParam, pNspsmParam, pProgParam, pFeaParam, pFeayParam, pFeaaParam, pIeaParam, pIeayParam, pIeaaParam, pQivParam, pNaaParam, pImpwParam, pTrepParam, pTriCatParam, pTriAmtParam, pTriAnyAmtParam, pTriPolParam, pGhgCatParam, pGhgAmtParam, pGhgAnyAmtParam, pGhgYrParam, pNeiPolParam, pNeiAmtParam, pNeiAnyAmtParam, pNeiYrParam, pNeiCatParam, pPmParam, pPdParam, pIcoParam, pHucParam, pWbdParam, pPidParam, pMedParam, pYslParam, pYslyParam, pYslaParam, pStslParam, pStslyParam, pStslaParam, pStresParam, pSttypParam, pQsParam, pSfsParam, pTribeidParam, pTribenameParam, pTribedistParam, pOwopParam, pAgooParam, pIdt1Param, pIdt2Param, pStdt1Param, pStdt2Param, pPitypParam, pCifdiParam, pPfead1Param, pPfead2Param, pPfeatParam, pPsncqParam, pPctrackParam, pSwpaParam, pDesParam, pFntypeParam, pHpvmthParam, pRecvioParam, pPollvioParam, pArParam, pTriYrParam, pPidallParam, pFacIcoParam, pIcooParam, pFacIcosParam, pEjscreenParam, pLimitAddrParam, pLatParam, pLongParam, pRadiusParam, pDecoupleParam, pEjscreenOver80cntParam, querysetParam, responsesetParam, tablelistParam, maplistParam, summarylistParam, callbackParam, qcolumnsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetFacilitiesPost - Clean Air Act Facility Search
func (c *FacilitiesAPIController) AirRestServicesGetFacilitiesPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	outputParam := r.FormValue("output")
	
	
	pFnParam := r.FormValue("p_fn")
	
	
	pSaParam := r.FormValue("p_sa")
	
	
	pSa1Param := r.FormValue("p_sa1")
	
	
	pCtParam := r.FormValue("p_ct")
	
	
	pCoParam := r.FormValue("p_co")
	
	
	pFipsParam := r.FormValue("p_fips")
	
	
	pStParam := r.FormValue("p_st")
	
	
	pZipParam := r.FormValue("p_zip")
	
	
	pLconParam := r.FormValue("p_lcon")
	
	
	pFrsParam := r.FormValue("p_frs")
	
	
	pRegParam := r.FormValue("p_reg")
	
	
	pSicParam := r.FormValue("p_sic")
	
	
	pNcsParam := r.FormValue("p_ncs")
	
	
	pQncParam := r.FormValue("p_qnc")
	
	
	pPenParam := r.FormValue("p_pen")
	
	
	pOpstParam := r.FormValue("p_opst")
	
	
	pC1latParam := r.FormValue("p_c1lat")
	
	
	pC1lonParam := r.FormValue("p_c1lon")
	
	
	pC2latParam := r.FormValue("p_c2lat")
	
	
	pC2lonParam := r.FormValue("p_c2lon")
	
	
	pUsmexParam := r.FormValue("p_usmex")
	
	
	pSic2Param := r.FormValue("p_sic2")
	
	
	pSic4Param := r.FormValue("p_sic4")
	
	
	pFaParam := r.FormValue("p_fa")
	
	
	pActParam := r.FormValue("p_act")
	
	
	pMajParam := r.FormValue("p_maj")
	
	
	pMactParam := r.FormValue("p_mact")
	
	
	pNspsParam := r.FormValue("p_nsps")
	
	
	pNspsmParam := r.FormValue("p_nspsm")
	
	
	pProgParam := r.FormValue("p_prog")
	
	
	pFeaParam := r.FormValue("p_fea")
	
	
	pFeayParam := r.FormValue("p_feay")
	
	
	pFeaaParam := r.FormValue("p_feaa")
	
	
	pIeaParam := r.FormValue("p_iea")
	
	
	pIeayParam := r.FormValue("p_ieay")
	
	
	pIeaaParam := r.FormValue("p_ieaa")
	
	
	pQivParam := r.FormValue("p_qiv")
	
	
	pNaaParam := r.FormValue("p_naa")
	
	
	pImpwParam := r.FormValue("p_impw")
	
	
	pTrepParam := r.FormValue("p_trep")
	
	
	pTriCatParam := r.FormValue("p_tri_cat")
	
	
	pTriAmtParam := r.FormValue("p_tri_amt")
	
	
	pTriAnyAmtParam := r.FormValue("p_tri_any_amt")
	
	
	pTriPolParam := r.FormValue("p_tri_pol")
	
	
	pGhgCatParam := r.FormValue("p_ghg_cat")
	
	
	pGhgAmtParam := r.FormValue("p_ghg_amt")
	
	
	pGhgAnyAmtParam := r.FormValue("p_ghg_any_amt")
	
	
	pGhgYrParam := r.FormValue("p_ghg_yr")
	
	
	pNeiPolParam := r.FormValue("p_nei_pol")
	
	
	pNeiAmtParam := r.FormValue("p_nei_amt")
	
	
	pNeiAnyAmtParam := r.FormValue("p_nei_any_amt")
	
	
	pNeiYrParam := r.FormValue("p_nei_yr")
	
	
	pNeiCatParam := r.FormValue("p_nei_cat")
	
	
	pPmParam := r.FormValue("p_pm")
	
	
	pPdParam := r.FormValue("p_pd")
	
	
	pIcoParam := r.FormValue("p_ico")
	
	
	pHucParam := r.FormValue("p_huc")
	
	
	pWbdParam := r.FormValue("p_wbd")
	
	
	pPidParam := r.FormValue("p_pid")
	
	
	pMedParam := r.FormValue("p_med")
	
	
	pYslParam := r.FormValue("p_ysl")
	
	
	pYslyParam := r.FormValue("p_ysly")
	
	
	pYslaParam := r.FormValue("p_ysla")
	
	
	pStslParam := r.FormValue("p_stsl")
	
	
	pStslyParam := r.FormValue("p_stsly")
	
	
	pStslaParam := r.FormValue("p_stsla")
	
	
	pStresParam := r.FormValue("p_stres")
	
	
	pSttypParam := r.FormValue("p_sttyp")
	
	
	pQsParam := r.FormValue("p_qs")
	
	
	pSfsParam := r.FormValue("p_sfs")
	
	
	pTribeidParam := r.FormValue("p_tribeid")
	
	
	pTribenameParam := r.FormValue("p_tribename")
	
	
	pTribedistParam := r.FormValue("p_tribedist")
	
	
	pOwopParam := r.FormValue("p_owop")
	
	
	pAgooParam := r.FormValue("p_agoo")
	
	
	pIdt1Param := r.FormValue("p_idt1")
	
	
	pIdt2Param := r.FormValue("p_idt2")
	
	
	pStdt1Param := r.FormValue("p_stdt1")
	
	
	pStdt2Param := r.FormValue("p_stdt2")
	
	
	pPitypParam := r.FormValue("p_pityp")
	
	
	pCifdiParam := r.FormValue("p_cifdi")
	
	
	pPfead1Param := r.FormValue("p_pfead1")
	
	
	pPfead2Param := r.FormValue("p_pfead2")
	
	
	pPfeatParam := r.FormValue("p_pfeat")
	
	
	pPsncqParam := r.FormValue("p_psncq")
	
	
	pPctrackParam := r.FormValue("p_pctrack")
	
	
	pSwpaParam := r.FormValue("p_swpa")
	
	
	pDesParam := r.FormValue("p_des")
	
	
	pFntypeParam := r.FormValue("p_fntype")
	
	
	pHpvmthParam := r.FormValue("p_hpvmth")
	
	
	pRecvioParam := r.FormValue("p_recvio")
	
	
	pPollvioParam := r.FormValue("p_pollvio")
	
	
	pArParam := r.FormValue("p_ar")
	
	
	pTriYrParam := r.FormValue("p_tri_yr")
	
	
	pPidallParam := r.FormValue("p_pidall")
	
	
	pFacIcoParam := r.FormValue("p_fac_ico")
	
	
	pIcooParam := r.FormValue("p_icoo")
	
	
	pFacIcosParam := r.FormValue("p_fac_icos")
	
	
	pEjscreenParam := r.FormValue("p_ejscreen")
	
	
	pLimitAddrParam := r.FormValue("p_limit_addr")
	
	
	pLatParam := r.FormValue("p_lat")
	
	
	pLongParam := r.FormValue("p_long")
	
	
	pRadiusParam := r.FormValue("p_radius")
	
	
	pDecoupleParam := r.FormValue("p_decouple")
	
	
	pEjscreenOver80cntParam := r.FormValue("p_ejscreen_over80cnt")
	
	
	querysetParam := r.FormValue("queryset")
	
	
	responsesetParam := r.FormValue("responseset")
	
	
	tablelistParam := r.FormValue("tablelist")
	
	
	maplistParam := r.FormValue("maplist")
	
	
	summarylistParam := r.FormValue("summarylist")
	
	
	callbackParam := r.FormValue("callback")
	
	
	qcolumnsParam := r.FormValue("qcolumns")
	result, err := c.service.AirRestServicesGetFacilitiesPost(r.Context(), outputParam, pFnParam, pSaParam, pSa1Param, pCtParam, pCoParam, pFipsParam, pStParam, pZipParam, pLconParam, pFrsParam, pRegParam, pSicParam, pNcsParam, pQncParam, pPenParam, pOpstParam, pC1latParam, pC1lonParam, pC2latParam, pC2lonParam, pUsmexParam, pSic2Param, pSic4Param, pFaParam, pActParam, pMajParam, pMactParam, pNspsParam, pNspsmParam, pProgParam, pFeaParam, pFeayParam, pFeaaParam, pIeaParam, pIeayParam, pIeaaParam, pQivParam, pNaaParam, pImpwParam, pTrepParam, pTriCatParam, pTriAmtParam, pTriAnyAmtParam, pTriPolParam, pGhgCatParam, pGhgAmtParam, pGhgAnyAmtParam, pGhgYrParam, pNeiPolParam, pNeiAmtParam, pNeiAnyAmtParam, pNeiYrParam, pNeiCatParam, pPmParam, pPdParam, pIcoParam, pHucParam, pWbdParam, pPidParam, pMedParam, pYslParam, pYslyParam, pYslaParam, pStslParam, pStslyParam, pStslaParam, pStresParam, pSttypParam, pQsParam, pSfsParam, pTribeidParam, pTribenameParam, pTribedistParam, pOwopParam, pAgooParam, pIdt1Param, pIdt2Param, pStdt1Param, pStdt2Param, pPitypParam, pCifdiParam, pPfead1Param, pPfead2Param, pPfeatParam, pPsncqParam, pPctrackParam, pSwpaParam, pDesParam, pFntypeParam, pHpvmthParam, pRecvioParam, pPollvioParam, pArParam, pTriYrParam, pPidallParam, pFacIcoParam, pIcooParam, pFacIcosParam, pEjscreenParam, pLimitAddrParam, pLatParam, pLongParam, pRadiusParam, pDecoupleParam, pEjscreenOver80cntParam, querysetParam, responsesetParam, tablelistParam, maplistParam, summarylistParam, callbackParam, qcolumnsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetFacilityInfoGet - Clean Air Act Facility Enhanced Search
func (c *FacilitiesAPIController) AirRestServicesGetFacilityInfoGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var pFnParam string
	if query.Has("p_fn") {
		param := query.Get("p_fn")

		pFnParam = param
	} else {
	}
	var pSaParam string
	if query.Has("p_sa") {
		param := query.Get("p_sa")

		pSaParam = param
	} else {
	}
	var pSa1Param string
	if query.Has("p_sa1") {
		param := query.Get("p_sa1")

		pSa1Param = param
	} else {
	}
	var pCtParam string
	if query.Has("p_ct") {
		param := query.Get("p_ct")

		pCtParam = param
	} else {
	}
	var pCoParam string
	if query.Has("p_co") {
		param := query.Get("p_co")

		pCoParam = param
	} else {
	}
	var pFipsParam string
	if query.Has("p_fips") {
		param := query.Get("p_fips")

		pFipsParam = param
	} else {
	}
	var pStParam string
	if query.Has("p_st") {
		param := query.Get("p_st")

		pStParam = param
	} else {
	}
	var pZipParam string
	if query.Has("p_zip") {
		param := query.Get("p_zip")

		pZipParam = param
	} else {
	}
	var pLconParam string
	if query.Has("p_lcon") {
		param := query.Get("p_lcon")

		pLconParam = param
	} else {
	}
	var pFrsParam string
	if query.Has("p_frs") {
		param := query.Get("p_frs")

		pFrsParam = param
	} else {
	}
	var pRegParam string
	if query.Has("p_reg") {
		param := query.Get("p_reg")

		pRegParam = param
	} else {
	}
	var pSicParam string
	if query.Has("p_sic") {
		param := query.Get("p_sic")

		pSicParam = param
	} else {
	}
	var pNcsParam string
	if query.Has("p_ncs") {
		param := query.Get("p_ncs")

		pNcsParam = param
	} else {
	}
	var pQncParam float32
	if query.Has("p_qnc") {
		param, err := parseNumericParameter[float32](
			query.Get("p_qnc"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pQncParam = param
	} else {
	}
	var pPenParam string
	if query.Has("p_pen") {
		param := query.Get("p_pen")

		pPenParam = param
	} else {
	}
	var pOpstParam string
	if query.Has("p_opst") {
		param := query.Get("p_opst")

		pOpstParam = param
	} else {
	}
	var xminParam float32
	if query.Has("xmin") {
		param, err := parseNumericParameter[float32](
			query.Get("xmin"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		xminParam = param
	} else {
	}
	var yminParam float32
	if query.Has("ymin") {
		param, err := parseNumericParameter[float32](
			query.Get("ymin"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yminParam = param
	} else {
	}
	var xmaxParam float32
	if query.Has("xmax") {
		param, err := parseNumericParameter[float32](
			query.Get("xmax"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		xmaxParam = param
	} else {
	}
	var ymaxParam float32
	if query.Has("ymax") {
		param, err := parseNumericParameter[float32](
			query.Get("ymax"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		ymaxParam = param
	} else {
	}
	var pUsmexParam string
	if query.Has("p_usmex") {
		param := query.Get("p_usmex")

		pUsmexParam = param
	} else {
	}
	var pSic2Param string
	if query.Has("p_sic2") {
		param := query.Get("p_sic2")

		pSic2Param = param
	} else {
	}
	var pSic4Param string
	if query.Has("p_sic4") {
		param := query.Get("p_sic4")

		pSic4Param = param
	} else {
	}
	var pFaParam string
	if query.Has("p_fa") {
		param := query.Get("p_fa")

		pFaParam = param
	} else {
	}
	var pActParam string
	if query.Has("p_act") {
		param := query.Get("p_act")

		pActParam = param
	} else {
	}
	var pMajParam string
	if query.Has("p_maj") {
		param := query.Get("p_maj")

		pMajParam = param
	} else {
	}
	var pMactParam string
	if query.Has("p_mact") {
		param := query.Get("p_mact")

		pMactParam = param
	} else {
	}
	var pNspsParam string
	if query.Has("p_nsps") {
		param := query.Get("p_nsps")

		pNspsParam = param
	} else {
	}
	var pNspsmParam string
	if query.Has("p_nspsm") {
		param := query.Get("p_nspsm")

		pNspsmParam = param
	} else {
	}
	var pProgParam string
	if query.Has("p_prog") {
		param := query.Get("p_prog")

		pProgParam = param
	} else {
	}
	var pFeaParam string
	if query.Has("p_fea") {
		param := query.Get("p_fea")

		pFeaParam = param
	} else {
	}
	var pFeayParam float32
	if query.Has("p_feay") {
		param, err := parseNumericParameter[float32](
			query.Get("p_feay"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pFeayParam = param
	} else {
	}
	var pFeaaParam string
	if query.Has("p_feaa") {
		param := query.Get("p_feaa")

		pFeaaParam = param
	} else {
	}
	var pIeaParam string
	if query.Has("p_iea") {
		param := query.Get("p_iea")

		pIeaParam = param
	} else {
	}
	var pIeayParam float32
	if query.Has("p_ieay") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ieay"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pIeayParam = param
	} else {
	}
	var pIeaaParam string
	if query.Has("p_ieaa") {
		param := query.Get("p_ieaa")

		pIeaaParam = param
	} else {
	}
	var pQivParam string
	if query.Has("p_qiv") {
		param := query.Get("p_qiv")

		pQivParam = param
	} else {
	}
	var pNaaParam string
	if query.Has("p_naa") {
		param := query.Get("p_naa")

		pNaaParam = param
	} else {
	}
	var pImpwParam string
	if query.Has("p_impw") {
		param := query.Get("p_impw")

		pImpwParam = param
	} else {
	}
	var pTrepParam string
	if query.Has("p_trep") {
		param := query.Get("p_trep")

		pTrepParam = param
	} else {
	}
	var pTriCatParam string
	if query.Has("p_tri_cat") {
		param := query.Get("p_tri_cat")

		pTriCatParam = param
	} else {
	}
	var pTriAmtParam string
	if query.Has("p_tri_amt") {
		param := query.Get("p_tri_amt")

		pTriAmtParam = param
	} else {
	}
	var pTriAnyAmtParam float32
	if query.Has("p_tri_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tri_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTriAnyAmtParam = param
	} else {
	}
	var pTriPolParam string
	if query.Has("p_tri_pol") {
		param := query.Get("p_tri_pol")

		pTriPolParam = param
	} else {
	}
	var pGhgCatParam string
	if query.Has("p_ghg_cat") {
		param := query.Get("p_ghg_cat")

		pGhgCatParam = param
	} else {
	}
	var pGhgAmtParam string
	if query.Has("p_ghg_amt") {
		param := query.Get("p_ghg_amt")

		pGhgAmtParam = param
	} else {
	}
	var pGhgAnyAmtParam float32
	if query.Has("p_ghg_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ghg_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pGhgAnyAmtParam = param
	} else {
	}
	var pGhgYrParam string
	if query.Has("p_ghg_yr") {
		param := query.Get("p_ghg_yr")

		pGhgYrParam = param
	} else {
	}
	var pNeiPolParam string
	if query.Has("p_nei_pol") {
		param := query.Get("p_nei_pol")

		pNeiPolParam = param
	} else {
	}
	var pNeiAmtParam string
	if query.Has("p_nei_amt") {
		param := query.Get("p_nei_amt")

		pNeiAmtParam = param
	} else {
	}
	var pNeiAnyAmtParam float32
	if query.Has("p_nei_any_amt") {
		param, err := parseNumericParameter[float32](
			query.Get("p_nei_any_amt"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pNeiAnyAmtParam = param
	} else {
	}
	var pNeiYrParam string
	if query.Has("p_nei_yr") {
		param := query.Get("p_nei_yr")

		pNeiYrParam = param
	} else {
	}
	var pNeiCatParam string
	if query.Has("p_nei_cat") {
		param := query.Get("p_nei_cat")

		pNeiCatParam = param
	} else {
	}
	var pPmParam string
	if query.Has("p_pm") {
		param := query.Get("p_pm")

		pPmParam = param
	} else {
	}
	var pPdParam string
	if query.Has("p_pd") {
		param := query.Get("p_pd")

		pPdParam = param
	} else {
	}
	var pIcoParam string
	if query.Has("p_ico") {
		param := query.Get("p_ico")

		pIcoParam = param
	} else {
	}
	var pHucParam string
	if query.Has("p_huc") {
		param := query.Get("p_huc")

		pHucParam = param
	} else {
	}
	var pWbdParam string
	if query.Has("p_wbd") {
		param := query.Get("p_wbd")

		pWbdParam = param
	} else {
	}
	var pPidParam string
	if query.Has("p_pid") {
		param := query.Get("p_pid")

		pPidParam = param
	} else {
	}
	var pMedParam string
	if query.Has("p_med") {
		param := query.Get("p_med")

		pMedParam = param
	} else {
	}
	var pYslParam string
	if query.Has("p_ysl") {
		param := query.Get("p_ysl")

		pYslParam = param
	} else {
	}
	var pYslyParam float32
	if query.Has("p_ysly") {
		param, err := parseNumericParameter[float32](
			query.Get("p_ysly"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pYslyParam = param
	} else {
	}
	var pYslaParam string
	if query.Has("p_ysla") {
		param := query.Get("p_ysla")

		pYslaParam = param
	} else {
	}
	var pStslParam string
	if query.Has("p_stsl") {
		param := query.Get("p_stsl")

		pStslParam = param
	} else {
	}
	var pStslyParam float32
	if query.Has("p_stsly") {
		param, err := parseNumericParameter[float32](
			query.Get("p_stsly"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pStslyParam = param
	} else {
	}
	var pStslaParam string
	if query.Has("p_stsla") {
		param := query.Get("p_stsla")

		pStslaParam = param
	} else {
	}
	var pStresParam string
	if query.Has("p_stres") {
		param := query.Get("p_stres")

		pStresParam = param
	} else {
	}
	var pSttypParam string
	if query.Has("p_sttyp") {
		param := query.Get("p_sttyp")

		pSttypParam = param
	} else {
	}
	var pQsParam string
	if query.Has("p_qs") {
		param := query.Get("p_qs")

		pQsParam = param
	} else {
	}
	var pSfsParam string
	if query.Has("p_sfs") {
		param := query.Get("p_sfs")

		pSfsParam = param
	} else {
	}
	var pTribeidParam float32
	if query.Has("p_tribeid") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tribeid"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTribeidParam = param
	} else {
	}
	var pTribenameParam string
	if query.Has("p_tribename") {
		param := query.Get("p_tribename")

		pTribenameParam = param
	} else {
	}
	var pTribedistParam float32
	if query.Has("p_tribedist") {
		param, err := parseNumericParameter[float32](
			query.Get("p_tribedist"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pTribedistParam = param
	} else {
	}
	var pOwopParam string
	if query.Has("p_owop") {
		param := query.Get("p_owop")

		pOwopParam = param
	} else {
	}
	var pAgooParam string
	if query.Has("p_agoo") {
		param := query.Get("p_agoo")

		pAgooParam = param
	} else {
	}
	var pIdt1Param string
	if query.Has("p_idt1") {
		param := query.Get("p_idt1")

		pIdt1Param = param
	} else {
	}
	var pIdt2Param string
	if query.Has("p_idt2") {
		param := query.Get("p_idt2")

		pIdt2Param = param
	} else {
	}
	var pStdt1Param string
	if query.Has("p_stdt1") {
		param := query.Get("p_stdt1")

		pStdt1Param = param
	} else {
	}
	var pStdt2Param string
	if query.Has("p_stdt2") {
		param := query.Get("p_stdt2")

		pStdt2Param = param
	} else {
	}
	var pPitypParam string
	if query.Has("p_pityp") {
		param := query.Get("p_pityp")

		pPitypParam = param
	} else {
	}
	var pCifdiParam string
	if query.Has("p_cifdi") {
		param := query.Get("p_cifdi")

		pCifdiParam = param
	} else {
	}
	var pPfead1Param string
	if query.Has("p_pfead1") {
		param := query.Get("p_pfead1")

		pPfead1Param = param
	} else {
	}
	var pPfead2Param string
	if query.Has("p_pfead2") {
		param := query.Get("p_pfead2")

		pPfead2Param = param
	} else {
	}
	var pPfeatParam string
	if query.Has("p_pfeat") {
		param := query.Get("p_pfeat")

		pPfeatParam = param
	} else {
	}
	var pPsncqParam string
	if query.Has("p_psncq") {
		param := query.Get("p_psncq")

		pPsncqParam = param
	} else {
	}
	var pPctrackParam string
	if query.Has("p_pctrack") {
		param := query.Get("p_pctrack")

		pPctrackParam = param
	} else {
	}
	var pSwpaParam string
	if query.Has("p_swpa") {
		param := query.Get("p_swpa")

		pSwpaParam = param
	} else {
	}
	var pDesParam string
	if query.Has("p_des") {
		param := query.Get("p_des")

		pDesParam = param
	} else {
	}
	var pFntypeParam string
	if query.Has("p_fntype") {
		param := query.Get("p_fntype")

		pFntypeParam = param
	} else {
	}
	var pHpvmthParam string
	if query.Has("p_hpvmth") {
		param := query.Get("p_hpvmth")

		pHpvmthParam = param
	} else {
	}
	var pRecvioParam string
	if query.Has("p_recvio") {
		param := query.Get("p_recvio")

		pRecvioParam = param
	} else {
	}
	var pPollvioParam string
	if query.Has("p_pollvio") {
		param := query.Get("p_pollvio")

		pPollvioParam = param
	} else {
	}
	var pArParam string
	if query.Has("p_ar") {
		param := query.Get("p_ar")

		pArParam = param
	} else {
	}
	var pTriYrParam string
	if query.Has("p_tri_yr") {
		param := query.Get("p_tri_yr")

		pTriYrParam = param
	} else {
	}
	var pPidallParam string
	if query.Has("p_pidall") {
		param := query.Get("p_pidall")

		pPidallParam = param
	} else {
	}
	var pFacIcoParam string
	if query.Has("p_fac_ico") {
		param := query.Get("p_fac_ico")

		pFacIcoParam = param
	} else {
	}
	var pIcooParam string
	if query.Has("p_icoo") {
		param := query.Get("p_icoo")

		pIcooParam = param
	} else {
	}
	var pFacIcosParam string
	if query.Has("p_fac_icos") {
		param := query.Get("p_fac_icos")

		pFacIcosParam = param
	} else {
	}
	var pEjscreenParam string
	if query.Has("p_ejscreen") {
		param := query.Get("p_ejscreen")

		pEjscreenParam = param
	} else {
	}
	var pLimitAddrParam string
	if query.Has("p_limit_addr") {
		param := query.Get("p_limit_addr")

		pLimitAddrParam = param
	} else {
	}
	var pLatParam float32
	if query.Has("p_lat") {
		param, err := parseNumericParameter[float32](
			query.Get("p_lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pLatParam = param
	} else {
	}
	var pLongParam float32
	if query.Has("p_long") {
		param, err := parseNumericParameter[float32](
			query.Get("p_long"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pLongParam = param
	} else {
	}
	var pRadiusParam float32
	if query.Has("p_radius") {
		param, err := parseNumericParameter[float32](
			query.Get("p_radius"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pRadiusParam = param
	} else {
	}
	var pDecoupleParam string
	if query.Has("p_decouple") {
		param := query.Get("p_decouple")

		pDecoupleParam = param
	} else {
	}
	var pEjscreenOver80cntParam string
	if query.Has("p_ejscreen_over80cnt") {
		param := query.Get("p_ejscreen_over80cnt")

		pEjscreenOver80cntParam = param
	} else {
	}
	var querysetParam float32
	if query.Has("queryset") {
		param, err := parseNumericParameter[float32](
			query.Get("queryset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		querysetParam = param
	} else {
	}
	var responsesetParam float32
	if query.Has("responseset") {
		param, err := parseNumericParameter[float32](
			query.Get("responseset"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		responsesetParam = param
	} else {
	}
	var summarylistParam string
	if query.Has("summarylist") {
		param := query.Get("summarylist")

		summarylistParam = param
	} else {
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	var qcolumnsParam string
	if query.Has("qcolumns") {
		param := query.Get("qcolumns")

		qcolumnsParam = param
	} else {
	}
	var pPrettyPrintParam float32
	if query.Has("p_pretty_print") {
		param, err := parseNumericParameter[float32](
			query.Get("p_pretty_print"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pPrettyPrintParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetFacilityInfoGet(r.Context(), outputParam, pFnParam, pSaParam, pSa1Param, pCtParam, pCoParam, pFipsParam, pStParam, pZipParam, pLconParam, pFrsParam, pRegParam, pSicParam, pNcsParam, pQncParam, pPenParam, pOpstParam, xminParam, yminParam, xmaxParam, ymaxParam, pUsmexParam, pSic2Param, pSic4Param, pFaParam, pActParam, pMajParam, pMactParam, pNspsParam, pNspsmParam, pProgParam, pFeaParam, pFeayParam, pFeaaParam, pIeaParam, pIeayParam, pIeaaParam, pQivParam, pNaaParam, pImpwParam, pTrepParam, pTriCatParam, pTriAmtParam, pTriAnyAmtParam, pTriPolParam, pGhgCatParam, pGhgAmtParam, pGhgAnyAmtParam, pGhgYrParam, pNeiPolParam, pNeiAmtParam, pNeiAnyAmtParam, pNeiYrParam, pNeiCatParam, pPmParam, pPdParam, pIcoParam, pHucParam, pWbdParam, pPidParam, pMedParam, pYslParam, pYslyParam, pYslaParam, pStslParam, pStslyParam, pStslaParam, pStresParam, pSttypParam, pQsParam, pSfsParam, pTribeidParam, pTribenameParam, pTribedistParam, pOwopParam, pAgooParam, pIdt1Param, pIdt2Param, pStdt1Param, pStdt2Param, pPitypParam, pCifdiParam, pPfead1Param, pPfead2Param, pPfeatParam, pPsncqParam, pPctrackParam, pSwpaParam, pDesParam, pFntypeParam, pHpvmthParam, pRecvioParam, pPollvioParam, pArParam, pTriYrParam, pPidallParam, pFacIcoParam, pIcooParam, pFacIcosParam, pEjscreenParam, pLimitAddrParam, pLatParam, pLongParam, pRadiusParam, pDecoupleParam, pEjscreenOver80cntParam, querysetParam, responsesetParam, summarylistParam, callbackParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetFacilityInfoPost - Clean Air Act Facility Enhanced Search
func (c *FacilitiesAPIController) AirRestServicesGetFacilityInfoPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	outputParam := r.FormValue("output")
	
	
	pFnParam := r.FormValue("p_fn")
	
	
	pSaParam := r.FormValue("p_sa")
	
	
	pSa1Param := r.FormValue("p_sa1")
	
	
	pCtParam := r.FormValue("p_ct")
	
	
	pCoParam := r.FormValue("p_co")
	
	
	pFipsParam := r.FormValue("p_fips")
	
	
	pStParam := r.FormValue("p_st")
	
	
	pZipParam := r.FormValue("p_zip")
	
	
	pLconParam := r.FormValue("p_lcon")
	
	
	pFrsParam := r.FormValue("p_frs")
	
	
	pRegParam := r.FormValue("p_reg")
	
	
	pSicParam := r.FormValue("p_sic")
	
	
	pNcsParam := r.FormValue("p_ncs")
	
	
	pQncParam := r.FormValue("p_qnc")
	
	
	pPenParam := r.FormValue("p_pen")
	
	
	pOpstParam := r.FormValue("p_opst")
	
	
	xminParam := r.FormValue("xmin")
	
	
	yminParam := r.FormValue("ymin")
	
	
	xmaxParam := r.FormValue("xmax")
	
	
	ymaxParam := r.FormValue("ymax")
	
	
	pUsmexParam := r.FormValue("p_usmex")
	
	
	pSic2Param := r.FormValue("p_sic2")
	
	
	pSic4Param := r.FormValue("p_sic4")
	
	
	pFaParam := r.FormValue("p_fa")
	
	
	pActParam := r.FormValue("p_act")
	
	
	pMajParam := r.FormValue("p_maj")
	
	
	pMactParam := r.FormValue("p_mact")
	
	
	pNspsParam := r.FormValue("p_nsps")
	
	
	pNspsmParam := r.FormValue("p_nspsm")
	
	
	pProgParam := r.FormValue("p_prog")
	
	
	pFeaParam := r.FormValue("p_fea")
	
	
	pFeayParam := r.FormValue("p_feay")
	
	
	pFeaaParam := r.FormValue("p_feaa")
	
	
	pIeaParam := r.FormValue("p_iea")
	
	
	pIeayParam := r.FormValue("p_ieay")
	
	
	pIeaaParam := r.FormValue("p_ieaa")
	
	
	pQivParam := r.FormValue("p_qiv")
	
	
	pNaaParam := r.FormValue("p_naa")
	
	
	pImpwParam := r.FormValue("p_impw")
	
	
	pTrepParam := r.FormValue("p_trep")
	
	
	pTriCatParam := r.FormValue("p_tri_cat")
	
	
	pTriAmtParam := r.FormValue("p_tri_amt")
	
	
	pTriAnyAmtParam := r.FormValue("p_tri_any_amt")
	
	
	pTriPolParam := r.FormValue("p_tri_pol")
	
	
	pGhgCatParam := r.FormValue("p_ghg_cat")
	
	
	pGhgAmtParam := r.FormValue("p_ghg_amt")
	
	
	pGhgAnyAmtParam := r.FormValue("p_ghg_any_amt")
	
	
	pGhgYrParam := r.FormValue("p_ghg_yr")
	
	
	pNeiPolParam := r.FormValue("p_nei_pol")
	
	
	pNeiAmtParam := r.FormValue("p_nei_amt")
	
	
	pNeiAnyAmtParam := r.FormValue("p_nei_any_amt")
	
	
	pNeiYrParam := r.FormValue("p_nei_yr")
	
	
	pNeiCatParam := r.FormValue("p_nei_cat")
	
	
	pPmParam := r.FormValue("p_pm")
	
	
	pPdParam := r.FormValue("p_pd")
	
	
	pIcoParam := r.FormValue("p_ico")
	
	
	pHucParam := r.FormValue("p_huc")
	
	
	pWbdParam := r.FormValue("p_wbd")
	
	
	pPidParam := r.FormValue("p_pid")
	
	
	pMedParam := r.FormValue("p_med")
	
	
	pYslParam := r.FormValue("p_ysl")
	
	
	pYslyParam := r.FormValue("p_ysly")
	
	
	pYslaParam := r.FormValue("p_ysla")
	
	
	pStslParam := r.FormValue("p_stsl")
	
	
	pStslyParam := r.FormValue("p_stsly")
	
	
	pStslaParam := r.FormValue("p_stsla")
	
	
	pStresParam := r.FormValue("p_stres")
	
	
	pSttypParam := r.FormValue("p_sttyp")
	
	
	pQsParam := r.FormValue("p_qs")
	
	
	pSfsParam := r.FormValue("p_sfs")
	
	
	pTribeidParam := r.FormValue("p_tribeid")
	
	
	pTribenameParam := r.FormValue("p_tribename")
	
	
	pTribedistParam := r.FormValue("p_tribedist")
	
	
	pOwopParam := r.FormValue("p_owop")
	
	
	pAgooParam := r.FormValue("p_agoo")
	
	
	pIdt1Param := r.FormValue("p_idt1")
	
	
	pIdt2Param := r.FormValue("p_idt2")
	
	
	pStdt1Param := r.FormValue("p_stdt1")
	
	
	pStdt2Param := r.FormValue("p_stdt2")
	
	
	pPitypParam := r.FormValue("p_pityp")
	
	
	pCifdiParam := r.FormValue("p_cifdi")
	
	
	pPfead1Param := r.FormValue("p_pfead1")
	
	
	pPfead2Param := r.FormValue("p_pfead2")
	
	
	pPfeatParam := r.FormValue("p_pfeat")
	
	
	pPsncqParam := r.FormValue("p_psncq")
	
	
	pPctrackParam := r.FormValue("p_pctrack")
	
	
	pSwpaParam := r.FormValue("p_swpa")
	
	
	pDesParam := r.FormValue("p_des")
	
	
	pFntypeParam := r.FormValue("p_fntype")
	
	
	pHpvmthParam := r.FormValue("p_hpvmth")
	
	
	pRecvioParam := r.FormValue("p_recvio")
	
	
	pPollvioParam := r.FormValue("p_pollvio")
	
	
	pArParam := r.FormValue("p_ar")
	
	
	pTriYrParam := r.FormValue("p_tri_yr")
	
	
	pPidallParam := r.FormValue("p_pidall")
	
	
	pFacIcoParam := r.FormValue("p_fac_ico")
	
	
	pIcooParam := r.FormValue("p_icoo")
	
	
	pFacIcosParam := r.FormValue("p_fac_icos")
	
	
	pEjscreenParam := r.FormValue("p_ejscreen")
	
	
	pLimitAddrParam := r.FormValue("p_limit_addr")
	
	
	pLatParam := r.FormValue("p_lat")
	
	
	pLongParam := r.FormValue("p_long")
	
	
	pRadiusParam := r.FormValue("p_radius")
	
	
	pDecoupleParam := r.FormValue("p_decouple")
	
	
	pEjscreenOver80cntParam := r.FormValue("p_ejscreen_over80cnt")
	
	
	querysetParam := r.FormValue("queryset")
	
	
	responsesetParam := r.FormValue("responseset")
	
	
	summarylistParam := r.FormValue("summarylist")
	
	
	callbackParam := r.FormValue("callback")
	
	
	qcolumnsParam := r.FormValue("qcolumns")
	
	
	pPrettyPrintParam := r.FormValue("p_pretty_print")
	result, err := c.service.AirRestServicesGetFacilityInfoPost(r.Context(), outputParam, pFnParam, pSaParam, pSa1Param, pCtParam, pCoParam, pFipsParam, pStParam, pZipParam, pLconParam, pFrsParam, pRegParam, pSicParam, pNcsParam, pQncParam, pPenParam, pOpstParam, xminParam, yminParam, xmaxParam, ymaxParam, pUsmexParam, pSic2Param, pSic4Param, pFaParam, pActParam, pMajParam, pMactParam, pNspsParam, pNspsmParam, pProgParam, pFeaParam, pFeayParam, pFeaaParam, pIeaParam, pIeayParam, pIeaaParam, pQivParam, pNaaParam, pImpwParam, pTrepParam, pTriCatParam, pTriAmtParam, pTriAnyAmtParam, pTriPolParam, pGhgCatParam, pGhgAmtParam, pGhgAnyAmtParam, pGhgYrParam, pNeiPolParam, pNeiAmtParam, pNeiAnyAmtParam, pNeiYrParam, pNeiCatParam, pPmParam, pPdParam, pIcoParam, pHucParam, pWbdParam, pPidParam, pMedParam, pYslParam, pYslyParam, pYslaParam, pStslParam, pStslyParam, pStslaParam, pStresParam, pSttypParam, pQsParam, pSfsParam, pTribeidParam, pTribenameParam, pTribedistParam, pOwopParam, pAgooParam, pIdt1Param, pIdt2Param, pStdt1Param, pStdt2Param, pPitypParam, pCifdiParam, pPfead1Param, pPfead2Param, pPfeatParam, pPsncqParam, pPctrackParam, pSwpaParam, pDesParam, pFntypeParam, pHpvmthParam, pRecvioParam, pPollvioParam, pArParam, pTriYrParam, pPidallParam, pFacIcoParam, pIcooParam, pFacIcosParam, pEjscreenParam, pLimitAddrParam, pLatParam, pLongParam, pRadiusParam, pDecoupleParam, pEjscreenOver80cntParam, querysetParam, responsesetParam, summarylistParam, callbackParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetGeojsonGet - Clean Air Act GeoJSON Service
func (c *FacilitiesAPIController) AirRestServicesGetGeojsonGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qidParam string
	if query.Has("qid") {
		param := query.Get("qid")

		qidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "qid"}, nil)
		return
	}
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	var newsortParam float32
	if query.Has("newsort") {
		param, err := parseNumericParameter[float32](
			query.Get("newsort"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		newsortParam = param
	} else {
	}
	var descendingParam string
	if query.Has("descending") {
		param := query.Get("descending")

		descendingParam = param
	} else {
	}
	var qcolumnsParam string
	if query.Has("qcolumns") {
		param := query.Get("qcolumns")

		qcolumnsParam = param
	} else {
	}
	var pPrettyPrintParam float32
	if query.Has("p_pretty_print") {
		param, err := parseNumericParameter[float32](
			query.Get("p_pretty_print"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pPrettyPrintParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetGeojsonGet(r.Context(), qidParam, outputParam, callbackParam, newsortParam, descendingParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetGeojsonPost - Clean Air Act GeoJSON Service
func (c *FacilitiesAPIController) AirRestServicesGetGeojsonPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	qidParam := r.FormValue("qid")
	
	
	outputParam := r.FormValue("output")
	
	
	callbackParam := r.FormValue("callback")
	
	
	newsortParam := r.FormValue("newsort")
	
	
	descendingParam := r.FormValue("descending")
	
	
	qcolumnsParam := r.FormValue("qcolumns")
	
	
	pPrettyPrintParam := r.FormValue("p_pretty_print")
	result, err := c.service.AirRestServicesGetGeojsonPost(r.Context(), qidParam, outputParam, callbackParam, newsortParam, descendingParam, qcolumnsParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetInfoClustersGet - Clean Air Act Info Clusters Service
func (c *FacilitiesAPIController) AirRestServicesGetInfoClustersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pQidParam string
	if query.Has("p_qid") {
		param := query.Get("p_qid")

		pQidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "p_qid"}, nil)
		return
	}
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var pPrettyPrintParam float32
	if query.Has("p_pretty_print") {
		param, err := parseNumericParameter[float32](
			query.Get("p_pretty_print"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pPrettyPrintParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetInfoClustersGet(r.Context(), pQidParam, outputParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetInfoClustersPost - Clean Air Act Info Clusters Service
func (c *FacilitiesAPIController) AirRestServicesGetInfoClustersPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	pQidParam := r.FormValue("p_qid")
	
	
	outputParam := r.FormValue("output")
	
	
	pPrettyPrintParam := r.FormValue("p_pretty_print")
	result, err := c.service.AirRestServicesGetInfoClustersPost(r.Context(), pQidParam, outputParam, pPrettyPrintParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetMapGet - Clean Air Act Map Service
func (c *FacilitiesAPIController) AirRestServicesGetMapGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qidParam string
	if query.Has("qid") {
		param := query.Get("qid")

		qidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "qid"}, nil)
		return
	}
	var pIdParam string
	if query.Has("p_id") {
		param := query.Get("p_id")

		pIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "p_id"}, nil)
		return
	}
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	var tablelistParam string
	if query.Has("tablelist") {
		param := query.Get("tablelist")

		tablelistParam = param
	} else {
	}
	var c1LatParam float32
	if query.Has("c1_lat") {
		param, err := parseNumericParameter[float32](
			query.Get("c1_lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		c1LatParam = param
	} else {
	}
	var c1LongParam float32
	if query.Has("c1_long") {
		param, err := parseNumericParameter[float32](
			query.Get("c1_long"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		c1LongParam = param
	} else {
	}
	var c2LatParam float32
	if query.Has("c2_lat") {
		param, err := parseNumericParameter[float32](
			query.Get("c2_lat"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		c2LatParam = param
	} else {
	}
	var c2LongParam float32
	if query.Has("c2_long") {
		param, err := parseNumericParameter[float32](
			query.Get("c2_long"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		c2LongParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetMapGet(r.Context(), qidParam, pIdParam, outputParam, callbackParam, tablelistParam, c1LatParam, c1LongParam, c2LatParam, c2LongParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetMapPost - Clean Air Act Map Service
func (c *FacilitiesAPIController) AirRestServicesGetMapPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	qidParam := r.FormValue("qid")
	
	
	pIdParam := r.FormValue("p_id")
	
	
	outputParam := r.FormValue("output")
	
	
	callbackParam := r.FormValue("callback")
	
	
	tablelistParam := r.FormValue("tablelist")
	
	
	c1LatParam := r.FormValue("c1_lat")
	
	
	c1LongParam := r.FormValue("c1_long")
	
	
	c2LatParam := r.FormValue("c2_lat")
	
	
	c2LongParam := r.FormValue("c2_long")
	result, err := c.service.AirRestServicesGetMapPost(r.Context(), qidParam, pIdParam, outputParam, callbackParam, tablelistParam, c1LatParam, c1LongParam, c2LatParam, c2LongParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetQidGet - Clean Air Act Search by Query ID
func (c *FacilitiesAPIController) AirRestServicesGetQidGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qidParam string
	if query.Has("qid") {
		param := query.Get("qid")

		qidParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "qid"}, nil)
		return
	}
	var outputParam string
	if query.Has("output") {
		param := query.Get("output")

		outputParam = param
	} else {
	}
	var pagenoParam float32
	if query.Has("pageno") {
		param, err := parseNumericParameter[float32](
			query.Get("pageno"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pagenoParam = param
	} else {
		var param float32 = 1.0
		pagenoParam = param
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	var newsortParam float32
	if query.Has("newsort") {
		param, err := parseNumericParameter[float32](
			query.Get("newsort"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		newsortParam = param
	} else {
	}
	var descendingParam string
	if query.Has("descending") {
		param := query.Get("descending")

		descendingParam = param
	} else {
	}
	var qcolumnsParam string
	if query.Has("qcolumns") {
		param := query.Get("qcolumns")

		qcolumnsParam = param
	} else {
	}
	result, err := c.service.AirRestServicesGetQidGet(r.Context(), qidParam, outputParam, pagenoParam, callbackParam, newsortParam, descendingParam, qcolumnsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AirRestServicesGetQidPost - Clean Air Act Search by Query ID
func (c *FacilitiesAPIController) AirRestServicesGetQidPost(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	qidParam := r.FormValue("qid")
	
	
	outputParam := r.FormValue("output")
	
	
	pagenoParam := r.FormValue("pageno")
	
	
	callbackParam := r.FormValue("callback")
	
	
	newsortParam := r.FormValue("newsort")
	
	
	descendingParam := r.FormValue("descending")
	
	
	qcolumnsParam := r.FormValue("qcolumns")
	result, err := c.service.AirRestServicesGetQidPost(r.Context(), qidParam, outputParam, pagenoParam, callbackParam, newsortParam, descendingParam, qcolumnsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
