/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * API version: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// UserAPIController binds http requests to an api service and writes the service results to the http response
type UserAPIController struct {
	service UserAPIServicer
	errorHandler ErrorHandler
}

// UserAPIOption for how the controller is set up.
type UserAPIOption func(*UserAPIController)

// WithUserAPIErrorHandler inject ErrorHandler into controller
func WithUserAPIErrorHandler(h ErrorHandler) UserAPIOption {
	return func(c *UserAPIController) {
		c.errorHandler = h
	}
}

// NewUserAPIController creates a default api controller
func NewUserAPIController(s UserAPIServicer, opts ...UserAPIOption) Router {
	controller := &UserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIController
func (c *UserAPIController) Routes() Routes {
	return Routes{
		"CancelRide": Route{
			strings.ToUpper("Post"),
			"/v1/rides/{id}/cancel",
			c.CancelRide,
		},
		"GetProfile": Route{
			strings.ToUpper("Get"),
			"/v1/profile",
			c.GetProfile,
		},
		"GetRide": Route{
			strings.ToUpper("Get"),
			"/v1/rides/{id}",
			c.GetRide,
		},
		"GetRideReceipt": Route{
			strings.ToUpper("Get"),
			"/v1/rides/{id}/receipt",
			c.GetRideReceipt,
		},
		"GetRides": Route{
			strings.ToUpper("Get"),
			"/v1/rides",
			c.GetRides,
		},
		"NewRide": Route{
			strings.ToUpper("Post"),
			"/v1/rides",
			c.NewRide,
		},
		"SetRideDestination": Route{
			strings.ToUpper("Put"),
			"/v1/rides/{id}/destination",
			c.SetRideDestination,
		},
		"SetRideRating": Route{
			strings.ToUpper("Put"),
			"/v1/rides/{id}/rating",
			c.SetRideRating,
		},
	}
}

// CancelRide - Cancel a ongoing requested ride
func (c *UserAPIController) CancelRide(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	requestParam := CancellationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCancellationRequestRequired(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCancellationRequestConstraints(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CancelRide(r.Context(), idParam, requestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProfile - The user's general info
func (c *UserAPIController) GetProfile(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetProfile(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRide - Get the ride detail of a given ride ID
func (c *UserAPIController) GetRide(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRide(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRideReceipt - Get the receipt of the rides.
func (c *UserAPIController) GetRideReceipt(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRideReceipt(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRides - List rides
func (c *UserAPIController) GetRides(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startTimeParam time.Time
	if query.Has("start_time"){
		param, err := parseTime(query.Get("start_time"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{"start_time"}, nil)
		return
	}
	var endTimeParam time.Time
	if query.Has("end_time"){
		param, err := parseTime(query.Get("end_time"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endTimeParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.GetRides(r.Context(), startTimeParam, endTimeParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// NewRide - Request a Lyft
func (c *UserAPIController) NewRide(w http.ResponseWriter, r *http.Request) {
	requestParam := Ride{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRideRequired(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRideConstraints(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.NewRide(r.Context(), requestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRideDestination - Update the destination of the ride
func (c *UserAPIController) SetRideDestination(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	requestParam := Location{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLocationRequired(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLocationConstraints(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetRideDestination(r.Context(), idParam, requestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRideRating - Add the passenger's rating, feedback, and tip
func (c *UserAPIController) SetRideRating(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	requestParam := RatingRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRatingRequestRequired(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRatingRequestConstraints(requestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetRideRating(r.Context(), idParam, requestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
