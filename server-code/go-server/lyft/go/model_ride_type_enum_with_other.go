/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * API version: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// RideTypeEnumWithOther : The ID of the ride type
type RideTypeEnumWithOther string

// List of RideTypeEnumWithOther
const (
	LYFT RideTypeEnumWithOther = "lyft"
	LYFT_LINE RideTypeEnumWithOther = "lyft_line"
	LYFT_PLUS RideTypeEnumWithOther = "lyft_plus"
	LYFT_PREMIER RideTypeEnumWithOther = "lyft_premier"
	LYFT_LUX RideTypeEnumWithOther = "lyft_lux"
	LYFT_LUXSUV RideTypeEnumWithOther = "lyft_luxsuv"
	OTHER RideTypeEnumWithOther = "other"
)

// AllowedRideTypeEnumWithOtherEnumValues is all the allowed values of RideTypeEnumWithOther enum
var AllowedRideTypeEnumWithOtherEnumValues = []RideTypeEnumWithOther{
	"lyft",
	"lyft_line",
	"lyft_plus",
	"lyft_premier",
	"lyft_lux",
	"lyft_luxsuv",
	"other",
}

// validRideTypeEnumWithOtherEnumValue provides a map of RideTypeEnumWithOthers for fast verification of use input
var validRideTypeEnumWithOtherEnumValues = map[RideTypeEnumWithOther]struct{}{
	"lyft": {},
	"lyft_line": {},
	"lyft_plus": {},
	"lyft_premier": {},
	"lyft_lux": {},
	"lyft_luxsuv": {},
	"other": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RideTypeEnumWithOther) IsValid() bool {
	_, ok := validRideTypeEnumWithOtherEnumValues[v]
	return ok
}

// NewRideTypeEnumWithOtherFromValue returns a pointer to a valid RideTypeEnumWithOther
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRideTypeEnumWithOtherFromValue(v string) (RideTypeEnumWithOther, error) {
	ev := RideTypeEnumWithOther(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RideTypeEnumWithOther: valid values are %v", v, AllowedRideTypeEnumWithOtherEnumValues)
	}
}



// AssertRideTypeEnumWithOtherRequired checks if the required fields are not zero-ed
func AssertRideTypeEnumWithOtherRequired(obj RideTypeEnumWithOther) error {
	return nil
}

// AssertRideTypeEnumWithOtherConstraints checks if the values respects the defined constraints
func AssertRideTypeEnumWithOtherConstraints(obj RideTypeEnumWithOther) error {
	return nil
}
