/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * API version: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// RideProfileEnum : The payment profile which the user has picked for the ride
type RideProfileEnum string

// List of RideProfileEnum
const (
	PERSONAL RideProfileEnum = "personal"
	BUSINESS RideProfileEnum = "business"
)

// AllowedRideProfileEnumEnumValues is all the allowed values of RideProfileEnum enum
var AllowedRideProfileEnumEnumValues = []RideProfileEnum{
	"personal",
	"business",
}

// validRideProfileEnumEnumValue provides a map of RideProfileEnums for fast verification of use input
var validRideProfileEnumEnumValues = map[RideProfileEnum]struct{}{
	"personal": {},
	"business": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RideProfileEnum) IsValid() bool {
	_, ok := validRideProfileEnumEnumValues[v]
	return ok
}

// NewRideProfileEnumFromValue returns a pointer to a valid RideProfileEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRideProfileEnumFromValue(v string) (RideProfileEnum, error) {
	ev := RideProfileEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RideProfileEnum: valid values are %v", v, AllowedRideProfileEnumEnumValues)
	}
}



// AssertRideProfileEnumRequired checks if the required fields are not zero-ed
func AssertRideProfileEnumRequired(obj RideProfileEnum) error {
	return nil
}

// AssertRideProfileEnumConstraints checks if the values respects the defined constraints
func AssertRideProfileEnumConstraints(obj RideProfileEnum) error {
	return nil
}
