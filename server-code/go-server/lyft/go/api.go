/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * API version: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"time"
)



// PublicAPIRouter defines the required methods for binding the api requests to a responses for the PublicAPI
// The PublicAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PublicAPIServicer to perform the required actions, then write the service results to the http response.
type PublicAPIRouter interface { 
	GetCost(http.ResponseWriter, *http.Request)
	GetDrivers(http.ResponseWriter, *http.Request)
	GetETA(http.ResponseWriter, *http.Request)
	GetRideTypes(http.ResponseWriter, *http.Request)
}
// SandboxAPIRouter defines the required methods for binding the api requests to a responses for the SandboxAPI
// The SandboxAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SandboxAPIServicer to perform the required actions, then write the service results to the http response.
type SandboxAPIRouter interface { 
	SetPrimeTime(http.ResponseWriter, *http.Request)
	SetRideStatus(http.ResponseWriter, *http.Request)
	SetRideTypeAvailability(http.ResponseWriter, *http.Request)
	SetRideTypes(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	CancelRide(http.ResponseWriter, *http.Request)
	GetProfile(http.ResponseWriter, *http.Request)
	GetRide(http.ResponseWriter, *http.Request)
	GetRideReceipt(http.ResponseWriter, *http.Request)
	GetRides(http.ResponseWriter, *http.Request)
	NewRide(http.ResponseWriter, *http.Request)
	SetRideDestination(http.ResponseWriter, *http.Request)
	SetRideRating(http.ResponseWriter, *http.Request)
}


// PublicAPIServicer defines the api actions for the PublicAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PublicAPIServicer interface { 
	GetCost(context.Context, float64, float64, string, float64, float64) (ImplResponse, error)
	GetDrivers(context.Context, float64, float64) (ImplResponse, error)
	GetETA(context.Context, float64, float64, float64, float64, string) (ImplResponse, error)
	GetRideTypes(context.Context, float64, float64, string) (ImplResponse, error)
}


// SandboxAPIServicer defines the api actions for the SandboxAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SandboxAPIServicer interface { 
	SetPrimeTime(context.Context, SandboxPrimetime) (ImplResponse, error)
	SetRideStatus(context.Context, string, SandboxRideStatus) (ImplResponse, error)
	SetRideTypeAvailability(context.Context, string, SandboxDriverAvailability) (ImplResponse, error)
	SetRideTypes(context.Context, SandboxRideType) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	CancelRide(context.Context, string, CancellationRequest) (ImplResponse, error)
	GetProfile(context.Context) (ImplResponse, error)
	GetRide(context.Context, string) (ImplResponse, error)
	GetRideReceipt(context.Context, string) (ImplResponse, error)
	GetRides(context.Context, time.Time, time.Time, int32) (ImplResponse, error)
	NewRide(context.Context, Ride) (ImplResponse, error)
	SetRideDestination(context.Context, string, Location) (ImplResponse, error)
	SetRideRating(context.Context, string, RatingRequest) (ImplResponse, error)
}
