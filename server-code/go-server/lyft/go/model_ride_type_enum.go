/*
 * Lyft
 *
 * Drive your app to success with Lyft's API
 *
 * API version: 1.0.0
 * Contact: api-support@lyft.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// RideTypeEnum : The ID of the ride type
type RideTypeEnum string

// List of RideTypeEnum
const (
	LYFT RideTypeEnum = "lyft"
	LYFT_LINE RideTypeEnum = "lyft_line"
	LYFT_PLUS RideTypeEnum = "lyft_plus"
	LYFT_PREMIER RideTypeEnum = "lyft_premier"
	LYFT_LUX RideTypeEnum = "lyft_lux"
	LYFT_LUXSUV RideTypeEnum = "lyft_luxsuv"
)

// AllowedRideTypeEnumEnumValues is all the allowed values of RideTypeEnum enum
var AllowedRideTypeEnumEnumValues = []RideTypeEnum{
	"lyft",
	"lyft_line",
	"lyft_plus",
	"lyft_premier",
	"lyft_lux",
	"lyft_luxsuv",
}

// validRideTypeEnumEnumValue provides a map of RideTypeEnums for fast verification of use input
var validRideTypeEnumEnumValues = map[RideTypeEnum]struct{}{
	"lyft": {},
	"lyft_line": {},
	"lyft_plus": {},
	"lyft_premier": {},
	"lyft_lux": {},
	"lyft_luxsuv": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RideTypeEnum) IsValid() bool {
	_, ok := validRideTypeEnumEnumValues[v]
	return ok
}

// NewRideTypeEnumFromValue returns a pointer to a valid RideTypeEnum
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRideTypeEnumFromValue(v string) (RideTypeEnum, error) {
	ev := RideTypeEnum(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RideTypeEnum: valid values are %v", v, AllowedRideTypeEnumEnumValues)
	}
}



// AssertRideTypeEnumRequired checks if the required fields are not zero-ed
func AssertRideTypeEnumRequired(obj RideTypeEnum) error {
	return nil
}

// AssertRideTypeEnumConstraints checks if the values respects the defined constraints
func AssertRideTypeEnumConstraints(obj RideTypeEnum) error {
	return nil
}
