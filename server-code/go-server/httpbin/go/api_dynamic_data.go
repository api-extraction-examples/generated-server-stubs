/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DynamicDataAPIController binds http requests to an api service and writes the service results to the http response
type DynamicDataAPIController struct {
	service DynamicDataAPIServicer
	errorHandler ErrorHandler
}

// DynamicDataAPIOption for how the controller is set up.
type DynamicDataAPIOption func(*DynamicDataAPIController)

// WithDynamicDataAPIErrorHandler inject ErrorHandler into controller
func WithDynamicDataAPIErrorHandler(h ErrorHandler) DynamicDataAPIOption {
	return func(c *DynamicDataAPIController) {
		c.errorHandler = h
	}
}

// NewDynamicDataAPIController creates a default api controller
func NewDynamicDataAPIController(s DynamicDataAPIServicer, opts ...DynamicDataAPIOption) Router {
	controller := &DynamicDataAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DynamicDataAPIController
func (c *DynamicDataAPIController) Routes() Routes {
	return Routes{
		"Base64ValueGet": Route{
			strings.ToUpper("Get"),
			"/base64/{value}",
			c.Base64ValueGet,
		},
		"BytesNGet": Route{
			strings.ToUpper("Get"),
			"/bytes/{n}",
			c.BytesNGet,
		},
		"DelayDelayDelete": Route{
			strings.ToUpper("Delete"),
			"/delay/{delay}",
			c.DelayDelayDelete,
		},
		"DelayDelayGet": Route{
			strings.ToUpper("Get"),
			"/delay/{delay}",
			c.DelayDelayGet,
		},
		"DelayDelayPatch": Route{
			strings.ToUpper("Patch"),
			"/delay/{delay}",
			c.DelayDelayPatch,
		},
		"DelayDelayPost": Route{
			strings.ToUpper("Post"),
			"/delay/{delay}",
			c.DelayDelayPost,
		},
		"DelayDelayPut": Route{
			strings.ToUpper("Put"),
			"/delay/{delay}",
			c.DelayDelayPut,
		},
		"DelayDelayTrace": Route{
			strings.ToUpper("Trace"),
			"/delay/{delay}",
			c.DelayDelayTrace,
		},
		"DripGet": Route{
			strings.ToUpper("Get"),
			"/drip",
			c.DripGet,
		},
		"LinksNOffsetGet": Route{
			strings.ToUpper("Get"),
			"/links/{n}/{offset}",
			c.LinksNOffsetGet,
		},
		"RangeNumbytesGet": Route{
			strings.ToUpper("Get"),
			"/range/{numbytes}",
			c.RangeNumbytesGet,
		},
		"StreamBytesNGet": Route{
			strings.ToUpper("Get"),
			"/stream-bytes/{n}",
			c.StreamBytesNGet,
		},
		"StreamNGet": Route{
			strings.ToUpper("Get"),
			"/stream/{n}",
			c.StreamNGet,
		},
		"UuidGet": Route{
			strings.ToUpper("Get"),
			"/uuid",
			c.UuidGet,
		},
	}
}

// Base64ValueGet - Decodes base64url-encoded string.
func (c *DynamicDataAPIController) Base64ValueGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	valueParam := params["value"]
	if valueParam == "" {
		c.errorHandler(w, r, &RequiredError{"value"}, nil)
		return
	}
	result, err := c.service.Base64ValueGet(r.Context(), valueParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BytesNGet - Returns n random bytes generated with given seed
func (c *DynamicDataAPIController) BytesNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.BytesNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayDelete - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayDelete(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayGet - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayGet(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayPatch - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayPatch(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayPatch(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayPost - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayPost(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayPut - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayPut(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DelayDelayTrace - Returns a delayed response (max of 10 seconds).
func (c *DynamicDataAPIController) DelayDelayTrace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	delayParam, err := parseNumericParameter[int32](
		params["delay"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DelayDelayTrace(r.Context(), delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DripGet - Drips data over a duration after an optional initial delay.
func (c *DynamicDataAPIController) DripGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var durationParam float32
	if query.Has("duration") {
		param, err := parseNumericParameter[float32](
			query.Get("duration"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		durationParam = param
	} else {
		var param float32 = 2
		durationParam = param
	}
	var numbytesParam int32
	if query.Has("numbytes") {
		param, err := parseNumericParameter[int32](
			query.Get("numbytes"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		numbytesParam = param
	} else {
		var param int32 = 10
		numbytesParam = param
	}
	var codeParam int32
	if query.Has("code") {
		param, err := parseNumericParameter[int32](
			query.Get("code"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		codeParam = param
	} else {
		var param int32 = 200
		codeParam = param
	}
	var delayParam float32
	if query.Has("delay") {
		param, err := parseNumericParameter[float32](
			query.Get("delay"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		delayParam = param
	} else {
		var param float32 = 2
		delayParam = param
	}
	result, err := c.service.DripGet(r.Context(), durationParam, numbytesParam, codeParam, delayParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LinksNOffsetGet - Generate a page containing n links to other pages which do the same.
func (c *DynamicDataAPIController) LinksNOffsetGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	offsetParam, err := parseNumericParameter[int32](
		params["offset"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.LinksNOffsetGet(r.Context(), nParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RangeNumbytesGet - Streams n random bytes generated with given seed, at given chunk size per packet.
func (c *DynamicDataAPIController) RangeNumbytesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	numbytesParam, err := parseNumericParameter[int32](
		params["numbytes"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RangeNumbytesGet(r.Context(), numbytesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StreamBytesNGet - Streams n random bytes generated with given seed, at given chunk size per packet.
func (c *DynamicDataAPIController) StreamBytesNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.StreamBytesNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StreamNGet - Stream n JSON responses
func (c *DynamicDataAPIController) StreamNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.StreamNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UuidGet - Return a UUID4.
func (c *DynamicDataAPIController) UuidGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UuidGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
