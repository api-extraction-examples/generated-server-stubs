/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ResponseInspectionAPIController binds http requests to an api service and writes the service results to the http response
type ResponseInspectionAPIController struct {
	service ResponseInspectionAPIServicer
	errorHandler ErrorHandler
}

// ResponseInspectionAPIOption for how the controller is set up.
type ResponseInspectionAPIOption func(*ResponseInspectionAPIController)

// WithResponseInspectionAPIErrorHandler inject ErrorHandler into controller
func WithResponseInspectionAPIErrorHandler(h ErrorHandler) ResponseInspectionAPIOption {
	return func(c *ResponseInspectionAPIController) {
		c.errorHandler = h
	}
}

// NewResponseInspectionAPIController creates a default api controller
func NewResponseInspectionAPIController(s ResponseInspectionAPIServicer, opts ...ResponseInspectionAPIOption) Router {
	controller := &ResponseInspectionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ResponseInspectionAPIController
func (c *ResponseInspectionAPIController) Routes() Routes {
	return Routes{
		"CacheGet": Route{
			strings.ToUpper("Get"),
			"/cache",
			c.CacheGet,
		},
		"CacheValueGet": Route{
			strings.ToUpper("Get"),
			"/cache/{value}",
			c.CacheValueGet,
		},
		"EtagEtagGet": Route{
			strings.ToUpper("Get"),
			"/etag/{etag}",
			c.EtagEtagGet,
		},
		"ResponseHeadersGet": Route{
			strings.ToUpper("Get"),
			"/response-headers",
			c.ResponseHeadersGet,
		},
		"ResponseHeadersPost": Route{
			strings.ToUpper("Post"),
			"/response-headers",
			c.ResponseHeadersPost,
		},
	}
}

// CacheGet - Returns a 304 if an If-Modified-Since header or If-None-Match is present. Returns the same as a GET otherwise.
func (c *ResponseInspectionAPIController) CacheGet(w http.ResponseWriter, r *http.Request) {
	ifModifiedSinceParam := r.Header.Get("If-Modified-Since")
	ifNoneMatchParam := r.Header.Get("If-None-Match")
	result, err := c.service.CacheGet(r.Context(), ifModifiedSinceParam, ifNoneMatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CacheValueGet - Sets a Cache-Control header for n seconds.
func (c *ResponseInspectionAPIController) CacheValueGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	valueParam, err := parseNumericParameter[int32](
		params["value"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.CacheValueGet(r.Context(), valueParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EtagEtagGet - Assumes the resource has the given etag and responds to If-None-Match and If-Match headers appropriately.
func (c *ResponseInspectionAPIController) EtagEtagGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	etagParam := params["etag"]
	if etagParam == "" {
		c.errorHandler(w, r, &RequiredError{"etag"}, nil)
		return
	}
	ifNoneMatchParam := r.Header.Get("If-None-Match")
	ifMatchParam := r.Header.Get("If-Match")
	result, err := c.service.EtagEtagGet(r.Context(), etagParam, ifNoneMatchParam, ifMatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResponseHeadersGet - Returns a set of response headers from the query string.
func (c *ResponseInspectionAPIController) ResponseHeadersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var freeformParam map[string]string
	if query.Has("freeform") {
		param := map[string]string(query.Get("freeform"))

		freeformParam = param
	} else {
	}
	result, err := c.service.ResponseHeadersGet(r.Context(), freeformParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResponseHeadersPost - Returns a set of response headers from the query string.
func (c *ResponseInspectionAPIController) ResponseHeadersPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var freeformParam map[string]string
	if query.Has("freeform") {
		param := map[string]string(query.Get("freeform"))

		freeformParam = param
	} else {
	}
	result, err := c.service.ResponseHeadersPost(r.Context(), freeformParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
