/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ImagesAPIController binds http requests to an api service and writes the service results to the http response
type ImagesAPIController struct {
	service ImagesAPIServicer
	errorHandler ErrorHandler
}

// ImagesAPIOption for how the controller is set up.
type ImagesAPIOption func(*ImagesAPIController)

// WithImagesAPIErrorHandler inject ErrorHandler into controller
func WithImagesAPIErrorHandler(h ErrorHandler) ImagesAPIOption {
	return func(c *ImagesAPIController) {
		c.errorHandler = h
	}
}

// NewImagesAPIController creates a default api controller
func NewImagesAPIController(s ImagesAPIServicer, opts ...ImagesAPIOption) Router {
	controller := &ImagesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImagesAPIController
func (c *ImagesAPIController) Routes() Routes {
	return Routes{
		"ImageGet": Route{
			strings.ToUpper("Get"),
			"/image",
			c.ImageGet,
		},
		"ImageJpegGet": Route{
			strings.ToUpper("Get"),
			"/image/jpeg",
			c.ImageJpegGet,
		},
		"ImagePngGet": Route{
			strings.ToUpper("Get"),
			"/image/png",
			c.ImagePngGet,
		},
		"ImageSvgGet": Route{
			strings.ToUpper("Get"),
			"/image/svg",
			c.ImageSvgGet,
		},
		"ImageWebpGet": Route{
			strings.ToUpper("Get"),
			"/image/webp",
			c.ImageWebpGet,
		},
	}
}

// ImageGet - Returns a simple image of the type suggest by the Accept header.
func (c *ImagesAPIController) ImageGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImageGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageJpegGet - Returns a simple JPEG image.
func (c *ImagesAPIController) ImageJpegGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImageJpegGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImagePngGet - Returns a simple PNG image.
func (c *ImagesAPIController) ImagePngGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImagePngGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageSvgGet - Returns a simple SVG image.
func (c *ImagesAPIController) ImageSvgGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImageSvgGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageWebpGet - Returns a simple WEBP image.
func (c *ImagesAPIController) ImageWebpGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ImageWebpGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
