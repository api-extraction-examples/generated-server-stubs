/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RedirectsAPIController binds http requests to an api service and writes the service results to the http response
type RedirectsAPIController struct {
	service RedirectsAPIServicer
	errorHandler ErrorHandler
}

// RedirectsAPIOption for how the controller is set up.
type RedirectsAPIOption func(*RedirectsAPIController)

// WithRedirectsAPIErrorHandler inject ErrorHandler into controller
func WithRedirectsAPIErrorHandler(h ErrorHandler) RedirectsAPIOption {
	return func(c *RedirectsAPIController) {
		c.errorHandler = h
	}
}

// NewRedirectsAPIController creates a default api controller
func NewRedirectsAPIController(s RedirectsAPIServicer, opts ...RedirectsAPIOption) Router {
	controller := &RedirectsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RedirectsAPIController
func (c *RedirectsAPIController) Routes() Routes {
	return Routes{
		"AbsoluteRedirectNGet": Route{
			strings.ToUpper("Get"),
			"/absolute-redirect/{n}",
			c.AbsoluteRedirectNGet,
		},
		"RedirectNGet": Route{
			strings.ToUpper("Get"),
			"/redirect/{n}",
			c.RedirectNGet,
		},
		"RedirectToDelete": Route{
			strings.ToUpper("Delete"),
			"/redirect-to",
			c.RedirectToDelete,
		},
		"RedirectToGet": Route{
			strings.ToUpper("Get"),
			"/redirect-to",
			c.RedirectToGet,
		},
		"RedirectToPatch": Route{
			strings.ToUpper("Patch"),
			"/redirect-to",
			c.RedirectToPatch,
		},
		"RedirectToPost": Route{
			strings.ToUpper("Post"),
			"/redirect-to",
			c.RedirectToPost,
		},
		"RedirectToPut": Route{
			strings.ToUpper("Put"),
			"/redirect-to",
			c.RedirectToPut,
		},
		"RedirectToTrace": Route{
			strings.ToUpper("Trace"),
			"/redirect-to",
			c.RedirectToTrace,
		},
		"RelativeRedirectNGet": Route{
			strings.ToUpper("Get"),
			"/relative-redirect/{n}",
			c.RelativeRedirectNGet,
		},
	}
}

// AbsoluteRedirectNGet - Absolutely 302 Redirects n times.
func (c *RedirectsAPIController) AbsoluteRedirectNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AbsoluteRedirectNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectNGet - 302 Redirects n times.
func (c *RedirectsAPIController) RedirectNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RedirectNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToDelete - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedirectToDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToGet - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var urlParam string
	if query.Has("url") {
		param := query.Get("url")

		urlParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "url"}, nil)
		return
	}
	var statusCodeParam int32
	if query.Has("status_code") {
		param, err := parseNumericParameter[int32](
			query.Get("status_code"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		statusCodeParam = param
	} else {
	}
	result, err := c.service.RedirectToGet(r.Context(), urlParam, statusCodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToPatch - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToPatch(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedirectToPatch(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToPost - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToPost(w http.ResponseWriter, r *http.Request) {
	redirectToPutRequestParam := RedirectToPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedirectToPutRequestRequired(redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRedirectToPutRequestConstraints(redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedirectToPost(r.Context(), redirectToPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToPut - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToPut(w http.ResponseWriter, r *http.Request) {
	redirectToPutRequestParam := RedirectToPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRedirectToPutRequestRequired(redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRedirectToPutRequestConstraints(redirectToPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RedirectToPut(r.Context(), redirectToPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RedirectToTrace - 302/3XX Redirects to the given URL.
func (c *RedirectsAPIController) RedirectToTrace(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RedirectToTrace(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RelativeRedirectNGet - Relatively 302 Redirects n times.
func (c *RedirectsAPIController) RelativeRedirectNGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nParam, err := parseNumericParameter[int32](
		params["n"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RelativeRedirectNGet(r.Context(), nParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
