/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// AnythingAPIRouter defines the required methods for binding the api requests to a responses for the AnythingAPI
// The AnythingAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AnythingAPIServicer to perform the required actions, then write the service results to the http response.
type AnythingAPIRouter interface { 
	AnythingAnythingDelete(http.ResponseWriter, *http.Request)
	AnythingAnythingGet(http.ResponseWriter, *http.Request)
	AnythingAnythingPatch(http.ResponseWriter, *http.Request)
	AnythingAnythingPost(http.ResponseWriter, *http.Request)
	AnythingAnythingPut(http.ResponseWriter, *http.Request)
	AnythingAnythingTrace(http.ResponseWriter, *http.Request)
	AnythingDelete(http.ResponseWriter, *http.Request)
	AnythingGet(http.ResponseWriter, *http.Request)
	AnythingPatch(http.ResponseWriter, *http.Request)
	AnythingPost(http.ResponseWriter, *http.Request)
	AnythingPut(http.ResponseWriter, *http.Request)
	AnythingTrace(http.ResponseWriter, *http.Request)
}
// AuthAPIRouter defines the required methods for binding the api requests to a responses for the AuthAPI
// The AuthAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuthAPIServicer to perform the required actions, then write the service results to the http response.
type AuthAPIRouter interface { 
	BasicAuthUserPasswdGet(http.ResponseWriter, *http.Request)
	BearerGet(http.ResponseWriter, *http.Request)
	DigestAuthQopUserPasswdAlgorithmGet(http.ResponseWriter, *http.Request)
	DigestAuthQopUserPasswdAlgorithmStaleAfterGet(http.ResponseWriter, *http.Request)
	DigestAuthQopUserPasswdGet(http.ResponseWriter, *http.Request)
	HiddenBasicAuthUserPasswdGet(http.ResponseWriter, *http.Request)
}
// CookiesAPIRouter defines the required methods for binding the api requests to a responses for the CookiesAPI
// The CookiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CookiesAPIServicer to perform the required actions, then write the service results to the http response.
type CookiesAPIRouter interface { 
	CookiesDeleteGet(http.ResponseWriter, *http.Request)
	CookiesGet(http.ResponseWriter, *http.Request)
	CookiesSetGet(http.ResponseWriter, *http.Request)
	CookiesSetNameValueGet(http.ResponseWriter, *http.Request)
}
// DynamicDataAPIRouter defines the required methods for binding the api requests to a responses for the DynamicDataAPI
// The DynamicDataAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DynamicDataAPIServicer to perform the required actions, then write the service results to the http response.
type DynamicDataAPIRouter interface { 
	Base64ValueGet(http.ResponseWriter, *http.Request)
	BytesNGet(http.ResponseWriter, *http.Request)
	DelayDelayDelete(http.ResponseWriter, *http.Request)
	DelayDelayGet(http.ResponseWriter, *http.Request)
	DelayDelayPatch(http.ResponseWriter, *http.Request)
	DelayDelayPost(http.ResponseWriter, *http.Request)
	DelayDelayPut(http.ResponseWriter, *http.Request)
	DelayDelayTrace(http.ResponseWriter, *http.Request)
	DripGet(http.ResponseWriter, *http.Request)
	LinksNOffsetGet(http.ResponseWriter, *http.Request)
	RangeNumbytesGet(http.ResponseWriter, *http.Request)
	StreamBytesNGet(http.ResponseWriter, *http.Request)
	StreamNGet(http.ResponseWriter, *http.Request)
	UuidGet(http.ResponseWriter, *http.Request)
}
// HTTPMethodsAPIRouter defines the required methods for binding the api requests to a responses for the HTTPMethodsAPI
// The HTTPMethodsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HTTPMethodsAPIServicer to perform the required actions, then write the service results to the http response.
type HTTPMethodsAPIRouter interface { 
	DeleteDelete(http.ResponseWriter, *http.Request)
	GetGet(http.ResponseWriter, *http.Request)
	PatchPatch(http.ResponseWriter, *http.Request)
	PostPost(http.ResponseWriter, *http.Request)
	PutPut(http.ResponseWriter, *http.Request)
}
// ImagesAPIRouter defines the required methods for binding the api requests to a responses for the ImagesAPI
// The ImagesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ImagesAPIServicer to perform the required actions, then write the service results to the http response.
type ImagesAPIRouter interface { 
	ImageGet(http.ResponseWriter, *http.Request)
	ImageJpegGet(http.ResponseWriter, *http.Request)
	ImagePngGet(http.ResponseWriter, *http.Request)
	ImageSvgGet(http.ResponseWriter, *http.Request)
	ImageWebpGet(http.ResponseWriter, *http.Request)
}
// RedirectsAPIRouter defines the required methods for binding the api requests to a responses for the RedirectsAPI
// The RedirectsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RedirectsAPIServicer to perform the required actions, then write the service results to the http response.
type RedirectsAPIRouter interface { 
	AbsoluteRedirectNGet(http.ResponseWriter, *http.Request)
	RedirectNGet(http.ResponseWriter, *http.Request)
	RedirectToDelete(http.ResponseWriter, *http.Request)
	RedirectToGet(http.ResponseWriter, *http.Request)
	RedirectToPatch(http.ResponseWriter, *http.Request)
	RedirectToPost(http.ResponseWriter, *http.Request)
	RedirectToPut(http.ResponseWriter, *http.Request)
	RedirectToTrace(http.ResponseWriter, *http.Request)
	RelativeRedirectNGet(http.ResponseWriter, *http.Request)
}
// RequestInspectionAPIRouter defines the required methods for binding the api requests to a responses for the RequestInspectionAPI
// The RequestInspectionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RequestInspectionAPIServicer to perform the required actions, then write the service results to the http response.
type RequestInspectionAPIRouter interface { 
	HeadersGet(http.ResponseWriter, *http.Request)
	IpGet(http.ResponseWriter, *http.Request)
	UserAgentGet(http.ResponseWriter, *http.Request)
}
// ResponseFormatsAPIRouter defines the required methods for binding the api requests to a responses for the ResponseFormatsAPI
// The ResponseFormatsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ResponseFormatsAPIServicer to perform the required actions, then write the service results to the http response.
type ResponseFormatsAPIRouter interface { 
	BrotliGet(http.ResponseWriter, *http.Request)
	DeflateGet(http.ResponseWriter, *http.Request)
	DenyGet(http.ResponseWriter, *http.Request)
	EncodingUtf8Get(http.ResponseWriter, *http.Request)
	GzipGet(http.ResponseWriter, *http.Request)
	HtmlGet(http.ResponseWriter, *http.Request)
	JsonGet(http.ResponseWriter, *http.Request)
	RobotsTxtGet(http.ResponseWriter, *http.Request)
	XmlGet(http.ResponseWriter, *http.Request)
}
// ResponseInspectionAPIRouter defines the required methods for binding the api requests to a responses for the ResponseInspectionAPI
// The ResponseInspectionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ResponseInspectionAPIServicer to perform the required actions, then write the service results to the http response.
type ResponseInspectionAPIRouter interface { 
	CacheGet(http.ResponseWriter, *http.Request)
	CacheValueGet(http.ResponseWriter, *http.Request)
	EtagEtagGet(http.ResponseWriter, *http.Request)
	ResponseHeadersGet(http.ResponseWriter, *http.Request)
	ResponseHeadersPost(http.ResponseWriter, *http.Request)
}
// StatusCodesAPIRouter defines the required methods for binding the api requests to a responses for the StatusCodesAPI
// The StatusCodesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusCodesAPIServicer to perform the required actions, then write the service results to the http response.
type StatusCodesAPIRouter interface { 
	StatusCodesDelete(http.ResponseWriter, *http.Request)
	StatusCodesGet(http.ResponseWriter, *http.Request)
	StatusCodesPatch(http.ResponseWriter, *http.Request)
	StatusCodesPost(http.ResponseWriter, *http.Request)
	StatusCodesPut(http.ResponseWriter, *http.Request)
	StatusCodesTrace(http.ResponseWriter, *http.Request)
}


// AnythingAPIServicer defines the api actions for the AnythingAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AnythingAPIServicer interface { 
	AnythingAnythingDelete(context.Context, string) (ImplResponse, error)
	AnythingAnythingGet(context.Context, string) (ImplResponse, error)
	AnythingAnythingPatch(context.Context, string) (ImplResponse, error)
	AnythingAnythingPost(context.Context, string) (ImplResponse, error)
	AnythingAnythingPut(context.Context, string) (ImplResponse, error)
	AnythingAnythingTrace(context.Context, string) (ImplResponse, error)
	AnythingDelete(context.Context) (ImplResponse, error)
	AnythingGet(context.Context) (ImplResponse, error)
	AnythingPatch(context.Context) (ImplResponse, error)
	AnythingPost(context.Context) (ImplResponse, error)
	AnythingPut(context.Context) (ImplResponse, error)
	AnythingTrace(context.Context) (ImplResponse, error)
}


// AuthAPIServicer defines the api actions for the AuthAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuthAPIServicer interface { 
	BasicAuthUserPasswdGet(context.Context, string, string) (ImplResponse, error)
	BearerGet(context.Context, string) (ImplResponse, error)
	DigestAuthQopUserPasswdAlgorithmGet(context.Context, string, string, string, string) (ImplResponse, error)
	DigestAuthQopUserPasswdAlgorithmStaleAfterGet(context.Context, string, string, string, string, string) (ImplResponse, error)
	DigestAuthQopUserPasswdGet(context.Context, string, string, string) (ImplResponse, error)
	HiddenBasicAuthUserPasswdGet(context.Context, string, string) (ImplResponse, error)
}


// CookiesAPIServicer defines the api actions for the CookiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CookiesAPIServicer interface { 
	CookiesDeleteGet(context.Context, map[string]string) (ImplResponse, error)
	CookiesGet(context.Context) (ImplResponse, error)
	CookiesSetGet(context.Context, map[string]string) (ImplResponse, error)
	CookiesSetNameValueGet(context.Context, string, string) (ImplResponse, error)
}


// DynamicDataAPIServicer defines the api actions for the DynamicDataAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DynamicDataAPIServicer interface { 
	Base64ValueGet(context.Context, string) (ImplResponse, error)
	BytesNGet(context.Context, int32) (ImplResponse, error)
	DelayDelayDelete(context.Context, int32) (ImplResponse, error)
	DelayDelayGet(context.Context, int32) (ImplResponse, error)
	DelayDelayPatch(context.Context, int32) (ImplResponse, error)
	DelayDelayPost(context.Context, int32) (ImplResponse, error)
	DelayDelayPut(context.Context, int32) (ImplResponse, error)
	DelayDelayTrace(context.Context, int32) (ImplResponse, error)
	DripGet(context.Context, float32, int32, int32, float32) (ImplResponse, error)
	LinksNOffsetGet(context.Context, int32, int32) (ImplResponse, error)
	RangeNumbytesGet(context.Context, int32) (ImplResponse, error)
	StreamBytesNGet(context.Context, int32) (ImplResponse, error)
	StreamNGet(context.Context, int32) (ImplResponse, error)
	UuidGet(context.Context) (ImplResponse, error)
}


// HTTPMethodsAPIServicer defines the api actions for the HTTPMethodsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HTTPMethodsAPIServicer interface { 
	DeleteDelete(context.Context) (ImplResponse, error)
	GetGet(context.Context) (ImplResponse, error)
	PatchPatch(context.Context) (ImplResponse, error)
	PostPost(context.Context) (ImplResponse, error)
	PutPut(context.Context) (ImplResponse, error)
}


// ImagesAPIServicer defines the api actions for the ImagesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ImagesAPIServicer interface { 
	ImageGet(context.Context) (ImplResponse, error)
	ImageJpegGet(context.Context) (ImplResponse, error)
	ImagePngGet(context.Context) (ImplResponse, error)
	ImageSvgGet(context.Context) (ImplResponse, error)
	ImageWebpGet(context.Context) (ImplResponse, error)
}


// RedirectsAPIServicer defines the api actions for the RedirectsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RedirectsAPIServicer interface { 
	AbsoluteRedirectNGet(context.Context, int32) (ImplResponse, error)
	RedirectNGet(context.Context, int32) (ImplResponse, error)
	RedirectToDelete(context.Context) (ImplResponse, error)
	RedirectToGet(context.Context, string, int32) (ImplResponse, error)
	RedirectToPatch(context.Context) (ImplResponse, error)
	RedirectToPost(context.Context, RedirectToPutRequest) (ImplResponse, error)
	RedirectToPut(context.Context, RedirectToPutRequest) (ImplResponse, error)
	RedirectToTrace(context.Context) (ImplResponse, error)
	RelativeRedirectNGet(context.Context, int32) (ImplResponse, error)
}


// RequestInspectionAPIServicer defines the api actions for the RequestInspectionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RequestInspectionAPIServicer interface { 
	HeadersGet(context.Context) (ImplResponse, error)
	IpGet(context.Context) (ImplResponse, error)
	UserAgentGet(context.Context) (ImplResponse, error)
}


// ResponseFormatsAPIServicer defines the api actions for the ResponseFormatsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ResponseFormatsAPIServicer interface { 
	BrotliGet(context.Context) (ImplResponse, error)
	DeflateGet(context.Context) (ImplResponse, error)
	DenyGet(context.Context) (ImplResponse, error)
	EncodingUtf8Get(context.Context) (ImplResponse, error)
	GzipGet(context.Context) (ImplResponse, error)
	HtmlGet(context.Context) (ImplResponse, error)
	JsonGet(context.Context) (ImplResponse, error)
	RobotsTxtGet(context.Context) (ImplResponse, error)
	XmlGet(context.Context) (ImplResponse, error)
}


// ResponseInspectionAPIServicer defines the api actions for the ResponseInspectionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ResponseInspectionAPIServicer interface { 
	CacheGet(context.Context, string, string) (ImplResponse, error)
	CacheValueGet(context.Context, int32) (ImplResponse, error)
	EtagEtagGet(context.Context, string, string, string) (ImplResponse, error)
	ResponseHeadersGet(context.Context, map[string]string) (ImplResponse, error)
	ResponseHeadersPost(context.Context, map[string]string) (ImplResponse, error)
}


// StatusCodesAPIServicer defines the api actions for the StatusCodesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusCodesAPIServicer interface { 
	StatusCodesDelete(context.Context, string) (ImplResponse, error)
	StatusCodesGet(context.Context, string) (ImplResponse, error)
	StatusCodesPatch(context.Context, string) (ImplResponse, error)
	StatusCodesPost(context.Context, string) (ImplResponse, error)
	StatusCodesPut(context.Context, string) (ImplResponse, error)
	StatusCodesTrace(context.Context, string) (ImplResponse, error)
}
