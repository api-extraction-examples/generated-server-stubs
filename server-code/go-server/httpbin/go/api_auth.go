/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AuthAPIController binds http requests to an api service and writes the service results to the http response
type AuthAPIController struct {
	service AuthAPIServicer
	errorHandler ErrorHandler
}

// AuthAPIOption for how the controller is set up.
type AuthAPIOption func(*AuthAPIController)

// WithAuthAPIErrorHandler inject ErrorHandler into controller
func WithAuthAPIErrorHandler(h ErrorHandler) AuthAPIOption {
	return func(c *AuthAPIController) {
		c.errorHandler = h
	}
}

// NewAuthAPIController creates a default api controller
func NewAuthAPIController(s AuthAPIServicer, opts ...AuthAPIOption) Router {
	controller := &AuthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuthAPIController
func (c *AuthAPIController) Routes() Routes {
	return Routes{
		"BasicAuthUserPasswdGet": Route{
			strings.ToUpper("Get"),
			"/basic-auth/{user}/{passwd}",
			c.BasicAuthUserPasswdGet,
		},
		"BearerGet": Route{
			strings.ToUpper("Get"),
			"/bearer",
			c.BearerGet,
		},
		"DigestAuthQopUserPasswdAlgorithmGet": Route{
			strings.ToUpper("Get"),
			"/digest-auth/{qop}/{user}/{passwd}/{algorithm}",
			c.DigestAuthQopUserPasswdAlgorithmGet,
		},
		"DigestAuthQopUserPasswdAlgorithmStaleAfterGet": Route{
			strings.ToUpper("Get"),
			"/digest-auth/{qop}/{user}/{passwd}/{algorithm}/{stale_after}",
			c.DigestAuthQopUserPasswdAlgorithmStaleAfterGet,
		},
		"DigestAuthQopUserPasswdGet": Route{
			strings.ToUpper("Get"),
			"/digest-auth/{qop}/{user}/{passwd}",
			c.DigestAuthQopUserPasswdGet,
		},
		"HiddenBasicAuthUserPasswdGet": Route{
			strings.ToUpper("Get"),
			"/hidden-basic-auth/{user}/{passwd}",
			c.HiddenBasicAuthUserPasswdGet,
		},
	}
}

// BasicAuthUserPasswdGet - Prompts the user for authorization using HTTP Basic Auth.
func (c *AuthAPIController) BasicAuthUserPasswdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	passwdParam := params["passwd"]
	if passwdParam == "" {
		c.errorHandler(w, r, &RequiredError{"passwd"}, nil)
		return
	}
	result, err := c.service.BasicAuthUserPasswdGet(r.Context(), userParam, passwdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BearerGet - Prompts the user for authorization using bearer authentication.
func (c *AuthAPIController) BearerGet(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	result, err := c.service.BearerGet(r.Context(), authorizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DigestAuthQopUserPasswdAlgorithmGet - Prompts the user for authorization using Digest Auth + Algorithm.
func (c *AuthAPIController) DigestAuthQopUserPasswdAlgorithmGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	qopParam := params["qop"]
	if qopParam == "" {
		c.errorHandler(w, r, &RequiredError{"qop"}, nil)
		return
	}
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	passwdParam := params["passwd"]
	if passwdParam == "" {
		c.errorHandler(w, r, &RequiredError{"passwd"}, nil)
		return
	}
	algorithmParam := params["algorithm"]
	if algorithmParam == "" {
		c.errorHandler(w, r, &RequiredError{"algorithm"}, nil)
		return
	}
	result, err := c.service.DigestAuthQopUserPasswdAlgorithmGet(r.Context(), qopParam, userParam, passwdParam, algorithmParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DigestAuthQopUserPasswdAlgorithmStaleAfterGet - Prompts the user for authorization using Digest Auth + Algorithm.
func (c *AuthAPIController) DigestAuthQopUserPasswdAlgorithmStaleAfterGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	qopParam := params["qop"]
	if qopParam == "" {
		c.errorHandler(w, r, &RequiredError{"qop"}, nil)
		return
	}
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	passwdParam := params["passwd"]
	if passwdParam == "" {
		c.errorHandler(w, r, &RequiredError{"passwd"}, nil)
		return
	}
	algorithmParam := params["algorithm"]
	if algorithmParam == "" {
		c.errorHandler(w, r, &RequiredError{"algorithm"}, nil)
		return
	}
	staleAfterParam := params["stale_after"]
	if staleAfterParam == "" {
		c.errorHandler(w, r, &RequiredError{"stale_after"}, nil)
		return
	}
	result, err := c.service.DigestAuthQopUserPasswdAlgorithmStaleAfterGet(r.Context(), qopParam, userParam, passwdParam, algorithmParam, staleAfterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DigestAuthQopUserPasswdGet - Prompts the user for authorization using Digest Auth.
func (c *AuthAPIController) DigestAuthQopUserPasswdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	qopParam := params["qop"]
	if qopParam == "" {
		c.errorHandler(w, r, &RequiredError{"qop"}, nil)
		return
	}
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	passwdParam := params["passwd"]
	if passwdParam == "" {
		c.errorHandler(w, r, &RequiredError{"passwd"}, nil)
		return
	}
	result, err := c.service.DigestAuthQopUserPasswdGet(r.Context(), qopParam, userParam, passwdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HiddenBasicAuthUserPasswdGet - Prompts the user for authorization using HTTP Basic Auth.
func (c *AuthAPIController) HiddenBasicAuthUserPasswdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userParam := params["user"]
	if userParam == "" {
		c.errorHandler(w, r, &RequiredError{"user"}, nil)
		return
	}
	passwdParam := params["passwd"]
	if passwdParam == "" {
		c.errorHandler(w, r, &RequiredError{"passwd"}, nil)
		return
	}
	result, err := c.service.HiddenBasicAuthUserPasswdGet(r.Context(), userParam, passwdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
