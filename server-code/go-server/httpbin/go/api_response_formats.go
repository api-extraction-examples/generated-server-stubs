/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ResponseFormatsAPIController binds http requests to an api service and writes the service results to the http response
type ResponseFormatsAPIController struct {
	service ResponseFormatsAPIServicer
	errorHandler ErrorHandler
}

// ResponseFormatsAPIOption for how the controller is set up.
type ResponseFormatsAPIOption func(*ResponseFormatsAPIController)

// WithResponseFormatsAPIErrorHandler inject ErrorHandler into controller
func WithResponseFormatsAPIErrorHandler(h ErrorHandler) ResponseFormatsAPIOption {
	return func(c *ResponseFormatsAPIController) {
		c.errorHandler = h
	}
}

// NewResponseFormatsAPIController creates a default api controller
func NewResponseFormatsAPIController(s ResponseFormatsAPIServicer, opts ...ResponseFormatsAPIOption) Router {
	controller := &ResponseFormatsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ResponseFormatsAPIController
func (c *ResponseFormatsAPIController) Routes() Routes {
	return Routes{
		"BrotliGet": Route{
			strings.ToUpper("Get"),
			"/brotli",
			c.BrotliGet,
		},
		"DeflateGet": Route{
			strings.ToUpper("Get"),
			"/deflate",
			c.DeflateGet,
		},
		"DenyGet": Route{
			strings.ToUpper("Get"),
			"/deny",
			c.DenyGet,
		},
		"EncodingUtf8Get": Route{
			strings.ToUpper("Get"),
			"/encoding/utf8",
			c.EncodingUtf8Get,
		},
		"GzipGet": Route{
			strings.ToUpper("Get"),
			"/gzip",
			c.GzipGet,
		},
		"HtmlGet": Route{
			strings.ToUpper("Get"),
			"/html",
			c.HtmlGet,
		},
		"JsonGet": Route{
			strings.ToUpper("Get"),
			"/json",
			c.JsonGet,
		},
		"RobotsTxtGet": Route{
			strings.ToUpper("Get"),
			"/robots.txt",
			c.RobotsTxtGet,
		},
		"XmlGet": Route{
			strings.ToUpper("Get"),
			"/xml",
			c.XmlGet,
		},
	}
}

// BrotliGet - Returns Brotli-encoded data.
func (c *ResponseFormatsAPIController) BrotliGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BrotliGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeflateGet - Returns Deflate-encoded data.
func (c *ResponseFormatsAPIController) DeflateGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DeflateGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DenyGet - Returns page denied by robots.txt rules.
func (c *ResponseFormatsAPIController) DenyGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DenyGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EncodingUtf8Get - Returns a UTF-8 encoded body.
func (c *ResponseFormatsAPIController) EncodingUtf8Get(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.EncodingUtf8Get(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GzipGet - Returns GZip-encoded data.
func (c *ResponseFormatsAPIController) GzipGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GzipGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HtmlGet - Returns a simple HTML document.
func (c *ResponseFormatsAPIController) HtmlGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.HtmlGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// JsonGet - Returns a simple JSON document.
func (c *ResponseFormatsAPIController) JsonGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.JsonGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RobotsTxtGet - Returns some robots.txt rules.
func (c *ResponseFormatsAPIController) RobotsTxtGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RobotsTxtGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// XmlGet - Returns a simple XML document.
func (c *ResponseFormatsAPIController) XmlGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.XmlGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
