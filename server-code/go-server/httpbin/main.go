/*
 * httpbin.org
 *
 * A simple HTTP Request & Response Service.<br/> <br/> <b>Run locally: </b> <code>$ docker run -p 80:80 kennethreitz/httpbin</code>
 *
 * API version: 0.9.2
 * Contact: me@kennethreitz.org
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"log"
	"net/http"

	openapi "github.com/GIT_USER_ID/GIT_REPO_ID/go"
)

func main() {
	log.Printf("Server started")

	AnythingAPIService := openapi.NewAnythingAPIService()
	AnythingAPIController := openapi.NewAnythingAPIController(AnythingAPIService)

	AuthAPIService := openapi.NewAuthAPIService()
	AuthAPIController := openapi.NewAuthAPIController(AuthAPIService)

	CookiesAPIService := openapi.NewCookiesAPIService()
	CookiesAPIController := openapi.NewCookiesAPIController(CookiesAPIService)

	DynamicDataAPIService := openapi.NewDynamicDataAPIService()
	DynamicDataAPIController := openapi.NewDynamicDataAPIController(DynamicDataAPIService)

	HTTPMethodsAPIService := openapi.NewHTTPMethodsAPIService()
	HTTPMethodsAPIController := openapi.NewHTTPMethodsAPIController(HTTPMethodsAPIService)

	ImagesAPIService := openapi.NewImagesAPIService()
	ImagesAPIController := openapi.NewImagesAPIController(ImagesAPIService)

	RedirectsAPIService := openapi.NewRedirectsAPIService()
	RedirectsAPIController := openapi.NewRedirectsAPIController(RedirectsAPIService)

	RequestInspectionAPIService := openapi.NewRequestInspectionAPIService()
	RequestInspectionAPIController := openapi.NewRequestInspectionAPIController(RequestInspectionAPIService)

	ResponseFormatsAPIService := openapi.NewResponseFormatsAPIService()
	ResponseFormatsAPIController := openapi.NewResponseFormatsAPIController(ResponseFormatsAPIService)

	ResponseInspectionAPIService := openapi.NewResponseInspectionAPIService()
	ResponseInspectionAPIController := openapi.NewResponseInspectionAPIController(ResponseInspectionAPIService)

	StatusCodesAPIService := openapi.NewStatusCodesAPIService()
	StatusCodesAPIController := openapi.NewStatusCodesAPIController(StatusCodesAPIService)

	router := openapi.NewRouter(AnythingAPIController, AuthAPIController, CookiesAPIController, DynamicDataAPIController, HTTPMethodsAPIController, ImagesAPIController, RedirectsAPIController, RequestInspectionAPIController, ResponseFormatsAPIController, ResponseInspectionAPIController, StatusCodesAPIController)

	log.Fatal(http.ListenAndServe(":8080", router))
}
