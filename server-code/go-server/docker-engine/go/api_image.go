/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * API version: 1.33
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// ImageAPIController binds http requests to an api service and writes the service results to the http response
type ImageAPIController struct {
	service ImageAPIServicer
	errorHandler ErrorHandler
}

// ImageAPIOption for how the controller is set up.
type ImageAPIOption func(*ImageAPIController)

// WithImageAPIErrorHandler inject ErrorHandler into controller
func WithImageAPIErrorHandler(h ErrorHandler) ImageAPIOption {
	return func(c *ImageAPIController) {
		c.errorHandler = h
	}
}

// NewImageAPIController creates a default api controller
func NewImageAPIController(s ImageAPIServicer, opts ...ImageAPIOption) Router {
	controller := &ImageAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImageAPIController
func (c *ImageAPIController) Routes() Routes {
	return Routes{
		"BuildPrune": Route{
			strings.ToUpper("Post"),
			"/v1.33/build/prune",
			c.BuildPrune,
		},
		"ImageBuild": Route{
			strings.ToUpper("Post"),
			"/v1.33/build",
			c.ImageBuild,
		},
		"ImageCommit": Route{
			strings.ToUpper("Post"),
			"/v1.33/commit",
			c.ImageCommit,
		},
		"ImageCreate": Route{
			strings.ToUpper("Post"),
			"/v1.33/images/create",
			c.ImageCreate,
		},
		"ImageDelete": Route{
			strings.ToUpper("Delete"),
			"/v1.33/images/{name}",
			c.ImageDelete,
		},
		"ImageGet": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/{name}/get",
			c.ImageGet,
		},
		"ImageGetAll": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/get",
			c.ImageGetAll,
		},
		"ImageHistory": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/{name}/history",
			c.ImageHistory,
		},
		"ImageInspect": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/{name}/json",
			c.ImageInspect,
		},
		"ImageList": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/json",
			c.ImageList,
		},
		"ImageLoad": Route{
			strings.ToUpper("Post"),
			"/v1.33/images/load",
			c.ImageLoad,
		},
		"ImagePrune": Route{
			strings.ToUpper("Post"),
			"/v1.33/images/prune",
			c.ImagePrune,
		},
		"ImagePush": Route{
			strings.ToUpper("Post"),
			"/v1.33/images/{name}/push",
			c.ImagePush,
		},
		"ImageSearch": Route{
			strings.ToUpper("Get"),
			"/v1.33/images/search",
			c.ImageSearch,
		},
		"ImageTag": Route{
			strings.ToUpper("Post"),
			"/v1.33/images/{name}/tag",
			c.ImageTag,
		},
	}
}

// BuildPrune - Delete builder cache
func (c *ImageAPIController) BuildPrune(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildPrune(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageBuild - Build an image
func (c *ImageAPIController) ImageBuild(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dockerfileParam string
	if query.Has("dockerfile") {
		param := query.Get("dockerfile")

		dockerfileParam = param
	} else {
		param := Dockerfile
		dockerfileParam = param
	}
	var tParam string
	if query.Has("t") {
		param := query.Get("t")

		tParam = param
	} else {
	}
	var extrahostsParam string
	if query.Has("extrahosts") {
		param := query.Get("extrahosts")

		extrahostsParam = param
	} else {
	}
	var remoteParam string
	if query.Has("remote") {
		param := query.Get("remote")

		remoteParam = param
	} else {
	}
	var qParam bool
	if query.Has("q") {
		param, err := parseBoolParameter(
			query.Get("q"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qParam = param
	} else {
		var param bool = false
		qParam = param
	}
	var nocacheParam bool
	if query.Has("nocache") {
		param, err := parseBoolParameter(
			query.Get("nocache"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		nocacheParam = param
	} else {
		var param bool = false
		nocacheParam = param
	}
	var cachefromParam string
	if query.Has("cachefrom") {
		param := query.Get("cachefrom")

		cachefromParam = param
	} else {
	}
	var pullParam string
	if query.Has("pull") {
		param := query.Get("pull")

		pullParam = param
	} else {
	}
	var rmParam bool
	if query.Has("rm") {
		param, err := parseBoolParameter(
			query.Get("rm"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		rmParam = param
	} else {
		var param bool = true
		rmParam = param
	}
	var forcermParam bool
	if query.Has("forcerm") {
		param, err := parseBoolParameter(
			query.Get("forcerm"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		forcermParam = param
	} else {
		var param bool = false
		forcermParam = param
	}
	var memoryParam int32
	if query.Has("memory") {
		param, err := parseNumericParameter[int32](
			query.Get("memory"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		memoryParam = param
	} else {
	}
	var memswapParam int32
	if query.Has("memswap") {
		param, err := parseNumericParameter[int32](
			query.Get("memswap"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		memswapParam = param
	} else {
	}
	var cpusharesParam int32
	if query.Has("cpushares") {
		param, err := parseNumericParameter[int32](
			query.Get("cpushares"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpusharesParam = param
	} else {
	}
	var cpusetcpusParam string
	if query.Has("cpusetcpus") {
		param := query.Get("cpusetcpus")

		cpusetcpusParam = param
	} else {
	}
	var cpuperiodParam int32
	if query.Has("cpuperiod") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuperiod"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuperiodParam = param
	} else {
	}
	var cpuquotaParam int32
	if query.Has("cpuquota") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuquota"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuquotaParam = param
	} else {
	}
	var buildargsParam int32
	if query.Has("buildargs") {
		param, err := parseNumericParameter[int32](
			query.Get("buildargs"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		buildargsParam = param
	} else {
	}
	var shmsizeParam int32
	if query.Has("shmsize") {
		param, err := parseNumericParameter[int32](
			query.Get("shmsize"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		shmsizeParam = param
	} else {
	}
	var squashParam bool
	if query.Has("squash") {
		param, err := parseBoolParameter(
			query.Get("squash"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		squashParam = param
	} else {
	}
	var labelsParam string
	if query.Has("labels") {
		param := query.Get("labels")

		labelsParam = param
	} else {
	}
	var networkmodeParam string
	if query.Has("networkmode") {
		param := query.Get("networkmode")

		networkmodeParam = param
	} else {
	}
	contentTypeParam := r.Header.Get("Content-type")
	xRegistryConfigParam := r.Header.Get("X-Registry-Config")
	bodyParam := *os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ImageBuild(r.Context(), dockerfileParam, tParam, extrahostsParam, remoteParam, qParam, nocacheParam, cachefromParam, pullParam, rmParam, forcermParam, memoryParam, memswapParam, cpusharesParam, cpusetcpusParam, cpuperiodParam, cpuquotaParam, buildargsParam, shmsizeParam, squashParam, labelsParam, networkmodeParam, contentTypeParam, xRegistryConfigParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageCommit - Create a new image from a container
func (c *ImageAPIController) ImageCommit(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var containerParam string
	if query.Has("container") {
		param := query.Get("container")

		containerParam = param
	} else {
	}
	var repoParam string
	if query.Has("repo") {
		param := query.Get("repo")

		repoParam = param
	} else {
	}
	var tagParam string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = param
	} else {
	}
	var commentParam string
	if query.Has("comment") {
		param := query.Get("comment")

		commentParam = param
	} else {
	}
	var authorParam string
	if query.Has("author") {
		param := query.Get("author")

		authorParam = param
	} else {
	}
	var pauseParam bool
	if query.Has("pause") {
		param, err := parseBoolParameter(
			query.Get("pause"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pauseParam = param
	} else {
		var param bool = true
		pauseParam = param
	}
	var changesParam string
	if query.Has("changes") {
		param := query.Get("changes")

		changesParam = param
	} else {
	}
	containerConfigParam := ContainerConfig{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&containerConfigParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContainerConfigRequired(containerConfigParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContainerConfigConstraints(containerConfigParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ImageCommit(r.Context(), containerParam, repoParam, tagParam, commentParam, authorParam, pauseParam, changesParam, containerConfigParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageCreate - Create an image
func (c *ImageAPIController) ImageCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var fromImageParam string
	if query.Has("fromImage") {
		param := query.Get("fromImage")

		fromImageParam = param
	} else {
	}
	var fromSrcParam string
	if query.Has("fromSrc") {
		param := query.Get("fromSrc")

		fromSrcParam = param
	} else {
	}
	var repoParam string
	if query.Has("repo") {
		param := query.Get("repo")

		repoParam = param
	} else {
	}
	var tagParam string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = param
	} else {
	}
	xRegistryAuthParam := r.Header.Get("X-Registry-Auth")
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ImageCreate(r.Context(), fromImageParam, fromSrcParam, repoParam, tagParam, xRegistryAuthParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageDelete - Remove an image
func (c *ImageAPIController) ImageDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var forceParam bool
	if query.Has("force") {
		param, err := parseBoolParameter(
			query.Get("force"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		forceParam = param
	} else {
		var param bool = false
		forceParam = param
	}
	var nopruneParam bool
	if query.Has("noprune") {
		param, err := parseBoolParameter(
			query.Get("noprune"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		nopruneParam = param
	} else {
		var param bool = false
		nopruneParam = param
	}
	result, err := c.service.ImageDelete(r.Context(), nameParam, forceParam, nopruneParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageGet - Export an image
func (c *ImageAPIController) ImageGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.ImageGet(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageGetAll - Export several images
func (c *ImageAPIController) ImageGetAll(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var namesParam []string
	if query.Has("names") {
		namesParam = strings.Split(query.Get("names"), ",")
	}
	result, err := c.service.ImageGetAll(r.Context(), namesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageHistory - Get the history of an image
func (c *ImageAPIController) ImageHistory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.ImageHistory(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageInspect - Inspect an image
func (c *ImageAPIController) ImageInspect(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.ImageInspect(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageList - List Images
func (c *ImageAPIController) ImageList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var allParam bool
	if query.Has("all") {
		param, err := parseBoolParameter(
			query.Get("all"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allParam = param
	} else {
		var param bool = false
		allParam = param
	}
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	var digestsParam bool
	if query.Has("digests") {
		param, err := parseBoolParameter(
			query.Get("digests"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		digestsParam = param
	} else {
		var param bool = false
		digestsParam = param
	}
	result, err := c.service.ImageList(r.Context(), allParam, filtersParam, digestsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageLoad - Import images
func (c *ImageAPIController) ImageLoad(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var quietParam bool
	if query.Has("quiet") {
		param, err := parseBoolParameter(
			query.Get("quiet"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		quietParam = param
	} else {
		var param bool = false
		quietParam = param
	}
	bodyParam := *os.File{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ImageLoad(r.Context(), quietParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImagePrune - Delete unused images
func (c *ImageAPIController) ImagePrune(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	result, err := c.service.ImagePrune(r.Context(), filtersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImagePush - Push an image
func (c *ImageAPIController) ImagePush(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	xRegistryAuthParam := r.Header.Get("X-Registry-Auth")
	var tagParam string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = param
	} else {
	}
	result, err := c.service.ImagePush(r.Context(), nameParam, xRegistryAuthParam, tagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageSearch - Search images
func (c *ImageAPIController) ImageSearch(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var termParam string
	if query.Has("term") {
		param := query.Get("term")

		termParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "term"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	result, err := c.service.ImageSearch(r.Context(), termParam, limitParam, filtersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ImageTag - Tag an image
func (c *ImageAPIController) ImageTag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var repoParam string
	if query.Has("repo") {
		param := query.Get("repo")

		repoParam = param
	} else {
	}
	var tagParam string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = param
	} else {
	}
	result, err := c.service.ImageTag(r.Context(), nameParam, repoParam, tagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
