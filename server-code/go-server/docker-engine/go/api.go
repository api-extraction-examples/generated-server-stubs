/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * API version: 1.33
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"os"
	"os"
)



// ConfigAPIRouter defines the required methods for binding the api requests to a responses for the ConfigAPI
// The ConfigAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigAPIRouter interface { 
	ConfigCreate(http.ResponseWriter, *http.Request)
	ConfigDelete(http.ResponseWriter, *http.Request)
	ConfigInspect(http.ResponseWriter, *http.Request)
	ConfigList(http.ResponseWriter, *http.Request)
	ConfigUpdate(http.ResponseWriter, *http.Request)
}
// ContainerAPIRouter defines the required methods for binding the api requests to a responses for the ContainerAPI
// The ContainerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ContainerAPIServicer to perform the required actions, then write the service results to the http response.
type ContainerAPIRouter interface { 
	ContainerArchive(http.ResponseWriter, *http.Request)
	ContainerArchiveInfo(http.ResponseWriter, *http.Request)
	ContainerAttach(http.ResponseWriter, *http.Request)
	ContainerAttachWebsocket(http.ResponseWriter, *http.Request)
	ContainerChanges(http.ResponseWriter, *http.Request)
	ContainerCreate(http.ResponseWriter, *http.Request)
	ContainerDelete(http.ResponseWriter, *http.Request)
	ContainerExport(http.ResponseWriter, *http.Request)
	ContainerInspect(http.ResponseWriter, *http.Request)
	ContainerKill(http.ResponseWriter, *http.Request)
	ContainerList(http.ResponseWriter, *http.Request)
	ContainerLogs(http.ResponseWriter, *http.Request)
	ContainerPause(http.ResponseWriter, *http.Request)
	ContainerPrune(http.ResponseWriter, *http.Request)
	ContainerRename(http.ResponseWriter, *http.Request)
	ContainerResize(http.ResponseWriter, *http.Request)
	ContainerRestart(http.ResponseWriter, *http.Request)
	ContainerStart(http.ResponseWriter, *http.Request)
	ContainerStats(http.ResponseWriter, *http.Request)
	ContainerStop(http.ResponseWriter, *http.Request)
	ContainerTop(http.ResponseWriter, *http.Request)
	ContainerUnpause(http.ResponseWriter, *http.Request)
	ContainerUpdate(http.ResponseWriter, *http.Request)
	ContainerWait(http.ResponseWriter, *http.Request)
	PutContainerArchive(http.ResponseWriter, *http.Request)
}
// DefaultAPIRouter defines the required methods for binding the api requests to a responses for the DefaultAPI
// The DefaultAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DefaultAPIServicer to perform the required actions, then write the service results to the http response.
type DefaultAPIRouter interface { 
	TaskLogs(http.ResponseWriter, *http.Request)
}
// DistributionAPIRouter defines the required methods for binding the api requests to a responses for the DistributionAPI
// The DistributionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DistributionAPIServicer to perform the required actions, then write the service results to the http response.
type DistributionAPIRouter interface { 
	DistributionInspect(http.ResponseWriter, *http.Request)
}
// ExecAPIRouter defines the required methods for binding the api requests to a responses for the ExecAPI
// The ExecAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ExecAPIServicer to perform the required actions, then write the service results to the http response.
type ExecAPIRouter interface { 
	ContainerExec(http.ResponseWriter, *http.Request)
	ExecInspect(http.ResponseWriter, *http.Request)
	ExecResize(http.ResponseWriter, *http.Request)
	ExecStart(http.ResponseWriter, *http.Request)
}
// ImageAPIRouter defines the required methods for binding the api requests to a responses for the ImageAPI
// The ImageAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ImageAPIServicer to perform the required actions, then write the service results to the http response.
type ImageAPIRouter interface { 
	BuildPrune(http.ResponseWriter, *http.Request)
	ImageBuild(http.ResponseWriter, *http.Request)
	ImageCommit(http.ResponseWriter, *http.Request)
	ImageCreate(http.ResponseWriter, *http.Request)
	ImageDelete(http.ResponseWriter, *http.Request)
	ImageGet(http.ResponseWriter, *http.Request)
	ImageGetAll(http.ResponseWriter, *http.Request)
	ImageHistory(http.ResponseWriter, *http.Request)
	ImageInspect(http.ResponseWriter, *http.Request)
	ImageList(http.ResponseWriter, *http.Request)
	ImageLoad(http.ResponseWriter, *http.Request)
	ImagePrune(http.ResponseWriter, *http.Request)
	ImagePush(http.ResponseWriter, *http.Request)
	ImageSearch(http.ResponseWriter, *http.Request)
	ImageTag(http.ResponseWriter, *http.Request)
}
// NetworkAPIRouter defines the required methods for binding the api requests to a responses for the NetworkAPI
// The NetworkAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NetworkAPIServicer to perform the required actions, then write the service results to the http response.
type NetworkAPIRouter interface { 
	NetworkConnect(http.ResponseWriter, *http.Request)
	NetworkCreate(http.ResponseWriter, *http.Request)
	NetworkDelete(http.ResponseWriter, *http.Request)
	NetworkDisconnect(http.ResponseWriter, *http.Request)
	NetworkInspect(http.ResponseWriter, *http.Request)
	NetworkList(http.ResponseWriter, *http.Request)
	NetworkPrune(http.ResponseWriter, *http.Request)
}
// NodeAPIRouter defines the required methods for binding the api requests to a responses for the NodeAPI
// The NodeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NodeAPIServicer to perform the required actions, then write the service results to the http response.
type NodeAPIRouter interface { 
	NodeDelete(http.ResponseWriter, *http.Request)
	NodeInspect(http.ResponseWriter, *http.Request)
	NodeList(http.ResponseWriter, *http.Request)
	NodeUpdate(http.ResponseWriter, *http.Request)
}
// PluginAPIRouter defines the required methods for binding the api requests to a responses for the PluginAPI
// The PluginAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PluginAPIServicer to perform the required actions, then write the service results to the http response.
type PluginAPIRouter interface { 
	GetPluginPrivileges(http.ResponseWriter, *http.Request)
	PluginCreate(http.ResponseWriter, *http.Request)
	PluginDelete(http.ResponseWriter, *http.Request)
	PluginDisable(http.ResponseWriter, *http.Request)
	PluginEnable(http.ResponseWriter, *http.Request)
	PluginInspect(http.ResponseWriter, *http.Request)
	PluginList(http.ResponseWriter, *http.Request)
	PluginPull(http.ResponseWriter, *http.Request)
	PluginPush(http.ResponseWriter, *http.Request)
	PluginSet(http.ResponseWriter, *http.Request)
	PluginUpgrade(http.ResponseWriter, *http.Request)
}
// SecretAPIRouter defines the required methods for binding the api requests to a responses for the SecretAPI
// The SecretAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SecretAPIServicer to perform the required actions, then write the service results to the http response.
type SecretAPIRouter interface { 
	SecretCreate(http.ResponseWriter, *http.Request)
	SecretDelete(http.ResponseWriter, *http.Request)
	SecretInspect(http.ResponseWriter, *http.Request)
	SecretList(http.ResponseWriter, *http.Request)
	SecretUpdate(http.ResponseWriter, *http.Request)
}
// ServiceAPIRouter defines the required methods for binding the api requests to a responses for the ServiceAPI
// The ServiceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServiceAPIServicer to perform the required actions, then write the service results to the http response.
type ServiceAPIRouter interface { 
	ServiceCreate(http.ResponseWriter, *http.Request)
	ServiceDelete(http.ResponseWriter, *http.Request)
	ServiceInspect(http.ResponseWriter, *http.Request)
	ServiceList(http.ResponseWriter, *http.Request)
	ServiceLogs(http.ResponseWriter, *http.Request)
	ServiceUpdate(http.ResponseWriter, *http.Request)
}
// SessionExperimentalAPIRouter defines the required methods for binding the api requests to a responses for the SessionExperimentalAPI
// The SessionExperimentalAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SessionExperimentalAPIServicer to perform the required actions, then write the service results to the http response.
type SessionExperimentalAPIRouter interface { 
	Session(http.ResponseWriter, *http.Request)
}
// SwarmAPIRouter defines the required methods for binding the api requests to a responses for the SwarmAPI
// The SwarmAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SwarmAPIServicer to perform the required actions, then write the service results to the http response.
type SwarmAPIRouter interface { 
	SwarmInit(http.ResponseWriter, *http.Request)
	SwarmInspect(http.ResponseWriter, *http.Request)
	SwarmJoin(http.ResponseWriter, *http.Request)
	SwarmLeave(http.ResponseWriter, *http.Request)
	SwarmUnlock(http.ResponseWriter, *http.Request)
	SwarmUnlockkey(http.ResponseWriter, *http.Request)
	SwarmUpdate(http.ResponseWriter, *http.Request)
}
// SystemAPIRouter defines the required methods for binding the api requests to a responses for the SystemAPI
// The SystemAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SystemAPIServicer to perform the required actions, then write the service results to the http response.
type SystemAPIRouter interface { 
	SystemAuth(http.ResponseWriter, *http.Request)
	SystemDataUsage(http.ResponseWriter, *http.Request)
	SystemEvents(http.ResponseWriter, *http.Request)
	SystemInfo(http.ResponseWriter, *http.Request)
	SystemPing(http.ResponseWriter, *http.Request)
	SystemVersion(http.ResponseWriter, *http.Request)
}
// TaskAPIRouter defines the required methods for binding the api requests to a responses for the TaskAPI
// The TaskAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TaskAPIServicer to perform the required actions, then write the service results to the http response.
type TaskAPIRouter interface { 
	TaskInspect(http.ResponseWriter, *http.Request)
	TaskList(http.ResponseWriter, *http.Request)
}
// VolumeAPIRouter defines the required methods for binding the api requests to a responses for the VolumeAPI
// The VolumeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VolumeAPIServicer to perform the required actions, then write the service results to the http response.
type VolumeAPIRouter interface { 
	VolumeCreate(http.ResponseWriter, *http.Request)
	VolumeDelete(http.ResponseWriter, *http.Request)
	VolumeInspect(http.ResponseWriter, *http.Request)
	VolumeList(http.ResponseWriter, *http.Request)
	VolumePrune(http.ResponseWriter, *http.Request)
}


// ConfigAPIServicer defines the api actions for the ConfigAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigAPIServicer interface { 
	ConfigCreate(context.Context, ConfigCreateRequest) (ImplResponse, error)
	ConfigDelete(context.Context, string) (ImplResponse, error)
	ConfigInspect(context.Context, string) (ImplResponse, error)
	ConfigList(context.Context, string) (ImplResponse, error)
	ConfigUpdate(context.Context, string, int64, ConfigSpec) (ImplResponse, error)
}


// ContainerAPIServicer defines the api actions for the ContainerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ContainerAPIServicer interface { 
	ContainerArchive(context.Context, string, string) (ImplResponse, error)
	ContainerArchiveInfo(context.Context, string, string) (ImplResponse, error)
	ContainerAttach(context.Context, string, string, bool, bool, bool, bool, bool) (ImplResponse, error)
	ContainerAttachWebsocket(context.Context, string, string, bool, bool, bool, bool, bool) (ImplResponse, error)
	ContainerChanges(context.Context, string) (ImplResponse, error)
	ContainerCreate(context.Context, ContainerCreateRequest, string) (ImplResponse, error)
	ContainerDelete(context.Context, string, bool, bool, bool) (ImplResponse, error)
	ContainerExport(context.Context, string) (ImplResponse, error)
	ContainerInspect(context.Context, string, bool) (ImplResponse, error)
	ContainerKill(context.Context, string, string) (ImplResponse, error)
	ContainerList(context.Context, bool, int32, bool, string) (ImplResponse, error)
	ContainerLogs(context.Context, string, bool, bool, bool, int32, bool, string) (ImplResponse, error)
	ContainerPause(context.Context, string) (ImplResponse, error)
	ContainerPrune(context.Context, string) (ImplResponse, error)
	ContainerRename(context.Context, string, string) (ImplResponse, error)
	ContainerResize(context.Context, string, int32, int32) (ImplResponse, error)
	ContainerRestart(context.Context, string, int32) (ImplResponse, error)
	ContainerStart(context.Context, string, string) (ImplResponse, error)
	ContainerStats(context.Context, string, bool) (ImplResponse, error)
	ContainerStop(context.Context, string, int32) (ImplResponse, error)
	ContainerTop(context.Context, string, string) (ImplResponse, error)
	ContainerUnpause(context.Context, string) (ImplResponse, error)
	ContainerUpdate(context.Context, string, ContainerUpdateRequest) (ImplResponse, error)
	ContainerWait(context.Context, string, string) (ImplResponse, error)
	PutContainerArchive(context.Context, string, string, string, string) (ImplResponse, error)
}


// DefaultAPIServicer defines the api actions for the DefaultAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DefaultAPIServicer interface { 
	TaskLogs(context.Context, string, bool, bool, bool, bool, int32, bool, string) (ImplResponse, error)
}


// DistributionAPIServicer defines the api actions for the DistributionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DistributionAPIServicer interface { 
	DistributionInspect(context.Context, string) (ImplResponse, error)
}


// ExecAPIServicer defines the api actions for the ExecAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ExecAPIServicer interface { 
	ContainerExec(context.Context, string, ContainerExecRequest) (ImplResponse, error)
	ExecInspect(context.Context, string) (ImplResponse, error)
	ExecResize(context.Context, string, int32, int32) (ImplResponse, error)
	ExecStart(context.Context, string, ExecStartRequest) (ImplResponse, error)
}


// ImageAPIServicer defines the api actions for the ImageAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ImageAPIServicer interface { 
	BuildPrune(context.Context) (ImplResponse, error)
	ImageBuild(context.Context, string, string, string, string, bool, bool, string, string, bool, bool, int32, int32, int32, string, int32, int32, int32, int32, bool, string, string, string, string, *os.File) (ImplResponse, error)
	ImageCommit(context.Context, string, string, string, string, string, bool, string, ContainerConfig) (ImplResponse, error)
	ImageCreate(context.Context, string, string, string, string, string, string) (ImplResponse, error)
	ImageDelete(context.Context, string, bool, bool) (ImplResponse, error)
	ImageGet(context.Context, string) (ImplResponse, error)
	ImageGetAll(context.Context, []string) (ImplResponse, error)
	ImageHistory(context.Context, string) (ImplResponse, error)
	ImageInspect(context.Context, string) (ImplResponse, error)
	ImageList(context.Context, bool, string, bool) (ImplResponse, error)
	ImageLoad(context.Context, bool, *os.File) (ImplResponse, error)
	ImagePrune(context.Context, string) (ImplResponse, error)
	ImagePush(context.Context, string, string, string) (ImplResponse, error)
	ImageSearch(context.Context, string, int32, string) (ImplResponse, error)
	ImageTag(context.Context, string, string, string) (ImplResponse, error)
}


// NetworkAPIServicer defines the api actions for the NetworkAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NetworkAPIServicer interface { 
	NetworkConnect(context.Context, string, NetworkConnectRequest) (ImplResponse, error)
	NetworkCreate(context.Context, NetworkCreateRequest) (ImplResponse, error)
	NetworkDelete(context.Context, string) (ImplResponse, error)
	NetworkDisconnect(context.Context, string, NetworkDisconnectRequest) (ImplResponse, error)
	NetworkInspect(context.Context, string, bool, string) (ImplResponse, error)
	NetworkList(context.Context, string) (ImplResponse, error)
	NetworkPrune(context.Context, string) (ImplResponse, error)
}


// NodeAPIServicer defines the api actions for the NodeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NodeAPIServicer interface { 
	NodeDelete(context.Context, string, bool) (ImplResponse, error)
	NodeInspect(context.Context, string) (ImplResponse, error)
	NodeList(context.Context, string) (ImplResponse, error)
	NodeUpdate(context.Context, string, int64, NodeSpec) (ImplResponse, error)
}


// PluginAPIServicer defines the api actions for the PluginAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PluginAPIServicer interface { 
	GetPluginPrivileges(context.Context, string) (ImplResponse, error)
	PluginCreate(context.Context, string, *os.File) (ImplResponse, error)
	PluginDelete(context.Context, string, bool) (ImplResponse, error)
	PluginDisable(context.Context, string) (ImplResponse, error)
	PluginEnable(context.Context, string, int32) (ImplResponse, error)
	PluginInspect(context.Context, string) (ImplResponse, error)
	PluginList(context.Context, string) (ImplResponse, error)
	PluginPull(context.Context, string, string, string, []PluginPullRequestInner) (ImplResponse, error)
	PluginPush(context.Context, string) (ImplResponse, error)
	PluginSet(context.Context, string, []string) (ImplResponse, error)
	PluginUpgrade(context.Context, string, string, string, []PluginPullRequestInner) (ImplResponse, error)
}


// SecretAPIServicer defines the api actions for the SecretAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SecretAPIServicer interface { 
	SecretCreate(context.Context, SecretCreateRequest) (ImplResponse, error)
	SecretDelete(context.Context, string) (ImplResponse, error)
	SecretInspect(context.Context, string) (ImplResponse, error)
	SecretList(context.Context, string) (ImplResponse, error)
	SecretUpdate(context.Context, string, int64, SecretSpec) (ImplResponse, error)
}


// ServiceAPIServicer defines the api actions for the ServiceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServiceAPIServicer interface { 
	ServiceCreate(context.Context, ServiceCreateRequest, string) (ImplResponse, error)
	ServiceDelete(context.Context, string) (ImplResponse, error)
	ServiceInspect(context.Context, string, bool) (ImplResponse, error)
	ServiceList(context.Context, string) (ImplResponse, error)
	ServiceLogs(context.Context, string, bool, bool, bool, bool, int32, bool, string) (ImplResponse, error)
	ServiceUpdate(context.Context, string, int32, ServiceUpdateRequest, string, string, string) (ImplResponse, error)
}


// SessionExperimentalAPIServicer defines the api actions for the SessionExperimentalAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionExperimentalAPIServicer interface { 
	Session(context.Context) (ImplResponse, error)
}


// SwarmAPIServicer defines the api actions for the SwarmAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SwarmAPIServicer interface { 
	SwarmInit(context.Context, SwarmInitRequest) (ImplResponse, error)
	SwarmInspect(context.Context) (ImplResponse, error)
	SwarmJoin(context.Context, SwarmJoinRequest) (ImplResponse, error)
	SwarmLeave(context.Context, bool) (ImplResponse, error)
	SwarmUnlock(context.Context, SwarmUnlockRequest) (ImplResponse, error)
	SwarmUnlockkey(context.Context) (ImplResponse, error)
	SwarmUpdate(context.Context, int64, SwarmSpec, bool, bool, bool) (ImplResponse, error)
}


// SystemAPIServicer defines the api actions for the SystemAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SystemAPIServicer interface { 
	SystemAuth(context.Context, AuthConfig) (ImplResponse, error)
	SystemDataUsage(context.Context) (ImplResponse, error)
	SystemEvents(context.Context, string, string, string) (ImplResponse, error)
	SystemInfo(context.Context) (ImplResponse, error)
	SystemPing(context.Context) (ImplResponse, error)
	SystemVersion(context.Context) (ImplResponse, error)
}


// TaskAPIServicer defines the api actions for the TaskAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TaskAPIServicer interface { 
	TaskInspect(context.Context, string) (ImplResponse, error)
	TaskList(context.Context, string) (ImplResponse, error)
}


// VolumeAPIServicer defines the api actions for the VolumeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VolumeAPIServicer interface { 
	VolumeCreate(context.Context, VolumeCreateRequest) (ImplResponse, error)
	VolumeDelete(context.Context, string, bool) (ImplResponse, error)
	VolumeInspect(context.Context, string) (ImplResponse, error)
	VolumeList(context.Context, string) (ImplResponse, error)
	VolumePrune(context.Context, string) (ImplResponse, error)
}
