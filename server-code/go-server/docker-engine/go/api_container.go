/*
 * Docker Engine API
 *
 * The Engine API is an HTTP API served by Docker Engine. It is the API the Docker client uses to communicate with the Engine, so everything the Docker client can do can be done with the API.  Most of the client's commands map directly to API endpoints (e.g. `docker ps` is `GET /containers/json`). The notable exception is running containers, which consists of several API calls.  # Errors  The API uses standard HTTP status codes to indicate the success or failure of the API call. The body of the response will be JSON in the following format:  ``` {   \"message\": \"page not found\" } ```  # Versioning  The API is usually changed in each release of Docker, so API calls are versioned to ensure that clients don't break.  For Docker Engine 17.09, the API version is 1.32. To lock to this version, you prefix the URL with `/v1.32`. For example, calling `/info` is the same as calling `/v1.32/info`.  Engine releases in the near future should support this version of the API, so your client will continue to work even if it is talking to a newer Engine.  In previous versions of Docker, it was possible to access the API without providing a version. This behaviour is now deprecated will be removed in a future version of Docker.  The API uses an open schema model, which means server may add extra properties to responses. Likewise, the server will ignore any extra query parameters and request body properties. When you write clients, you need to ignore additional properties in responses to ensure they do not break when talking to newer Docker daemons.  This documentation is for version 1.33 of the API. Use this table to find documentation for previous versions of the API:  Docker version  | API version | Changes ----------------|-------------|--------- 17.09.x | [1.31](https://docs.docker.com/engine/api/v1.32/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-32-api-changes) 17.07.x | [1.31](https://docs.docker.com/engine/api/v1.31/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-31-api-changes) 17.06.x | [1.30](https://docs.docker.com/engine/api/v1.30/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-30-api-changes) 17.05.x | [1.29](https://docs.docker.com/engine/api/v1.29/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-29-api-changes) 17.04.x | [1.28](https://docs.docker.com/engine/api/v1.28/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-28-api-changes) 17.03.1 | [1.27](https://docs.docker.com/engine/api/v1.27/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-27-api-changes) 1.13.1 & 17.03.0 | [1.26](https://docs.docker.com/engine/api/v1.26/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-26-api-changes) 1.13.0 | [1.25](https://docs.docker.com/engine/api/v1.25/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-25-api-changes) 1.12.x | [1.24](https://docs.docker.com/engine/api/v1.24/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-24-api-changes) 1.11.x | [1.23](https://docs.docker.com/engine/api/v1.23/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-23-api-changes) 1.10.x | [1.22](https://docs.docker.com/engine/api/v1.22/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-22-api-changes) 1.9.x | [1.21](https://docs.docker.com/engine/api/v1.21/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-21-api-changes) 1.8.x | [1.20](https://docs.docker.com/engine/api/v1.20/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-20-api-changes) 1.7.x | [1.19](https://docs.docker.com/engine/api/v1.19/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-19-api-changes) 1.6.x | [1.18](https://docs.docker.com/engine/api/v1.18/) | [API changes](https://docs.docker.com/engine/api/version-history/#v1-18-api-changes)  # Authentication  Authentication for registries is handled client side. The client has to send authentication details to various endpoints that need to communicate with registries, such as `POST /images/(name)/push`. These are sent as `X-Registry-Auth` header as a Base64 encoded (JSON) string with the following structure:  ``` {   \"username\": \"string\",   \"password\": \"string\",   \"email\": \"string\",   \"serveraddress\": \"string\" } ```  The `serveraddress` is a domain/IP without a protocol. Throughout this structure, double quotes are required.  If you have already got an identity token from the [`/auth` endpoint](#operation/SystemAuth), you can just pass this instead of credentials:  ``` {   \"identitytoken\": \"9cbaf023786cd7...\" } ``` 
 *
 * API version: 1.33
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ContainerAPIController binds http requests to an api service and writes the service results to the http response
type ContainerAPIController struct {
	service ContainerAPIServicer
	errorHandler ErrorHandler
}

// ContainerAPIOption for how the controller is set up.
type ContainerAPIOption func(*ContainerAPIController)

// WithContainerAPIErrorHandler inject ErrorHandler into controller
func WithContainerAPIErrorHandler(h ErrorHandler) ContainerAPIOption {
	return func(c *ContainerAPIController) {
		c.errorHandler = h
	}
}

// NewContainerAPIController creates a default api controller
func NewContainerAPIController(s ContainerAPIServicer, opts ...ContainerAPIOption) Router {
	controller := &ContainerAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ContainerAPIController
func (c *ContainerAPIController) Routes() Routes {
	return Routes{
		"ContainerArchive": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/archive",
			c.ContainerArchive,
		},
		"ContainerArchiveInfo": Route{
			strings.ToUpper("Head"),
			"/v1.33/containers/{id}/archive",
			c.ContainerArchiveInfo,
		},
		"ContainerAttach": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/attach",
			c.ContainerAttach,
		},
		"ContainerAttachWebsocket": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/attach/ws",
			c.ContainerAttachWebsocket,
		},
		"ContainerChanges": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/changes",
			c.ContainerChanges,
		},
		"ContainerCreate": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/create",
			c.ContainerCreate,
		},
		"ContainerDelete": Route{
			strings.ToUpper("Delete"),
			"/v1.33/containers/{id}",
			c.ContainerDelete,
		},
		"ContainerExport": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/export",
			c.ContainerExport,
		},
		"ContainerInspect": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/json",
			c.ContainerInspect,
		},
		"ContainerKill": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/kill",
			c.ContainerKill,
		},
		"ContainerList": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/json",
			c.ContainerList,
		},
		"ContainerLogs": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/logs",
			c.ContainerLogs,
		},
		"ContainerPause": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/pause",
			c.ContainerPause,
		},
		"ContainerPrune": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/prune",
			c.ContainerPrune,
		},
		"ContainerRename": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/rename",
			c.ContainerRename,
		},
		"ContainerResize": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/resize",
			c.ContainerResize,
		},
		"ContainerRestart": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/restart",
			c.ContainerRestart,
		},
		"ContainerStart": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/start",
			c.ContainerStart,
		},
		"ContainerStats": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/stats",
			c.ContainerStats,
		},
		"ContainerStop": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/stop",
			c.ContainerStop,
		},
		"ContainerTop": Route{
			strings.ToUpper("Get"),
			"/v1.33/containers/{id}/top",
			c.ContainerTop,
		},
		"ContainerUnpause": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/unpause",
			c.ContainerUnpause,
		},
		"ContainerUpdate": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/update",
			c.ContainerUpdate,
		},
		"ContainerWait": Route{
			strings.ToUpper("Post"),
			"/v1.33/containers/{id}/wait",
			c.ContainerWait,
		},
		"PutContainerArchive": Route{
			strings.ToUpper("Put"),
			"/v1.33/containers/{id}/archive",
			c.PutContainerArchive,
		},
	}
}

// ContainerArchive - Get an archive of a filesystem resource in a container
func (c *ContainerAPIController) ContainerArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	result, err := c.service.ContainerArchive(r.Context(), idParam, pathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerArchiveInfo - Get information about files in a container
func (c *ContainerAPIController) ContainerArchiveInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	result, err := c.service.ContainerArchiveInfo(r.Context(), idParam, pathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerAttach - Attach to a container
func (c *ContainerAPIController) ContainerAttach(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var detachKeysParam string
	if query.Has("detachKeys") {
		param := query.Get("detachKeys")

		detachKeysParam = param
	} else {
	}
	var logsParam bool
	if query.Has("logs") {
		param, err := parseBoolParameter(
			query.Get("logs"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		logsParam = param
	} else {
		var param bool = false
		logsParam = param
	}
	var streamParam bool
	if query.Has("stream") {
		param, err := parseBoolParameter(
			query.Get("stream"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		streamParam = param
	} else {
		var param bool = false
		streamParam = param
	}
	var stdinParam bool
	if query.Has("stdin") {
		param, err := parseBoolParameter(
			query.Get("stdin"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stdinParam = param
	} else {
		var param bool = false
		stdinParam = param
	}
	var stdoutParam bool
	if query.Has("stdout") {
		param, err := parseBoolParameter(
			query.Get("stdout"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stdoutParam = param
	} else {
		var param bool = false
		stdoutParam = param
	}
	var stderrParam bool
	if query.Has("stderr") {
		param, err := parseBoolParameter(
			query.Get("stderr"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stderrParam = param
	} else {
		var param bool = false
		stderrParam = param
	}
	result, err := c.service.ContainerAttach(r.Context(), idParam, detachKeysParam, logsParam, streamParam, stdinParam, stdoutParam, stderrParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerAttachWebsocket - Attach to a container via a websocket
func (c *ContainerAPIController) ContainerAttachWebsocket(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var detachKeysParam string
	if query.Has("detachKeys") {
		param := query.Get("detachKeys")

		detachKeysParam = param
	} else {
	}
	var logsParam bool
	if query.Has("logs") {
		param, err := parseBoolParameter(
			query.Get("logs"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		logsParam = param
	} else {
		var param bool = false
		logsParam = param
	}
	var streamParam bool
	if query.Has("stream") {
		param, err := parseBoolParameter(
			query.Get("stream"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		streamParam = param
	} else {
		var param bool = false
		streamParam = param
	}
	var stdinParam bool
	if query.Has("stdin") {
		param, err := parseBoolParameter(
			query.Get("stdin"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stdinParam = param
	} else {
		var param bool = false
		stdinParam = param
	}
	var stdoutParam bool
	if query.Has("stdout") {
		param, err := parseBoolParameter(
			query.Get("stdout"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stdoutParam = param
	} else {
		var param bool = false
		stdoutParam = param
	}
	var stderrParam bool
	if query.Has("stderr") {
		param, err := parseBoolParameter(
			query.Get("stderr"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stderrParam = param
	} else {
		var param bool = false
		stderrParam = param
	}
	result, err := c.service.ContainerAttachWebsocket(r.Context(), idParam, detachKeysParam, logsParam, streamParam, stdinParam, stdoutParam, stderrParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerChanges - Get changes on a container’s filesystem
func (c *ContainerAPIController) ContainerChanges(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ContainerChanges(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerCreate - Create a container
func (c *ContainerAPIController) ContainerCreate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	containerCreateRequestParam := ContainerCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&containerCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContainerCreateRequestRequired(containerCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContainerCreateRequestConstraints(containerCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
	}
	result, err := c.service.ContainerCreate(r.Context(), containerCreateRequestParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerDelete - Remove a container
func (c *ContainerAPIController) ContainerDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var vParam bool
	if query.Has("v") {
		param, err := parseBoolParameter(
			query.Get("v"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		vParam = param
	} else {
		var param bool = false
		vParam = param
	}
	var forceParam bool
	if query.Has("force") {
		param, err := parseBoolParameter(
			query.Get("force"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		forceParam = param
	} else {
		var param bool = false
		forceParam = param
	}
	var linkParam bool
	if query.Has("link") {
		param, err := parseBoolParameter(
			query.Get("link"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		linkParam = param
	} else {
		var param bool = false
		linkParam = param
	}
	result, err := c.service.ContainerDelete(r.Context(), idParam, vParam, forceParam, linkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerExport - Export a container
func (c *ContainerAPIController) ContainerExport(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ContainerExport(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerInspect - Inspect a container
func (c *ContainerAPIController) ContainerInspect(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var sizeParam bool
	if query.Has("size") {
		param, err := parseBoolParameter(
			query.Get("size"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sizeParam = param
	} else {
		var param bool = false
		sizeParam = param
	}
	result, err := c.service.ContainerInspect(r.Context(), idParam, sizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerKill - Kill a container
func (c *ContainerAPIController) ContainerKill(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var signalParam string
	if query.Has("signal") {
		param := query.Get("signal")

		signalParam = param
	} else {
		param := SIGKILL
		signalParam = param
	}
	result, err := c.service.ContainerKill(r.Context(), idParam, signalParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerList - List containers
func (c *ContainerAPIController) ContainerList(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var allParam bool
	if query.Has("all") {
		param, err := parseBoolParameter(
			query.Get("all"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allParam = param
	} else {
		var param bool = false
		allParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var sizeParam bool
	if query.Has("size") {
		param, err := parseBoolParameter(
			query.Get("size"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sizeParam = param
	} else {
		var param bool = false
		sizeParam = param
	}
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	result, err := c.service.ContainerList(r.Context(), allParam, limitParam, sizeParam, filtersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerLogs - Get container logs
func (c *ContainerAPIController) ContainerLogs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var followParam bool
	if query.Has("follow") {
		param, err := parseBoolParameter(
			query.Get("follow"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		followParam = param
	} else {
		var param bool = false
		followParam = param
	}
	var stdoutParam bool
	if query.Has("stdout") {
		param, err := parseBoolParameter(
			query.Get("stdout"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stdoutParam = param
	} else {
		var param bool = false
		stdoutParam = param
	}
	var stderrParam bool
	if query.Has("stderr") {
		param, err := parseBoolParameter(
			query.Get("stderr"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		stderrParam = param
	} else {
		var param bool = false
		stderrParam = param
	}
	var sinceParam int32
	if query.Has("since") {
		param, err := parseNumericParameter[int32](
			query.Get("since"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sinceParam = param
	} else {
		var param int32 = 0
		sinceParam = param
	}
	var timestampsParam bool
	if query.Has("timestamps") {
		param, err := parseBoolParameter(
			query.Get("timestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		timestampsParam = param
	} else {
		var param bool = false
		timestampsParam = param
	}
	var tailParam string
	if query.Has("tail") {
		param := query.Get("tail")

		tailParam = param
	} else {
		param := all
		tailParam = param
	}
	result, err := c.service.ContainerLogs(r.Context(), idParam, followParam, stdoutParam, stderrParam, sinceParam, timestampsParam, tailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerPause - Pause a container
func (c *ContainerAPIController) ContainerPause(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ContainerPause(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerPrune - Delete stopped containers
func (c *ContainerAPIController) ContainerPrune(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filtersParam string
	if query.Has("filters") {
		param := query.Get("filters")

		filtersParam = param
	} else {
	}
	result, err := c.service.ContainerPrune(r.Context(), filtersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerRename - Rename a container
func (c *ContainerAPIController) ContainerRename(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	result, err := c.service.ContainerRename(r.Context(), idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerResize - Resize a container TTY
func (c *ContainerAPIController) ContainerResize(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var hParam int32
	if query.Has("h") {
		param, err := parseNumericParameter[int32](
			query.Get("h"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hParam = param
	} else {
	}
	var wParam int32
	if query.Has("w") {
		param, err := parseNumericParameter[int32](
			query.Get("w"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		wParam = param
	} else {
	}
	result, err := c.service.ContainerResize(r.Context(), idParam, hParam, wParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerRestart - Restart a container
func (c *ContainerAPIController) ContainerRestart(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var tParam int32
	if query.Has("t") {
		param, err := parseNumericParameter[int32](
			query.Get("t"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		tParam = param
	} else {
	}
	result, err := c.service.ContainerRestart(r.Context(), idParam, tParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerStart - Start a container
func (c *ContainerAPIController) ContainerStart(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var detachKeysParam string
	if query.Has("detachKeys") {
		param := query.Get("detachKeys")

		detachKeysParam = param
	} else {
	}
	result, err := c.service.ContainerStart(r.Context(), idParam, detachKeysParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerStats - Get container stats based on resource usage
func (c *ContainerAPIController) ContainerStats(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var streamParam bool
	if query.Has("stream") {
		param, err := parseBoolParameter(
			query.Get("stream"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		streamParam = param
	} else {
		var param bool = true
		streamParam = param
	}
	result, err := c.service.ContainerStats(r.Context(), idParam, streamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerStop - Stop a container
func (c *ContainerAPIController) ContainerStop(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var tParam int32
	if query.Has("t") {
		param, err := parseNumericParameter[int32](
			query.Get("t"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		tParam = param
	} else {
	}
	result, err := c.service.ContainerStop(r.Context(), idParam, tParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerTop - List processes running inside a container
func (c *ContainerAPIController) ContainerTop(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var psArgsParam string
	if query.Has("ps_args") {
		param := query.Get("ps_args")

		psArgsParam = param
	} else {
		param := -ef
		psArgsParam = param
	}
	result, err := c.service.ContainerTop(r.Context(), idParam, psArgsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerUnpause - Unpause a container
func (c *ContainerAPIController) ContainerUnpause(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ContainerUnpause(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerUpdate - Update a container
func (c *ContainerAPIController) ContainerUpdate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	containerUpdateRequestParam := ContainerUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&containerUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContainerUpdateRequestRequired(containerUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContainerUpdateRequestConstraints(containerUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ContainerUpdate(r.Context(), idParam, containerUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ContainerWait - Wait for a container
func (c *ContainerAPIController) ContainerWait(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var conditionParam string
	if query.Has("condition") {
		param := query.Get("condition")

		conditionParam = param
	} else {
		param := not-running
		conditionParam = param
	}
	result, err := c.service.ContainerWait(r.Context(), idParam, conditionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutContainerArchive - Extract an archive of files or folders to a directory in a container
func (c *ContainerAPIController) PutContainerArchive(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var noOverwriteDirNonDirParam string
	if query.Has("noOverwriteDirNonDir") {
		param := query.Get("noOverwriteDirNonDir")

		noOverwriteDirNonDirParam = param
	} else {
	}
	result, err := c.service.PutContainerArchive(r.Context(), idParam, pathParam, bodyParam, noOverwriteDirNonDirParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
