/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * API version: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAPIController binds http requests to an api service and writes the service results to the http response
type UserAPIController struct {
	service UserAPIServicer
	errorHandler ErrorHandler
}

// UserAPIOption for how the controller is set up.
type UserAPIOption func(*UserAPIController)

// WithUserAPIErrorHandler inject ErrorHandler into controller
func WithUserAPIErrorHandler(h ErrorHandler) UserAPIOption {
	return func(c *UserAPIController) {
		c.errorHandler = h
	}
}

// NewUserAPIController creates a default api controller
func NewUserAPIController(s UserAPIServicer, opts ...UserAPIOption) Router {
	controller := &UserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIController
func (c *UserAPIController) Routes() Routes {
	return Routes{
		"UserIdForUsernameGet": Route{
			strings.ToUpper("Get"),
			"/user/id_for/{username}",
			c.UserIdForUsernameGet,
		},
		"UserUserIdArticlesGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/articles",
			c.UserUserIdArticlesGet,
		},
		"UserUserIdFollowersGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/followers",
			c.UserUserIdFollowersGet,
		},
		"UserUserIdFollowingGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/following",
			c.UserUserIdFollowingGet,
		},
		"UserUserIdGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}",
			c.UserUserIdGet,
		},
		"UserUserIdInterestsGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/interests",
			c.UserUserIdInterestsGet,
		},
		"UserUserIdListsGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/lists",
			c.UserUserIdListsGet,
		},
		"UserUserIdPublicationsGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/publications",
			c.UserUserIdPublicationsGet,
		},
		"UserUserIdTopArticlesGet": Route{
			strings.ToUpper("Get"),
			"/user/{user_id}/top_articles",
			c.UserUserIdTopArticlesGet,
		},
	}
}

// UserIdForUsernameGet - Get User ID
func (c *UserAPIController) UserIdForUsernameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	usernameParam := params["username"]
	if usernameParam == "" {
		c.errorHandler(w, r, &RequiredError{"username"}, nil)
		return
	}
	result, err := c.service.UserIdForUsernameGet(r.Context(), usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdArticlesGet - Get User's Articles
func (c *UserAPIController) UserUserIdArticlesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdArticlesGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdFollowersGet - Get User Followers
func (c *UserAPIController) UserUserIdFollowersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	result, err := c.service.UserUserIdFollowersGet(r.Context(), userIdParam, countParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdFollowingGet - Get User Following
func (c *UserAPIController) UserUserIdFollowingGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	result, err := c.service.UserUserIdFollowingGet(r.Context(), userIdParam, countParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdGet - Get User Info
func (c *UserAPIController) UserUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdInterestsGet - Get User's Interests
func (c *UserAPIController) UserUserIdInterestsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdInterestsGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdListsGet - Get User's Lists
func (c *UserAPIController) UserUserIdListsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdListsGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdPublicationsGet - Get User's Publications
func (c *UserAPIController) UserUserIdPublicationsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdPublicationsGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserUserIdTopArticlesGet - Get User's Top Articles
func (c *UserAPIController) UserUserIdTopArticlesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user_id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_id"}, nil)
		return
	}
	result, err := c.service.UserUserIdTopArticlesGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
