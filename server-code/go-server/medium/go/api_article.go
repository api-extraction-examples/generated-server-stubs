/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * API version: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ArticleAPIController binds http requests to an api service and writes the service results to the http response
type ArticleAPIController struct {
	service ArticleAPIServicer
	errorHandler ErrorHandler
}

// ArticleAPIOption for how the controller is set up.
type ArticleAPIOption func(*ArticleAPIController)

// WithArticleAPIErrorHandler inject ErrorHandler into controller
func WithArticleAPIErrorHandler(h ErrorHandler) ArticleAPIOption {
	return func(c *ArticleAPIController) {
		c.errorHandler = h
	}
}

// NewArticleAPIController creates a default api controller
func NewArticleAPIController(s ArticleAPIServicer, opts ...ArticleAPIOption) Router {
	controller := &ArticleAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ArticleAPIController
func (c *ArticleAPIController) Routes() Routes {
	return Routes{
		"ArticleArticleIdContentGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}/content",
			c.ArticleArticleIdContentGet,
		},
		"ArticleArticleIdFansGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}/fans",
			c.ArticleArticleIdFansGet,
		},
		"ArticleArticleIdGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}",
			c.ArticleArticleIdGet,
		},
		"ArticleArticleIdMarkdownGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}/markdown",
			c.ArticleArticleIdMarkdownGet,
		},
		"ArticleArticleIdRelatedGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}/related",
			c.ArticleArticleIdRelatedGet,
		},
		"ArticleArticleIdResponsesGet": Route{
			strings.ToUpper("Get"),
			"/article/{article_id}/responses",
			c.ArticleArticleIdResponsesGet,
		},
	}
}

// ArticleArticleIdContentGet - Get Article's Content
func (c *ArticleAPIController) ArticleArticleIdContentGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdContentGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleArticleIdFansGet - Get Article Fans
func (c *ArticleAPIController) ArticleArticleIdFansGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdFansGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleArticleIdGet - Get Article Info
func (c *ArticleAPIController) ArticleArticleIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleArticleIdMarkdownGet - Get Article's Markdown
func (c *ArticleAPIController) ArticleArticleIdMarkdownGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdMarkdownGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleArticleIdRelatedGet - Get Related Articles
func (c *ArticleAPIController) ArticleArticleIdRelatedGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdRelatedGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ArticleArticleIdResponsesGet - Get Article Responses
func (c *ArticleAPIController) ArticleArticleIdResponsesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	articleIdParam := params["article_id"]
	if articleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"article_id"}, nil)
		return
	}
	result, err := c.service.ArticleArticleIdResponsesGet(r.Context(), articleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
