/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * API version: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ListAPIController binds http requests to an api service and writes the service results to the http response
type ListAPIController struct {
	service ListAPIServicer
	errorHandler ErrorHandler
}

// ListAPIOption for how the controller is set up.
type ListAPIOption func(*ListAPIController)

// WithListAPIErrorHandler inject ErrorHandler into controller
func WithListAPIErrorHandler(h ErrorHandler) ListAPIOption {
	return func(c *ListAPIController) {
		c.errorHandler = h
	}
}

// NewListAPIController creates a default api controller
func NewListAPIController(s ListAPIServicer, opts ...ListAPIOption) Router {
	controller := &ListAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ListAPIController
func (c *ListAPIController) Routes() Routes {
	return Routes{
		"ListListIdArticlesGet": Route{
			strings.ToUpper("Get"),
			"/list/{list_id}/articles",
			c.ListListIdArticlesGet,
		},
		"ListListIdGet": Route{
			strings.ToUpper("Get"),
			"/list/{list_id}",
			c.ListListIdGet,
		},
		"ListListIdResponsesGet": Route{
			strings.ToUpper("Get"),
			"/list/{list_id}/responses",
			c.ListListIdResponsesGet,
		},
	}
}

// ListListIdArticlesGet - Get List Articles
func (c *ListAPIController) ListListIdArticlesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	listIdParam := params["list_id"]
	if listIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"list_id"}, nil)
		return
	}
	result, err := c.service.ListListIdArticlesGet(r.Context(), listIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListListIdGet - Get List Info
func (c *ListAPIController) ListListIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	listIdParam := params["list_id"]
	if listIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"list_id"}, nil)
		return
	}
	result, err := c.service.ListListIdGet(r.Context(), listIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListListIdResponsesGet - Get List Responses
func (c *ListAPIController) ListListIdResponsesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	listIdParam := params["list_id"]
	if listIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"list_id"}, nil)
		return
	}
	result, err := c.service.ListListIdResponsesGet(r.Context(), listIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
