/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * API version: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MiscAPIController binds http requests to an api service and writes the service results to the http response
type MiscAPIController struct {
	service MiscAPIServicer
	errorHandler ErrorHandler
}

// MiscAPIOption for how the controller is set up.
type MiscAPIOption func(*MiscAPIController)

// WithMiscAPIErrorHandler inject ErrorHandler into controller
func WithMiscAPIErrorHandler(h ErrorHandler) MiscAPIOption {
	return func(c *MiscAPIController) {
		c.errorHandler = h
	}
}

// NewMiscAPIController creates a default api controller
func NewMiscAPIController(s MiscAPIServicer, opts ...MiscAPIOption) Router {
	controller := &MiscAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MiscAPIController
func (c *MiscAPIController) Routes() Routes {
	return Routes{
		"LatestpostsTopicSlugGet": Route{
			strings.ToUpper("Get"),
			"/latestposts/{topic_slug}",
			c.LatestpostsTopicSlugGet,
		},
		"RelatedTagsTagGet": Route{
			strings.ToUpper("Get"),
			"/related_tags/{tag}",
			c.RelatedTagsTagGet,
		},
		"TopWriterTopicSlugGet": Route{
			strings.ToUpper("Get"),
			"/top_writer/{topic_slug}",
			c.TopWriterTopicSlugGet,
		},
		"TopfeedsTagModeGet": Route{
			strings.ToUpper("Get"),
			"/topfeeds/{tag}/{mode}",
			c.TopfeedsTagModeGet,
		},
	}
}

// LatestpostsTopicSlugGet - Get Latest Posts
func (c *MiscAPIController) LatestpostsTopicSlugGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	topicSlugParam := params["topic_slug"]
	if topicSlugParam == "" {
		c.errorHandler(w, r, &RequiredError{"topic_slug"}, nil)
		return
	}
	result, err := c.service.LatestpostsTopicSlugGet(r.Context(), topicSlugParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RelatedTagsTagGet - Get Related Tags
func (c *MiscAPIController) RelatedTagsTagGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tagParam := params["tag"]
	if tagParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag"}, nil)
		return
	}
	result, err := c.service.RelatedTagsTagGet(r.Context(), tagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TopWriterTopicSlugGet - Get Top Writers
func (c *MiscAPIController) TopWriterTopicSlugGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	topicSlugParam := params["topic_slug"]
	if topicSlugParam == "" {
		c.errorHandler(w, r, &RequiredError{"topic_slug"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	result, err := c.service.TopWriterTopicSlugGet(r.Context(), topicSlugParam, countParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TopfeedsTagModeGet - Get Topfeeds
func (c *MiscAPIController) TopfeedsTagModeGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	tagParam := params["tag"]
	if tagParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag"}, nil)
		return
	}
	modeParam := params["mode"]
	if modeParam == "" {
		c.errorHandler(w, r, &RequiredError{"mode"}, nil)
		return
	}
	var afterParam int32
	if query.Has("after") {
		param, err := parseNumericParameter[int32](
			query.Get("after"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		afterParam = param
	} else {
		var param int32 = 0
		afterParam = param
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
		var param int32 = 25
		countParam = param
	}
	result, err := c.service.TopfeedsTagModeGet(r.Context(), tagParam, modeParam, afterParam, countParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
