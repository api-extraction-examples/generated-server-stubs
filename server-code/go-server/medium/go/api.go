/*
 * Medium API
 *
 * Medium API helps you to quickly extract data from Medium's Website (https://medium.com).   You can gather data related to users, publications, articles (including its textual content), latest posts &amp; top writers within a topic/niche, etcâ€¦ 
 *
 * API version: 1.0
 * Contact: nishu@mediumapi.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
)



// ArticleAPIRouter defines the required methods for binding the api requests to a responses for the ArticleAPI
// The ArticleAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ArticleAPIServicer to perform the required actions, then write the service results to the http response.
type ArticleAPIRouter interface { 
	ArticleArticleIdContentGet(http.ResponseWriter, *http.Request)
	ArticleArticleIdFansGet(http.ResponseWriter, *http.Request)
	ArticleArticleIdGet(http.ResponseWriter, *http.Request)
	ArticleArticleIdMarkdownGet(http.ResponseWriter, *http.Request)
	ArticleArticleIdRelatedGet(http.ResponseWriter, *http.Request)
	ArticleArticleIdResponsesGet(http.ResponseWriter, *http.Request)
}
// ListAPIRouter defines the required methods for binding the api requests to a responses for the ListAPI
// The ListAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ListAPIServicer to perform the required actions, then write the service results to the http response.
type ListAPIRouter interface { 
	ListListIdArticlesGet(http.ResponseWriter, *http.Request)
	ListListIdGet(http.ResponseWriter, *http.Request)
	ListListIdResponsesGet(http.ResponseWriter, *http.Request)
}
// MiscAPIRouter defines the required methods for binding the api requests to a responses for the MiscAPI
// The MiscAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MiscAPIServicer to perform the required actions, then write the service results to the http response.
type MiscAPIRouter interface { 
	LatestpostsTopicSlugGet(http.ResponseWriter, *http.Request)
	RelatedTagsTagGet(http.ResponseWriter, *http.Request)
	TopWriterTopicSlugGet(http.ResponseWriter, *http.Request)
	TopfeedsTagModeGet(http.ResponseWriter, *http.Request)
}
// PublicationAPIRouter defines the required methods for binding the api requests to a responses for the PublicationAPI
// The PublicationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PublicationAPIServicer to perform the required actions, then write the service results to the http response.
type PublicationAPIRouter interface { 
	PublicationIdForPublicationSlugGet(http.ResponseWriter, *http.Request)
	PublicationPublicationIdArticlesGet(http.ResponseWriter, *http.Request)
	PublicationPublicationIdGet(http.ResponseWriter, *http.Request)
	PublicationPublicationIdNewsletterGet(http.ResponseWriter, *http.Request)
}
// SearchAPIRouter defines the required methods for binding the api requests to a responses for the SearchAPI
// The SearchAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SearchAPIServicer to perform the required actions, then write the service results to the http response.
type SearchAPIRouter interface { 
	SearchArticlesqueryqueryGet(http.ResponseWriter, *http.Request)
	SearchListsqueryqueryGet(http.ResponseWriter, *http.Request)
	SearchPublicationsqueryqueryGet(http.ResponseWriter, *http.Request)
	SearchTagsqueryqueryGet(http.ResponseWriter, *http.Request)
	SearchUsersqueryqueryGet(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	UserIdForUsernameGet(http.ResponseWriter, *http.Request)
	UserUserIdArticlesGet(http.ResponseWriter, *http.Request)
	UserUserIdFollowersGet(http.ResponseWriter, *http.Request)
	UserUserIdFollowingGet(http.ResponseWriter, *http.Request)
	UserUserIdGet(http.ResponseWriter, *http.Request)
	UserUserIdInterestsGet(http.ResponseWriter, *http.Request)
	UserUserIdListsGet(http.ResponseWriter, *http.Request)
	UserUserIdPublicationsGet(http.ResponseWriter, *http.Request)
	UserUserIdTopArticlesGet(http.ResponseWriter, *http.Request)
}
// WelcomeAPIRouter defines the required methods for binding the api requests to a responses for the WelcomeAPI
// The WelcomeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WelcomeAPIServicer to perform the required actions, then write the service results to the http response.
type WelcomeAPIRouter interface { 
	RootGet(http.ResponseWriter, *http.Request)
}


// ArticleAPIServicer defines the api actions for the ArticleAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ArticleAPIServicer interface { 
	ArticleArticleIdContentGet(context.Context, string) (ImplResponse, error)
	ArticleArticleIdFansGet(context.Context, string) (ImplResponse, error)
	ArticleArticleIdGet(context.Context, string) (ImplResponse, error)
	ArticleArticleIdMarkdownGet(context.Context, string) (ImplResponse, error)
	ArticleArticleIdRelatedGet(context.Context, string) (ImplResponse, error)
	ArticleArticleIdResponsesGet(context.Context, string) (ImplResponse, error)
}


// ListAPIServicer defines the api actions for the ListAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ListAPIServicer interface { 
	ListListIdArticlesGet(context.Context, string) (ImplResponse, error)
	ListListIdGet(context.Context, string) (ImplResponse, error)
	ListListIdResponsesGet(context.Context, string) (ImplResponse, error)
}


// MiscAPIServicer defines the api actions for the MiscAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MiscAPIServicer interface { 
	LatestpostsTopicSlugGet(context.Context, string) (ImplResponse, error)
	RelatedTagsTagGet(context.Context, string) (ImplResponse, error)
	TopWriterTopicSlugGet(context.Context, string, int32) (ImplResponse, error)
	TopfeedsTagModeGet(context.Context, string, string, int32, int32) (ImplResponse, error)
}


// PublicationAPIServicer defines the api actions for the PublicationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PublicationAPIServicer interface { 
	PublicationIdForPublicationSlugGet(context.Context, string) (ImplResponse, error)
	PublicationPublicationIdArticlesGet(context.Context, string, string) (ImplResponse, error)
	PublicationPublicationIdGet(context.Context, string) (ImplResponse, error)
	PublicationPublicationIdNewsletterGet(context.Context, string) (ImplResponse, error)
}


// SearchAPIServicer defines the api actions for the SearchAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SearchAPIServicer interface { 
	SearchArticlesqueryqueryGet(context.Context, string) (ImplResponse, error)
	SearchListsqueryqueryGet(context.Context, string) (ImplResponse, error)
	SearchPublicationsqueryqueryGet(context.Context, string) (ImplResponse, error)
	SearchTagsqueryqueryGet(context.Context, string) (ImplResponse, error)
	SearchUsersqueryqueryGet(context.Context, string) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	UserIdForUsernameGet(context.Context, string) (ImplResponse, error)
	UserUserIdArticlesGet(context.Context, string) (ImplResponse, error)
	UserUserIdFollowersGet(context.Context, string, int32) (ImplResponse, error)
	UserUserIdFollowingGet(context.Context, string, int32) (ImplResponse, error)
	UserUserIdGet(context.Context, string) (ImplResponse, error)
	UserUserIdInterestsGet(context.Context, string) (ImplResponse, error)
	UserUserIdListsGet(context.Context, string) (ImplResponse, error)
	UserUserIdPublicationsGet(context.Context, string) (ImplResponse, error)
	UserUserIdTopArticlesGet(context.Context, string) (ImplResponse, error)
}


// WelcomeAPIServicer defines the api actions for the WelcomeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WelcomeAPIServicer interface { 
	RootGet(context.Context) (ImplResponse, error)
}
