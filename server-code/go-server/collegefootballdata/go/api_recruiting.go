/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RecruitingAPIController binds http requests to an api service and writes the service results to the http response
type RecruitingAPIController struct {
	service RecruitingAPIServicer
	errorHandler ErrorHandler
}

// RecruitingAPIOption for how the controller is set up.
type RecruitingAPIOption func(*RecruitingAPIController)

// WithRecruitingAPIErrorHandler inject ErrorHandler into controller
func WithRecruitingAPIErrorHandler(h ErrorHandler) RecruitingAPIOption {
	return func(c *RecruitingAPIController) {
		c.errorHandler = h
	}
}

// NewRecruitingAPIController creates a default api controller
func NewRecruitingAPIController(s RecruitingAPIServicer, opts ...RecruitingAPIOption) Router {
	controller := &RecruitingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RecruitingAPIController
func (c *RecruitingAPIController) Routes() Routes {
	return Routes{
		"GetRecruitingGroups": Route{
			strings.ToUpper("Get"),
			"/recruiting/groups",
			c.GetRecruitingGroups,
		},
		"GetRecruitingPlayers": Route{
			strings.ToUpper("Get"),
			"/recruiting/players",
			c.GetRecruitingPlayers,
		},
		"GetRecruitingTeams": Route{
			strings.ToUpper("Get"),
			"/recruiting/teams",
			c.GetRecruitingTeams,
		},
	}
}

// GetRecruitingGroups - Recruit position group ratings
func (c *RecruitingAPIController) GetRecruitingGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startYearParam int32
	if query.Has("startYear") {
		param, err := parseNumericParameter[int32](
			query.Get("startYear"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startYearParam = param
	} else {
	}
	var endYearParam int32
	if query.Has("endYear") {
		param, err := parseNumericParameter[int32](
			query.Get("endYear"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endYearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetRecruitingGroups(r.Context(), startYearParam, endYearParam, teamParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecruitingPlayers - Player recruiting ratings and rankings
func (c *RecruitingAPIController) GetRecruitingPlayers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
		param := HighSchool
		classificationParam = param
	}
	var positionParam string
	if query.Has("position") {
		param := query.Get("position")

		positionParam = param
	} else {
	}
	var stateParam string
	if query.Has("state") {
		param := query.Get("state")

		stateParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	result, err := c.service.GetRecruitingPlayers(r.Context(), yearParam, classificationParam, positionParam, stateParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecruitingTeams - Team recruiting rankings and ratings
func (c *RecruitingAPIController) GetRecruitingTeams(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	result, err := c.service.GetRecruitingTeams(r.Context(), yearParam, teamParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
