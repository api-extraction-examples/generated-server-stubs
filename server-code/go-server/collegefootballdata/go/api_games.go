/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GamesAPIController binds http requests to an api service and writes the service results to the http response
type GamesAPIController struct {
	service GamesAPIServicer
	errorHandler ErrorHandler
}

// GamesAPIOption for how the controller is set up.
type GamesAPIOption func(*GamesAPIController)

// WithGamesAPIErrorHandler inject ErrorHandler into controller
func WithGamesAPIErrorHandler(h ErrorHandler) GamesAPIOption {
	return func(c *GamesAPIController) {
		c.errorHandler = h
	}
}

// NewGamesAPIController creates a default api controller
func NewGamesAPIController(s GamesAPIServicer, opts ...GamesAPIOption) Router {
	controller := &GamesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GamesAPIController
func (c *GamesAPIController) Routes() Routes {
	return Routes{
		"GetAdvancedBoxScore": Route{
			strings.ToUpper("Get"),
			"/game/box/advanced",
			c.GetAdvancedBoxScore,
		},
		"GetCalendar": Route{
			strings.ToUpper("Get"),
			"/calendar",
			c.GetCalendar,
		},
		"GetGameMedia": Route{
			strings.ToUpper("Get"),
			"/games/media",
			c.GetGameMedia,
		},
		"GetGameWeather": Route{
			strings.ToUpper("Get"),
			"/games/weather",
			c.GetGameWeather,
		},
		"GetGames": Route{
			strings.ToUpper("Get"),
			"/games",
			c.GetGames,
		},
		"GetPlayerGameStats": Route{
			strings.ToUpper("Get"),
			"/games/players",
			c.GetPlayerGameStats,
		},
		"GetScoreboard": Route{
			strings.ToUpper("Get"),
			"/scoreboard",
			c.GetScoreboard,
		},
		"GetTeamGameStats": Route{
			strings.ToUpper("Get"),
			"/games/teams",
			c.GetTeamGameStats,
		},
		"GetTeamRecords": Route{
			strings.ToUpper("Get"),
			"/records",
			c.GetTeamRecords,
		},
	}
}

// GetAdvancedBoxScore - Advanced box scores
func (c *GamesAPIController) GetAdvancedBoxScore(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "gameId"}, nil)
		return
	}
	result, err := c.service.GetAdvancedBoxScore(r.Context(), gameIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCalendar - Season calendar
func (c *GamesAPIController) GetCalendar(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	result, err := c.service.GetCalendar(r.Context(), yearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGameMedia - Game media information and schedules
func (c *GamesAPIController) GetGameMedia(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var mediaTypeParam string
	if query.Has("mediaType") {
		param := query.Get("mediaType")

		mediaTypeParam = param
	} else {
	}
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
	}
	result, err := c.service.GetGameMedia(r.Context(), yearParam, weekParam, seasonTypeParam, teamParam, conferenceParam, mediaTypeParam, classificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGameWeather - Game weather information (Patreon only)
func (c *GamesAPIController) GetGameWeather(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
	}
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
	}
	result, err := c.service.GetGameWeather(r.Context(), gameIdParam, yearParam, weekParam, seasonTypeParam, teamParam, conferenceParam, classificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGames - Games and results
func (c *GamesAPIController) GetGames(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1869),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var homeParam string
	if query.Has("home") {
		param := query.Get("home")

		homeParam = param
	} else {
	}
	var awayParam string
	if query.Has("away") {
		param := query.Get("away")

		awayParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var divisionParam string
	if query.Has("division") {
		param := query.Get("division")

		divisionParam = param
	} else {
	}
	var idParam int32
	if query.Has("id") {
		param, err := parseNumericParameter[int32](
			query.Get("id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		idParam = param
	} else {
	}
	result, err := c.service.GetGames(r.Context(), yearParam, weekParam, seasonTypeParam, teamParam, homeParam, awayParam, conferenceParam, divisionParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayerGameStats - Player game stats
func (c *GamesAPIController) GetPlayerGameStats(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var categoryParam string
	if query.Has("category") {
		param := query.Get("category")

		categoryParam = param
	} else {
	}
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
	}
	result, err := c.service.GetPlayerGameStats(r.Context(), yearParam, weekParam, seasonTypeParam, teamParam, conferenceParam, categoryParam, gameIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetScoreboard - Live game results (Patreon only)
func (c *GamesAPIController) GetScoreboard(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetScoreboard(r.Context(), classificationParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamGameStats - Team game stats
func (c *GamesAPIController) GetTeamGameStats(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
	}
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
	}
	result, err := c.service.GetTeamGameStats(r.Context(), yearParam, weekParam, seasonTypeParam, teamParam, conferenceParam, gameIdParam, classificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamRecords - Team records
func (c *GamesAPIController) GetTeamRecords(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1869),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetTeamRecords(r.Context(), yearParam, teamParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
