/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MetricsAPIController binds http requests to an api service and writes the service results to the http response
type MetricsAPIController struct {
	service MetricsAPIServicer
	errorHandler ErrorHandler
}

// MetricsAPIOption for how the controller is set up.
type MetricsAPIOption func(*MetricsAPIController)

// WithMetricsAPIErrorHandler inject ErrorHandler into controller
func WithMetricsAPIErrorHandler(h ErrorHandler) MetricsAPIOption {
	return func(c *MetricsAPIController) {
		c.errorHandler = h
	}
}

// NewMetricsAPIController creates a default api controller
func NewMetricsAPIController(s MetricsAPIServicer, opts ...MetricsAPIOption) Router {
	controller := &MetricsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MetricsAPIController
func (c *MetricsAPIController) Routes() Routes {
	return Routes{
		"GetGamePPA": Route{
			strings.ToUpper("Get"),
			"/ppa/games",
			c.GetGamePPA,
		},
		"GetPlayerGamePPA": Route{
			strings.ToUpper("Get"),
			"/ppa/players/games",
			c.GetPlayerGamePPA,
		},
		"GetPlayerSeasonPPA": Route{
			strings.ToUpper("Get"),
			"/ppa/players/season",
			c.GetPlayerSeasonPPA,
		},
		"GetPredictedPoints": Route{
			strings.ToUpper("Get"),
			"/ppa/predicted",
			c.GetPredictedPoints,
		},
		"GetPregameWinProbabilities": Route{
			strings.ToUpper("Get"),
			"/metrics/wp/pregame",
			c.GetPregameWinProbabilities,
		},
		"GetTeamPPA": Route{
			strings.ToUpper("Get"),
			"/ppa/teams",
			c.GetTeamPPA,
		},
		"GetWinProbabilityData": Route{
			strings.ToUpper("Get"),
			"/metrics/wp",
			c.GetWinProbabilityData,
		},
	}
}

// GetGamePPA - Team Predicated Points Added (PPA/EPA) by game
func (c *MetricsAPIController) GetGamePPA(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var excludeGarbageTimeParam bool
	if query.Has("excludeGarbageTime") {
		param, err := parseBoolParameter(
			query.Get("excludeGarbageTime"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeGarbageTimeParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	result, err := c.service.GetGamePPA(r.Context(), yearParam, weekParam, teamParam, conferenceParam, excludeGarbageTimeParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayerGamePPA - Player Predicated Points Added (PPA/EPA) broken down by game
func (c *MetricsAPIController) GetPlayerGamePPA(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2013),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var positionParam string
	if query.Has("position") {
		param := query.Get("position")

		positionParam = param
	} else {
	}
	var playerIdParam int32
	if query.Has("playerId") {
		param, err := parseNumericParameter[int32](
			query.Get("playerId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		playerIdParam = param
	} else {
	}
	var thresholdParam string
	if query.Has("threshold") {
		param := query.Get("threshold")

		thresholdParam = param
	} else {
	}
	var excludeGarbageTimeParam bool
	if query.Has("excludeGarbageTime") {
		param, err := parseBoolParameter(
			query.Get("excludeGarbageTime"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeGarbageTimeParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	result, err := c.service.GetPlayerGamePPA(r.Context(), yearParam, weekParam, teamParam, positionParam, playerIdParam, thresholdParam, excludeGarbageTimeParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayerSeasonPPA - Player Predicated Points Added (PPA/EPA) broken down by season
func (c *MetricsAPIController) GetPlayerSeasonPPA(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2013),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var positionParam string
	if query.Has("position") {
		param := query.Get("position")

		positionParam = param
	} else {
	}
	var playerIdParam int32
	if query.Has("playerId") {
		param, err := parseNumericParameter[int32](
			query.Get("playerId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		playerIdParam = param
	} else {
	}
	var thresholdParam string
	if query.Has("threshold") {
		param := query.Get("threshold")

		thresholdParam = param
	} else {
	}
	var excludeGarbageTimeParam bool
	if query.Has("excludeGarbageTime") {
		param, err := parseBoolParameter(
			query.Get("excludeGarbageTime"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeGarbageTimeParam = param
	} else {
	}
	result, err := c.service.GetPlayerSeasonPPA(r.Context(), yearParam, teamParam, conferenceParam, positionParam, playerIdParam, thresholdParam, excludeGarbageTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPredictedPoints - Predicted Points (i.e. Expected Points or EP)
func (c *MetricsAPIController) GetPredictedPoints(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var downParam int32
	if query.Has("down") {
		param, err := parseNumericParameter[int32](
			query.Get("down"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](4),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		downParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "down"}, nil)
		return
	}
	var distanceParam int32
	if query.Has("distance") {
		param, err := parseNumericParameter[int32](
			query.Get("distance"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](99),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		distanceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "distance"}, nil)
		return
	}
	result, err := c.service.GetPredictedPoints(r.Context(), downParam, distanceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPregameWinProbabilities - Pregame win probability data
func (c *MetricsAPIController) GetPregameWinProbabilities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
	}
	result, err := c.service.GetPregameWinProbabilities(r.Context(), yearParam, weekParam, teamParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamPPA - Predicted Points Added (PPA/EPA) data by team
func (c *MetricsAPIController) GetTeamPPA(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var excludeGarbageTimeParam bool
	if query.Has("excludeGarbageTime") {
		param, err := parseBoolParameter(
			query.Get("excludeGarbageTime"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeGarbageTimeParam = param
	} else {
	}
	result, err := c.service.GetTeamPPA(r.Context(), yearParam, teamParam, conferenceParam, excludeGarbageTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWinProbabilityData - Win probability chart data
func (c *MetricsAPIController) GetWinProbabilityData(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "gameId"}, nil)
		return
	}
	result, err := c.service.GetWinProbabilityData(r.Context(), gameIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
