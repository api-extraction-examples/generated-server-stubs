/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BettingAPIController binds http requests to an api service and writes the service results to the http response
type BettingAPIController struct {
	service BettingAPIServicer
	errorHandler ErrorHandler
}

// BettingAPIOption for how the controller is set up.
type BettingAPIOption func(*BettingAPIController)

// WithBettingAPIErrorHandler inject ErrorHandler into controller
func WithBettingAPIErrorHandler(h ErrorHandler) BettingAPIOption {
	return func(c *BettingAPIController) {
		c.errorHandler = h
	}
}

// NewBettingAPIController creates a default api controller
func NewBettingAPIController(s BettingAPIServicer, opts ...BettingAPIOption) Router {
	controller := &BettingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BettingAPIController
func (c *BettingAPIController) Routes() Routes {
	return Routes{
		"GetLines": Route{
			strings.ToUpper("Get"),
			"/lines",
			c.GetLines,
		},
	}
}

// GetLines - Betting lines
func (c *BettingAPIController) GetLines(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
	}
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2013),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var homeParam string
	if query.Has("home") {
		param := query.Get("home")

		homeParam = param
	} else {
	}
	var awayParam string
	if query.Has("away") {
		param := query.Get("away")

		awayParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetLines(r.Context(), gameIdParam, yearParam, weekParam, seasonTypeParam, teamParam, homeParam, awayParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
