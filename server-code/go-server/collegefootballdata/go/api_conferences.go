/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConferencesAPIController binds http requests to an api service and writes the service results to the http response
type ConferencesAPIController struct {
	service ConferencesAPIServicer
	errorHandler ErrorHandler
}

// ConferencesAPIOption for how the controller is set up.
type ConferencesAPIOption func(*ConferencesAPIController)

// WithConferencesAPIErrorHandler inject ErrorHandler into controller
func WithConferencesAPIErrorHandler(h ErrorHandler) ConferencesAPIOption {
	return func(c *ConferencesAPIController) {
		c.errorHandler = h
	}
}

// NewConferencesAPIController creates a default api controller
func NewConferencesAPIController(s ConferencesAPIServicer, opts ...ConferencesAPIOption) Router {
	controller := &ConferencesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConferencesAPIController
func (c *ConferencesAPIController) Routes() Routes {
	return Routes{
		"GetConferences": Route{
			strings.ToUpper("Get"),
			"/conferences",
			c.GetConferences,
		},
	}
}

// GetConferences - Conferences
func (c *ConferencesAPIController) GetConferences(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetConferences(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
