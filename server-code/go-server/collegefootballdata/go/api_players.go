/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PlayersAPIController binds http requests to an api service and writes the service results to the http response
type PlayersAPIController struct {
	service PlayersAPIServicer
	errorHandler ErrorHandler
}

// PlayersAPIOption for how the controller is set up.
type PlayersAPIOption func(*PlayersAPIController)

// WithPlayersAPIErrorHandler inject ErrorHandler into controller
func WithPlayersAPIErrorHandler(h ErrorHandler) PlayersAPIOption {
	return func(c *PlayersAPIController) {
		c.errorHandler = h
	}
}

// NewPlayersAPIController creates a default api controller
func NewPlayersAPIController(s PlayersAPIServicer, opts ...PlayersAPIOption) Router {
	controller := &PlayersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PlayersAPIController
func (c *PlayersAPIController) Routes() Routes {
	return Routes{
		"GetPlayerSeasonStats": Route{
			strings.ToUpper("Get"),
			"/stats/player/season",
			c.GetPlayerSeasonStats,
		},
		"GetPlayerUsage": Route{
			strings.ToUpper("Get"),
			"/player/usage",
			c.GetPlayerUsage,
		},
		"GetReturningProduction": Route{
			strings.ToUpper("Get"),
			"/player/returning",
			c.GetReturningProduction,
		},
		"GetTransferPortal": Route{
			strings.ToUpper("Get"),
			"/player/portal",
			c.GetTransferPortal,
		},
		"PlayerSearch": Route{
			strings.ToUpper("Get"),
			"/player/search",
			c.PlayerSearch,
		},
	}
}

// GetPlayerSeasonStats - Player stats by season
func (c *PlayersAPIController) GetPlayerSeasonStats(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var startWeekParam int32
	if query.Has("startWeek") {
		param, err := parseNumericParameter[int32](
			query.Get("startWeek"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startWeekParam = param
	} else {
	}
	var endWeekParam int32
	if query.Has("endWeek") {
		param, err := parseNumericParameter[int32](
			query.Get("endWeek"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endWeekParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
	}
	var categoryParam string
	if query.Has("category") {
		param := query.Get("category")

		categoryParam = param
	} else {
	}
	result, err := c.service.GetPlayerSeasonStats(r.Context(), yearParam, teamParam, conferenceParam, startWeekParam, endWeekParam, seasonTypeParam, categoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayerUsage - Player usage metrics broken down by season
func (c *PlayersAPIController) GetPlayerUsage(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2013),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var positionParam string
	if query.Has("position") {
		param := query.Get("position")

		positionParam = param
	} else {
	}
	var playerIdParam int32
	if query.Has("playerId") {
		param, err := parseNumericParameter[int32](
			query.Get("playerId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		playerIdParam = param
	} else {
	}
	var excludeGarbageTimeParam bool
	if query.Has("excludeGarbageTime") {
		param, err := parseBoolParameter(
			query.Get("excludeGarbageTime"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeGarbageTimeParam = param
	} else {
	}
	result, err := c.service.GetPlayerUsage(r.Context(), yearParam, teamParam, conferenceParam, positionParam, playerIdParam, excludeGarbageTimeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetReturningProduction - Team returning production metrics
func (c *PlayersAPIController) GetReturningProduction(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2014),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetReturningProduction(r.Context(), yearParam, teamParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransferPortal - Transfer portal by season
func (c *PlayersAPIController) GetTransferPortal(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	result, err := c.service.GetTransferPortal(r.Context(), yearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerSearch - Search for player information
func (c *PlayersAPIController) PlayerSearch(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var searchTermParam string
	if query.Has("searchTerm") {
		param := query.Get("searchTerm")

		searchTermParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "searchTerm"}, nil)
		return
	}
	var positionParam string
	if query.Has("position") {
		param := query.Get("position")

		positionParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	result, err := c.service.PlayerSearch(r.Context(), searchTermParam, positionParam, teamParam, yearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
