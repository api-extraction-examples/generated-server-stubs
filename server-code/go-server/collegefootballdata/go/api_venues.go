/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VenuesAPIController binds http requests to an api service and writes the service results to the http response
type VenuesAPIController struct {
	service VenuesAPIServicer
	errorHandler ErrorHandler
}

// VenuesAPIOption for how the controller is set up.
type VenuesAPIOption func(*VenuesAPIController)

// WithVenuesAPIErrorHandler inject ErrorHandler into controller
func WithVenuesAPIErrorHandler(h ErrorHandler) VenuesAPIOption {
	return func(c *VenuesAPIController) {
		c.errorHandler = h
	}
}

// NewVenuesAPIController creates a default api controller
func NewVenuesAPIController(s VenuesAPIServicer, opts ...VenuesAPIOption) Router {
	controller := &VenuesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VenuesAPIController
func (c *VenuesAPIController) Routes() Routes {
	return Routes{
		"GetVenues": Route{
			strings.ToUpper("Get"),
			"/venues",
			c.GetVenues,
		},
	}
}

// GetVenues - Arena and venue information
func (c *VenuesAPIController) GetVenues(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVenues(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
