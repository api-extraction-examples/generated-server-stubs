/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type BoxScoreTeams struct {

	CumulativePpa []BoxScoreTeamsCumulativePpaInner `json:"cumulativePpa,omitempty"`

	Explosiveness []BoxScoreTeamsExplosivenessInner `json:"explosiveness,omitempty"`

	FieldPosition []BoxScoreTeamsFieldPositionInner `json:"fieldPosition,omitempty"`

	Havoc []BoxScoreTeamsHavocInner `json:"havoc,omitempty"`

	Ppa []BoxScoreTeamsCumulativePpaInner `json:"ppa,omitempty"`

	Rushing []BoxScoreTeamsRushingInner `json:"rushing,omitempty"`

	ScoringOpportunities []BoxScoreTeamsScoringOpportunitiesInner `json:"scoringOpportunities,omitempty"`

	SuccessRates []BoxScoreTeamsSuccessRatesInner `json:"successRates,omitempty"`
}

// AssertBoxScoreTeamsRequired checks if the required fields are not zero-ed
func AssertBoxScoreTeamsRequired(obj BoxScoreTeams) error {
	for _, el := range obj.CumulativePpa {
		if err := AssertBoxScoreTeamsCumulativePpaInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Explosiveness {
		if err := AssertBoxScoreTeamsExplosivenessInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.FieldPosition {
		if err := AssertBoxScoreTeamsFieldPositionInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Havoc {
		if err := AssertBoxScoreTeamsHavocInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Ppa {
		if err := AssertBoxScoreTeamsCumulativePpaInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Rushing {
		if err := AssertBoxScoreTeamsRushingInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.ScoringOpportunities {
		if err := AssertBoxScoreTeamsScoringOpportunitiesInnerRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.SuccessRates {
		if err := AssertBoxScoreTeamsSuccessRatesInnerRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertBoxScoreTeamsConstraints checks if the values respects the defined constraints
func AssertBoxScoreTeamsConstraints(obj BoxScoreTeams) error {
	return nil
}
