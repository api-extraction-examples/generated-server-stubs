/*
 * College Football Data API
 *
 * This is an API for accessing all sorts of college football data.  Please note that API keys should be supplied with \"Bearer \" prepended (e.g. \"Bearer your_key\"). API keys can be acquired from the CollegeFootballData.com website.
 *
 * API version: 4.4.12
 * Contact: admin@collegefootballdata.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PlaysAPIController binds http requests to an api service and writes the service results to the http response
type PlaysAPIController struct {
	service PlaysAPIServicer
	errorHandler ErrorHandler
}

// PlaysAPIOption for how the controller is set up.
type PlaysAPIOption func(*PlaysAPIController)

// WithPlaysAPIErrorHandler inject ErrorHandler into controller
func WithPlaysAPIErrorHandler(h ErrorHandler) PlaysAPIOption {
	return func(c *PlaysAPIController) {
		c.errorHandler = h
	}
}

// NewPlaysAPIController creates a default api controller
func NewPlaysAPIController(s PlaysAPIServicer, opts ...PlaysAPIOption) Router {
	controller := &PlaysAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PlaysAPIController
func (c *PlaysAPIController) Routes() Routes {
	return Routes{
		"GetLivePlays": Route{
			strings.ToUpper("Get"),
			"/live/plays",
			c.GetLivePlays,
		},
		"GetPlayStatTypes": Route{
			strings.ToUpper("Get"),
			"/play/stat/types",
			c.GetPlayStatTypes,
		},
		"GetPlayStats": Route{
			strings.ToUpper("Get"),
			"/play/stats",
			c.GetPlayStats,
		},
		"GetPlayTypes": Route{
			strings.ToUpper("Get"),
			"/play/types",
			c.GetPlayTypes,
		},
		"GetPlays": Route{
			strings.ToUpper("Get"),
			"/plays",
			c.GetPlays,
		},
	}
}

// GetLivePlays - Live metrics and PBP (Patreon only)
func (c *PlaysAPIController) GetLivePlays(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam int32
	if query.Has("id") {
		param, err := parseNumericParameter[int32](
			query.Get("id"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		idParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "id"}, nil)
		return
	}
	result, err := c.service.GetLivePlays(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayStatTypes - Types of player play stats
func (c *PlaysAPIController) GetPlayStatTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPlayStatTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayStats - Play stats by play
func (c *PlaysAPIController) GetPlayStats(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2013),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var gameIdParam int32
	if query.Has("gameId") {
		param, err := parseNumericParameter[int32](
			query.Get("gameId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		gameIdParam = param
	} else {
	}
	var athleteIdParam int32
	if query.Has("athleteId") {
		param, err := parseNumericParameter[int32](
			query.Get("athleteId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		athleteIdParam = param
	} else {
	}
	var statTypeIdParam int32
	if query.Has("statTypeId") {
		param, err := parseNumericParameter[int32](
			query.Get("statTypeId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		statTypeIdParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	result, err := c.service.GetPlayStats(r.Context(), yearParam, weekParam, teamParam, gameIdParam, athleteIdParam, statTypeIdParam, seasonTypeParam, conferenceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlayTypes - Play types
func (c *PlaysAPIController) GetPlayTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPlayTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlays - Play by play data
func (c *PlaysAPIController) GetPlays(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var yearParam int32
	if query.Has("year") {
		param, err := parseNumericParameter[int32](
			query.Get("year"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](2001),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "year"}, nil)
		return
	}
	var weekParam int32
	if query.Has("week") {
		param, err := parseNumericParameter[int32](
			query.Get("week"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](16),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		weekParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "week"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("seasonType") {
		param := query.Get("seasonType")

		seasonTypeParam = param
	} else {
		param := regular
		seasonTypeParam = param
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var offenseParam string
	if query.Has("offense") {
		param := query.Get("offense")

		offenseParam = param
	} else {
	}
	var defenseParam string
	if query.Has("defense") {
		param := query.Get("defense")

		defenseParam = param
	} else {
	}
	var conferenceParam string
	if query.Has("conference") {
		param := query.Get("conference")

		conferenceParam = param
	} else {
	}
	var offenseConferenceParam string
	if query.Has("offenseConference") {
		param := query.Get("offenseConference")

		offenseConferenceParam = param
	} else {
	}
	var defenseConferenceParam string
	if query.Has("defenseConference") {
		param := query.Get("defenseConference")

		defenseConferenceParam = param
	} else {
	}
	var playTypeParam int32
	if query.Has("playType") {
		param, err := parseNumericParameter[int32](
			query.Get("playType"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		playTypeParam = param
	} else {
	}
	var classificationParam string
	if query.Has("classification") {
		param := query.Get("classification")

		classificationParam = param
	} else {
	}
	result, err := c.service.GetPlays(r.Context(), yearParam, weekParam, seasonTypeParam, teamParam, offenseParam, defenseParam, conferenceParam, offenseConferenceParam, defenseConferenceParam, playTypeParam, classificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
