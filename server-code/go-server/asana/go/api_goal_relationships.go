/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GoalRelationshipsAPIController binds http requests to an api service and writes the service results to the http response
type GoalRelationshipsAPIController struct {
	service GoalRelationshipsAPIServicer
	errorHandler ErrorHandler
}

// GoalRelationshipsAPIOption for how the controller is set up.
type GoalRelationshipsAPIOption func(*GoalRelationshipsAPIController)

// WithGoalRelationshipsAPIErrorHandler inject ErrorHandler into controller
func WithGoalRelationshipsAPIErrorHandler(h ErrorHandler) GoalRelationshipsAPIOption {
	return func(c *GoalRelationshipsAPIController) {
		c.errorHandler = h
	}
}

// NewGoalRelationshipsAPIController creates a default api controller
func NewGoalRelationshipsAPIController(s GoalRelationshipsAPIServicer, opts ...GoalRelationshipsAPIOption) Router {
	controller := &GoalRelationshipsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GoalRelationshipsAPIController
func (c *GoalRelationshipsAPIController) Routes() Routes {
	return Routes{
		"AddSupportingRelationship": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/addSupportingRelationship",
			c.AddSupportingRelationship,
		},
		"GetGoalRelationship": Route{
			strings.ToUpper("Get"),
			"/api/1.0/goal_relationships/{goal_relationship_gid}",
			c.GetGoalRelationship,
		},
		"GetGoalRelationships": Route{
			strings.ToUpper("Get"),
			"/api/1.0/goal_relationships",
			c.GetGoalRelationships,
		},
		"RemoveSupportingRelationship": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/removeSupportingRelationship",
			c.RemoveSupportingRelationship,
		},
		"UpdateGoalRelationship": Route{
			strings.ToUpper("Put"),
			"/api/1.0/goal_relationships/{goal_relationship_gid}",
			c.UpdateGoalRelationship,
		},
	}
}

// AddSupportingRelationship - Add a supporting goal relationship
func (c *GoalRelationshipsAPIController) AddSupportingRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	addSupportingRelationshipRequestParam := AddSupportingRelationshipRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddSupportingRelationshipRequestRequired(addSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddSupportingRelationshipRequestConstraints(addSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddSupportingRelationship(r.Context(), goalGidParam, addSupportingRelationshipRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoalRelationship - Get a goal relationship
func (c *GoalRelationshipsAPIController) GetGoalRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalRelationshipGidParam := params["goal_relationship_gid"]
	if goalRelationshipGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_relationship_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetGoalRelationship(r.Context(), goalRelationshipGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoalRelationships - Get goal relationships
func (c *GoalRelationshipsAPIController) GetGoalRelationships(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var supportedGoalParam string
	if query.Has("supported_goal") {
		param := query.Get("supported_goal")

		supportedGoalParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "supported_goal"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var resourceSubtypeParam string
	if query.Has("resource_subtype") {
		param := query.Get("resource_subtype")

		resourceSubtypeParam = param
	} else {
	}
	result, err := c.service.GetGoalRelationships(r.Context(), supportedGoalParam, optPrettyParam, optFieldsParam, resourceSubtypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveSupportingRelationship - Removes a supporting goal relationship
func (c *GoalRelationshipsAPIController) RemoveSupportingRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	removeSupportingRelationshipRequestParam := RemoveSupportingRelationshipRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveSupportingRelationshipRequestRequired(removeSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveSupportingRelationshipRequestConstraints(removeSupportingRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveSupportingRelationship(r.Context(), goalGidParam, removeSupportingRelationshipRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoalRelationship - Update a goal relationship
func (c *GoalRelationshipsAPIController) UpdateGoalRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalRelationshipGidParam := params["goal_relationship_gid"]
	if goalRelationshipGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_relationship_gid"}, nil)
		return
	}
	updateGoalRelationshipRequestParam := UpdateGoalRelationshipRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateGoalRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateGoalRelationshipRequestRequired(updateGoalRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateGoalRelationshipRequestConstraints(updateGoalRelationshipRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateGoalRelationship(r.Context(), goalRelationshipGidParam, updateGoalRelationshipRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
