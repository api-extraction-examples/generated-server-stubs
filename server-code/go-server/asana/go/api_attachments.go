/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"os"

	"github.com/gorilla/mux"
)

// AttachmentsAPIController binds http requests to an api service and writes the service results to the http response
type AttachmentsAPIController struct {
	service AttachmentsAPIServicer
	errorHandler ErrorHandler
}

// AttachmentsAPIOption for how the controller is set up.
type AttachmentsAPIOption func(*AttachmentsAPIController)

// WithAttachmentsAPIErrorHandler inject ErrorHandler into controller
func WithAttachmentsAPIErrorHandler(h ErrorHandler) AttachmentsAPIOption {
	return func(c *AttachmentsAPIController) {
		c.errorHandler = h
	}
}

// NewAttachmentsAPIController creates a default api controller
func NewAttachmentsAPIController(s AttachmentsAPIServicer, opts ...AttachmentsAPIOption) Router {
	controller := &AttachmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AttachmentsAPIController
func (c *AttachmentsAPIController) Routes() Routes {
	return Routes{
		"CreateAttachmentForObject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/attachments",
			c.CreateAttachmentForObject,
		},
		"DeleteAttachment": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/attachments/{attachment_gid}",
			c.DeleteAttachment,
		},
		"GetAttachment": Route{
			strings.ToUpper("Get"),
			"/api/1.0/attachments/{attachment_gid}",
			c.GetAttachment,
		},
		"GetAttachmentsForObject": Route{
			strings.ToUpper("Get"),
			"/api/1.0/attachments",
			c.GetAttachmentsForObject,
		},
	}
}

// CreateAttachmentForObject - Upload an attachment
func (c *AttachmentsAPIController) CreateAttachmentForObject(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseMultipartForm(32 << 20); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	
	
	connectToAppParam := r.FormValue("connect_to_app")
	var fileParam *os.File
	{
		param, err := ReadFormFileToTempFile(r, "file")
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fileParam = param
	}
	
	
	
	
	nameParam := r.FormValue("name")
	
	
	parentParam := r.FormValue("parent")
	
	
	resourceSubtypeParam := r.FormValue("resource_subtype")
	
	
	urlParam := r.FormValue("url")
	result, err := c.service.CreateAttachmentForObject(r.Context(), optPrettyParam, optFieldsParam, connectToAppParam, fileParam, nameParam, parentParam, resourceSubtypeParam, urlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteAttachment - Delete an attachment
func (c *AttachmentsAPIController) DeleteAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	attachmentGidParam := params["attachment_gid"]
	if attachmentGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"attachment_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteAttachment(r.Context(), attachmentGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachment - Get an attachment
func (c *AttachmentsAPIController) GetAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	attachmentGidParam := params["attachment_gid"]
	if attachmentGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"attachment_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetAttachment(r.Context(), attachmentGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachmentsForObject - Get attachments from an object
func (c *AttachmentsAPIController) GetAttachmentsForObject(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var parentParam string
	if query.Has("parent") {
		param := query.Get("parent")

		parentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "parent"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetAttachmentsForObject(r.Context(), parentParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
