/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectsAPIController struct {
	service ProjectsAPIServicer
	errorHandler ErrorHandler
}

// ProjectsAPIOption for how the controller is set up.
type ProjectsAPIOption func(*ProjectsAPIController)

// WithProjectsAPIErrorHandler inject ErrorHandler into controller
func WithProjectsAPIErrorHandler(h ErrorHandler) ProjectsAPIOption {
	return func(c *ProjectsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectsAPIController creates a default api controller
func NewProjectsAPIController(s ProjectsAPIServicer, opts ...ProjectsAPIOption) Router {
	controller := &ProjectsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectsAPIController
func (c *ProjectsAPIController) Routes() Routes {
	return Routes{
		"AddCustomFieldSettingForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/addCustomFieldSetting",
			c.AddCustomFieldSettingForProject,
		},
		"AddFollowersForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/addFollowers",
			c.AddFollowersForProject,
		},
		"AddMembersForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/addMembers",
			c.AddMembersForProject,
		},
		"CreateProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects",
			c.CreateProject,
		},
		"CreateProjectForTeam": Route{
			strings.ToUpper("Post"),
			"/api/1.0/teams/{team_gid}/projects",
			c.CreateProjectForTeam,
		},
		"CreateProjectForWorkspace": Route{
			strings.ToUpper("Post"),
			"/api/1.0/workspaces/{workspace_gid}/projects",
			c.CreateProjectForWorkspace,
		},
		"DeleteProject": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/projects/{project_gid}",
			c.DeleteProject,
		},
		"DuplicateProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/duplicate",
			c.DuplicateProject,
		},
		"GetProject": Route{
			strings.ToUpper("Get"),
			"/api/1.0/projects/{project_gid}",
			c.GetProject,
		},
		"GetProjects": Route{
			strings.ToUpper("Get"),
			"/api/1.0/projects",
			c.GetProjects,
		},
		"GetProjectsForTask": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks/{task_gid}/projects",
			c.GetProjectsForTask,
		},
		"GetProjectsForTeam": Route{
			strings.ToUpper("Get"),
			"/api/1.0/teams/{team_gid}/projects",
			c.GetProjectsForTeam,
		},
		"GetProjectsForWorkspace": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces/{workspace_gid}/projects",
			c.GetProjectsForWorkspace,
		},
		"GetTaskCountsForProject": Route{
			strings.ToUpper("Get"),
			"/api/1.0/projects/{project_gid}/task_counts",
			c.GetTaskCountsForProject,
		},
		"ProjectSaveAsTemplate": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/saveAsTemplate",
			c.ProjectSaveAsTemplate,
		},
		"RemoveCustomFieldSettingForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/removeCustomFieldSetting",
			c.RemoveCustomFieldSettingForProject,
		},
		"RemoveFollowersForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/removeFollowers",
			c.RemoveFollowersForProject,
		},
		"RemoveMembersForProject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/removeMembers",
			c.RemoveMembersForProject,
		},
		"UpdateProject": Route{
			strings.ToUpper("Put"),
			"/api/1.0/projects/{project_gid}",
			c.UpdateProject,
		},
	}
}

// AddCustomFieldSettingForProject - Add a custom field to a project
func (c *ProjectsAPIController) AddCustomFieldSettingForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	addCustomFieldSettingForPortfolioRequestParam := AddCustomFieldSettingForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddCustomFieldSettingForPortfolioRequestRequired(addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddCustomFieldSettingForPortfolioRequestConstraints(addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	result, err := c.service.AddCustomFieldSettingForProject(r.Context(), projectGidParam, addCustomFieldSettingForPortfolioRequestParam, optPrettyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddFollowersForProject - Add followers to a project
func (c *ProjectsAPIController) AddFollowersForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	addFollowersForProjectRequestParam := AddFollowersForProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddFollowersForProjectRequestRequired(addFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddFollowersForProjectRequestConstraints(addFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddFollowersForProject(r.Context(), projectGidParam, addFollowersForProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddMembersForProject - Add users to a project
func (c *ProjectsAPIController) AddMembersForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	addMembersForPortfolioRequestParam := AddMembersForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddMembersForPortfolioRequestRequired(addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddMembersForPortfolioRequestConstraints(addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddMembersForProject(r.Context(), projectGidParam, addMembersForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProject - Create a project
func (c *ProjectsAPIController) CreateProject(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createProjectRequestParam := CreateProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateProjectRequestRequired(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateProjectRequestConstraints(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateProject(r.Context(), createProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectForTeam - Create a project in a team
func (c *ProjectsAPIController) CreateProjectForTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	teamGidParam := params["team_gid"]
	if teamGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"team_gid"}, nil)
		return
	}
	createProjectRequestParam := CreateProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateProjectRequestRequired(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateProjectRequestConstraints(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateProjectForTeam(r.Context(), teamGidParam, createProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProjectForWorkspace - Create a project in a workspace
func (c *ProjectsAPIController) CreateProjectForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	createProjectRequestParam := CreateProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateProjectRequestRequired(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateProjectRequestConstraints(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateProjectForWorkspace(r.Context(), workspaceGidParam, createProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProject - Delete a project
func (c *ProjectsAPIController) DeleteProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteProject(r.Context(), projectGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DuplicateProject - Duplicate a project
func (c *ProjectsAPIController) DuplicateProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	duplicateProjectRequestParam := DuplicateProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&duplicateProjectRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDuplicateProjectRequestRequired(duplicateProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDuplicateProjectRequestConstraints(duplicateProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DuplicateProject(r.Context(), projectGidParam, optPrettyParam, optFieldsParam, duplicateProjectRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProject - Get a project
func (c *ProjectsAPIController) GetProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetProject(r.Context(), projectGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjects - Get multiple projects
func (c *ProjectsAPIController) GetProjects(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var archivedParam bool
	if query.Has("archived") {
		param, err := parseBoolParameter(
			query.Get("archived"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		archivedParam = param
	} else {
	}
	result, err := c.service.GetProjects(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam, workspaceParam, teamParam, archivedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectsForTask - Get projects a task is in
func (c *ProjectsAPIController) GetProjectsForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetProjectsForTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectsForTeam - Get a team's projects
func (c *ProjectsAPIController) GetProjectsForTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	teamGidParam := params["team_gid"]
	if teamGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"team_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var archivedParam bool
	if query.Has("archived") {
		param, err := parseBoolParameter(
			query.Get("archived"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		archivedParam = param
	} else {
	}
	result, err := c.service.GetProjectsForTeam(r.Context(), teamGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam, archivedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectsForWorkspace - Get all projects in a workspace
func (c *ProjectsAPIController) GetProjectsForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var archivedParam bool
	if query.Has("archived") {
		param, err := parseBoolParameter(
			query.Get("archived"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		archivedParam = param
	} else {
	}
	result, err := c.service.GetProjectsForWorkspace(r.Context(), workspaceGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam, archivedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTaskCountsForProject - Get task count of a project
func (c *ProjectsAPIController) GetTaskCountsForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTaskCountsForProject(r.Context(), projectGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProjectSaveAsTemplate - Create a project template from a project
func (c *ProjectsAPIController) ProjectSaveAsTemplate(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	projectSaveAsTemplateRequestParam := ProjectSaveAsTemplateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectSaveAsTemplateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectSaveAsTemplateRequestRequired(projectSaveAsTemplateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectSaveAsTemplateRequestConstraints(projectSaveAsTemplateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.ProjectSaveAsTemplate(r.Context(), projectGidParam, projectSaveAsTemplateRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveCustomFieldSettingForProject - Remove a custom field from a project
func (c *ProjectsAPIController) RemoveCustomFieldSettingForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	removeCustomFieldSettingForPortfolioRequestParam := RemoveCustomFieldSettingForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveCustomFieldSettingForPortfolioRequestRequired(removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveCustomFieldSettingForPortfolioRequestConstraints(removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	result, err := c.service.RemoveCustomFieldSettingForProject(r.Context(), projectGidParam, removeCustomFieldSettingForPortfolioRequestParam, optPrettyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveFollowersForProject - Remove followers from a project
func (c *ProjectsAPIController) RemoveFollowersForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	removeFollowersForProjectRequestParam := RemoveFollowersForProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveFollowersForProjectRequestRequired(removeFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveFollowersForProjectRequestConstraints(removeFollowersForProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveFollowersForProject(r.Context(), projectGidParam, removeFollowersForProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveMembersForProject - Remove users from a project
func (c *ProjectsAPIController) RemoveMembersForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	removeMembersForPortfolioRequestParam := RemoveMembersForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveMembersForPortfolioRequestRequired(removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveMembersForPortfolioRequestConstraints(removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveMembersForProject(r.Context(), projectGidParam, removeMembersForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProject - Update a project
func (c *ProjectsAPIController) UpdateProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	createProjectRequestParam := CreateProjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createProjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateProjectRequestRequired(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateProjectRequestConstraints(createProjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateProject(r.Context(), projectGidParam, createProjectRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
