/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// JobsAPIController binds http requests to an api service and writes the service results to the http response
type JobsAPIController struct {
	service JobsAPIServicer
	errorHandler ErrorHandler
}

// JobsAPIOption for how the controller is set up.
type JobsAPIOption func(*JobsAPIController)

// WithJobsAPIErrorHandler inject ErrorHandler into controller
func WithJobsAPIErrorHandler(h ErrorHandler) JobsAPIOption {
	return func(c *JobsAPIController) {
		c.errorHandler = h
	}
}

// NewJobsAPIController creates a default api controller
func NewJobsAPIController(s JobsAPIServicer, opts ...JobsAPIOption) Router {
	controller := &JobsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the JobsAPIController
func (c *JobsAPIController) Routes() Routes {
	return Routes{
		"GetJob": Route{
			strings.ToUpper("Get"),
			"/api/1.0/jobs/{job_gid}",
			c.GetJob,
		},
	}
}

// GetJob - Get a job by id
func (c *JobsAPIController) GetJob(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	jobGidParam := params["job_gid"]
	if jobGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"job_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetJob(r.Context(), jobGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
