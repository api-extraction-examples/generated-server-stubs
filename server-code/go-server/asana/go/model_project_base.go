/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



type ProjectBase struct {

	// Globally unique identifier of the resource, as a string.
	Gid string `json:"gid,omitempty"`

	// The base type of this resource.
	ResourceType string `json:"resource_type,omitempty"`

	// Name of the project. This is generally a short sentence fragment that fits on a line in the UI for maximum readability. However, it can be longer.
	Name string `json:"name,omitempty"`

	// True if the project is archived, false if not. Archived projects do not show in the UI by default and may be treated differently for queries.
	Archived bool `json:"archived,omitempty"`

	// Color of the project.
	Color *string `json:"color,omitempty"`

	// The time at which this resource was created.
	CreatedAt time.Time `json:"created_at,omitempty"`

	CurrentStatus *ProjectBaseAllOfCurrentStatus `json:"current_status,omitempty"`

	CurrentStatusUpdate *ProjectBaseAllOfCurrentStatusUpdate `json:"current_status_update,omitempty"`

	// Array of Custom Field Settings (in compact form).
	CustomFieldSettings []CustomFieldSettingResponse `json:"custom_field_settings,omitempty"`

	// The default view (list, board, calendar, or timeline) of a project.
	DefaultView string `json:"default_view,omitempty"`

	// *Deprecated: new integrations should prefer the `due_on` field.*
	DueDate *time.Time `json:"due_date,omitempty"`

	// The day on which this project is due. This takes a date with format YYYY-MM-DD.
	DueOn *time.Time `json:"due_on,omitempty"`

	// [Opt In](/docs/input-output-options). The notes of the project with formatting as HTML.
	HtmlNotes string `json:"html_notes,omitempty"`

	// [Opt In](/docs/input-output-options). *Deprecated - please use a project template endpoint instead (more in [this forum post](https://forum.asana.com/t/a-new-api-for-project-templates/156432)).* Determines if the project is a template.
	IsTemplate bool `json:"is_template,omitempty"`

	// Array of users who are members of this project.
	Members []UserCompact `json:"members,omitempty"`

	// The time at which this project was last modified. *Note: This does not currently reflect any changes in associations such as tasks or comments that may have been added or removed from the project.*
	ModifiedAt time.Time `json:"modified_at,omitempty"`

	// Free-form textual information associated with the project (ie., its description).
	Notes string `json:"notes,omitempty"`

	// True if the project is public to its team.
	Public bool `json:"public,omitempty"`

	// The day on which work for this project begins, or null if the project has no start date. This takes a date with `YYYY-MM-DD` format. *Note: `due_on` or `due_at` must be present in the request when setting or unsetting the `start_on` parameter. Additionally, `start_on` and `due_on` cannot be the same date.*
	StartOn *string `json:"start_on,omitempty"`

	Workspace ProjectBaseAllOfWorkspace `json:"workspace,omitempty"`
}

// AssertProjectBaseRequired checks if the required fields are not zero-ed
func AssertProjectBaseRequired(obj ProjectBase) error {
	if obj.CurrentStatus != nil {
		if err := AssertProjectBaseAllOfCurrentStatusRequired(*obj.CurrentStatus); err != nil {
			return err
		}
	}
	if obj.CurrentStatusUpdate != nil {
		if err := AssertProjectBaseAllOfCurrentStatusUpdateRequired(*obj.CurrentStatusUpdate); err != nil {
			return err
		}
	}
	for _, el := range obj.CustomFieldSettings {
		if err := AssertCustomFieldSettingResponseRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Members {
		if err := AssertUserCompactRequired(el); err != nil {
			return err
		}
	}
	if err := AssertProjectBaseAllOfWorkspaceRequired(obj.Workspace); err != nil {
		return err
	}
	return nil
}

// AssertProjectBaseConstraints checks if the values respects the defined constraints
func AssertProjectBaseConstraints(obj ProjectBase) error {
	return nil
}
