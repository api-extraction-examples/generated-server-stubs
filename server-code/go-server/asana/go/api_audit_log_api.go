/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// AuditLogAPIAPIController binds http requests to an api service and writes the service results to the http response
type AuditLogAPIAPIController struct {
	service AuditLogAPIAPIServicer
	errorHandler ErrorHandler
}

// AuditLogAPIAPIOption for how the controller is set up.
type AuditLogAPIAPIOption func(*AuditLogAPIAPIController)

// WithAuditLogAPIAPIErrorHandler inject ErrorHandler into controller
func WithAuditLogAPIAPIErrorHandler(h ErrorHandler) AuditLogAPIAPIOption {
	return func(c *AuditLogAPIAPIController) {
		c.errorHandler = h
	}
}

// NewAuditLogAPIAPIController creates a default api controller
func NewAuditLogAPIAPIController(s AuditLogAPIAPIServicer, opts ...AuditLogAPIAPIOption) Router {
	controller := &AuditLogAPIAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AuditLogAPIAPIController
func (c *AuditLogAPIAPIController) Routes() Routes {
	return Routes{
		"GetAuditLogEvents": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces/{workspace_gid}/audit_log_events",
			c.GetAuditLogEvents,
		},
	}
}

// GetAuditLogEvents - Get audit log events
func (c *AuditLogAPIAPIController) GetAuditLogEvents(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	var startAtParam time.Time
	if query.Has("start_at"){
		param, err := parseTime(query.Get("start_at"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
	}
	var endAtParam time.Time
	if query.Has("end_at"){
		param, err := parseTime(query.Get("end_at"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endAtParam = param
	} else {
	}
	var eventTypeParam string
	if query.Has("event_type") {
		param := query.Get("event_type")

		eventTypeParam = param
	} else {
	}
	var actorTypeParam string
	if query.Has("actor_type") {
		param := query.Get("actor_type")

		actorTypeParam = param
	} else {
	}
	var actorGidParam string
	if query.Has("actor_gid") {
		param := query.Get("actor_gid")

		actorGidParam = param
	} else {
	}
	var resourceGidParam string
	if query.Has("resource_gid") {
		param := query.Get("resource_gid")

		resourceGidParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetAuditLogEvents(r.Context(), workspaceGidParam, startAtParam, endAtParam, eventTypeParam, actorTypeParam, actorGidParam, resourceGidParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
