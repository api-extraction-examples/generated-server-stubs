/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// GoalsAPIController binds http requests to an api service and writes the service results to the http response
type GoalsAPIController struct {
	service GoalsAPIServicer
	errorHandler ErrorHandler
}

// GoalsAPIOption for how the controller is set up.
type GoalsAPIOption func(*GoalsAPIController)

// WithGoalsAPIErrorHandler inject ErrorHandler into controller
func WithGoalsAPIErrorHandler(h ErrorHandler) GoalsAPIOption {
	return func(c *GoalsAPIController) {
		c.errorHandler = h
	}
}

// NewGoalsAPIController creates a default api controller
func NewGoalsAPIController(s GoalsAPIServicer, opts ...GoalsAPIOption) Router {
	controller := &GoalsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GoalsAPIController
func (c *GoalsAPIController) Routes() Routes {
	return Routes{
		"AddFollowers": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/addFollowers",
			c.AddFollowers,
		},
		"CreateGoal": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals",
			c.CreateGoal,
		},
		"CreateGoalMetric": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/setMetric",
			c.CreateGoalMetric,
		},
		"DeleteGoal": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/goals/{goal_gid}",
			c.DeleteGoal,
		},
		"GetGoal": Route{
			strings.ToUpper("Get"),
			"/api/1.0/goals/{goal_gid}",
			c.GetGoal,
		},
		"GetGoals": Route{
			strings.ToUpper("Get"),
			"/api/1.0/goals",
			c.GetGoals,
		},
		"GetParentGoalsForGoal": Route{
			strings.ToUpper("Get"),
			"/api/1.0/goals/{goal_gid}/parentGoals",
			c.GetParentGoalsForGoal,
		},
		"RemoveFollowers": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/removeFollowers",
			c.RemoveFollowers,
		},
		"UpdateGoal": Route{
			strings.ToUpper("Put"),
			"/api/1.0/goals/{goal_gid}",
			c.UpdateGoal,
		},
		"UpdateGoalMetric": Route{
			strings.ToUpper("Post"),
			"/api/1.0/goals/{goal_gid}/setMetricCurrentValue",
			c.UpdateGoalMetric,
		},
	}
}

// AddFollowers - Add a collaborator to a goal
func (c *GoalsAPIController) AddFollowers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	addFollowersRequestParam := AddFollowersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddFollowersRequestRequired(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddFollowersRequestConstraints(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddFollowers(r.Context(), goalGidParam, addFollowersRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateGoal - Create a goal
func (c *GoalsAPIController) CreateGoal(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createGoalRequestParam := CreateGoalRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createGoalRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateGoalRequestRequired(createGoalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateGoalRequestConstraints(createGoalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.CreateGoal(r.Context(), createGoalRequestParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateGoalMetric - Create a goal metric
func (c *GoalsAPIController) CreateGoalMetric(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	createGoalMetricRequestParam := CreateGoalMetricRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateGoalMetricRequestRequired(createGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateGoalMetricRequestConstraints(createGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateGoalMetric(r.Context(), goalGidParam, createGoalMetricRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteGoal - Delete a goal
func (c *GoalsAPIController) DeleteGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteGoal(r.Context(), goalGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoal - Get a goal
func (c *GoalsAPIController) GetGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetGoal(r.Context(), goalGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGoals - Get goals
func (c *GoalsAPIController) GetGoals(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var portfolioParam string
	if query.Has("portfolio") {
		param := query.Get("portfolio")

		portfolioParam = param
	} else {
	}
	var projectParam string
	if query.Has("project") {
		param := query.Get("project")

		projectParam = param
	} else {
	}
	var isWorkspaceLevelParam bool
	if query.Has("is_workspace_level") {
		param, err := parseBoolParameter(
			query.Get("is_workspace_level"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isWorkspaceLevelParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
	}
	var timePeriodsParam []string
	if query.Has("time_periods") {
		timePeriodsParam = strings.Split(query.Get("time_periods"), ",")
	}
	result, err := c.service.GetGoals(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam, portfolioParam, projectParam, isWorkspaceLevelParam, teamParam, workspaceParam, timePeriodsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetParentGoalsForGoal - Get parent goals from a goal
func (c *GoalsAPIController) GetParentGoalsForGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetParentGoalsForGoal(r.Context(), goalGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveFollowers - Remove a collaborator from a goal
func (c *GoalsAPIController) RemoveFollowers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	addFollowersRequestParam := AddFollowersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddFollowersRequestRequired(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddFollowersRequestConstraints(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveFollowers(r.Context(), goalGidParam, addFollowersRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoal - Update a goal
func (c *GoalsAPIController) UpdateGoal(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	createGoalRequestParam := CreateGoalRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createGoalRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateGoalRequestRequired(createGoalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateGoalRequestConstraints(createGoalRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateGoal(r.Context(), goalGidParam, createGoalRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGoalMetric - Update a goal metric
func (c *GoalsAPIController) UpdateGoalMetric(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	goalGidParam := params["goal_gid"]
	if goalGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"goal_gid"}, nil)
		return
	}
	updateGoalMetricRequestParam := UpdateGoalMetricRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateGoalMetricRequestRequired(updateGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateGoalMetricRequestConstraints(updateGoalMetricRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateGoalMetric(r.Context(), goalGidParam, updateGoalMetricRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
