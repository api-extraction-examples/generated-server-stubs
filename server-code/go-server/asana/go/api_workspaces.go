/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkspacesAPIController binds http requests to an api service and writes the service results to the http response
type WorkspacesAPIController struct {
	service WorkspacesAPIServicer
	errorHandler ErrorHandler
}

// WorkspacesAPIOption for how the controller is set up.
type WorkspacesAPIOption func(*WorkspacesAPIController)

// WithWorkspacesAPIErrorHandler inject ErrorHandler into controller
func WithWorkspacesAPIErrorHandler(h ErrorHandler) WorkspacesAPIOption {
	return func(c *WorkspacesAPIController) {
		c.errorHandler = h
	}
}

// NewWorkspacesAPIController creates a default api controller
func NewWorkspacesAPIController(s WorkspacesAPIServicer, opts ...WorkspacesAPIOption) Router {
	controller := &WorkspacesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkspacesAPIController
func (c *WorkspacesAPIController) Routes() Routes {
	return Routes{
		"AddUserForWorkspace": Route{
			strings.ToUpper("Post"),
			"/api/1.0/workspaces/{workspace_gid}/addUser",
			c.AddUserForWorkspace,
		},
		"GetWorkspace": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces/{workspace_gid}",
			c.GetWorkspace,
		},
		"GetWorkspaces": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces",
			c.GetWorkspaces,
		},
		"RemoveUserForWorkspace": Route{
			strings.ToUpper("Post"),
			"/api/1.0/workspaces/{workspace_gid}/removeUser",
			c.RemoveUserForWorkspace,
		},
		"UpdateWorkspace": Route{
			strings.ToUpper("Put"),
			"/api/1.0/workspaces/{workspace_gid}",
			c.UpdateWorkspace,
		},
	}
}

// AddUserForWorkspace - Add a user to a workspace or organization
func (c *WorkspacesAPIController) AddUserForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	addUserForWorkspaceRequestParam := AddUserForWorkspaceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddUserForWorkspaceRequestRequired(addUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddUserForWorkspaceRequestConstraints(addUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddUserForWorkspace(r.Context(), workspaceGidParam, addUserForWorkspaceRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkspace - Get a workspace
func (c *WorkspacesAPIController) GetWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetWorkspace(r.Context(), workspaceGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkspaces - Get multiple workspaces
func (c *WorkspacesAPIController) GetWorkspaces(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetWorkspaces(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveUserForWorkspace - Remove a user from a workspace or organization
func (c *WorkspacesAPIController) RemoveUserForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	removeUserForWorkspaceRequestParam := RemoveUserForWorkspaceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveUserForWorkspaceRequestRequired(removeUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveUserForWorkspaceRequestConstraints(removeUserForWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveUserForWorkspace(r.Context(), workspaceGidParam, removeUserForWorkspaceRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkspace - Update a workspace
func (c *WorkspacesAPIController) UpdateWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	updateWorkspaceRequestParam := UpdateWorkspaceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateWorkspaceRequestRequired(updateWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateWorkspaceRequestConstraints(updateWorkspaceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateWorkspace(r.Context(), workspaceGidParam, updateWorkspaceRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
