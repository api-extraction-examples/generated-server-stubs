/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PortfolioMembershipsAPIController binds http requests to an api service and writes the service results to the http response
type PortfolioMembershipsAPIController struct {
	service PortfolioMembershipsAPIServicer
	errorHandler ErrorHandler
}

// PortfolioMembershipsAPIOption for how the controller is set up.
type PortfolioMembershipsAPIOption func(*PortfolioMembershipsAPIController)

// WithPortfolioMembershipsAPIErrorHandler inject ErrorHandler into controller
func WithPortfolioMembershipsAPIErrorHandler(h ErrorHandler) PortfolioMembershipsAPIOption {
	return func(c *PortfolioMembershipsAPIController) {
		c.errorHandler = h
	}
}

// NewPortfolioMembershipsAPIController creates a default api controller
func NewPortfolioMembershipsAPIController(s PortfolioMembershipsAPIServicer, opts ...PortfolioMembershipsAPIOption) Router {
	controller := &PortfolioMembershipsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PortfolioMembershipsAPIController
func (c *PortfolioMembershipsAPIController) Routes() Routes {
	return Routes{
		"GetPortfolioMembership": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolio_memberships/{portfolio_membership_gid}",
			c.GetPortfolioMembership,
		},
		"GetPortfolioMemberships": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolio_memberships",
			c.GetPortfolioMemberships,
		},
		"GetPortfolioMembershipsForPortfolio": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolios/{portfolio_gid}/portfolio_memberships",
			c.GetPortfolioMembershipsForPortfolio,
		},
	}
}

// GetPortfolioMembership - Get a portfolio membership
func (c *PortfolioMembershipsAPIController) GetPortfolioMembership(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioMembershipGidParam := params["portfolio_membership_gid"]
	if portfolioMembershipGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_membership_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetPortfolioMembership(r.Context(), portfolioMembershipGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPortfolioMemberships - Get multiple portfolio memberships
func (c *PortfolioMembershipsAPIController) GetPortfolioMemberships(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var portfolioParam string
	if query.Has("portfolio") {
		param := query.Get("portfolio")

		portfolioParam = param
	} else {
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
	}
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetPortfolioMemberships(r.Context(), portfolioParam, workspaceParam, userParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPortfolioMembershipsForPortfolio - Get memberships from a portfolio
func (c *PortfolioMembershipsAPIController) GetPortfolioMembershipsForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetPortfolioMembershipsForPortfolio(r.Context(), portfolioGidParam, userParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
