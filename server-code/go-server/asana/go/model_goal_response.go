/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type GoalResponse struct {

	// Globally unique identifier of the resource, as a string.
	Gid string `json:"gid,omitempty"`

	// The base type of this resource.
	ResourceType string `json:"resource_type,omitempty"`

	// The localized day on which this goal is due. This takes a date with format `YYYY-MM-DD`.
	DueOn *string `json:"due_on,omitempty"`

	// The notes of the goal with formatting as HTML.
	HtmlNotes string `json:"html_notes,omitempty"`

	// *Conditional*. This property is only present when the `workspace` provided is an organization. Whether the goal belongs to the `workspace` (and is listed as part of the workspace’s goals) or not. If it isn’t a workspace-level goal, it is a team-level goal, and is associated with the goal’s team.
	IsWorkspaceLevel bool `json:"is_workspace_level,omitempty"`

	// True if the goal is liked by the authorized user, false if not.
	Liked bool `json:"liked,omitempty"`

	// The name of the goal.
	Name string `json:"name,omitempty"`

	// Free-form textual information associated with the goal (i.e. its description).
	Notes string `json:"notes,omitempty"`

	// The day on which work for this goal begins, or null if the goal has no start date. This takes a date with `YYYY-MM-DD` format, and cannot be set unless there is an accompanying due date.
	StartOn *string `json:"start_on,omitempty"`

	// The current status of this goal. When the goal is open, its status can be `green`, `yellow`, and `red` to reflect \"On Track\", \"At Risk\", and \"Off Track\", respectively. When the goal is closed, the value can be `missed`, `achieved`, `partial`, or `dropped`. *Note* you can only write to this property if `metric` is set.
	Status *string `json:"status,omitempty"`

	CurrentStatusUpdate *GoalResponseAllOfCurrentStatusUpdate `json:"current_status_update,omitempty"`

	// Array of users who are members of this goal.
	Followers []UserCompact `json:"followers,omitempty"`

	// Array of likes for users who have liked this goal.
	Likes []Like `json:"likes,omitempty"`

	Metric GoalResponseAllOfMetric `json:"metric,omitempty"`

	// The number of users who have liked this goal.
	NumLikes int32 `json:"num_likes,omitempty"`

	Owner GoalResponseAllOfOwner `json:"owner,omitempty"`

	Team GoalResponseAllOfTeam `json:"team,omitempty"`

	TimePeriod GoalResponseAllOfTimePeriod `json:"time_period,omitempty"`

	Workspace GoalResponseAllOfWorkspace `json:"workspace,omitempty"`
}

// AssertGoalResponseRequired checks if the required fields are not zero-ed
func AssertGoalResponseRequired(obj GoalResponse) error {
	if obj.CurrentStatusUpdate != nil {
		if err := AssertGoalResponseAllOfCurrentStatusUpdateRequired(*obj.CurrentStatusUpdate); err != nil {
			return err
		}
	}
	for _, el := range obj.Followers {
		if err := AssertUserCompactRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Likes {
		if err := AssertLikeRequired(el); err != nil {
			return err
		}
	}
	if err := AssertGoalResponseAllOfMetricRequired(obj.Metric); err != nil {
		return err
	}
	if err := AssertGoalResponseAllOfOwnerRequired(obj.Owner); err != nil {
		return err
	}
	if err := AssertGoalResponseAllOfTeamRequired(obj.Team); err != nil {
		return err
	}
	if err := AssertGoalResponseAllOfTimePeriodRequired(obj.TimePeriod); err != nil {
		return err
	}
	if err := AssertGoalResponseAllOfWorkspaceRequired(obj.Workspace); err != nil {
		return err
	}
	return nil
}

// AssertGoalResponseConstraints checks if the values respects the defined constraints
func AssertGoalResponseConstraints(obj GoalResponse) error {
	return nil
}
