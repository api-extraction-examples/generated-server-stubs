/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WebhooksAPIController binds http requests to an api service and writes the service results to the http response
type WebhooksAPIController struct {
	service WebhooksAPIServicer
	errorHandler ErrorHandler
}

// WebhooksAPIOption for how the controller is set up.
type WebhooksAPIOption func(*WebhooksAPIController)

// WithWebhooksAPIErrorHandler inject ErrorHandler into controller
func WithWebhooksAPIErrorHandler(h ErrorHandler) WebhooksAPIOption {
	return func(c *WebhooksAPIController) {
		c.errorHandler = h
	}
}

// NewWebhooksAPIController creates a default api controller
func NewWebhooksAPIController(s WebhooksAPIServicer, opts ...WebhooksAPIOption) Router {
	controller := &WebhooksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WebhooksAPIController
func (c *WebhooksAPIController) Routes() Routes {
	return Routes{
		"CreateWebhook": Route{
			strings.ToUpper("Post"),
			"/api/1.0/webhooks",
			c.CreateWebhook,
		},
		"DeleteWebhook": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/webhooks/{webhook_gid}",
			c.DeleteWebhook,
		},
		"GetWebhook": Route{
			strings.ToUpper("Get"),
			"/api/1.0/webhooks/{webhook_gid}",
			c.GetWebhook,
		},
		"GetWebhooks": Route{
			strings.ToUpper("Get"),
			"/api/1.0/webhooks",
			c.GetWebhooks,
		},
		"UpdateWebhook": Route{
			strings.ToUpper("Put"),
			"/api/1.0/webhooks/{webhook_gid}",
			c.UpdateWebhook,
		},
	}
}

// CreateWebhook - Establish a webhook
func (c *WebhooksAPIController) CreateWebhook(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createWebhookRequestParam := CreateWebhookRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createWebhookRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateWebhookRequestRequired(createWebhookRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateWebhookRequestConstraints(createWebhookRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateWebhook(r.Context(), createWebhookRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWebhook - Delete a webhook
func (c *WebhooksAPIController) DeleteWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	webhookGidParam := params["webhook_gid"]
	if webhookGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"webhook_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteWebhook(r.Context(), webhookGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWebhook - Get a webhook
func (c *WebhooksAPIController) GetWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	webhookGidParam := params["webhook_gid"]
	if webhookGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"webhook_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetWebhook(r.Context(), webhookGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWebhooks - Get multiple webhooks
func (c *WebhooksAPIController) GetWebhooks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workspace"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var resourceParam string
	if query.Has("resource") {
		param := query.Get("resource")

		resourceParam = param
	} else {
	}
	result, err := c.service.GetWebhooks(r.Context(), workspaceParam, optPrettyParam, optFieldsParam, limitParam, offsetParam, resourceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWebhook - Update a webhook
func (c *WebhooksAPIController) UpdateWebhook(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	webhookGidParam := params["webhook_gid"]
	if webhookGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"webhook_gid"}, nil)
		return
	}
	updateWebhookRequestParam := UpdateWebhookRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateWebhookRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateWebhookRequestRequired(updateWebhookRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateWebhookRequestConstraints(updateWebhookRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateWebhook(r.Context(), webhookGidParam, updateWebhookRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
