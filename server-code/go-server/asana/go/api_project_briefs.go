/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectBriefsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectBriefsAPIController struct {
	service ProjectBriefsAPIServicer
	errorHandler ErrorHandler
}

// ProjectBriefsAPIOption for how the controller is set up.
type ProjectBriefsAPIOption func(*ProjectBriefsAPIController)

// WithProjectBriefsAPIErrorHandler inject ErrorHandler into controller
func WithProjectBriefsAPIErrorHandler(h ErrorHandler) ProjectBriefsAPIOption {
	return func(c *ProjectBriefsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectBriefsAPIController creates a default api controller
func NewProjectBriefsAPIController(s ProjectBriefsAPIServicer, opts ...ProjectBriefsAPIOption) Router {
	controller := &ProjectBriefsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectBriefsAPIController
func (c *ProjectBriefsAPIController) Routes() Routes {
	return Routes{
		"CreateProjectBrief": Route{
			strings.ToUpper("Post"),
			"/api/1.0/projects/{project_gid}/project_briefs",
			c.CreateProjectBrief,
		},
		"DeleteProjectBrief": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/project_briefs/{project_brief_gid}",
			c.DeleteProjectBrief,
		},
		"GetProjectBrief": Route{
			strings.ToUpper("Get"),
			"/api/1.0/project_briefs/{project_brief_gid}",
			c.GetProjectBrief,
		},
		"UpdateProjectBrief": Route{
			strings.ToUpper("Put"),
			"/api/1.0/project_briefs/{project_brief_gid}",
			c.UpdateProjectBrief,
		},
	}
}

// CreateProjectBrief - Create a project brief
func (c *ProjectBriefsAPIController) CreateProjectBrief(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	updateProjectBriefRequestParam := UpdateProjectBriefRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateProjectBriefRequestRequired(updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateProjectBriefRequestConstraints(updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateProjectBrief(r.Context(), projectGidParam, updateProjectBriefRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProjectBrief - Delete a project brief
func (c *ProjectBriefsAPIController) DeleteProjectBrief(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectBriefGidParam := params["project_brief_gid"]
	if projectBriefGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_brief_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteProjectBrief(r.Context(), projectBriefGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectBrief - Get a project brief
func (c *ProjectBriefsAPIController) GetProjectBrief(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectBriefGidParam := params["project_brief_gid"]
	if projectBriefGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_brief_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetProjectBrief(r.Context(), projectBriefGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProjectBrief - Update a project brief
func (c *ProjectBriefsAPIController) UpdateProjectBrief(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectBriefGidParam := params["project_brief_gid"]
	if projectBriefGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_brief_gid"}, nil)
		return
	}
	updateProjectBriefRequestParam := UpdateProjectBriefRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateProjectBriefRequestRequired(updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateProjectBriefRequestConstraints(updateProjectBriefRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateProjectBrief(r.Context(), projectBriefGidParam, updateProjectBriefRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
