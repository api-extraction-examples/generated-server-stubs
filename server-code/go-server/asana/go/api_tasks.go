/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// TasksAPIController binds http requests to an api service and writes the service results to the http response
type TasksAPIController struct {
	service TasksAPIServicer
	errorHandler ErrorHandler
}

// TasksAPIOption for how the controller is set up.
type TasksAPIOption func(*TasksAPIController)

// WithTasksAPIErrorHandler inject ErrorHandler into controller
func WithTasksAPIErrorHandler(h ErrorHandler) TasksAPIOption {
	return func(c *TasksAPIController) {
		c.errorHandler = h
	}
}

// NewTasksAPIController creates a default api controller
func NewTasksAPIController(s TasksAPIServicer, opts ...TasksAPIOption) Router {
	controller := &TasksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TasksAPIController
func (c *TasksAPIController) Routes() Routes {
	return Routes{
		"AddDependenciesForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/addDependencies",
			c.AddDependenciesForTask,
		},
		"AddDependentsForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/addDependents",
			c.AddDependentsForTask,
		},
		"AddFollowersForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/addFollowers",
			c.AddFollowersForTask,
		},
		"AddProjectForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/addProject",
			c.AddProjectForTask,
		},
		"AddTagForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/addTag",
			c.AddTagForTask,
		},
		"CreateSubtaskForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/subtasks",
			c.CreateSubtaskForTask,
		},
		"CreateTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks",
			c.CreateTask,
		},
		"DeleteTask": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/tasks/{task_gid}",
			c.DeleteTask,
		},
		"DuplicateTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/duplicate",
			c.DuplicateTask,
		},
		"GetDependenciesForTask": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks/{task_gid}/dependencies",
			c.GetDependenciesForTask,
		},
		"GetDependentsForTask": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks/{task_gid}/dependents",
			c.GetDependentsForTask,
		},
		"GetSubtasksForTask": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks/{task_gid}/subtasks",
			c.GetSubtasksForTask,
		},
		"GetTask": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks/{task_gid}",
			c.GetTask,
		},
		"GetTasks": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tasks",
			c.GetTasks,
		},
		"GetTasksForProject": Route{
			strings.ToUpper("Get"),
			"/api/1.0/projects/{project_gid}/tasks",
			c.GetTasksForProject,
		},
		"GetTasksForSection": Route{
			strings.ToUpper("Get"),
			"/api/1.0/sections/{section_gid}/tasks",
			c.GetTasksForSection,
		},
		"GetTasksForTag": Route{
			strings.ToUpper("Get"),
			"/api/1.0/tags/{tag_gid}/tasks",
			c.GetTasksForTag,
		},
		"GetTasksForUserTaskList": Route{
			strings.ToUpper("Get"),
			"/api/1.0/user_task_lists/{user_task_list_gid}/tasks",
			c.GetTasksForUserTaskList,
		},
		"RemoveDependenciesForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/removeDependencies",
			c.RemoveDependenciesForTask,
		},
		"RemoveDependentsForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/removeDependents",
			c.RemoveDependentsForTask,
		},
		"RemoveFollowerForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/removeFollowers",
			c.RemoveFollowerForTask,
		},
		"RemoveProjectForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/removeProject",
			c.RemoveProjectForTask,
		},
		"RemoveTagForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/removeTag",
			c.RemoveTagForTask,
		},
		"SearchTasksForWorkspace": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces/{workspace_gid}/tasks/search",
			c.SearchTasksForWorkspace,
		},
		"SetParentForTask": Route{
			strings.ToUpper("Post"),
			"/api/1.0/tasks/{task_gid}/setParent",
			c.SetParentForTask,
		},
		"UpdateTask": Route{
			strings.ToUpper("Put"),
			"/api/1.0/tasks/{task_gid}",
			c.UpdateTask,
		},
	}
}

// AddDependenciesForTask - Set dependencies for a task
func (c *TasksAPIController) AddDependenciesForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addDependenciesForTaskRequestParam := AddDependenciesForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddDependenciesForTaskRequestRequired(addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddDependenciesForTaskRequestConstraints(addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddDependenciesForTask(r.Context(), taskGidParam, addDependenciesForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddDependentsForTask - Set dependents for a task
func (c *TasksAPIController) AddDependentsForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addDependentsForTaskRequestParam := AddDependentsForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddDependentsForTaskRequestRequired(addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddDependentsForTaskRequestConstraints(addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddDependentsForTask(r.Context(), taskGidParam, addDependentsForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddFollowersForTask - Add followers to a task
func (c *TasksAPIController) AddFollowersForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addFollowersRequestParam := AddFollowersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddFollowersRequestRequired(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddFollowersRequestConstraints(addFollowersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddFollowersForTask(r.Context(), taskGidParam, addFollowersRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddProjectForTask - Add a project to a task
func (c *TasksAPIController) AddProjectForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addProjectForTaskRequestParam := AddProjectForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddProjectForTaskRequestRequired(addProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddProjectForTaskRequestConstraints(addProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddProjectForTask(r.Context(), taskGidParam, addProjectForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddTagForTask - Add a tag to a task
func (c *TasksAPIController) AddTagForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addTagForTaskRequestParam := AddTagForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddTagForTaskRequestRequired(addTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddTagForTaskRequestConstraints(addTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddTagForTask(r.Context(), taskGidParam, addTagForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateSubtaskForTask - Create a subtask
func (c *TasksAPIController) CreateSubtaskForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	createTaskRequestParam := CreateTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTaskRequestRequired(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTaskRequestConstraints(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateSubtaskForTask(r.Context(), taskGidParam, createTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTask - Create a task
func (c *TasksAPIController) CreateTask(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createTaskRequestParam := CreateTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTaskRequestRequired(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTaskRequestConstraints(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreateTask(r.Context(), createTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTask - Delete a task
func (c *TasksAPIController) DeleteTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DuplicateTask - Duplicate a task
func (c *TasksAPIController) DuplicateTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	duplicateTaskRequestParam := DuplicateTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&duplicateTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDuplicateTaskRequestRequired(duplicateTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDuplicateTaskRequestConstraints(duplicateTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DuplicateTask(r.Context(), taskGidParam, duplicateTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDependenciesForTask - Get dependencies from a task
func (c *TasksAPIController) GetDependenciesForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetDependenciesForTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDependentsForTask - Get dependents from a task
func (c *TasksAPIController) GetDependentsForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetDependentsForTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubtasksForTask - Get subtasks from a task
func (c *TasksAPIController) GetSubtasksForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetSubtasksForTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTask - Get a task
func (c *TasksAPIController) GetTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetTask(r.Context(), taskGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasks - Get multiple tasks
func (c *TasksAPIController) GetTasks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var assigneeParam string
	if query.Has("assignee") {
		param := query.Get("assignee")

		assigneeParam = param
	} else {
	}
	var projectParam string
	if query.Has("project") {
		param := query.Get("project")

		projectParam = param
	} else {
	}
	var sectionParam string
	if query.Has("section") {
		param := query.Get("section")

		sectionParam = param
	} else {
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
	}
	var completedSinceParam time.Time
	if query.Has("completed_since"){
		param, err := parseTime(query.Get("completed_since"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		completedSinceParam = param
	} else {
	}
	var modifiedSinceParam time.Time
	if query.Has("modified_since"){
		param, err := parseTime(query.Get("modified_since"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		modifiedSinceParam = param
	} else {
	}
	result, err := c.service.GetTasks(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam, assigneeParam, projectParam, sectionParam, workspaceParam, completedSinceParam, modifiedSinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasksForProject - Get tasks from a project
func (c *TasksAPIController) GetTasksForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectGidParam := params["project_gid"]
	if projectGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_gid"}, nil)
		return
	}
	var completedSinceParam string
	if query.Has("completed_since") {
		param := query.Get("completed_since")

		completedSinceParam = param
	} else {
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTasksForProject(r.Context(), projectGidParam, completedSinceParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasksForSection - Get tasks from a section
func (c *TasksAPIController) GetTasksForSection(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sectionGidParam := params["section_gid"]
	if sectionGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"section_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTasksForSection(r.Context(), sectionGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasksForTag - Get tasks from a tag
func (c *TasksAPIController) GetTasksForTag(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	tagGidParam := params["tag_gid"]
	if tagGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTasksForTag(r.Context(), tagGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasksForUserTaskList - Get tasks from a user task list
func (c *TasksAPIController) GetTasksForUserTaskList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userTaskListGidParam := params["user_task_list_gid"]
	if userTaskListGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_task_list_gid"}, nil)
		return
	}
	var completedSinceParam string
	if query.Has("completed_since") {
		param := query.Get("completed_since")

		completedSinceParam = param
	} else {
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTasksForUserTaskList(r.Context(), userTaskListGidParam, completedSinceParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveDependenciesForTask - Unlink dependencies from a task
func (c *TasksAPIController) RemoveDependenciesForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addDependenciesForTaskRequestParam := AddDependenciesForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddDependenciesForTaskRequestRequired(addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddDependenciesForTaskRequestConstraints(addDependenciesForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveDependenciesForTask(r.Context(), taskGidParam, addDependenciesForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveDependentsForTask - Unlink dependents from a task
func (c *TasksAPIController) RemoveDependentsForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	addDependentsForTaskRequestParam := AddDependentsForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddDependentsForTaskRequestRequired(addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddDependentsForTaskRequestConstraints(addDependentsForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveDependentsForTask(r.Context(), taskGidParam, addDependentsForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveFollowerForTask - Remove followers from a task
func (c *TasksAPIController) RemoveFollowerForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	removeFollowerForTaskRequestParam := RemoveFollowerForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeFollowerForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveFollowerForTaskRequestRequired(removeFollowerForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveFollowerForTaskRequestConstraints(removeFollowerForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveFollowerForTask(r.Context(), taskGidParam, removeFollowerForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveProjectForTask - Remove a project from a task
func (c *TasksAPIController) RemoveProjectForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	removeProjectForTaskRequestParam := RemoveProjectForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveProjectForTaskRequestRequired(removeProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveProjectForTaskRequestConstraints(removeProjectForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveProjectForTask(r.Context(), taskGidParam, removeProjectForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveTagForTask - Remove a tag from a task
func (c *TasksAPIController) RemoveTagForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	removeTagForTaskRequestParam := RemoveTagForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveTagForTaskRequestRequired(removeTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveTagForTaskRequestConstraints(removeTagForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveTagForTask(r.Context(), taskGidParam, removeTagForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchTasksForWorkspace - Search tasks in a workspace
func (c *TasksAPIController) SearchTasksForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var textParam string
	if query.Has("text") {
		param := query.Get("text")

		textParam = param
	} else {
	}
	var resourceSubtypeParam string
	if query.Has("resource_subtype") {
		param := query.Get("resource_subtype")

		resourceSubtypeParam = param
	} else {
		param := milestone
		resourceSubtypeParam = param
	}
	var assigneeAnyParam string
	if query.Has("assignee.any") {
		param := query.Get("assignee.any")

		assigneeAnyParam = param
	} else {
	}
	var assigneeNotParam string
	if query.Has("assignee.not") {
		param := query.Get("assignee.not")

		assigneeNotParam = param
	} else {
	}
	var portfoliosAnyParam string
	if query.Has("portfolios.any") {
		param := query.Get("portfolios.any")

		portfoliosAnyParam = param
	} else {
	}
	var projectsAnyParam string
	if query.Has("projects.any") {
		param := query.Get("projects.any")

		projectsAnyParam = param
	} else {
	}
	var projectsNotParam string
	if query.Has("projects.not") {
		param := query.Get("projects.not")

		projectsNotParam = param
	} else {
	}
	var projectsAllParam string
	if query.Has("projects.all") {
		param := query.Get("projects.all")

		projectsAllParam = param
	} else {
	}
	var sectionsAnyParam string
	if query.Has("sections.any") {
		param := query.Get("sections.any")

		sectionsAnyParam = param
	} else {
	}
	var sectionsNotParam string
	if query.Has("sections.not") {
		param := query.Get("sections.not")

		sectionsNotParam = param
	} else {
	}
	var sectionsAllParam string
	if query.Has("sections.all") {
		param := query.Get("sections.all")

		sectionsAllParam = param
	} else {
	}
	var tagsAnyParam string
	if query.Has("tags.any") {
		param := query.Get("tags.any")

		tagsAnyParam = param
	} else {
	}
	var tagsNotParam string
	if query.Has("tags.not") {
		param := query.Get("tags.not")

		tagsNotParam = param
	} else {
	}
	var tagsAllParam string
	if query.Has("tags.all") {
		param := query.Get("tags.all")

		tagsAllParam = param
	} else {
	}
	var teamsAnyParam string
	if query.Has("teams.any") {
		param := query.Get("teams.any")

		teamsAnyParam = param
	} else {
	}
	var followersNotParam string
	if query.Has("followers.not") {
		param := query.Get("followers.not")

		followersNotParam = param
	} else {
	}
	var createdByAnyParam string
	if query.Has("created_by.any") {
		param := query.Get("created_by.any")

		createdByAnyParam = param
	} else {
	}
	var createdByNotParam string
	if query.Has("created_by.not") {
		param := query.Get("created_by.not")

		createdByNotParam = param
	} else {
	}
	var assignedByAnyParam string
	if query.Has("assigned_by.any") {
		param := query.Get("assigned_by.any")

		assignedByAnyParam = param
	} else {
	}
	var assignedByNotParam string
	if query.Has("assigned_by.not") {
		param := query.Get("assigned_by.not")

		assignedByNotParam = param
	} else {
	}
	var likedByNotParam string
	if query.Has("liked_by.not") {
		param := query.Get("liked_by.not")

		likedByNotParam = param
	} else {
	}
	var commentedOnByNotParam string
	if query.Has("commented_on_by.not") {
		param := query.Get("commented_on_by.not")

		commentedOnByNotParam = param
	} else {
	}
	var dueOnBeforeParam string
	if query.Has("due_on.before") {
		param := string(query.Get("due_on.before"))

		dueOnBeforeParam = param
	} else {
	}
	var dueOnAfterParam string
	if query.Has("due_on.after") {
		param := string(query.Get("due_on.after"))

		dueOnAfterParam = param
	} else {
	}
	var dueOnParam *string
	if query.Has("due_on") {
		param := string(query.Get("due_on"))

		dueOnParam = &param
	} else {
	}
	var dueAtBeforeParam time.Time
	if query.Has("due_at.before"){
		param, err := parseTime(query.Get("due_at.before"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		dueAtBeforeParam = param
	} else {
	}
	var dueAtAfterParam time.Time
	if query.Has("due_at.after"){
		param, err := parseTime(query.Get("due_at.after"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		dueAtAfterParam = param
	} else {
	}
	var startOnBeforeParam string
	if query.Has("start_on.before") {
		param := string(query.Get("start_on.before"))

		startOnBeforeParam = param
	} else {
	}
	var startOnAfterParam string
	if query.Has("start_on.after") {
		param := string(query.Get("start_on.after"))

		startOnAfterParam = param
	} else {
	}
	var startOnParam *string
	if query.Has("start_on") {
		param := string(query.Get("start_on"))

		startOnParam = &param
	} else {
	}
	var createdOnBeforeParam string
	if query.Has("created_on.before") {
		param := string(query.Get("created_on.before"))

		createdOnBeforeParam = param
	} else {
	}
	var createdOnAfterParam string
	if query.Has("created_on.after") {
		param := string(query.Get("created_on.after"))

		createdOnAfterParam = param
	} else {
	}
	var createdOnParam *string
	if query.Has("created_on") {
		param := string(query.Get("created_on"))

		createdOnParam = &param
	} else {
	}
	var createdAtBeforeParam time.Time
	if query.Has("created_at.before"){
		param, err := parseTime(query.Get("created_at.before"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		createdAtBeforeParam = param
	} else {
	}
	var createdAtAfterParam time.Time
	if query.Has("created_at.after"){
		param, err := parseTime(query.Get("created_at.after"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		createdAtAfterParam = param
	} else {
	}
	var completedOnBeforeParam string
	if query.Has("completed_on.before") {
		param := string(query.Get("completed_on.before"))

		completedOnBeforeParam = param
	} else {
	}
	var completedOnAfterParam string
	if query.Has("completed_on.after") {
		param := string(query.Get("completed_on.after"))

		completedOnAfterParam = param
	} else {
	}
	var completedOnParam *string
	if query.Has("completed_on") {
		param := string(query.Get("completed_on"))

		completedOnParam = &param
	} else {
	}
	var completedAtBeforeParam time.Time
	if query.Has("completed_at.before"){
		param, err := parseTime(query.Get("completed_at.before"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		completedAtBeforeParam = param
	} else {
	}
	var completedAtAfterParam time.Time
	if query.Has("completed_at.after"){
		param, err := parseTime(query.Get("completed_at.after"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		completedAtAfterParam = param
	} else {
	}
	var modifiedOnBeforeParam string
	if query.Has("modified_on.before") {
		param := string(query.Get("modified_on.before"))

		modifiedOnBeforeParam = param
	} else {
	}
	var modifiedOnAfterParam string
	if query.Has("modified_on.after") {
		param := string(query.Get("modified_on.after"))

		modifiedOnAfterParam = param
	} else {
	}
	var modifiedOnParam *string
	if query.Has("modified_on") {
		param := string(query.Get("modified_on"))

		modifiedOnParam = &param
	} else {
	}
	var modifiedAtBeforeParam time.Time
	if query.Has("modified_at.before"){
		param, err := parseTime(query.Get("modified_at.before"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		modifiedAtBeforeParam = param
	} else {
	}
	var modifiedAtAfterParam time.Time
	if query.Has("modified_at.after"){
		param, err := parseTime(query.Get("modified_at.after"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		modifiedAtAfterParam = param
	} else {
	}
	var isBlockingParam bool
	if query.Has("is_blocking") {
		param, err := parseBoolParameter(
			query.Get("is_blocking"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isBlockingParam = param
	} else {
	}
	var isBlockedParam bool
	if query.Has("is_blocked") {
		param, err := parseBoolParameter(
			query.Get("is_blocked"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isBlockedParam = param
	} else {
	}
	var hasAttachmentParam bool
	if query.Has("has_attachment") {
		param, err := parseBoolParameter(
			query.Get("has_attachment"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasAttachmentParam = param
	} else {
	}
	var completedParam bool
	if query.Has("completed") {
		param, err := parseBoolParameter(
			query.Get("completed"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		completedParam = param
	} else {
	}
	var isSubtaskParam bool
	if query.Has("is_subtask") {
		param, err := parseBoolParameter(
			query.Get("is_subtask"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSubtaskParam = param
	} else {
	}
	var sortByParam string
	if query.Has("sort_by") {
		param := query.Get("sort_by")

		sortByParam = param
	} else {
		param := modified_at
		sortByParam = param
	}
	var sortAscendingParam bool
	if query.Has("sort_ascending") {
		param, err := parseBoolParameter(
			query.Get("sort_ascending"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sortAscendingParam = param
	} else {
		var param bool = false
		sortAscendingParam = param
	}
	result, err := c.service.SearchTasksForWorkspace(r.Context(), workspaceGidParam, optPrettyParam, optFieldsParam, textParam, resourceSubtypeParam, assigneeAnyParam, assigneeNotParam, portfoliosAnyParam, projectsAnyParam, projectsNotParam, projectsAllParam, sectionsAnyParam, sectionsNotParam, sectionsAllParam, tagsAnyParam, tagsNotParam, tagsAllParam, teamsAnyParam, followersNotParam, createdByAnyParam, createdByNotParam, assignedByAnyParam, assignedByNotParam, likedByNotParam, commentedOnByNotParam, dueOnBeforeParam, dueOnAfterParam, dueOnParam, dueAtBeforeParam, dueAtAfterParam, startOnBeforeParam, startOnAfterParam, startOnParam, createdOnBeforeParam, createdOnAfterParam, createdOnParam, createdAtBeforeParam, createdAtAfterParam, completedOnBeforeParam, completedOnAfterParam, completedOnParam, completedAtBeforeParam, completedAtAfterParam, modifiedOnBeforeParam, modifiedOnAfterParam, modifiedOnParam, modifiedAtBeforeParam, modifiedAtAfterParam, isBlockingParam, isBlockedParam, hasAttachmentParam, completedParam, isSubtaskParam, sortByParam, sortAscendingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetParentForTask - Set the parent of a task
func (c *TasksAPIController) SetParentForTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	setParentForTaskRequestParam := SetParentForTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setParentForTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetParentForTaskRequestRequired(setParentForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetParentForTaskRequestConstraints(setParentForTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.SetParentForTask(r.Context(), taskGidParam, setParentForTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTask - Update a task
func (c *TasksAPIController) UpdateTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	taskGidParam := params["task_gid"]
	if taskGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"task_gid"}, nil)
		return
	}
	createTaskRequestParam := CreateTaskRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createTaskRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateTaskRequestRequired(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateTaskRequestConstraints(createTaskRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdateTask(r.Context(), taskGidParam, createTaskRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
