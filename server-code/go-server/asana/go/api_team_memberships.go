/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TeamMembershipsAPIController binds http requests to an api service and writes the service results to the http response
type TeamMembershipsAPIController struct {
	service TeamMembershipsAPIServicer
	errorHandler ErrorHandler
}

// TeamMembershipsAPIOption for how the controller is set up.
type TeamMembershipsAPIOption func(*TeamMembershipsAPIController)

// WithTeamMembershipsAPIErrorHandler inject ErrorHandler into controller
func WithTeamMembershipsAPIErrorHandler(h ErrorHandler) TeamMembershipsAPIOption {
	return func(c *TeamMembershipsAPIController) {
		c.errorHandler = h
	}
}

// NewTeamMembershipsAPIController creates a default api controller
func NewTeamMembershipsAPIController(s TeamMembershipsAPIServicer, opts ...TeamMembershipsAPIOption) Router {
	controller := &TeamMembershipsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TeamMembershipsAPIController
func (c *TeamMembershipsAPIController) Routes() Routes {
	return Routes{
		"GetTeamMembership": Route{
			strings.ToUpper("Get"),
			"/api/1.0/team_memberships/{team_membership_gid}",
			c.GetTeamMembership,
		},
		"GetTeamMemberships": Route{
			strings.ToUpper("Get"),
			"/api/1.0/team_memberships",
			c.GetTeamMemberships,
		},
		"GetTeamMembershipsForTeam": Route{
			strings.ToUpper("Get"),
			"/api/1.0/teams/{team_gid}/team_memberships",
			c.GetTeamMembershipsForTeam,
		},
		"GetTeamMembershipsForUser": Route{
			strings.ToUpper("Get"),
			"/api/1.0/users/{user_gid}/team_memberships",
			c.GetTeamMembershipsForUser,
		},
	}
}

// GetTeamMembership - Get a team membership
func (c *TeamMembershipsAPIController) GetTeamMembership(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	teamMembershipGidParam := params["team_membership_gid"]
	if teamMembershipGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"team_membership_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetTeamMembership(r.Context(), teamMembershipGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamMemberships - Get team memberships
func (c *TeamMembershipsAPIController) GetTeamMemberships(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var teamParam string
	if query.Has("team") {
		param := query.Get("team")

		teamParam = param
	} else {
	}
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
	}
	result, err := c.service.GetTeamMemberships(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam, teamParam, userParam, workspaceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamMembershipsForTeam - Get memberships from a team
func (c *TeamMembershipsAPIController) GetTeamMembershipsForTeam(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	teamGidParam := params["team_gid"]
	if teamGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"team_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTeamMembershipsForTeam(r.Context(), teamGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTeamMembershipsForUser - Get memberships from a user
func (c *TeamMembershipsAPIController) GetTeamMembershipsForUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userGidParam := params["user_gid"]
	if userGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_gid"}, nil)
		return
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workspace"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetTeamMembershipsForUser(r.Context(), userGidParam, workspaceParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
