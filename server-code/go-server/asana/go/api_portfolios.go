/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PortfoliosAPIController binds http requests to an api service and writes the service results to the http response
type PortfoliosAPIController struct {
	service PortfoliosAPIServicer
	errorHandler ErrorHandler
}

// PortfoliosAPIOption for how the controller is set up.
type PortfoliosAPIOption func(*PortfoliosAPIController)

// WithPortfoliosAPIErrorHandler inject ErrorHandler into controller
func WithPortfoliosAPIErrorHandler(h ErrorHandler) PortfoliosAPIOption {
	return func(c *PortfoliosAPIController) {
		c.errorHandler = h
	}
}

// NewPortfoliosAPIController creates a default api controller
func NewPortfoliosAPIController(s PortfoliosAPIServicer, opts ...PortfoliosAPIOption) Router {
	controller := &PortfoliosAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PortfoliosAPIController
func (c *PortfoliosAPIController) Routes() Routes {
	return Routes{
		"AddCustomFieldSettingForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/addCustomFieldSetting",
			c.AddCustomFieldSettingForPortfolio,
		},
		"AddItemForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/addItem",
			c.AddItemForPortfolio,
		},
		"AddMembersForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/addMembers",
			c.AddMembersForPortfolio,
		},
		"CreatePortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios",
			c.CreatePortfolio,
		},
		"DeletePortfolio": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/portfolios/{portfolio_gid}",
			c.DeletePortfolio,
		},
		"GetItemsForPortfolio": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolios/{portfolio_gid}/items",
			c.GetItemsForPortfolio,
		},
		"GetPortfolio": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolios/{portfolio_gid}",
			c.GetPortfolio,
		},
		"GetPortfolios": Route{
			strings.ToUpper("Get"),
			"/api/1.0/portfolios",
			c.GetPortfolios,
		},
		"RemoveCustomFieldSettingForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/removeCustomFieldSetting",
			c.RemoveCustomFieldSettingForPortfolio,
		},
		"RemoveItemForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/removeItem",
			c.RemoveItemForPortfolio,
		},
		"RemoveMembersForPortfolio": Route{
			strings.ToUpper("Post"),
			"/api/1.0/portfolios/{portfolio_gid}/removeMembers",
			c.RemoveMembersForPortfolio,
		},
		"UpdatePortfolio": Route{
			strings.ToUpper("Put"),
			"/api/1.0/portfolios/{portfolio_gid}",
			c.UpdatePortfolio,
		},
	}
}

// AddCustomFieldSettingForPortfolio - Add a custom field to a portfolio
func (c *PortfoliosAPIController) AddCustomFieldSettingForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	addCustomFieldSettingForPortfolioRequestParam := AddCustomFieldSettingForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddCustomFieldSettingForPortfolioRequestRequired(addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddCustomFieldSettingForPortfolioRequestConstraints(addCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	result, err := c.service.AddCustomFieldSettingForPortfolio(r.Context(), portfolioGidParam, addCustomFieldSettingForPortfolioRequestParam, optPrettyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddItemForPortfolio - Add a portfolio item
func (c *PortfoliosAPIController) AddItemForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	addItemForPortfolioRequestParam := AddItemForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddItemForPortfolioRequestRequired(addItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddItemForPortfolioRequestConstraints(addItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddItemForPortfolio(r.Context(), portfolioGidParam, addItemForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddMembersForPortfolio - Add users to a portfolio
func (c *PortfoliosAPIController) AddMembersForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	addMembersForPortfolioRequestParam := AddMembersForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddMembersForPortfolioRequestRequired(addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddMembersForPortfolioRequestConstraints(addMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.AddMembersForPortfolio(r.Context(), portfolioGidParam, addMembersForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreatePortfolio - Create a portfolio
func (c *PortfoliosAPIController) CreatePortfolio(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createPortfolioRequestParam := CreatePortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePortfolioRequestRequired(createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePortfolioRequestConstraints(createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.CreatePortfolio(r.Context(), createPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePortfolio - Delete a portfolio
func (c *PortfoliosAPIController) DeletePortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeletePortfolio(r.Context(), portfolioGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemsForPortfolio - Get portfolio items
func (c *PortfoliosAPIController) GetItemsForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetItemsForPortfolio(r.Context(), portfolioGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPortfolio - Get a portfolio
func (c *PortfoliosAPIController) GetPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetPortfolio(r.Context(), portfolioGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPortfolios - Get multiple portfolios
func (c *PortfoliosAPIController) GetPortfolios(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workspace"}, nil)
		return
	}
	var ownerParam string
	if query.Has("owner") {
		param := query.Get("owner")

		ownerParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "owner"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetPortfolios(r.Context(), workspaceParam, ownerParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveCustomFieldSettingForPortfolio - Remove a custom field from a portfolio
func (c *PortfoliosAPIController) RemoveCustomFieldSettingForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	removeCustomFieldSettingForPortfolioRequestParam := RemoveCustomFieldSettingForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveCustomFieldSettingForPortfolioRequestRequired(removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveCustomFieldSettingForPortfolioRequestConstraints(removeCustomFieldSettingForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	result, err := c.service.RemoveCustomFieldSettingForPortfolio(r.Context(), portfolioGidParam, removeCustomFieldSettingForPortfolioRequestParam, optPrettyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveItemForPortfolio - Remove a portfolio item
func (c *PortfoliosAPIController) RemoveItemForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	removeItemForPortfolioRequestParam := RemoveItemForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveItemForPortfolioRequestRequired(removeItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveItemForPortfolioRequestConstraints(removeItemForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveItemForPortfolio(r.Context(), portfolioGidParam, removeItemForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveMembersForPortfolio - Remove users from a portfolio
func (c *PortfoliosAPIController) RemoveMembersForPortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	removeMembersForPortfolioRequestParam := RemoveMembersForPortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveMembersForPortfolioRequestRequired(removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveMembersForPortfolioRequestConstraints(removeMembersForPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.RemoveMembersForPortfolio(r.Context(), portfolioGidParam, removeMembersForPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePortfolio - Update a portfolio
func (c *PortfoliosAPIController) UpdatePortfolio(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	portfolioGidParam := params["portfolio_gid"]
	if portfolioGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"portfolio_gid"}, nil)
		return
	}
	createPortfolioRequestParam := CreatePortfolioRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePortfolioRequestRequired(createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePortfolioRequestConstraints(createPortfolioRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.UpdatePortfolio(r.Context(), portfolioGidParam, createPortfolioRequestParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
