/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserTaskListsAPIController binds http requests to an api service and writes the service results to the http response
type UserTaskListsAPIController struct {
	service UserTaskListsAPIServicer
	errorHandler ErrorHandler
}

// UserTaskListsAPIOption for how the controller is set up.
type UserTaskListsAPIOption func(*UserTaskListsAPIController)

// WithUserTaskListsAPIErrorHandler inject ErrorHandler into controller
func WithUserTaskListsAPIErrorHandler(h ErrorHandler) UserTaskListsAPIOption {
	return func(c *UserTaskListsAPIController) {
		c.errorHandler = h
	}
}

// NewUserTaskListsAPIController creates a default api controller
func NewUserTaskListsAPIController(s UserTaskListsAPIServicer, opts ...UserTaskListsAPIOption) Router {
	controller := &UserTaskListsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserTaskListsAPIController
func (c *UserTaskListsAPIController) Routes() Routes {
	return Routes{
		"GetUserTaskList": Route{
			strings.ToUpper("Get"),
			"/api/1.0/user_task_lists/{user_task_list_gid}",
			c.GetUserTaskList,
		},
		"GetUserTaskListForUser": Route{
			strings.ToUpper("Get"),
			"/api/1.0/users/{user_gid}/user_task_list",
			c.GetUserTaskListForUser,
		},
	}
}

// GetUserTaskList - Get a user task list
func (c *UserTaskListsAPIController) GetUserTaskList(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userTaskListGidParam := params["user_task_list_gid"]
	if userTaskListGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_task_list_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetUserTaskList(r.Context(), userTaskListGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserTaskListForUser - Get a user's task list
func (c *UserTaskListsAPIController) GetUserTaskListForUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userGidParam := params["user_gid"]
	if userGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"user_gid"}, nil)
		return
	}
	var workspaceParam string
	if query.Has("workspace") {
		param := query.Get("workspace")

		workspaceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workspace"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetUserTaskListForUser(r.Context(), userGidParam, workspaceParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
