/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomFieldsAPIController binds http requests to an api service and writes the service results to the http response
type CustomFieldsAPIController struct {
	service CustomFieldsAPIServicer
	errorHandler ErrorHandler
}

// CustomFieldsAPIOption for how the controller is set up.
type CustomFieldsAPIOption func(*CustomFieldsAPIController)

// WithCustomFieldsAPIErrorHandler inject ErrorHandler into controller
func WithCustomFieldsAPIErrorHandler(h ErrorHandler) CustomFieldsAPIOption {
	return func(c *CustomFieldsAPIController) {
		c.errorHandler = h
	}
}

// NewCustomFieldsAPIController creates a default api controller
func NewCustomFieldsAPIController(s CustomFieldsAPIServicer, opts ...CustomFieldsAPIOption) Router {
	controller := &CustomFieldsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomFieldsAPIController
func (c *CustomFieldsAPIController) Routes() Routes {
	return Routes{
		"CreateCustomField": Route{
			strings.ToUpper("Post"),
			"/api/1.0/custom_fields",
			c.CreateCustomField,
		},
		"CreateEnumOptionForCustomField": Route{
			strings.ToUpper("Post"),
			"/api/1.0/custom_fields/{custom_field_gid}/enum_options",
			c.CreateEnumOptionForCustomField,
		},
		"DeleteCustomField": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/custom_fields/{custom_field_gid}",
			c.DeleteCustomField,
		},
		"GetCustomField": Route{
			strings.ToUpper("Get"),
			"/api/1.0/custom_fields/{custom_field_gid}",
			c.GetCustomField,
		},
		"GetCustomFieldsForWorkspace": Route{
			strings.ToUpper("Get"),
			"/api/1.0/workspaces/{workspace_gid}/custom_fields",
			c.GetCustomFieldsForWorkspace,
		},
		"InsertEnumOptionForCustomField": Route{
			strings.ToUpper("Post"),
			"/api/1.0/custom_fields/{custom_field_gid}/enum_options/insert",
			c.InsertEnumOptionForCustomField,
		},
		"UpdateCustomField": Route{
			strings.ToUpper("Put"),
			"/api/1.0/custom_fields/{custom_field_gid}",
			c.UpdateCustomField,
		},
		"UpdateEnumOption": Route{
			strings.ToUpper("Put"),
			"/api/1.0/enum_options/{enum_option_gid}",
			c.UpdateEnumOption,
		},
	}
}

// CreateCustomField - Create a custom field
func (c *CustomFieldsAPIController) CreateCustomField(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	createCustomFieldRequestParam := CreateCustomFieldRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createCustomFieldRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateCustomFieldRequestRequired(createCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateCustomFieldRequestConstraints(createCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCustomField(r.Context(), optPrettyParam, optFieldsParam, limitParam, offsetParam, createCustomFieldRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateEnumOptionForCustomField - Create an enum option
func (c *CustomFieldsAPIController) CreateEnumOptionForCustomField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	customFieldGidParam := params["custom_field_gid"]
	if customFieldGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_field_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	createEnumOptionForCustomFieldRequestParam := CreateEnumOptionForCustomFieldRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createEnumOptionForCustomFieldRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateEnumOptionForCustomFieldRequestRequired(createEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateEnumOptionForCustomFieldRequestConstraints(createEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateEnumOptionForCustomField(r.Context(), customFieldGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam, createEnumOptionForCustomFieldRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCustomField - Delete a custom field
func (c *CustomFieldsAPIController) DeleteCustomField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	customFieldGidParam := params["custom_field_gid"]
	if customFieldGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_field_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteCustomField(r.Context(), customFieldGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomField - Get a custom field
func (c *CustomFieldsAPIController) GetCustomField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	customFieldGidParam := params["custom_field_gid"]
	if customFieldGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_field_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetCustomField(r.Context(), customFieldGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomFieldsForWorkspace - Get a workspace's custom fields
func (c *CustomFieldsAPIController) GetCustomFieldsForWorkspace(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	workspaceGidParam := params["workspace_gid"]
	if workspaceGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"workspace_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.GetCustomFieldsForWorkspace(r.Context(), workspaceGidParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// InsertEnumOptionForCustomField - Reorder a custom field's enum
func (c *CustomFieldsAPIController) InsertEnumOptionForCustomField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	customFieldGidParam := params["custom_field_gid"]
	if customFieldGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_field_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	insertEnumOptionForCustomFieldRequestParam := InsertEnumOptionForCustomFieldRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&insertEnumOptionForCustomFieldRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertInsertEnumOptionForCustomFieldRequestRequired(insertEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertInsertEnumOptionForCustomFieldRequestConstraints(insertEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.InsertEnumOptionForCustomField(r.Context(), customFieldGidParam, optPrettyParam, optFieldsParam, insertEnumOptionForCustomFieldRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomField - Update a custom field
func (c *CustomFieldsAPIController) UpdateCustomField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	customFieldGidParam := params["custom_field_gid"]
	if customFieldGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_field_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	createCustomFieldRequestParam := CreateCustomFieldRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createCustomFieldRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateCustomFieldRequestRequired(createCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateCustomFieldRequestConstraints(createCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomField(r.Context(), customFieldGidParam, optPrettyParam, optFieldsParam, createCustomFieldRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateEnumOption - Update an enum option
func (c *CustomFieldsAPIController) UpdateEnumOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	enumOptionGidParam := params["enum_option_gid"]
	if enumOptionGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"enum_option_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	createEnumOptionForCustomFieldRequestParam := CreateEnumOptionForCustomFieldRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createEnumOptionForCustomFieldRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateEnumOptionForCustomFieldRequestRequired(createEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateEnumOptionForCustomFieldRequestConstraints(createEnumOptionForCustomFieldRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateEnumOption(r.Context(), enumOptionGidParam, optPrettyParam, optFieldsParam, createEnumOptionForCustomFieldRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
