/*
 * Asana
 *
 * This is the interface for interacting with the [Asana Platform](https://developers.asana.com). Our API reference is generated from our [OpenAPI spec] (https://raw.githubusercontent.com/Asana/developer-docs/master/defs/asana_oas.yaml).
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// StatusUpdatesAPIController binds http requests to an api service and writes the service results to the http response
type StatusUpdatesAPIController struct {
	service StatusUpdatesAPIServicer
	errorHandler ErrorHandler
}

// StatusUpdatesAPIOption for how the controller is set up.
type StatusUpdatesAPIOption func(*StatusUpdatesAPIController)

// WithStatusUpdatesAPIErrorHandler inject ErrorHandler into controller
func WithStatusUpdatesAPIErrorHandler(h ErrorHandler) StatusUpdatesAPIOption {
	return func(c *StatusUpdatesAPIController) {
		c.errorHandler = h
	}
}

// NewStatusUpdatesAPIController creates a default api controller
func NewStatusUpdatesAPIController(s StatusUpdatesAPIServicer, opts ...StatusUpdatesAPIOption) Router {
	controller := &StatusUpdatesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StatusUpdatesAPIController
func (c *StatusUpdatesAPIController) Routes() Routes {
	return Routes{
		"CreateStatusForObject": Route{
			strings.ToUpper("Post"),
			"/api/1.0/status_updates",
			c.CreateStatusForObject,
		},
		"DeleteStatus": Route{
			strings.ToUpper("Delete"),
			"/api/1.0/status_updates/{status_gid}",
			c.DeleteStatus,
		},
		"GetStatus": Route{
			strings.ToUpper("Get"),
			"/api/1.0/status_updates/{status_gid}",
			c.GetStatus,
		},
		"GetStatusesForObject": Route{
			strings.ToUpper("Get"),
			"/api/1.0/status_updates",
			c.GetStatusesForObject,
		},
	}
}

// CreateStatusForObject - Create a status update
func (c *StatusUpdatesAPIController) CreateStatusForObject(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	createStatusForObjectRequestParam := CreateStatusForObjectRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createStatusForObjectRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateStatusForObjectRequestRequired(createStatusForObjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateStatusForObjectRequestConstraints(createStatusForObjectRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	result, err := c.service.CreateStatusForObject(r.Context(), createStatusForObjectRequestParam, optPrettyParam, optFieldsParam, limitParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteStatus - Delete a status update
func (c *StatusUpdatesAPIController) DeleteStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	statusGidParam := params["status_gid"]
	if statusGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"status_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.DeleteStatus(r.Context(), statusGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatus - Get a status update
func (c *StatusUpdatesAPIController) GetStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	statusGidParam := params["status_gid"]
	if statusGidParam == "" {
		c.errorHandler(w, r, &RequiredError{"status_gid"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	result, err := c.service.GetStatus(r.Context(), statusGidParam, optPrettyParam, optFieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatusesForObject - Get status updates from an object
func (c *StatusUpdatesAPIController) GetStatusesForObject(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var parentParam string
	if query.Has("parent") {
		param := query.Get("parent")

		parentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "parent"}, nil)
		return
	}
	var optPrettyParam bool
	if query.Has("opt_pretty") {
		param, err := parseBoolParameter(
			query.Get("opt_pretty"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optPrettyParam = param
	} else {
	}
	var optFieldsParam []string
	if query.Has("opt_fields") {
		optFieldsParam = strings.Split(query.Get("opt_fields"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var offsetParam string
	if query.Has("offset") {
		param := query.Get("offset")

		offsetParam = param
	} else {
	}
	var createdSinceParam time.Time
	if query.Has("created_since"){
		param, err := parseTime(query.Get("created_since"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		createdSinceParam = param
	} else {
	}
	result, err := c.service.GetStatusesForObject(r.Context(), parentParam, optPrettyParam, optFieldsParam, limitParam, offsetParam, createdSinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
