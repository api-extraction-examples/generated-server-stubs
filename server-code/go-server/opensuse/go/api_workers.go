/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkersAPIController binds http requests to an api service and writes the service results to the http response
type WorkersAPIController struct {
	service WorkersAPIServicer
	errorHandler ErrorHandler
}

// WorkersAPIOption for how the controller is set up.
type WorkersAPIOption func(*WorkersAPIController)

// WithWorkersAPIErrorHandler inject ErrorHandler into controller
func WithWorkersAPIErrorHandler(h ErrorHandler) WorkersAPIOption {
	return func(c *WorkersAPIController) {
		c.errorHandler = h
	}
}

// NewWorkersAPIController creates a default api controller
func NewWorkersAPIController(s WorkersAPIServicer, opts ...WorkersAPIOption) Router {
	controller := &WorkersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkersAPIController
func (c *WorkersAPIController) Routes() Routes {
	return Routes{
		"WorkerArchitectureNameworkerIdGet": Route{
			strings.ToUpper("Get"),
			"/worker/{architecture_name}:{worker_id}",
			c.WorkerArchitectureNameworkerIdGet,
		},
		"WorkerStatusGet": Route{
			strings.ToUpper("Get"),
			"/worker/status",
			c.WorkerStatusGet,
		},
		"WorkercmdcheckconstraintsPost": Route{
			strings.ToUpper("Post"),
			"/worker?cmd=checkconstraints",
			c.WorkercmdcheckconstraintsPost,
		},
	}
}

// WorkerArchitectureNameworkerIdGet - Lists capabilites of a worker.
func (c *WorkersAPIController) WorkerArchitectureNameworkerIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	workerIdParam := params["worker_id"]
	if workerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"worker_id"}, nil)
		return
	}
	result, err := c.service.WorkerArchitectureNameworkerIdGet(r.Context(), workerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkerStatusGet - Lists status of workers, jobs, backend services and general statistics.
func (c *WorkersAPIController) WorkerStatusGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.WorkerStatusGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// WorkercmdcheckconstraintsPost - Lists workers which match a constraints filter.
func (c *WorkersAPIController) WorkercmdcheckconstraintsPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var projectParam string
	if query.Has("project") {
		param := query.Get("project")

		projectParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "project"}, nil)
		return
	}
	var repositoryParam string
	if query.Has("repository") {
		param := query.Get("repository")

		repositoryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "repository"}, nil)
		return
	}
	var archParam string
	if query.Has("arch") {
		param := query.Get("arch")

		archParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "arch"}, nil)
		return
	}
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "package"}, nil)
		return
	}
	workerCmdCheckconstraintsPostRequestParam := WorkerCmdCheckconstraintsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workerCmdCheckconstraintsPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkerCmdCheckconstraintsPostRequestRequired(workerCmdCheckconstraintsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkerCmdCheckconstraintsPostRequestConstraints(workerCmdCheckconstraintsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.WorkercmdcheckconstraintsPost(r.Context(), projectParam, repositoryParam, archParam, package_Param, workerCmdCheckconstraintsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
