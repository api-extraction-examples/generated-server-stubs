/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RequestAPIController binds http requests to an api service and writes the service results to the http response
type RequestAPIController struct {
	service RequestAPIServicer
	errorHandler ErrorHandler
}

// RequestAPIOption for how the controller is set up.
type RequestAPIOption func(*RequestAPIController)

// WithRequestAPIErrorHandler inject ErrorHandler into controller
func WithRequestAPIErrorHandler(h ErrorHandler) RequestAPIOption {
	return func(c *RequestAPIController) {
		c.errorHandler = h
	}
}

// NewRequestAPIController creates a default api controller
func NewRequestAPIController(s RequestAPIServicer, opts ...RequestAPIOption) Router {
	controller := &RequestAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RequestAPIController
func (c *RequestAPIController) Routes() Routes {
	return Routes{
		"RequestGet": Route{
			strings.ToUpper("Get"),
			"/request",
			c.RequestGet,
		},
		"RequestIdDelete": Route{
			strings.ToUpper("Delete"),
			"/request/{id}",
			c.RequestIdDelete,
		},
		"RequestIdGet": Route{
			strings.ToUpper("Get"),
			"/request/{id}",
			c.RequestIdGet,
		},
		"RequestIdPost": Route{
			strings.ToUpper("Post"),
			"/request/{id}",
			c.RequestIdPost,
		},
		"RequestIdPut": Route{
			strings.ToUpper("Put"),
			"/request/{id}",
			c.RequestIdPut,
		},
		"RequestIdcmddiffPost": Route{
			strings.ToUpper("Post"),
			"/request/{id}?cmd=diff",
			c.RequestIdcmddiffPost,
		},
		"RequestPost": Route{
			strings.ToUpper("Post"),
			"/request",
			c.RequestPost,
		},
		"RequestviewcollectionGet": Route{
			strings.ToUpper("Get"),
			"/request?view=collection",
			c.RequestviewcollectionGet,
		},
	}
}

// RequestGet - Get a simple directory listing of all requests
func (c *RequestAPIController) RequestGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RequestGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestIdDelete - Delete a given request.
func (c *RequestAPIController) RequestIdDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RequestIdDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestIdGet - Show details about a specified request.
func (c *RequestAPIController) RequestIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int32](
		params["id"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RequestIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestIdPost - Apply certain actions on a specified request.
func (c *RequestAPIController) RequestIdPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
	}
	var newstateParam string
	if query.Has("newstate") {
		param := query.Get("newstate")

		newstateParam = param
	} else {
	}
	var priorityParam string
	if query.Has("priority") {
		param := query.Get("priority")

		priorityParam = param
	} else {
	}
	var byUserParam string
	if query.Has("by_user") {
		param := query.Get("by_user")

		byUserParam = param
	} else {
	}
	var byGroupParam string
	if query.Has("by_group") {
		param := query.Get("by_group")

		byGroupParam = param
	} else {
	}
	var byProjectParam string
	if query.Has("by_project") {
		param := query.Get("by_project")

		byProjectParam = param
	} else {
	}
	var byPackageParam string
	if query.Has("by_package") {
		param := query.Get("by_package")

		byPackageParam = param
	} else {
	}
	var incidentParam string
	if query.Has("incident") {
		param := query.Get("incident")

		incidentParam = param
	} else {
	}
	var timeParam string
	if query.Has("time") {
		param := query.Get("time")

		timeParam = param
	} else {
	}
	var commentParam string
	if query.Has("comment") {
		param := query.Get("comment")

		commentParam = param
	} else {
	}
	result, err := c.service.RequestIdPost(r.Context(), cmdParam, newstateParam, priorityParam, byUserParam, byGroupParam, byProjectParam, byPackageParam, incidentParam, timeParam, commentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestIdPut - Modify a given request.
func (c *RequestAPIController) RequestIdPut(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RequestIdPut(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestIdcmddiffPost - Get the diff for all packages affected by the request.
func (c *RequestAPIController) RequestIdcmddiffPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var diffToSupersededParam string
	if query.Has("diff_to_superseded") {
		param := query.Get("diff_to_superseded")

		diffToSupersededParam = param
	} else {
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	var withissuesParam string
	if query.Has("withissues") {
		param := query.Get("withissues")

		withissuesParam = param
	} else {
	}
	result, err := c.service.RequestIdcmddiffPost(r.Context(), diffToSupersededParam, viewParam, withissuesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestPost - Create a request
func (c *RequestAPIController) RequestPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "cmd"}, nil)
		return
	}
	requestPostRequestParam := RequestPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRequestPostRequestRequired(requestPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRequestPostRequestConstraints(requestPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var addrevisionParam string
	if query.Has("addrevision") {
		param := query.Get("addrevision")

		addrevisionParam = param
	} else {
	}
	var ignoreDelegateParam string
	if query.Has("ignore_delegate") {
		param := query.Get("ignore_delegate")

		ignoreDelegateParam = param
	} else {
	}
	var ignoreBuildStateParam string
	if query.Has("ignore_build_state") {
		param := query.Get("ignore_build_state")

		ignoreBuildStateParam = param
	} else {
	}
	result, err := c.service.RequestPost(r.Context(), cmdParam, requestPostRequestParam, addrevisionParam, ignoreDelegateParam, ignoreBuildStateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RequestviewcollectionGet - Get a collection of requests for a specified target
func (c *RequestAPIController) RequestviewcollectionGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var projectParam string
	if query.Has("project") {
		param := query.Get("project")

		projectParam = param
	} else {
	}
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
	}
	var statesParam string
	if query.Has("states") {
		param := query.Get("states")

		statesParam = param
	} else {
	}
	var typesParam string
	if query.Has("types") {
		param := query.Get("types")

		typesParam = param
	} else {
	}
	var rolesParam string
	if query.Has("roles") {
		param := query.Get("roles")

		rolesParam = param
	} else {
	}
	var withhistoryParam string
	if query.Has("withhistory") {
		param := query.Get("withhistory")

		withhistoryParam = param
	} else {
	}
	var withfullhistoryParam string
	if query.Has("withfullhistory") {
		param := query.Get("withfullhistory")

		withfullhistoryParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var idsParam string
	if query.Has("ids") {
		param := query.Get("ids")

		idsParam = param
	} else {
	}
	result, err := c.service.RequestviewcollectionGet(r.Context(), userParam, projectParam, package_Param, statesParam, typesParam, rolesParam, withhistoryParam, withfullhistoryParam, limitParam, idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
