/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueTrackersAPIController binds http requests to an api service and writes the service results to the http response
type IssueTrackersAPIController struct {
	service IssueTrackersAPIServicer
	errorHandler ErrorHandler
}

// IssueTrackersAPIOption for how the controller is set up.
type IssueTrackersAPIOption func(*IssueTrackersAPIController)

// WithIssueTrackersAPIErrorHandler inject ErrorHandler into controller
func WithIssueTrackersAPIErrorHandler(h ErrorHandler) IssueTrackersAPIOption {
	return func(c *IssueTrackersAPIController) {
		c.errorHandler = h
	}
}

// NewIssueTrackersAPIController creates a default api controller
func NewIssueTrackersAPIController(s IssueTrackersAPIServicer, opts ...IssueTrackersAPIOption) Router {
	controller := &IssueTrackersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueTrackersAPIController
func (c *IssueTrackersAPIController) Routes() Routes {
	return Routes{
		"IssueTrackersGet": Route{
			strings.ToUpper("Get"),
			"/issue_trackers",
			c.IssueTrackersGet,
		},
		"IssueTrackersIssueTrackerNameDelete": Route{
			strings.ToUpper("Delete"),
			"/issue_trackers/{issue_tracker_name}",
			c.IssueTrackersIssueTrackerNameDelete,
		},
		"IssueTrackersIssueTrackerNameGet": Route{
			strings.ToUpper("Get"),
			"/issue_trackers/{issue_tracker_name}",
			c.IssueTrackersIssueTrackerNameGet,
		},
		"IssueTrackersIssueTrackerNameIssuesIssueNameGet": Route{
			strings.ToUpper("Get"),
			"/issue_trackers/{issue_tracker_name}/issues/{issue_name}",
			c.IssueTrackersIssueTrackerNameIssuesIssueNameGet,
		},
		"IssueTrackersIssueTrackerNamePut": Route{
			strings.ToUpper("Put"),
			"/issue_trackers/{issue_tracker_name}",
			c.IssueTrackersIssueTrackerNamePut,
		},
		"IssueTrackersPost": Route{
			strings.ToUpper("Post"),
			"/issue_trackers",
			c.IssueTrackersPost,
		},
	}
}

// IssueTrackersGet - Get the list of issue trackers.
func (c *IssueTrackersAPIController) IssueTrackersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.IssueTrackersGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueTrackersIssueTrackerNameDelete - Delete an issue tracker.
func (c *IssueTrackersAPIController) IssueTrackersIssueTrackerNameDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.IssueTrackersIssueTrackerNameDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueTrackersIssueTrackerNameGet - Show an issue tracker.
func (c *IssueTrackersAPIController) IssueTrackersIssueTrackerNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTrackerNameParam := params["issue_tracker_name"]
	if issueTrackerNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"issue_tracker_name"}, nil)
		return
	}
	result, err := c.service.IssueTrackersIssueTrackerNameGet(r.Context(), issueTrackerNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueTrackersIssueTrackerNameIssuesIssueNameGet - Show an issue of an issue tracker.
func (c *IssueTrackersAPIController) IssueTrackersIssueTrackerNameIssuesIssueNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueNameParam := params["issue_name"]
	if issueNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"issue_name"}, nil)
		return
	}
	result, err := c.service.IssueTrackersIssueTrackerNameIssuesIssueNameGet(r.Context(), issueNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueTrackersIssueTrackerNamePut - Update or create an issue tracker.
func (c *IssueTrackersAPIController) IssueTrackersIssueTrackerNamePut(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.IssueTrackersIssueTrackerNamePut(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IssueTrackersPost - Create an issue tracker.
func (c *IssueTrackersAPIController) IssueTrackersPost(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.IssueTrackersPost(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
