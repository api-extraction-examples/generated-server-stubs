/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// BuildAPIController binds http requests to an api service and writes the service results to the http response
type BuildAPIController struct {
	service BuildAPIServicer
	errorHandler ErrorHandler
}

// BuildAPIOption for how the controller is set up.
type BuildAPIOption func(*BuildAPIController)

// WithBuildAPIErrorHandler inject ErrorHandler into controller
func WithBuildAPIErrorHandler(h ErrorHandler) BuildAPIOption {
	return func(c *BuildAPIController) {
		c.errorHandler = h
	}
}

// NewBuildAPIController creates a default api controller
func NewBuildAPIController(s BuildAPIServicer, opts ...BuildAPIOption) Router {
	controller := &BuildAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BuildAPIController
func (c *BuildAPIController) Routes() Routes {
	return Routes{
		"BuildGet": Route{
			strings.ToUpper("Get"),
			"/build",
			c.BuildGet,
		},
		"BuildProjectNameGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}",
			c.BuildProjectNameGet,
		},
		"BuildProjectNamePost": Route{
			strings.ToUpper("Post"),
			"/build/{project_name}",
			c.BuildProjectNamePost,
		},
		"BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/_builddepinfo",
			c.BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet,
		},
		"BuildProjectNameRepositoryNameArchitectureNamePackageNameGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}",
			c.BuildProjectNameRepositoryNameArchitectureNamePackageNameGet,
		},
		"BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_jobstatus",
			c.BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet,
		},
		"BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_reason",
			c.BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet,
		},
		"BuildProjectNameRepositoryNameArchitectureNameRepositoryGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/_repository",
			c.BuildProjectNameRepositoryNameArchitectureNameRepositoryGet,
		},
		"BuildProjectNameRepositoryNameBuildconfigGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/_buildconfig",
			c.BuildProjectNameRepositoryNameBuildconfigGet,
		},
		"BuildProjectNameRepositoryNameGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}",
			c.BuildProjectNameRepositoryNameGet,
		},
		"BuildProjectNameResultGet": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/_result",
			c.BuildProjectNameResultGet,
		},
		"GetBuildProjectRepositoryArchPackageBuildinfo": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_buildinfo",
			c.GetBuildProjectRepositoryArchPackageBuildinfo,
		},
		"GetBuildProjectRepositoryArchPackageHistory": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_history",
			c.GetBuildProjectRepositoryArchPackageHistory,
		},
		"GetBuildProjectRepositoryArchPackageLog": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_log",
			c.GetBuildProjectRepositoryArchPackageLog,
		},
		"GetBuildProjectRepositoryArchPackageStatus": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/_status",
			c.GetBuildProjectRepositoryArchPackageStatus,
		},
		"GetBuildProjectRepositoryArchitecturePackageFile": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}",
			c.GetBuildProjectRepositoryArchitecturePackageFile,
		},
		"GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo": Route{
			strings.ToUpper("Get"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}?view=fileinfo",
			c.GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo,
		},
		"PutBuildProjectRepositoryArchitecturePackageFile": Route{
			strings.ToUpper("Put"),
			"/build/{project_name}/{repository_name}/{architecture_name}/{package_name}/{file_name}",
			c.PutBuildProjectRepositoryArchitecturePackageFile,
		},
	}
}

// BuildGet - Get a simple directory listing of all projects
func (c *BuildAPIController) BuildGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameGet - Get a simple directory listing of all repositories for the specified project
func (c *BuildAPIController) BuildProjectNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectNameParam := params["project_name"]
	if projectNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"project_name"}, nil)
		return
	}
	result, err := c.service.BuildProjectNameGet(r.Context(), projectNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNamePost - Apply different actions on builds/build processes of the specified project
func (c *BuildAPIController) BuildProjectNamePost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "cmd"}, nil)
		return
	}
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
	}
	var archParam string
	if query.Has("arch") {
		param := query.Get("arch")

		archParam = param
	} else {
	}
	var repositoryParam string
	if query.Has("repository") {
		param := query.Get("repository")

		repositoryParam = param
	} else {
	}
	result, err := c.service.BuildProjectNamePost(r.Context(), cmdParam, package_Param, archParam, repositoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet - Show the build dependencies of packages that are part of the project.
func (c *BuildAPIController) BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
	}
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	result, err := c.service.BuildProjectNameRepositoryNameArchitectureNameBuilddepinfoGet(r.Context(), package_Param, viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameArchitectureNamePackageNameGet - List binaries built by the sources of the specified package.
func (c *BuildAPIController) BuildProjectNameRepositoryNameArchitectureNamePackageNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	packageNameParam := params["package_name"]
	if packageNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"package_name"}, nil)
		return
	}
	result, err := c.service.BuildProjectNameRepositoryNameArchitectureNamePackageNameGet(r.Context(), packageNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet - Show the build status of a currently running build job.
func (c *BuildAPIController) BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildProjectNameRepositoryNameArchitectureNamePackageNameJobstatusGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet - Show the reason for the lastly triggered build.
func (c *BuildAPIController) BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildProjectNameRepositoryNameArchitectureNamePackageNameReasonGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameArchitectureNameRepositoryGet - List all binaries (produced by all packages of the given project).
func (c *BuildAPIController) BuildProjectNameRepositoryNameArchitectureNameRepositoryGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildProjectNameRepositoryNameArchitectureNameRepositoryGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameBuildconfigGet - Show the build configuration for the specified repository.
func (c *BuildAPIController) BuildProjectNameRepositoryNameBuildconfigGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.BuildProjectNameRepositoryNameBuildconfigGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameRepositoryNameGet - List of all architectures the specified project builds against a given repository.
func (c *BuildAPIController) BuildProjectNameRepositoryNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	repositoryNameParam := params["repository_name"]
	if repositoryNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"repository_name"}, nil)
		return
	}
	result, err := c.service.BuildProjectNameRepositoryNameGet(r.Context(), repositoryNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildProjectNameResultGet - Get the build results for packages, architectures and repositories of the specified project.
func (c *BuildAPIController) BuildProjectNameResultGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var viewParam string
	if query.Has("view") {
		param := query.Get("view")

		viewParam = param
	} else {
	}
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
	}
	var archParam string
	if query.Has("arch") {
		param := query.Get("arch")

		archParam = param
	} else {
	}
	var repositoryParam string
	if query.Has("repository") {
		param := query.Get("repository")

		repositoryParam = param
	} else {
	}
	var lastbuildParam bool
	if query.Has("lastbuild") {
		param, err := parseBoolParameter(
			query.Get("lastbuild"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		lastbuildParam = param
	} else {
	}
	var locallinkParam bool
	if query.Has("locallink") {
		param, err := parseBoolParameter(
			query.Get("locallink"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		locallinkParam = param
	} else {
	}
	var multibuildParam bool
	if query.Has("multibuild") {
		param, err := parseBoolParameter(
			query.Get("multibuild"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		multibuildParam = param
	} else {
	}
	result, err := c.service.BuildProjectNameResultGet(r.Context(), viewParam, package_Param, archParam, repositoryParam, lastbuildParam, locallinkParam, multibuildParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchPackageBuildinfo - 
func (c *BuildAPIController) GetBuildProjectRepositoryArchPackageBuildinfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBuildProjectRepositoryArchPackageBuildinfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchPackageHistory - 
func (c *BuildAPIController) GetBuildProjectRepositoryArchPackageHistory(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBuildProjectRepositoryArchPackageHistory(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchPackageLog - 
func (c *BuildAPIController) GetBuildProjectRepositoryArchPackageLog(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBuildProjectRepositoryArchPackageLog(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchPackageStatus - 
func (c *BuildAPIController) GetBuildProjectRepositoryArchPackageStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetBuildProjectRepositoryArchPackageStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchitecturePackageFile - Return a specific artifact file contents
func (c *BuildAPIController) GetBuildProjectRepositoryArchitecturePackageFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fileNameParam := params["file_name"]
	if fileNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"file_name"}, nil)
		return
	}
	result, err := c.service.GetBuildProjectRepositoryArchitecturePackageFile(r.Context(), fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo - This endpoint returns details about an specific artifact
func (c *BuildAPIController) GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var viewParam []string
	if query.Has("view") {
		viewParam = strings.Split(query.Get("view"), ",")
	}
	result, err := c.service.GetBuildProjectRepositoryArchitecturePackageFileViewFileinfo(r.Context(), viewParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PutBuildProjectRepositoryArchitecturePackageFile - Update a specific artifact file contents
func (c *BuildAPIController) PutBuildProjectRepositoryArchitecturePackageFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	packageNameParam := params["package_name"]
	if packageNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"package_name"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertstringRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertstringConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PutBuildProjectRepositoryArchitecturePackageFile(r.Context(), packageNameParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
