/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GroupsAPIController binds http requests to an api service and writes the service results to the http response
type GroupsAPIController struct {
	service GroupsAPIServicer
	errorHandler ErrorHandler
}

// GroupsAPIOption for how the controller is set up.
type GroupsAPIOption func(*GroupsAPIController)

// WithGroupsAPIErrorHandler inject ErrorHandler into controller
func WithGroupsAPIErrorHandler(h ErrorHandler) GroupsAPIOption {
	return func(c *GroupsAPIController) {
		c.errorHandler = h
	}
}

// NewGroupsAPIController creates a default api controller
func NewGroupsAPIController(s GroupsAPIServicer, opts ...GroupsAPIOption) Router {
	controller := &GroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupsAPIController
func (c *GroupsAPIController) Routes() Routes {
	return Routes{
		"GroupGet": Route{
			strings.ToUpper("Get"),
			"/group",
			c.GroupGet,
		},
		"GroupGroupTitleDelete": Route{
			strings.ToUpper("Delete"),
			"/group/{group_title}",
			c.GroupGroupTitleDelete,
		},
		"GroupGroupTitleGet": Route{
			strings.ToUpper("Get"),
			"/group/{group_title}",
			c.GroupGroupTitleGet,
		},
		"GroupGroupTitlePost": Route{
			strings.ToUpper("Post"),
			"/group/{group_title}",
			c.GroupGroupTitlePost,
		},
		"GroupGroupTitlePut": Route{
			strings.ToUpper("Put"),
			"/group/{group_title}",
			c.GroupGroupTitlePut,
		},
	}
}

// GroupGet - List available groups.
func (c *GroupsAPIController) GroupGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GroupGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GroupGroupTitleDelete - Delete a group.
func (c *GroupsAPIController) GroupGroupTitleDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GroupGroupTitleDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GroupGroupTitleGet - Read group data.
func (c *GroupsAPIController) GroupGroupTitleGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupTitleParam := params["group_title"]
	if groupTitleParam == "" {
		c.errorHandler(w, r, &RequiredError{"group_title"}, nil)
		return
	}
	result, err := c.service.GroupGroupTitleGet(r.Context(), groupTitleParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GroupGroupTitlePost - Modify group data.
func (c *GroupsAPIController) GroupGroupTitlePost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
	}
	var useridParam string
	if query.Has("userid") {
		param := query.Get("userid")

		useridParam = param
	} else {
	}
	var emailParam string
	if query.Has("email") {
		param := query.Get("email")

		emailParam = param
	} else {
	}
	result, err := c.service.GroupGroupTitlePost(r.Context(), cmdParam, useridParam, emailParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GroupGroupTitlePut - Write group data.
func (c *GroupsAPIController) GroupGroupTitlePut(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GroupGroupTitlePut(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
