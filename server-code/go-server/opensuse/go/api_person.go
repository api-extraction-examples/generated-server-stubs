/*
 * Open Build Service API
 *
 * The _Open Build Service API_ is a XML API.  To authenticate, use [HTTP basic authentication](https://en.wikipedia.org/wiki/Basic_access_authentication) by passing the _Authorization_ header in the form of `Authorization: Basic <credentials>`.  There is no API versioning as there is no need for it right now.  Only rudimentary rate limiting is implemented, so please be gentle when using the API concurrently, especially with potentially expensive operations. In case of abuse, we will limit/remove your access.  For command-line users, we recommend using [osc](https://github.com/openSUSE/osc) with its _api_ command to interact with the API. It's as simple as this example: `osc api /about` (_about_ is one of the endpoints documented below) 
 *
 * API version: 2.10.50
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PersonAPIController binds http requests to an api service and writes the service results to the http response
type PersonAPIController struct {
	service PersonAPIServicer
	errorHandler ErrorHandler
}

// PersonAPIOption for how the controller is set up.
type PersonAPIOption func(*PersonAPIController)

// WithPersonAPIErrorHandler inject ErrorHandler into controller
func WithPersonAPIErrorHandler(h ErrorHandler) PersonAPIOption {
	return func(c *PersonAPIController) {
		c.errorHandler = h
	}
}

// NewPersonAPIController creates a default api controller
func NewPersonAPIController(s PersonAPIServicer, opts ...PersonAPIOption) Router {
	controller := &PersonAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PersonAPIController
func (c *PersonAPIController) Routes() Routes {
	return Routes{
		"PersonGet": Route{
			strings.ToUpper("Get"),
			"/person",
			c.PersonGet,
		},
		"PersonLoginGet": Route{
			strings.ToUpper("Get"),
			"/person/{login}",
			c.PersonLoginGet,
		},
		"PersonLoginGroupGet": Route{
			strings.ToUpper("Get"),
			"/person/{login}/group",
			c.PersonLoginGroupGet,
		},
		"PersonLoginPost": Route{
			strings.ToUpper("Post"),
			"/person/{login}",
			c.PersonLoginPost,
		},
		"PersonLoginPut": Route{
			strings.ToUpper("Put"),
			"/person/{login}",
			c.PersonLoginPut,
		},
		"PersonLoginTokenGet": Route{
			strings.ToUpper("Get"),
			"/person/{login}/token",
			c.PersonLoginTokenGet,
		},
		"PersonLoginTokenIdDelete": Route{
			strings.ToUpper("Delete"),
			"/person/{login}/token/{id}",
			c.PersonLoginTokenIdDelete,
		},
		"PersonLoginTokenPost": Route{
			strings.ToUpper("Post"),
			"/person/{login}/token",
			c.PersonLoginTokenPost,
		},
		"PersonPost": Route{
			strings.ToUpper("Post"),
			"/person",
			c.PersonPost,
		},
		"PersonRegisterPost": Route{
			strings.ToUpper("Post"),
			"/person/register",
			c.PersonRegisterPost,
		},
	}
}

// PersonGet - List all people.
func (c *PersonAPIController) PersonGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var prefixParam string
	if query.Has("prefix") {
		param := query.Get("prefix")

		prefixParam = param
	} else {
	}
	result, err := c.service.PersonGet(r.Context(), prefixParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginGet - Get details about a person
func (c *PersonAPIController) PersonLoginGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	loginParam := params["login"]
	if loginParam == "" {
		c.errorHandler(w, r, &RequiredError{"login"}, nil)
		return
	}
	result, err := c.service.PersonLoginGet(r.Context(), loginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginGroupGet - List the groups of a person
func (c *PersonAPIController) PersonLoginGroupGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.PersonLoginGroupGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginPost - Perform changes on a registered person
func (c *PersonAPIController) PersonLoginPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "cmd"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PersonLoginPost(r.Context(), cmdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginPut - Update person
func (c *PersonAPIController) PersonLoginPut(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PersonLoginPut(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginTokenGet - List the authentication tokens of a person.
func (c *PersonAPIController) PersonLoginTokenGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.PersonLoginTokenGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginTokenIdDelete - Delete a token of a person.
func (c *PersonAPIController) PersonLoginTokenIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.PersonLoginTokenIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonLoginTokenPost - Create a new authentication token for a person.
func (c *PersonAPIController) PersonLoginTokenPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var projectParam string
	if query.Has("project") {
		param := query.Get("project")

		projectParam = param
	} else {
	}
	var package_Param string
	if query.Has("package") {
		param := query.Get("package")

		package_Param = param
	} else {
	}
	var operationParam string
	if query.Has("operation") {
		param := query.Get("operation")

		operationParam = param
	} else {
	}
	var scmTokenParam string
	if query.Has("scm_token") {
		param := query.Get("scm_token")

		scmTokenParam = param
	} else {
	}
	result, err := c.service.PersonLoginTokenPost(r.Context(), projectParam, package_Param, operationParam, scmTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonPost - Executes a command on the person endpoint.
func (c *PersonAPIController) PersonPost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var cmdParam string
	if query.Has("cmd") {
		param := query.Get("cmd")

		cmdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "cmd"}, nil)
		return
	}
	personPostRequestParam := PersonPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&personPostRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonPostRequestRequired(personPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonPostRequestConstraints(personPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PersonPost(r.Context(), cmdParam, personPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PersonRegisterPost - Registers a new person
func (c *PersonAPIController) PersonRegisterPost(w http.ResponseWriter, r *http.Request) {
	bodyParam := Object{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PersonRegisterPost(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
