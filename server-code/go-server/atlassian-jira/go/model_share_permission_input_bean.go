/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type SharePermissionInputBean struct {

	// The user account ID that the filter is shared with. For a request, specify the `accountId` property for the user.
	AccountId string `json:"accountId,omitempty"`

	// The ID of the group, which uniquely identifies the group across all Atlassian products.For example, *952d12c3-5b5b-4d04-bb32-44d383afc4b2*. Cannot be provided with `groupname`.
	GroupId string `json:"groupId,omitempty"`

	// The name of the group to share the filter with. Set `type` to `group`. Please note that the name of a group is mutable, to reliably identify a group use `groupId`.
	Groupname string `json:"groupname,omitempty"`

	// The ID of the project to share the filter with. Set `type` to `project`.
	ProjectId string `json:"projectId,omitempty"`

	// The ID of the project role to share the filter with. Set `type` to `projectRole` and the `projectId` for the project that the role is in.
	ProjectRoleId string `json:"projectRoleId,omitempty"`

	// The rights for the share permission.
	Rights int32 `json:"rights,omitempty"`

	// The type of the share permission.Specify the type as follows:   *  `user` Share with a user.  *  `group` Share with a group. Specify `groupname` as well.  *  `project` Share with a project. Specify `projectId` as well.  *  `projectRole` Share with a project role in a project. Specify `projectId` and `projectRoleId` as well.  *  `global` Share globally, including anonymous users. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.  *  `authenticated` Share with all logged-in users. This shows as `loggedin` in the response. If set, this type overrides all existing share permissions and must be deleted before any non-global share permissions is set.
	Type string `json:"type"`
}

// AssertSharePermissionInputBeanRequired checks if the required fields are not zero-ed
func AssertSharePermissionInputBeanRequired(obj SharePermissionInputBean) error {
	elements := map[string]interface{}{
		"type": obj.Type,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertSharePermissionInputBeanConstraints checks if the values respects the defined constraints
func AssertSharePermissionInputBeanConstraints(obj SharePermissionInputBean) error {
	return nil
}
