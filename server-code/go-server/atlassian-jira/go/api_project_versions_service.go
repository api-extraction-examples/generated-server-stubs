/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// ProjectVersionsAPIService is a service that implements the logic for the ProjectVersionsAPIServicer
// This service should implement the business logic for every endpoint for the ProjectVersionsAPI API.
// Include any external packages or services that will be required by this service.
type ProjectVersionsAPIService struct {
}

// NewProjectVersionsAPIService creates a default api service
func NewProjectVersionsAPIService() ProjectVersionsAPIServicer {
	return &ProjectVersionsAPIService{}
}

// CreateVersion - Create version
func (s *ProjectVersionsAPIService) CreateVersion(ctx context.Context, version Version) (ImplResponse, error) {
	// TODO - update CreateVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, Version{}) or use other options such as http.Ok ...
	// return Response(201, Version{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateVersion method not implemented")
}

// DeleteAndReplaceVersion - Delete and replace version
func (s *ProjectVersionsAPIService) DeleteAndReplaceVersion(ctx context.Context, id string, deleteAndReplaceVersionBean DeleteAndReplaceVersionBean) (ImplResponse, error) {
	// TODO - update DeleteAndReplaceVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteAndReplaceVersion method not implemented")
}

// DeleteVersion - Delete version
// Deprecated
func (s *ProjectVersionsAPIService) DeleteVersion(ctx context.Context, id string, moveFixIssuesTo string, moveAffectedIssuesTo string) (ImplResponse, error) {
	// TODO - update DeleteVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteVersion method not implemented")
}

// GetProjectVersions - Get project versions
func (s *ProjectVersionsAPIService) GetProjectVersions(ctx context.Context, projectIdOrKey string, expand string) (ImplResponse, error) {
	// TODO - update GetProjectVersions with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Version{}) or use other options such as http.Ok ...
	// return Response(200, []Version{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetProjectVersions method not implemented")
}

// GetProjectVersionsPaginated - Get project versions paginated
func (s *ProjectVersionsAPIService) GetProjectVersionsPaginated(ctx context.Context, projectIdOrKey string, startAt int64, maxResults int32, orderBy string, query string, status string, expand string) (ImplResponse, error) {
	// TODO - update GetProjectVersionsPaginated with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PageBeanVersion{}) or use other options such as http.Ok ...
	// return Response(200, PageBeanVersion{}), nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetProjectVersionsPaginated method not implemented")
}

// GetVersion - Get version
func (s *ProjectVersionsAPIService) GetVersion(ctx context.Context, id string, expand string) (ImplResponse, error) {
	// TODO - update GetVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Version{}) or use other options such as http.Ok ...
	// return Response(200, Version{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetVersion method not implemented")
}

// GetVersionRelatedIssues - Get version&#39;s related issues count
func (s *ProjectVersionsAPIService) GetVersionRelatedIssues(ctx context.Context, id string) (ImplResponse, error) {
	// TODO - update GetVersionRelatedIssues with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, VersionIssueCounts{}) or use other options such as http.Ok ...
	// return Response(200, VersionIssueCounts{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetVersionRelatedIssues method not implemented")
}

// GetVersionUnresolvedIssues - Get version&#39;s unresolved issues count
func (s *ProjectVersionsAPIService) GetVersionUnresolvedIssues(ctx context.Context, id string) (ImplResponse, error) {
	// TODO - update GetVersionUnresolvedIssues with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, VersionUnresolvedIssuesCount{}) or use other options such as http.Ok ...
	// return Response(200, VersionUnresolvedIssuesCount{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetVersionUnresolvedIssues method not implemented")
}

// MergeVersions - Merge versions
func (s *ProjectVersionsAPIService) MergeVersions(ctx context.Context, id string, moveIssuesTo string) (ImplResponse, error) {
	// TODO - update MergeVersions with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("MergeVersions method not implemented")
}

// MoveVersion - Move version
func (s *ProjectVersionsAPIService) MoveVersion(ctx context.Context, id string, versionMoveBean VersionMoveBean) (ImplResponse, error) {
	// TODO - update MoveVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Version{}) or use other options such as http.Ok ...
	// return Response(200, Version{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("MoveVersion method not implemented")
}

// UpdateVersion - Update version
func (s *ProjectVersionsAPIService) UpdateVersion(ctx context.Context, id string, version Version) (ImplResponse, error) {
	// TODO - update UpdateVersion with the required logic for this service method.
	// Add api_project_versions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Version{}) or use other options such as http.Ok ...
	// return Response(200, Version{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateVersion method not implemented")
}
