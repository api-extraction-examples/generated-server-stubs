/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
)



// AnnouncementBannerAPIRouter defines the required methods for binding the api requests to a responses for the AnnouncementBannerAPI
// The AnnouncementBannerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AnnouncementBannerAPIServicer to perform the required actions, then write the service results to the http response.
type AnnouncementBannerAPIRouter interface { 
	GetBanner(http.ResponseWriter, *http.Request)
	SetBanner(http.ResponseWriter, *http.Request)
}
// AppMigrationAPIRouter defines the required methods for binding the api requests to a responses for the AppMigrationAPI
// The AppMigrationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AppMigrationAPIServicer to perform the required actions, then write the service results to the http response.
type AppMigrationAPIRouter interface { 
	AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut(http.ResponseWriter, *http.Request)
	MigrationResourceUpdateEntityPropertiesValuePut(http.ResponseWriter, *http.Request)
	MigrationResourceWorkflowRuleSearchPost(http.ResponseWriter, *http.Request)
}
// AppPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the AppPropertiesAPI
// The AppPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AppPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type AppPropertiesAPIRouter interface { 
	AddonPropertiesResourceDeleteAddonPropertyDelete(http.ResponseWriter, *http.Request)
	AddonPropertiesResourceGetAddonPropertiesGet(http.ResponseWriter, *http.Request)
	AddonPropertiesResourceGetAddonPropertyGet(http.ResponseWriter, *http.Request)
	AddonPropertiesResourcePutAddonPropertyPut(http.ResponseWriter, *http.Request)
}
// ApplicationRolesAPIRouter defines the required methods for binding the api requests to a responses for the ApplicationRolesAPI
// The ApplicationRolesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ApplicationRolesAPIServicer to perform the required actions, then write the service results to the http response.
type ApplicationRolesAPIRouter interface { 
	GetAllApplicationRoles(http.ResponseWriter, *http.Request)
	GetApplicationRole(http.ResponseWriter, *http.Request)
}
// AuditRecordsAPIRouter defines the required methods for binding the api requests to a responses for the AuditRecordsAPI
// The AuditRecordsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuditRecordsAPIServicer to perform the required actions, then write the service results to the http response.
type AuditRecordsAPIRouter interface { 
	GetAuditRecords(http.ResponseWriter, *http.Request)
}
// AvatarsAPIRouter defines the required methods for binding the api requests to a responses for the AvatarsAPI
// The AvatarsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AvatarsAPIServicer to perform the required actions, then write the service results to the http response.
type AvatarsAPIRouter interface { 
	DeleteAvatar(http.ResponseWriter, *http.Request)
	GetAllSystemAvatars(http.ResponseWriter, *http.Request)
	GetAvatarImageByID(http.ResponseWriter, *http.Request)
	GetAvatarImageByOwner(http.ResponseWriter, *http.Request)
	GetAvatarImageByType(http.ResponseWriter, *http.Request)
	GetAvatars(http.ResponseWriter, *http.Request)
	StoreAvatar(http.ResponseWriter, *http.Request)
}
// DashboardsAPIRouter defines the required methods for binding the api requests to a responses for the DashboardsAPI
// The DashboardsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DashboardsAPIServicer to perform the required actions, then write the service results to the http response.
type DashboardsAPIRouter interface { 
	AddGadget(http.ResponseWriter, *http.Request)
	CopyDashboard(http.ResponseWriter, *http.Request)
	CreateDashboard(http.ResponseWriter, *http.Request)
	DeleteDashboard(http.ResponseWriter, *http.Request)
	DeleteDashboardItemProperty(http.ResponseWriter, *http.Request)
	GetAllAvailableDashboardGadgets(http.ResponseWriter, *http.Request)
	GetAllDashboards(http.ResponseWriter, *http.Request)
	GetAllGadgets(http.ResponseWriter, *http.Request)
	GetDashboard(http.ResponseWriter, *http.Request)
	GetDashboardItemProperty(http.ResponseWriter, *http.Request)
	GetDashboardItemPropertyKeys(http.ResponseWriter, *http.Request)
	GetDashboardsPaginated(http.ResponseWriter, *http.Request)
	RemoveGadget(http.ResponseWriter, *http.Request)
	SetDashboardItemProperty(http.ResponseWriter, *http.Request)
	UpdateDashboard(http.ResponseWriter, *http.Request)
	UpdateGadget(http.ResponseWriter, *http.Request)
}
// DynamicModulesAPIRouter defines the required methods for binding the api requests to a responses for the DynamicModulesAPI
// The DynamicModulesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DynamicModulesAPIServicer to perform the required actions, then write the service results to the http response.
type DynamicModulesAPIRouter interface { 
	DynamicModulesResourceGetModulesGet(http.ResponseWriter, *http.Request)
	DynamicModulesResourceRegisterModulesPost(http.ResponseWriter, *http.Request)
	DynamicModulesResourceRemoveModulesDelete(http.ResponseWriter, *http.Request)
}
// FilterSharingAPIRouter defines the required methods for binding the api requests to a responses for the FilterSharingAPI
// The FilterSharingAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FilterSharingAPIServicer to perform the required actions, then write the service results to the http response.
type FilterSharingAPIRouter interface { 
	AddSharePermission(http.ResponseWriter, *http.Request)
	DeleteSharePermission(http.ResponseWriter, *http.Request)
	GetDefaultShareScope(http.ResponseWriter, *http.Request)
	GetSharePermission(http.ResponseWriter, *http.Request)
	GetSharePermissions(http.ResponseWriter, *http.Request)
	SetDefaultShareScope(http.ResponseWriter, *http.Request)
}
// FiltersAPIRouter defines the required methods for binding the api requests to a responses for the FiltersAPI
// The FiltersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FiltersAPIServicer to perform the required actions, then write the service results to the http response.
type FiltersAPIRouter interface { 
	ChangeFilterOwner(http.ResponseWriter, *http.Request)
	CreateFilter(http.ResponseWriter, *http.Request)
	DeleteFavouriteForFilter(http.ResponseWriter, *http.Request)
	DeleteFilter(http.ResponseWriter, *http.Request)
	GetColumns(http.ResponseWriter, *http.Request)
	GetFavouriteFilters(http.ResponseWriter, *http.Request)
	GetFilter(http.ResponseWriter, *http.Request)
	GetFiltersPaginated(http.ResponseWriter, *http.Request)
	GetMyFilters(http.ResponseWriter, *http.Request)
	ResetColumns(http.ResponseWriter, *http.Request)
	SetColumns(http.ResponseWriter, *http.Request)
	SetFavouriteForFilter(http.ResponseWriter, *http.Request)
	UpdateFilter(http.ResponseWriter, *http.Request)
}
// GroupAndUserPickerAPIRouter defines the required methods for binding the api requests to a responses for the GroupAndUserPickerAPI
// The GroupAndUserPickerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GroupAndUserPickerAPIServicer to perform the required actions, then write the service results to the http response.
type GroupAndUserPickerAPIRouter interface { 
	FindUsersAndGroups(http.ResponseWriter, *http.Request)
}
// GroupsAPIRouter defines the required methods for binding the api requests to a responses for the GroupsAPI
// The GroupsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GroupsAPIServicer to perform the required actions, then write the service results to the http response.
type GroupsAPIRouter interface { 
	AddUserToGroup(http.ResponseWriter, *http.Request)
	BulkGetGroups(http.ResponseWriter, *http.Request)
	CreateGroup(http.ResponseWriter, *http.Request)
	FindGroups(http.ResponseWriter, *http.Request)
	// Deprecated
	GetGroup(http.ResponseWriter, *http.Request)
	GetUsersFromGroup(http.ResponseWriter, *http.Request)
	RemoveGroup(http.ResponseWriter, *http.Request)
	RemoveUserFromGroup(http.ResponseWriter, *http.Request)
}
// InstanceInformationAPIRouter defines the required methods for binding the api requests to a responses for the InstanceInformationAPI
// The InstanceInformationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InstanceInformationAPIServicer to perform the required actions, then write the service results to the http response.
type InstanceInformationAPIRouter interface { 
	GetLicense(http.ResponseWriter, *http.Request)
}
// IssueAttachmentsAPIRouter defines the required methods for binding the api requests to a responses for the IssueAttachmentsAPI
// The IssueAttachmentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueAttachmentsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueAttachmentsAPIRouter interface { 
	AddAttachment(http.ResponseWriter, *http.Request)
	ExpandAttachmentForHumans(http.ResponseWriter, *http.Request)
	ExpandAttachmentForMachines(http.ResponseWriter, *http.Request)
	GetAttachment(http.ResponseWriter, *http.Request)
	GetAttachmentContent(http.ResponseWriter, *http.Request)
	GetAttachmentMeta(http.ResponseWriter, *http.Request)
	GetAttachmentThumbnail(http.ResponseWriter, *http.Request)
	RemoveAttachment(http.ResponseWriter, *http.Request)
}
// IssueCommentPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the IssueCommentPropertiesAPI
// The IssueCommentPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCommentPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCommentPropertiesAPIRouter interface { 
	DeleteCommentProperty(http.ResponseWriter, *http.Request)
	GetCommentProperty(http.ResponseWriter, *http.Request)
	GetCommentPropertyKeys(http.ResponseWriter, *http.Request)
	SetCommentProperty(http.ResponseWriter, *http.Request)
}
// IssueCommentsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCommentsAPI
// The IssueCommentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCommentsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCommentsAPIRouter interface { 
	AddComment(http.ResponseWriter, *http.Request)
	DeleteComment(http.ResponseWriter, *http.Request)
	GetComment(http.ResponseWriter, *http.Request)
	GetComments(http.ResponseWriter, *http.Request)
	GetCommentsByIds(http.ResponseWriter, *http.Request)
	UpdateComment(http.ResponseWriter, *http.Request)
}
// IssueCustomFieldConfigurationAppsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCustomFieldConfigurationAppsAPI
// The IssueCustomFieldConfigurationAppsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCustomFieldConfigurationAppsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCustomFieldConfigurationAppsAPIRouter interface { 
	GetCustomFieldConfiguration(http.ResponseWriter, *http.Request)
	UpdateCustomFieldConfiguration(http.ResponseWriter, *http.Request)
}
// IssueCustomFieldContextsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCustomFieldContextsAPI
// The IssueCustomFieldContextsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCustomFieldContextsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCustomFieldContextsAPIRouter interface { 
	AddIssueTypesToContext(http.ResponseWriter, *http.Request)
	AssignProjectsToCustomFieldContext(http.ResponseWriter, *http.Request)
	CreateCustomFieldContext(http.ResponseWriter, *http.Request)
	DeleteCustomFieldContext(http.ResponseWriter, *http.Request)
	GetContextsForField(http.ResponseWriter, *http.Request)
	GetCustomFieldContextsForProjectsAndIssueTypes(http.ResponseWriter, *http.Request)
	GetDefaultValues(http.ResponseWriter, *http.Request)
	GetIssueTypeMappingsForContexts(http.ResponseWriter, *http.Request)
	GetProjectContextMapping(http.ResponseWriter, *http.Request)
	RemoveCustomFieldContextFromProjects(http.ResponseWriter, *http.Request)
	RemoveIssueTypesFromContext(http.ResponseWriter, *http.Request)
	SetDefaultValues(http.ResponseWriter, *http.Request)
	UpdateCustomFieldContext(http.ResponseWriter, *http.Request)
}
// IssueCustomFieldOptionsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCustomFieldOptionsAPI
// The IssueCustomFieldOptionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCustomFieldOptionsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCustomFieldOptionsAPIRouter interface { 
	CreateCustomFieldOption(http.ResponseWriter, *http.Request)
	DeleteCustomFieldOption(http.ResponseWriter, *http.Request)
	GetCustomFieldOption(http.ResponseWriter, *http.Request)
	GetOptionsForContext(http.ResponseWriter, *http.Request)
	ReorderCustomFieldOptions(http.ResponseWriter, *http.Request)
	UpdateCustomFieldOption(http.ResponseWriter, *http.Request)
}
// IssueCustomFieldOptionsAppsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCustomFieldOptionsAppsAPI
// The IssueCustomFieldOptionsAppsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCustomFieldOptionsAppsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCustomFieldOptionsAppsAPIRouter interface { 
	CreateIssueFieldOption(http.ResponseWriter, *http.Request)
	DeleteIssueFieldOption(http.ResponseWriter, *http.Request)
	GetAllIssueFieldOptions(http.ResponseWriter, *http.Request)
	GetIssueFieldOption(http.ResponseWriter, *http.Request)
	GetSelectableIssueFieldOptions(http.ResponseWriter, *http.Request)
	GetVisibleIssueFieldOptions(http.ResponseWriter, *http.Request)
	ReplaceIssueFieldOption(http.ResponseWriter, *http.Request)
	UpdateIssueFieldOption(http.ResponseWriter, *http.Request)
}
// IssueCustomFieldValuesAppsAPIRouter defines the required methods for binding the api requests to a responses for the IssueCustomFieldValuesAppsAPI
// The IssueCustomFieldValuesAppsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueCustomFieldValuesAppsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueCustomFieldValuesAppsAPIRouter interface { 
	UpdateCustomFieldValue(http.ResponseWriter, *http.Request)
	UpdateMultipleCustomFieldValues(http.ResponseWriter, *http.Request)
}
// IssueFieldConfigurationsAPIRouter defines the required methods for binding the api requests to a responses for the IssueFieldConfigurationsAPI
// The IssueFieldConfigurationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueFieldConfigurationsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueFieldConfigurationsAPIRouter interface { 
	AssignFieldConfigurationSchemeToProject(http.ResponseWriter, *http.Request)
	CreateFieldConfiguration(http.ResponseWriter, *http.Request)
	CreateFieldConfigurationScheme(http.ResponseWriter, *http.Request)
	DeleteFieldConfiguration(http.ResponseWriter, *http.Request)
	DeleteFieldConfigurationScheme(http.ResponseWriter, *http.Request)
	GetAllFieldConfigurationSchemes(http.ResponseWriter, *http.Request)
	GetAllFieldConfigurations(http.ResponseWriter, *http.Request)
	GetFieldConfigurationItems(http.ResponseWriter, *http.Request)
	GetFieldConfigurationSchemeMappings(http.ResponseWriter, *http.Request)
	GetFieldConfigurationSchemeProjectMapping(http.ResponseWriter, *http.Request)
	RemoveIssueTypesFromGlobalFieldConfigurationScheme(http.ResponseWriter, *http.Request)
	SetFieldConfigurationSchemeMapping(http.ResponseWriter, *http.Request)
	UpdateFieldConfiguration(http.ResponseWriter, *http.Request)
	UpdateFieldConfigurationItems(http.ResponseWriter, *http.Request)
	UpdateFieldConfigurationScheme(http.ResponseWriter, *http.Request)
}
// IssueFieldsAPIRouter defines the required methods for binding the api requests to a responses for the IssueFieldsAPI
// The IssueFieldsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueFieldsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueFieldsAPIRouter interface { 
	CreateCustomField(http.ResponseWriter, *http.Request)
	DeleteCustomField(http.ResponseWriter, *http.Request)
	// Deprecated
	GetContextsForFieldDeprecated(http.ResponseWriter, *http.Request)
	GetFields(http.ResponseWriter, *http.Request)
	GetFieldsPaginated(http.ResponseWriter, *http.Request)
	GetTrashedFieldsPaginated(http.ResponseWriter, *http.Request)
	RestoreCustomField(http.ResponseWriter, *http.Request)
	TrashCustomField(http.ResponseWriter, *http.Request)
	UpdateCustomField(http.ResponseWriter, *http.Request)
}
// IssueLinkTypesAPIRouter defines the required methods for binding the api requests to a responses for the IssueLinkTypesAPI
// The IssueLinkTypesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueLinkTypesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueLinkTypesAPIRouter interface { 
	CreateIssueLinkType(http.ResponseWriter, *http.Request)
	DeleteIssueLinkType(http.ResponseWriter, *http.Request)
	GetIssueLinkType(http.ResponseWriter, *http.Request)
	GetIssueLinkTypes(http.ResponseWriter, *http.Request)
	UpdateIssueLinkType(http.ResponseWriter, *http.Request)
}
// IssueLinksAPIRouter defines the required methods for binding the api requests to a responses for the IssueLinksAPI
// The IssueLinksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueLinksAPIServicer to perform the required actions, then write the service results to the http response.
type IssueLinksAPIRouter interface { 
	DeleteIssueLink(http.ResponseWriter, *http.Request)
	GetIssueLink(http.ResponseWriter, *http.Request)
	LinkIssues(http.ResponseWriter, *http.Request)
}
// IssueNavigatorSettingsAPIRouter defines the required methods for binding the api requests to a responses for the IssueNavigatorSettingsAPI
// The IssueNavigatorSettingsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueNavigatorSettingsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueNavigatorSettingsAPIRouter interface { 
	GetIssueNavigatorDefaultColumns(http.ResponseWriter, *http.Request)
	SetIssueNavigatorDefaultColumns(http.ResponseWriter, *http.Request)
}
// IssueNotificationSchemesAPIRouter defines the required methods for binding the api requests to a responses for the IssueNotificationSchemesAPI
// The IssueNotificationSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueNotificationSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueNotificationSchemesAPIRouter interface { 
	AddNotifications(http.ResponseWriter, *http.Request)
	CreateNotificationScheme(http.ResponseWriter, *http.Request)
	DeleteNotificationScheme(http.ResponseWriter, *http.Request)
	GetNotificationScheme(http.ResponseWriter, *http.Request)
	GetNotificationSchemeToProjectMappings(http.ResponseWriter, *http.Request)
	GetNotificationSchemes(http.ResponseWriter, *http.Request)
	RemoveNotificationFromNotificationScheme(http.ResponseWriter, *http.Request)
	UpdateNotificationScheme(http.ResponseWriter, *http.Request)
}
// IssuePrioritiesAPIRouter defines the required methods for binding the api requests to a responses for the IssuePrioritiesAPI
// The IssuePrioritiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssuePrioritiesAPIServicer to perform the required actions, then write the service results to the http response.
type IssuePrioritiesAPIRouter interface { 
	CreatePriority(http.ResponseWriter, *http.Request)
	DeletePriority(http.ResponseWriter, *http.Request)
	// Deprecated
	GetPriorities(http.ResponseWriter, *http.Request)
	GetPriority(http.ResponseWriter, *http.Request)
	MovePriorities(http.ResponseWriter, *http.Request)
	SearchPriorities(http.ResponseWriter, *http.Request)
	SetDefaultPriority(http.ResponseWriter, *http.Request)
	UpdatePriority(http.ResponseWriter, *http.Request)
}
// IssuePropertiesAPIRouter defines the required methods for binding the api requests to a responses for the IssuePropertiesAPI
// The IssuePropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssuePropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type IssuePropertiesAPIRouter interface { 
	BulkDeleteIssueProperty(http.ResponseWriter, *http.Request)
	BulkSetIssuePropertiesByIssue(http.ResponseWriter, *http.Request)
	BulkSetIssueProperty(http.ResponseWriter, *http.Request)
	BulkSetIssuesPropertiesList(http.ResponseWriter, *http.Request)
	DeleteIssueProperty(http.ResponseWriter, *http.Request)
	GetIssueProperty(http.ResponseWriter, *http.Request)
	GetIssuePropertyKeys(http.ResponseWriter, *http.Request)
	SetIssueProperty(http.ResponseWriter, *http.Request)
}
// IssueRemoteLinksAPIRouter defines the required methods for binding the api requests to a responses for the IssueRemoteLinksAPI
// The IssueRemoteLinksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueRemoteLinksAPIServicer to perform the required actions, then write the service results to the http response.
type IssueRemoteLinksAPIRouter interface { 
	CreateOrUpdateRemoteIssueLink(http.ResponseWriter, *http.Request)
	DeleteRemoteIssueLinkByGlobalId(http.ResponseWriter, *http.Request)
	DeleteRemoteIssueLinkById(http.ResponseWriter, *http.Request)
	GetRemoteIssueLinkById(http.ResponseWriter, *http.Request)
	GetRemoteIssueLinks(http.ResponseWriter, *http.Request)
	UpdateRemoteIssueLink(http.ResponseWriter, *http.Request)
}
// IssueResolutionsAPIRouter defines the required methods for binding the api requests to a responses for the IssueResolutionsAPI
// The IssueResolutionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueResolutionsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueResolutionsAPIRouter interface { 
	CreateResolution(http.ResponseWriter, *http.Request)
	DeleteResolution(http.ResponseWriter, *http.Request)
	GetResolution(http.ResponseWriter, *http.Request)
	// Deprecated
	GetResolutions(http.ResponseWriter, *http.Request)
	MoveResolutions(http.ResponseWriter, *http.Request)
	SearchResolutions(http.ResponseWriter, *http.Request)
	SetDefaultResolution(http.ResponseWriter, *http.Request)
	UpdateResolution(http.ResponseWriter, *http.Request)
}
// IssueSearchAPIRouter defines the required methods for binding the api requests to a responses for the IssueSearchAPI
// The IssueSearchAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueSearchAPIServicer to perform the required actions, then write the service results to the http response.
type IssueSearchAPIRouter interface { 
	GetIssuePickerResource(http.ResponseWriter, *http.Request)
	MatchIssues(http.ResponseWriter, *http.Request)
	SearchForIssuesUsingJql(http.ResponseWriter, *http.Request)
	SearchForIssuesUsingJqlPost(http.ResponseWriter, *http.Request)
}
// IssueSecurityLevelAPIRouter defines the required methods for binding the api requests to a responses for the IssueSecurityLevelAPI
// The IssueSecurityLevelAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueSecurityLevelAPIServicer to perform the required actions, then write the service results to the http response.
type IssueSecurityLevelAPIRouter interface { 
	GetIssueSecurityLevel(http.ResponseWriter, *http.Request)
	GetIssueSecurityLevelMembers(http.ResponseWriter, *http.Request)
}
// IssueSecuritySchemesAPIRouter defines the required methods for binding the api requests to a responses for the IssueSecuritySchemesAPI
// The IssueSecuritySchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueSecuritySchemesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueSecuritySchemesAPIRouter interface { 
	AddSecurityLevel(http.ResponseWriter, *http.Request)
	AddSecurityLevelMembers(http.ResponseWriter, *http.Request)
	CreateIssueSecurityScheme(http.ResponseWriter, *http.Request)
	DeleteSecurityScheme(http.ResponseWriter, *http.Request)
	GetIssueSecurityScheme(http.ResponseWriter, *http.Request)
	GetIssueSecuritySchemes(http.ResponseWriter, *http.Request)
	GetSecurityLevelMembers(http.ResponseWriter, *http.Request)
	GetSecurityLevels(http.ResponseWriter, *http.Request)
	RemoveLevel(http.ResponseWriter, *http.Request)
	RemoveMemberFromSecurityLevel(http.ResponseWriter, *http.Request)
	SearchProjectsUsingSecuritySchemes(http.ResponseWriter, *http.Request)
	SearchSecuritySchemes(http.ResponseWriter, *http.Request)
	SetDefaultLevels(http.ResponseWriter, *http.Request)
	UpdateIssueSecurityScheme(http.ResponseWriter, *http.Request)
	UpdateSecurityLevel(http.ResponseWriter, *http.Request)
}
// IssueTypePropertiesAPIRouter defines the required methods for binding the api requests to a responses for the IssueTypePropertiesAPI
// The IssueTypePropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueTypePropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueTypePropertiesAPIRouter interface { 
	DeleteIssueTypeProperty(http.ResponseWriter, *http.Request)
	GetIssueTypeProperty(http.ResponseWriter, *http.Request)
	GetIssueTypePropertyKeys(http.ResponseWriter, *http.Request)
	SetIssueTypeProperty(http.ResponseWriter, *http.Request)
}
// IssueTypeSchemesAPIRouter defines the required methods for binding the api requests to a responses for the IssueTypeSchemesAPI
// The IssueTypeSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueTypeSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueTypeSchemesAPIRouter interface { 
	AddIssueTypesToIssueTypeScheme(http.ResponseWriter, *http.Request)
	AssignIssueTypeSchemeToProject(http.ResponseWriter, *http.Request)
	CreateIssueTypeScheme(http.ResponseWriter, *http.Request)
	DeleteIssueTypeScheme(http.ResponseWriter, *http.Request)
	GetAllIssueTypeSchemes(http.ResponseWriter, *http.Request)
	GetIssueTypeSchemeForProjects(http.ResponseWriter, *http.Request)
	GetIssueTypeSchemesMapping(http.ResponseWriter, *http.Request)
	RemoveIssueTypeFromIssueTypeScheme(http.ResponseWriter, *http.Request)
	ReorderIssueTypesInIssueTypeScheme(http.ResponseWriter, *http.Request)
	UpdateIssueTypeScheme(http.ResponseWriter, *http.Request)
}
// IssueTypeScreenSchemesAPIRouter defines the required methods for binding the api requests to a responses for the IssueTypeScreenSchemesAPI
// The IssueTypeScreenSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueTypeScreenSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueTypeScreenSchemesAPIRouter interface { 
	AppendMappingsForIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
	AssignIssueTypeScreenSchemeToProject(http.ResponseWriter, *http.Request)
	CreateIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
	DeleteIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
	GetIssueTypeScreenSchemeMappings(http.ResponseWriter, *http.Request)
	GetIssueTypeScreenSchemeProjectAssociations(http.ResponseWriter, *http.Request)
	GetIssueTypeScreenSchemes(http.ResponseWriter, *http.Request)
	GetProjectsForIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
	RemoveMappingsFromIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
	UpdateDefaultScreenScheme(http.ResponseWriter, *http.Request)
	UpdateIssueTypeScreenScheme(http.ResponseWriter, *http.Request)
}
// IssueTypesAPIRouter defines the required methods for binding the api requests to a responses for the IssueTypesAPI
// The IssueTypesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueTypesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueTypesAPIRouter interface { 
	CreateIssueType(http.ResponseWriter, *http.Request)
	CreateIssueTypeAvatar(http.ResponseWriter, *http.Request)
	DeleteIssueType(http.ResponseWriter, *http.Request)
	GetAlternativeIssueTypes(http.ResponseWriter, *http.Request)
	GetIssueAllTypes(http.ResponseWriter, *http.Request)
	GetIssueType(http.ResponseWriter, *http.Request)
	GetIssueTypesForProject(http.ResponseWriter, *http.Request)
	UpdateIssueType(http.ResponseWriter, *http.Request)
}
// IssueVotesAPIRouter defines the required methods for binding the api requests to a responses for the IssueVotesAPI
// The IssueVotesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueVotesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueVotesAPIRouter interface { 
	AddVote(http.ResponseWriter, *http.Request)
	GetVotes(http.ResponseWriter, *http.Request)
	RemoveVote(http.ResponseWriter, *http.Request)
}
// IssueWatchersAPIRouter defines the required methods for binding the api requests to a responses for the IssueWatchersAPI
// The IssueWatchersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueWatchersAPIServicer to perform the required actions, then write the service results to the http response.
type IssueWatchersAPIRouter interface { 
	AddWatcher(http.ResponseWriter, *http.Request)
	GetIsWatchingIssueBulk(http.ResponseWriter, *http.Request)
	GetIssueWatchers(http.ResponseWriter, *http.Request)
	RemoveWatcher(http.ResponseWriter, *http.Request)
}
// IssueWorklogPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the IssueWorklogPropertiesAPI
// The IssueWorklogPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueWorklogPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type IssueWorklogPropertiesAPIRouter interface { 
	DeleteWorklogProperty(http.ResponseWriter, *http.Request)
	GetWorklogProperty(http.ResponseWriter, *http.Request)
	GetWorklogPropertyKeys(http.ResponseWriter, *http.Request)
	SetWorklogProperty(http.ResponseWriter, *http.Request)
}
// IssueWorklogsAPIRouter defines the required methods for binding the api requests to a responses for the IssueWorklogsAPI
// The IssueWorklogsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssueWorklogsAPIServicer to perform the required actions, then write the service results to the http response.
type IssueWorklogsAPIRouter interface { 
	AddWorklog(http.ResponseWriter, *http.Request)
	DeleteWorklog(http.ResponseWriter, *http.Request)
	GetIdsOfWorklogsDeletedSince(http.ResponseWriter, *http.Request)
	GetIdsOfWorklogsModifiedSince(http.ResponseWriter, *http.Request)
	GetIssueWorklog(http.ResponseWriter, *http.Request)
	GetWorklog(http.ResponseWriter, *http.Request)
	GetWorklogsForIds(http.ResponseWriter, *http.Request)
	UpdateWorklog(http.ResponseWriter, *http.Request)
}
// IssuesAPIRouter defines the required methods for binding the api requests to a responses for the IssuesAPI
// The IssuesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a IssuesAPIServicer to perform the required actions, then write the service results to the http response.
type IssuesAPIRouter interface { 
	AssignIssue(http.ResponseWriter, *http.Request)
	CreateIssue(http.ResponseWriter, *http.Request)
	CreateIssues(http.ResponseWriter, *http.Request)
	DeleteIssue(http.ResponseWriter, *http.Request)
	DoTransition(http.ResponseWriter, *http.Request)
	EditIssue(http.ResponseWriter, *http.Request)
	GetChangeLogs(http.ResponseWriter, *http.Request)
	GetChangeLogsByIds(http.ResponseWriter, *http.Request)
	GetCreateIssueMeta(http.ResponseWriter, *http.Request)
	GetEditIssueMeta(http.ResponseWriter, *http.Request)
	GetEvents(http.ResponseWriter, *http.Request)
	GetIssue(http.ResponseWriter, *http.Request)
	GetTransitions(http.ResponseWriter, *http.Request)
	Notify(http.ResponseWriter, *http.Request)
}
// JQLAPIRouter defines the required methods for binding the api requests to a responses for the JQLAPI
// The JQLAPIRouter implementation should parse necessary information from the http request,
// pass the data to a JQLAPIServicer to perform the required actions, then write the service results to the http response.
type JQLAPIRouter interface { 
	GetAutoComplete(http.ResponseWriter, *http.Request)
	GetAutoCompletePost(http.ResponseWriter, *http.Request)
	GetFieldAutoCompleteForQueryString(http.ResponseWriter, *http.Request)
	MigrateQueries(http.ResponseWriter, *http.Request)
	ParseJqlQueries(http.ResponseWriter, *http.Request)
	SanitiseJqlQueries(http.ResponseWriter, *http.Request)
}
// JQLFunctionsAppsAPIRouter defines the required methods for binding the api requests to a responses for the JQLFunctionsAppsAPI
// The JQLFunctionsAppsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a JQLFunctionsAppsAPIServicer to perform the required actions, then write the service results to the http response.
type JQLFunctionsAppsAPIRouter interface { 
	GetPrecomputations(http.ResponseWriter, *http.Request)
	UpdatePrecomputations(http.ResponseWriter, *http.Request)
}
// JiraExpressionsAPIRouter defines the required methods for binding the api requests to a responses for the JiraExpressionsAPI
// The JiraExpressionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a JiraExpressionsAPIServicer to perform the required actions, then write the service results to the http response.
type JiraExpressionsAPIRouter interface { 
	AnalyseExpression(http.ResponseWriter, *http.Request)
	EvaluateJiraExpression(http.ResponseWriter, *http.Request)
}
// JiraSettingsAPIRouter defines the required methods for binding the api requests to a responses for the JiraSettingsAPI
// The JiraSettingsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a JiraSettingsAPIServicer to perform the required actions, then write the service results to the http response.
type JiraSettingsAPIRouter interface { 
	GetAdvancedSettings(http.ResponseWriter, *http.Request)
	GetApplicationProperty(http.ResponseWriter, *http.Request)
	GetConfiguration(http.ResponseWriter, *http.Request)
	SetApplicationProperty(http.ResponseWriter, *http.Request)
}
// LabelsAPIRouter defines the required methods for binding the api requests to a responses for the LabelsAPI
// The LabelsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LabelsAPIServicer to perform the required actions, then write the service results to the http response.
type LabelsAPIRouter interface { 
	GetAllLabels(http.ResponseWriter, *http.Request)
}
// LicenseMetricsAPIRouter defines the required methods for binding the api requests to a responses for the LicenseMetricsAPI
// The LicenseMetricsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LicenseMetricsAPIServicer to perform the required actions, then write the service results to the http response.
type LicenseMetricsAPIRouter interface { 
	GetApproximateApplicationLicenseCount(http.ResponseWriter, *http.Request)
	GetApproximateLicenseCount(http.ResponseWriter, *http.Request)
}
// MyselfAPIRouter defines the required methods for binding the api requests to a responses for the MyselfAPI
// The MyselfAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MyselfAPIServicer to perform the required actions, then write the service results to the http response.
type MyselfAPIRouter interface { 
	// Deprecated
	DeleteLocale(http.ResponseWriter, *http.Request)
	GetCurrentUser(http.ResponseWriter, *http.Request)
	GetLocale(http.ResponseWriter, *http.Request)
	GetPreference(http.ResponseWriter, *http.Request)
	RemovePreference(http.ResponseWriter, *http.Request)
	// Deprecated
	SetLocale(http.ResponseWriter, *http.Request)
	SetPreference(http.ResponseWriter, *http.Request)
}
// PermissionSchemesAPIRouter defines the required methods for binding the api requests to a responses for the PermissionSchemesAPI
// The PermissionSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PermissionSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type PermissionSchemesAPIRouter interface { 
	CreatePermissionGrant(http.ResponseWriter, *http.Request)
	CreatePermissionScheme(http.ResponseWriter, *http.Request)
	DeletePermissionScheme(http.ResponseWriter, *http.Request)
	DeletePermissionSchemeEntity(http.ResponseWriter, *http.Request)
	GetAllPermissionSchemes(http.ResponseWriter, *http.Request)
	GetPermissionScheme(http.ResponseWriter, *http.Request)
	GetPermissionSchemeGrant(http.ResponseWriter, *http.Request)
	GetPermissionSchemeGrants(http.ResponseWriter, *http.Request)
	UpdatePermissionScheme(http.ResponseWriter, *http.Request)
}
// PermissionsAPIRouter defines the required methods for binding the api requests to a responses for the PermissionsAPI
// The PermissionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PermissionsAPIServicer to perform the required actions, then write the service results to the http response.
type PermissionsAPIRouter interface { 
	GetAllPermissions(http.ResponseWriter, *http.Request)
	GetBulkPermissions(http.ResponseWriter, *http.Request)
	GetMyPermissions(http.ResponseWriter, *http.Request)
	GetPermittedProjects(http.ResponseWriter, *http.Request)
}
// ProjectAvatarsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectAvatarsAPI
// The ProjectAvatarsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectAvatarsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectAvatarsAPIRouter interface { 
	CreateProjectAvatar(http.ResponseWriter, *http.Request)
	DeleteProjectAvatar(http.ResponseWriter, *http.Request)
	GetAllProjectAvatars(http.ResponseWriter, *http.Request)
	UpdateProjectAvatar(http.ResponseWriter, *http.Request)
}
// ProjectCategoriesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectCategoriesAPI
// The ProjectCategoriesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectCategoriesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectCategoriesAPIRouter interface { 
	CreateProjectCategory(http.ResponseWriter, *http.Request)
	GetAllProjectCategories(http.ResponseWriter, *http.Request)
	GetProjectCategoryById(http.ResponseWriter, *http.Request)
	RemoveProjectCategory(http.ResponseWriter, *http.Request)
	UpdateProjectCategory(http.ResponseWriter, *http.Request)
}
// ProjectComponentsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectComponentsAPI
// The ProjectComponentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectComponentsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectComponentsAPIRouter interface { 
	CreateComponent(http.ResponseWriter, *http.Request)
	DeleteComponent(http.ResponseWriter, *http.Request)
	GetComponent(http.ResponseWriter, *http.Request)
	GetComponentRelatedIssues(http.ResponseWriter, *http.Request)
	GetProjectComponents(http.ResponseWriter, *http.Request)
	GetProjectComponentsPaginated(http.ResponseWriter, *http.Request)
	UpdateComponent(http.ResponseWriter, *http.Request)
}
// ProjectEmailAPIRouter defines the required methods for binding the api requests to a responses for the ProjectEmailAPI
// The ProjectEmailAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectEmailAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectEmailAPIRouter interface { 
	GetProjectEmail(http.ResponseWriter, *http.Request)
	UpdateProjectEmail(http.ResponseWriter, *http.Request)
}
// ProjectFeaturesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectFeaturesAPI
// The ProjectFeaturesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectFeaturesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectFeaturesAPIRouter interface { 
	GetFeaturesForProject(http.ResponseWriter, *http.Request)
	ToggleFeatureForProject(http.ResponseWriter, *http.Request)
}
// ProjectKeyAndNameValidationAPIRouter defines the required methods for binding the api requests to a responses for the ProjectKeyAndNameValidationAPI
// The ProjectKeyAndNameValidationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectKeyAndNameValidationAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectKeyAndNameValidationAPIRouter interface { 
	GetValidProjectKey(http.ResponseWriter, *http.Request)
	GetValidProjectName(http.ResponseWriter, *http.Request)
	ValidateProjectKey(http.ResponseWriter, *http.Request)
}
// ProjectPermissionSchemesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectPermissionSchemesAPI
// The ProjectPermissionSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectPermissionSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectPermissionSchemesAPIRouter interface { 
	AssignPermissionScheme(http.ResponseWriter, *http.Request)
	GetAssignedPermissionScheme(http.ResponseWriter, *http.Request)
	GetProjectIssueSecurityScheme(http.ResponseWriter, *http.Request)
	GetSecurityLevelsForProject(http.ResponseWriter, *http.Request)
}
// ProjectPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectPropertiesAPI
// The ProjectPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectPropertiesAPIRouter interface { 
	DeleteProjectProperty(http.ResponseWriter, *http.Request)
	GetProjectProperty(http.ResponseWriter, *http.Request)
	GetProjectPropertyKeys(http.ResponseWriter, *http.Request)
	SetProjectProperty(http.ResponseWriter, *http.Request)
}
// ProjectRoleActorsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectRoleActorsAPI
// The ProjectRoleActorsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectRoleActorsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectRoleActorsAPIRouter interface { 
	AddActorUsers(http.ResponseWriter, *http.Request)
	AddProjectRoleActorsToRole(http.ResponseWriter, *http.Request)
	DeleteActor(http.ResponseWriter, *http.Request)
	DeleteProjectRoleActorsFromRole(http.ResponseWriter, *http.Request)
	GetProjectRoleActorsForRole(http.ResponseWriter, *http.Request)
	SetActors(http.ResponseWriter, *http.Request)
}
// ProjectRolesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectRolesAPI
// The ProjectRolesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectRolesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectRolesAPIRouter interface { 
	CreateProjectRole(http.ResponseWriter, *http.Request)
	DeleteProjectRole(http.ResponseWriter, *http.Request)
	FullyUpdateProjectRole(http.ResponseWriter, *http.Request)
	GetAllProjectRoles(http.ResponseWriter, *http.Request)
	GetProjectRole(http.ResponseWriter, *http.Request)
	GetProjectRoleById(http.ResponseWriter, *http.Request)
	GetProjectRoleDetails(http.ResponseWriter, *http.Request)
	GetProjectRoles(http.ResponseWriter, *http.Request)
	PartialUpdateProjectRole(http.ResponseWriter, *http.Request)
}
// ProjectTypesAPIRouter defines the required methods for binding the api requests to a responses for the ProjectTypesAPI
// The ProjectTypesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectTypesAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectTypesAPIRouter interface { 
	GetAccessibleProjectTypeByKey(http.ResponseWriter, *http.Request)
	GetAllAccessibleProjectTypes(http.ResponseWriter, *http.Request)
	GetAllProjectTypes(http.ResponseWriter, *http.Request)
	GetProjectTypeByKey(http.ResponseWriter, *http.Request)
}
// ProjectVersionsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectVersionsAPI
// The ProjectVersionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectVersionsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectVersionsAPIRouter interface { 
	CreateVersion(http.ResponseWriter, *http.Request)
	DeleteAndReplaceVersion(http.ResponseWriter, *http.Request)
	// Deprecated
	DeleteVersion(http.ResponseWriter, *http.Request)
	GetProjectVersions(http.ResponseWriter, *http.Request)
	GetProjectVersionsPaginated(http.ResponseWriter, *http.Request)
	GetVersion(http.ResponseWriter, *http.Request)
	GetVersionRelatedIssues(http.ResponseWriter, *http.Request)
	GetVersionUnresolvedIssues(http.ResponseWriter, *http.Request)
	MergeVersions(http.ResponseWriter, *http.Request)
	MoveVersion(http.ResponseWriter, *http.Request)
	UpdateVersion(http.ResponseWriter, *http.Request)
}
// ProjectsAPIRouter defines the required methods for binding the api requests to a responses for the ProjectsAPI
// The ProjectsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ProjectsAPIServicer to perform the required actions, then write the service results to the http response.
type ProjectsAPIRouter interface { 
	ArchiveProject(http.ResponseWriter, *http.Request)
	CreateProject(http.ResponseWriter, *http.Request)
	DeleteProject(http.ResponseWriter, *http.Request)
	DeleteProjectAsynchronously(http.ResponseWriter, *http.Request)
	// Deprecated
	GetAllProjects(http.ResponseWriter, *http.Request)
	GetAllStatuses(http.ResponseWriter, *http.Request)
	// Deprecated
	GetHierarchy(http.ResponseWriter, *http.Request)
	// Deprecated
	GetNotificationSchemeForProject(http.ResponseWriter, *http.Request)
	GetProject(http.ResponseWriter, *http.Request)
	GetRecent(http.ResponseWriter, *http.Request)
	Restore(http.ResponseWriter, *http.Request)
	SearchProjects(http.ResponseWriter, *http.Request)
	UpdateProject(http.ResponseWriter, *http.Request)
	// Deprecated
	UpdateProjectType(http.ResponseWriter, *http.Request)
}
// ScreenSchemesAPIRouter defines the required methods for binding the api requests to a responses for the ScreenSchemesAPI
// The ScreenSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ScreenSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type ScreenSchemesAPIRouter interface { 
	CreateScreenScheme(http.ResponseWriter, *http.Request)
	DeleteScreenScheme(http.ResponseWriter, *http.Request)
	GetScreenSchemes(http.ResponseWriter, *http.Request)
	UpdateScreenScheme(http.ResponseWriter, *http.Request)
}
// ScreenTabFieldsAPIRouter defines the required methods for binding the api requests to a responses for the ScreenTabFieldsAPI
// The ScreenTabFieldsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ScreenTabFieldsAPIServicer to perform the required actions, then write the service results to the http response.
type ScreenTabFieldsAPIRouter interface { 
	AddScreenTabField(http.ResponseWriter, *http.Request)
	GetAllScreenTabFields(http.ResponseWriter, *http.Request)
	MoveScreenTabField(http.ResponseWriter, *http.Request)
	RemoveScreenTabField(http.ResponseWriter, *http.Request)
}
// ScreenTabsAPIRouter defines the required methods for binding the api requests to a responses for the ScreenTabsAPI
// The ScreenTabsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ScreenTabsAPIServicer to perform the required actions, then write the service results to the http response.
type ScreenTabsAPIRouter interface { 
	AddScreenTab(http.ResponseWriter, *http.Request)
	DeleteScreenTab(http.ResponseWriter, *http.Request)
	GetAllScreenTabs(http.ResponseWriter, *http.Request)
	MoveScreenTab(http.ResponseWriter, *http.Request)
	RenameScreenTab(http.ResponseWriter, *http.Request)
}
// ScreensAPIRouter defines the required methods for binding the api requests to a responses for the ScreensAPI
// The ScreensAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ScreensAPIServicer to perform the required actions, then write the service results to the http response.
type ScreensAPIRouter interface { 
	AddFieldToDefaultScreen(http.ResponseWriter, *http.Request)
	CreateScreen(http.ResponseWriter, *http.Request)
	DeleteScreen(http.ResponseWriter, *http.Request)
	GetAvailableScreenFields(http.ResponseWriter, *http.Request)
	GetScreens(http.ResponseWriter, *http.Request)
	GetScreensForField(http.ResponseWriter, *http.Request)
	UpdateScreen(http.ResponseWriter, *http.Request)
}
// ServerInfoAPIRouter defines the required methods for binding the api requests to a responses for the ServerInfoAPI
// The ServerInfoAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServerInfoAPIServicer to perform the required actions, then write the service results to the http response.
type ServerInfoAPIRouter interface { 
	GetServerInfo(http.ResponseWriter, *http.Request)
}
// StatusAPIRouter defines the required methods for binding the api requests to a responses for the StatusAPI
// The StatusAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StatusAPIServicer to perform the required actions, then write the service results to the http response.
type StatusAPIRouter interface { 
	CreateStatuses(http.ResponseWriter, *http.Request)
	DeleteStatusesById(http.ResponseWriter, *http.Request)
	GetStatusesById(http.ResponseWriter, *http.Request)
	Search(http.ResponseWriter, *http.Request)
	UpdateStatuses(http.ResponseWriter, *http.Request)
}
// TasksAPIRouter defines the required methods for binding the api requests to a responses for the TasksAPI
// The TasksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TasksAPIServicer to perform the required actions, then write the service results to the http response.
type TasksAPIRouter interface { 
	CancelTask(http.ResponseWriter, *http.Request)
	GetTask(http.ResponseWriter, *http.Request)
}
// TimeTrackingAPIRouter defines the required methods for binding the api requests to a responses for the TimeTrackingAPI
// The TimeTrackingAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TimeTrackingAPIServicer to perform the required actions, then write the service results to the http response.
type TimeTrackingAPIRouter interface { 
	GetAvailableTimeTrackingImplementations(http.ResponseWriter, *http.Request)
	GetSelectedTimeTrackingImplementation(http.ResponseWriter, *http.Request)
	GetSharedTimeTrackingConfiguration(http.ResponseWriter, *http.Request)
	SelectTimeTrackingImplementation(http.ResponseWriter, *http.Request)
	SetSharedTimeTrackingConfiguration(http.ResponseWriter, *http.Request)
}
// UIModificationsAppsAPIRouter defines the required methods for binding the api requests to a responses for the UIModificationsAppsAPI
// The UIModificationsAppsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UIModificationsAppsAPIServicer to perform the required actions, then write the service results to the http response.
type UIModificationsAppsAPIRouter interface { 
	CreateUiModification(http.ResponseWriter, *http.Request)
	DeleteUiModification(http.ResponseWriter, *http.Request)
	GetUiModifications(http.ResponseWriter, *http.Request)
	UpdateUiModification(http.ResponseWriter, *http.Request)
}
// UserPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the UserPropertiesAPI
// The UserPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type UserPropertiesAPIRouter interface { 
	DeleteUserProperty(http.ResponseWriter, *http.Request)
	GetUserProperty(http.ResponseWriter, *http.Request)
	GetUserPropertyKeys(http.ResponseWriter, *http.Request)
	SetUserProperty(http.ResponseWriter, *http.Request)
}
// UserSearchAPIRouter defines the required methods for binding the api requests to a responses for the UserSearchAPI
// The UserSearchAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserSearchAPIServicer to perform the required actions, then write the service results to the http response.
type UserSearchAPIRouter interface { 
	FindAssignableUsers(http.ResponseWriter, *http.Request)
	FindBulkAssignableUsers(http.ResponseWriter, *http.Request)
	FindUserKeysByQuery(http.ResponseWriter, *http.Request)
	FindUsers(http.ResponseWriter, *http.Request)
	FindUsersByQuery(http.ResponseWriter, *http.Request)
	FindUsersForPicker(http.ResponseWriter, *http.Request)
	FindUsersWithAllPermissions(http.ResponseWriter, *http.Request)
	FindUsersWithBrowsePermission(http.ResponseWriter, *http.Request)
}
// UsersAPIRouter defines the required methods for binding the api requests to a responses for the UsersAPI
// The UsersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UsersAPIServicer to perform the required actions, then write the service results to the http response.
type UsersAPIRouter interface { 
	BulkGetUsers(http.ResponseWriter, *http.Request)
	BulkGetUsersMigration(http.ResponseWriter, *http.Request)
	CreateUser(http.ResponseWriter, *http.Request)
	GetAllUsers(http.ResponseWriter, *http.Request)
	GetAllUsersDefault(http.ResponseWriter, *http.Request)
	GetUser(http.ResponseWriter, *http.Request)
	GetUserDefaultColumns(http.ResponseWriter, *http.Request)
	GetUserEmail(http.ResponseWriter, *http.Request)
	GetUserEmailBulk(http.ResponseWriter, *http.Request)
	GetUserGroups(http.ResponseWriter, *http.Request)
	RemoveUser(http.ResponseWriter, *http.Request)
	ResetUserColumns(http.ResponseWriter, *http.Request)
	SetUserColumns(http.ResponseWriter, *http.Request)
}
// WebhooksAPIRouter defines the required methods for binding the api requests to a responses for the WebhooksAPI
// The WebhooksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WebhooksAPIServicer to perform the required actions, then write the service results to the http response.
type WebhooksAPIRouter interface { 
	DeleteWebhookById(http.ResponseWriter, *http.Request)
	GetDynamicWebhooksForApp(http.ResponseWriter, *http.Request)
	GetFailedWebhooks(http.ResponseWriter, *http.Request)
	RefreshWebhooks(http.ResponseWriter, *http.Request)
	RegisterDynamicWebhooks(http.ResponseWriter, *http.Request)
}
// WorkflowSchemeDraftsAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowSchemeDraftsAPI
// The WorkflowSchemeDraftsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowSchemeDraftsAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowSchemeDraftsAPIRouter interface { 
	CreateWorkflowSchemeDraftFromParent(http.ResponseWriter, *http.Request)
	DeleteDraftDefaultWorkflow(http.ResponseWriter, *http.Request)
	DeleteDraftWorkflowMapping(http.ResponseWriter, *http.Request)
	DeleteWorkflowSchemeDraft(http.ResponseWriter, *http.Request)
	DeleteWorkflowSchemeDraftIssueType(http.ResponseWriter, *http.Request)
	GetDraftDefaultWorkflow(http.ResponseWriter, *http.Request)
	GetDraftWorkflow(http.ResponseWriter, *http.Request)
	GetWorkflowSchemeDraft(http.ResponseWriter, *http.Request)
	GetWorkflowSchemeDraftIssueType(http.ResponseWriter, *http.Request)
	PublishDraftWorkflowScheme(http.ResponseWriter, *http.Request)
	SetWorkflowSchemeDraftIssueType(http.ResponseWriter, *http.Request)
	UpdateDraftDefaultWorkflow(http.ResponseWriter, *http.Request)
	UpdateDraftWorkflowMapping(http.ResponseWriter, *http.Request)
	UpdateWorkflowSchemeDraft(http.ResponseWriter, *http.Request)
}
// WorkflowSchemeProjectAssociationsAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowSchemeProjectAssociationsAPI
// The WorkflowSchemeProjectAssociationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowSchemeProjectAssociationsAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowSchemeProjectAssociationsAPIRouter interface { 
	AssignSchemeToProject(http.ResponseWriter, *http.Request)
	GetWorkflowSchemeProjectAssociations(http.ResponseWriter, *http.Request)
}
// WorkflowSchemesAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowSchemesAPI
// The WorkflowSchemesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowSchemesAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowSchemesAPIRouter interface { 
	CreateWorkflowScheme(http.ResponseWriter, *http.Request)
	DeleteDefaultWorkflow(http.ResponseWriter, *http.Request)
	DeleteWorkflowMapping(http.ResponseWriter, *http.Request)
	DeleteWorkflowScheme(http.ResponseWriter, *http.Request)
	DeleteWorkflowSchemeIssueType(http.ResponseWriter, *http.Request)
	GetAllWorkflowSchemes(http.ResponseWriter, *http.Request)
	GetDefaultWorkflow(http.ResponseWriter, *http.Request)
	GetWorkflow(http.ResponseWriter, *http.Request)
	GetWorkflowScheme(http.ResponseWriter, *http.Request)
	GetWorkflowSchemeIssueType(http.ResponseWriter, *http.Request)
	SetWorkflowSchemeIssueType(http.ResponseWriter, *http.Request)
	UpdateDefaultWorkflow(http.ResponseWriter, *http.Request)
	UpdateWorkflowMapping(http.ResponseWriter, *http.Request)
	UpdateWorkflowScheme(http.ResponseWriter, *http.Request)
}
// WorkflowStatusCategoriesAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowStatusCategoriesAPI
// The WorkflowStatusCategoriesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowStatusCategoriesAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowStatusCategoriesAPIRouter interface { 
	GetStatusCategories(http.ResponseWriter, *http.Request)
	GetStatusCategory(http.ResponseWriter, *http.Request)
}
// WorkflowStatusesAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowStatusesAPI
// The WorkflowStatusesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowStatusesAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowStatusesAPIRouter interface { 
	GetStatus(http.ResponseWriter, *http.Request)
	GetStatuses(http.ResponseWriter, *http.Request)
}
// WorkflowTransitionPropertiesAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowTransitionPropertiesAPI
// The WorkflowTransitionPropertiesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowTransitionPropertiesAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowTransitionPropertiesAPIRouter interface { 
	CreateWorkflowTransitionProperty(http.ResponseWriter, *http.Request)
	DeleteWorkflowTransitionProperty(http.ResponseWriter, *http.Request)
	GetWorkflowTransitionProperties(http.ResponseWriter, *http.Request)
	UpdateWorkflowTransitionProperty(http.ResponseWriter, *http.Request)
}
// WorkflowTransitionRulesAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowTransitionRulesAPI
// The WorkflowTransitionRulesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowTransitionRulesAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowTransitionRulesAPIRouter interface { 
	DeleteWorkflowTransitionRuleConfigurations(http.ResponseWriter, *http.Request)
	GetWorkflowTransitionRuleConfigurations(http.ResponseWriter, *http.Request)
	UpdateWorkflowTransitionRuleConfigurations(http.ResponseWriter, *http.Request)
}
// WorkflowsAPIRouter defines the required methods for binding the api requests to a responses for the WorkflowsAPI
// The WorkflowsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a WorkflowsAPIServicer to perform the required actions, then write the service results to the http response.
type WorkflowsAPIRouter interface { 
	CreateWorkflow(http.ResponseWriter, *http.Request)
	DeleteInactiveWorkflow(http.ResponseWriter, *http.Request)
	// Deprecated
	GetAllWorkflows(http.ResponseWriter, *http.Request)
	GetWorkflowsPaginated(http.ResponseWriter, *http.Request)
}


// AnnouncementBannerAPIServicer defines the api actions for the AnnouncementBannerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AnnouncementBannerAPIServicer interface { 
	GetBanner(context.Context) (ImplResponse, error)
	SetBanner(context.Context, AnnouncementBannerConfigurationUpdate) (ImplResponse, error)
}


// AppMigrationAPIServicer defines the api actions for the AppMigrationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AppMigrationAPIServicer interface { 
	AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut(context.Context, string, ConnectCustomFieldValues) (ImplResponse, error)
	MigrationResourceUpdateEntityPropertiesValuePut(context.Context, string, string, []EntityPropertyDetails) (ImplResponse, error)
	MigrationResourceWorkflowRuleSearchPost(context.Context, string, WorkflowRulesSearch) (ImplResponse, error)
}


// AppPropertiesAPIServicer defines the api actions for the AppPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AppPropertiesAPIServicer interface { 
	AddonPropertiesResourceDeleteAddonPropertyDelete(context.Context, string, string) (ImplResponse, error)
	AddonPropertiesResourceGetAddonPropertiesGet(context.Context, string) (ImplResponse, error)
	AddonPropertiesResourceGetAddonPropertyGet(context.Context, string, string) (ImplResponse, error)
	AddonPropertiesResourcePutAddonPropertyPut(context.Context, string, string, *interface{}) (ImplResponse, error)
}


// ApplicationRolesAPIServicer defines the api actions for the ApplicationRolesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ApplicationRolesAPIServicer interface { 
	GetAllApplicationRoles(context.Context) (ImplResponse, error)
	GetApplicationRole(context.Context, string) (ImplResponse, error)
}


// AuditRecordsAPIServicer defines the api actions for the AuditRecordsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuditRecordsAPIServicer interface { 
	GetAuditRecords(context.Context, int32, int32, string, time.Time, time.Time) (ImplResponse, error)
}


// AvatarsAPIServicer defines the api actions for the AvatarsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AvatarsAPIServicer interface { 
	DeleteAvatar(context.Context, string, string, int64) (ImplResponse, error)
	GetAllSystemAvatars(context.Context, string) (ImplResponse, error)
	GetAvatarImageByID(context.Context, string, int64, string, string) (ImplResponse, error)
	GetAvatarImageByOwner(context.Context, string, string, string, string) (ImplResponse, error)
	GetAvatarImageByType(context.Context, string, string, string) (ImplResponse, error)
	GetAvatars(context.Context, string, string) (ImplResponse, error)
	StoreAvatar(context.Context, string, string, int32, *interface{}, int32, int32) (ImplResponse, error)
}


// DashboardsAPIServicer defines the api actions for the DashboardsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DashboardsAPIServicer interface { 
	AddGadget(context.Context, int64, DashboardGadgetSettings) (ImplResponse, error)
	CopyDashboard(context.Context, string, DashboardDetails) (ImplResponse, error)
	CreateDashboard(context.Context, DashboardDetails) (ImplResponse, error)
	DeleteDashboard(context.Context, string) (ImplResponse, error)
	DeleteDashboardItemProperty(context.Context, string, string, string) (ImplResponse, error)
	GetAllAvailableDashboardGadgets(context.Context) (ImplResponse, error)
	GetAllDashboards(context.Context, string, int32, int32) (ImplResponse, error)
	GetAllGadgets(context.Context, int64, []string, []string, []int64) (ImplResponse, error)
	GetDashboard(context.Context, string) (ImplResponse, error)
	GetDashboardItemProperty(context.Context, string, string, string) (ImplResponse, error)
	GetDashboardItemPropertyKeys(context.Context, string, string) (ImplResponse, error)
	GetDashboardsPaginated(context.Context, string, string, string, string, string, int64, string, int64, int32, string, string) (ImplResponse, error)
	RemoveGadget(context.Context, int64, int64) (ImplResponse, error)
	SetDashboardItemProperty(context.Context, string, string, string, *interface{}) (ImplResponse, error)
	UpdateDashboard(context.Context, string, DashboardDetails) (ImplResponse, error)
	UpdateGadget(context.Context, int64, int64, DashboardGadgetUpdateRequest) (ImplResponse, error)
}


// DynamicModulesAPIServicer defines the api actions for the DynamicModulesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DynamicModulesAPIServicer interface { 
	DynamicModulesResourceGetModulesGet(context.Context) (ImplResponse, error)
	DynamicModulesResourceRegisterModulesPost(context.Context, ConnectModules) (ImplResponse, error)
	DynamicModulesResourceRemoveModulesDelete(context.Context, []string) (ImplResponse, error)
}


// FilterSharingAPIServicer defines the api actions for the FilterSharingAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FilterSharingAPIServicer interface { 
	AddSharePermission(context.Context, int64, SharePermissionInputBean) (ImplResponse, error)
	DeleteSharePermission(context.Context, int64, int64) (ImplResponse, error)
	GetDefaultShareScope(context.Context) (ImplResponse, error)
	GetSharePermission(context.Context, int64, int64) (ImplResponse, error)
	GetSharePermissions(context.Context, int64) (ImplResponse, error)
	SetDefaultShareScope(context.Context, DefaultShareScope) (ImplResponse, error)
}


// FiltersAPIServicer defines the api actions for the FiltersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FiltersAPIServicer interface { 
	ChangeFilterOwner(context.Context, int64, ChangeFilterOwner) (ImplResponse, error)
	CreateFilter(context.Context, Filter, string, bool) (ImplResponse, error)
	DeleteFavouriteForFilter(context.Context, int64, string) (ImplResponse, error)
	DeleteFilter(context.Context, int64) (ImplResponse, error)
	GetColumns(context.Context, int64) (ImplResponse, error)
	GetFavouriteFilters(context.Context, string) (ImplResponse, error)
	GetFilter(context.Context, int64, string, bool) (ImplResponse, error)
	GetFiltersPaginated(context.Context, string, string, string, string, string, int64, []int64, string, int64, int32, string, bool) (ImplResponse, error)
	GetMyFilters(context.Context, string, bool) (ImplResponse, error)
	ResetColumns(context.Context, int64) (ImplResponse, error)
	SetColumns(context.Context, int64, []string) (ImplResponse, error)
	SetFavouriteForFilter(context.Context, int64, string) (ImplResponse, error)
	UpdateFilter(context.Context, int64, Filter, string, bool) (ImplResponse, error)
}


// GroupAndUserPickerAPIServicer defines the api actions for the GroupAndUserPickerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GroupAndUserPickerAPIServicer interface { 
	FindUsersAndGroups(context.Context, string, int32, bool, string, []string, []string, string, bool, bool) (ImplResponse, error)
}


// GroupsAPIServicer defines the api actions for the GroupsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GroupsAPIServicer interface { 
	AddUserToGroup(context.Context, UpdateUserToGroupBean, string, string) (ImplResponse, error)
	BulkGetGroups(context.Context, int64, int32, []string, []string, string, string) (ImplResponse, error)
	CreateGroup(context.Context, AddGroupBean) (ImplResponse, error)
	FindGroups(context.Context, string, string, []string, []string, int32, bool, string) (ImplResponse, error)
	// Deprecated
	GetGroup(context.Context, string, string, string) (ImplResponse, error)
	GetUsersFromGroup(context.Context, string, string, bool, int64, int32) (ImplResponse, error)
	RemoveGroup(context.Context, string, string, string, string) (ImplResponse, error)
	RemoveUserFromGroup(context.Context, string, string, string, string) (ImplResponse, error)
}


// InstanceInformationAPIServicer defines the api actions for the InstanceInformationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InstanceInformationAPIServicer interface { 
	GetLicense(context.Context) (ImplResponse, error)
}


// IssueAttachmentsAPIServicer defines the api actions for the IssueAttachmentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueAttachmentsAPIServicer interface { 
	AddAttachment(context.Context, string) (ImplResponse, error)
	ExpandAttachmentForHumans(context.Context, string) (ImplResponse, error)
	ExpandAttachmentForMachines(context.Context, string) (ImplResponse, error)
	GetAttachment(context.Context, string) (ImplResponse, error)
	GetAttachmentContent(context.Context, string, bool) (ImplResponse, error)
	GetAttachmentMeta(context.Context) (ImplResponse, error)
	GetAttachmentThumbnail(context.Context, string, bool, bool, int32, int32) (ImplResponse, error)
	RemoveAttachment(context.Context, string) (ImplResponse, error)
}


// IssueCommentPropertiesAPIServicer defines the api actions for the IssueCommentPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCommentPropertiesAPIServicer interface { 
	DeleteCommentProperty(context.Context, string, string) (ImplResponse, error)
	GetCommentProperty(context.Context, string, string) (ImplResponse, error)
	GetCommentPropertyKeys(context.Context, string) (ImplResponse, error)
	SetCommentProperty(context.Context, string, string, *interface{}) (ImplResponse, error)
}


// IssueCommentsAPIServicer defines the api actions for the IssueCommentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCommentsAPIServicer interface { 
	AddComment(context.Context, string, Comment, string) (ImplResponse, error)
	DeleteComment(context.Context, string, string) (ImplResponse, error)
	GetComment(context.Context, string, string, string) (ImplResponse, error)
	GetComments(context.Context, string, int64, int32, string, string) (ImplResponse, error)
	GetCommentsByIds(context.Context, IssueCommentListRequestBean, string) (ImplResponse, error)
	UpdateComment(context.Context, string, string, Comment, bool, bool, string) (ImplResponse, error)
}


// IssueCustomFieldConfigurationAppsAPIServicer defines the api actions for the IssueCustomFieldConfigurationAppsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCustomFieldConfigurationAppsAPIServicer interface { 
	GetCustomFieldConfiguration(context.Context, string, []int64, []int64, int64, string, string, int64, int32) (ImplResponse, error)
	UpdateCustomFieldConfiguration(context.Context, string, CustomFieldConfigurations) (ImplResponse, error)
}


// IssueCustomFieldContextsAPIServicer defines the api actions for the IssueCustomFieldContextsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCustomFieldContextsAPIServicer interface { 
	AddIssueTypesToContext(context.Context, string, int64, IssueTypeIds) (ImplResponse, error)
	AssignProjectsToCustomFieldContext(context.Context, string, int64, ProjectIds) (ImplResponse, error)
	CreateCustomFieldContext(context.Context, string, CreateCustomFieldContext) (ImplResponse, error)
	DeleteCustomFieldContext(context.Context, string, int64) (ImplResponse, error)
	GetContextsForField(context.Context, string, bool, bool, []int64, int64, int32) (ImplResponse, error)
	GetCustomFieldContextsForProjectsAndIssueTypes(context.Context, string, ProjectIssueTypeMappings, int64, int32) (ImplResponse, error)
	GetDefaultValues(context.Context, string, []int64, int64, int32) (ImplResponse, error)
	GetIssueTypeMappingsForContexts(context.Context, string, []int64, int64, int32) (ImplResponse, error)
	GetProjectContextMapping(context.Context, string, []int64, int64, int32) (ImplResponse, error)
	RemoveCustomFieldContextFromProjects(context.Context, string, int64, ProjectIds) (ImplResponse, error)
	RemoveIssueTypesFromContext(context.Context, string, int64, IssueTypeIds) (ImplResponse, error)
	SetDefaultValues(context.Context, string, CustomFieldContextDefaultValueUpdate) (ImplResponse, error)
	UpdateCustomFieldContext(context.Context, string, int64, CustomFieldContextUpdateDetails) (ImplResponse, error)
}


// IssueCustomFieldOptionsAPIServicer defines the api actions for the IssueCustomFieldOptionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCustomFieldOptionsAPIServicer interface { 
	CreateCustomFieldOption(context.Context, string, int64, BulkCustomFieldOptionCreateRequest) (ImplResponse, error)
	DeleteCustomFieldOption(context.Context, string, int64, int64) (ImplResponse, error)
	GetCustomFieldOption(context.Context, string) (ImplResponse, error)
	GetOptionsForContext(context.Context, string, int64, int64, bool, int64, int32) (ImplResponse, error)
	ReorderCustomFieldOptions(context.Context, string, int64, OrderOfCustomFieldOptions) (ImplResponse, error)
	UpdateCustomFieldOption(context.Context, string, int64, BulkCustomFieldOptionUpdateRequest) (ImplResponse, error)
}


// IssueCustomFieldOptionsAppsAPIServicer defines the api actions for the IssueCustomFieldOptionsAppsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCustomFieldOptionsAppsAPIServicer interface { 
	CreateIssueFieldOption(context.Context, string, IssueFieldOptionCreateBean) (ImplResponse, error)
	DeleteIssueFieldOption(context.Context, string, int64) (ImplResponse, error)
	GetAllIssueFieldOptions(context.Context, string, int64, int32) (ImplResponse, error)
	GetIssueFieldOption(context.Context, string, int64) (ImplResponse, error)
	GetSelectableIssueFieldOptions(context.Context, string, int64, int32, int64) (ImplResponse, error)
	GetVisibleIssueFieldOptions(context.Context, string, int64, int32, int64) (ImplResponse, error)
	ReplaceIssueFieldOption(context.Context, string, int64, int64, string, bool, bool) (ImplResponse, error)
	UpdateIssueFieldOption(context.Context, string, int64, IssueFieldOption) (ImplResponse, error)
}


// IssueCustomFieldValuesAppsAPIServicer defines the api actions for the IssueCustomFieldValuesAppsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueCustomFieldValuesAppsAPIServicer interface { 
	UpdateCustomFieldValue(context.Context, string, CustomFieldValueUpdateDetails, bool) (ImplResponse, error)
	UpdateMultipleCustomFieldValues(context.Context, MultipleCustomFieldValuesUpdateDetails, bool) (ImplResponse, error)
}


// IssueFieldConfigurationsAPIServicer defines the api actions for the IssueFieldConfigurationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueFieldConfigurationsAPIServicer interface { 
	AssignFieldConfigurationSchemeToProject(context.Context, FieldConfigurationSchemeProjectAssociation) (ImplResponse, error)
	CreateFieldConfiguration(context.Context, FieldConfigurationDetails) (ImplResponse, error)
	CreateFieldConfigurationScheme(context.Context, UpdateFieldConfigurationSchemeDetails) (ImplResponse, error)
	DeleteFieldConfiguration(context.Context, int64) (ImplResponse, error)
	DeleteFieldConfigurationScheme(context.Context, int64) (ImplResponse, error)
	GetAllFieldConfigurationSchemes(context.Context, int64, int32, []int64) (ImplResponse, error)
	GetAllFieldConfigurations(context.Context, int64, int32, []int64, bool, string) (ImplResponse, error)
	GetFieldConfigurationItems(context.Context, int64, int64, int32) (ImplResponse, error)
	GetFieldConfigurationSchemeMappings(context.Context, int64, int32, []int64) (ImplResponse, error)
	GetFieldConfigurationSchemeProjectMapping(context.Context, []int64, int64, int32) (ImplResponse, error)
	RemoveIssueTypesFromGlobalFieldConfigurationScheme(context.Context, int64, IssueTypeIdsToRemove) (ImplResponse, error)
	SetFieldConfigurationSchemeMapping(context.Context, int64, AssociateFieldConfigurationsWithIssueTypesRequest) (ImplResponse, error)
	UpdateFieldConfiguration(context.Context, int64, FieldConfigurationDetails) (ImplResponse, error)
	UpdateFieldConfigurationItems(context.Context, int64, FieldConfigurationItemsDetails) (ImplResponse, error)
	UpdateFieldConfigurationScheme(context.Context, int64, UpdateFieldConfigurationSchemeDetails) (ImplResponse, error)
}


// IssueFieldsAPIServicer defines the api actions for the IssueFieldsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueFieldsAPIServicer interface { 
	CreateCustomField(context.Context, CustomFieldDefinitionJsonBean) (ImplResponse, error)
	DeleteCustomField(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetContextsForFieldDeprecated(context.Context, string, int64, int32) (ImplResponse, error)
	GetFields(context.Context) (ImplResponse, error)
	GetFieldsPaginated(context.Context, int64, int32, []string, []string, string, string, string) (ImplResponse, error)
	GetTrashedFieldsPaginated(context.Context, int64, int32, []string, string, string, string) (ImplResponse, error)
	RestoreCustomField(context.Context, string) (ImplResponse, error)
	TrashCustomField(context.Context, string) (ImplResponse, error)
	UpdateCustomField(context.Context, string, UpdateCustomFieldDetails) (ImplResponse, error)
}


// IssueLinkTypesAPIServicer defines the api actions for the IssueLinkTypesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueLinkTypesAPIServicer interface { 
	CreateIssueLinkType(context.Context, IssueLinkType) (ImplResponse, error)
	DeleteIssueLinkType(context.Context, string) (ImplResponse, error)
	GetIssueLinkType(context.Context, string) (ImplResponse, error)
	GetIssueLinkTypes(context.Context) (ImplResponse, error)
	UpdateIssueLinkType(context.Context, string, IssueLinkType) (ImplResponse, error)
}


// IssueLinksAPIServicer defines the api actions for the IssueLinksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueLinksAPIServicer interface { 
	DeleteIssueLink(context.Context, string) (ImplResponse, error)
	GetIssueLink(context.Context, string) (ImplResponse, error)
	LinkIssues(context.Context, LinkIssueRequestJsonBean) (ImplResponse, error)
}


// IssueNavigatorSettingsAPIServicer defines the api actions for the IssueNavigatorSettingsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueNavigatorSettingsAPIServicer interface { 
	GetIssueNavigatorDefaultColumns(context.Context) (ImplResponse, error)
	SetIssueNavigatorDefaultColumns(context.Context, []string) (ImplResponse, error)
}


// IssueNotificationSchemesAPIServicer defines the api actions for the IssueNotificationSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueNotificationSchemesAPIServicer interface { 
	AddNotifications(context.Context, string, AddNotificationsDetails) (ImplResponse, error)
	CreateNotificationScheme(context.Context, CreateNotificationSchemeDetails) (ImplResponse, error)
	DeleteNotificationScheme(context.Context, string) (ImplResponse, error)
	GetNotificationScheme(context.Context, int64, string) (ImplResponse, error)
	GetNotificationSchemeToProjectMappings(context.Context, string, string, []string, []string) (ImplResponse, error)
	GetNotificationSchemes(context.Context, string, string, []string, []string, bool, string) (ImplResponse, error)
	RemoveNotificationFromNotificationScheme(context.Context, string, string) (ImplResponse, error)
	UpdateNotificationScheme(context.Context, string, UpdateNotificationSchemeDetails) (ImplResponse, error)
}


// IssuePrioritiesAPIServicer defines the api actions for the IssuePrioritiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssuePrioritiesAPIServicer interface { 
	CreatePriority(context.Context, CreatePriorityDetails) (ImplResponse, error)
	DeletePriority(context.Context, string, string) (ImplResponse, error)
	// Deprecated
	GetPriorities(context.Context) (ImplResponse, error)
	GetPriority(context.Context, string) (ImplResponse, error)
	MovePriorities(context.Context, ReorderIssuePriorities) (ImplResponse, error)
	SearchPriorities(context.Context, string, string, []string, bool) (ImplResponse, error)
	SetDefaultPriority(context.Context, SetDefaultPriorityRequest) (ImplResponse, error)
	UpdatePriority(context.Context, string, UpdatePriorityDetails) (ImplResponse, error)
}


// IssuePropertiesAPIServicer defines the api actions for the IssuePropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssuePropertiesAPIServicer interface { 
	BulkDeleteIssueProperty(context.Context, string, IssueFilterForBulkPropertyDelete) (ImplResponse, error)
	BulkSetIssuePropertiesByIssue(context.Context, MultiIssueEntityProperties) (ImplResponse, error)
	BulkSetIssueProperty(context.Context, string, BulkIssuePropertyUpdateRequest) (ImplResponse, error)
	BulkSetIssuesPropertiesList(context.Context, IssueEntityProperties) (ImplResponse, error)
	DeleteIssueProperty(context.Context, string, string) (ImplResponse, error)
	GetIssueProperty(context.Context, string, string) (ImplResponse, error)
	GetIssuePropertyKeys(context.Context, string) (ImplResponse, error)
	SetIssueProperty(context.Context, string, string, *interface{}) (ImplResponse, error)
}


// IssueRemoteLinksAPIServicer defines the api actions for the IssueRemoteLinksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueRemoteLinksAPIServicer interface { 
	CreateOrUpdateRemoteIssueLink(context.Context, string, RemoteIssueLinkRequest) (ImplResponse, error)
	DeleteRemoteIssueLinkByGlobalId(context.Context, string, string) (ImplResponse, error)
	DeleteRemoteIssueLinkById(context.Context, string, string) (ImplResponse, error)
	GetRemoteIssueLinkById(context.Context, string, string) (ImplResponse, error)
	GetRemoteIssueLinks(context.Context, string, string) (ImplResponse, error)
	UpdateRemoteIssueLink(context.Context, string, string, RemoteIssueLinkRequest) (ImplResponse, error)
}


// IssueResolutionsAPIServicer defines the api actions for the IssueResolutionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueResolutionsAPIServicer interface { 
	CreateResolution(context.Context, CreateResolutionDetails) (ImplResponse, error)
	DeleteResolution(context.Context, string, string) (ImplResponse, error)
	GetResolution(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetResolutions(context.Context) (ImplResponse, error)
	MoveResolutions(context.Context, ReorderIssueResolutionsRequest) (ImplResponse, error)
	SearchResolutions(context.Context, string, string, []string, bool) (ImplResponse, error)
	SetDefaultResolution(context.Context, SetDefaultResolutionRequest) (ImplResponse, error)
	UpdateResolution(context.Context, string, UpdateResolutionDetails) (ImplResponse, error)
}


// IssueSearchAPIServicer defines the api actions for the IssueSearchAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueSearchAPIServicer interface { 
	GetIssuePickerResource(context.Context, string, string, string, string, bool, bool) (ImplResponse, error)
	MatchIssues(context.Context, IssuesAndJqlQueries) (ImplResponse, error)
	SearchForIssuesUsingJql(context.Context, string, int32, int32, string, []string, string, []string, bool) (ImplResponse, error)
	SearchForIssuesUsingJqlPost(context.Context, SearchRequestBean) (ImplResponse, error)
}


// IssueSecurityLevelAPIServicer defines the api actions for the IssueSecurityLevelAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueSecurityLevelAPIServicer interface { 
	GetIssueSecurityLevel(context.Context, string) (ImplResponse, error)
	GetIssueSecurityLevelMembers(context.Context, int64, int64, int32, []int64, string) (ImplResponse, error)
}


// IssueSecuritySchemesAPIServicer defines the api actions for the IssueSecuritySchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueSecuritySchemesAPIServicer interface { 
	AddSecurityLevel(context.Context, string, AddSecuritySchemeLevelsRequestBean) (ImplResponse, error)
	AddSecurityLevelMembers(context.Context, string, string, SecuritySchemeMembersRequest) (ImplResponse, error)
	CreateIssueSecurityScheme(context.Context, CreateIssueSecuritySchemeDetails) (ImplResponse, error)
	DeleteSecurityScheme(context.Context, string) (ImplResponse, error)
	GetIssueSecurityScheme(context.Context, int64) (ImplResponse, error)
	GetIssueSecuritySchemes(context.Context) (ImplResponse, error)
	GetSecurityLevelMembers(context.Context, string, string, []string, []string, []string, string) (ImplResponse, error)
	GetSecurityLevels(context.Context, string, string, []string, []string, bool) (ImplResponse, error)
	RemoveLevel(context.Context, string, string, string) (ImplResponse, error)
	RemoveMemberFromSecurityLevel(context.Context, string, string, string) (ImplResponse, error)
	SearchProjectsUsingSecuritySchemes(context.Context, string, string, []string, []string) (ImplResponse, error)
	SearchSecuritySchemes(context.Context, string, string, []string, []string) (ImplResponse, error)
	SetDefaultLevels(context.Context, SetDefaultLevelsRequest) (ImplResponse, error)
	UpdateIssueSecurityScheme(context.Context, string, UpdateIssueSecuritySchemeRequestBean) (ImplResponse, error)
	UpdateSecurityLevel(context.Context, string, string, UpdateIssueSecurityLevelDetails) (ImplResponse, error)
}


// IssueTypePropertiesAPIServicer defines the api actions for the IssueTypePropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueTypePropertiesAPIServicer interface { 
	DeleteIssueTypeProperty(context.Context, string, string) (ImplResponse, error)
	GetIssueTypeProperty(context.Context, string, string) (ImplResponse, error)
	GetIssueTypePropertyKeys(context.Context, string) (ImplResponse, error)
	SetIssueTypeProperty(context.Context, string, string, *interface{}) (ImplResponse, error)
}


// IssueTypeSchemesAPIServicer defines the api actions for the IssueTypeSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueTypeSchemesAPIServicer interface { 
	AddIssueTypesToIssueTypeScheme(context.Context, int64, IssueTypeIds) (ImplResponse, error)
	AssignIssueTypeSchemeToProject(context.Context, IssueTypeSchemeProjectAssociation) (ImplResponse, error)
	CreateIssueTypeScheme(context.Context, IssueTypeSchemeDetails) (ImplResponse, error)
	DeleteIssueTypeScheme(context.Context, int64) (ImplResponse, error)
	GetAllIssueTypeSchemes(context.Context, int64, int32, []int64, string, string, string) (ImplResponse, error)
	GetIssueTypeSchemeForProjects(context.Context, []int64, int64, int32) (ImplResponse, error)
	GetIssueTypeSchemesMapping(context.Context, int64, int32, []int64) (ImplResponse, error)
	RemoveIssueTypeFromIssueTypeScheme(context.Context, int64, int64) (ImplResponse, error)
	ReorderIssueTypesInIssueTypeScheme(context.Context, int64, OrderOfIssueTypes) (ImplResponse, error)
	UpdateIssueTypeScheme(context.Context, int64, IssueTypeSchemeUpdateDetails) (ImplResponse, error)
}


// IssueTypeScreenSchemesAPIServicer defines the api actions for the IssueTypeScreenSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueTypeScreenSchemesAPIServicer interface { 
	AppendMappingsForIssueTypeScreenScheme(context.Context, string, IssueTypeScreenSchemeMappingDetails) (ImplResponse, error)
	AssignIssueTypeScreenSchemeToProject(context.Context, IssueTypeScreenSchemeProjectAssociation) (ImplResponse, error)
	CreateIssueTypeScreenScheme(context.Context, IssueTypeScreenSchemeDetails) (ImplResponse, error)
	DeleteIssueTypeScreenScheme(context.Context, string) (ImplResponse, error)
	GetIssueTypeScreenSchemeMappings(context.Context, int64, int32, []int64) (ImplResponse, error)
	GetIssueTypeScreenSchemeProjectAssociations(context.Context, []int64, int64, int32) (ImplResponse, error)
	GetIssueTypeScreenSchemes(context.Context, int64, int32, []int64, string, string, string) (ImplResponse, error)
	GetProjectsForIssueTypeScreenScheme(context.Context, int64, int64, int32, string) (ImplResponse, error)
	RemoveMappingsFromIssueTypeScreenScheme(context.Context, string, IssueTypeIds) (ImplResponse, error)
	UpdateDefaultScreenScheme(context.Context, string, UpdateDefaultScreenScheme) (ImplResponse, error)
	UpdateIssueTypeScreenScheme(context.Context, string, IssueTypeScreenSchemeUpdateDetails) (ImplResponse, error)
}


// IssueTypesAPIServicer defines the api actions for the IssueTypesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueTypesAPIServicer interface { 
	CreateIssueType(context.Context, IssueTypeCreateBean) (ImplResponse, error)
	CreateIssueTypeAvatar(context.Context, string, int32, *interface{}, int32, int32) (ImplResponse, error)
	DeleteIssueType(context.Context, string, string) (ImplResponse, error)
	GetAlternativeIssueTypes(context.Context, string) (ImplResponse, error)
	GetIssueAllTypes(context.Context) (ImplResponse, error)
	GetIssueType(context.Context, string) (ImplResponse, error)
	GetIssueTypesForProject(context.Context, int64, int32) (ImplResponse, error)
	UpdateIssueType(context.Context, string, IssueTypeUpdateBean) (ImplResponse, error)
}


// IssueVotesAPIServicer defines the api actions for the IssueVotesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueVotesAPIServicer interface { 
	AddVote(context.Context, string) (ImplResponse, error)
	GetVotes(context.Context, string) (ImplResponse, error)
	RemoveVote(context.Context, string) (ImplResponse, error)
}


// IssueWatchersAPIServicer defines the api actions for the IssueWatchersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueWatchersAPIServicer interface { 
	AddWatcher(context.Context, string, string) (ImplResponse, error)
	GetIsWatchingIssueBulk(context.Context, IssueList) (ImplResponse, error)
	GetIssueWatchers(context.Context, string) (ImplResponse, error)
	RemoveWatcher(context.Context, string, string, string) (ImplResponse, error)
}


// IssueWorklogPropertiesAPIServicer defines the api actions for the IssueWorklogPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueWorklogPropertiesAPIServicer interface { 
	DeleteWorklogProperty(context.Context, string, string, string) (ImplResponse, error)
	GetWorklogProperty(context.Context, string, string, string) (ImplResponse, error)
	GetWorklogPropertyKeys(context.Context, string, string) (ImplResponse, error)
	SetWorklogProperty(context.Context, string, string, string, *interface{}) (ImplResponse, error)
}


// IssueWorklogsAPIServicer defines the api actions for the IssueWorklogsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssueWorklogsAPIServicer interface { 
	AddWorklog(context.Context, string, Worklog, bool, string, string, string, string, bool) (ImplResponse, error)
	DeleteWorklog(context.Context, string, string, bool, string, string, string, bool) (ImplResponse, error)
	GetIdsOfWorklogsDeletedSince(context.Context, int64) (ImplResponse, error)
	GetIdsOfWorklogsModifiedSince(context.Context, int64, string) (ImplResponse, error)
	GetIssueWorklog(context.Context, string, int64, int32, int64, int64, string) (ImplResponse, error)
	GetWorklog(context.Context, string, string, string) (ImplResponse, error)
	GetWorklogsForIds(context.Context, WorklogIdsRequestBean, string) (ImplResponse, error)
	UpdateWorklog(context.Context, string, string, Worklog, bool, string, string, string, bool) (ImplResponse, error)
}


// IssuesAPIServicer defines the api actions for the IssuesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type IssuesAPIServicer interface { 
	AssignIssue(context.Context, string, User) (ImplResponse, error)
	CreateIssue(context.Context, IssueUpdateDetails, bool) (ImplResponse, error)
	CreateIssues(context.Context, IssuesUpdateBean) (ImplResponse, error)
	DeleteIssue(context.Context, string, string) (ImplResponse, error)
	DoTransition(context.Context, string, IssueUpdateDetails) (ImplResponse, error)
	EditIssue(context.Context, string, IssueUpdateDetails, bool, bool, bool) (ImplResponse, error)
	GetChangeLogs(context.Context, string, int32, int32) (ImplResponse, error)
	GetChangeLogsByIds(context.Context, string, IssueChangelogIds) (ImplResponse, error)
	GetCreateIssueMeta(context.Context, []string, []string, []string, []string, string) (ImplResponse, error)
	GetEditIssueMeta(context.Context, string, bool, bool) (ImplResponse, error)
	GetEvents(context.Context) (ImplResponse, error)
	GetIssue(context.Context, string, []string, bool, string, []string, bool) (ImplResponse, error)
	GetTransitions(context.Context, string, string, string, bool, bool, bool) (ImplResponse, error)
	Notify(context.Context, string, Notification) (ImplResponse, error)
}


// JQLAPIServicer defines the api actions for the JQLAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JQLAPIServicer interface { 
	GetAutoComplete(context.Context) (ImplResponse, error)
	GetAutoCompletePost(context.Context, SearchAutoCompleteFilter) (ImplResponse, error)
	GetFieldAutoCompleteForQueryString(context.Context, string, string, string, string) (ImplResponse, error)
	MigrateQueries(context.Context, JqlPersonalDataMigrationRequest) (ImplResponse, error)
	ParseJqlQueries(context.Context, JqlQueriesToParse, string) (ImplResponse, error)
	SanitiseJqlQueries(context.Context, JqlQueriesToSanitize) (ImplResponse, error)
}


// JQLFunctionsAppsAPIServicer defines the api actions for the JQLFunctionsAppsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JQLFunctionsAppsAPIServicer interface { 
	GetPrecomputations(context.Context, []string, int64, int32, string, string) (ImplResponse, error)
	UpdatePrecomputations(context.Context, JqlFunctionPrecomputationUpdateRequestBean) (ImplResponse, error)
}


// JiraExpressionsAPIServicer defines the api actions for the JiraExpressionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JiraExpressionsAPIServicer interface { 
	AnalyseExpression(context.Context, JiraExpressionForAnalysis, string) (ImplResponse, error)
	EvaluateJiraExpression(context.Context, JiraExpressionEvalRequestBean, string) (ImplResponse, error)
}


// JiraSettingsAPIServicer defines the api actions for the JiraSettingsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type JiraSettingsAPIServicer interface { 
	GetAdvancedSettings(context.Context) (ImplResponse, error)
	GetApplicationProperty(context.Context, string, string, string) (ImplResponse, error)
	GetConfiguration(context.Context) (ImplResponse, error)
	SetApplicationProperty(context.Context, string, SimpleApplicationPropertyBean) (ImplResponse, error)
}


// LabelsAPIServicer defines the api actions for the LabelsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LabelsAPIServicer interface { 
	GetAllLabels(context.Context, int64, int32) (ImplResponse, error)
}


// LicenseMetricsAPIServicer defines the api actions for the LicenseMetricsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LicenseMetricsAPIServicer interface { 
	GetApproximateApplicationLicenseCount(context.Context, string) (ImplResponse, error)
	GetApproximateLicenseCount(context.Context) (ImplResponse, error)
}


// MyselfAPIServicer defines the api actions for the MyselfAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MyselfAPIServicer interface { 
	// Deprecated
	DeleteLocale(context.Context) (ImplResponse, error)
	GetCurrentUser(context.Context, string) (ImplResponse, error)
	GetLocale(context.Context) (ImplResponse, error)
	GetPreference(context.Context, string) (ImplResponse, error)
	RemovePreference(context.Context, string) (ImplResponse, error)
	// Deprecated
	SetLocale(context.Context, Locale) (ImplResponse, error)
	SetPreference(context.Context, string, string) (ImplResponse, error)
}


// PermissionSchemesAPIServicer defines the api actions for the PermissionSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PermissionSchemesAPIServicer interface { 
	CreatePermissionGrant(context.Context, int64, PermissionGrant, string) (ImplResponse, error)
	CreatePermissionScheme(context.Context, PermissionScheme, string) (ImplResponse, error)
	DeletePermissionScheme(context.Context, int64) (ImplResponse, error)
	DeletePermissionSchemeEntity(context.Context, int64, int64) (ImplResponse, error)
	GetAllPermissionSchemes(context.Context, string) (ImplResponse, error)
	GetPermissionScheme(context.Context, int64, string) (ImplResponse, error)
	GetPermissionSchemeGrant(context.Context, int64, int64, string) (ImplResponse, error)
	GetPermissionSchemeGrants(context.Context, int64, string) (ImplResponse, error)
	UpdatePermissionScheme(context.Context, int64, PermissionScheme, string) (ImplResponse, error)
}


// PermissionsAPIServicer defines the api actions for the PermissionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PermissionsAPIServicer interface { 
	GetAllPermissions(context.Context) (ImplResponse, error)
	GetBulkPermissions(context.Context, BulkPermissionsRequestBean) (ImplResponse, error)
	GetMyPermissions(context.Context, string, string, string, string, string, string, string, string) (ImplResponse, error)
	GetPermittedProjects(context.Context, PermissionsKeysBean) (ImplResponse, error)
}


// ProjectAvatarsAPIServicer defines the api actions for the ProjectAvatarsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectAvatarsAPIServicer interface { 
	CreateProjectAvatar(context.Context, string, *interface{}, int32, int32, int32) (ImplResponse, error)
	DeleteProjectAvatar(context.Context, string, int64) (ImplResponse, error)
	GetAllProjectAvatars(context.Context, string) (ImplResponse, error)
	UpdateProjectAvatar(context.Context, string, Avatar) (ImplResponse, error)
}


// ProjectCategoriesAPIServicer defines the api actions for the ProjectCategoriesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectCategoriesAPIServicer interface { 
	CreateProjectCategory(context.Context, ProjectCategory) (ImplResponse, error)
	GetAllProjectCategories(context.Context) (ImplResponse, error)
	GetProjectCategoryById(context.Context, int64) (ImplResponse, error)
	RemoveProjectCategory(context.Context, int64) (ImplResponse, error)
	UpdateProjectCategory(context.Context, int64, ProjectCategory) (ImplResponse, error)
}


// ProjectComponentsAPIServicer defines the api actions for the ProjectComponentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectComponentsAPIServicer interface { 
	CreateComponent(context.Context, ProjectComponent) (ImplResponse, error)
	DeleteComponent(context.Context, string, string) (ImplResponse, error)
	GetComponent(context.Context, string) (ImplResponse, error)
	GetComponentRelatedIssues(context.Context, string) (ImplResponse, error)
	GetProjectComponents(context.Context, string) (ImplResponse, error)
	GetProjectComponentsPaginated(context.Context, string, int64, int32, string, string) (ImplResponse, error)
	UpdateComponent(context.Context, string, ProjectComponent) (ImplResponse, error)
}


// ProjectEmailAPIServicer defines the api actions for the ProjectEmailAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectEmailAPIServicer interface { 
	GetProjectEmail(context.Context, int64) (ImplResponse, error)
	UpdateProjectEmail(context.Context, int64, ProjectEmailAddress) (ImplResponse, error)
}


// ProjectFeaturesAPIServicer defines the api actions for the ProjectFeaturesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectFeaturesAPIServicer interface { 
	GetFeaturesForProject(context.Context, string) (ImplResponse, error)
	ToggleFeatureForProject(context.Context, string, string, ProjectFeatureState) (ImplResponse, error)
}


// ProjectKeyAndNameValidationAPIServicer defines the api actions for the ProjectKeyAndNameValidationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectKeyAndNameValidationAPIServicer interface { 
	GetValidProjectKey(context.Context, string) (ImplResponse, error)
	GetValidProjectName(context.Context, string) (ImplResponse, error)
	ValidateProjectKey(context.Context, string) (ImplResponse, error)
}


// ProjectPermissionSchemesAPIServicer defines the api actions for the ProjectPermissionSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectPermissionSchemesAPIServicer interface { 
	AssignPermissionScheme(context.Context, string, IdBean, string) (ImplResponse, error)
	GetAssignedPermissionScheme(context.Context, string, string) (ImplResponse, error)
	GetProjectIssueSecurityScheme(context.Context, string) (ImplResponse, error)
	GetSecurityLevelsForProject(context.Context, string) (ImplResponse, error)
}


// ProjectPropertiesAPIServicer defines the api actions for the ProjectPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectPropertiesAPIServicer interface { 
	DeleteProjectProperty(context.Context, string, string) (ImplResponse, error)
	GetProjectProperty(context.Context, string, string) (ImplResponse, error)
	GetProjectPropertyKeys(context.Context, string) (ImplResponse, error)
	SetProjectProperty(context.Context, string, string, *interface{}) (ImplResponse, error)
}


// ProjectRoleActorsAPIServicer defines the api actions for the ProjectRoleActorsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectRoleActorsAPIServicer interface { 
	AddActorUsers(context.Context, string, int64, ActorsMap) (ImplResponse, error)
	AddProjectRoleActorsToRole(context.Context, int64, ActorInputBean) (ImplResponse, error)
	DeleteActor(context.Context, string, int64, string, string, string) (ImplResponse, error)
	DeleteProjectRoleActorsFromRole(context.Context, int64, string, string, string) (ImplResponse, error)
	GetProjectRoleActorsForRole(context.Context, int64) (ImplResponse, error)
	SetActors(context.Context, string, int64, ProjectRoleActorsUpdateBean) (ImplResponse, error)
}


// ProjectRolesAPIServicer defines the api actions for the ProjectRolesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectRolesAPIServicer interface { 
	CreateProjectRole(context.Context, CreateUpdateRoleRequestBean) (ImplResponse, error)
	DeleteProjectRole(context.Context, int64, int64) (ImplResponse, error)
	FullyUpdateProjectRole(context.Context, int64, CreateUpdateRoleRequestBean) (ImplResponse, error)
	GetAllProjectRoles(context.Context) (ImplResponse, error)
	GetProjectRole(context.Context, string, int64, bool) (ImplResponse, error)
	GetProjectRoleById(context.Context, int64) (ImplResponse, error)
	GetProjectRoleDetails(context.Context, string, bool, bool) (ImplResponse, error)
	GetProjectRoles(context.Context, string) (ImplResponse, error)
	PartialUpdateProjectRole(context.Context, int64, CreateUpdateRoleRequestBean) (ImplResponse, error)
}


// ProjectTypesAPIServicer defines the api actions for the ProjectTypesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectTypesAPIServicer interface { 
	GetAccessibleProjectTypeByKey(context.Context, string) (ImplResponse, error)
	GetAllAccessibleProjectTypes(context.Context) (ImplResponse, error)
	GetAllProjectTypes(context.Context) (ImplResponse, error)
	GetProjectTypeByKey(context.Context, string) (ImplResponse, error)
}


// ProjectVersionsAPIServicer defines the api actions for the ProjectVersionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectVersionsAPIServicer interface { 
	CreateVersion(context.Context, Version) (ImplResponse, error)
	DeleteAndReplaceVersion(context.Context, string, DeleteAndReplaceVersionBean) (ImplResponse, error)
	// Deprecated
	DeleteVersion(context.Context, string, string, string) (ImplResponse, error)
	GetProjectVersions(context.Context, string, string) (ImplResponse, error)
	GetProjectVersionsPaginated(context.Context, string, int64, int32, string, string, string, string) (ImplResponse, error)
	GetVersion(context.Context, string, string) (ImplResponse, error)
	GetVersionRelatedIssues(context.Context, string) (ImplResponse, error)
	GetVersionUnresolvedIssues(context.Context, string) (ImplResponse, error)
	MergeVersions(context.Context, string, string) (ImplResponse, error)
	MoveVersion(context.Context, string, VersionMoveBean) (ImplResponse, error)
	UpdateVersion(context.Context, string, Version) (ImplResponse, error)
}


// ProjectsAPIServicer defines the api actions for the ProjectsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ProjectsAPIServicer interface { 
	ArchiveProject(context.Context, string) (ImplResponse, error)
	CreateProject(context.Context, CreateProjectDetails) (ImplResponse, error)
	DeleteProject(context.Context, string, bool) (ImplResponse, error)
	DeleteProjectAsynchronously(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetAllProjects(context.Context, string, int32, []string) (ImplResponse, error)
	GetAllStatuses(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetHierarchy(context.Context, int64) (ImplResponse, error)
	// Deprecated
	GetNotificationSchemeForProject(context.Context, string, string) (ImplResponse, error)
	GetProject(context.Context, string, string, []string) (ImplResponse, error)
	GetRecent(context.Context, string, []map[string]interface{}) (ImplResponse, error)
	Restore(context.Context, string) (ImplResponse, error)
	SearchProjects(context.Context, int64, int32, string, []int64, []string, string, string, int64, string, string, []string, []map[string]interface{}, string) (ImplResponse, error)
	UpdateProject(context.Context, string, UpdateProjectDetails, string) (ImplResponse, error)
	// Deprecated
	UpdateProjectType(context.Context, string, string) (ImplResponse, error)
}


// ScreenSchemesAPIServicer defines the api actions for the ScreenSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ScreenSchemesAPIServicer interface { 
	CreateScreenScheme(context.Context, ScreenSchemeDetails) (ImplResponse, error)
	DeleteScreenScheme(context.Context, string) (ImplResponse, error)
	GetScreenSchemes(context.Context, int64, int32, []int64, string, string, string) (ImplResponse, error)
	UpdateScreenScheme(context.Context, string, UpdateScreenSchemeDetails) (ImplResponse, error)
}


// ScreenTabFieldsAPIServicer defines the api actions for the ScreenTabFieldsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ScreenTabFieldsAPIServicer interface { 
	AddScreenTabField(context.Context, int64, int64, AddFieldBean) (ImplResponse, error)
	GetAllScreenTabFields(context.Context, int64, int64, string) (ImplResponse, error)
	MoveScreenTabField(context.Context, int64, int64, string, MoveFieldBean) (ImplResponse, error)
	RemoveScreenTabField(context.Context, int64, int64, string) (ImplResponse, error)
}


// ScreenTabsAPIServicer defines the api actions for the ScreenTabsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ScreenTabsAPIServicer interface { 
	AddScreenTab(context.Context, int64, ScreenableTab) (ImplResponse, error)
	DeleteScreenTab(context.Context, int64, int64) (ImplResponse, error)
	GetAllScreenTabs(context.Context, int64, string) (ImplResponse, error)
	MoveScreenTab(context.Context, int64, int64, int32) (ImplResponse, error)
	RenameScreenTab(context.Context, int64, int64, ScreenableTab) (ImplResponse, error)
}


// ScreensAPIServicer defines the api actions for the ScreensAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ScreensAPIServicer interface { 
	AddFieldToDefaultScreen(context.Context, string) (ImplResponse, error)
	CreateScreen(context.Context, ScreenDetails) (ImplResponse, error)
	DeleteScreen(context.Context, int64) (ImplResponse, error)
	GetAvailableScreenFields(context.Context, int64) (ImplResponse, error)
	GetScreens(context.Context, int64, int32, []int64, string, []string, string) (ImplResponse, error)
	GetScreensForField(context.Context, string, int64, int32, string) (ImplResponse, error)
	UpdateScreen(context.Context, int64, UpdateScreenDetails) (ImplResponse, error)
}


// ServerInfoAPIServicer defines the api actions for the ServerInfoAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServerInfoAPIServicer interface { 
	GetServerInfo(context.Context) (ImplResponse, error)
}


// StatusAPIServicer defines the api actions for the StatusAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StatusAPIServicer interface { 
	CreateStatuses(context.Context, StatusCreateRequest) (ImplResponse, error)
	DeleteStatusesById(context.Context, []string) (ImplResponse, error)
	GetStatusesById(context.Context, string, []string) (ImplResponse, error)
	Search(context.Context, string, string, int64, int32, string, string) (ImplResponse, error)
	UpdateStatuses(context.Context, StatusUpdateRequest) (ImplResponse, error)
}


// TasksAPIServicer defines the api actions for the TasksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TasksAPIServicer interface { 
	CancelTask(context.Context, string) (ImplResponse, error)
	GetTask(context.Context, string) (ImplResponse, error)
}


// TimeTrackingAPIServicer defines the api actions for the TimeTrackingAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TimeTrackingAPIServicer interface { 
	GetAvailableTimeTrackingImplementations(context.Context) (ImplResponse, error)
	GetSelectedTimeTrackingImplementation(context.Context) (ImplResponse, error)
	GetSharedTimeTrackingConfiguration(context.Context) (ImplResponse, error)
	SelectTimeTrackingImplementation(context.Context, TimeTrackingProvider) (ImplResponse, error)
	SetSharedTimeTrackingConfiguration(context.Context, TimeTrackingConfiguration) (ImplResponse, error)
}


// UIModificationsAppsAPIServicer defines the api actions for the UIModificationsAppsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UIModificationsAppsAPIServicer interface { 
	CreateUiModification(context.Context, CreateUiModificationDetails) (ImplResponse, error)
	DeleteUiModification(context.Context, string) (ImplResponse, error)
	GetUiModifications(context.Context, int64, int32, string) (ImplResponse, error)
	UpdateUiModification(context.Context, string, UpdateUiModificationDetails) (ImplResponse, error)
}


// UserPropertiesAPIServicer defines the api actions for the UserPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserPropertiesAPIServicer interface { 
	DeleteUserProperty(context.Context, string, string, string, string) (ImplResponse, error)
	GetUserProperty(context.Context, string, string, string, string) (ImplResponse, error)
	GetUserPropertyKeys(context.Context, string, string, string) (ImplResponse, error)
	SetUserProperty(context.Context, string, *interface{}, string, string, string) (ImplResponse, error)
}


// UserSearchAPIServicer defines the api actions for the UserSearchAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserSearchAPIServicer interface { 
	FindAssignableUsers(context.Context, string, string, string, string, string, string, int32, int32, int32, bool) (ImplResponse, error)
	FindBulkAssignableUsers(context.Context, string, string, string, string, int32, int32) (ImplResponse, error)
	FindUserKeysByQuery(context.Context, string, int64, int32) (ImplResponse, error)
	FindUsers(context.Context, string, string, string, int32, int32, string) (ImplResponse, error)
	FindUsersByQuery(context.Context, string, int64, int32) (ImplResponse, error)
	FindUsersForPicker(context.Context, string, int32, bool, []string, []string, string, bool) (ImplResponse, error)
	FindUsersWithAllPermissions(context.Context, string, string, string, string, string, string, int32, int32) (ImplResponse, error)
	FindUsersWithBrowsePermission(context.Context, string, string, string, string, string, int32, int32) (ImplResponse, error)
}


// UsersAPIServicer defines the api actions for the UsersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UsersAPIServicer interface { 
	BulkGetUsers(context.Context, []string, int64, int32, []string, []string) (ImplResponse, error)
	BulkGetUsersMigration(context.Context, int64, int32, []string, []string) (ImplResponse, error)
	CreateUser(context.Context, NewUserDetails) (ImplResponse, error)
	GetAllUsers(context.Context, int32, int32) (ImplResponse, error)
	GetAllUsersDefault(context.Context, int32, int32) (ImplResponse, error)
	GetUser(context.Context, string, string, string, string) (ImplResponse, error)
	GetUserDefaultColumns(context.Context, string, string) (ImplResponse, error)
	GetUserEmail(context.Context, string) (ImplResponse, error)
	GetUserEmailBulk(context.Context, []string) (ImplResponse, error)
	GetUserGroups(context.Context, string, string, string) (ImplResponse, error)
	RemoveUser(context.Context, string, string, string) (ImplResponse, error)
	ResetUserColumns(context.Context, string, string) (ImplResponse, error)
	SetUserColumns(context.Context, string, []string) (ImplResponse, error)
}


// WebhooksAPIServicer defines the api actions for the WebhooksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WebhooksAPIServicer interface { 
	DeleteWebhookById(context.Context, ContainerForWebhookIds) (ImplResponse, error)
	GetDynamicWebhooksForApp(context.Context, int64, int32) (ImplResponse, error)
	GetFailedWebhooks(context.Context, int32, int64) (ImplResponse, error)
	RefreshWebhooks(context.Context, ContainerForWebhookIds) (ImplResponse, error)
	RegisterDynamicWebhooks(context.Context, WebhookRegistrationDetails) (ImplResponse, error)
}


// WorkflowSchemeDraftsAPIServicer defines the api actions for the WorkflowSchemeDraftsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowSchemeDraftsAPIServicer interface { 
	CreateWorkflowSchemeDraftFromParent(context.Context, int64) (ImplResponse, error)
	DeleteDraftDefaultWorkflow(context.Context, int64) (ImplResponse, error)
	DeleteDraftWorkflowMapping(context.Context, int64, string) (ImplResponse, error)
	DeleteWorkflowSchemeDraft(context.Context, int64) (ImplResponse, error)
	DeleteWorkflowSchemeDraftIssueType(context.Context, int64, string) (ImplResponse, error)
	GetDraftDefaultWorkflow(context.Context, int64) (ImplResponse, error)
	GetDraftWorkflow(context.Context, int64, string) (ImplResponse, error)
	GetWorkflowSchemeDraft(context.Context, int64) (ImplResponse, error)
	GetWorkflowSchemeDraftIssueType(context.Context, int64, string) (ImplResponse, error)
	PublishDraftWorkflowScheme(context.Context, int64, PublishDraftWorkflowScheme, bool) (ImplResponse, error)
	SetWorkflowSchemeDraftIssueType(context.Context, int64, string, IssueTypeWorkflowMapping) (ImplResponse, error)
	UpdateDraftDefaultWorkflow(context.Context, int64, DefaultWorkflow) (ImplResponse, error)
	UpdateDraftWorkflowMapping(context.Context, int64, string, IssueTypesWorkflowMapping) (ImplResponse, error)
	UpdateWorkflowSchemeDraft(context.Context, int64, WorkflowScheme) (ImplResponse, error)
}


// WorkflowSchemeProjectAssociationsAPIServicer defines the api actions for the WorkflowSchemeProjectAssociationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowSchemeProjectAssociationsAPIServicer interface { 
	AssignSchemeToProject(context.Context, WorkflowSchemeProjectAssociation) (ImplResponse, error)
	GetWorkflowSchemeProjectAssociations(context.Context, []int64) (ImplResponse, error)
}


// WorkflowSchemesAPIServicer defines the api actions for the WorkflowSchemesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowSchemesAPIServicer interface { 
	CreateWorkflowScheme(context.Context, WorkflowScheme) (ImplResponse, error)
	DeleteDefaultWorkflow(context.Context, int64, bool) (ImplResponse, error)
	DeleteWorkflowMapping(context.Context, int64, string, bool) (ImplResponse, error)
	DeleteWorkflowScheme(context.Context, int64) (ImplResponse, error)
	DeleteWorkflowSchemeIssueType(context.Context, int64, string, bool) (ImplResponse, error)
	GetAllWorkflowSchemes(context.Context, int64, int32) (ImplResponse, error)
	GetDefaultWorkflow(context.Context, int64, bool) (ImplResponse, error)
	GetWorkflow(context.Context, int64, string, bool) (ImplResponse, error)
	GetWorkflowScheme(context.Context, int64, bool) (ImplResponse, error)
	GetWorkflowSchemeIssueType(context.Context, int64, string, bool) (ImplResponse, error)
	SetWorkflowSchemeIssueType(context.Context, int64, string, IssueTypeWorkflowMapping) (ImplResponse, error)
	UpdateDefaultWorkflow(context.Context, int64, DefaultWorkflow) (ImplResponse, error)
	UpdateWorkflowMapping(context.Context, int64, string, IssueTypesWorkflowMapping) (ImplResponse, error)
	UpdateWorkflowScheme(context.Context, int64, WorkflowScheme) (ImplResponse, error)
}


// WorkflowStatusCategoriesAPIServicer defines the api actions for the WorkflowStatusCategoriesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowStatusCategoriesAPIServicer interface { 
	GetStatusCategories(context.Context) (ImplResponse, error)
	GetStatusCategory(context.Context, string) (ImplResponse, error)
}


// WorkflowStatusesAPIServicer defines the api actions for the WorkflowStatusesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowStatusesAPIServicer interface { 
	GetStatus(context.Context, string) (ImplResponse, error)
	GetStatuses(context.Context) (ImplResponse, error)
}


// WorkflowTransitionPropertiesAPIServicer defines the api actions for the WorkflowTransitionPropertiesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowTransitionPropertiesAPIServicer interface { 
	CreateWorkflowTransitionProperty(context.Context, int64, string, string, WorkflowTransitionProperty, string) (ImplResponse, error)
	DeleteWorkflowTransitionProperty(context.Context, int64, string, string, string) (ImplResponse, error)
	GetWorkflowTransitionProperties(context.Context, int64, string, bool, string, string) (ImplResponse, error)
	UpdateWorkflowTransitionProperty(context.Context, int64, string, string, WorkflowTransitionProperty, string) (ImplResponse, error)
}


// WorkflowTransitionRulesAPIServicer defines the api actions for the WorkflowTransitionRulesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowTransitionRulesAPIServicer interface { 
	DeleteWorkflowTransitionRuleConfigurations(context.Context, WorkflowsWithTransitionRulesDetails) (ImplResponse, error)
	GetWorkflowTransitionRuleConfigurations(context.Context, []string, int64, int32, []string, []string, []string, bool, string) (ImplResponse, error)
	UpdateWorkflowTransitionRuleConfigurations(context.Context, WorkflowTransitionRulesUpdate) (ImplResponse, error)
}


// WorkflowsAPIServicer defines the api actions for the WorkflowsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type WorkflowsAPIServicer interface { 
	CreateWorkflow(context.Context, CreateWorkflowDetails) (ImplResponse, error)
	DeleteInactiveWorkflow(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetAllWorkflows(context.Context, string) (ImplResponse, error)
	GetWorkflowsPaginated(context.Context, int64, int32, []string, string, string, string, bool) (ImplResponse, error)
}
