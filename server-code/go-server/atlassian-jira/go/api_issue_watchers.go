/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueWatchersAPIController binds http requests to an api service and writes the service results to the http response
type IssueWatchersAPIController struct {
	service IssueWatchersAPIServicer
	errorHandler ErrorHandler
}

// IssueWatchersAPIOption for how the controller is set up.
type IssueWatchersAPIOption func(*IssueWatchersAPIController)

// WithIssueWatchersAPIErrorHandler inject ErrorHandler into controller
func WithIssueWatchersAPIErrorHandler(h ErrorHandler) IssueWatchersAPIOption {
	return func(c *IssueWatchersAPIController) {
		c.errorHandler = h
	}
}

// NewIssueWatchersAPIController creates a default api controller
func NewIssueWatchersAPIController(s IssueWatchersAPIServicer, opts ...IssueWatchersAPIOption) Router {
	controller := &IssueWatchersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueWatchersAPIController
func (c *IssueWatchersAPIController) Routes() Routes {
	return Routes{
		"AddWatcher": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/watchers",
			c.AddWatcher,
		},
		"GetIsWatchingIssueBulk": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/watching",
			c.GetIsWatchingIssueBulk,
		},
		"GetIssueWatchers": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/watchers",
			c.GetIssueWatchers,
		},
		"RemoveWatcher": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/watchers",
			c.RemoveWatcher,
		},
	}
}

// AddWatcher - Add watcher
func (c *IssueWatchersAPIController) AddWatcher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AddWatcher(r.Context(), issueIdOrKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIsWatchingIssueBulk - Get is watching issue bulk
func (c *IssueWatchersAPIController) GetIsWatchingIssueBulk(w http.ResponseWriter, r *http.Request) {
	issueListParam := IssueList{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueListParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueListRequired(issueListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueListConstraints(issueListParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetIsWatchingIssueBulk(r.Context(), issueListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueWatchers - Get issue watchers
func (c *IssueWatchersAPIController) GetIssueWatchers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetIssueWatchers(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveWatcher - Delete watcher
func (c *IssueWatchersAPIController) RemoveWatcher(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	result, err := c.service.RemoveWatcher(r.Context(), issueIdOrKeyParam, usernameParam, accountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
