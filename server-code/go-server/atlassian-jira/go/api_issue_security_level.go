/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueSecurityLevelAPIController binds http requests to an api service and writes the service results to the http response
type IssueSecurityLevelAPIController struct {
	service IssueSecurityLevelAPIServicer
	errorHandler ErrorHandler
}

// IssueSecurityLevelAPIOption for how the controller is set up.
type IssueSecurityLevelAPIOption func(*IssueSecurityLevelAPIController)

// WithIssueSecurityLevelAPIErrorHandler inject ErrorHandler into controller
func WithIssueSecurityLevelAPIErrorHandler(h ErrorHandler) IssueSecurityLevelAPIOption {
	return func(c *IssueSecurityLevelAPIController) {
		c.errorHandler = h
	}
}

// NewIssueSecurityLevelAPIController creates a default api controller
func NewIssueSecurityLevelAPIController(s IssueSecurityLevelAPIServicer, opts ...IssueSecurityLevelAPIOption) Router {
	controller := &IssueSecurityLevelAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueSecurityLevelAPIController
func (c *IssueSecurityLevelAPIController) Routes() Routes {
	return Routes{
		"GetIssueSecurityLevel": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/securitylevel/{id}",
			c.GetIssueSecurityLevel,
		},
		"GetIssueSecurityLevelMembers": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuesecurityschemes/{issueSecuritySchemeId}/members",
			c.GetIssueSecurityLevelMembers,
		},
	}
}

// GetIssueSecurityLevel - Get issue security level
func (c *IssueSecurityLevelAPIController) GetIssueSecurityLevel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetIssueSecurityLevel(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueSecurityLevelMembers - Get issue security level members
func (c *IssueSecurityLevelAPIController) GetIssueSecurityLevelMembers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueSecuritySchemeIdParam, err := parseNumericParameter[int64](
		params["issueSecuritySchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	issueSecurityLevelIdParam, err := parseNumericArrayParameter[int64](
		query.Get("issueSecurityLevelId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetIssueSecurityLevelMembers(r.Context(), issueSecuritySchemeIdParam, startAtParam, maxResultsParam, issueSecurityLevelIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
