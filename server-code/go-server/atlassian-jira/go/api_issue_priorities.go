/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssuePrioritiesAPIController binds http requests to an api service and writes the service results to the http response
type IssuePrioritiesAPIController struct {
	service IssuePrioritiesAPIServicer
	errorHandler ErrorHandler
}

// IssuePrioritiesAPIOption for how the controller is set up.
type IssuePrioritiesAPIOption func(*IssuePrioritiesAPIController)

// WithIssuePrioritiesAPIErrorHandler inject ErrorHandler into controller
func WithIssuePrioritiesAPIErrorHandler(h ErrorHandler) IssuePrioritiesAPIOption {
	return func(c *IssuePrioritiesAPIController) {
		c.errorHandler = h
	}
}

// NewIssuePrioritiesAPIController creates a default api controller
func NewIssuePrioritiesAPIController(s IssuePrioritiesAPIServicer, opts ...IssuePrioritiesAPIOption) Router {
	controller := &IssuePrioritiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssuePrioritiesAPIController
func (c *IssuePrioritiesAPIController) Routes() Routes {
	return Routes{
		"CreatePriority": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/priority",
			c.CreatePriority,
		},
		"DeletePriority": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/priority/{id}",
			c.DeletePriority,
		},
		"GetPriorities": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/priority",
			c.GetPriorities,
		},
		"GetPriority": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/priority/{id}",
			c.GetPriority,
		},
		"MovePriorities": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/priority/move",
			c.MovePriorities,
		},
		"SearchPriorities": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/priority/search",
			c.SearchPriorities,
		},
		"SetDefaultPriority": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/priority/default",
			c.SetDefaultPriority,
		},
		"UpdatePriority": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/priority/{id}",
			c.UpdatePriority,
		},
	}
}

// CreatePriority - Create priority
func (c *IssuePrioritiesAPIController) CreatePriority(w http.ResponseWriter, r *http.Request) {
	createPriorityDetailsParam := CreatePriorityDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPriorityDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePriorityDetailsRequired(createPriorityDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePriorityDetailsConstraints(createPriorityDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePriority(r.Context(), createPriorityDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePriority - Delete priority
func (c *IssuePrioritiesAPIController) DeletePriority(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var replaceWithParam string
	if query.Has("replaceWith") {
		param := query.Get("replaceWith")

		replaceWithParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "replaceWith"}, nil)
		return
	}
	result, err := c.service.DeletePriority(r.Context(), idParam, replaceWithParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPriorities - Get priorities
// Deprecated
func (c *IssuePrioritiesAPIController) GetPriorities(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPriorities(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPriority - Get priority
func (c *IssuePrioritiesAPIController) GetPriority(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetPriority(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MovePriorities - Move priorities
func (c *IssuePrioritiesAPIController) MovePriorities(w http.ResponseWriter, r *http.Request) {
	reorderIssuePrioritiesParam := ReorderIssuePriorities{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&reorderIssuePrioritiesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReorderIssuePrioritiesRequired(reorderIssuePrioritiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReorderIssuePrioritiesConstraints(reorderIssuePrioritiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MovePriorities(r.Context(), reorderIssuePrioritiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchPriorities - Search priorities
func (c *IssuePrioritiesAPIController) SearchPriorities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam string
	if query.Has("startAt") {
		param := query.Get("startAt")

		startAtParam = param
	} else {
		param := 0
		startAtParam = param
	}
	var maxResultsParam string
	if query.Has("maxResults") {
		param := query.Get("maxResults")

		maxResultsParam = param
	} else {
		param := 50
		maxResultsParam = param
	}
	var idParam []string
	if query.Has("id") {
		idParam = strings.Split(query.Get("id"), ",")
	}
	var onlyDefaultParam bool
	if query.Has("onlyDefault") {
		param, err := parseBoolParameter(
			query.Get("onlyDefault"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyDefaultParam = param
	} else {
		var param bool = false
		onlyDefaultParam = param
	}
	result, err := c.service.SearchPriorities(r.Context(), startAtParam, maxResultsParam, idParam, onlyDefaultParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetDefaultPriority - Set default priority
func (c *IssuePrioritiesAPIController) SetDefaultPriority(w http.ResponseWriter, r *http.Request) {
	setDefaultPriorityRequestParam := SetDefaultPriorityRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setDefaultPriorityRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetDefaultPriorityRequestRequired(setDefaultPriorityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetDefaultPriorityRequestConstraints(setDefaultPriorityRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetDefaultPriority(r.Context(), setDefaultPriorityRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePriority - Update priority
func (c *IssuePrioritiesAPIController) UpdatePriority(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	updatePriorityDetailsParam := UpdatePriorityDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updatePriorityDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdatePriorityDetailsRequired(updatePriorityDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdatePriorityDetailsConstraints(updatePriorityDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePriority(r.Context(), idParam, updatePriorityDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
