/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkflowSchemesAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowSchemesAPIController struct {
	service WorkflowSchemesAPIServicer
	errorHandler ErrorHandler
}

// WorkflowSchemesAPIOption for how the controller is set up.
type WorkflowSchemesAPIOption func(*WorkflowSchemesAPIController)

// WithWorkflowSchemesAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowSchemesAPIErrorHandler(h ErrorHandler) WorkflowSchemesAPIOption {
	return func(c *WorkflowSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowSchemesAPIController creates a default api controller
func NewWorkflowSchemesAPIController(s WorkflowSchemesAPIServicer, opts ...WorkflowSchemesAPIOption) Router {
	controller := &WorkflowSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowSchemesAPIController
func (c *WorkflowSchemesAPIController) Routes() Routes {
	return Routes{
		"CreateWorkflowScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/workflowscheme",
			c.CreateWorkflowScheme,
		},
		"DeleteDefaultWorkflow": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/default",
			c.DeleteDefaultWorkflow,
		},
		"DeleteWorkflowMapping": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/workflow",
			c.DeleteWorkflowMapping,
		},
		"DeleteWorkflowScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}",
			c.DeleteWorkflowScheme,
		},
		"DeleteWorkflowSchemeIssueType": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
			c.DeleteWorkflowSchemeIssueType,
		},
		"GetAllWorkflowSchemes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme",
			c.GetAllWorkflowSchemes,
		},
		"GetDefaultWorkflow": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/default",
			c.GetDefaultWorkflow,
		},
		"GetWorkflow": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/workflow",
			c.GetWorkflow,
		},
		"GetWorkflowScheme": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}",
			c.GetWorkflowScheme,
		},
		"GetWorkflowSchemeIssueType": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
			c.GetWorkflowSchemeIssueType,
		},
		"SetWorkflowSchemeIssueType": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/issuetype/{issueType}",
			c.SetWorkflowSchemeIssueType,
		},
		"UpdateDefaultWorkflow": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/default",
			c.UpdateDefaultWorkflow,
		},
		"UpdateWorkflowMapping": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/workflow",
			c.UpdateWorkflowMapping,
		},
		"UpdateWorkflowScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}",
			c.UpdateWorkflowScheme,
		},
	}
}

// CreateWorkflowScheme - Create workflow scheme
func (c *WorkflowSchemesAPIController) CreateWorkflowScheme(w http.ResponseWriter, r *http.Request) {
	workflowSchemeParam := WorkflowScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowSchemeRequired(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowSchemeConstraints(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateWorkflowScheme(r.Context(), workflowSchemeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDefaultWorkflow - Delete default workflow
func (c *WorkflowSchemesAPIController) DeleteDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var updateDraftIfNeededParam bool
	if query.Has("updateDraftIfNeeded") {
		param, err := parseBoolParameter(
			query.Get("updateDraftIfNeeded"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		updateDraftIfNeededParam = param
	} else {
	}
	result, err := c.service.DeleteDefaultWorkflow(r.Context(), idParam, updateDraftIfNeededParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowMapping - Delete issue types for workflow in workflow scheme
func (c *WorkflowSchemesAPIController) DeleteWorkflowMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	var updateDraftIfNeededParam bool
	if query.Has("updateDraftIfNeeded") {
		param, err := parseBoolParameter(
			query.Get("updateDraftIfNeeded"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		updateDraftIfNeededParam = param
	} else {
	}
	result, err := c.service.DeleteWorkflowMapping(r.Context(), idParam, workflowNameParam, updateDraftIfNeededParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowScheme - Delete workflow scheme
func (c *WorkflowSchemesAPIController) DeleteWorkflowScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteWorkflowScheme(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowSchemeIssueType - Delete workflow for issue type in workflow scheme
func (c *WorkflowSchemesAPIController) DeleteWorkflowSchemeIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	var updateDraftIfNeededParam bool
	if query.Has("updateDraftIfNeeded") {
		param, err := parseBoolParameter(
			query.Get("updateDraftIfNeeded"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		updateDraftIfNeededParam = param
	} else {
	}
	result, err := c.service.DeleteWorkflowSchemeIssueType(r.Context(), idParam, issueTypeParam, updateDraftIfNeededParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllWorkflowSchemes - Get all workflow schemes
func (c *WorkflowSchemesAPIController) GetAllWorkflowSchemes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetAllWorkflowSchemes(r.Context(), startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultWorkflow - Get default workflow
func (c *WorkflowSchemesAPIController) GetDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var returnDraftIfExistsParam bool
	if query.Has("returnDraftIfExists") {
		param, err := parseBoolParameter(
			query.Get("returnDraftIfExists"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		returnDraftIfExistsParam = param
	} else {
		var param bool = false
		returnDraftIfExistsParam = param
	}
	result, err := c.service.GetDefaultWorkflow(r.Context(), idParam, returnDraftIfExistsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflow - Get issue types for workflows in workflow scheme
func (c *WorkflowSchemesAPIController) GetWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
	}
	var returnDraftIfExistsParam bool
	if query.Has("returnDraftIfExists") {
		param, err := parseBoolParameter(
			query.Get("returnDraftIfExists"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		returnDraftIfExistsParam = param
	} else {
		var param bool = false
		returnDraftIfExistsParam = param
	}
	result, err := c.service.GetWorkflow(r.Context(), idParam, workflowNameParam, returnDraftIfExistsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowScheme - Get workflow scheme
func (c *WorkflowSchemesAPIController) GetWorkflowScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var returnDraftIfExistsParam bool
	if query.Has("returnDraftIfExists") {
		param, err := parseBoolParameter(
			query.Get("returnDraftIfExists"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		returnDraftIfExistsParam = param
	} else {
		var param bool = false
		returnDraftIfExistsParam = param
	}
	result, err := c.service.GetWorkflowScheme(r.Context(), idParam, returnDraftIfExistsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowSchemeIssueType - Get workflow for issue type in workflow scheme
func (c *WorkflowSchemesAPIController) GetWorkflowSchemeIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	var returnDraftIfExistsParam bool
	if query.Has("returnDraftIfExists") {
		param, err := parseBoolParameter(
			query.Get("returnDraftIfExists"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		returnDraftIfExistsParam = param
	} else {
		var param bool = false
		returnDraftIfExistsParam = param
	}
	result, err := c.service.GetWorkflowSchemeIssueType(r.Context(), idParam, issueTypeParam, returnDraftIfExistsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetWorkflowSchemeIssueType - Set workflow for issue type in workflow scheme
func (c *WorkflowSchemesAPIController) SetWorkflowSchemeIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	issueTypeWorkflowMappingParam := IssueTypeWorkflowMapping{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeWorkflowMappingRequired(issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeWorkflowMappingConstraints(issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetWorkflowSchemeIssueType(r.Context(), idParam, issueTypeParam, issueTypeWorkflowMappingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDefaultWorkflow - Update default workflow
func (c *WorkflowSchemesAPIController) UpdateDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	defaultWorkflowParam := DefaultWorkflow{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDefaultWorkflowRequired(defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDefaultWorkflowConstraints(defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDefaultWorkflow(r.Context(), idParam, defaultWorkflowParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkflowMapping - Set issue types for workflow in workflow scheme
func (c *WorkflowSchemesAPIController) UpdateWorkflowMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	issueTypesWorkflowMappingParam := IssueTypesWorkflowMapping{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypesWorkflowMappingRequired(issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypesWorkflowMappingConstraints(issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWorkflowMapping(r.Context(), idParam, workflowNameParam, issueTypesWorkflowMappingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkflowScheme - Update workflow scheme
func (c *WorkflowSchemesAPIController) UpdateWorkflowScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	workflowSchemeParam := WorkflowScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowSchemeRequired(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowSchemeConstraints(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWorkflowScheme(r.Context(), idParam, workflowSchemeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
