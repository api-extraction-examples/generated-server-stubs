/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueAttachmentsAPIController binds http requests to an api service and writes the service results to the http response
type IssueAttachmentsAPIController struct {
	service IssueAttachmentsAPIServicer
	errorHandler ErrorHandler
}

// IssueAttachmentsAPIOption for how the controller is set up.
type IssueAttachmentsAPIOption func(*IssueAttachmentsAPIController)

// WithIssueAttachmentsAPIErrorHandler inject ErrorHandler into controller
func WithIssueAttachmentsAPIErrorHandler(h ErrorHandler) IssueAttachmentsAPIOption {
	return func(c *IssueAttachmentsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueAttachmentsAPIController creates a default api controller
func NewIssueAttachmentsAPIController(s IssueAttachmentsAPIServicer, opts ...IssueAttachmentsAPIOption) Router {
	controller := &IssueAttachmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueAttachmentsAPIController
func (c *IssueAttachmentsAPIController) Routes() Routes {
	return Routes{
		"AddAttachment": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/attachments",
			c.AddAttachment,
		},
		"ExpandAttachmentForHumans": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/{id}/expand/human",
			c.ExpandAttachmentForHumans,
		},
		"ExpandAttachmentForMachines": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/{id}/expand/raw",
			c.ExpandAttachmentForMachines,
		},
		"GetAttachment": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/{id}",
			c.GetAttachment,
		},
		"GetAttachmentContent": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/content/{id}",
			c.GetAttachmentContent,
		},
		"GetAttachmentMeta": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/meta",
			c.GetAttachmentMeta,
		},
		"GetAttachmentThumbnail": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/attachment/thumbnail/{id}",
			c.GetAttachmentThumbnail,
		},
		"RemoveAttachment": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/attachment/{id}",
			c.RemoveAttachment,
		},
	}
}

// AddAttachment - Add attachment
func (c *IssueAttachmentsAPIController) AddAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.AddAttachment(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ExpandAttachmentForHumans - Get all metadata for an expanded attachment
func (c *IssueAttachmentsAPIController) ExpandAttachmentForHumans(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ExpandAttachmentForHumans(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ExpandAttachmentForMachines - Get contents metadata for an expanded attachment
func (c *IssueAttachmentsAPIController) ExpandAttachmentForMachines(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ExpandAttachmentForMachines(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachment - Get attachment metadata
func (c *IssueAttachmentsAPIController) GetAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetAttachment(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachmentContent - Get attachment content
func (c *IssueAttachmentsAPIController) GetAttachmentContent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var redirectParam bool
	if query.Has("redirect") {
		param, err := parseBoolParameter(
			query.Get("redirect"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		redirectParam = param
	} else {
		var param bool = true
		redirectParam = param
	}
	result, err := c.service.GetAttachmentContent(r.Context(), idParam, redirectParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachmentMeta - Get Jira attachment settings
func (c *IssueAttachmentsAPIController) GetAttachmentMeta(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAttachmentMeta(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAttachmentThumbnail - Get attachment thumbnail
func (c *IssueAttachmentsAPIController) GetAttachmentThumbnail(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var redirectParam bool
	if query.Has("redirect") {
		param, err := parseBoolParameter(
			query.Get("redirect"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		redirectParam = param
	} else {
		var param bool = true
		redirectParam = param
	}
	var fallbackToDefaultParam bool
	if query.Has("fallbackToDefault") {
		param, err := parseBoolParameter(
			query.Get("fallbackToDefault"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fallbackToDefaultParam = param
	} else {
		var param bool = true
		fallbackToDefaultParam = param
	}
	var widthParam int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = param
	} else {
	}
	var heightParam int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = param
	} else {
	}
	result, err := c.service.GetAttachmentThumbnail(r.Context(), idParam, redirectParam, fallbackToDefaultParam, widthParam, heightParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveAttachment - Delete attachment
func (c *IssueAttachmentsAPIController) RemoveAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.RemoveAttachment(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
