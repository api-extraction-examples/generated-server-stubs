/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueCustomFieldOptionsAppsAPIController binds http requests to an api service and writes the service results to the http response
type IssueCustomFieldOptionsAppsAPIController struct {
	service IssueCustomFieldOptionsAppsAPIServicer
	errorHandler ErrorHandler
}

// IssueCustomFieldOptionsAppsAPIOption for how the controller is set up.
type IssueCustomFieldOptionsAppsAPIOption func(*IssueCustomFieldOptionsAppsAPIController)

// WithIssueCustomFieldOptionsAppsAPIErrorHandler inject ErrorHandler into controller
func WithIssueCustomFieldOptionsAppsAPIErrorHandler(h ErrorHandler) IssueCustomFieldOptionsAppsAPIOption {
	return func(c *IssueCustomFieldOptionsAppsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCustomFieldOptionsAppsAPIController creates a default api controller
func NewIssueCustomFieldOptionsAppsAPIController(s IssueCustomFieldOptionsAppsAPIServicer, opts ...IssueCustomFieldOptionsAppsAPIOption) Router {
	controller := &IssueCustomFieldOptionsAppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCustomFieldOptionsAppsAPIController
func (c *IssueCustomFieldOptionsAppsAPIController) Routes() Routes {
	return Routes{
		"CreateIssueFieldOption": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldKey}/option",
			c.CreateIssueFieldOption,
		},
		"DeleteIssueFieldOption": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/field/{fieldKey}/option/{optionId}",
			c.DeleteIssueFieldOption,
		},
		"GetAllIssueFieldOptions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldKey}/option",
			c.GetAllIssueFieldOptions,
		},
		"GetIssueFieldOption": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldKey}/option/{optionId}",
			c.GetIssueFieldOption,
		},
		"GetSelectableIssueFieldOptions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldKey}/option/suggestions/edit",
			c.GetSelectableIssueFieldOptions,
		},
		"GetVisibleIssueFieldOptions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldKey}/option/suggestions/search",
			c.GetVisibleIssueFieldOptions,
		},
		"ReplaceIssueFieldOption": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/field/{fieldKey}/option/{optionId}/issue",
			c.ReplaceIssueFieldOption,
		},
		"UpdateIssueFieldOption": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldKey}/option/{optionId}",
			c.UpdateIssueFieldOption,
		},
	}
}

// CreateIssueFieldOption - Create issue field option
func (c *IssueCustomFieldOptionsAppsAPIController) CreateIssueFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	issueFieldOptionCreateBeanParam := IssueFieldOptionCreateBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueFieldOptionCreateBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueFieldOptionCreateBeanRequired(issueFieldOptionCreateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueFieldOptionCreateBeanConstraints(issueFieldOptionCreateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssueFieldOption(r.Context(), fieldKeyParam, issueFieldOptionCreateBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueFieldOption - Delete issue field option
func (c *IssueCustomFieldOptionsAppsAPIController) DeleteIssueFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	optionIdParam, err := parseNumericParameter[int64](
		params["optionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteIssueFieldOption(r.Context(), fieldKeyParam, optionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllIssueFieldOptions - Get all issue field options
func (c *IssueCustomFieldOptionsAppsAPIController) GetAllIssueFieldOptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetAllIssueFieldOptions(r.Context(), fieldKeyParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueFieldOption - Get issue field option
func (c *IssueCustomFieldOptionsAppsAPIController) GetIssueFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	optionIdParam, err := parseNumericParameter[int64](
		params["optionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetIssueFieldOption(r.Context(), fieldKeyParam, optionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSelectableIssueFieldOptions - Get selectable issue field options
func (c *IssueCustomFieldOptionsAppsAPIController) GetSelectableIssueFieldOptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var projectIdParam int64
	if query.Has("projectId") {
		param, err := parseNumericParameter[int64](
			query.Get("projectId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		projectIdParam = param
	} else {
	}
	result, err := c.service.GetSelectableIssueFieldOptions(r.Context(), fieldKeyParam, startAtParam, maxResultsParam, projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVisibleIssueFieldOptions - Get visible issue field options
func (c *IssueCustomFieldOptionsAppsAPIController) GetVisibleIssueFieldOptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
	}
	var projectIdParam int64
	if query.Has("projectId") {
		param, err := parseNumericParameter[int64](
			query.Get("projectId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		projectIdParam = param
	} else {
	}
	result, err := c.service.GetVisibleIssueFieldOptions(r.Context(), fieldKeyParam, startAtParam, maxResultsParam, projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReplaceIssueFieldOption - Replace issue field option
func (c *IssueCustomFieldOptionsAppsAPIController) ReplaceIssueFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	optionIdParam, err := parseNumericParameter[int64](
		params["optionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var replaceWithParam int64
	if query.Has("replaceWith") {
		param, err := parseNumericParameter[int64](
			query.Get("replaceWith"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		replaceWithParam = param
	} else {
	}
	var jqlParam string
	if query.Has("jql") {
		param := query.Get("jql")

		jqlParam = param
	} else {
	}
	var overrideScreenSecurityParam bool
	if query.Has("overrideScreenSecurity") {
		param, err := parseBoolParameter(
			query.Get("overrideScreenSecurity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideScreenSecurityParam = param
	} else {
		var param bool = false
		overrideScreenSecurityParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.ReplaceIssueFieldOption(r.Context(), fieldKeyParam, optionIdParam, replaceWithParam, jqlParam, overrideScreenSecurityParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssueFieldOption - Update issue field option
func (c *IssueCustomFieldOptionsAppsAPIController) UpdateIssueFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldKeyParam := params["fieldKey"]
	if fieldKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldKey"}, nil)
		return
	}
	optionIdParam, err := parseNumericParameter[int64](
		params["optionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueFieldOptionParam := IssueFieldOption{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueFieldOptionParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueFieldOptionRequired(issueFieldOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueFieldOptionConstraints(issueFieldOptionParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssueFieldOption(r.Context(), fieldKeyParam, optionIdParam, issueFieldOptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
