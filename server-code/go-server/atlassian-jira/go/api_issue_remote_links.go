/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueRemoteLinksAPIController binds http requests to an api service and writes the service results to the http response
type IssueRemoteLinksAPIController struct {
	service IssueRemoteLinksAPIServicer
	errorHandler ErrorHandler
}

// IssueRemoteLinksAPIOption for how the controller is set up.
type IssueRemoteLinksAPIOption func(*IssueRemoteLinksAPIController)

// WithIssueRemoteLinksAPIErrorHandler inject ErrorHandler into controller
func WithIssueRemoteLinksAPIErrorHandler(h ErrorHandler) IssueRemoteLinksAPIOption {
	return func(c *IssueRemoteLinksAPIController) {
		c.errorHandler = h
	}
}

// NewIssueRemoteLinksAPIController creates a default api controller
func NewIssueRemoteLinksAPIController(s IssueRemoteLinksAPIServicer, opts ...IssueRemoteLinksAPIOption) Router {
	controller := &IssueRemoteLinksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueRemoteLinksAPIController
func (c *IssueRemoteLinksAPIController) Routes() Routes {
	return Routes{
		"CreateOrUpdateRemoteIssueLink": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink",
			c.CreateOrUpdateRemoteIssueLink,
		},
		"DeleteRemoteIssueLinkByGlobalId": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink",
			c.DeleteRemoteIssueLinkByGlobalId,
		},
		"DeleteRemoteIssueLinkById": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
			c.DeleteRemoteIssueLinkById,
		},
		"GetRemoteIssueLinkById": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
			c.GetRemoteIssueLinkById,
		},
		"GetRemoteIssueLinks": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink",
			c.GetRemoteIssueLinks,
		},
		"UpdateRemoteIssueLink": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/remotelink/{linkId}",
			c.UpdateRemoteIssueLink,
		},
	}
}

// CreateOrUpdateRemoteIssueLink - Create or update remote issue link
func (c *IssueRemoteLinksAPIController) CreateOrUpdateRemoteIssueLink(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	remoteIssueLinkRequestParam := RemoteIssueLinkRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoteIssueLinkRequestRequired(remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoteIssueLinkRequestConstraints(remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrUpdateRemoteIssueLink(r.Context(), issueIdOrKeyParam, remoteIssueLinkRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRemoteIssueLinkByGlobalId - Delete remote issue link by global ID
func (c *IssueRemoteLinksAPIController) DeleteRemoteIssueLinkByGlobalId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var globalIdParam string
	if query.Has("globalId") {
		param := query.Get("globalId")

		globalIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "globalId"}, nil)
		return
	}
	result, err := c.service.DeleteRemoteIssueLinkByGlobalId(r.Context(), issueIdOrKeyParam, globalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRemoteIssueLinkById - Delete remote issue link by ID
func (c *IssueRemoteLinksAPIController) DeleteRemoteIssueLinkById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	linkIdParam := params["linkId"]
	if linkIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"linkId"}, nil)
		return
	}
	result, err := c.service.DeleteRemoteIssueLinkById(r.Context(), issueIdOrKeyParam, linkIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRemoteIssueLinkById - Get remote issue link by ID
func (c *IssueRemoteLinksAPIController) GetRemoteIssueLinkById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	linkIdParam := params["linkId"]
	if linkIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"linkId"}, nil)
		return
	}
	result, err := c.service.GetRemoteIssueLinkById(r.Context(), issueIdOrKeyParam, linkIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRemoteIssueLinks - Get remote issue links
func (c *IssueRemoteLinksAPIController) GetRemoteIssueLinks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var globalIdParam string
	if query.Has("globalId") {
		param := query.Get("globalId")

		globalIdParam = param
	} else {
	}
	result, err := c.service.GetRemoteIssueLinks(r.Context(), issueIdOrKeyParam, globalIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateRemoteIssueLink - Update remote issue link by ID
func (c *IssueRemoteLinksAPIController) UpdateRemoteIssueLink(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	linkIdParam := params["linkId"]
	if linkIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"linkId"}, nil)
		return
	}
	remoteIssueLinkRequestParam := RemoteIssueLinkRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoteIssueLinkRequestRequired(remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoteIssueLinkRequestConstraints(remoteIssueLinkRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateRemoteIssueLink(r.Context(), issueIdOrKeyParam, linkIdParam, remoteIssueLinkRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
