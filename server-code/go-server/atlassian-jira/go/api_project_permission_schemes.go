/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectPermissionSchemesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectPermissionSchemesAPIController struct {
	service ProjectPermissionSchemesAPIServicer
	errorHandler ErrorHandler
}

// ProjectPermissionSchemesAPIOption for how the controller is set up.
type ProjectPermissionSchemesAPIOption func(*ProjectPermissionSchemesAPIController)

// WithProjectPermissionSchemesAPIErrorHandler inject ErrorHandler into controller
func WithProjectPermissionSchemesAPIErrorHandler(h ErrorHandler) ProjectPermissionSchemesAPIOption {
	return func(c *ProjectPermissionSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectPermissionSchemesAPIController creates a default api controller
func NewProjectPermissionSchemesAPIController(s ProjectPermissionSchemesAPIServicer, opts ...ProjectPermissionSchemesAPIOption) Router {
	controller := &ProjectPermissionSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectPermissionSchemesAPIController
func (c *ProjectPermissionSchemesAPIController) Routes() Routes {
	return Routes{
		"AssignPermissionScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectKeyOrId}/permissionscheme",
			c.AssignPermissionScheme,
		},
		"GetAssignedPermissionScheme": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectKeyOrId}/permissionscheme",
			c.GetAssignedPermissionScheme,
		},
		"GetProjectIssueSecurityScheme": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectKeyOrId}/issuesecuritylevelscheme",
			c.GetProjectIssueSecurityScheme,
		},
		"GetSecurityLevelsForProject": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectKeyOrId}/securitylevel",
			c.GetSecurityLevelsForProject,
		},
	}
}

// AssignPermissionScheme - Assign permission scheme
func (c *ProjectPermissionSchemesAPIController) AssignPermissionScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyOrIdParam := params["projectKeyOrId"]
	if projectKeyOrIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKeyOrId"}, nil)
		return
	}
	idBeanParam := IdBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&idBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdBeanRequired(idBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdBeanConstraints(idBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.AssignPermissionScheme(r.Context(), projectKeyOrIdParam, idBeanParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAssignedPermissionScheme - Get assigned permission scheme
func (c *ProjectPermissionSchemesAPIController) GetAssignedPermissionScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyOrIdParam := params["projectKeyOrId"]
	if projectKeyOrIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKeyOrId"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetAssignedPermissionScheme(r.Context(), projectKeyOrIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectIssueSecurityScheme - Get project issue security scheme
func (c *ProjectPermissionSchemesAPIController) GetProjectIssueSecurityScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyOrIdParam := params["projectKeyOrId"]
	if projectKeyOrIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKeyOrId"}, nil)
		return
	}
	result, err := c.service.GetProjectIssueSecurityScheme(r.Context(), projectKeyOrIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSecurityLevelsForProject - Get project issue security levels
func (c *ProjectPermissionSchemesAPIController) GetSecurityLevelsForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectKeyOrIdParam := params["projectKeyOrId"]
	if projectKeyOrIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKeyOrId"}, nil)
		return
	}
	result, err := c.service.GetSecurityLevelsForProject(r.Context(), projectKeyOrIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
