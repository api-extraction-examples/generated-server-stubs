/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectKeyAndNameValidationAPIController binds http requests to an api service and writes the service results to the http response
type ProjectKeyAndNameValidationAPIController struct {
	service ProjectKeyAndNameValidationAPIServicer
	errorHandler ErrorHandler
}

// ProjectKeyAndNameValidationAPIOption for how the controller is set up.
type ProjectKeyAndNameValidationAPIOption func(*ProjectKeyAndNameValidationAPIController)

// WithProjectKeyAndNameValidationAPIErrorHandler inject ErrorHandler into controller
func WithProjectKeyAndNameValidationAPIErrorHandler(h ErrorHandler) ProjectKeyAndNameValidationAPIOption {
	return func(c *ProjectKeyAndNameValidationAPIController) {
		c.errorHandler = h
	}
}

// NewProjectKeyAndNameValidationAPIController creates a default api controller
func NewProjectKeyAndNameValidationAPIController(s ProjectKeyAndNameValidationAPIServicer, opts ...ProjectKeyAndNameValidationAPIOption) Router {
	controller := &ProjectKeyAndNameValidationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectKeyAndNameValidationAPIController
func (c *ProjectKeyAndNameValidationAPIController) Routes() Routes {
	return Routes{
		"GetValidProjectKey": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/projectvalidate/validProjectKey",
			c.GetValidProjectKey,
		},
		"GetValidProjectName": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/projectvalidate/validProjectName",
			c.GetValidProjectName,
		},
		"ValidateProjectKey": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/projectvalidate/key",
			c.ValidateProjectKey,
		},
	}
}

// GetValidProjectKey - Get valid project key
func (c *ProjectKeyAndNameValidationAPIController) GetValidProjectKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
	}
	result, err := c.service.GetValidProjectKey(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetValidProjectName - Get valid project name
func (c *ProjectKeyAndNameValidationAPIController) GetValidProjectName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	result, err := c.service.GetValidProjectName(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ValidateProjectKey - Validate project key
func (c *ProjectKeyAndNameValidationAPIController) ValidateProjectKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
	}
	result, err := c.service.ValidateProjectKey(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
