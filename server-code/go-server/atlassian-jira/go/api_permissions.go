/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PermissionsAPIController binds http requests to an api service and writes the service results to the http response
type PermissionsAPIController struct {
	service PermissionsAPIServicer
	errorHandler ErrorHandler
}

// PermissionsAPIOption for how the controller is set up.
type PermissionsAPIOption func(*PermissionsAPIController)

// WithPermissionsAPIErrorHandler inject ErrorHandler into controller
func WithPermissionsAPIErrorHandler(h ErrorHandler) PermissionsAPIOption {
	return func(c *PermissionsAPIController) {
		c.errorHandler = h
	}
}

// NewPermissionsAPIController creates a default api controller
func NewPermissionsAPIController(s PermissionsAPIServicer, opts ...PermissionsAPIOption) Router {
	controller := &PermissionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PermissionsAPIController
func (c *PermissionsAPIController) Routes() Routes {
	return Routes{
		"GetAllPermissions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/permissions",
			c.GetAllPermissions,
		},
		"GetBulkPermissions": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/permissions/check",
			c.GetBulkPermissions,
		},
		"GetMyPermissions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/mypermissions",
			c.GetMyPermissions,
		},
		"GetPermittedProjects": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/permissions/project",
			c.GetPermittedProjects,
		},
	}
}

// GetAllPermissions - Get all permissions
func (c *PermissionsAPIController) GetAllPermissions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllPermissions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBulkPermissions - Get bulk permissions
func (c *PermissionsAPIController) GetBulkPermissions(w http.ResponseWriter, r *http.Request) {
	bulkPermissionsRequestBeanParam := BulkPermissionsRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkPermissionsRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkPermissionsRequestBeanRequired(bulkPermissionsRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkPermissionsRequestBeanConstraints(bulkPermissionsRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetBulkPermissions(r.Context(), bulkPermissionsRequestBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMyPermissions - Get my permissions
func (c *PermissionsAPIController) GetMyPermissions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var projectKeyParam string
	if query.Has("projectKey") {
		param := query.Get("projectKey")

		projectKeyParam = param
	} else {
	}
	var projectIdParam string
	if query.Has("projectId") {
		param := query.Get("projectId")

		projectIdParam = param
	} else {
	}
	var issueKeyParam string
	if query.Has("issueKey") {
		param := query.Get("issueKey")

		issueKeyParam = param
	} else {
	}
	var issueIdParam string
	if query.Has("issueId") {
		param := query.Get("issueId")

		issueIdParam = param
	} else {
	}
	var permissionsParam string
	if query.Has("permissions") {
		param := query.Get("permissions")

		permissionsParam = param
	} else {
	}
	var projectUuidParam string
	if query.Has("projectUuid") {
		param := query.Get("projectUuid")

		projectUuidParam = param
	} else {
	}
	var projectConfigurationUuidParam string
	if query.Has("projectConfigurationUuid") {
		param := query.Get("projectConfigurationUuid")

		projectConfigurationUuidParam = param
	} else {
	}
	var commentIdParam string
	if query.Has("commentId") {
		param := query.Get("commentId")

		commentIdParam = param
	} else {
	}
	result, err := c.service.GetMyPermissions(r.Context(), projectKeyParam, projectIdParam, issueKeyParam, issueIdParam, permissionsParam, projectUuidParam, projectConfigurationUuidParam, commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermittedProjects - Get permitted projects
func (c *PermissionsAPIController) GetPermittedProjects(w http.ResponseWriter, r *http.Request) {
	permissionsKeysBeanParam := PermissionsKeysBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionsKeysBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionsKeysBeanRequired(permissionsKeysBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionsKeysBeanConstraints(permissionsKeysBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPermittedProjects(r.Context(), permissionsKeysBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
