/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueResolutionsAPIController binds http requests to an api service and writes the service results to the http response
type IssueResolutionsAPIController struct {
	service IssueResolutionsAPIServicer
	errorHandler ErrorHandler
}

// IssueResolutionsAPIOption for how the controller is set up.
type IssueResolutionsAPIOption func(*IssueResolutionsAPIController)

// WithIssueResolutionsAPIErrorHandler inject ErrorHandler into controller
func WithIssueResolutionsAPIErrorHandler(h ErrorHandler) IssueResolutionsAPIOption {
	return func(c *IssueResolutionsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueResolutionsAPIController creates a default api controller
func NewIssueResolutionsAPIController(s IssueResolutionsAPIServicer, opts ...IssueResolutionsAPIOption) Router {
	controller := &IssueResolutionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueResolutionsAPIController
func (c *IssueResolutionsAPIController) Routes() Routes {
	return Routes{
		"CreateResolution": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/resolution",
			c.CreateResolution,
		},
		"DeleteResolution": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/resolution/{id}",
			c.DeleteResolution,
		},
		"GetResolution": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/resolution/{id}",
			c.GetResolution,
		},
		"GetResolutions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/resolution",
			c.GetResolutions,
		},
		"MoveResolutions": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/resolution/move",
			c.MoveResolutions,
		},
		"SearchResolutions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/resolution/search",
			c.SearchResolutions,
		},
		"SetDefaultResolution": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/resolution/default",
			c.SetDefaultResolution,
		},
		"UpdateResolution": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/resolution/{id}",
			c.UpdateResolution,
		},
	}
}

// CreateResolution - Create resolution
func (c *IssueResolutionsAPIController) CreateResolution(w http.ResponseWriter, r *http.Request) {
	createResolutionDetailsParam := CreateResolutionDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateResolutionDetailsRequired(createResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateResolutionDetailsConstraints(createResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateResolution(r.Context(), createResolutionDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteResolution - Delete resolution
func (c *IssueResolutionsAPIController) DeleteResolution(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var replaceWithParam string
	if query.Has("replaceWith") {
		param := query.Get("replaceWith")

		replaceWithParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "replaceWith"}, nil)
		return
	}
	result, err := c.service.DeleteResolution(r.Context(), idParam, replaceWithParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetResolution - Get resolution
func (c *IssueResolutionsAPIController) GetResolution(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetResolution(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetResolutions - Get resolutions
// Deprecated
func (c *IssueResolutionsAPIController) GetResolutions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetResolutions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoveResolutions - Move resolutions
func (c *IssueResolutionsAPIController) MoveResolutions(w http.ResponseWriter, r *http.Request) {
	reorderIssueResolutionsRequestParam := ReorderIssueResolutionsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&reorderIssueResolutionsRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReorderIssueResolutionsRequestRequired(reorderIssueResolutionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReorderIssueResolutionsRequestConstraints(reorderIssueResolutionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MoveResolutions(r.Context(), reorderIssueResolutionsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchResolutions - Search resolutions
func (c *IssueResolutionsAPIController) SearchResolutions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam string
	if query.Has("startAt") {
		param := query.Get("startAt")

		startAtParam = param
	} else {
		param := 0
		startAtParam = param
	}
	var maxResultsParam string
	if query.Has("maxResults") {
		param := query.Get("maxResults")

		maxResultsParam = param
	} else {
		param := 50
		maxResultsParam = param
	}
	var idParam []string
	if query.Has("id") {
		idParam = strings.Split(query.Get("id"), ",")
	}
	var onlyDefaultParam bool
	if query.Has("onlyDefault") {
		param, err := parseBoolParameter(
			query.Get("onlyDefault"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyDefaultParam = param
	} else {
		var param bool = false
		onlyDefaultParam = param
	}
	result, err := c.service.SearchResolutions(r.Context(), startAtParam, maxResultsParam, idParam, onlyDefaultParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetDefaultResolution - Set default resolution
func (c *IssueResolutionsAPIController) SetDefaultResolution(w http.ResponseWriter, r *http.Request) {
	setDefaultResolutionRequestParam := SetDefaultResolutionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setDefaultResolutionRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetDefaultResolutionRequestRequired(setDefaultResolutionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetDefaultResolutionRequestConstraints(setDefaultResolutionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetDefaultResolution(r.Context(), setDefaultResolutionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateResolution - Update resolution
func (c *IssueResolutionsAPIController) UpdateResolution(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	updateResolutionDetailsParam := UpdateResolutionDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateResolutionDetailsRequired(updateResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateResolutionDetailsConstraints(updateResolutionDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateResolution(r.Context(), idParam, updateResolutionDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
