/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// DashboardsAPIController binds http requests to an api service and writes the service results to the http response
type DashboardsAPIController struct {
	service DashboardsAPIServicer
	errorHandler ErrorHandler
}

// DashboardsAPIOption for how the controller is set up.
type DashboardsAPIOption func(*DashboardsAPIController)

// WithDashboardsAPIErrorHandler inject ErrorHandler into controller
func WithDashboardsAPIErrorHandler(h ErrorHandler) DashboardsAPIOption {
	return func(c *DashboardsAPIController) {
		c.errorHandler = h
	}
}

// NewDashboardsAPIController creates a default api controller
func NewDashboardsAPIController(s DashboardsAPIServicer, opts ...DashboardsAPIOption) Router {
	controller := &DashboardsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DashboardsAPIController
func (c *DashboardsAPIController) Routes() Routes {
	return Routes{
		"AddGadget": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/dashboard/{dashboardId}/gadget",
			c.AddGadget,
		},
		"CopyDashboard": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/dashboard/{id}/copy",
			c.CopyDashboard,
		},
		"CreateDashboard": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/dashboard",
			c.CreateDashboard,
		},
		"DeleteDashboard": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/dashboard/{id}",
			c.DeleteDashboard,
		},
		"DeleteDashboardItemProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
			c.DeleteDashboardItemProperty,
		},
		"GetAllAvailableDashboardGadgets": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/gadgets",
			c.GetAllAvailableDashboardGadgets,
		},
		"GetAllDashboards": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard",
			c.GetAllDashboards,
		},
		"GetAllGadgets": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/{dashboardId}/gadget",
			c.GetAllGadgets,
		},
		"GetDashboard": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/{id}",
			c.GetDashboard,
		},
		"GetDashboardItemProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
			c.GetDashboardItemProperty,
		},
		"GetDashboardItemPropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties",
			c.GetDashboardItemPropertyKeys,
		},
		"GetDashboardsPaginated": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/dashboard/search",
			c.GetDashboardsPaginated,
		},
		"RemoveGadget": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
			c.RemoveGadget,
		},
		"SetDashboardItemProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/dashboard/{dashboardId}/items/{itemId}/properties/{propertyKey}",
			c.SetDashboardItemProperty,
		},
		"UpdateDashboard": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/dashboard/{id}",
			c.UpdateDashboard,
		},
		"UpdateGadget": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/dashboard/{dashboardId}/gadget/{gadgetId}",
			c.UpdateGadget,
		},
	}
}

// AddGadget - Add gadget to dashboard
func (c *DashboardsAPIController) AddGadget(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam, err := parseNumericParameter[int64](
		params["dashboardId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	dashboardGadgetSettingsParam := DashboardGadgetSettings{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dashboardGadgetSettingsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDashboardGadgetSettingsRequired(dashboardGadgetSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDashboardGadgetSettingsConstraints(dashboardGadgetSettingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddGadget(r.Context(), dashboardIdParam, dashboardGadgetSettingsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CopyDashboard - Copy dashboard
func (c *DashboardsAPIController) CopyDashboard(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	dashboardDetailsParam := DashboardDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDashboardDetailsRequired(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDashboardDetailsConstraints(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CopyDashboard(r.Context(), idParam, dashboardDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateDashboard - Create dashboard
func (c *DashboardsAPIController) CreateDashboard(w http.ResponseWriter, r *http.Request) {
	dashboardDetailsParam := DashboardDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDashboardDetailsRequired(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDashboardDetailsConstraints(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateDashboard(r.Context(), dashboardDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDashboard - Delete dashboard
func (c *DashboardsAPIController) DeleteDashboard(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteDashboard(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDashboardItemProperty - Delete dashboard item property
func (c *DashboardsAPIController) DeleteDashboardItemProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam := params["dashboardId"]
	if dashboardIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dashboardId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteDashboardItemProperty(r.Context(), dashboardIdParam, itemIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllAvailableDashboardGadgets - Get available gadgets
func (c *DashboardsAPIController) GetAllAvailableDashboardGadgets(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllAvailableDashboardGadgets(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllDashboards - Get all dashboards
func (c *DashboardsAPIController) GetAllDashboards(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	var startAtParam int32
	if query.Has("startAt") {
		param, err := parseNumericParameter[int32](
			query.Get("startAt"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int32 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 20
		maxResultsParam = param
	}
	result, err := c.service.GetAllDashboards(r.Context(), filterParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllGadgets - Get gadgets
func (c *DashboardsAPIController) GetAllGadgets(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	dashboardIdParam, err := parseNumericParameter[int64](
		params["dashboardId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var moduleKeyParam []string
	if query.Has("moduleKey") {
		moduleKeyParam = strings.Split(query.Get("moduleKey"), ",")
	}
	var uriParam []string
	if query.Has("uri") {
		uriParam = strings.Split(query.Get("uri"), ",")
	}
	gadgetIdParam, err := parseNumericArrayParameter[int64](
		query.Get("gadgetId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetAllGadgets(r.Context(), dashboardIdParam, moduleKeyParam, uriParam, gadgetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDashboard - Get dashboard
func (c *DashboardsAPIController) GetDashboard(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetDashboard(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDashboardItemProperty - Get dashboard item property
func (c *DashboardsAPIController) GetDashboardItemProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam := params["dashboardId"]
	if dashboardIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dashboardId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetDashboardItemProperty(r.Context(), dashboardIdParam, itemIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDashboardItemPropertyKeys - Get dashboard item property keys
func (c *DashboardsAPIController) GetDashboardItemPropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam := params["dashboardId"]
	if dashboardIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dashboardId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetDashboardItemPropertyKeys(r.Context(), dashboardIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDashboardsPaginated - Search for dashboards
func (c *DashboardsAPIController) GetDashboardsPaginated(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dashboardNameParam string
	if query.Has("dashboardName") {
		param := query.Get("dashboardName")

		dashboardNameParam = param
	} else {
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var ownerParam string
	if query.Has("owner") {
		param := query.Get("owner")

		ownerParam = param
	} else {
	}
	var groupnameParam string
	if query.Has("groupname") {
		param := query.Get("groupname")

		groupnameParam = param
	} else {
	}
	var groupIdParam string
	if query.Has("groupId") {
		param := query.Get("groupId")

		groupIdParam = param
	} else {
	}
	var projectIdParam int64
	if query.Has("projectId") {
		param, err := parseNumericParameter[int64](
			query.Get("projectId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		projectIdParam = param
	} else {
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
		param := name
		orderByParam = param
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var statusParam string
	if query.Has("status") {
		param := query.Get("status")

		statusParam = param
	} else {
		param := active
		statusParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetDashboardsPaginated(r.Context(), dashboardNameParam, accountIdParam, ownerParam, groupnameParam, groupIdParam, projectIdParam, orderByParam, startAtParam, maxResultsParam, statusParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveGadget - Remove gadget from dashboard
func (c *DashboardsAPIController) RemoveGadget(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam, err := parseNumericParameter[int64](
		params["dashboardId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	gadgetIdParam, err := parseNumericParameter[int64](
		params["gadgetId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RemoveGadget(r.Context(), dashboardIdParam, gadgetIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetDashboardItemProperty - Set dashboard item property
func (c *DashboardsAPIController) SetDashboardItemProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam := params["dashboardId"]
	if dashboardIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"dashboardId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetDashboardItemProperty(r.Context(), dashboardIdParam, itemIdParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDashboard - Update dashboard
func (c *DashboardsAPIController) UpdateDashboard(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	dashboardDetailsParam := DashboardDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDashboardDetailsRequired(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDashboardDetailsConstraints(dashboardDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDashboard(r.Context(), idParam, dashboardDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateGadget - Update gadget on dashboard
func (c *DashboardsAPIController) UpdateGadget(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	dashboardIdParam, err := parseNumericParameter[int64](
		params["dashboardId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	gadgetIdParam, err := parseNumericParameter[int64](
		params["gadgetId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	dashboardGadgetUpdateRequestParam := DashboardGadgetUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&dashboardGadgetUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDashboardGadgetUpdateRequestRequired(dashboardGadgetUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDashboardGadgetUpdateRequestConstraints(dashboardGadgetUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateGadget(r.Context(), dashboardIdParam, gadgetIdParam, dashboardGadgetUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
