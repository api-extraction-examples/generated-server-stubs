/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// ScreenSchemesAPIController binds http requests to an api service and writes the service results to the http response
type ScreenSchemesAPIController struct {
	service ScreenSchemesAPIServicer
	errorHandler ErrorHandler
}

// ScreenSchemesAPIOption for how the controller is set up.
type ScreenSchemesAPIOption func(*ScreenSchemesAPIController)

// WithScreenSchemesAPIErrorHandler inject ErrorHandler into controller
func WithScreenSchemesAPIErrorHandler(h ErrorHandler) ScreenSchemesAPIOption {
	return func(c *ScreenSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewScreenSchemesAPIController creates a default api controller
func NewScreenSchemesAPIController(s ScreenSchemesAPIServicer, opts ...ScreenSchemesAPIOption) Router {
	controller := &ScreenSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScreenSchemesAPIController
func (c *ScreenSchemesAPIController) Routes() Routes {
	return Routes{
		"CreateScreenScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/screenscheme",
			c.CreateScreenScheme,
		},
		"DeleteScreenScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/screenscheme/{screenSchemeId}",
			c.DeleteScreenScheme,
		},
		"GetScreenSchemes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/screenscheme",
			c.GetScreenSchemes,
		},
		"UpdateScreenScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/screenscheme/{screenSchemeId}",
			c.UpdateScreenScheme,
		},
	}
}

// CreateScreenScheme - Create screen scheme
func (c *ScreenSchemesAPIController) CreateScreenScheme(w http.ResponseWriter, r *http.Request) {
	screenSchemeDetailsParam := ScreenSchemeDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&screenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScreenSchemeDetailsRequired(screenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScreenSchemeDetailsConstraints(screenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateScreenScheme(r.Context(), screenSchemeDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteScreenScheme - Delete screen scheme
func (c *ScreenSchemesAPIController) DeleteScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenSchemeIdParam := params["screenSchemeId"]
	if screenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"screenSchemeId"}, nil)
		return
	}
	result, err := c.service.DeleteScreenScheme(r.Context(), screenSchemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetScreenSchemes - Get screen schemes
func (c *ScreenSchemesAPIController) GetScreenSchemes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 25
		maxResultsParam = param
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	var queryStringParam string
	if query.Has("queryString") {
		param := query.Get("queryString")

		queryStringParam = param
	} else {
		param := 
		queryStringParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
	}
	result, err := c.service.GetScreenSchemes(r.Context(), startAtParam, maxResultsParam, idParam, expandParam, queryStringParam, orderByParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateScreenScheme - Update screen scheme
func (c *ScreenSchemesAPIController) UpdateScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenSchemeIdParam := params["screenSchemeId"]
	if screenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"screenSchemeId"}, nil)
		return
	}
	updateScreenSchemeDetailsParam := UpdateScreenSchemeDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateScreenSchemeDetailsRequired(updateScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateScreenSchemeDetailsConstraints(updateScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateScreenScheme(r.Context(), screenSchemeIdParam, updateScreenSchemeDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
