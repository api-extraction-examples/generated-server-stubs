/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// Worklog - Details of a worklog.
type Worklog struct {

	Author WorklogAuthor `json:"author,omitempty"`

	// A comment about the worklog in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/). Optional when creating or updating a worklog.
	Comment *interface{} `json:"comment,omitempty"`

	// The datetime on which the worklog was created.
	Created time.Time `json:"created,omitempty"`

	// The ID of the worklog record.
	Id string `json:"id,omitempty"`

	// The ID of the issue this worklog is for.
	IssueId string `json:"issueId,omitempty"`

	// Details of properties for the worklog. Optional when creating or updating a worklog.
	Properties []EntityProperty `json:"properties,omitempty"`

	// The URL of the worklog item.
	Self string `json:"self,omitempty"`

	// The datetime on which the worklog effort was started. Required when creating a worklog. Optional when updating a worklog.
	Started time.Time `json:"started,omitempty"`

	// The time spent working on the issue as days (\\#d), hours (\\#h), or minutes (\\#m or \\#). Required when creating a worklog if `timeSpentSeconds` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpentSecond` is provided.
	TimeSpent string `json:"timeSpent,omitempty"`

	// The time in seconds spent working on the issue. Required when creating a worklog if `timeSpent` isn't provided. Optional when updating a worklog. Cannot be provided if `timeSpent` is provided.
	TimeSpentSeconds int64 `json:"timeSpentSeconds,omitempty"`

	UpdateAuthor WorklogUpdateAuthor `json:"updateAuthor,omitempty"`

	// The datetime on which the worklog was last updated.
	Updated time.Time `json:"updated,omitempty"`

	Visibility Visibility `json:"visibility,omitempty"`
}

// AssertWorklogRequired checks if the required fields are not zero-ed
func AssertWorklogRequired(obj Worklog) error {
	if err := AssertWorklogAuthorRequired(obj.Author); err != nil {
		return err
	}
	for _, el := range obj.Properties {
		if err := AssertEntityPropertyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertWorklogUpdateAuthorRequired(obj.UpdateAuthor); err != nil {
		return err
	}
	return nil
}

// AssertWorklogConstraints checks if the values respects the defined constraints
func AssertWorklogConstraints(obj Worklog) error {
	return nil
}
