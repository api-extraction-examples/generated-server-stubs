/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueLinkTypesAPIController binds http requests to an api service and writes the service results to the http response
type IssueLinkTypesAPIController struct {
	service IssueLinkTypesAPIServicer
	errorHandler ErrorHandler
}

// IssueLinkTypesAPIOption for how the controller is set up.
type IssueLinkTypesAPIOption func(*IssueLinkTypesAPIController)

// WithIssueLinkTypesAPIErrorHandler inject ErrorHandler into controller
func WithIssueLinkTypesAPIErrorHandler(h ErrorHandler) IssueLinkTypesAPIOption {
	return func(c *IssueLinkTypesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueLinkTypesAPIController creates a default api controller
func NewIssueLinkTypesAPIController(s IssueLinkTypesAPIServicer, opts ...IssueLinkTypesAPIOption) Router {
	controller := &IssueLinkTypesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueLinkTypesAPIController
func (c *IssueLinkTypesAPIController) Routes() Routes {
	return Routes{
		"CreateIssueLinkType": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issueLinkType",
			c.CreateIssueLinkType,
		},
		"DeleteIssueLinkType": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issueLinkType/{issueLinkTypeId}",
			c.DeleteIssueLinkType,
		},
		"GetIssueLinkType": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issueLinkType/{issueLinkTypeId}",
			c.GetIssueLinkType,
		},
		"GetIssueLinkTypes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issueLinkType",
			c.GetIssueLinkTypes,
		},
		"UpdateIssueLinkType": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issueLinkType/{issueLinkTypeId}",
			c.UpdateIssueLinkType,
		},
	}
}

// CreateIssueLinkType - Create issue link type
func (c *IssueLinkTypesAPIController) CreateIssueLinkType(w http.ResponseWriter, r *http.Request) {
	issueLinkTypeParam := IssueLinkType{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueLinkTypeRequired(issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueLinkTypeConstraints(issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssueLinkType(r.Context(), issueLinkTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueLinkType - Delete issue link type
func (c *IssueLinkTypesAPIController) DeleteIssueLinkType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueLinkTypeIdParam := params["issueLinkTypeId"]
	if issueLinkTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueLinkTypeId"}, nil)
		return
	}
	result, err := c.service.DeleteIssueLinkType(r.Context(), issueLinkTypeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueLinkType - Get issue link type
func (c *IssueLinkTypesAPIController) GetIssueLinkType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueLinkTypeIdParam := params["issueLinkTypeId"]
	if issueLinkTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueLinkTypeId"}, nil)
		return
	}
	result, err := c.service.GetIssueLinkType(r.Context(), issueLinkTypeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueLinkTypes - Get issue link types
func (c *IssueLinkTypesAPIController) GetIssueLinkTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetIssueLinkTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssueLinkType - Update issue link type
func (c *IssueLinkTypesAPIController) UpdateIssueLinkType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueLinkTypeIdParam := params["issueLinkTypeId"]
	if issueLinkTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueLinkTypeId"}, nil)
		return
	}
	issueLinkTypeParam := IssueLinkType{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueLinkTypeRequired(issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueLinkTypeConstraints(issueLinkTypeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssueLinkType(r.Context(), issueLinkTypeIdParam, issueLinkTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
