/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectPropertiesAPIController struct {
	service ProjectPropertiesAPIServicer
	errorHandler ErrorHandler
}

// ProjectPropertiesAPIOption for how the controller is set up.
type ProjectPropertiesAPIOption func(*ProjectPropertiesAPIController)

// WithProjectPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithProjectPropertiesAPIErrorHandler(h ErrorHandler) ProjectPropertiesAPIOption {
	return func(c *ProjectPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectPropertiesAPIController creates a default api controller
func NewProjectPropertiesAPIController(s ProjectPropertiesAPIServicer, opts ...ProjectPropertiesAPIOption) Router {
	controller := &ProjectPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectPropertiesAPIController
func (c *ProjectPropertiesAPIController) Routes() Routes {
	return Routes{
		"DeleteProjectProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
			c.DeleteProjectProperty,
		},
		"GetProjectProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
			c.GetProjectProperty,
		},
		"GetProjectPropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/properties",
			c.GetProjectPropertyKeys,
		},
		"SetProjectProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}/properties/{propertyKey}",
			c.SetProjectProperty,
		},
	}
}

// DeleteProjectProperty - Delete project property
func (c *ProjectPropertiesAPIController) DeleteProjectProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteProjectProperty(r.Context(), projectIdOrKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectProperty - Get project property
func (c *ProjectPropertiesAPIController) GetProjectProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetProjectProperty(r.Context(), projectIdOrKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectPropertyKeys - Get project property keys
func (c *ProjectPropertiesAPIController) GetProjectPropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetProjectPropertyKeys(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetProjectProperty - Set project property
func (c *ProjectPropertiesAPIController) SetProjectProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetProjectProperty(r.Context(), projectIdOrKeyParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
