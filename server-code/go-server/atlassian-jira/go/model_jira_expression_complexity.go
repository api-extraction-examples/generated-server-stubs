/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// JiraExpressionComplexity - Details about the complexity of the analysed Jira expression.
type JiraExpressionComplexity struct {

	// Information that can be used to determine how many [expensive operations](https://developer.atlassian.com/cloud/jira/platform/jira-expressions/#expensive-operations) the evaluation of the expression will perform. This information may be a formula or number. For example:   *  `issues.map(i => i.comments)` performs as many expensive operations as there are issues on the issues list. So this parameter returns `N`, where `N` is the size of issue list.  *  `new Issue(10010).comments` gets comments for one issue, so its complexity is `2` (`1` to retrieve issue 10010 from the database plus `1` to get its comments).
	ExpensiveOperations string `json:"expensiveOperations"`

	// Variables used in the formula, mapped to the parts of the expression they refer to.
	Variables map[string]string `json:"variables,omitempty"`
}

// AssertJiraExpressionComplexityRequired checks if the required fields are not zero-ed
func AssertJiraExpressionComplexityRequired(obj JiraExpressionComplexity) error {
	elements := map[string]interface{}{
		"expensiveOperations": obj.ExpensiveOperations,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertJiraExpressionComplexityConstraints checks if the values respects the defined constraints
func AssertJiraExpressionComplexityConstraints(obj JiraExpressionComplexity) error {
	return nil
}
