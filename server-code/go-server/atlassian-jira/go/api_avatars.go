/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AvatarsAPIController binds http requests to an api service and writes the service results to the http response
type AvatarsAPIController struct {
	service AvatarsAPIServicer
	errorHandler ErrorHandler
}

// AvatarsAPIOption for how the controller is set up.
type AvatarsAPIOption func(*AvatarsAPIController)

// WithAvatarsAPIErrorHandler inject ErrorHandler into controller
func WithAvatarsAPIErrorHandler(h ErrorHandler) AvatarsAPIOption {
	return func(c *AvatarsAPIController) {
		c.errorHandler = h
	}
}

// NewAvatarsAPIController creates a default api controller
func NewAvatarsAPIController(s AvatarsAPIServicer, opts ...AvatarsAPIOption) Router {
	controller := &AvatarsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AvatarsAPIController
func (c *AvatarsAPIController) Routes() Routes {
	return Routes{
		"DeleteAvatar": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/universal_avatar/type/{type}/owner/{owningObjectId}/avatar/{id}",
			c.DeleteAvatar,
		},
		"GetAllSystemAvatars": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/avatar/{type}/system",
			c.GetAllSystemAvatars,
		},
		"GetAvatarImageByID": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/universal_avatar/view/type/{type}/avatar/{id}",
			c.GetAvatarImageByID,
		},
		"GetAvatarImageByOwner": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/universal_avatar/view/type/{type}/owner/{entityId}",
			c.GetAvatarImageByOwner,
		},
		"GetAvatarImageByType": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/universal_avatar/view/type/{type}",
			c.GetAvatarImageByType,
		},
		"GetAvatars": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
			c.GetAvatars,
		},
		"StoreAvatar": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/universal_avatar/type/{type}/owner/{entityId}",
			c.StoreAvatar,
		},
	}
}

// DeleteAvatar - Delete avatar
func (c *AvatarsAPIController) DeleteAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	owningObjectIdParam := params["owningObjectId"]
	if owningObjectIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"owningObjectId"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteAvatar(r.Context(), type_Param, owningObjectIdParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllSystemAvatars - Get system avatars by type
func (c *AvatarsAPIController) GetAllSystemAvatars(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	result, err := c.service.GetAllSystemAvatars(r.Context(), type_Param)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAvatarImageByID - Get avatar image by ID
func (c *AvatarsAPIController) GetAvatarImageByID(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var sizeParam string
	if query.Has("size") {
		param := query.Get("size")

		sizeParam = param
	} else {
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
	}
	result, err := c.service.GetAvatarImageByID(r.Context(), type_Param, idParam, sizeParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAvatarImageByOwner - Get avatar image by owner
func (c *AvatarsAPIController) GetAvatarImageByOwner(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	entityIdParam := params["entityId"]
	if entityIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"entityId"}, nil)
		return
	}
	var sizeParam string
	if query.Has("size") {
		param := query.Get("size")

		sizeParam = param
	} else {
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
	}
	result, err := c.service.GetAvatarImageByOwner(r.Context(), type_Param, entityIdParam, sizeParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAvatarImageByType - Get avatar image by type
func (c *AvatarsAPIController) GetAvatarImageByType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	var sizeParam string
	if query.Has("size") {
		param := query.Get("size")

		sizeParam = param
	} else {
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
	}
	result, err := c.service.GetAvatarImageByType(r.Context(), type_Param, sizeParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAvatars - Get avatars
func (c *AvatarsAPIController) GetAvatars(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	entityIdParam := params["entityId"]
	if entityIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"entityId"}, nil)
		return
	}
	result, err := c.service.GetAvatars(r.Context(), type_Param, entityIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StoreAvatar - Load avatar
func (c *AvatarsAPIController) StoreAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	type_Param := params["type"]
	if type_Param == "" {
		c.errorHandler(w, r, &RequiredError{"type"}, nil)
		return
	}
	entityIdParam := params["entityId"]
	if entityIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"entityId"}, nil)
		return
	}
	var sizeParam int32
	if query.Has("size") {
		param, err := parseNumericParameter[int32](
			query.Get("size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sizeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "size"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var xParam int32
	if query.Has("x") {
		param, err := parseNumericParameter[int32](
			query.Get("x"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		xParam = param
	} else {
		var param int32 = 0
		xParam = param
	}
	var yParam int32
	if query.Has("y") {
		param, err := parseNumericParameter[int32](
			query.Get("y"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yParam = param
	} else {
		var param int32 = 0
		yParam = param
	}
	result, err := c.service.StoreAvatar(r.Context(), type_Param, entityIdParam, sizeParam, bodyParam, xParam, yParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
