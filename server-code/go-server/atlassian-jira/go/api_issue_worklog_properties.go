/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueWorklogPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type IssueWorklogPropertiesAPIController struct {
	service IssueWorklogPropertiesAPIServicer
	errorHandler ErrorHandler
}

// IssueWorklogPropertiesAPIOption for how the controller is set up.
type IssueWorklogPropertiesAPIOption func(*IssueWorklogPropertiesAPIController)

// WithIssueWorklogPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithIssueWorklogPropertiesAPIErrorHandler(h ErrorHandler) IssueWorklogPropertiesAPIOption {
	return func(c *IssueWorklogPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueWorklogPropertiesAPIController creates a default api controller
func NewIssueWorklogPropertiesAPIController(s IssueWorklogPropertiesAPIServicer, opts ...IssueWorklogPropertiesAPIOption) Router {
	controller := &IssueWorklogPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueWorklogPropertiesAPIController
func (c *IssueWorklogPropertiesAPIController) Routes() Routes {
	return Routes{
		"DeleteWorklogProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
			c.DeleteWorklogProperty,
		},
		"GetWorklogProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
			c.GetWorklogProperty,
		},
		"GetWorklogPropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties",
			c.GetWorklogPropertyKeys,
		},
		"SetWorklogProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{worklogId}/properties/{propertyKey}",
			c.SetWorklogProperty,
		},
	}
}

// DeleteWorklogProperty - Delete worklog property
func (c *IssueWorklogPropertiesAPIController) DeleteWorklogProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	worklogIdParam := params["worklogId"]
	if worklogIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"worklogId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteWorklogProperty(r.Context(), issueIdOrKeyParam, worklogIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorklogProperty - Get worklog property
func (c *IssueWorklogPropertiesAPIController) GetWorklogProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	worklogIdParam := params["worklogId"]
	if worklogIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"worklogId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetWorklogProperty(r.Context(), issueIdOrKeyParam, worklogIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorklogPropertyKeys - Get worklog property keys
func (c *IssueWorklogPropertiesAPIController) GetWorklogPropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	worklogIdParam := params["worklogId"]
	if worklogIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"worklogId"}, nil)
		return
	}
	result, err := c.service.GetWorklogPropertyKeys(r.Context(), issueIdOrKeyParam, worklogIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetWorklogProperty - Set worklog property
func (c *IssueWorklogPropertiesAPIController) SetWorklogProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	worklogIdParam := params["worklogId"]
	if worklogIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"worklogId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetWorklogProperty(r.Context(), issueIdOrKeyParam, worklogIdParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
