/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// Comment - A comment.
type Comment struct {

	Author CommentAuthor `json:"author,omitempty"`

	// The comment text in [Atlassian Document Format](https://developer.atlassian.com/cloud/jira/platform/apis/document/structure/).
	Body *interface{} `json:"body,omitempty"`

	// The date and time at which the comment was created.
	Created time.Time `json:"created,omitempty"`

	// The ID of the comment.
	Id string `json:"id,omitempty"`

	// Whether the comment was added from an email sent by a person who is not part of the issue. See [Allow external emails to be added as comments on issues](https://support.atlassian.com/jira-service-management-cloud/docs/allow-external-emails-to-be-added-as-comments-on-issues/)for information on setting up this feature.
	JsdAuthorCanSeeRequest bool `json:"jsdAuthorCanSeeRequest,omitempty"`

	// Whether the comment is visible in Jira Service Desk. Defaults to true when comments are created in the Jira Cloud Platform. This includes when the site doesn't use Jira Service Desk or the project isn't a Jira Service Desk project and, therefore, there is no Jira Service Desk for the issue to be visible on. To create a comment with its visibility in Jira Service Desk set to false, use the Jira Service Desk REST API [Create request comment](https://developer.atlassian.com/cloud/jira/service-desk/rest/#api-rest-servicedeskapi-request-issueIdOrKey-comment-post) operation.
	JsdPublic bool `json:"jsdPublic,omitempty"`

	// A list of comment properties. Optional on create and update.
	Properties []EntityProperty `json:"properties,omitempty"`

	// The rendered version of the comment.
	RenderedBody string `json:"renderedBody,omitempty"`

	// The URL of the comment.
	Self string `json:"self,omitempty"`

	UpdateAuthor CommentUpdateAuthor `json:"updateAuthor,omitempty"`

	// The date and time at which the comment was updated last.
	Updated time.Time `json:"updated,omitempty"`

	Visibility Visibility `json:"visibility,omitempty"`
}

// AssertCommentRequired checks if the required fields are not zero-ed
func AssertCommentRequired(obj Comment) error {
	if err := AssertCommentAuthorRequired(obj.Author); err != nil {
		return err
	}
	for _, el := range obj.Properties {
		if err := AssertEntityPropertyRequired(el); err != nil {
			return err
		}
	}
	if err := AssertCommentUpdateAuthorRequired(obj.UpdateAuthor); err != nil {
		return err
	}
	return nil
}

// AssertCommentConstraints checks if the values respects the defined constraints
func AssertCommentConstraints(obj Comment) error {
	return nil
}
