/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueCustomFieldContextsAPIController binds http requests to an api service and writes the service results to the http response
type IssueCustomFieldContextsAPIController struct {
	service IssueCustomFieldContextsAPIServicer
	errorHandler ErrorHandler
}

// IssueCustomFieldContextsAPIOption for how the controller is set up.
type IssueCustomFieldContextsAPIOption func(*IssueCustomFieldContextsAPIController)

// WithIssueCustomFieldContextsAPIErrorHandler inject ErrorHandler into controller
func WithIssueCustomFieldContextsAPIErrorHandler(h ErrorHandler) IssueCustomFieldContextsAPIOption {
	return func(c *IssueCustomFieldContextsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCustomFieldContextsAPIController creates a default api controller
func NewIssueCustomFieldContextsAPIController(s IssueCustomFieldContextsAPIServicer, opts ...IssueCustomFieldContextsAPIOption) Router {
	controller := &IssueCustomFieldContextsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCustomFieldContextsAPIController
func (c *IssueCustomFieldContextsAPIController) Routes() Routes {
	return Routes{
		"AddIssueTypesToContext": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/issuetype",
			c.AddIssueTypesToContext,
		},
		"AssignProjectsToCustomFieldContext": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/project",
			c.AssignProjectsToCustomFieldContext,
		},
		"CreateCustomFieldContext": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldId}/context",
			c.CreateCustomFieldContext,
		},
		"DeleteCustomFieldContext": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/field/{fieldId}/context/{contextId}",
			c.DeleteCustomFieldContext,
		},
		"GetContextsForField": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldId}/context",
			c.GetContextsForField,
		},
		"GetCustomFieldContextsForProjectsAndIssueTypes": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldId}/context/mapping",
			c.GetCustomFieldContextsForProjectsAndIssueTypes,
		},
		"GetDefaultValues": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldId}/context/defaultValue",
			c.GetDefaultValues,
		},
		"GetIssueTypeMappingsForContexts": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldId}/context/issuetypemapping",
			c.GetIssueTypeMappingsForContexts,
		},
		"GetProjectContextMapping": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldId}/context/projectmapping",
			c.GetProjectContextMapping,
		},
		"RemoveCustomFieldContextFromProjects": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/project/remove",
			c.RemoveCustomFieldContextFromProjects,
		},
		"RemoveIssueTypesFromContext": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/issuetype/remove",
			c.RemoveIssueTypesFromContext,
		},
		"SetDefaultValues": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/defaultValue",
			c.SetDefaultValues,
		},
		"UpdateCustomFieldContext": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/{contextId}",
			c.UpdateCustomFieldContext,
		},
	}
}

// AddIssueTypesToContext - Add issue types to context
func (c *IssueCustomFieldContextsAPIController) AddIssueTypesToContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeIdsParam := IssueTypeIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeIdsRequired(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeIdsConstraints(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddIssueTypesToContext(r.Context(), fieldIdParam, contextIdParam, issueTypeIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssignProjectsToCustomFieldContext - Assign custom field context to projects
func (c *IssueCustomFieldContextsAPIController) AssignProjectsToCustomFieldContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdsParam := ProjectIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectIdsRequired(projectIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectIdsConstraints(projectIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssignProjectsToCustomFieldContext(r.Context(), fieldIdParam, contextIdParam, projectIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateCustomFieldContext - Create custom field context
func (c *IssueCustomFieldContextsAPIController) CreateCustomFieldContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	createCustomFieldContextParam := CreateCustomFieldContext{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createCustomFieldContextParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateCustomFieldContextRequired(createCustomFieldContextParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateCustomFieldContextConstraints(createCustomFieldContextParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCustomFieldContext(r.Context(), fieldIdParam, createCustomFieldContextParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCustomFieldContext - Delete custom field context
func (c *IssueCustomFieldContextsAPIController) DeleteCustomFieldContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteCustomFieldContext(r.Context(), fieldIdParam, contextIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetContextsForField - Get custom field contexts
func (c *IssueCustomFieldContextsAPIController) GetContextsForField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	var isAnyIssueTypeParam bool
	if query.Has("isAnyIssueType") {
		param, err := parseBoolParameter(
			query.Get("isAnyIssueType"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isAnyIssueTypeParam = param
	} else {
	}
	var isGlobalContextParam bool
	if query.Has("isGlobalContext") {
		param, err := parseBoolParameter(
			query.Get("isGlobalContext"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isGlobalContextParam = param
	} else {
	}
	contextIdParam, err := parseNumericArrayParameter[int64](
		query.Get("contextId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetContextsForField(r.Context(), fieldIdParam, isAnyIssueTypeParam, isGlobalContextParam, contextIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomFieldContextsForProjectsAndIssueTypes - Get custom field contexts for projects and issue types
func (c *IssueCustomFieldContextsAPIController) GetCustomFieldContextsForProjectsAndIssueTypes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	projectIssueTypeMappingsParam := ProjectIssueTypeMappings{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectIssueTypeMappingsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectIssueTypeMappingsRequired(projectIssueTypeMappingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectIssueTypeMappingsConstraints(projectIssueTypeMappingsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetCustomFieldContextsForProjectsAndIssueTypes(r.Context(), fieldIdParam, projectIssueTypeMappingsParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultValues - Get custom field contexts default values
func (c *IssueCustomFieldContextsAPIController) GetDefaultValues(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericArrayParameter[int64](
		query.Get("contextId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetDefaultValues(r.Context(), fieldIdParam, contextIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeMappingsForContexts - Get issue types for custom field context
func (c *IssueCustomFieldContextsAPIController) GetIssueTypeMappingsForContexts(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericArrayParameter[int64](
		query.Get("contextId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetIssueTypeMappingsForContexts(r.Context(), fieldIdParam, contextIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectContextMapping - Get project mappings for custom field context
func (c *IssueCustomFieldContextsAPIController) GetProjectContextMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericArrayParameter[int64](
		query.Get("contextId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetProjectContextMapping(r.Context(), fieldIdParam, contextIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveCustomFieldContextFromProjects - Remove custom field context from projects
func (c *IssueCustomFieldContextsAPIController) RemoveCustomFieldContextFromProjects(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectIdsParam := ProjectIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectIdsRequired(projectIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectIdsConstraints(projectIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RemoveCustomFieldContextFromProjects(r.Context(), fieldIdParam, contextIdParam, projectIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveIssueTypesFromContext - Remove issue types from context
func (c *IssueCustomFieldContextsAPIController) RemoveIssueTypesFromContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeIdsParam := IssueTypeIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeIdsRequired(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeIdsConstraints(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RemoveIssueTypesFromContext(r.Context(), fieldIdParam, contextIdParam, issueTypeIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetDefaultValues - Set custom field contexts default values
func (c *IssueCustomFieldContextsAPIController) SetDefaultValues(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	customFieldContextDefaultValueUpdateParam := CustomFieldContextDefaultValueUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customFieldContextDefaultValueUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomFieldContextDefaultValueUpdateRequired(customFieldContextDefaultValueUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomFieldContextDefaultValueUpdateConstraints(customFieldContextDefaultValueUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetDefaultValues(r.Context(), fieldIdParam, customFieldContextDefaultValueUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomFieldContext - Update custom field context
func (c *IssueCustomFieldContextsAPIController) UpdateCustomFieldContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	customFieldContextUpdateDetailsParam := CustomFieldContextUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customFieldContextUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomFieldContextUpdateDetailsRequired(customFieldContextUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomFieldContextUpdateDetailsConstraints(customFieldContextUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomFieldContext(r.Context(), fieldIdParam, contextIdParam, customFieldContextUpdateDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
