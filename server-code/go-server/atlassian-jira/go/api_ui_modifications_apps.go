/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UIModificationsAppsAPIController binds http requests to an api service and writes the service results to the http response
type UIModificationsAppsAPIController struct {
	service UIModificationsAppsAPIServicer
	errorHandler ErrorHandler
}

// UIModificationsAppsAPIOption for how the controller is set up.
type UIModificationsAppsAPIOption func(*UIModificationsAppsAPIController)

// WithUIModificationsAppsAPIErrorHandler inject ErrorHandler into controller
func WithUIModificationsAppsAPIErrorHandler(h ErrorHandler) UIModificationsAppsAPIOption {
	return func(c *UIModificationsAppsAPIController) {
		c.errorHandler = h
	}
}

// NewUIModificationsAppsAPIController creates a default api controller
func NewUIModificationsAppsAPIController(s UIModificationsAppsAPIServicer, opts ...UIModificationsAppsAPIOption) Router {
	controller := &UIModificationsAppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UIModificationsAppsAPIController
func (c *UIModificationsAppsAPIController) Routes() Routes {
	return Routes{
		"CreateUiModification": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/uiModifications",
			c.CreateUiModification,
		},
		"DeleteUiModification": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/uiModifications/{uiModificationId}",
			c.DeleteUiModification,
		},
		"GetUiModifications": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/uiModifications",
			c.GetUiModifications,
		},
		"UpdateUiModification": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/uiModifications/{uiModificationId}",
			c.UpdateUiModification,
		},
	}
}

// CreateUiModification - Create UI modification
func (c *UIModificationsAppsAPIController) CreateUiModification(w http.ResponseWriter, r *http.Request) {
	createUiModificationDetailsParam := CreateUiModificationDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUiModificationDetailsRequired(createUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUiModificationDetailsConstraints(createUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUiModification(r.Context(), createUiModificationDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUiModification - Delete UI modification
func (c *UIModificationsAppsAPIController) DeleteUiModification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uiModificationIdParam := params["uiModificationId"]
	if uiModificationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"uiModificationId"}, nil)
		return
	}
	result, err := c.service.DeleteUiModification(r.Context(), uiModificationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUiModifications - Get UI modifications
func (c *UIModificationsAppsAPIController) GetUiModifications(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetUiModifications(r.Context(), startAtParam, maxResultsParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUiModification - Update UI modification
func (c *UIModificationsAppsAPIController) UpdateUiModification(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	uiModificationIdParam := params["uiModificationId"]
	if uiModificationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"uiModificationId"}, nil)
		return
	}
	updateUiModificationDetailsParam := UpdateUiModificationDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUiModificationDetailsRequired(updateUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateUiModificationDetailsConstraints(updateUiModificationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUiModification(r.Context(), uiModificationIdParam, updateUiModificationDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
