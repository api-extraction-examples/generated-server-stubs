/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectCategoriesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectCategoriesAPIController struct {
	service ProjectCategoriesAPIServicer
	errorHandler ErrorHandler
}

// ProjectCategoriesAPIOption for how the controller is set up.
type ProjectCategoriesAPIOption func(*ProjectCategoriesAPIController)

// WithProjectCategoriesAPIErrorHandler inject ErrorHandler into controller
func WithProjectCategoriesAPIErrorHandler(h ErrorHandler) ProjectCategoriesAPIOption {
	return func(c *ProjectCategoriesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectCategoriesAPIController creates a default api controller
func NewProjectCategoriesAPIController(s ProjectCategoriesAPIServicer, opts ...ProjectCategoriesAPIOption) Router {
	controller := &ProjectCategoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectCategoriesAPIController
func (c *ProjectCategoriesAPIController) Routes() Routes {
	return Routes{
		"CreateProjectCategory": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/projectCategory",
			c.CreateProjectCategory,
		},
		"GetAllProjectCategories": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/projectCategory",
			c.GetAllProjectCategories,
		},
		"GetProjectCategoryById": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/projectCategory/{id}",
			c.GetProjectCategoryById,
		},
		"RemoveProjectCategory": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/projectCategory/{id}",
			c.RemoveProjectCategory,
		},
		"UpdateProjectCategory": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/projectCategory/{id}",
			c.UpdateProjectCategory,
		},
	}
}

// CreateProjectCategory - Create project category
func (c *ProjectCategoriesAPIController) CreateProjectCategory(w http.ResponseWriter, r *http.Request) {
	projectCategoryParam := ProjectCategory{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectCategoryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectCategoryRequired(projectCategoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectCategoryConstraints(projectCategoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectCategory(r.Context(), projectCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjectCategories - Get all project categories
func (c *ProjectCategoriesAPIController) GetAllProjectCategories(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllProjectCategories(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectCategoryById - Get project category by ID
func (c *ProjectCategoriesAPIController) GetProjectCategoryById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetProjectCategoryById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveProjectCategory - Delete project category
func (c *ProjectCategoriesAPIController) RemoveProjectCategory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RemoveProjectCategory(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProjectCategory - Update project category
func (c *ProjectCategoriesAPIController) UpdateProjectCategory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectCategoryParam := ProjectCategory{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectCategoryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectCategoryRequired(projectCategoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectCategoryConstraints(projectCategoryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProjectCategory(r.Context(), idParam, projectCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
