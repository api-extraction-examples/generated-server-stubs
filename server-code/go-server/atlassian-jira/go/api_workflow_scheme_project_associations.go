/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// WorkflowSchemeProjectAssociationsAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowSchemeProjectAssociationsAPIController struct {
	service WorkflowSchemeProjectAssociationsAPIServicer
	errorHandler ErrorHandler
}

// WorkflowSchemeProjectAssociationsAPIOption for how the controller is set up.
type WorkflowSchemeProjectAssociationsAPIOption func(*WorkflowSchemeProjectAssociationsAPIController)

// WithWorkflowSchemeProjectAssociationsAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowSchemeProjectAssociationsAPIErrorHandler(h ErrorHandler) WorkflowSchemeProjectAssociationsAPIOption {
	return func(c *WorkflowSchemeProjectAssociationsAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowSchemeProjectAssociationsAPIController creates a default api controller
func NewWorkflowSchemeProjectAssociationsAPIController(s WorkflowSchemeProjectAssociationsAPIServicer, opts ...WorkflowSchemeProjectAssociationsAPIOption) Router {
	controller := &WorkflowSchemeProjectAssociationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowSchemeProjectAssociationsAPIController
func (c *WorkflowSchemeProjectAssociationsAPIController) Routes() Routes {
	return Routes{
		"AssignSchemeToProject": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/project",
			c.AssignSchemeToProject,
		},
		"GetWorkflowSchemeProjectAssociations": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/project",
			c.GetWorkflowSchemeProjectAssociations,
		},
	}
}

// AssignSchemeToProject - Assign workflow scheme to project
func (c *WorkflowSchemeProjectAssociationsAPIController) AssignSchemeToProject(w http.ResponseWriter, r *http.Request) {
	workflowSchemeProjectAssociationParam := WorkflowSchemeProjectAssociation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowSchemeProjectAssociationRequired(workflowSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowSchemeProjectAssociationConstraints(workflowSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssignSchemeToProject(r.Context(), workflowSchemeProjectAssociationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowSchemeProjectAssociations - Get workflow scheme project associations
func (c *WorkflowSchemeProjectAssociationsAPIController) GetWorkflowSchemeProjectAssociations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	projectIdParam, err := parseNumericArrayParameter[int64](
		query.Get("projectId"), ",", true,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetWorkflowSchemeProjectAssociations(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
