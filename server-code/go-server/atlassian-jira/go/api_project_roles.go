/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectRolesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectRolesAPIController struct {
	service ProjectRolesAPIServicer
	errorHandler ErrorHandler
}

// ProjectRolesAPIOption for how the controller is set up.
type ProjectRolesAPIOption func(*ProjectRolesAPIController)

// WithProjectRolesAPIErrorHandler inject ErrorHandler into controller
func WithProjectRolesAPIErrorHandler(h ErrorHandler) ProjectRolesAPIOption {
	return func(c *ProjectRolesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectRolesAPIController creates a default api controller
func NewProjectRolesAPIController(s ProjectRolesAPIServicer, opts ...ProjectRolesAPIOption) Router {
	controller := &ProjectRolesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectRolesAPIController
func (c *ProjectRolesAPIController) Routes() Routes {
	return Routes{
		"CreateProjectRole": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/role",
			c.CreateProjectRole,
		},
		"DeleteProjectRole": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/role/{id}",
			c.DeleteProjectRole,
		},
		"FullyUpdateProjectRole": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/role/{id}",
			c.FullyUpdateProjectRole,
		},
		"GetAllProjectRoles": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/role",
			c.GetAllProjectRoles,
		},
		"GetProjectRole": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/role/{id}",
			c.GetProjectRole,
		},
		"GetProjectRoleById": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/role/{id}",
			c.GetProjectRoleById,
		},
		"GetProjectRoleDetails": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/roledetails",
			c.GetProjectRoleDetails,
		},
		"GetProjectRoles": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/role",
			c.GetProjectRoles,
		},
		"PartialUpdateProjectRole": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/role/{id}",
			c.PartialUpdateProjectRole,
		},
	}
}

// CreateProjectRole - Create project role
func (c *ProjectRolesAPIController) CreateProjectRole(w http.ResponseWriter, r *http.Request) {
	createUpdateRoleRequestBeanParam := CreateUpdateRoleRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanRequired(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanConstraints(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProjectRole(r.Context(), createUpdateRoleRequestBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProjectRole - Delete project role
func (c *ProjectRolesAPIController) DeleteProjectRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var swapParam int64
	if query.Has("swap") {
		param, err := parseNumericParameter[int64](
			query.Get("swap"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		swapParam = param
	} else {
	}
	result, err := c.service.DeleteProjectRole(r.Context(), idParam, swapParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FullyUpdateProjectRole - Fully update project role
func (c *ProjectRolesAPIController) FullyUpdateProjectRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	createUpdateRoleRequestBeanParam := CreateUpdateRoleRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanRequired(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanConstraints(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.FullyUpdateProjectRole(r.Context(), idParam, createUpdateRoleRequestBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjectRoles - Get all project roles
func (c *ProjectRolesAPIController) GetAllProjectRoles(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllProjectRoles(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectRole - Get project role for project
func (c *ProjectRolesAPIController) GetProjectRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var excludeInactiveUsersParam bool
	if query.Has("excludeInactiveUsers") {
		param, err := parseBoolParameter(
			query.Get("excludeInactiveUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeInactiveUsersParam = param
	} else {
		var param bool = false
		excludeInactiveUsersParam = param
	}
	result, err := c.service.GetProjectRole(r.Context(), projectIdOrKeyParam, idParam, excludeInactiveUsersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectRoleById - Get project role by ID
func (c *ProjectRolesAPIController) GetProjectRoleById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetProjectRoleById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectRoleDetails - Get project role details
func (c *ProjectRolesAPIController) GetProjectRoleDetails(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	var currentMemberParam bool
	if query.Has("currentMember") {
		param, err := parseBoolParameter(
			query.Get("currentMember"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		currentMemberParam = param
	} else {
		var param bool = false
		currentMemberParam = param
	}
	var excludeConnectAddonsParam bool
	if query.Has("excludeConnectAddons") {
		param, err := parseBoolParameter(
			query.Get("excludeConnectAddons"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeConnectAddonsParam = param
	} else {
		var param bool = false
		excludeConnectAddonsParam = param
	}
	result, err := c.service.GetProjectRoleDetails(r.Context(), projectIdOrKeyParam, currentMemberParam, excludeConnectAddonsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectRoles - Get project roles for project
func (c *ProjectRolesAPIController) GetProjectRoles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetProjectRoles(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PartialUpdateProjectRole - Partial update project role
func (c *ProjectRolesAPIController) PartialUpdateProjectRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	createUpdateRoleRequestBeanParam := CreateUpdateRoleRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanRequired(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUpdateRoleRequestBeanConstraints(createUpdateRoleRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PartialUpdateProjectRole(r.Context(), idParam, createUpdateRoleRequestBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
