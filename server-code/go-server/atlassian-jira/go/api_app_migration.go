/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppMigrationAPIController binds http requests to an api service and writes the service results to the http response
type AppMigrationAPIController struct {
	service AppMigrationAPIServicer
	errorHandler ErrorHandler
}

// AppMigrationAPIOption for how the controller is set up.
type AppMigrationAPIOption func(*AppMigrationAPIController)

// WithAppMigrationAPIErrorHandler inject ErrorHandler into controller
func WithAppMigrationAPIErrorHandler(h ErrorHandler) AppMigrationAPIOption {
	return func(c *AppMigrationAPIController) {
		c.errorHandler = h
	}
}

// NewAppMigrationAPIController creates a default api controller
func NewAppMigrationAPIController(s AppMigrationAPIServicer, opts ...AppMigrationAPIOption) Router {
	controller := &AppMigrationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppMigrationAPIController
func (c *AppMigrationAPIController) Routes() Routes {
	return Routes{
		"AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut": Route{
			strings.ToUpper("Put"),
			"/rest/atlassian-connect/1/migration/field",
			c.AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut,
		},
		"MigrationResourceUpdateEntityPropertiesValuePut": Route{
			strings.ToUpper("Put"),
			"/rest/atlassian-connect/1/migration/properties/{entityType}",
			c.MigrationResourceUpdateEntityPropertiesValuePut,
		},
		"MigrationResourceWorkflowRuleSearchPost": Route{
			strings.ToUpper("Post"),
			"/rest/atlassian-connect/1/migration/workflow/rule/search",
			c.MigrationResourceWorkflowRuleSearchPost,
		},
	}
}

// AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut - Bulk update custom field value
func (c *AppMigrationAPIController) AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut(w http.ResponseWriter, r *http.Request) {
	atlassianTransferIdParam := r.Header.Get("Atlassian-Transfer-Id")
	connectCustomFieldValuesParam := ConnectCustomFieldValues{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectCustomFieldValuesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectCustomFieldValuesRequired(connectCustomFieldValuesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConnectCustomFieldValuesConstraints(connectCustomFieldValuesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppIssueFieldValueUpdateResourceUpdateIssueFieldsPut(r.Context(), atlassianTransferIdParam, connectCustomFieldValuesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MigrationResourceUpdateEntityPropertiesValuePut - Bulk update entity properties
func (c *AppMigrationAPIController) MigrationResourceUpdateEntityPropertiesValuePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	atlassianTransferIdParam := r.Header.Get("Atlassian-Transfer-Id")
	entityTypeParam := params["entityType"]
	if entityTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"entityType"}, nil)
		return
	}
	entityPropertyDetailsParam := []EntityPropertyDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&entityPropertyDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range entityPropertyDetailsParam {
		if err := AssertEntityPropertyDetailsRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.MigrationResourceUpdateEntityPropertiesValuePut(r.Context(), atlassianTransferIdParam, entityTypeParam, entityPropertyDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MigrationResourceWorkflowRuleSearchPost - Get workflow transition rule configurations
func (c *AppMigrationAPIController) MigrationResourceWorkflowRuleSearchPost(w http.ResponseWriter, r *http.Request) {
	atlassianTransferIdParam := r.Header.Get("Atlassian-Transfer-Id")
	workflowRulesSearchParam := WorkflowRulesSearch{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowRulesSearchParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowRulesSearchRequired(workflowRulesSearchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowRulesSearchConstraints(workflowRulesSearchParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MigrationResourceWorkflowRuleSearchPost(r.Context(), atlassianTransferIdParam, workflowRulesSearchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
