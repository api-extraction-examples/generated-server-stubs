/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TasksAPIController binds http requests to an api service and writes the service results to the http response
type TasksAPIController struct {
	service TasksAPIServicer
	errorHandler ErrorHandler
}

// TasksAPIOption for how the controller is set up.
type TasksAPIOption func(*TasksAPIController)

// WithTasksAPIErrorHandler inject ErrorHandler into controller
func WithTasksAPIErrorHandler(h ErrorHandler) TasksAPIOption {
	return func(c *TasksAPIController) {
		c.errorHandler = h
	}
}

// NewTasksAPIController creates a default api controller
func NewTasksAPIController(s TasksAPIServicer, opts ...TasksAPIOption) Router {
	controller := &TasksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TasksAPIController
func (c *TasksAPIController) Routes() Routes {
	return Routes{
		"CancelTask": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/task/{taskId}/cancel",
			c.CancelTask,
		},
		"GetTask": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/task/{taskId}",
			c.GetTask,
		},
	}
}

// CancelTask - Cancel task
func (c *TasksAPIController) CancelTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.CancelTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTask - Get task
func (c *TasksAPIController) GetTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.GetTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
