/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// GroupAndUserPickerAPIController binds http requests to an api service and writes the service results to the http response
type GroupAndUserPickerAPIController struct {
	service GroupAndUserPickerAPIServicer
	errorHandler ErrorHandler
}

// GroupAndUserPickerAPIOption for how the controller is set up.
type GroupAndUserPickerAPIOption func(*GroupAndUserPickerAPIController)

// WithGroupAndUserPickerAPIErrorHandler inject ErrorHandler into controller
func WithGroupAndUserPickerAPIErrorHandler(h ErrorHandler) GroupAndUserPickerAPIOption {
	return func(c *GroupAndUserPickerAPIController) {
		c.errorHandler = h
	}
}

// NewGroupAndUserPickerAPIController creates a default api controller
func NewGroupAndUserPickerAPIController(s GroupAndUserPickerAPIServicer, opts ...GroupAndUserPickerAPIOption) Router {
	controller := &GroupAndUserPickerAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GroupAndUserPickerAPIController
func (c *GroupAndUserPickerAPIController) Routes() Routes {
	return Routes{
		"FindUsersAndGroups": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/groupuserpicker",
			c.FindUsersAndGroups,
		},
	}
}

// FindUsersAndGroups - Find users and groups
func (c *GroupAndUserPickerAPIController) FindUsersAndGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "query"}, nil)
		return
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var showAvatarParam bool
	if query.Has("showAvatar") {
		param, err := parseBoolParameter(
			query.Get("showAvatar"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		showAvatarParam = param
	} else {
		var param bool = false
		showAvatarParam = param
	}
	var fieldIdParam string
	if query.Has("fieldId") {
		param := query.Get("fieldId")

		fieldIdParam = param
	} else {
	}
	var projectIdParam []string
	if query.Has("projectId") {
		projectIdParam = strings.Split(query.Get("projectId"), ",")
	}
	var issueTypeIdParam []string
	if query.Has("issueTypeId") {
		issueTypeIdParam = strings.Split(query.Get("issueTypeId"), ",")
	}
	var avatarSizeParam string
	if query.Has("avatarSize") {
		param := query.Get("avatarSize")

		avatarSizeParam = param
	} else {
		param := xsmall
		avatarSizeParam = param
	}
	var caseInsensitiveParam bool
	if query.Has("caseInsensitive") {
		param, err := parseBoolParameter(
			query.Get("caseInsensitive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		caseInsensitiveParam = param
	} else {
		var param bool = false
		caseInsensitiveParam = param
	}
	var excludeConnectAddonsParam bool
	if query.Has("excludeConnectAddons") {
		param, err := parseBoolParameter(
			query.Get("excludeConnectAddons"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeConnectAddonsParam = param
	} else {
		var param bool = false
		excludeConnectAddonsParam = param
	}
	result, err := c.service.FindUsersAndGroups(r.Context(), queryParam, maxResultsParam, showAvatarParam, fieldIdParam, projectIdParam, issueTypeIdParam, avatarSizeParam, caseInsensitiveParam, excludeConnectAddonsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
