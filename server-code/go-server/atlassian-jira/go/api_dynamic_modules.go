/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// DynamicModulesAPIController binds http requests to an api service and writes the service results to the http response
type DynamicModulesAPIController struct {
	service DynamicModulesAPIServicer
	errorHandler ErrorHandler
}

// DynamicModulesAPIOption for how the controller is set up.
type DynamicModulesAPIOption func(*DynamicModulesAPIController)

// WithDynamicModulesAPIErrorHandler inject ErrorHandler into controller
func WithDynamicModulesAPIErrorHandler(h ErrorHandler) DynamicModulesAPIOption {
	return func(c *DynamicModulesAPIController) {
		c.errorHandler = h
	}
}

// NewDynamicModulesAPIController creates a default api controller
func NewDynamicModulesAPIController(s DynamicModulesAPIServicer, opts ...DynamicModulesAPIOption) Router {
	controller := &DynamicModulesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DynamicModulesAPIController
func (c *DynamicModulesAPIController) Routes() Routes {
	return Routes{
		"DynamicModulesResourceGetModulesGet": Route{
			strings.ToUpper("Get"),
			"/rest/atlassian-connect/1/app/module/dynamic",
			c.DynamicModulesResourceGetModulesGet,
		},
		"DynamicModulesResourceRegisterModulesPost": Route{
			strings.ToUpper("Post"),
			"/rest/atlassian-connect/1/app/module/dynamic",
			c.DynamicModulesResourceRegisterModulesPost,
		},
		"DynamicModulesResourceRemoveModulesDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/atlassian-connect/1/app/module/dynamic",
			c.DynamicModulesResourceRemoveModulesDelete,
		},
	}
}

// DynamicModulesResourceGetModulesGet - Get modules
func (c *DynamicModulesAPIController) DynamicModulesResourceGetModulesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DynamicModulesResourceGetModulesGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DynamicModulesResourceRegisterModulesPost - Register modules
func (c *DynamicModulesAPIController) DynamicModulesResourceRegisterModulesPost(w http.ResponseWriter, r *http.Request) {
	connectModulesParam := ConnectModules{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&connectModulesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertConnectModulesRequired(connectModulesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertConnectModulesConstraints(connectModulesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DynamicModulesResourceRegisterModulesPost(r.Context(), connectModulesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DynamicModulesResourceRemoveModulesDelete - Remove modules
func (c *DynamicModulesAPIController) DynamicModulesResourceRemoveModulesDelete(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var moduleKeyParam []string
	if query.Has("moduleKey") {
		moduleKeyParam = strings.Split(query.Get("moduleKey"), ",")
	}
	result, err := c.service.DynamicModulesResourceRemoveModulesDelete(r.Context(), moduleKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
