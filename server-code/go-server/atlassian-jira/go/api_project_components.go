/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectComponentsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectComponentsAPIController struct {
	service ProjectComponentsAPIServicer
	errorHandler ErrorHandler
}

// ProjectComponentsAPIOption for how the controller is set up.
type ProjectComponentsAPIOption func(*ProjectComponentsAPIController)

// WithProjectComponentsAPIErrorHandler inject ErrorHandler into controller
func WithProjectComponentsAPIErrorHandler(h ErrorHandler) ProjectComponentsAPIOption {
	return func(c *ProjectComponentsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectComponentsAPIController creates a default api controller
func NewProjectComponentsAPIController(s ProjectComponentsAPIServicer, opts ...ProjectComponentsAPIOption) Router {
	controller := &ProjectComponentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectComponentsAPIController
func (c *ProjectComponentsAPIController) Routes() Routes {
	return Routes{
		"CreateComponent": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/component",
			c.CreateComponent,
		},
		"DeleteComponent": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/component/{id}",
			c.DeleteComponent,
		},
		"GetComponent": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/component/{id}",
			c.GetComponent,
		},
		"GetComponentRelatedIssues": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/component/{id}/relatedIssueCounts",
			c.GetComponentRelatedIssues,
		},
		"GetProjectComponents": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/components",
			c.GetProjectComponents,
		},
		"GetProjectComponentsPaginated": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/component",
			c.GetProjectComponentsPaginated,
		},
		"UpdateComponent": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/component/{id}",
			c.UpdateComponent,
		},
	}
}

// CreateComponent - Create component
func (c *ProjectComponentsAPIController) CreateComponent(w http.ResponseWriter, r *http.Request) {
	projectComponentParam := ProjectComponent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectComponentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectComponentRequired(projectComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectComponentConstraints(projectComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateComponent(r.Context(), projectComponentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteComponent - Delete component
func (c *ProjectComponentsAPIController) DeleteComponent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var moveIssuesToParam string
	if query.Has("moveIssuesTo") {
		param := query.Get("moveIssuesTo")

		moveIssuesToParam = param
	} else {
	}
	result, err := c.service.DeleteComponent(r.Context(), idParam, moveIssuesToParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComponent - Get component
func (c *ProjectComponentsAPIController) GetComponent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetComponent(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComponentRelatedIssues - Get component issues count
func (c *ProjectComponentsAPIController) GetComponentRelatedIssues(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetComponentRelatedIssues(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectComponents - Get project components
func (c *ProjectComponentsAPIController) GetProjectComponents(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetProjectComponents(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectComponentsPaginated - Get project components paginated
func (c *ProjectComponentsAPIController) GetProjectComponentsPaginated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
	}
	result, err := c.service.GetProjectComponentsPaginated(r.Context(), projectIdOrKeyParam, startAtParam, maxResultsParam, orderByParam, queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateComponent - Update component
func (c *ProjectComponentsAPIController) UpdateComponent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	projectComponentParam := ProjectComponent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectComponentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectComponentRequired(projectComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectComponentConstraints(projectComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateComponent(r.Context(), idParam, projectComponentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
