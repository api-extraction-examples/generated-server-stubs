/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueWorklogsAPIController binds http requests to an api service and writes the service results to the http response
type IssueWorklogsAPIController struct {
	service IssueWorklogsAPIServicer
	errorHandler ErrorHandler
}

// IssueWorklogsAPIOption for how the controller is set up.
type IssueWorklogsAPIOption func(*IssueWorklogsAPIController)

// WithIssueWorklogsAPIErrorHandler inject ErrorHandler into controller
func WithIssueWorklogsAPIErrorHandler(h ErrorHandler) IssueWorklogsAPIOption {
	return func(c *IssueWorklogsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueWorklogsAPIController creates a default api controller
func NewIssueWorklogsAPIController(s IssueWorklogsAPIServicer, opts ...IssueWorklogsAPIOption) Router {
	controller := &IssueWorklogsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueWorklogsAPIController
func (c *IssueWorklogsAPIController) Routes() Routes {
	return Routes{
		"AddWorklog": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog",
			c.AddWorklog,
		},
		"DeleteWorklog": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
			c.DeleteWorklog,
		},
		"GetIdsOfWorklogsDeletedSince": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/worklog/deleted",
			c.GetIdsOfWorklogsDeletedSince,
		},
		"GetIdsOfWorklogsModifiedSince": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/worklog/updated",
			c.GetIdsOfWorklogsModifiedSince,
		},
		"GetIssueWorklog": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog",
			c.GetIssueWorklog,
		},
		"GetWorklog": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
			c.GetWorklog,
		},
		"GetWorklogsForIds": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/worklog/list",
			c.GetWorklogsForIds,
		},
		"UpdateWorklog": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/worklog/{id}",
			c.UpdateWorklog,
		},
	}
}

// AddWorklog - Add worklog
func (c *IssueWorklogsAPIController) AddWorklog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	worklogParam := Worklog{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&worklogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorklogRequired(worklogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorklogConstraints(worklogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyUsersParam bool
	if query.Has("notifyUsers") {
		param, err := parseBoolParameter(
			query.Get("notifyUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyUsersParam = param
	} else {
		var param bool = true
		notifyUsersParam = param
	}
	var adjustEstimateParam string
	if query.Has("adjustEstimate") {
		param := query.Get("adjustEstimate")

		adjustEstimateParam = param
	} else {
		param := auto
		adjustEstimateParam = param
	}
	var newEstimateParam string
	if query.Has("newEstimate") {
		param := query.Get("newEstimate")

		newEstimateParam = param
	} else {
	}
	var reduceByParam string
	if query.Has("reduceBy") {
		param := query.Get("reduceBy")

		reduceByParam = param
	} else {
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.AddWorklog(r.Context(), issueIdOrKeyParam, worklogParam, notifyUsersParam, adjustEstimateParam, newEstimateParam, reduceByParam, expandParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorklog - Delete worklog
func (c *IssueWorklogsAPIController) DeleteWorklog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var notifyUsersParam bool
	if query.Has("notifyUsers") {
		param, err := parseBoolParameter(
			query.Get("notifyUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyUsersParam = param
	} else {
		var param bool = true
		notifyUsersParam = param
	}
	var adjustEstimateParam string
	if query.Has("adjustEstimate") {
		param := query.Get("adjustEstimate")

		adjustEstimateParam = param
	} else {
		param := auto
		adjustEstimateParam = param
	}
	var newEstimateParam string
	if query.Has("newEstimate") {
		param := query.Get("newEstimate")

		newEstimateParam = param
	} else {
	}
	var increaseByParam string
	if query.Has("increaseBy") {
		param := query.Get("increaseBy")

		increaseByParam = param
	} else {
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.DeleteWorklog(r.Context(), issueIdOrKeyParam, idParam, notifyUsersParam, adjustEstimateParam, newEstimateParam, increaseByParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIdsOfWorklogsDeletedSince - Get IDs of deleted worklogs
func (c *IssueWorklogsAPIController) GetIdsOfWorklogsDeletedSince(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sinceParam int64
	if query.Has("since") {
		param, err := parseNumericParameter[int64](
			query.Get("since"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sinceParam = param
	} else {
		var param int64 = 0
		sinceParam = param
	}
	result, err := c.service.GetIdsOfWorklogsDeletedSince(r.Context(), sinceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIdsOfWorklogsModifiedSince - Get IDs of updated worklogs
func (c *IssueWorklogsAPIController) GetIdsOfWorklogsModifiedSince(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sinceParam int64
	if query.Has("since") {
		param, err := parseNumericParameter[int64](
			query.Get("since"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sinceParam = param
	} else {
		var param int64 = 0
		sinceParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	result, err := c.service.GetIdsOfWorklogsModifiedSince(r.Context(), sinceParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueWorklog - Get issue worklogs
func (c *IssueWorklogsAPIController) GetIssueWorklog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 5000
		maxResultsParam = param
	}
	var startedAfterParam int64
	if query.Has("startedAfter") {
		param, err := parseNumericParameter[int64](
			query.Get("startedAfter"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startedAfterParam = param
	} else {
	}
	var startedBeforeParam int64
	if query.Has("startedBefore") {
		param, err := parseNumericParameter[int64](
			query.Get("startedBefore"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startedBeforeParam = param
	} else {
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	result, err := c.service.GetIssueWorklog(r.Context(), issueIdOrKeyParam, startAtParam, maxResultsParam, startedAfterParam, startedBeforeParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorklog - Get worklog
func (c *IssueWorklogsAPIController) GetWorklog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	result, err := c.service.GetWorklog(r.Context(), issueIdOrKeyParam, idParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorklogsForIds - Get worklogs
func (c *IssueWorklogsAPIController) GetWorklogsForIds(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	worklogIdsRequestBeanParam := WorklogIdsRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&worklogIdsRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorklogIdsRequestBeanRequired(worklogIdsRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorklogIdsRequestBeanConstraints(worklogIdsRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	result, err := c.service.GetWorklogsForIds(r.Context(), worklogIdsRequestBeanParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorklog - Update worklog
func (c *IssueWorklogsAPIController) UpdateWorklog(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	worklogParam := Worklog{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&worklogParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorklogRequired(worklogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorklogConstraints(worklogParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyUsersParam bool
	if query.Has("notifyUsers") {
		param, err := parseBoolParameter(
			query.Get("notifyUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyUsersParam = param
	} else {
		var param bool = true
		notifyUsersParam = param
	}
	var adjustEstimateParam string
	if query.Has("adjustEstimate") {
		param := query.Get("adjustEstimate")

		adjustEstimateParam = param
	} else {
		param := auto
		adjustEstimateParam = param
	}
	var newEstimateParam string
	if query.Has("newEstimate") {
		param := query.Get("newEstimate")

		newEstimateParam = param
	} else {
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.UpdateWorklog(r.Context(), issueIdOrKeyParam, idParam, worklogParam, notifyUsersParam, adjustEstimateParam, newEstimateParam, expandParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
