/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// WorkflowSchemesAPIService is a service that implements the logic for the WorkflowSchemesAPIServicer
// This service should implement the business logic for every endpoint for the WorkflowSchemesAPI API.
// Include any external packages or services that will be required by this service.
type WorkflowSchemesAPIService struct {
}

// NewWorkflowSchemesAPIService creates a default api service
func NewWorkflowSchemesAPIService() WorkflowSchemesAPIServicer {
	return &WorkflowSchemesAPIService{}
}

// CreateWorkflowScheme - Create workflow scheme
func (s *WorkflowSchemesAPIService) CreateWorkflowScheme(ctx context.Context, workflowScheme WorkflowScheme) (ImplResponse, error) {
	// TODO - update CreateWorkflowScheme with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(201, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateWorkflowScheme method not implemented")
}

// DeleteDefaultWorkflow - Delete default workflow
func (s *WorkflowSchemesAPIService) DeleteDefaultWorkflow(ctx context.Context, id int64, updateDraftIfNeeded bool) (ImplResponse, error) {
	// TODO - update DeleteDefaultWorkflow with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteDefaultWorkflow method not implemented")
}

// DeleteWorkflowMapping - Delete issue types for workflow in workflow scheme
func (s *WorkflowSchemesAPIService) DeleteWorkflowMapping(ctx context.Context, id int64, workflowName string, updateDraftIfNeeded bool) (ImplResponse, error) {
	// TODO - update DeleteWorkflowMapping with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, {}) or use other options such as http.Ok ...
	// return Response(200, nil),nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteWorkflowMapping method not implemented")
}

// DeleteWorkflowScheme - Delete workflow scheme
func (s *WorkflowSchemesAPIService) DeleteWorkflowScheme(ctx context.Context, id int64) (ImplResponse, error) {
	// TODO - update DeleteWorkflowScheme with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteWorkflowScheme method not implemented")
}

// DeleteWorkflowSchemeIssueType - Delete workflow for issue type in workflow scheme
func (s *WorkflowSchemesAPIService) DeleteWorkflowSchemeIssueType(ctx context.Context, id int64, issueType string, updateDraftIfNeeded bool) (ImplResponse, error) {
	// TODO - update DeleteWorkflowSchemeIssueType with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteWorkflowSchemeIssueType method not implemented")
}

// GetAllWorkflowSchemes - Get all workflow schemes
func (s *WorkflowSchemesAPIService) GetAllWorkflowSchemes(ctx context.Context, startAt int64, maxResults int32) (ImplResponse, error) {
	// TODO - update GetAllWorkflowSchemes with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PageBeanWorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, PageBeanWorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetAllWorkflowSchemes method not implemented")
}

// GetDefaultWorkflow - Get default workflow
func (s *WorkflowSchemesAPIService) GetDefaultWorkflow(ctx context.Context, id int64, returnDraftIfExists bool) (ImplResponse, error) {
	// TODO - update GetDefaultWorkflow with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, DefaultWorkflow{}) or use other options such as http.Ok ...
	// return Response(200, DefaultWorkflow{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetDefaultWorkflow method not implemented")
}

// GetWorkflow - Get issue types for workflows in workflow scheme
func (s *WorkflowSchemesAPIService) GetWorkflow(ctx context.Context, id int64, workflowName string, returnDraftIfExists bool) (ImplResponse, error) {
	// TODO - update GetWorkflow with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, IssueTypesWorkflowMapping{}) or use other options such as http.Ok ...
	// return Response(200, IssueTypesWorkflowMapping{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetWorkflow method not implemented")
}

// GetWorkflowScheme - Get workflow scheme
func (s *WorkflowSchemesAPIService) GetWorkflowScheme(ctx context.Context, id int64, returnDraftIfExists bool) (ImplResponse, error) {
	// TODO - update GetWorkflowScheme with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetWorkflowScheme method not implemented")
}

// GetWorkflowSchemeIssueType - Get workflow for issue type in workflow scheme
func (s *WorkflowSchemesAPIService) GetWorkflowSchemeIssueType(ctx context.Context, id int64, issueType string, returnDraftIfExists bool) (ImplResponse, error) {
	// TODO - update GetWorkflowSchemeIssueType with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, IssueTypeWorkflowMapping{}) or use other options such as http.Ok ...
	// return Response(200, IssueTypeWorkflowMapping{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetWorkflowSchemeIssueType method not implemented")
}

// SetWorkflowSchemeIssueType - Set workflow for issue type in workflow scheme
func (s *WorkflowSchemesAPIService) SetWorkflowSchemeIssueType(ctx context.Context, id int64, issueType string, issueTypeWorkflowMapping IssueTypeWorkflowMapping) (ImplResponse, error) {
	// TODO - update SetWorkflowSchemeIssueType with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("SetWorkflowSchemeIssueType method not implemented")
}

// UpdateDefaultWorkflow - Update default workflow
func (s *WorkflowSchemesAPIService) UpdateDefaultWorkflow(ctx context.Context, id int64, defaultWorkflow DefaultWorkflow) (ImplResponse, error) {
	// TODO - update UpdateDefaultWorkflow with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateDefaultWorkflow method not implemented")
}

// UpdateWorkflowMapping - Set issue types for workflow in workflow scheme
func (s *WorkflowSchemesAPIService) UpdateWorkflowMapping(ctx context.Context, id int64, workflowName string, issueTypesWorkflowMapping IssueTypesWorkflowMapping) (ImplResponse, error) {
	// TODO - update UpdateWorkflowMapping with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateWorkflowMapping method not implemented")
}

// UpdateWorkflowScheme - Update workflow scheme
func (s *WorkflowSchemesAPIService) UpdateWorkflowScheme(ctx context.Context, id int64, workflowScheme WorkflowScheme) (ImplResponse, error) {
	// TODO - update UpdateWorkflowScheme with the required logic for this service method.
	// Add api_workflow_schemes_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, WorkflowScheme{}) or use other options such as http.Ok ...
	// return Response(200, WorkflowScheme{}), nil

	// TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	// return Response(400, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateWorkflowScheme method not implemented")
}
