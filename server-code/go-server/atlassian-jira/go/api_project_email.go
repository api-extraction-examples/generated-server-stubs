/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectEmailAPIController binds http requests to an api service and writes the service results to the http response
type ProjectEmailAPIController struct {
	service ProjectEmailAPIServicer
	errorHandler ErrorHandler
}

// ProjectEmailAPIOption for how the controller is set up.
type ProjectEmailAPIOption func(*ProjectEmailAPIController)

// WithProjectEmailAPIErrorHandler inject ErrorHandler into controller
func WithProjectEmailAPIErrorHandler(h ErrorHandler) ProjectEmailAPIOption {
	return func(c *ProjectEmailAPIController) {
		c.errorHandler = h
	}
}

// NewProjectEmailAPIController creates a default api controller
func NewProjectEmailAPIController(s ProjectEmailAPIServicer, opts ...ProjectEmailAPIOption) Router {
	controller := &ProjectEmailAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectEmailAPIController
func (c *ProjectEmailAPIController) Routes() Routes {
	return Routes{
		"GetProjectEmail": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectId}/email",
			c.GetProjectEmail,
		},
		"UpdateProjectEmail": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectId}/email",
			c.UpdateProjectEmail,
		},
	}
}

// GetProjectEmail - Get project's sender email
func (c *ProjectEmailAPIController) GetProjectEmail(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam, err := parseNumericParameter[int64](
		params["projectId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetProjectEmail(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProjectEmail - Set project's sender email
func (c *ProjectEmailAPIController) UpdateProjectEmail(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam, err := parseNumericParameter[int64](
		params["projectId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectEmailAddressParam := ProjectEmailAddress{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectEmailAddressParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectEmailAddressRequired(projectEmailAddressParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectEmailAddressConstraints(projectEmailAddressParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProjectEmail(r.Context(), projectIdParam, projectEmailAddressParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
