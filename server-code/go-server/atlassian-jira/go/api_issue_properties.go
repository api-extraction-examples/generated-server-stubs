/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssuePropertiesAPIController binds http requests to an api service and writes the service results to the http response
type IssuePropertiesAPIController struct {
	service IssuePropertiesAPIServicer
	errorHandler ErrorHandler
}

// IssuePropertiesAPIOption for how the controller is set up.
type IssuePropertiesAPIOption func(*IssuePropertiesAPIController)

// WithIssuePropertiesAPIErrorHandler inject ErrorHandler into controller
func WithIssuePropertiesAPIErrorHandler(h ErrorHandler) IssuePropertiesAPIOption {
	return func(c *IssuePropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewIssuePropertiesAPIController creates a default api controller
func NewIssuePropertiesAPIController(s IssuePropertiesAPIServicer, opts ...IssuePropertiesAPIOption) Router {
	controller := &IssuePropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssuePropertiesAPIController
func (c *IssuePropertiesAPIController) Routes() Routes {
	return Routes{
		"BulkDeleteIssueProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/properties/{propertyKey}",
			c.BulkDeleteIssueProperty,
		},
		"BulkSetIssuePropertiesByIssue": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/properties/multi",
			c.BulkSetIssuePropertiesByIssue,
		},
		"BulkSetIssueProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/properties/{propertyKey}",
			c.BulkSetIssueProperty,
		},
		"BulkSetIssuesPropertiesList": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/properties",
			c.BulkSetIssuesPropertiesList,
		},
		"DeleteIssueProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
			c.DeleteIssueProperty,
		},
		"GetIssueProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
			c.GetIssueProperty,
		},
		"GetIssuePropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/properties",
			c.GetIssuePropertyKeys,
		},
		"SetIssueProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/properties/{propertyKey}",
			c.SetIssueProperty,
		},
	}
}

// BulkDeleteIssueProperty - Bulk delete issue property
func (c *IssuePropertiesAPIController) BulkDeleteIssueProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	issueFilterForBulkPropertyDeleteParam := IssueFilterForBulkPropertyDelete{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueFilterForBulkPropertyDeleteParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueFilterForBulkPropertyDeleteRequired(issueFilterForBulkPropertyDeleteParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueFilterForBulkPropertyDeleteConstraints(issueFilterForBulkPropertyDeleteParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkDeleteIssueProperty(r.Context(), propertyKeyParam, issueFilterForBulkPropertyDeleteParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BulkSetIssuePropertiesByIssue - Bulk set issue properties by issue
func (c *IssuePropertiesAPIController) BulkSetIssuePropertiesByIssue(w http.ResponseWriter, r *http.Request) {
	multiIssueEntityPropertiesParam := MultiIssueEntityProperties{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&multiIssueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMultiIssueEntityPropertiesRequired(multiIssueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMultiIssueEntityPropertiesConstraints(multiIssueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkSetIssuePropertiesByIssue(r.Context(), multiIssueEntityPropertiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BulkSetIssueProperty - Bulk set issue property
func (c *IssuePropertiesAPIController) BulkSetIssueProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bulkIssuePropertyUpdateRequestParam := BulkIssuePropertyUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkIssuePropertyUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkIssuePropertyUpdateRequestRequired(bulkIssuePropertyUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkIssuePropertyUpdateRequestConstraints(bulkIssuePropertyUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkSetIssueProperty(r.Context(), propertyKeyParam, bulkIssuePropertyUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BulkSetIssuesPropertiesList - Bulk set issues properties by list
func (c *IssuePropertiesAPIController) BulkSetIssuesPropertiesList(w http.ResponseWriter, r *http.Request) {
	issueEntityPropertiesParam := IssueEntityProperties{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueEntityPropertiesRequired(issueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueEntityPropertiesConstraints(issueEntityPropertiesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BulkSetIssuesPropertiesList(r.Context(), issueEntityPropertiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueProperty - Delete issue property
func (c *IssuePropertiesAPIController) DeleteIssueProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteIssueProperty(r.Context(), issueIdOrKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueProperty - Get issue property
func (c *IssuePropertiesAPIController) GetIssueProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetIssueProperty(r.Context(), issueIdOrKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssuePropertyKeys - Get issue property keys
func (c *IssuePropertiesAPIController) GetIssuePropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetIssuePropertyKeys(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetIssueProperty - Set issue property
func (c *IssuePropertiesAPIController) SetIssueProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetIssueProperty(r.Context(), issueIdOrKeyParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
