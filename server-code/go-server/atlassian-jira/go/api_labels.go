/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LabelsAPIController binds http requests to an api service and writes the service results to the http response
type LabelsAPIController struct {
	service LabelsAPIServicer
	errorHandler ErrorHandler
}

// LabelsAPIOption for how the controller is set up.
type LabelsAPIOption func(*LabelsAPIController)

// WithLabelsAPIErrorHandler inject ErrorHandler into controller
func WithLabelsAPIErrorHandler(h ErrorHandler) LabelsAPIOption {
	return func(c *LabelsAPIController) {
		c.errorHandler = h
	}
}

// NewLabelsAPIController creates a default api controller
func NewLabelsAPIController(s LabelsAPIServicer, opts ...LabelsAPIOption) Router {
	controller := &LabelsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LabelsAPIController
func (c *LabelsAPIController) Routes() Routes {
	return Routes{
		"GetAllLabels": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/label",
			c.GetAllLabels,
		},
	}
}

// GetAllLabels - Get all labels
func (c *LabelsAPIController) GetAllLabels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 1000
		maxResultsParam = param
	}
	result, err := c.service.GetAllLabels(r.Context(), startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
