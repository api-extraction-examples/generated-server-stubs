/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// WorkflowsAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowsAPIController struct {
	service WorkflowsAPIServicer
	errorHandler ErrorHandler
}

// WorkflowsAPIOption for how the controller is set up.
type WorkflowsAPIOption func(*WorkflowsAPIController)

// WithWorkflowsAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowsAPIErrorHandler(h ErrorHandler) WorkflowsAPIOption {
	return func(c *WorkflowsAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowsAPIController creates a default api controller
func NewWorkflowsAPIController(s WorkflowsAPIServicer, opts ...WorkflowsAPIOption) Router {
	controller := &WorkflowsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowsAPIController
func (c *WorkflowsAPIController) Routes() Routes {
	return Routes{
		"CreateWorkflow": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/workflow",
			c.CreateWorkflow,
		},
		"DeleteInactiveWorkflow": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflow/{entityId}",
			c.DeleteInactiveWorkflow,
		},
		"GetAllWorkflows": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflow",
			c.GetAllWorkflows,
		},
		"GetWorkflowsPaginated": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflow/search",
			c.GetWorkflowsPaginated,
		},
	}
}

// CreateWorkflow - Create workflow
func (c *WorkflowsAPIController) CreateWorkflow(w http.ResponseWriter, r *http.Request) {
	createWorkflowDetailsParam := CreateWorkflowDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createWorkflowDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateWorkflowDetailsRequired(createWorkflowDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateWorkflowDetailsConstraints(createWorkflowDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateWorkflow(r.Context(), createWorkflowDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteInactiveWorkflow - Delete inactive workflow
func (c *WorkflowsAPIController) DeleteInactiveWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	entityIdParam := params["entityId"]
	if entityIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"entityId"}, nil)
		return
	}
	result, err := c.service.DeleteInactiveWorkflow(r.Context(), entityIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllWorkflows - Get all workflows
// Deprecated
func (c *WorkflowsAPIController) GetAllWorkflows(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
	}
	result, err := c.service.GetAllWorkflows(r.Context(), workflowNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowsPaginated - Get workflows paginated
func (c *WorkflowsAPIController) GetWorkflowsPaginated(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var workflowNameParam []string
	if query.Has("workflowName") {
		workflowNameParam = strings.Split(query.Get("workflowName"), ",")
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var queryStringParam string
	if query.Has("queryString") {
		param := query.Get("queryString")

		queryStringParam = param
	} else {
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
	}
	var isActiveParam bool
	if query.Has("isActive") {
		param, err := parseBoolParameter(
			query.Get("isActive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isActiveParam = param
	} else {
	}
	result, err := c.service.GetWorkflowsPaginated(r.Context(), startAtParam, maxResultsParam, workflowNameParam, expandParam, queryStringParam, orderByParam, isActiveParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
