/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// WorkflowTransitionRulesAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowTransitionRulesAPIController struct {
	service WorkflowTransitionRulesAPIServicer
	errorHandler ErrorHandler
}

// WorkflowTransitionRulesAPIOption for how the controller is set up.
type WorkflowTransitionRulesAPIOption func(*WorkflowTransitionRulesAPIController)

// WithWorkflowTransitionRulesAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowTransitionRulesAPIErrorHandler(h ErrorHandler) WorkflowTransitionRulesAPIOption {
	return func(c *WorkflowTransitionRulesAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowTransitionRulesAPIController creates a default api controller
func NewWorkflowTransitionRulesAPIController(s WorkflowTransitionRulesAPIServicer, opts ...WorkflowTransitionRulesAPIOption) Router {
	controller := &WorkflowTransitionRulesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowTransitionRulesAPIController
func (c *WorkflowTransitionRulesAPIController) Routes() Routes {
	return Routes{
		"DeleteWorkflowTransitionRuleConfigurations": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflow/rule/config/delete",
			c.DeleteWorkflowTransitionRuleConfigurations,
		},
		"GetWorkflowTransitionRuleConfigurations": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflow/rule/config",
			c.GetWorkflowTransitionRuleConfigurations,
		},
		"UpdateWorkflowTransitionRuleConfigurations": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflow/rule/config",
			c.UpdateWorkflowTransitionRuleConfigurations,
		},
	}
}

// DeleteWorkflowTransitionRuleConfigurations - Delete workflow transition rule configurations
func (c *WorkflowTransitionRulesAPIController) DeleteWorkflowTransitionRuleConfigurations(w http.ResponseWriter, r *http.Request) {
	workflowsWithTransitionRulesDetailsParam := WorkflowsWithTransitionRulesDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowsWithTransitionRulesDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowsWithTransitionRulesDetailsRequired(workflowsWithTransitionRulesDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowsWithTransitionRulesDetailsConstraints(workflowsWithTransitionRulesDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteWorkflowTransitionRuleConfigurations(r.Context(), workflowsWithTransitionRulesDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowTransitionRuleConfigurations - Get workflow transition rule configurations
func (c *WorkflowTransitionRulesAPIController) GetWorkflowTransitionRuleConfigurations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var typesParam []string
	if query.Has("types") {
		typesParam = strings.Split(query.Get("types"), ",")
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 10
		maxResultsParam = param
	}
	var keysParam []string
	if query.Has("keys") {
		keysParam = strings.Split(query.Get("keys"), ",")
	}
	var workflowNamesParam []string
	if query.Has("workflowNames") {
		workflowNamesParam = strings.Split(query.Get("workflowNames"), ",")
	}
	var withTagsParam []string
	if query.Has("withTags") {
		withTagsParam = strings.Split(query.Get("withTags"), ",")
	}
	var draftParam bool
	if query.Has("draft") {
		param, err := parseBoolParameter(
			query.Get("draft"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		draftParam = param
	} else {
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetWorkflowTransitionRuleConfigurations(r.Context(), typesParam, startAtParam, maxResultsParam, keysParam, workflowNamesParam, withTagsParam, draftParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkflowTransitionRuleConfigurations - Update workflow transition rule configurations
func (c *WorkflowTransitionRulesAPIController) UpdateWorkflowTransitionRuleConfigurations(w http.ResponseWriter, r *http.Request) {
	workflowTransitionRulesUpdateParam := WorkflowTransitionRulesUpdate{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowTransitionRulesUpdateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowTransitionRulesUpdateRequired(workflowTransitionRulesUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowTransitionRulesUpdateConstraints(workflowTransitionRulesUpdateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWorkflowTransitionRuleConfigurations(r.Context(), workflowTransitionRulesUpdateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
