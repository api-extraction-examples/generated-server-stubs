/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueVotesAPIController binds http requests to an api service and writes the service results to the http response
type IssueVotesAPIController struct {
	service IssueVotesAPIServicer
	errorHandler ErrorHandler
}

// IssueVotesAPIOption for how the controller is set up.
type IssueVotesAPIOption func(*IssueVotesAPIController)

// WithIssueVotesAPIErrorHandler inject ErrorHandler into controller
func WithIssueVotesAPIErrorHandler(h ErrorHandler) IssueVotesAPIOption {
	return func(c *IssueVotesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueVotesAPIController creates a default api controller
func NewIssueVotesAPIController(s IssueVotesAPIServicer, opts ...IssueVotesAPIOption) Router {
	controller := &IssueVotesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueVotesAPIController
func (c *IssueVotesAPIController) Routes() Routes {
	return Routes{
		"AddVote": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/votes",
			c.AddVote,
		},
		"GetVotes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/votes",
			c.GetVotes,
		},
		"RemoveVote": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/votes",
			c.RemoveVote,
		},
	}
}

// AddVote - Add vote
func (c *IssueVotesAPIController) AddVote(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.AddVote(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVotes - Get votes
func (c *IssueVotesAPIController) GetVotes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetVotes(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveVote - Delete vote
func (c *IssueVotesAPIController) RemoveVote(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	result, err := c.service.RemoveVote(r.Context(), issueIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
