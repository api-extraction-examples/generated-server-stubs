/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkflowTransitionPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowTransitionPropertiesAPIController struct {
	service WorkflowTransitionPropertiesAPIServicer
	errorHandler ErrorHandler
}

// WorkflowTransitionPropertiesAPIOption for how the controller is set up.
type WorkflowTransitionPropertiesAPIOption func(*WorkflowTransitionPropertiesAPIController)

// WithWorkflowTransitionPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowTransitionPropertiesAPIErrorHandler(h ErrorHandler) WorkflowTransitionPropertiesAPIOption {
	return func(c *WorkflowTransitionPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowTransitionPropertiesAPIController creates a default api controller
func NewWorkflowTransitionPropertiesAPIController(s WorkflowTransitionPropertiesAPIServicer, opts ...WorkflowTransitionPropertiesAPIOption) Router {
	controller := &WorkflowTransitionPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowTransitionPropertiesAPIController
func (c *WorkflowTransitionPropertiesAPIController) Routes() Routes {
	return Routes{
		"CreateWorkflowTransitionProperty": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/workflow/transitions/{transitionId}/properties",
			c.CreateWorkflowTransitionProperty,
		},
		"DeleteWorkflowTransitionProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflow/transitions/{transitionId}/properties",
			c.DeleteWorkflowTransitionProperty,
		},
		"GetWorkflowTransitionProperties": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflow/transitions/{transitionId}/properties",
			c.GetWorkflowTransitionProperties,
		},
		"UpdateWorkflowTransitionProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflow/transitions/{transitionId}/properties",
			c.UpdateWorkflowTransitionProperty,
		},
	}
}

// CreateWorkflowTransitionProperty - Create workflow transition property
func (c *WorkflowTransitionPropertiesAPIController) CreateWorkflowTransitionProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	transitionIdParam, err := parseNumericParameter[int64](
		params["transitionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	workflowTransitionPropertyParam := WorkflowTransitionProperty{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowTransitionPropertyRequired(workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowTransitionPropertyConstraints(workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var workflowModeParam string
	if query.Has("workflowMode") {
		param := query.Get("workflowMode")

		workflowModeParam = param
	} else {
		param := live
		workflowModeParam = param
	}
	result, err := c.service.CreateWorkflowTransitionProperty(r.Context(), transitionIdParam, keyParam, workflowNameParam, workflowTransitionPropertyParam, workflowModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowTransitionProperty - Delete workflow transition property
func (c *WorkflowTransitionPropertiesAPIController) DeleteWorkflowTransitionProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	transitionIdParam, err := parseNumericParameter[int64](
		params["transitionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	var workflowModeParam string
	if query.Has("workflowMode") {
		param := query.Get("workflowMode")

		workflowModeParam = param
	} else {
	}
	result, err := c.service.DeleteWorkflowTransitionProperty(r.Context(), transitionIdParam, keyParam, workflowNameParam, workflowModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowTransitionProperties - Get workflow transition properties
func (c *WorkflowTransitionPropertiesAPIController) GetWorkflowTransitionProperties(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	transitionIdParam, err := parseNumericParameter[int64](
		params["transitionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	var includeReservedKeysParam bool
	if query.Has("includeReservedKeys") {
		param, err := parseBoolParameter(
			query.Get("includeReservedKeys"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeReservedKeysParam = param
	} else {
		var param bool = false
		includeReservedKeysParam = param
	}
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
	}
	var workflowModeParam string
	if query.Has("workflowMode") {
		param := query.Get("workflowMode")

		workflowModeParam = param
	} else {
		param := live
		workflowModeParam = param
	}
	result, err := c.service.GetWorkflowTransitionProperties(r.Context(), transitionIdParam, workflowNameParam, includeReservedKeysParam, keyParam, workflowModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkflowTransitionProperty - Update workflow transition property
func (c *WorkflowTransitionPropertiesAPIController) UpdateWorkflowTransitionProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	transitionIdParam, err := parseNumericParameter[int64](
		params["transitionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	workflowTransitionPropertyParam := WorkflowTransitionProperty{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowTransitionPropertyRequired(workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowTransitionPropertyConstraints(workflowTransitionPropertyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var workflowModeParam string
	if query.Has("workflowMode") {
		param := query.Get("workflowMode")

		workflowModeParam = param
	} else {
	}
	result, err := c.service.UpdateWorkflowTransitionProperty(r.Context(), transitionIdParam, keyParam, workflowNameParam, workflowTransitionPropertyParam, workflowModeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
