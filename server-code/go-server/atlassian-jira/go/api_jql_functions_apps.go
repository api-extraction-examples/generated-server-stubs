/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// JQLFunctionsAppsAPIController binds http requests to an api service and writes the service results to the http response
type JQLFunctionsAppsAPIController struct {
	service JQLFunctionsAppsAPIServicer
	errorHandler ErrorHandler
}

// JQLFunctionsAppsAPIOption for how the controller is set up.
type JQLFunctionsAppsAPIOption func(*JQLFunctionsAppsAPIController)

// WithJQLFunctionsAppsAPIErrorHandler inject ErrorHandler into controller
func WithJQLFunctionsAppsAPIErrorHandler(h ErrorHandler) JQLFunctionsAppsAPIOption {
	return func(c *JQLFunctionsAppsAPIController) {
		c.errorHandler = h
	}
}

// NewJQLFunctionsAppsAPIController creates a default api controller
func NewJQLFunctionsAppsAPIController(s JQLFunctionsAppsAPIServicer, opts ...JQLFunctionsAppsAPIOption) Router {
	controller := &JQLFunctionsAppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the JQLFunctionsAppsAPIController
func (c *JQLFunctionsAppsAPIController) Routes() Routes {
	return Routes{
		"GetPrecomputations": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/jql/function/computation",
			c.GetPrecomputations,
		},
		"UpdatePrecomputations": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/jql/function/computation",
			c.UpdatePrecomputations,
		},
	}
}

// GetPrecomputations - Get precomputations (apps)
func (c *JQLFunctionsAppsAPIController) GetPrecomputations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var functionKeyParam []string
	if query.Has("functionKey") {
		functionKeyParam = strings.Split(query.Get("functionKey"), ",")
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 100
		maxResultsParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
	}
	var filterParam string
	if query.Has("filter") {
		param := query.Get("filter")

		filterParam = param
	} else {
	}
	result, err := c.service.GetPrecomputations(r.Context(), functionKeyParam, startAtParam, maxResultsParam, orderByParam, filterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePrecomputations - Update precomputations (apps)
func (c *JQLFunctionsAppsAPIController) UpdatePrecomputations(w http.ResponseWriter, r *http.Request) {
	jqlFunctionPrecomputationUpdateRequestBeanParam := JqlFunctionPrecomputationUpdateRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jqlFunctionPrecomputationUpdateRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJqlFunctionPrecomputationUpdateRequestBeanRequired(jqlFunctionPrecomputationUpdateRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJqlFunctionPrecomputationUpdateRequestBeanConstraints(jqlFunctionPrecomputationUpdateRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePrecomputations(r.Context(), jqlFunctionPrecomputationUpdateRequestBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
