/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
	"reflect"
)

// IssueResolutionsAPIService is a service that implements the logic for the IssueResolutionsAPIServicer
// This service should implement the business logic for every endpoint for the IssueResolutionsAPI API.
// Include any external packages or services that will be required by this service.
type IssueResolutionsAPIService struct {
}

// NewIssueResolutionsAPIService creates a default api service
func NewIssueResolutionsAPIService() IssueResolutionsAPIServicer {
	return &IssueResolutionsAPIService{}
}

// CreateResolution - Create resolution
func (s *IssueResolutionsAPIService) CreateResolution(ctx context.Context, createResolutionDetails CreateResolutionDetails) (ImplResponse, error) {
	// TODO - update CreateResolution with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(201, ResolutionId{}) or use other options such as http.Ok ...
	// return Response(201, ResolutionId{}), nil

	// TODO: Uncomment the next line to return response Response(400, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(400, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(403, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(403, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("CreateResolution method not implemented")
}

// DeleteResolution - Delete resolution
func (s *IssueResolutionsAPIService) DeleteResolution(ctx context.Context, id string, replaceWith string) (ImplResponse, error) {
	// TODO - update DeleteResolution with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(303, TaskProgressBeanObject{}) or use other options such as http.Ok ...
	// return Response(303, TaskProgressBeanObject{}), nil

	// TODO: Uncomment the next line to return response Response(400, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(400, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(403, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(403, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(404, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(404, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(409, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(409, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteResolution method not implemented")
}

// GetResolution - Get resolution
func (s *IssueResolutionsAPIService) GetResolution(ctx context.Context, id string) (ImplResponse, error) {
	// TODO - update GetResolution with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, Resolution{}) or use other options such as http.Ok ...
	// return Response(200, Resolution{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	// return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetResolution method not implemented")
}

// GetResolutions - Get resolutions
// Deprecated
func (s *IssueResolutionsAPIService) GetResolutions(ctx context.Context) (ImplResponse, error) {
	// TODO - update GetResolutions with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, []Resolution{}) or use other options such as http.Ok ...
	// return Response(200, []Resolution{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetResolutions method not implemented")
}

// MoveResolutions - Move resolutions
func (s *IssueResolutionsAPIService) MoveResolutions(ctx context.Context, reorderIssueResolutionsRequest ReorderIssueResolutionsRequest) (ImplResponse, error) {
	// TODO - update MoveResolutions with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(400, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(403, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(403, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(404, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(404, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("MoveResolutions method not implemented")
}

// SearchResolutions - Search resolutions
func (s *IssueResolutionsAPIService) SearchResolutions(ctx context.Context, startAt string, maxResults string, id []string, onlyDefault bool) (ImplResponse, error) {
	// TODO - update SearchResolutions with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PageBeanResolutionJsonBean{}) or use other options such as http.Ok ...
	// return Response(200, PageBeanResolutionJsonBean{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SearchResolutions method not implemented")
}

// SetDefaultResolution - Set default resolution
func (s *IssueResolutionsAPIService) SetDefaultResolution(ctx context.Context, setDefaultResolutionRequest SetDefaultResolutionRequest) (ImplResponse, error) {
	// TODO - update SetDefaultResolution with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(400, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(403, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(403, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(404, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(404, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("SetDefaultResolution method not implemented")
}

// UpdateResolution - Update resolution
func (s *IssueResolutionsAPIService) UpdateResolution(ctx context.Context, id string, updateResolutionDetails UpdateResolutionDetails) (ImplResponse, error) {
	// TODO - update UpdateResolution with the required logic for this service method.
	// Add api_issue_resolutions_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, interface{}{}) or use other options such as http.Ok ...
	// return Response(204, interface{}{}), nil

	// TODO: Uncomment the next line to return response Response(400, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(400, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(401, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(401, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(403, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(403, ErrorCollection{}), nil

	// TODO: Uncomment the next line to return response Response(404, ErrorCollection{}) or use other options such as http.Ok ...
	// return Response(404, ErrorCollection{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateResolution method not implemented")
}
