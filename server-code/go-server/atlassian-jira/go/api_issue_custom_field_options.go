/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueCustomFieldOptionsAPIController binds http requests to an api service and writes the service results to the http response
type IssueCustomFieldOptionsAPIController struct {
	service IssueCustomFieldOptionsAPIServicer
	errorHandler ErrorHandler
}

// IssueCustomFieldOptionsAPIOption for how the controller is set up.
type IssueCustomFieldOptionsAPIOption func(*IssueCustomFieldOptionsAPIController)

// WithIssueCustomFieldOptionsAPIErrorHandler inject ErrorHandler into controller
func WithIssueCustomFieldOptionsAPIErrorHandler(h ErrorHandler) IssueCustomFieldOptionsAPIOption {
	return func(c *IssueCustomFieldOptionsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCustomFieldOptionsAPIController creates a default api controller
func NewIssueCustomFieldOptionsAPIController(s IssueCustomFieldOptionsAPIServicer, opts ...IssueCustomFieldOptionsAPIOption) Router {
	controller := &IssueCustomFieldOptionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCustomFieldOptionsAPIController
func (c *IssueCustomFieldOptionsAPIController) Routes() Routes {
	return Routes{
		"CreateCustomFieldOption": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/option",
			c.CreateCustomFieldOption,
		},
		"DeleteCustomFieldOption": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/option/{optionId}",
			c.DeleteCustomFieldOption,
		},
		"GetCustomFieldOption": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/customFieldOption/{id}",
			c.GetCustomFieldOption,
		},
		"GetOptionsForContext": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/option",
			c.GetOptionsForContext,
		},
		"ReorderCustomFieldOptions": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/option/move",
			c.ReorderCustomFieldOptions,
		},
		"UpdateCustomFieldOption": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/field/{fieldId}/context/{contextId}/option",
			c.UpdateCustomFieldOption,
		},
	}
}

// CreateCustomFieldOption - Create custom field options (context)
func (c *IssueCustomFieldOptionsAPIController) CreateCustomFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bulkCustomFieldOptionCreateRequestParam := BulkCustomFieldOptionCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkCustomFieldOptionCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkCustomFieldOptionCreateRequestRequired(bulkCustomFieldOptionCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkCustomFieldOptionCreateRequestConstraints(bulkCustomFieldOptionCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCustomFieldOption(r.Context(), fieldIdParam, contextIdParam, bulkCustomFieldOptionCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCustomFieldOption - Delete custom field options (context)
func (c *IssueCustomFieldOptionsAPIController) DeleteCustomFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	optionIdParam, err := parseNumericParameter[int64](
		params["optionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteCustomFieldOption(r.Context(), fieldIdParam, contextIdParam, optionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomFieldOption - Get custom field option
func (c *IssueCustomFieldOptionsAPIController) GetCustomFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetCustomFieldOption(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetOptionsForContext - Get custom field options (context)
func (c *IssueCustomFieldOptionsAPIController) GetOptionsForContext(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var optionIdParam int64
	if query.Has("optionId") {
		param, err := parseNumericParameter[int64](
			query.Get("optionId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		optionIdParam = param
	} else {
	}
	var onlyOptionsParam bool
	if query.Has("onlyOptions") {
		param, err := parseBoolParameter(
			query.Get("onlyOptions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyOptionsParam = param
	} else {
		var param bool = false
		onlyOptionsParam = param
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 100
		maxResultsParam = param
	}
	result, err := c.service.GetOptionsForContext(r.Context(), fieldIdParam, contextIdParam, optionIdParam, onlyOptionsParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReorderCustomFieldOptions - Reorder custom field options (context)
func (c *IssueCustomFieldOptionsAPIController) ReorderCustomFieldOptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	orderOfCustomFieldOptionsParam := OrderOfCustomFieldOptions{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&orderOfCustomFieldOptionsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrderOfCustomFieldOptionsRequired(orderOfCustomFieldOptionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrderOfCustomFieldOptionsConstraints(orderOfCustomFieldOptionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReorderCustomFieldOptions(r.Context(), fieldIdParam, contextIdParam, orderOfCustomFieldOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomFieldOption - Update custom field options (context)
func (c *IssueCustomFieldOptionsAPIController) UpdateCustomFieldOption(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdParam := params["fieldId"]
	if fieldIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldId"}, nil)
		return
	}
	contextIdParam, err := parseNumericParameter[int64](
		params["contextId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	bulkCustomFieldOptionUpdateRequestParam := BulkCustomFieldOptionUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bulkCustomFieldOptionUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBulkCustomFieldOptionUpdateRequestRequired(bulkCustomFieldOptionUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBulkCustomFieldOptionUpdateRequestConstraints(bulkCustomFieldOptionUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomFieldOption(r.Context(), fieldIdParam, contextIdParam, bulkCustomFieldOptionUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
