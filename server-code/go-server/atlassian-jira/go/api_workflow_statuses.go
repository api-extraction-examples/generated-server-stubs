/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkflowStatusesAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowStatusesAPIController struct {
	service WorkflowStatusesAPIServicer
	errorHandler ErrorHandler
}

// WorkflowStatusesAPIOption for how the controller is set up.
type WorkflowStatusesAPIOption func(*WorkflowStatusesAPIController)

// WithWorkflowStatusesAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowStatusesAPIErrorHandler(h ErrorHandler) WorkflowStatusesAPIOption {
	return func(c *WorkflowStatusesAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowStatusesAPIController creates a default api controller
func NewWorkflowStatusesAPIController(s WorkflowStatusesAPIServicer, opts ...WorkflowStatusesAPIOption) Router {
	controller := &WorkflowStatusesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowStatusesAPIController
func (c *WorkflowStatusesAPIController) Routes() Routes {
	return Routes{
		"GetStatus": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/status/{idOrName}",
			c.GetStatus,
		},
		"GetStatuses": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/status",
			c.GetStatuses,
		},
	}
}

// GetStatus - Get status
func (c *WorkflowStatusesAPIController) GetStatus(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idOrNameParam := params["idOrName"]
	if idOrNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"idOrName"}, nil)
		return
	}
	result, err := c.service.GetStatus(r.Context(), idOrNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatuses - Get all statuses
func (c *WorkflowStatusesAPIController) GetStatuses(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStatuses(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
