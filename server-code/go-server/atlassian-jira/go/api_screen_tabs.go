/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ScreenTabsAPIController binds http requests to an api service and writes the service results to the http response
type ScreenTabsAPIController struct {
	service ScreenTabsAPIServicer
	errorHandler ErrorHandler
}

// ScreenTabsAPIOption for how the controller is set up.
type ScreenTabsAPIOption func(*ScreenTabsAPIController)

// WithScreenTabsAPIErrorHandler inject ErrorHandler into controller
func WithScreenTabsAPIErrorHandler(h ErrorHandler) ScreenTabsAPIOption {
	return func(c *ScreenTabsAPIController) {
		c.errorHandler = h
	}
}

// NewScreenTabsAPIController creates a default api controller
func NewScreenTabsAPIController(s ScreenTabsAPIServicer, opts ...ScreenTabsAPIOption) Router {
	controller := &ScreenTabsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScreenTabsAPIController
func (c *ScreenTabsAPIController) Routes() Routes {
	return Routes{
		"AddScreenTab": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/screens/{screenId}/tabs",
			c.AddScreenTab,
		},
		"DeleteScreenTab": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}",
			c.DeleteScreenTab,
		},
		"GetAllScreenTabs": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/screens/{screenId}/tabs",
			c.GetAllScreenTabs,
		},
		"MoveScreenTab": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}/move/{pos}",
			c.MoveScreenTab,
		},
		"RenameScreenTab": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}",
			c.RenameScreenTab,
		},
	}
}

// AddScreenTab - Create screen tab
func (c *ScreenTabsAPIController) AddScreenTab(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	screenableTabParam := ScreenableTab{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&screenableTabParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScreenableTabRequired(screenableTabParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScreenableTabConstraints(screenableTabParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddScreenTab(r.Context(), screenIdParam, screenableTabParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteScreenTab - Delete screen tab
func (c *ScreenTabsAPIController) DeleteScreenTab(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteScreenTab(r.Context(), screenIdParam, tabIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllScreenTabs - Get all screen tabs
func (c *ScreenTabsAPIController) GetAllScreenTabs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var projectKeyParam string
	if query.Has("projectKey") {
		param := query.Get("projectKey")

		projectKeyParam = param
	} else {
	}
	result, err := c.service.GetAllScreenTabs(r.Context(), screenIdParam, projectKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoveScreenTab - Move screen tab
func (c *ScreenTabsAPIController) MoveScreenTab(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	posParam, err := parseNumericParameter[int32](
		params["pos"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.MoveScreenTab(r.Context(), screenIdParam, tabIdParam, posParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RenameScreenTab - Update screen tab
func (c *ScreenTabsAPIController) RenameScreenTab(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	screenableTabParam := ScreenableTab{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&screenableTabParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertScreenableTabRequired(screenableTabParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertScreenableTabConstraints(screenableTabParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RenameScreenTab(r.Context(), screenIdParam, tabIdParam, screenableTabParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
