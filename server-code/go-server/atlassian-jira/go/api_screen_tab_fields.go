/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ScreenTabFieldsAPIController binds http requests to an api service and writes the service results to the http response
type ScreenTabFieldsAPIController struct {
	service ScreenTabFieldsAPIServicer
	errorHandler ErrorHandler
}

// ScreenTabFieldsAPIOption for how the controller is set up.
type ScreenTabFieldsAPIOption func(*ScreenTabFieldsAPIController)

// WithScreenTabFieldsAPIErrorHandler inject ErrorHandler into controller
func WithScreenTabFieldsAPIErrorHandler(h ErrorHandler) ScreenTabFieldsAPIOption {
	return func(c *ScreenTabFieldsAPIController) {
		c.errorHandler = h
	}
}

// NewScreenTabFieldsAPIController creates a default api controller
func NewScreenTabFieldsAPIController(s ScreenTabFieldsAPIServicer, opts ...ScreenTabFieldsAPIOption) Router {
	controller := &ScreenTabFieldsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScreenTabFieldsAPIController
func (c *ScreenTabFieldsAPIController) Routes() Routes {
	return Routes{
		"AddScreenTabField": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
			c.AddScreenTabField,
		},
		"GetAllScreenTabFields": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}/fields",
			c.GetAllScreenTabFields,
		},
		"MoveScreenTabField": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}/move",
			c.MoveScreenTabField,
		},
		"RemoveScreenTabField": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/screens/{screenId}/tabs/{tabId}/fields/{id}",
			c.RemoveScreenTabField,
		},
	}
}

// AddScreenTabField - Add screen tab field
func (c *ScreenTabFieldsAPIController) AddScreenTabField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	addFieldBeanParam := AddFieldBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addFieldBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddFieldBeanRequired(addFieldBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddFieldBeanConstraints(addFieldBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddScreenTabField(r.Context(), screenIdParam, tabIdParam, addFieldBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllScreenTabFields - Get all screen tab fields
func (c *ScreenTabFieldsAPIController) GetAllScreenTabFields(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var projectKeyParam string
	if query.Has("projectKey") {
		param := query.Get("projectKey")

		projectKeyParam = param
	} else {
	}
	result, err := c.service.GetAllScreenTabFields(r.Context(), screenIdParam, tabIdParam, projectKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoveScreenTabField - Move screen tab field
func (c *ScreenTabFieldsAPIController) MoveScreenTabField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	moveFieldBeanParam := MoveFieldBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&moveFieldBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMoveFieldBeanRequired(moveFieldBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMoveFieldBeanConstraints(moveFieldBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MoveScreenTabField(r.Context(), screenIdParam, tabIdParam, idParam, moveFieldBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveScreenTabField - Remove screen tab field
func (c *ScreenTabFieldsAPIController) RemoveScreenTabField(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	screenIdParam, err := parseNumericParameter[int64](
		params["screenId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tabIdParam, err := parseNumericParameter[int64](
		params["tabId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.RemoveScreenTabField(r.Context(), screenIdParam, tabIdParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
