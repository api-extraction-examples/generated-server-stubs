/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueTypeSchemesAPIController binds http requests to an api service and writes the service results to the http response
type IssueTypeSchemesAPIController struct {
	service IssueTypeSchemesAPIServicer
	errorHandler ErrorHandler
}

// IssueTypeSchemesAPIOption for how the controller is set up.
type IssueTypeSchemesAPIOption func(*IssueTypeSchemesAPIController)

// WithIssueTypeSchemesAPIErrorHandler inject ErrorHandler into controller
func WithIssueTypeSchemesAPIErrorHandler(h ErrorHandler) IssueTypeSchemesAPIOption {
	return func(c *IssueTypeSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueTypeSchemesAPIController creates a default api controller
func NewIssueTypeSchemesAPIController(s IssueTypeSchemesAPIServicer, opts ...IssueTypeSchemesAPIOption) Router {
	controller := &IssueTypeSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueTypeSchemesAPIController
func (c *IssueTypeSchemesAPIController) Routes() Routes {
	return Routes{
		"AddIssueTypesToIssueTypeScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype",
			c.AddIssueTypesToIssueTypeScheme,
		},
		"AssignIssueTypeSchemeToProject": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescheme/project",
			c.AssignIssueTypeSchemeToProject,
		},
		"CreateIssueTypeScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issuetypescheme",
			c.CreateIssueTypeScheme,
		},
		"DeleteIssueTypeScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
			c.DeleteIssueTypeScheme,
		},
		"GetAllIssueTypeSchemes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescheme",
			c.GetAllIssueTypeSchemes,
		},
		"GetIssueTypeSchemeForProjects": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescheme/project",
			c.GetIssueTypeSchemeForProjects,
		},
		"GetIssueTypeSchemesMapping": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescheme/mapping",
			c.GetIssueTypeSchemesMapping,
		},
		"RemoveIssueTypeFromIssueTypeScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/{issueTypeId}",
			c.RemoveIssueTypeFromIssueTypeScheme,
		},
		"ReorderIssueTypesInIssueTypeScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescheme/{issueTypeSchemeId}/issuetype/move",
			c.ReorderIssueTypesInIssueTypeScheme,
		},
		"UpdateIssueTypeScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescheme/{issueTypeSchemeId}",
			c.UpdateIssueTypeScheme,
		},
	}
}

// AddIssueTypesToIssueTypeScheme - Add issue types to issue type scheme
func (c *IssueTypeSchemesAPIController) AddIssueTypesToIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeIdsParam := IssueTypeIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeIdsRequired(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeIdsConstraints(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddIssueTypesToIssueTypeScheme(r.Context(), issueTypeSchemeIdParam, issueTypeIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssignIssueTypeSchemeToProject - Assign issue type scheme to project
func (c *IssueTypeSchemesAPIController) AssignIssueTypeSchemeToProject(w http.ResponseWriter, r *http.Request) {
	issueTypeSchemeProjectAssociationParam := IssueTypeSchemeProjectAssociation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeSchemeProjectAssociationRequired(issueTypeSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeSchemeProjectAssociationConstraints(issueTypeSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssignIssueTypeSchemeToProject(r.Context(), issueTypeSchemeProjectAssociationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateIssueTypeScheme - Create issue type scheme
func (c *IssueTypeSchemesAPIController) CreateIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	issueTypeSchemeDetailsParam := IssueTypeSchemeDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeSchemeDetailsRequired(issueTypeSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeSchemeDetailsConstraints(issueTypeSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssueTypeScheme(r.Context(), issueTypeSchemeDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueTypeScheme - Delete issue type scheme
func (c *IssueTypeSchemesAPIController) DeleteIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteIssueTypeScheme(r.Context(), issueTypeSchemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllIssueTypeSchemes - Get all issue type schemes
func (c *IssueTypeSchemesAPIController) GetAllIssueTypeSchemes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
		param := id
		orderByParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	var queryStringParam string
	if query.Has("queryString") {
		param := query.Get("queryString")

		queryStringParam = param
	} else {
		param := 
		queryStringParam = param
	}
	result, err := c.service.GetAllIssueTypeSchemes(r.Context(), startAtParam, maxResultsParam, idParam, orderByParam, expandParam, queryStringParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeSchemeForProjects - Get issue type schemes for projects
func (c *IssueTypeSchemesAPIController) GetIssueTypeSchemeForProjects(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	projectIdParam, err := parseNumericArrayParameter[int64](
		query.Get("projectId"), ",", true,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetIssueTypeSchemeForProjects(r.Context(), projectIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeSchemesMapping - Get issue type scheme items
func (c *IssueTypeSchemesAPIController) GetIssueTypeSchemesMapping(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	issueTypeSchemeIdParam, err := parseNumericArrayParameter[int64](
		query.Get("issueTypeSchemeId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetIssueTypeSchemesMapping(r.Context(), startAtParam, maxResultsParam, issueTypeSchemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveIssueTypeFromIssueTypeScheme - Remove issue type from issue type scheme
func (c *IssueTypeSchemesAPIController) RemoveIssueTypeFromIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeIdParam, err := parseNumericParameter[int64](
		params["issueTypeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.RemoveIssueTypeFromIssueTypeScheme(r.Context(), issueTypeSchemeIdParam, issueTypeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReorderIssueTypesInIssueTypeScheme - Change order of issue types
func (c *IssueTypeSchemesAPIController) ReorderIssueTypesInIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	orderOfIssueTypesParam := OrderOfIssueTypes{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&orderOfIssueTypesParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOrderOfIssueTypesRequired(orderOfIssueTypesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOrderOfIssueTypesConstraints(orderOfIssueTypesParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReorderIssueTypesInIssueTypeScheme(r.Context(), issueTypeSchemeIdParam, orderOfIssueTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssueTypeScheme - Update issue type scheme
func (c *IssueTypeSchemesAPIController) UpdateIssueTypeScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeSchemeUpdateDetailsParam := IssueTypeSchemeUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeSchemeUpdateDetailsRequired(issueTypeSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeSchemeUpdateDetailsConstraints(issueTypeSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssueTypeScheme(r.Context(), issueTypeSchemeIdParam, issueTypeSchemeUpdateDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
