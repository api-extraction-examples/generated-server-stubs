/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectRoleActorsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectRoleActorsAPIController struct {
	service ProjectRoleActorsAPIServicer
	errorHandler ErrorHandler
}

// ProjectRoleActorsAPIOption for how the controller is set up.
type ProjectRoleActorsAPIOption func(*ProjectRoleActorsAPIController)

// WithProjectRoleActorsAPIErrorHandler inject ErrorHandler into controller
func WithProjectRoleActorsAPIErrorHandler(h ErrorHandler) ProjectRoleActorsAPIOption {
	return func(c *ProjectRoleActorsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectRoleActorsAPIController creates a default api controller
func NewProjectRoleActorsAPIController(s ProjectRoleActorsAPIServicer, opts ...ProjectRoleActorsAPIOption) Router {
	controller := &ProjectRoleActorsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectRoleActorsAPIController
func (c *ProjectRoleActorsAPIController) Routes() Routes {
	return Routes{
		"AddActorUsers": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project/{projectIdOrKey}/role/{id}",
			c.AddActorUsers,
		},
		"AddProjectRoleActorsToRole": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/role/{id}/actors",
			c.AddProjectRoleActorsToRole,
		},
		"DeleteActor": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/project/{projectIdOrKey}/role/{id}",
			c.DeleteActor,
		},
		"DeleteProjectRoleActorsFromRole": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/role/{id}/actors",
			c.DeleteProjectRoleActorsFromRole,
		},
		"GetProjectRoleActorsForRole": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/role/{id}/actors",
			c.GetProjectRoleActorsForRole,
		},
		"SetActors": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}/role/{id}",
			c.SetActors,
		},
	}
}

// AddActorUsers - Add actors to project role
func (c *ProjectRoleActorsAPIController) AddActorUsers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	actorsMapParam := ActorsMap{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actorsMapParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActorsMapRequired(actorsMapParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActorsMapConstraints(actorsMapParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddActorUsers(r.Context(), projectIdOrKeyParam, idParam, actorsMapParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddProjectRoleActorsToRole - Add default actors to project role
func (c *ProjectRoleActorsAPIController) AddProjectRoleActorsToRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	actorInputBeanParam := ActorInputBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&actorInputBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertActorInputBeanRequired(actorInputBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertActorInputBeanConstraints(actorInputBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddProjectRoleActorsToRole(r.Context(), idParam, actorInputBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteActor - Delete actors from project role
func (c *ProjectRoleActorsAPIController) DeleteActor(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var groupParam string
	if query.Has("group") {
		param := query.Get("group")

		groupParam = param
	} else {
	}
	var groupIdParam string
	if query.Has("groupId") {
		param := query.Get("groupId")

		groupIdParam = param
	} else {
	}
	result, err := c.service.DeleteActor(r.Context(), projectIdOrKeyParam, idParam, userParam, groupParam, groupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProjectRoleActorsFromRole - Delete default actors from project role
func (c *ProjectRoleActorsAPIController) DeleteProjectRoleActorsFromRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var userParam string
	if query.Has("user") {
		param := query.Get("user")

		userParam = param
	} else {
	}
	var groupIdParam string
	if query.Has("groupId") {
		param := query.Get("groupId")

		groupIdParam = param
	} else {
	}
	var groupParam string
	if query.Has("group") {
		param := query.Get("group")

		groupParam = param
	} else {
	}
	result, err := c.service.DeleteProjectRoleActorsFromRole(r.Context(), idParam, userParam, groupIdParam, groupParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectRoleActorsForRole - Get default actors for project role
func (c *ProjectRoleActorsAPIController) GetProjectRoleActorsForRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetProjectRoleActorsForRole(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetActors - Set actors for project role
func (c *ProjectRoleActorsAPIController) SetActors(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	projectRoleActorsUpdateBeanParam := ProjectRoleActorsUpdateBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectRoleActorsUpdateBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectRoleActorsUpdateBeanRequired(projectRoleActorsUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectRoleActorsUpdateBeanConstraints(projectRoleActorsUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetActors(r.Context(), projectIdOrKeyParam, idParam, projectRoleActorsUpdateBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
