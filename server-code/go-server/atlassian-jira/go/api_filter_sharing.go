/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FilterSharingAPIController binds http requests to an api service and writes the service results to the http response
type FilterSharingAPIController struct {
	service FilterSharingAPIServicer
	errorHandler ErrorHandler
}

// FilterSharingAPIOption for how the controller is set up.
type FilterSharingAPIOption func(*FilterSharingAPIController)

// WithFilterSharingAPIErrorHandler inject ErrorHandler into controller
func WithFilterSharingAPIErrorHandler(h ErrorHandler) FilterSharingAPIOption {
	return func(c *FilterSharingAPIController) {
		c.errorHandler = h
	}
}

// NewFilterSharingAPIController creates a default api controller
func NewFilterSharingAPIController(s FilterSharingAPIServicer, opts ...FilterSharingAPIOption) Router {
	controller := &FilterSharingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FilterSharingAPIController
func (c *FilterSharingAPIController) Routes() Routes {
	return Routes{
		"AddSharePermission": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/filter/{id}/permission",
			c.AddSharePermission,
		},
		"DeleteSharePermission": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/filter/{id}/permission/{permissionId}",
			c.DeleteSharePermission,
		},
		"GetDefaultShareScope": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/defaultShareScope",
			c.GetDefaultShareScope,
		},
		"GetSharePermission": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/{id}/permission/{permissionId}",
			c.GetSharePermission,
		},
		"GetSharePermissions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/{id}/permission",
			c.GetSharePermissions,
		},
		"SetDefaultShareScope": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/filter/defaultShareScope",
			c.SetDefaultShareScope,
		},
	}
}

// AddSharePermission - Add share permission
func (c *FilterSharingAPIController) AddSharePermission(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	sharePermissionInputBeanParam := SharePermissionInputBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&sharePermissionInputBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSharePermissionInputBeanRequired(sharePermissionInputBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSharePermissionInputBeanConstraints(sharePermissionInputBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddSharePermission(r.Context(), idParam, sharePermissionInputBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSharePermission - Delete share permission
func (c *FilterSharingAPIController) DeleteSharePermission(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionIdParam, err := parseNumericParameter[int64](
		params["permissionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteSharePermission(r.Context(), idParam, permissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultShareScope - Get default share scope
func (c *FilterSharingAPIController) GetDefaultShareScope(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDefaultShareScope(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSharePermission - Get share permission
func (c *FilterSharingAPIController) GetSharePermission(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionIdParam, err := parseNumericParameter[int64](
		params["permissionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetSharePermission(r.Context(), idParam, permissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSharePermissions - Get share permissions
func (c *FilterSharingAPIController) GetSharePermissions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetSharePermissions(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetDefaultShareScope - Set default share scope
func (c *FilterSharingAPIController) SetDefaultShareScope(w http.ResponseWriter, r *http.Request) {
	defaultShareScopeParam := DefaultShareScope{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&defaultShareScopeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDefaultShareScopeRequired(defaultShareScopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDefaultShareScopeConstraints(defaultShareScopeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetDefaultShareScope(r.Context(), defaultShareScopeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
