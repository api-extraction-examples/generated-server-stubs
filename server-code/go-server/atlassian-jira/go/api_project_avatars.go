/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectAvatarsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectAvatarsAPIController struct {
	service ProjectAvatarsAPIServicer
	errorHandler ErrorHandler
}

// ProjectAvatarsAPIOption for how the controller is set up.
type ProjectAvatarsAPIOption func(*ProjectAvatarsAPIController)

// WithProjectAvatarsAPIErrorHandler inject ErrorHandler into controller
func WithProjectAvatarsAPIErrorHandler(h ErrorHandler) ProjectAvatarsAPIOption {
	return func(c *ProjectAvatarsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectAvatarsAPIController creates a default api controller
func NewProjectAvatarsAPIController(s ProjectAvatarsAPIServicer, opts ...ProjectAvatarsAPIOption) Router {
	controller := &ProjectAvatarsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectAvatarsAPIController
func (c *ProjectAvatarsAPIController) Routes() Routes {
	return Routes{
		"CreateProjectAvatar": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project/{projectIdOrKey}/avatar2",
			c.CreateProjectAvatar,
		},
		"DeleteProjectAvatar": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/project/{projectIdOrKey}/avatar/{id}",
			c.DeleteProjectAvatar,
		},
		"GetAllProjectAvatars": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/avatars",
			c.GetAllProjectAvatars,
		},
		"UpdateProjectAvatar": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}/avatar",
			c.UpdateProjectAvatar,
		},
	}
}

// CreateProjectAvatar - Load project avatar
func (c *ProjectAvatarsAPIController) CreateProjectAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var xParam int32
	if query.Has("x") {
		param, err := parseNumericParameter[int32](
			query.Get("x"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		xParam = param
	} else {
		var param int32 = 0
		xParam = param
	}
	var yParam int32
	if query.Has("y") {
		param, err := parseNumericParameter[int32](
			query.Get("y"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yParam = param
	} else {
		var param int32 = 0
		yParam = param
	}
	var sizeParam int32
	if query.Has("size") {
		param, err := parseNumericParameter[int32](
			query.Get("size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sizeParam = param
	} else {
	}
	result, err := c.service.CreateProjectAvatar(r.Context(), projectIdOrKeyParam, bodyParam, xParam, yParam, sizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProjectAvatar - Delete project avatar
func (c *ProjectAvatarsAPIController) DeleteProjectAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteProjectAvatar(r.Context(), projectIdOrKeyParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjectAvatars - Get all project avatars
func (c *ProjectAvatarsAPIController) GetAllProjectAvatars(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetAllProjectAvatars(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProjectAvatar - Set project avatar
func (c *ProjectAvatarsAPIController) UpdateProjectAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	avatarParam := Avatar{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&avatarParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAvatarRequired(avatarParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAvatarConstraints(avatarParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProjectAvatar(r.Context(), projectIdOrKeyParam, avatarParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
