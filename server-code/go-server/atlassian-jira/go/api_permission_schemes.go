/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PermissionSchemesAPIController binds http requests to an api service and writes the service results to the http response
type PermissionSchemesAPIController struct {
	service PermissionSchemesAPIServicer
	errorHandler ErrorHandler
}

// PermissionSchemesAPIOption for how the controller is set up.
type PermissionSchemesAPIOption func(*PermissionSchemesAPIController)

// WithPermissionSchemesAPIErrorHandler inject ErrorHandler into controller
func WithPermissionSchemesAPIErrorHandler(h ErrorHandler) PermissionSchemesAPIOption {
	return func(c *PermissionSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewPermissionSchemesAPIController creates a default api controller
func NewPermissionSchemesAPIController(s PermissionSchemesAPIServicer, opts ...PermissionSchemesAPIOption) Router {
	controller := &PermissionSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PermissionSchemesAPIController
func (c *PermissionSchemesAPIController) Routes() Routes {
	return Routes{
		"CreatePermissionGrant": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/permissionscheme/{schemeId}/permission",
			c.CreatePermissionGrant,
		},
		"CreatePermissionScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/permissionscheme",
			c.CreatePermissionScheme,
		},
		"DeletePermissionScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/permissionscheme/{schemeId}",
			c.DeletePermissionScheme,
		},
		"DeletePermissionSchemeEntity": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
			c.DeletePermissionSchemeEntity,
		},
		"GetAllPermissionSchemes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/permissionscheme",
			c.GetAllPermissionSchemes,
		},
		"GetPermissionScheme": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/permissionscheme/{schemeId}",
			c.GetPermissionScheme,
		},
		"GetPermissionSchemeGrant": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/permissionscheme/{schemeId}/permission/{permissionId}",
			c.GetPermissionSchemeGrant,
		},
		"GetPermissionSchemeGrants": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/permissionscheme/{schemeId}/permission",
			c.GetPermissionSchemeGrants,
		},
		"UpdatePermissionScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/permissionscheme/{schemeId}",
			c.UpdatePermissionScheme,
		},
	}
}

// CreatePermissionGrant - Create permission grant
func (c *PermissionSchemesAPIController) CreatePermissionGrant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionGrantParam := PermissionGrant{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionGrantParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionGrantRequired(permissionGrantParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionGrantConstraints(permissionGrantParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.CreatePermissionGrant(r.Context(), schemeIdParam, permissionGrantParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreatePermissionScheme - Create permission scheme
func (c *PermissionSchemesAPIController) CreatePermissionScheme(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	permissionSchemeParam := PermissionScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionSchemeRequired(permissionSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionSchemeConstraints(permissionSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.CreatePermissionScheme(r.Context(), permissionSchemeParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePermissionScheme - Delete permission scheme
func (c *PermissionSchemesAPIController) DeletePermissionScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeletePermissionScheme(r.Context(), schemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePermissionSchemeEntity - Delete permission scheme grant
func (c *PermissionSchemesAPIController) DeletePermissionSchemeEntity(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionIdParam, err := parseNumericParameter[int64](
		params["permissionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeletePermissionSchemeEntity(r.Context(), schemeIdParam, permissionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllPermissionSchemes - Get all permission schemes
func (c *PermissionSchemesAPIController) GetAllPermissionSchemes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetAllPermissionSchemes(r.Context(), expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermissionScheme - Get permission scheme
func (c *PermissionSchemesAPIController) GetPermissionScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetPermissionScheme(r.Context(), schemeIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermissionSchemeGrant - Get permission scheme grant
func (c *PermissionSchemesAPIController) GetPermissionSchemeGrant(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionIdParam, err := parseNumericParameter[int64](
		params["permissionId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetPermissionSchemeGrant(r.Context(), schemeIdParam, permissionIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPermissionSchemeGrants - Get permission scheme grants
func (c *PermissionSchemesAPIController) GetPermissionSchemeGrants(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetPermissionSchemeGrants(r.Context(), schemeIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePermissionScheme - Update permission scheme
func (c *PermissionSchemesAPIController) UpdatePermissionScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	schemeIdParam, err := parseNumericParameter[int64](
		params["schemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	permissionSchemeParam := PermissionScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&permissionSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPermissionSchemeRequired(permissionSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPermissionSchemeConstraints(permissionSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.UpdatePermissionScheme(r.Context(), schemeIdParam, permissionSchemeParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
