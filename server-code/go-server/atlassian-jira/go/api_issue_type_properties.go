/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueTypePropertiesAPIController binds http requests to an api service and writes the service results to the http response
type IssueTypePropertiesAPIController struct {
	service IssueTypePropertiesAPIServicer
	errorHandler ErrorHandler
}

// IssueTypePropertiesAPIOption for how the controller is set up.
type IssueTypePropertiesAPIOption func(*IssueTypePropertiesAPIController)

// WithIssueTypePropertiesAPIErrorHandler inject ErrorHandler into controller
func WithIssueTypePropertiesAPIErrorHandler(h ErrorHandler) IssueTypePropertiesAPIOption {
	return func(c *IssueTypePropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueTypePropertiesAPIController creates a default api controller
func NewIssueTypePropertiesAPIController(s IssueTypePropertiesAPIServicer, opts ...IssueTypePropertiesAPIOption) Router {
	controller := &IssueTypePropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueTypePropertiesAPIController
func (c *IssueTypePropertiesAPIController) Routes() Routes {
	return Routes{
		"DeleteIssueTypeProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
			c.DeleteIssueTypeProperty,
		},
		"GetIssueTypeProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
			c.GetIssueTypeProperty,
		},
		"GetIssueTypePropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype/{issueTypeId}/properties",
			c.GetIssueTypePropertyKeys,
		},
		"SetIssueTypeProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetype/{issueTypeId}/properties/{propertyKey}",
			c.SetIssueTypeProperty,
		},
	}
}

// DeleteIssueTypeProperty - Delete issue type property
func (c *IssueTypePropertiesAPIController) DeleteIssueTypeProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeIdParam := params["issueTypeId"]
	if issueTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteIssueTypeProperty(r.Context(), issueTypeIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeProperty - Get issue type property
func (c *IssueTypePropertiesAPIController) GetIssueTypeProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeIdParam := params["issueTypeId"]
	if issueTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetIssueTypeProperty(r.Context(), issueTypeIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypePropertyKeys - Get issue type property keys
func (c *IssueTypePropertiesAPIController) GetIssueTypePropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeIdParam := params["issueTypeId"]
	if issueTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeId"}, nil)
		return
	}
	result, err := c.service.GetIssueTypePropertyKeys(r.Context(), issueTypeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetIssueTypeProperty - Set issue type property
func (c *IssueTypePropertiesAPIController) SetIssueTypeProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeIdParam := params["issueTypeId"]
	if issueTypeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetIssueTypeProperty(r.Context(), issueTypeIdParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
