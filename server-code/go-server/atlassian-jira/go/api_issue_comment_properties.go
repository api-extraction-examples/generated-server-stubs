/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueCommentPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type IssueCommentPropertiesAPIController struct {
	service IssueCommentPropertiesAPIServicer
	errorHandler ErrorHandler
}

// IssueCommentPropertiesAPIOption for how the controller is set up.
type IssueCommentPropertiesAPIOption func(*IssueCommentPropertiesAPIController)

// WithIssueCommentPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithIssueCommentPropertiesAPIErrorHandler(h ErrorHandler) IssueCommentPropertiesAPIOption {
	return func(c *IssueCommentPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCommentPropertiesAPIController creates a default api controller
func NewIssueCommentPropertiesAPIController(s IssueCommentPropertiesAPIServicer, opts ...IssueCommentPropertiesAPIOption) Router {
	controller := &IssueCommentPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCommentPropertiesAPIController
func (c *IssueCommentPropertiesAPIController) Routes() Routes {
	return Routes{
		"DeleteCommentProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/comment/{commentId}/properties/{propertyKey}",
			c.DeleteCommentProperty,
		},
		"GetCommentProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/comment/{commentId}/properties/{propertyKey}",
			c.GetCommentProperty,
		},
		"GetCommentPropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/comment/{commentId}/properties",
			c.GetCommentPropertyKeys,
		},
		"SetCommentProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/comment/{commentId}/properties/{propertyKey}",
			c.SetCommentProperty,
		},
	}
}

// DeleteCommentProperty - Delete comment property
func (c *IssueCommentPropertiesAPIController) DeleteCommentProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.DeleteCommentProperty(r.Context(), commentIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCommentProperty - Get comment property
func (c *IssueCommentPropertiesAPIController) GetCommentProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.GetCommentProperty(r.Context(), commentIdParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCommentPropertyKeys - Get comment property keys
func (c *IssueCommentPropertiesAPIController) GetCommentPropertyKeys(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	result, err := c.service.GetCommentPropertyKeys(r.Context(), commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetCommentProperty - Set comment property
func (c *IssueCommentPropertiesAPIController) SetCommentProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	commentIdParam := params["commentId"]
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"commentId"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetCommentProperty(r.Context(), commentIdParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
