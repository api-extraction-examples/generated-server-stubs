/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TimeTrackingAPIController binds http requests to an api service and writes the service results to the http response
type TimeTrackingAPIController struct {
	service TimeTrackingAPIServicer
	errorHandler ErrorHandler
}

// TimeTrackingAPIOption for how the controller is set up.
type TimeTrackingAPIOption func(*TimeTrackingAPIController)

// WithTimeTrackingAPIErrorHandler inject ErrorHandler into controller
func WithTimeTrackingAPIErrorHandler(h ErrorHandler) TimeTrackingAPIOption {
	return func(c *TimeTrackingAPIController) {
		c.errorHandler = h
	}
}

// NewTimeTrackingAPIController creates a default api controller
func NewTimeTrackingAPIController(s TimeTrackingAPIServicer, opts ...TimeTrackingAPIOption) Router {
	controller := &TimeTrackingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TimeTrackingAPIController
func (c *TimeTrackingAPIController) Routes() Routes {
	return Routes{
		"GetAvailableTimeTrackingImplementations": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/configuration/timetracking/list",
			c.GetAvailableTimeTrackingImplementations,
		},
		"GetSelectedTimeTrackingImplementation": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/configuration/timetracking",
			c.GetSelectedTimeTrackingImplementation,
		},
		"GetSharedTimeTrackingConfiguration": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/configuration/timetracking/options",
			c.GetSharedTimeTrackingConfiguration,
		},
		"SelectTimeTrackingImplementation": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/configuration/timetracking",
			c.SelectTimeTrackingImplementation,
		},
		"SetSharedTimeTrackingConfiguration": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/configuration/timetracking/options",
			c.SetSharedTimeTrackingConfiguration,
		},
	}
}

// GetAvailableTimeTrackingImplementations - Get all time tracking providers
func (c *TimeTrackingAPIController) GetAvailableTimeTrackingImplementations(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAvailableTimeTrackingImplementations(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSelectedTimeTrackingImplementation - Get selected time tracking provider
func (c *TimeTrackingAPIController) GetSelectedTimeTrackingImplementation(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSelectedTimeTrackingImplementation(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSharedTimeTrackingConfiguration - Get time tracking settings
func (c *TimeTrackingAPIController) GetSharedTimeTrackingConfiguration(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSharedTimeTrackingConfiguration(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SelectTimeTrackingImplementation - Select time tracking provider
func (c *TimeTrackingAPIController) SelectTimeTrackingImplementation(w http.ResponseWriter, r *http.Request) {
	timeTrackingProviderParam := TimeTrackingProvider{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&timeTrackingProviderParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTimeTrackingProviderRequired(timeTrackingProviderParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTimeTrackingProviderConstraints(timeTrackingProviderParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SelectTimeTrackingImplementation(r.Context(), timeTrackingProviderParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetSharedTimeTrackingConfiguration - Set time tracking settings
func (c *TimeTrackingAPIController) SetSharedTimeTrackingConfiguration(w http.ResponseWriter, r *http.Request) {
	timeTrackingConfigurationParam := TimeTrackingConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&timeTrackingConfigurationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTimeTrackingConfigurationRequired(timeTrackingConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTimeTrackingConfigurationConstraints(timeTrackingConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetSharedTimeTrackingConfiguration(r.Context(), timeTrackingConfigurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
