/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// ProjectsAPIController binds http requests to an api service and writes the service results to the http response
type ProjectsAPIController struct {
	service ProjectsAPIServicer
	errorHandler ErrorHandler
}

// ProjectsAPIOption for how the controller is set up.
type ProjectsAPIOption func(*ProjectsAPIController)

// WithProjectsAPIErrorHandler inject ErrorHandler into controller
func WithProjectsAPIErrorHandler(h ErrorHandler) ProjectsAPIOption {
	return func(c *ProjectsAPIController) {
		c.errorHandler = h
	}
}

// NewProjectsAPIController creates a default api controller
func NewProjectsAPIController(s ProjectsAPIServicer, opts ...ProjectsAPIOption) Router {
	controller := &ProjectsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectsAPIController
func (c *ProjectsAPIController) Routes() Routes {
	return Routes{
		"ArchiveProject": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project/{projectIdOrKey}/archive",
			c.ArchiveProject,
		},
		"CreateProject": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project",
			c.CreateProject,
		},
		"DeleteProject": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/project/{projectIdOrKey}",
			c.DeleteProject,
		},
		"DeleteProjectAsynchronously": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project/{projectIdOrKey}/delete",
			c.DeleteProjectAsynchronously,
		},
		"GetAllProjects": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project",
			c.GetAllProjects,
		},
		"GetAllStatuses": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/statuses",
			c.GetAllStatuses,
		},
		"GetHierarchy": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectId}/hierarchy",
			c.GetHierarchy,
		},
		"GetNotificationSchemeForProject": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectKeyOrId}/notificationscheme",
			c.GetNotificationSchemeForProject,
		},
		"GetProject": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}",
			c.GetProject,
		},
		"GetRecent": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/recent",
			c.GetRecent,
		},
		"Restore": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/project/{projectIdOrKey}/restore",
			c.Restore,
		},
		"SearchProjects": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/search",
			c.SearchProjects,
		},
		"UpdateProject": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}",
			c.UpdateProject,
		},
		"UpdateProjectType": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}/type/{newProjectTypeKey}",
			c.UpdateProjectType,
		},
	}
}

// ArchiveProject - Archive project
func (c *ProjectsAPIController) ArchiveProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.ArchiveProject(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateProject - Create project
func (c *ProjectsAPIController) CreateProject(w http.ResponseWriter, r *http.Request) {
	createProjectDetailsParam := CreateProjectDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createProjectDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateProjectDetailsRequired(createProjectDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateProjectDetailsConstraints(createProjectDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProject(r.Context(), createProjectDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProject - Delete project
func (c *ProjectsAPIController) DeleteProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	var enableUndoParam bool
	if query.Has("enableUndo") {
		param, err := parseBoolParameter(
			query.Get("enableUndo"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUndoParam = param
	} else {
		var param bool = false
		enableUndoParam = param
	}
	result, err := c.service.DeleteProject(r.Context(), projectIdOrKeyParam, enableUndoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProjectAsynchronously - Delete project asynchronously
func (c *ProjectsAPIController) DeleteProjectAsynchronously(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.DeleteProjectAsynchronously(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjects - Get all projects
// Deprecated
func (c *ProjectsAPIController) GetAllProjects(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var recentParam int32
	if query.Has("recent") {
		param, err := parseNumericParameter[int32](
			query.Get("recent"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recentParam = param
	} else {
	}
	var propertiesParam []string
	if query.Has("properties") {
		propertiesParam = strings.Split(query.Get("properties"), ",")
	}
	result, err := c.service.GetAllProjects(r.Context(), expandParam, recentParam, propertiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllStatuses - Get all statuses for project
func (c *ProjectsAPIController) GetAllStatuses(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetAllStatuses(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHierarchy - Get project issue type hierarchy
// Deprecated
func (c *ProjectsAPIController) GetHierarchy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdParam, err := parseNumericParameter[int64](
		params["projectId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetHierarchy(r.Context(), projectIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNotificationSchemeForProject - Get project notification scheme
// Deprecated
func (c *ProjectsAPIController) GetNotificationSchemeForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectKeyOrIdParam := params["projectKeyOrId"]
	if projectKeyOrIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectKeyOrId"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetNotificationSchemeForProject(r.Context(), projectKeyOrIdParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProject - Get project
func (c *ProjectsAPIController) GetProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var propertiesParam []string
	if query.Has("properties") {
		propertiesParam = strings.Split(query.Get("properties"), ",")
	}
	result, err := c.service.GetProject(r.Context(), projectIdOrKeyParam, expandParam, propertiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecent - Get recent projects
func (c *ProjectsAPIController) GetRecent(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var propertiesParam []string
	if query.Has("properties") {
		propertiesParam = strings.Split(query.Get("properties"), ",")
	}
	result, err := c.service.GetRecent(r.Context(), expandParam, propertiesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Restore - Restore deleted or archived project
func (c *ProjectsAPIController) Restore(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.Restore(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchProjects - Get projects paginated
func (c *ProjectsAPIController) SearchProjects(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
		param := key
		orderByParam = param
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var keysParam []string
	if query.Has("keys") {
		keysParam = strings.Split(query.Get("keys"), ",")
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
	}
	var typeKeyParam string
	if query.Has("typeKey") {
		param := query.Get("typeKey")

		typeKeyParam = param
	} else {
	}
	var categoryIdParam int64
	if query.Has("categoryId") {
		param, err := parseNumericParameter[int64](
			query.Get("categoryId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		categoryIdParam = param
	} else {
	}
	var actionParam string
	if query.Has("action") {
		param := query.Get("action")

		actionParam = param
	} else {
		param := view
		actionParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var statusParam []string
	if query.Has("status") {
		statusParam = strings.Split(query.Get("status"), ",")
	}
	var propertiesParam []string
	if query.Has("properties") {
		propertiesParam = strings.Split(query.Get("properties"), ",")
	}
	var propertyQueryParam string
	if query.Has("propertyQuery") {
		param := query.Get("propertyQuery")

		propertyQueryParam = param
	} else {
	}
	result, err := c.service.SearchProjects(r.Context(), startAtParam, maxResultsParam, orderByParam, idParam, keysParam, queryParam, typeKeyParam, categoryIdParam, actionParam, expandParam, statusParam, propertiesParam, propertyQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProject - Update project
func (c *ProjectsAPIController) UpdateProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	updateProjectDetailsParam := UpdateProjectDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateProjectDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateProjectDetailsRequired(updateProjectDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateProjectDetailsConstraints(updateProjectDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.UpdateProject(r.Context(), projectIdOrKeyParam, updateProjectDetailsParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProjectType - Update project type
// Deprecated
func (c *ProjectsAPIController) UpdateProjectType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	newProjectTypeKeyParam := params["newProjectTypeKey"]
	if newProjectTypeKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"newProjectTypeKey"}, nil)
		return
	}
	result, err := c.service.UpdateProjectType(r.Context(), projectIdOrKeyParam, newProjectTypeKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
