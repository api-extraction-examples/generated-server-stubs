/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// JQLAPIController binds http requests to an api service and writes the service results to the http response
type JQLAPIController struct {
	service JQLAPIServicer
	errorHandler ErrorHandler
}

// JQLAPIOption for how the controller is set up.
type JQLAPIOption func(*JQLAPIController)

// WithJQLAPIErrorHandler inject ErrorHandler into controller
func WithJQLAPIErrorHandler(h ErrorHandler) JQLAPIOption {
	return func(c *JQLAPIController) {
		c.errorHandler = h
	}
}

// NewJQLAPIController creates a default api controller
func NewJQLAPIController(s JQLAPIServicer, opts ...JQLAPIOption) Router {
	controller := &JQLAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the JQLAPIController
func (c *JQLAPIController) Routes() Routes {
	return Routes{
		"GetAutoComplete": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/jql/autocompletedata",
			c.GetAutoComplete,
		},
		"GetAutoCompletePost": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/jql/autocompletedata",
			c.GetAutoCompletePost,
		},
		"GetFieldAutoCompleteForQueryString": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/jql/autocompletedata/suggestions",
			c.GetFieldAutoCompleteForQueryString,
		},
		"MigrateQueries": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/jql/pdcleaner",
			c.MigrateQueries,
		},
		"ParseJqlQueries": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/jql/parse",
			c.ParseJqlQueries,
		},
		"SanitiseJqlQueries": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/jql/sanitize",
			c.SanitiseJqlQueries,
		},
	}
}

// GetAutoComplete - Get field reference data (GET)
func (c *JQLAPIController) GetAutoComplete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAutoComplete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAutoCompletePost - Get field reference data (POST)
func (c *JQLAPIController) GetAutoCompletePost(w http.ResponseWriter, r *http.Request) {
	searchAutoCompleteFilterParam := SearchAutoCompleteFilter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&searchAutoCompleteFilterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSearchAutoCompleteFilterRequired(searchAutoCompleteFilterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSearchAutoCompleteFilterConstraints(searchAutoCompleteFilterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetAutoCompletePost(r.Context(), searchAutoCompleteFilterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFieldAutoCompleteForQueryString - Get field auto complete suggestions
func (c *JQLAPIController) GetFieldAutoCompleteForQueryString(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var fieldNameParam string
	if query.Has("fieldName") {
		param := query.Get("fieldName")

		fieldNameParam = param
	} else {
	}
	var fieldValueParam string
	if query.Has("fieldValue") {
		param := query.Get("fieldValue")

		fieldValueParam = param
	} else {
	}
	var predicateNameParam string
	if query.Has("predicateName") {
		param := query.Get("predicateName")

		predicateNameParam = param
	} else {
	}
	var predicateValueParam string
	if query.Has("predicateValue") {
		param := query.Get("predicateValue")

		predicateValueParam = param
	} else {
	}
	result, err := c.service.GetFieldAutoCompleteForQueryString(r.Context(), fieldNameParam, fieldValueParam, predicateNameParam, predicateValueParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MigrateQueries - Convert user identifiers to account IDs in JQL queries
func (c *JQLAPIController) MigrateQueries(w http.ResponseWriter, r *http.Request) {
	jqlPersonalDataMigrationRequestParam := JqlPersonalDataMigrationRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jqlPersonalDataMigrationRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJqlPersonalDataMigrationRequestRequired(jqlPersonalDataMigrationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJqlPersonalDataMigrationRequestConstraints(jqlPersonalDataMigrationRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.MigrateQueries(r.Context(), jqlPersonalDataMigrationRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ParseJqlQueries - Parse JQL query
func (c *JQLAPIController) ParseJqlQueries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jqlQueriesToParseParam := JqlQueriesToParse{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jqlQueriesToParseParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJqlQueriesToParseRequired(jqlQueriesToParseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJqlQueriesToParseConstraints(jqlQueriesToParseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var validationParam string
	if query.Has("validation") {
		param := query.Get("validation")

		validationParam = param
	} else {
		param := strict
		validationParam = param
	}
	result, err := c.service.ParseJqlQueries(r.Context(), jqlQueriesToParseParam, validationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SanitiseJqlQueries - Sanitize JQL queries
func (c *JQLAPIController) SanitiseJqlQueries(w http.ResponseWriter, r *http.Request) {
	jqlQueriesToSanitizeParam := JqlQueriesToSanitize{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jqlQueriesToSanitizeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJqlQueriesToSanitizeRequired(jqlQueriesToSanitizeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJqlQueriesToSanitizeConstraints(jqlQueriesToSanitizeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SanitiseJqlQueries(r.Context(), jqlQueriesToSanitizeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
