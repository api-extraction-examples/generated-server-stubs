/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WebhooksAPIController binds http requests to an api service and writes the service results to the http response
type WebhooksAPIController struct {
	service WebhooksAPIServicer
	errorHandler ErrorHandler
}

// WebhooksAPIOption for how the controller is set up.
type WebhooksAPIOption func(*WebhooksAPIController)

// WithWebhooksAPIErrorHandler inject ErrorHandler into controller
func WithWebhooksAPIErrorHandler(h ErrorHandler) WebhooksAPIOption {
	return func(c *WebhooksAPIController) {
		c.errorHandler = h
	}
}

// NewWebhooksAPIController creates a default api controller
func NewWebhooksAPIController(s WebhooksAPIServicer, opts ...WebhooksAPIOption) Router {
	controller := &WebhooksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WebhooksAPIController
func (c *WebhooksAPIController) Routes() Routes {
	return Routes{
		"DeleteWebhookById": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/webhook",
			c.DeleteWebhookById,
		},
		"GetDynamicWebhooksForApp": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/webhook",
			c.GetDynamicWebhooksForApp,
		},
		"GetFailedWebhooks": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/webhook/failed",
			c.GetFailedWebhooks,
		},
		"RefreshWebhooks": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/webhook/refresh",
			c.RefreshWebhooks,
		},
		"RegisterDynamicWebhooks": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/webhook",
			c.RegisterDynamicWebhooks,
		},
	}
}

// DeleteWebhookById - Delete webhooks by ID
func (c *WebhooksAPIController) DeleteWebhookById(w http.ResponseWriter, r *http.Request) {
	containerForWebhookIdsParam := ContainerForWebhookIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContainerForWebhookIdsRequired(containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContainerForWebhookIdsConstraints(containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DeleteWebhookById(r.Context(), containerForWebhookIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDynamicWebhooksForApp - Get dynamic webhooks for app
func (c *WebhooksAPIController) GetDynamicWebhooksForApp(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 100
		maxResultsParam = param
	}
	result, err := c.service.GetDynamicWebhooksForApp(r.Context(), startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFailedWebhooks - Get failed webhooks
func (c *WebhooksAPIController) GetFailedWebhooks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
	}
	var afterParam int64
	if query.Has("after") {
		param, err := parseNumericParameter[int64](
			query.Get("after"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		afterParam = param
	} else {
	}
	result, err := c.service.GetFailedWebhooks(r.Context(), maxResultsParam, afterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RefreshWebhooks - Extend webhook life
func (c *WebhooksAPIController) RefreshWebhooks(w http.ResponseWriter, r *http.Request) {
	containerForWebhookIdsParam := ContainerForWebhookIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertContainerForWebhookIdsRequired(containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertContainerForWebhookIdsConstraints(containerForWebhookIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RefreshWebhooks(r.Context(), containerForWebhookIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RegisterDynamicWebhooks - Register dynamic webhooks
func (c *WebhooksAPIController) RegisterDynamicWebhooks(w http.ResponseWriter, r *http.Request) {
	webhookRegistrationDetailsParam := WebhookRegistrationDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&webhookRegistrationDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWebhookRegistrationDetailsRequired(webhookRegistrationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWebhookRegistrationDetailsConstraints(webhookRegistrationDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RegisterDynamicWebhooks(r.Context(), webhookRegistrationDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
