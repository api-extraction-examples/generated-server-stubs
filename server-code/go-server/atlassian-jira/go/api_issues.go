/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssuesAPIController binds http requests to an api service and writes the service results to the http response
type IssuesAPIController struct {
	service IssuesAPIServicer
	errorHandler ErrorHandler
}

// IssuesAPIOption for how the controller is set up.
type IssuesAPIOption func(*IssuesAPIController)

// WithIssuesAPIErrorHandler inject ErrorHandler into controller
func WithIssuesAPIErrorHandler(h ErrorHandler) IssuesAPIOption {
	return func(c *IssuesAPIController) {
		c.errorHandler = h
	}
}

// NewIssuesAPIController creates a default api controller
func NewIssuesAPIController(s IssuesAPIServicer, opts ...IssuesAPIOption) Router {
	controller := &IssuesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssuesAPIController
func (c *IssuesAPIController) Routes() Routes {
	return Routes{
		"AssignIssue": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/assignee",
			c.AssignIssue,
		},
		"CreateIssue": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue",
			c.CreateIssue,
		},
		"CreateIssues": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/bulk",
			c.CreateIssues,
		},
		"DeleteIssue": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}",
			c.DeleteIssue,
		},
		"DoTransition": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/transitions",
			c.DoTransition,
		},
		"EditIssue": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}",
			c.EditIssue,
		},
		"GetChangeLogs": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/changelog",
			c.GetChangeLogs,
		},
		"GetChangeLogsByIds": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/changelog/list",
			c.GetChangeLogsByIds,
		},
		"GetCreateIssueMeta": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/createmeta",
			c.GetCreateIssueMeta,
		},
		"GetEditIssueMeta": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/editmeta",
			c.GetEditIssueMeta,
		},
		"GetEvents": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/events",
			c.GetEvents,
		},
		"GetIssue": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}",
			c.GetIssue,
		},
		"GetTransitions": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/transitions",
			c.GetTransitions,
		},
		"Notify": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/notify",
			c.Notify,
		},
	}
}

// AssignIssue - Assign issue
func (c *IssuesAPIController) AssignIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	userParam := User{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserRequired(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConstraints(userParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssignIssue(r.Context(), issueIdOrKeyParam, userParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateIssue - Create issue
func (c *IssuesAPIController) CreateIssue(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	issueUpdateDetailsParam := IssueUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueUpdateDetailsRequired(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueUpdateDetailsConstraints(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var updateHistoryParam bool
	if query.Has("updateHistory") {
		param, err := parseBoolParameter(
			query.Get("updateHistory"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		updateHistoryParam = param
	} else {
		var param bool = false
		updateHistoryParam = param
	}
	result, err := c.service.CreateIssue(r.Context(), issueUpdateDetailsParam, updateHistoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateIssues - Bulk create issue
func (c *IssuesAPIController) CreateIssues(w http.ResponseWriter, r *http.Request) {
	issuesUpdateBeanParam := IssuesUpdateBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issuesUpdateBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssuesUpdateBeanRequired(issuesUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssuesUpdateBeanConstraints(issuesUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssues(r.Context(), issuesUpdateBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssue - Delete issue
func (c *IssuesAPIController) DeleteIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var deleteSubtasksParam string
	if query.Has("deleteSubtasks") {
		param := query.Get("deleteSubtasks")

		deleteSubtasksParam = param
	} else {
		param := false
		deleteSubtasksParam = param
	}
	result, err := c.service.DeleteIssue(r.Context(), issueIdOrKeyParam, deleteSubtasksParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DoTransition - Transition issue
func (c *IssuesAPIController) DoTransition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	issueUpdateDetailsParam := IssueUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueUpdateDetailsRequired(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueUpdateDetailsConstraints(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DoTransition(r.Context(), issueIdOrKeyParam, issueUpdateDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EditIssue - Edit issue
func (c *IssuesAPIController) EditIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	issueUpdateDetailsParam := IssueUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueUpdateDetailsRequired(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueUpdateDetailsConstraints(issueUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyUsersParam bool
	if query.Has("notifyUsers") {
		param, err := parseBoolParameter(
			query.Get("notifyUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyUsersParam = param
	} else {
		var param bool = true
		notifyUsersParam = param
	}
	var overrideScreenSecurityParam bool
	if query.Has("overrideScreenSecurity") {
		param, err := parseBoolParameter(
			query.Get("overrideScreenSecurity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideScreenSecurityParam = param
	} else {
		var param bool = false
		overrideScreenSecurityParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.EditIssue(r.Context(), issueIdOrKeyParam, issueUpdateDetailsParam, notifyUsersParam, overrideScreenSecurityParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChangeLogs - Get changelogs
func (c *IssuesAPIController) GetChangeLogs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var startAtParam int32
	if query.Has("startAt") {
		param, err := parseNumericParameter[int32](
			query.Get("startAt"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int32 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 100
		maxResultsParam = param
	}
	result, err := c.service.GetChangeLogs(r.Context(), issueIdOrKeyParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChangeLogsByIds - Get changelogs by IDs
func (c *IssuesAPIController) GetChangeLogsByIds(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	issueChangelogIdsParam := IssueChangelogIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueChangelogIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueChangelogIdsRequired(issueChangelogIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueChangelogIdsConstraints(issueChangelogIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetChangeLogsByIds(r.Context(), issueIdOrKeyParam, issueChangelogIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCreateIssueMeta - Get create issue metadata
func (c *IssuesAPIController) GetCreateIssueMeta(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var projectIdsParam []string
	if query.Has("projectIds") {
		projectIdsParam = strings.Split(query.Get("projectIds"), ",")
	}
	var projectKeysParam []string
	if query.Has("projectKeys") {
		projectKeysParam = strings.Split(query.Get("projectKeys"), ",")
	}
	var issuetypeIdsParam []string
	if query.Has("issuetypeIds") {
		issuetypeIdsParam = strings.Split(query.Get("issuetypeIds"), ",")
	}
	var issuetypeNamesParam []string
	if query.Has("issuetypeNames") {
		issuetypeNamesParam = strings.Split(query.Get("issuetypeNames"), ",")
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetCreateIssueMeta(r.Context(), projectIdsParam, projectKeysParam, issuetypeIdsParam, issuetypeNamesParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEditIssueMeta - Get edit issue metadata
func (c *IssuesAPIController) GetEditIssueMeta(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var overrideScreenSecurityParam bool
	if query.Has("overrideScreenSecurity") {
		param, err := parseBoolParameter(
			query.Get("overrideScreenSecurity"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideScreenSecurityParam = param
	} else {
		var param bool = false
		overrideScreenSecurityParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	result, err := c.service.GetEditIssueMeta(r.Context(), issueIdOrKeyParam, overrideScreenSecurityParam, overrideEditableFlagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetEvents - Get events
func (c *IssuesAPIController) GetEvents(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetEvents(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssue - Get issue
func (c *IssuesAPIController) GetIssue(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var fieldsParam []string
	if query.Has("fields") {
		fieldsParam = strings.Split(query.Get("fields"), ",")
	}
	var fieldsByKeysParam bool
	if query.Has("fieldsByKeys") {
		param, err := parseBoolParameter(
			query.Get("fieldsByKeys"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		fieldsByKeysParam = param
	} else {
		var param bool = false
		fieldsByKeysParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var propertiesParam []string
	if query.Has("properties") {
		propertiesParam = strings.Split(query.Get("properties"), ",")
	}
	var updateHistoryParam bool
	if query.Has("updateHistory") {
		param, err := parseBoolParameter(
			query.Get("updateHistory"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		updateHistoryParam = param
	} else {
		var param bool = false
		updateHistoryParam = param
	}
	result, err := c.service.GetIssue(r.Context(), issueIdOrKeyParam, fieldsParam, fieldsByKeysParam, expandParam, propertiesParam, updateHistoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransitions - Get transitions
func (c *IssuesAPIController) GetTransitions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var transitionIdParam string
	if query.Has("transitionId") {
		param := query.Get("transitionId")

		transitionIdParam = param
	} else {
	}
	var skipRemoteOnlyConditionParam bool
	if query.Has("skipRemoteOnlyCondition") {
		param, err := parseBoolParameter(
			query.Get("skipRemoteOnlyCondition"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		skipRemoteOnlyConditionParam = param
	} else {
		var param bool = false
		skipRemoteOnlyConditionParam = param
	}
	var includeUnavailableTransitionsParam bool
	if query.Has("includeUnavailableTransitions") {
		param, err := parseBoolParameter(
			query.Get("includeUnavailableTransitions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeUnavailableTransitionsParam = param
	} else {
		var param bool = false
		includeUnavailableTransitionsParam = param
	}
	var sortByOpsBarAndStatusParam bool
	if query.Has("sortByOpsBarAndStatus") {
		param, err := parseBoolParameter(
			query.Get("sortByOpsBarAndStatus"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sortByOpsBarAndStatusParam = param
	} else {
		var param bool = false
		sortByOpsBarAndStatusParam = param
	}
	result, err := c.service.GetTransitions(r.Context(), issueIdOrKeyParam, expandParam, transitionIdParam, skipRemoteOnlyConditionParam, includeUnavailableTransitionsParam, sortByOpsBarAndStatusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Notify - Send notification for issue
func (c *IssuesAPIController) Notify(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	notificationParam := Notification{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&notificationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNotificationRequired(notificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNotificationConstraints(notificationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Notify(r.Context(), issueIdOrKeyParam, notificationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
