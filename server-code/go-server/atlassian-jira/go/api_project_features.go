/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectFeaturesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectFeaturesAPIController struct {
	service ProjectFeaturesAPIServicer
	errorHandler ErrorHandler
}

// ProjectFeaturesAPIOption for how the controller is set up.
type ProjectFeaturesAPIOption func(*ProjectFeaturesAPIController)

// WithProjectFeaturesAPIErrorHandler inject ErrorHandler into controller
func WithProjectFeaturesAPIErrorHandler(h ErrorHandler) ProjectFeaturesAPIOption {
	return func(c *ProjectFeaturesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectFeaturesAPIController creates a default api controller
func NewProjectFeaturesAPIController(s ProjectFeaturesAPIServicer, opts ...ProjectFeaturesAPIOption) Router {
	controller := &ProjectFeaturesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectFeaturesAPIController
func (c *ProjectFeaturesAPIController) Routes() Routes {
	return Routes{
		"GetFeaturesForProject": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/{projectIdOrKey}/features",
			c.GetFeaturesForProject,
		},
		"ToggleFeatureForProject": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/project/{projectIdOrKey}/features/{featureKey}",
			c.ToggleFeatureForProject,
		},
	}
}

// GetFeaturesForProject - Get project features
func (c *ProjectFeaturesAPIController) GetFeaturesForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	result, err := c.service.GetFeaturesForProject(r.Context(), projectIdOrKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ToggleFeatureForProject - Set project feature state
func (c *ProjectFeaturesAPIController) ToggleFeatureForProject(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectIdOrKeyParam := params["projectIdOrKey"]
	if projectIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectIdOrKey"}, nil)
		return
	}
	featureKeyParam := params["featureKey"]
	if featureKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"featureKey"}, nil)
		return
	}
	projectFeatureStateParam := ProjectFeatureState{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&projectFeatureStateParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProjectFeatureStateRequired(projectFeatureStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProjectFeatureStateConstraints(projectFeatureStateParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ToggleFeatureForProject(r.Context(), projectIdOrKeyParam, featureKeyParam, projectFeatureStateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
