/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// WorkflowSchemeDraftsAPIController binds http requests to an api service and writes the service results to the http response
type WorkflowSchemeDraftsAPIController struct {
	service WorkflowSchemeDraftsAPIServicer
	errorHandler ErrorHandler
}

// WorkflowSchemeDraftsAPIOption for how the controller is set up.
type WorkflowSchemeDraftsAPIOption func(*WorkflowSchemeDraftsAPIController)

// WithWorkflowSchemeDraftsAPIErrorHandler inject ErrorHandler into controller
func WithWorkflowSchemeDraftsAPIErrorHandler(h ErrorHandler) WorkflowSchemeDraftsAPIOption {
	return func(c *WorkflowSchemeDraftsAPIController) {
		c.errorHandler = h
	}
}

// NewWorkflowSchemeDraftsAPIController creates a default api controller
func NewWorkflowSchemeDraftsAPIController(s WorkflowSchemeDraftsAPIServicer, opts ...WorkflowSchemeDraftsAPIOption) Router {
	controller := &WorkflowSchemeDraftsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the WorkflowSchemeDraftsAPIController
func (c *WorkflowSchemeDraftsAPIController) Routes() Routes {
	return Routes{
		"CreateWorkflowSchemeDraftFromParent": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/workflowscheme/{id}/createdraft",
			c.CreateWorkflowSchemeDraftFromParent,
		},
		"DeleteDraftDefaultWorkflow": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/draft/default",
			c.DeleteDraftDefaultWorkflow,
		},
		"DeleteDraftWorkflowMapping": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/draft/workflow",
			c.DeleteDraftWorkflowMapping,
		},
		"DeleteWorkflowSchemeDraft": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/draft",
			c.DeleteWorkflowSchemeDraft,
		},
		"DeleteWorkflowSchemeDraftIssueType": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
			c.DeleteWorkflowSchemeDraftIssueType,
		},
		"GetDraftDefaultWorkflow": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/draft/default",
			c.GetDraftDefaultWorkflow,
		},
		"GetDraftWorkflow": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/draft/workflow",
			c.GetDraftWorkflow,
		},
		"GetWorkflowSchemeDraft": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/draft",
			c.GetWorkflowSchemeDraft,
		},
		"GetWorkflowSchemeDraftIssueType": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
			c.GetWorkflowSchemeDraftIssueType,
		},
		"PublishDraftWorkflowScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/workflowscheme/{id}/draft/publish",
			c.PublishDraftWorkflowScheme,
		},
		"SetWorkflowSchemeDraftIssueType": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/draft/issuetype/{issueType}",
			c.SetWorkflowSchemeDraftIssueType,
		},
		"UpdateDraftDefaultWorkflow": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/draft/default",
			c.UpdateDraftDefaultWorkflow,
		},
		"UpdateDraftWorkflowMapping": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/draft/workflow",
			c.UpdateDraftWorkflowMapping,
		},
		"UpdateWorkflowSchemeDraft": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/workflowscheme/{id}/draft",
			c.UpdateWorkflowSchemeDraft,
		},
	}
}

// CreateWorkflowSchemeDraftFromParent - Create draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) CreateWorkflowSchemeDraftFromParent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.CreateWorkflowSchemeDraftFromParent(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDraftDefaultWorkflow - Delete draft default workflow
func (c *WorkflowSchemeDraftsAPIController) DeleteDraftDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteDraftDefaultWorkflow(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteDraftWorkflowMapping - Delete issue types for workflow in draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) DeleteDraftWorkflowMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	result, err := c.service.DeleteDraftWorkflowMapping(r.Context(), idParam, workflowNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowSchemeDraft - Delete draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) DeleteWorkflowSchemeDraft(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteWorkflowSchemeDraft(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteWorkflowSchemeDraftIssueType - Delete workflow for issue type in draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) DeleteWorkflowSchemeDraftIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	result, err := c.service.DeleteWorkflowSchemeDraftIssueType(r.Context(), idParam, issueTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDraftDefaultWorkflow - Get draft default workflow
func (c *WorkflowSchemeDraftsAPIController) GetDraftDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetDraftDefaultWorkflow(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDraftWorkflow - Get issue types for workflows in draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) GetDraftWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
	}
	result, err := c.service.GetDraftWorkflow(r.Context(), idParam, workflowNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowSchemeDraft - Get draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) GetWorkflowSchemeDraft(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetWorkflowSchemeDraft(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetWorkflowSchemeDraftIssueType - Get workflow for issue type in draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) GetWorkflowSchemeDraftIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	result, err := c.service.GetWorkflowSchemeDraftIssueType(r.Context(), idParam, issueTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PublishDraftWorkflowScheme - Publish draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) PublishDraftWorkflowScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	publishDraftWorkflowSchemeParam := PublishDraftWorkflowScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&publishDraftWorkflowSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPublishDraftWorkflowSchemeRequired(publishDraftWorkflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPublishDraftWorkflowSchemeConstraints(publishDraftWorkflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var validateOnlyParam bool
	if query.Has("validateOnly") {
		param, err := parseBoolParameter(
			query.Get("validateOnly"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		validateOnlyParam = param
	} else {
		var param bool = false
		validateOnlyParam = param
	}
	result, err := c.service.PublishDraftWorkflowScheme(r.Context(), idParam, publishDraftWorkflowSchemeParam, validateOnlyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetWorkflowSchemeDraftIssueType - Set workflow for issue type in draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) SetWorkflowSchemeDraftIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	issueTypeParam := params["issueType"]
	if issueTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueType"}, nil)
		return
	}
	issueTypeWorkflowMappingParam := IssueTypeWorkflowMapping{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeWorkflowMappingRequired(issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeWorkflowMappingConstraints(issueTypeWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetWorkflowSchemeDraftIssueType(r.Context(), idParam, issueTypeParam, issueTypeWorkflowMappingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDraftDefaultWorkflow - Update draft default workflow
func (c *WorkflowSchemeDraftsAPIController) UpdateDraftDefaultWorkflow(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	defaultWorkflowParam := DefaultWorkflow{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDefaultWorkflowRequired(defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDefaultWorkflowConstraints(defaultWorkflowParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDraftDefaultWorkflow(r.Context(), idParam, defaultWorkflowParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDraftWorkflowMapping - Set issue types for workflow in workflow scheme
func (c *WorkflowSchemeDraftsAPIController) UpdateDraftWorkflowMapping(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var workflowNameParam string
	if query.Has("workflowName") {
		param := query.Get("workflowName")

		workflowNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "workflowName"}, nil)
		return
	}
	issueTypesWorkflowMappingParam := IssueTypesWorkflowMapping{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypesWorkflowMappingRequired(issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypesWorkflowMappingConstraints(issueTypesWorkflowMappingParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDraftWorkflowMapping(r.Context(), idParam, workflowNameParam, issueTypesWorkflowMappingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateWorkflowSchemeDraft - Update draft workflow scheme
func (c *WorkflowSchemeDraftsAPIController) UpdateWorkflowSchemeDraft(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	workflowSchemeParam := WorkflowScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&workflowSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertWorkflowSchemeRequired(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertWorkflowSchemeConstraints(workflowSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateWorkflowSchemeDraft(r.Context(), idParam, workflowSchemeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
