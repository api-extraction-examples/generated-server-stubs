/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// JiraExpressionsAPIController binds http requests to an api service and writes the service results to the http response
type JiraExpressionsAPIController struct {
	service JiraExpressionsAPIServicer
	errorHandler ErrorHandler
}

// JiraExpressionsAPIOption for how the controller is set up.
type JiraExpressionsAPIOption func(*JiraExpressionsAPIController)

// WithJiraExpressionsAPIErrorHandler inject ErrorHandler into controller
func WithJiraExpressionsAPIErrorHandler(h ErrorHandler) JiraExpressionsAPIOption {
	return func(c *JiraExpressionsAPIController) {
		c.errorHandler = h
	}
}

// NewJiraExpressionsAPIController creates a default api controller
func NewJiraExpressionsAPIController(s JiraExpressionsAPIServicer, opts ...JiraExpressionsAPIOption) Router {
	controller := &JiraExpressionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the JiraExpressionsAPIController
func (c *JiraExpressionsAPIController) Routes() Routes {
	return Routes{
		"AnalyseExpression": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/expression/analyse",
			c.AnalyseExpression,
		},
		"EvaluateJiraExpression": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/expression/eval",
			c.EvaluateJiraExpression,
		},
	}
}

// AnalyseExpression - Analyse Jira expression
func (c *JiraExpressionsAPIController) AnalyseExpression(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jiraExpressionForAnalysisParam := JiraExpressionForAnalysis{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jiraExpressionForAnalysisParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJiraExpressionForAnalysisRequired(jiraExpressionForAnalysisParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJiraExpressionForAnalysisConstraints(jiraExpressionForAnalysisParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var checkParam string
	if query.Has("check") {
		param := query.Get("check")

		checkParam = param
	} else {
		param := syntax
		checkParam = param
	}
	result, err := c.service.AnalyseExpression(r.Context(), jiraExpressionForAnalysisParam, checkParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EvaluateJiraExpression - Evaluate Jira expression
func (c *JiraExpressionsAPIController) EvaluateJiraExpression(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	jiraExpressionEvalRequestBeanParam := JiraExpressionEvalRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&jiraExpressionEvalRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJiraExpressionEvalRequestBeanRequired(jiraExpressionEvalRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJiraExpressionEvalRequestBeanConstraints(jiraExpressionEvalRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.EvaluateJiraExpression(r.Context(), jiraExpressionEvalRequestBeanParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
