/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueTypeScreenSchemesAPIController binds http requests to an api service and writes the service results to the http response
type IssueTypeScreenSchemesAPIController struct {
	service IssueTypeScreenSchemesAPIServicer
	errorHandler ErrorHandler
}

// IssueTypeScreenSchemesAPIOption for how the controller is set up.
type IssueTypeScreenSchemesAPIOption func(*IssueTypeScreenSchemesAPIController)

// WithIssueTypeScreenSchemesAPIErrorHandler inject ErrorHandler into controller
func WithIssueTypeScreenSchemesAPIErrorHandler(h ErrorHandler) IssueTypeScreenSchemesAPIOption {
	return func(c *IssueTypeScreenSchemesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueTypeScreenSchemesAPIController creates a default api controller
func NewIssueTypeScreenSchemesAPIController(s IssueTypeScreenSchemesAPIServicer, opts ...IssueTypeScreenSchemesAPIOption) Router {
	controller := &IssueTypeScreenSchemesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueTypeScreenSchemesAPIController
func (c *IssueTypeScreenSchemesAPIController) Routes() Routes {
	return Routes{
		"AppendMappingsForIssueTypeScreenScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping",
			c.AppendMappingsForIssueTypeScreenScheme,
		},
		"AssignIssueTypeScreenSchemeToProject": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescreenscheme/project",
			c.AssignIssueTypeScreenSchemeToProject,
		},
		"CreateIssueTypeScreenScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issuetypescreenscheme",
			c.CreateIssueTypeScreenScheme,
		},
		"DeleteIssueTypeScreenScheme": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
			c.DeleteIssueTypeScreenScheme,
		},
		"GetIssueTypeScreenSchemeMappings": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescreenscheme/mapping",
			c.GetIssueTypeScreenSchemeMappings,
		},
		"GetIssueTypeScreenSchemeProjectAssociations": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescreenscheme/project",
			c.GetIssueTypeScreenSchemeProjectAssociations,
		},
		"GetIssueTypeScreenSchemes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescreenscheme",
			c.GetIssueTypeScreenSchemes,
		},
		"GetProjectsForIssueTypeScreenScheme": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/project",
			c.GetProjectsForIssueTypeScreenScheme,
		},
		"RemoveMappingsFromIssueTypeScreenScheme": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/remove",
			c.RemoveMappingsFromIssueTypeScreenScheme,
		},
		"UpdateDefaultScreenScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}/mapping/default",
			c.UpdateDefaultScreenScheme,
		},
		"UpdateIssueTypeScreenScheme": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetypescreenscheme/{issueTypeScreenSchemeId}",
			c.UpdateIssueTypeScreenScheme,
		},
	}
}

// AppendMappingsForIssueTypeScreenScheme - Append mappings to issue type screen scheme
func (c *IssueTypeScreenSchemesAPIController) AppendMappingsForIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeScreenSchemeIdParam := params["issueTypeScreenSchemeId"]
	if issueTypeScreenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeScreenSchemeId"}, nil)
		return
	}
	issueTypeScreenSchemeMappingDetailsParam := IssueTypeScreenSchemeMappingDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeScreenSchemeMappingDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeMappingDetailsRequired(issueTypeScreenSchemeMappingDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeMappingDetailsConstraints(issueTypeScreenSchemeMappingDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppendMappingsForIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeIdParam, issueTypeScreenSchemeMappingDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AssignIssueTypeScreenSchemeToProject - Assign issue type screen scheme to project
func (c *IssueTypeScreenSchemesAPIController) AssignIssueTypeScreenSchemeToProject(w http.ResponseWriter, r *http.Request) {
	issueTypeScreenSchemeProjectAssociationParam := IssueTypeScreenSchemeProjectAssociation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeScreenSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeProjectAssociationRequired(issueTypeScreenSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeProjectAssociationConstraints(issueTypeScreenSchemeProjectAssociationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AssignIssueTypeScreenSchemeToProject(r.Context(), issueTypeScreenSchemeProjectAssociationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateIssueTypeScreenScheme - Create issue type screen scheme
func (c *IssueTypeScreenSchemesAPIController) CreateIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	issueTypeScreenSchemeDetailsParam := IssueTypeScreenSchemeDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeDetailsRequired(issueTypeScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeDetailsConstraints(issueTypeScreenSchemeDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueTypeScreenScheme - Delete issue type screen scheme
func (c *IssueTypeScreenSchemesAPIController) DeleteIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeScreenSchemeIdParam := params["issueTypeScreenSchemeId"]
	if issueTypeScreenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeScreenSchemeId"}, nil)
		return
	}
	result, err := c.service.DeleteIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeScreenSchemeMappings - Get issue type screen scheme items
func (c *IssueTypeScreenSchemesAPIController) GetIssueTypeScreenSchemeMappings(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	issueTypeScreenSchemeIdParam, err := parseNumericArrayParameter[int64](
		query.Get("issueTypeScreenSchemeId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetIssueTypeScreenSchemeMappings(r.Context(), startAtParam, maxResultsParam, issueTypeScreenSchemeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeScreenSchemeProjectAssociations - Get issue type screen schemes for projects
func (c *IssueTypeScreenSchemesAPIController) GetIssueTypeScreenSchemeProjectAssociations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	projectIdParam, err := parseNumericArrayParameter[int64](
		query.Get("projectId"), ",", true,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	result, err := c.service.GetIssueTypeScreenSchemeProjectAssociations(r.Context(), projectIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypeScreenSchemes - Get issue type screen schemes
func (c *IssueTypeScreenSchemesAPIController) GetIssueTypeScreenSchemes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var queryStringParam string
	if query.Has("queryString") {
		param := query.Get("queryString")

		queryStringParam = param
	} else {
		param := 
		queryStringParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
		param := id
		orderByParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
		param := 
		expandParam = param
	}
	result, err := c.service.GetIssueTypeScreenSchemes(r.Context(), startAtParam, maxResultsParam, idParam, queryStringParam, orderByParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectsForIssueTypeScreenScheme - Get issue type screen scheme projects
func (c *IssueTypeScreenSchemesAPIController) GetProjectsForIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueTypeScreenSchemeIdParam, err := parseNumericParameter[int64](
		params["issueTypeScreenSchemeId"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var queryParam string
	if query.Has("query") {
		param := query.Get("query")

		queryParam = param
	} else {
		param := 
		queryParam = param
	}
	result, err := c.service.GetProjectsForIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeIdParam, startAtParam, maxResultsParam, queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveMappingsFromIssueTypeScreenScheme - Remove mappings from issue type screen scheme
func (c *IssueTypeScreenSchemesAPIController) RemoveMappingsFromIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeScreenSchemeIdParam := params["issueTypeScreenSchemeId"]
	if issueTypeScreenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeScreenSchemeId"}, nil)
		return
	}
	issueTypeIdsParam := IssueTypeIds{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeIdsRequired(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeIdsConstraints(issueTypeIdsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RemoveMappingsFromIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeIdParam, issueTypeIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDefaultScreenScheme - Update issue type screen scheme default screen scheme
func (c *IssueTypeScreenSchemesAPIController) UpdateDefaultScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeScreenSchemeIdParam := params["issueTypeScreenSchemeId"]
	if issueTypeScreenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeScreenSchemeId"}, nil)
		return
	}
	updateDefaultScreenSchemeParam := UpdateDefaultScreenScheme{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateDefaultScreenSchemeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateDefaultScreenSchemeRequired(updateDefaultScreenSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateDefaultScreenSchemeConstraints(updateDefaultScreenSchemeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDefaultScreenScheme(r.Context(), issueTypeScreenSchemeIdParam, updateDefaultScreenSchemeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssueTypeScreenScheme - Update issue type screen scheme
func (c *IssueTypeScreenSchemesAPIController) UpdateIssueTypeScreenScheme(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueTypeScreenSchemeIdParam := params["issueTypeScreenSchemeId"]
	if issueTypeScreenSchemeIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueTypeScreenSchemeId"}, nil)
		return
	}
	issueTypeScreenSchemeUpdateDetailsParam := IssueTypeScreenSchemeUpdateDetails{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeScreenSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeUpdateDetailsRequired(issueTypeScreenSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeScreenSchemeUpdateDetailsConstraints(issueTypeScreenSchemeUpdateDetailsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssueTypeScreenScheme(r.Context(), issueTypeScreenSchemeIdParam, issueTypeScreenSchemeUpdateDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
