/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MyselfAPIController binds http requests to an api service and writes the service results to the http response
type MyselfAPIController struct {
	service MyselfAPIServicer
	errorHandler ErrorHandler
}

// MyselfAPIOption for how the controller is set up.
type MyselfAPIOption func(*MyselfAPIController)

// WithMyselfAPIErrorHandler inject ErrorHandler into controller
func WithMyselfAPIErrorHandler(h ErrorHandler) MyselfAPIOption {
	return func(c *MyselfAPIController) {
		c.errorHandler = h
	}
}

// NewMyselfAPIController creates a default api controller
func NewMyselfAPIController(s MyselfAPIServicer, opts ...MyselfAPIOption) Router {
	controller := &MyselfAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MyselfAPIController
func (c *MyselfAPIController) Routes() Routes {
	return Routes{
		"DeleteLocale": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/mypreferences/locale",
			c.DeleteLocale,
		},
		"GetCurrentUser": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/myself",
			c.GetCurrentUser,
		},
		"GetLocale": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/mypreferences/locale",
			c.GetLocale,
		},
		"GetPreference": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/mypreferences",
			c.GetPreference,
		},
		"RemovePreference": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/mypreferences",
			c.RemovePreference,
		},
		"SetLocale": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/mypreferences/locale",
			c.SetLocale,
		},
		"SetPreference": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/mypreferences",
			c.SetPreference,
		},
	}
}

// DeleteLocale - Delete locale
// Deprecated
func (c *MyselfAPIController) DeleteLocale(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.DeleteLocale(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCurrentUser - Get current user
func (c *MyselfAPIController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetCurrentUser(r.Context(), expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLocale - Get locale
func (c *MyselfAPIController) GetLocale(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLocale(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPreference - Get preference
func (c *MyselfAPIController) GetPreference(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	result, err := c.service.GetPreference(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemovePreference - Delete preference
func (c *MyselfAPIController) RemovePreference(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	result, err := c.service.RemovePreference(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetLocale - Set locale
// Deprecated
func (c *MyselfAPIController) SetLocale(w http.ResponseWriter, r *http.Request) {
	localeParam := Locale{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&localeParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLocaleRequired(localeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLocaleConstraints(localeParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetLocale(r.Context(), localeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetPreference - Set preference
func (c *MyselfAPIController) SetPreference(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var keyParam string
	if query.Has("key") {
		param := query.Get("key")

		keyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "key"}, nil)
		return
	}
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetPreference(r.Context(), keyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
