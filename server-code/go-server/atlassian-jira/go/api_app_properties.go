/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type AppPropertiesAPIController struct {
	service AppPropertiesAPIServicer
	errorHandler ErrorHandler
}

// AppPropertiesAPIOption for how the controller is set up.
type AppPropertiesAPIOption func(*AppPropertiesAPIController)

// WithAppPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithAppPropertiesAPIErrorHandler(h ErrorHandler) AppPropertiesAPIOption {
	return func(c *AppPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewAppPropertiesAPIController creates a default api controller
func NewAppPropertiesAPIController(s AppPropertiesAPIServicer, opts ...AppPropertiesAPIOption) Router {
	controller := &AppPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppPropertiesAPIController
func (c *AppPropertiesAPIController) Routes() Routes {
	return Routes{
		"AddonPropertiesResourceDeleteAddonPropertyDelete": Route{
			strings.ToUpper("Delete"),
			"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
			c.AddonPropertiesResourceDeleteAddonPropertyDelete,
		},
		"AddonPropertiesResourceGetAddonPropertiesGet": Route{
			strings.ToUpper("Get"),
			"/rest/atlassian-connect/1/addons/{addonKey}/properties",
			c.AddonPropertiesResourceGetAddonPropertiesGet,
		},
		"AddonPropertiesResourceGetAddonPropertyGet": Route{
			strings.ToUpper("Get"),
			"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
			c.AddonPropertiesResourceGetAddonPropertyGet,
		},
		"AddonPropertiesResourcePutAddonPropertyPut": Route{
			strings.ToUpper("Put"),
			"/rest/atlassian-connect/1/addons/{addonKey}/properties/{propertyKey}",
			c.AddonPropertiesResourcePutAddonPropertyPut,
		},
	}
}

// AddonPropertiesResourceDeleteAddonPropertyDelete - Delete app property
func (c *AppPropertiesAPIController) AddonPropertiesResourceDeleteAddonPropertyDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addonKeyParam := params["addonKey"]
	if addonKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"addonKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.AddonPropertiesResourceDeleteAddonPropertyDelete(r.Context(), addonKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddonPropertiesResourceGetAddonPropertiesGet - Get app properties
func (c *AppPropertiesAPIController) AddonPropertiesResourceGetAddonPropertiesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addonKeyParam := params["addonKey"]
	if addonKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"addonKey"}, nil)
		return
	}
	result, err := c.service.AddonPropertiesResourceGetAddonPropertiesGet(r.Context(), addonKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddonPropertiesResourceGetAddonPropertyGet - Get app property
func (c *AppPropertiesAPIController) AddonPropertiesResourceGetAddonPropertyGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addonKeyParam := params["addonKey"]
	if addonKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"addonKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	result, err := c.service.AddonPropertiesResourceGetAddonPropertyGet(r.Context(), addonKeyParam, propertyKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddonPropertiesResourcePutAddonPropertyPut - Set app property
func (c *AppPropertiesAPIController) AddonPropertiesResourcePutAddonPropertyPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	addonKeyParam := params["addonKey"]
	if addonKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"addonKey"}, nil)
		return
	}
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.AddonPropertiesResourcePutAddonPropertyPut(r.Context(), addonKeyParam, propertyKeyParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
