/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// StatusAPIController binds http requests to an api service and writes the service results to the http response
type StatusAPIController struct {
	service StatusAPIServicer
	errorHandler ErrorHandler
}

// StatusAPIOption for how the controller is set up.
type StatusAPIOption func(*StatusAPIController)

// WithStatusAPIErrorHandler inject ErrorHandler into controller
func WithStatusAPIErrorHandler(h ErrorHandler) StatusAPIOption {
	return func(c *StatusAPIController) {
		c.errorHandler = h
	}
}

// NewStatusAPIController creates a default api controller
func NewStatusAPIController(s StatusAPIServicer, opts ...StatusAPIOption) Router {
	controller := &StatusAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StatusAPIController
func (c *StatusAPIController) Routes() Routes {
	return Routes{
		"CreateStatuses": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/statuses",
			c.CreateStatuses,
		},
		"DeleteStatusesById": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/statuses",
			c.DeleteStatusesById,
		},
		"GetStatusesById": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/statuses",
			c.GetStatusesById,
		},
		"Search": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/statuses/search",
			c.Search,
		},
		"UpdateStatuses": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/statuses",
			c.UpdateStatuses,
		},
	}
}

// CreateStatuses - Bulk create statuses
func (c *StatusAPIController) CreateStatuses(w http.ResponseWriter, r *http.Request) {
	statusCreateRequestParam := StatusCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&statusCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStatusCreateRequestRequired(statusCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStatusCreateRequestConstraints(statusCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateStatuses(r.Context(), statusCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteStatusesById - Bulk delete Statuses
func (c *StatusAPIController) DeleteStatusesById(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam []string
	if query.Has("id") {
		idParam = strings.Split(query.Get("id"), ",")
	}
	result, err := c.service.DeleteStatusesById(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatusesById - Bulk get statuses
func (c *StatusAPIController) GetStatusesById(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var idParam []string
	if query.Has("id") {
		idParam = strings.Split(query.Get("id"), ",")
	}
	result, err := c.service.GetStatusesById(r.Context(), expandParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Search - Search statuses paginated
func (c *StatusAPIController) Search(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var projectIdParam string
	if query.Has("projectId") {
		param := query.Get("projectId")

		projectIdParam = param
	} else {
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 200
		maxResultsParam = param
	}
	var searchStringParam string
	if query.Has("searchString") {
		param := query.Get("searchString")

		searchStringParam = param
	} else {
	}
	var statusCategoryParam string
	if query.Has("statusCategory") {
		param := query.Get("statusCategory")

		statusCategoryParam = param
	} else {
	}
	result, err := c.service.Search(r.Context(), expandParam, projectIdParam, startAtParam, maxResultsParam, searchStringParam, statusCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateStatuses - Bulk update statuses
func (c *StatusAPIController) UpdateStatuses(w http.ResponseWriter, r *http.Request) {
	statusUpdateRequestParam := StatusUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&statusUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStatusUpdateRequestRequired(statusUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStatusUpdateRequestConstraints(statusUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateStatuses(r.Context(), statusUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
