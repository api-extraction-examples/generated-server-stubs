/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// WebhookDetails - A list of webhooks.
type WebhookDetails struct {

	// The Jira events that trigger the webhook.
	Events []string `json:"events"`

	// A list of field IDs. When the issue changelog contains any of the fields, the webhook `jira:issue_updated` is sent. If this parameter is not present, the app is notified about all field updates.
	FieldIdsFilter []string `json:"fieldIdsFilter,omitempty"`

	// A list of issue property keys. A change of those issue properties triggers the `issue_property_set` or `issue_property_deleted` webhooks. If this parameter is not present, the app is notified about all issue property updates.
	IssuePropertyKeysFilter []string `json:"issuePropertyKeysFilter,omitempty"`

	// The JQL filter that specifies which issues the webhook is sent for. Only a subset of JQL can be used. The supported elements are:   *  Fields: `issueKey`, `project`, `issuetype`, `status`, `assignee`, `reporter`, `issue.property`, and `cf[id]`. For custom fields (`cf[id]`), only the epic label custom field is supported.\".  *  Operators: `=`, `!=`, `IN`, and `NOT IN`.
	JqlFilter string `json:"jqlFilter"`
}

// AssertWebhookDetailsRequired checks if the required fields are not zero-ed
func AssertWebhookDetailsRequired(obj WebhookDetails) error {
	elements := map[string]interface{}{
		"events": obj.Events,
		"jqlFilter": obj.JqlFilter,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	return nil
}

// AssertWebhookDetailsConstraints checks if the values respects the defined constraints
func AssertWebhookDetailsConstraints(obj WebhookDetails) error {
	return nil
}
