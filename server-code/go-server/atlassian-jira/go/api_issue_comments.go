/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueCommentsAPIController binds http requests to an api service and writes the service results to the http response
type IssueCommentsAPIController struct {
	service IssueCommentsAPIServicer
	errorHandler ErrorHandler
}

// IssueCommentsAPIOption for how the controller is set up.
type IssueCommentsAPIOption func(*IssueCommentsAPIController)

// WithIssueCommentsAPIErrorHandler inject ErrorHandler into controller
func WithIssueCommentsAPIErrorHandler(h ErrorHandler) IssueCommentsAPIOption {
	return func(c *IssueCommentsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCommentsAPIController creates a default api controller
func NewIssueCommentsAPIController(s IssueCommentsAPIServicer, opts ...IssueCommentsAPIOption) Router {
	controller := &IssueCommentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCommentsAPIController
func (c *IssueCommentsAPIController) Routes() Routes {
	return Routes{
		"AddComment": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issue/{issueIdOrKey}/comment",
			c.AddComment,
		},
		"DeleteComment": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
			c.DeleteComment,
		},
		"GetComment": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
			c.GetComment,
		},
		"GetComments": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issue/{issueIdOrKey}/comment",
			c.GetComments,
		},
		"GetCommentsByIds": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/comment/list",
			c.GetCommentsByIds,
		},
		"UpdateComment": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issue/{issueIdOrKey}/comment/{id}",
			c.UpdateComment,
		},
	}
}

// AddComment - Add comment
func (c *IssueCommentsAPIController) AddComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	commentParam := Comment{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequired(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentConstraints(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.AddComment(r.Context(), issueIdOrKeyParam, commentParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteComment - Delete comment
func (c *IssueCommentsAPIController) DeleteComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.DeleteComment(r.Context(), issueIdOrKeyParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComment - Get comment
func (c *IssueCommentsAPIController) GetComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetComment(r.Context(), issueIdOrKeyParam, idParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetComments - Get comments
func (c *IssueCommentsAPIController) GetComments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 5000
		maxResultsParam = param
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetComments(r.Context(), issueIdOrKeyParam, startAtParam, maxResultsParam, orderByParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCommentsByIds - Get comments by IDs
func (c *IssueCommentsAPIController) GetCommentsByIds(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	issueCommentListRequestBeanParam := IssueCommentListRequestBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueCommentListRequestBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueCommentListRequestBeanRequired(issueCommentListRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueCommentListRequestBeanConstraints(issueCommentListRequestBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetCommentsByIds(r.Context(), issueCommentListRequestBeanParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateComment - Update comment
func (c *IssueCommentsAPIController) UpdateComment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	issueIdOrKeyParam := params["issueIdOrKey"]
	if issueIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"issueIdOrKey"}, nil)
		return
	}
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	commentParam := Comment{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&commentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCommentRequired(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCommentConstraints(commentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var notifyUsersParam bool
	if query.Has("notifyUsers") {
		param, err := parseBoolParameter(
			query.Get("notifyUsers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		notifyUsersParam = param
	} else {
		var param bool = true
		notifyUsersParam = param
	}
	var overrideEditableFlagParam bool
	if query.Has("overrideEditableFlag") {
		param, err := parseBoolParameter(
			query.Get("overrideEditableFlag"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideEditableFlagParam = param
	} else {
		var param bool = false
		overrideEditableFlagParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.UpdateComment(r.Context(), issueIdOrKeyParam, idParam, commentParam, notifyUsersParam, overrideEditableFlagParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
