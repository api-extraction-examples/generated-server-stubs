/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// Workflow - Details about a workflow.
type Workflow struct {

	// The creation date of the workflow.
	Created time.Time `json:"created,omitempty"`

	// The description of the workflow.
	Description string `json:"description"`

	// Whether the workflow has a draft version.
	HasDraftWorkflow bool `json:"hasDraftWorkflow,omitempty"`

	Id PublishedWorkflowId `json:"id"`

	// Whether this is the default workflow.
	IsDefault bool `json:"isDefault,omitempty"`

	Operations WorkflowOperations `json:"operations,omitempty"`

	// The projects the workflow is assigned to, through workflow schemes.
	Projects []ProjectDetails `json:"projects,omitempty"`

	// The workflow schemes the workflow is assigned to.
	Schemes []WorkflowSchemeIdName `json:"schemes,omitempty"`

	// The statuses of the workflow.
	Statuses []WorkflowStatus `json:"statuses,omitempty"`

	// The transitions of the workflow.
	Transitions []Transition `json:"transitions,omitempty"`

	// The last edited date of the workflow.
	Updated time.Time `json:"updated,omitempty"`
}

// AssertWorkflowRequired checks if the required fields are not zero-ed
func AssertWorkflowRequired(obj Workflow) error {
	elements := map[string]interface{}{
		"description": obj.Description,
		"id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPublishedWorkflowIdRequired(obj.Id); err != nil {
		return err
	}
	if err := AssertWorkflowOperationsRequired(obj.Operations); err != nil {
		return err
	}
	for _, el := range obj.Projects {
		if err := AssertProjectDetailsRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Schemes {
		if err := AssertWorkflowSchemeIdNameRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Statuses {
		if err := AssertWorkflowStatusRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Transitions {
		if err := AssertTransitionRequired(el); err != nil {
			return err
		}
	}
	return nil
}

// AssertWorkflowConstraints checks if the values respects the defined constraints
func AssertWorkflowConstraints(obj Workflow) error {
	return nil
}
