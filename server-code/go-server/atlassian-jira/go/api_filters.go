/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// FiltersAPIController binds http requests to an api service and writes the service results to the http response
type FiltersAPIController struct {
	service FiltersAPIServicer
	errorHandler ErrorHandler
}

// FiltersAPIOption for how the controller is set up.
type FiltersAPIOption func(*FiltersAPIController)

// WithFiltersAPIErrorHandler inject ErrorHandler into controller
func WithFiltersAPIErrorHandler(h ErrorHandler) FiltersAPIOption {
	return func(c *FiltersAPIController) {
		c.errorHandler = h
	}
}

// NewFiltersAPIController creates a default api controller
func NewFiltersAPIController(s FiltersAPIServicer, opts ...FiltersAPIOption) Router {
	controller := &FiltersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FiltersAPIController
func (c *FiltersAPIController) Routes() Routes {
	return Routes{
		"ChangeFilterOwner": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/filter/{id}/owner",
			c.ChangeFilterOwner,
		},
		"CreateFilter": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/filter",
			c.CreateFilter,
		},
		"DeleteFavouriteForFilter": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/filter/{id}/favourite",
			c.DeleteFavouriteForFilter,
		},
		"DeleteFilter": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/filter/{id}",
			c.DeleteFilter,
		},
		"GetColumns": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/{id}/columns",
			c.GetColumns,
		},
		"GetFavouriteFilters": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/favourite",
			c.GetFavouriteFilters,
		},
		"GetFilter": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/{id}",
			c.GetFilter,
		},
		"GetFiltersPaginated": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/search",
			c.GetFiltersPaginated,
		},
		"GetMyFilters": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/filter/my",
			c.GetMyFilters,
		},
		"ResetColumns": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/filter/{id}/columns",
			c.ResetColumns,
		},
		"SetColumns": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/filter/{id}/columns",
			c.SetColumns,
		},
		"SetFavouriteForFilter": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/filter/{id}/favourite",
			c.SetFavouriteForFilter,
		},
		"UpdateFilter": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/filter/{id}",
			c.UpdateFilter,
		},
	}
}

// ChangeFilterOwner - Change filter owner
func (c *FiltersAPIController) ChangeFilterOwner(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	changeFilterOwnerParam := ChangeFilterOwner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&changeFilterOwnerParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangeFilterOwnerRequired(changeFilterOwnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangeFilterOwnerConstraints(changeFilterOwnerParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangeFilterOwner(r.Context(), idParam, changeFilterOwnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateFilter - Create filter
func (c *FiltersAPIController) CreateFilter(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	filterParam := Filter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&filterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFilterRequired(filterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFilterConstraints(filterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var overrideSharePermissionsParam bool
	if query.Has("overrideSharePermissions") {
		param, err := parseBoolParameter(
			query.Get("overrideSharePermissions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideSharePermissionsParam = param
	} else {
		var param bool = false
		overrideSharePermissionsParam = param
	}
	result, err := c.service.CreateFilter(r.Context(), filterParam, expandParam, overrideSharePermissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFavouriteForFilter - Remove filter as favorite
func (c *FiltersAPIController) DeleteFavouriteForFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.DeleteFavouriteForFilter(r.Context(), idParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFilter - Delete filter
func (c *FiltersAPIController) DeleteFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteFilter(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetColumns - Get columns
func (c *FiltersAPIController) GetColumns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetColumns(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFavouriteFilters - Get favorite filters
func (c *FiltersAPIController) GetFavouriteFilters(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.GetFavouriteFilters(r.Context(), expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFilter - Get filter
func (c *FiltersAPIController) GetFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var overrideSharePermissionsParam bool
	if query.Has("overrideSharePermissions") {
		param, err := parseBoolParameter(
			query.Get("overrideSharePermissions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideSharePermissionsParam = param
	} else {
		var param bool = false
		overrideSharePermissionsParam = param
	}
	result, err := c.service.GetFilter(r.Context(), idParam, expandParam, overrideSharePermissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFiltersPaginated - Search for filters
func (c *FiltersAPIController) GetFiltersPaginated(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterNameParam string
	if query.Has("filterName") {
		param := query.Get("filterName")

		filterNameParam = param
	} else {
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var ownerParam string
	if query.Has("owner") {
		param := query.Get("owner")

		ownerParam = param
	} else {
	}
	var groupnameParam string
	if query.Has("groupname") {
		param := query.Get("groupname")

		groupnameParam = param
	} else {
	}
	var groupIdParam string
	if query.Has("groupId") {
		param := query.Get("groupId")

		groupIdParam = param
	} else {
	}
	var projectIdParam int64
	if query.Has("projectId") {
		param, err := parseNumericParameter[int64](
			query.Get("projectId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		projectIdParam = param
	} else {
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var orderByParam string
	if query.Has("orderBy") {
		param := query.Get("orderBy")

		orderByParam = param
	} else {
		param := name
		orderByParam = param
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 50
		maxResultsParam = param
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var overrideSharePermissionsParam bool
	if query.Has("overrideSharePermissions") {
		param, err := parseBoolParameter(
			query.Get("overrideSharePermissions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideSharePermissionsParam = param
	} else {
		var param bool = false
		overrideSharePermissionsParam = param
	}
	result, err := c.service.GetFiltersPaginated(r.Context(), filterNameParam, accountIdParam, ownerParam, groupnameParam, groupIdParam, projectIdParam, idParam, orderByParam, startAtParam, maxResultsParam, expandParam, overrideSharePermissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMyFilters - Get my filters
func (c *FiltersAPIController) GetMyFilters(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var includeFavouritesParam bool
	if query.Has("includeFavourites") {
		param, err := parseBoolParameter(
			query.Get("includeFavourites"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeFavouritesParam = param
	} else {
		var param bool = false
		includeFavouritesParam = param
	}
	result, err := c.service.GetMyFilters(r.Context(), expandParam, includeFavouritesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetColumns - Reset columns
func (c *FiltersAPIController) ResetColumns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ResetColumns(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetColumns - Set columns
func (c *FiltersAPIController) SetColumns(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	requestBodyParam := []string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&requestBodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetColumns(r.Context(), idParam, requestBodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetFavouriteForFilter - Add filter as favorite
func (c *FiltersAPIController) SetFavouriteForFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	result, err := c.service.SetFavouriteForFilter(r.Context(), idParam, expandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFilter - Update filter
func (c *FiltersAPIController) UpdateFilter(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam, err := parseNumericParameter[int64](
		params["id"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	filterParam := Filter{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&filterParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFilterRequired(filterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFilterConstraints(filterParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var expandParam string
	if query.Has("expand") {
		param := query.Get("expand")

		expandParam = param
	} else {
	}
	var overrideSharePermissionsParam bool
	if query.Has("overrideSharePermissions") {
		param, err := parseBoolParameter(
			query.Get("overrideSharePermissions"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		overrideSharePermissionsParam = param
	} else {
		var param bool = false
		overrideSharePermissionsParam = param
	}
	result, err := c.service.UpdateFilter(r.Context(), idParam, filterParam, expandParam, overrideSharePermissionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
