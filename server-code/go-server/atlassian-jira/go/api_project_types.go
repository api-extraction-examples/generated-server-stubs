/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProjectTypesAPIController binds http requests to an api service and writes the service results to the http response
type ProjectTypesAPIController struct {
	service ProjectTypesAPIServicer
	errorHandler ErrorHandler
}

// ProjectTypesAPIOption for how the controller is set up.
type ProjectTypesAPIOption func(*ProjectTypesAPIController)

// WithProjectTypesAPIErrorHandler inject ErrorHandler into controller
func WithProjectTypesAPIErrorHandler(h ErrorHandler) ProjectTypesAPIOption {
	return func(c *ProjectTypesAPIController) {
		c.errorHandler = h
	}
}

// NewProjectTypesAPIController creates a default api controller
func NewProjectTypesAPIController(s ProjectTypesAPIServicer, opts ...ProjectTypesAPIOption) Router {
	controller := &ProjectTypesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProjectTypesAPIController
func (c *ProjectTypesAPIController) Routes() Routes {
	return Routes{
		"GetAccessibleProjectTypeByKey": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/type/{projectTypeKey}/accessible",
			c.GetAccessibleProjectTypeByKey,
		},
		"GetAllAccessibleProjectTypes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/type/accessible",
			c.GetAllAccessibleProjectTypes,
		},
		"GetAllProjectTypes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/type",
			c.GetAllProjectTypes,
		},
		"GetProjectTypeByKey": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/project/type/{projectTypeKey}",
			c.GetProjectTypeByKey,
		},
	}
}

// GetAccessibleProjectTypeByKey - Get accessible project type by key
func (c *ProjectTypesAPIController) GetAccessibleProjectTypeByKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectTypeKeyParam := params["projectTypeKey"]
	if projectTypeKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectTypeKey"}, nil)
		return
	}
	result, err := c.service.GetAccessibleProjectTypeByKey(r.Context(), projectTypeKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllAccessibleProjectTypes - Get licensed project types
func (c *ProjectTypesAPIController) GetAllAccessibleProjectTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllAccessibleProjectTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAllProjectTypes - Get all project types
func (c *ProjectTypesAPIController) GetAllProjectTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllProjectTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProjectTypeByKey - Get project type by key
func (c *ProjectTypesAPIController) GetProjectTypeByKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	projectTypeKeyParam := params["projectTypeKey"]
	if projectTypeKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"projectTypeKey"}, nil)
		return
	}
	result, err := c.service.GetProjectTypeByKey(r.Context(), projectTypeKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
