/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IssueTypesAPIController binds http requests to an api service and writes the service results to the http response
type IssueTypesAPIController struct {
	service IssueTypesAPIServicer
	errorHandler ErrorHandler
}

// IssueTypesAPIOption for how the controller is set up.
type IssueTypesAPIOption func(*IssueTypesAPIController)

// WithIssueTypesAPIErrorHandler inject ErrorHandler into controller
func WithIssueTypesAPIErrorHandler(h ErrorHandler) IssueTypesAPIOption {
	return func(c *IssueTypesAPIController) {
		c.errorHandler = h
	}
}

// NewIssueTypesAPIController creates a default api controller
func NewIssueTypesAPIController(s IssueTypesAPIServicer, opts ...IssueTypesAPIOption) Router {
	controller := &IssueTypesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueTypesAPIController
func (c *IssueTypesAPIController) Routes() Routes {
	return Routes{
		"CreateIssueType": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issuetype",
			c.CreateIssueType,
		},
		"CreateIssueTypeAvatar": Route{
			strings.ToUpper("Post"),
			"/rest/api/3/issuetype/{id}/avatar2",
			c.CreateIssueTypeAvatar,
		},
		"DeleteIssueType": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/issuetype/{id}",
			c.DeleteIssueType,
		},
		"GetAlternativeIssueTypes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype/{id}/alternatives",
			c.GetAlternativeIssueTypes,
		},
		"GetIssueAllTypes": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype",
			c.GetIssueAllTypes,
		},
		"GetIssueType": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype/{id}",
			c.GetIssueType,
		},
		"GetIssueTypesForProject": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/issuetype/project",
			c.GetIssueTypesForProject,
		},
		"UpdateIssueType": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/issuetype/{id}",
			c.UpdateIssueType,
		},
	}
}

// CreateIssueType - Create issue type
func (c *IssueTypesAPIController) CreateIssueType(w http.ResponseWriter, r *http.Request) {
	issueTypeCreateBeanParam := IssueTypeCreateBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeCreateBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeCreateBeanRequired(issueTypeCreateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeCreateBeanConstraints(issueTypeCreateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateIssueType(r.Context(), issueTypeCreateBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateIssueTypeAvatar - Load issue type avatar
func (c *IssueTypesAPIController) CreateIssueTypeAvatar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var sizeParam int32
	if query.Has("size") {
		param, err := parseNumericParameter[int32](
			query.Get("size"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		sizeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "size"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var xParam int32
	if query.Has("x") {
		param, err := parseNumericParameter[int32](
			query.Get("x"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		xParam = param
	} else {
		var param int32 = 0
		xParam = param
	}
	var yParam int32
	if query.Has("y") {
		param, err := parseNumericParameter[int32](
			query.Get("y"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		yParam = param
	} else {
		var param int32 = 0
		yParam = param
	}
	result, err := c.service.CreateIssueTypeAvatar(r.Context(), idParam, sizeParam, bodyParam, xParam, yParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteIssueType - Delete issue type
func (c *IssueTypesAPIController) DeleteIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var alternativeIssueTypeIdParam string
	if query.Has("alternativeIssueTypeId") {
		param := query.Get("alternativeIssueTypeId")

		alternativeIssueTypeIdParam = param
	} else {
	}
	result, err := c.service.DeleteIssueType(r.Context(), idParam, alternativeIssueTypeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAlternativeIssueTypes - Get alternative issue types
func (c *IssueTypesAPIController) GetAlternativeIssueTypes(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetAlternativeIssueTypes(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueAllTypes - Get all issue types for user
func (c *IssueTypesAPIController) GetIssueAllTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetIssueAllTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueType - Get issue type
func (c *IssueTypesAPIController) GetIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetIssueType(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIssueTypesForProject - Get issue types for project
func (c *IssueTypesAPIController) GetIssueTypesForProject(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var projectIdParam int64
	if query.Has("projectId") {
		param, err := parseNumericParameter[int64](
			query.Get("projectId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		projectIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "projectId"}, nil)
		return
	}
	var levelParam int32
	if query.Has("level") {
		param, err := parseNumericParameter[int32](
			query.Get("level"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		levelParam = param
	} else {
	}
	result, err := c.service.GetIssueTypesForProject(r.Context(), projectIdParam, levelParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateIssueType - Update issue type
func (c *IssueTypesAPIController) UpdateIssueType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	issueTypeUpdateBeanParam := IssueTypeUpdateBean{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&issueTypeUpdateBeanParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIssueTypeUpdateBeanRequired(issueTypeUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIssueTypeUpdateBeanConstraints(issueTypeUpdateBeanParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateIssueType(r.Context(), idParam, issueTypeUpdateBeanParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
