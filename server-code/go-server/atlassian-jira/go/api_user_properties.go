/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserPropertiesAPIController binds http requests to an api service and writes the service results to the http response
type UserPropertiesAPIController struct {
	service UserPropertiesAPIServicer
	errorHandler ErrorHandler
}

// UserPropertiesAPIOption for how the controller is set up.
type UserPropertiesAPIOption func(*UserPropertiesAPIController)

// WithUserPropertiesAPIErrorHandler inject ErrorHandler into controller
func WithUserPropertiesAPIErrorHandler(h ErrorHandler) UserPropertiesAPIOption {
	return func(c *UserPropertiesAPIController) {
		c.errorHandler = h
	}
}

// NewUserPropertiesAPIController creates a default api controller
func NewUserPropertiesAPIController(s UserPropertiesAPIServicer, opts ...UserPropertiesAPIOption) Router {
	controller := &UserPropertiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserPropertiesAPIController
func (c *UserPropertiesAPIController) Routes() Routes {
	return Routes{
		"DeleteUserProperty": Route{
			strings.ToUpper("Delete"),
			"/rest/api/3/user/properties/{propertyKey}",
			c.DeleteUserProperty,
		},
		"GetUserProperty": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/user/properties/{propertyKey}",
			c.GetUserProperty,
		},
		"GetUserPropertyKeys": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/user/properties",
			c.GetUserPropertyKeys,
		},
		"SetUserProperty": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/user/properties/{propertyKey}",
			c.SetUserProperty,
		},
	}
}

// DeleteUserProperty - Delete user property
func (c *UserPropertiesAPIController) DeleteUserProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var userKeyParam string
	if query.Has("userKey") {
		param := query.Get("userKey")

		userKeyParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	result, err := c.service.DeleteUserProperty(r.Context(), propertyKeyParam, accountIdParam, userKeyParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserProperty - Get user property
func (c *UserPropertiesAPIController) GetUserProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var userKeyParam string
	if query.Has("userKey") {
		param := query.Get("userKey")

		userKeyParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	result, err := c.service.GetUserProperty(r.Context(), propertyKeyParam, accountIdParam, userKeyParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserPropertyKeys - Get user property keys
func (c *UserPropertiesAPIController) GetUserPropertyKeys(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var userKeyParam string
	if query.Has("userKey") {
		param := query.Get("userKey")

		userKeyParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	result, err := c.service.GetUserPropertyKeys(r.Context(), accountIdParam, userKeyParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetUserProperty - Set user property
func (c *UserPropertiesAPIController) SetUserProperty(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	propertyKeyParam := params["propertyKey"]
	if propertyKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"propertyKey"}, nil)
		return
	}
	bodyParam := interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var accountIdParam string
	if query.Has("accountId") {
		param := query.Get("accountId")

		accountIdParam = param
	} else {
	}
	var userKeyParam string
	if query.Has("userKey") {
		param := query.Get("userKey")

		userKeyParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	result, err := c.service.SetUserProperty(r.Context(), propertyKeyParam, bodyParam, accountIdParam, userKeyParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
