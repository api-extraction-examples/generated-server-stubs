/*
 * The Jira Cloud platform REST API
 *
 * Jira Cloud platform REST API documentation
 *
 * API version: 1001.0.0-SNAPSHOT
 * Contact: ecosystem@atlassian.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// IssueCustomFieldConfigurationAppsAPIController binds http requests to an api service and writes the service results to the http response
type IssueCustomFieldConfigurationAppsAPIController struct {
	service IssueCustomFieldConfigurationAppsAPIServicer
	errorHandler ErrorHandler
}

// IssueCustomFieldConfigurationAppsAPIOption for how the controller is set up.
type IssueCustomFieldConfigurationAppsAPIOption func(*IssueCustomFieldConfigurationAppsAPIController)

// WithIssueCustomFieldConfigurationAppsAPIErrorHandler inject ErrorHandler into controller
func WithIssueCustomFieldConfigurationAppsAPIErrorHandler(h ErrorHandler) IssueCustomFieldConfigurationAppsAPIOption {
	return func(c *IssueCustomFieldConfigurationAppsAPIController) {
		c.errorHandler = h
	}
}

// NewIssueCustomFieldConfigurationAppsAPIController creates a default api controller
func NewIssueCustomFieldConfigurationAppsAPIController(s IssueCustomFieldConfigurationAppsAPIServicer, opts ...IssueCustomFieldConfigurationAppsAPIOption) Router {
	controller := &IssueCustomFieldConfigurationAppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IssueCustomFieldConfigurationAppsAPIController
func (c *IssueCustomFieldConfigurationAppsAPIController) Routes() Routes {
	return Routes{
		"GetCustomFieldConfiguration": Route{
			strings.ToUpper("Get"),
			"/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
			c.GetCustomFieldConfiguration,
		},
		"UpdateCustomFieldConfiguration": Route{
			strings.ToUpper("Put"),
			"/rest/api/3/app/field/{fieldIdOrKey}/context/configuration",
			c.UpdateCustomFieldConfiguration,
		},
	}
}

// GetCustomFieldConfiguration - Get custom field configurations
func (c *IssueCustomFieldConfigurationAppsAPIController) GetCustomFieldConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	fieldIdOrKeyParam := params["fieldIdOrKey"]
	if fieldIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldIdOrKey"}, nil)
		return
	}
	idParam, err := parseNumericArrayParameter[int64](
		query.Get("id"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	fieldContextIdParam, err := parseNumericArrayParameter[int64](
		query.Get("fieldContextId"), ",", false,
		WithParse[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var issueIdParam int64
	if query.Has("issueId") {
		param, err := parseNumericParameter[int64](
			query.Get("issueId"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		issueIdParam = param
	} else {
	}
	var projectKeyOrIdParam string
	if query.Has("projectKeyOrId") {
		param := query.Get("projectKeyOrId")

		projectKeyOrIdParam = param
	} else {
	}
	var issueTypeIdParam string
	if query.Has("issueTypeId") {
		param := query.Get("issueTypeId")

		issueTypeIdParam = param
	} else {
	}
	var startAtParam int64
	if query.Has("startAt") {
		param, err := parseNumericParameter[int64](
			query.Get("startAt"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startAtParam = param
	} else {
		var param int64 = 0
		startAtParam = param
	}
	var maxResultsParam int32
	if query.Has("maxResults") {
		param, err := parseNumericParameter[int32](
			query.Get("maxResults"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxResultsParam = param
	} else {
		var param int32 = 100
		maxResultsParam = param
	}
	result, err := c.service.GetCustomFieldConfiguration(r.Context(), fieldIdOrKeyParam, idParam, fieldContextIdParam, issueIdParam, projectKeyOrIdParam, issueTypeIdParam, startAtParam, maxResultsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomFieldConfiguration - Update custom field configurations
func (c *IssueCustomFieldConfigurationAppsAPIController) UpdateCustomFieldConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fieldIdOrKeyParam := params["fieldIdOrKey"]
	if fieldIdOrKeyParam == "" {
		c.errorHandler(w, r, &RequiredError{"fieldIdOrKey"}, nil)
		return
	}
	customFieldConfigurationsParam := CustomFieldConfigurations{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customFieldConfigurationsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomFieldConfigurationsRequired(customFieldConfigurationsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomFieldConfigurationsConstraints(customFieldConfigurationsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomFieldConfiguration(r.Context(), fieldIdOrKeyParam, customFieldConfigurationsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
