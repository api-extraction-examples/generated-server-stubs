/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Scope string

// List of Scope
const (
	WRITE_SETTINGS Scope = "write-settings"
	VIEW_BUILDS Scope = "view-builds"
	READ_SETTINGS Scope = "read-settings"
	TRIGGER_BUILDS Scope = "trigger-builds"
	ALL Scope = "all"
	STATUS Scope = "status"
	NONE Scope = "none"
)

// AllowedScopeEnumValues is all the allowed values of Scope enum
var AllowedScopeEnumValues = []Scope{
	"write-settings",
	"view-builds",
	"read-settings",
	"trigger-builds",
	"all",
	"status",
	"none",
}

// validScopeEnumValue provides a map of Scopes for fast verification of use input
var validScopeEnumValues = map[Scope]struct{}{
	"write-settings": {},
	"view-builds": {},
	"read-settings": {},
	"trigger-builds": {},
	"all": {},
	"status": {},
	"none": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Scope) IsValid() bool {
	_, ok := validScopeEnumValues[v]
	return ok
}

// NewScopeFromValue returns a pointer to a valid Scope
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewScopeFromValue(v string) (Scope, error) {
	ev := Scope(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Scope: valid values are %v", v, AllowedScopeEnumValues)
	}
}



// AssertScopeRequired checks if the required fields are not zero-ed
func AssertScopeRequired(obj Scope) error {
	return nil
}

// AssertScopeConstraints checks if the values respects the defined constraints
func AssertScopeConstraints(obj Scope) error {
	return nil
}
