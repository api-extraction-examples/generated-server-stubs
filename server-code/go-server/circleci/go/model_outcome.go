/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Outcome string

// List of Outcome
const (
	CANCELED Outcome = "canceled"
	INFRASTRUCTURE_FAIL Outcome = "infrastructure_fail"
	TIMEDOUT Outcome = "timedout"
	FAILED Outcome = "failed"
	NO_TESTS Outcome = "no_tests"
	SUCCESS Outcome = "success"
)

// AllowedOutcomeEnumValues is all the allowed values of Outcome enum
var AllowedOutcomeEnumValues = []Outcome{
	"canceled",
	"infrastructure_fail",
	"timedout",
	"failed",
	"no_tests",
	"success",
}

// validOutcomeEnumValue provides a map of Outcomes for fast verification of use input
var validOutcomeEnumValues = map[Outcome]struct{}{
	"canceled": {},
	"infrastructure_fail": {},
	"timedout": {},
	"failed": {},
	"no_tests": {},
	"success": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Outcome) IsValid() bool {
	_, ok := validOutcomeEnumValues[v]
	return ok
}

// NewOutcomeFromValue returns a pointer to a valid Outcome
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOutcomeFromValue(v string) (Outcome, error) {
	ev := Outcome(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Outcome: valid values are %v", v, AllowedOutcomeEnumValues)
	}
}



// AssertOutcomeRequired checks if the required fields are not zero-ed
func AssertOutcomeRequired(obj Outcome) error {
	return nil
}

// AssertOutcomeConstraints checks if the values respects the defined constraints
func AssertOutcomeConstraints(obj Outcome) error {
	return nil
}
