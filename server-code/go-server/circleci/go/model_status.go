/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Status string

// List of Status
const (
	RETRIED Status = "retried"
	CANCELED Status = "canceled"
	INFRASTRUCTURE_FAIL Status = "infrastructure_fail"
	TIMEDOUT Status = "timedout"
	NOT_RUN Status = "not_run"
	RUNNING Status = "running"
	FAILED Status = "failed"
	QUEUED Status = "queued"
	SCHEDULED Status = "scheduled"
	NOT_RUNNING Status = "not_running"
	NO_TESTS Status = "no_tests"
	FIXED Status = "fixed"
	SUCCESS Status = "success"
)

// AllowedStatusEnumValues is all the allowed values of Status enum
var AllowedStatusEnumValues = []Status{
	"retried",
	"canceled",
	"infrastructure_fail",
	"timedout",
	"not_run",
	"running",
	"failed",
	"queued",
	"scheduled",
	"not_running",
	"no_tests",
	"fixed",
	"success",
}

// validStatusEnumValue provides a map of Statuss for fast verification of use input
var validStatusEnumValues = map[Status]struct{}{
	"retried": {},
	"canceled": {},
	"infrastructure_fail": {},
	"timedout": {},
	"not_run": {},
	"running": {},
	"failed": {},
	"queued": {},
	"scheduled": {},
	"not_running": {},
	"no_tests": {},
	"fixed": {},
	"success": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Status) IsValid() bool {
	_, ok := validStatusEnumValues[v]
	return ok
}

// NewStatusFromValue returns a pointer to a valid Status
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusFromValue(v string) (Status, error) {
	ev := Status(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Status: valid values are %v", v, AllowedStatusEnumValues)
	}
}



// AssertStatusRequired checks if the required fields are not zero-ed
func AssertStatusRequired(obj Status) error {
	return nil
}

// AssertStatusConstraints checks if the values respects the defined constraints
func AssertStatusConstraints(obj Status) error {
	return nil
}
