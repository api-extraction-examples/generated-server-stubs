/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type Project struct {

	Aws Aws `json:"aws,omitempty"`

	Branches map[string]interface{} `json:"branches,omitempty"`

	CampfireNotifyPrefs *string `json:"campfire_notify_prefs,omitempty"`

	CampfireRoom *string `json:"campfire_room,omitempty"`

	CampfireSubdomain *string `json:"campfire_subdomain,omitempty"`

	CampfireToken *string `json:"campfire_token,omitempty"`

	Compile string `json:"compile,omitempty"`

	DefaultBranch string `json:"default_branch,omitempty"`

	Dependencies string `json:"dependencies,omitempty"`

	Extra string `json:"extra,omitempty"`

	FeatureFlags ProjectFeatureFlags `json:"feature_flags,omitempty"`

	FlowdockApiToken *string `json:"flowdock_api_token,omitempty"`

	Followed bool `json:"followed,omitempty"`

	HasUsableKey bool `json:"has_usable_key,omitempty"`

	HerokuDeployUser *string `json:"heroku_deploy_user,omitempty"`

	HipchatApiToken *string `json:"hipchat_api_token,omitempty"`

	HipchatNotify *string `json:"hipchat_notify,omitempty"`

	HipchatNotifyPrefs *string `json:"hipchat_notify_prefs,omitempty"`

	HipchatRoom *string `json:"hipchat_room,omitempty"`

	IrcChannel *string `json:"irc_channel,omitempty"`

	IrcKeyword *string `json:"irc_keyword,omitempty"`

	IrcNotifyPrefs *string `json:"irc_notify_prefs,omitempty"`

	IrcPassword *string `json:"irc_password,omitempty"`

	IrcServer *string `json:"irc_server,omitempty"`

	IrcUsername *string `json:"irc_username,omitempty"`

	Language string `json:"language,omitempty"`

	Oss bool `json:"oss,omitempty"`

	Parallel int32 `json:"parallel,omitempty"`

	Reponame string `json:"reponame,omitempty"`

	Scopes []Scope `json:"scopes,omitempty"`

	Setup string `json:"setup,omitempty"`

	SlackApiToken *string `json:"slack_api_token,omitempty"`

	SlackChannel *string `json:"slack_channel,omitempty"`

	SlackChannelOverride *string `json:"slack_channel_override,omitempty"`

	SlackNotifyPrefs *string `json:"slack_notify_prefs,omitempty"`

	SlackSubdomain *string `json:"slack_subdomain,omitempty"`

	SlackWebhookUrl string `json:"slack_webhook_url,omitempty"`

	SshKeys []string `json:"ssh_keys,omitempty"`

	Test string `json:"test,omitempty"`

	Username string `json:"username,omitempty"`

	VcsType string `json:"vcs_type,omitempty"`

	VcsUrl string `json:"vcs_url,omitempty"`
}

// AssertProjectRequired checks if the required fields are not zero-ed
func AssertProjectRequired(obj Project) error {
	if err := AssertAwsRequired(obj.Aws); err != nil {
		return err
	}
	if err := AssertProjectFeatureFlagsRequired(obj.FeatureFlags); err != nil {
		return err
	}
	return nil
}

// AssertProjectConstraints checks if the values respects the defined constraints
func AssertProjectConstraints(obj Project) error {
	return nil
}
