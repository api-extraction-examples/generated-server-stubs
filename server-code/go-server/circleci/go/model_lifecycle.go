/*
 * CircleCI REST API
 *
 * The CircleCI API is a RESTful, fully-featured API that allows you to do almost anything in CircleCI. You can access all information and trigger all actions. The only thing we donâ€™t provide access to is billing functions, which must be done from the CircleCI web UI. 
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Lifecycle string

// List of Lifecycle
const (
	QUEUED Lifecycle = "queued"
	SCHEDULED Lifecycle = "scheduled"
	NOT_RUN Lifecycle = "not_run"
	NOT_RUNNING Lifecycle = "not_running"
	RUNNING Lifecycle = "running"
	FINISHED Lifecycle = "finished"
)

// AllowedLifecycleEnumValues is all the allowed values of Lifecycle enum
var AllowedLifecycleEnumValues = []Lifecycle{
	"queued",
	"scheduled",
	"not_run",
	"not_running",
	"running",
	"finished",
}

// validLifecycleEnumValue provides a map of Lifecycles for fast verification of use input
var validLifecycleEnumValues = map[Lifecycle]struct{}{
	"queued": {},
	"scheduled": {},
	"not_run": {},
	"not_running": {},
	"running": {},
	"finished": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Lifecycle) IsValid() bool {
	_, ok := validLifecycleEnumValues[v]
	return ok
}

// NewLifecycleFromValue returns a pointer to a valid Lifecycle
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLifecycleFromValue(v string) (Lifecycle, error) {
	ev := Lifecycle(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Lifecycle: valid values are %v", v, AllowedLifecycleEnumValues)
	}
}



// AssertLifecycleRequired checks if the required fields are not zero-ed
func AssertLifecycleRequired(obj Lifecycle) error {
	return nil
}

// AssertLifecycleConstraints checks if the values respects the defined constraints
func AssertLifecycleConstraints(obj Lifecycle) error {
	return nil
}
