/*
 * AltoroJ REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Class3TransferAPIController binds http requests to an api service and writes the service results to the http response
type Class3TransferAPIController struct {
	service Class3TransferAPIServicer
	errorHandler ErrorHandler
}

// Class3TransferAPIOption for how the controller is set up.
type Class3TransferAPIOption func(*Class3TransferAPIController)

// WithClass3TransferAPIErrorHandler inject ErrorHandler into controller
func WithClass3TransferAPIErrorHandler(h ErrorHandler) Class3TransferAPIOption {
	return func(c *Class3TransferAPIController) {
		c.errorHandler = h
	}
}

// NewClass3TransferAPIController creates a default api controller
func NewClass3TransferAPIController(s Class3TransferAPIServicer, opts ...Class3TransferAPIOption) Router {
	controller := &Class3TransferAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the Class3TransferAPIController
func (c *Class3TransferAPIController) Routes() Routes {
	return Routes{
		"Trasnfer": Route{
			strings.ToUpper("Post"),
			"/api/transfer",
			c.Trasnfer,
		},
	}
}

// Trasnfer - 
func (c *Class3TransferAPIController) Trasnfer(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	bodyParam := Transfer{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTransferRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTransferConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Trasnfer(r.Context(), authorizationParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
