/*
 * AltoroJ REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Class5AdminAPIController binds http requests to an api service and writes the service results to the http response
type Class5AdminAPIController struct {
	service Class5AdminAPIServicer
	errorHandler ErrorHandler
}

// Class5AdminAPIOption for how the controller is set up.
type Class5AdminAPIOption func(*Class5AdminAPIController)

// WithClass5AdminAPIErrorHandler inject ErrorHandler into controller
func WithClass5AdminAPIErrorHandler(h ErrorHandler) Class5AdminAPIOption {
	return func(c *Class5AdminAPIController) {
		c.errorHandler = h
	}
}

// NewClass5AdminAPIController creates a default api controller
func NewClass5AdminAPIController(s Class5AdminAPIServicer, opts ...Class5AdminAPIOption) Router {
	controller := &Class5AdminAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the Class5AdminAPIController
func (c *Class5AdminAPIController) Routes() Routes {
	return Routes{
		"AddUser": Route{
			strings.ToUpper("Post"),
			"/api/admin/addUser",
			c.AddUser,
		},
		"ChangePassword": Route{
			strings.ToUpper("Post"),
			"/api/admin/changePassword",
			c.ChangePassword,
		},
	}
}

// AddUser - 
func (c *Class5AdminAPIController) AddUser(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	bodyParam := NewUser{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewUserRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNewUserConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddUser(r.Context(), authorizationParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ChangePassword - 
func (c *Class5AdminAPIController) ChangePassword(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	bodyParam := ChangePassword{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangePasswordRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangePasswordConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ChangePassword(r.Context(), authorizationParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
