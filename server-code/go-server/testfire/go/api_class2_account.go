/*
 * AltoroJ REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Class2AccountAPIController binds http requests to an api service and writes the service results to the http response
type Class2AccountAPIController struct {
	service Class2AccountAPIServicer
	errorHandler ErrorHandler
}

// Class2AccountAPIOption for how the controller is set up.
type Class2AccountAPIOption func(*Class2AccountAPIController)

// WithClass2AccountAPIErrorHandler inject ErrorHandler into controller
func WithClass2AccountAPIErrorHandler(h ErrorHandler) Class2AccountAPIOption {
	return func(c *Class2AccountAPIController) {
		c.errorHandler = h
	}
}

// NewClass2AccountAPIController creates a default api controller
func NewClass2AccountAPIController(s Class2AccountAPIServicer, opts ...Class2AccountAPIOption) Router {
	controller := &Class2AccountAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the Class2AccountAPIController
func (c *Class2AccountAPIController) Routes() Routes {
	return Routes{
		"GetAccount": Route{
			strings.ToUpper("Get"),
			"/api/account",
			c.GetAccount,
		},
		"GetAccountBalance": Route{
			strings.ToUpper("Get"),
			"/api/account/{accountNo}",
			c.GetAccountBalance,
		},
		"GetTransactions": Route{
			strings.ToUpper("Post"),
			"/api/account/{accountNo}/transactions",
			c.GetTransactions,
		},
		"ShowLastTenTransactions": Route{
			strings.ToUpper("Get"),
			"/api/account/{accountNo}/transactions",
			c.ShowLastTenTransactions,
		},
	}
}

// GetAccount - 
func (c *Class2AccountAPIController) GetAccount(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	result, err := c.service.GetAccount(r.Context(), authorizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAccountBalance - 
func (c *Class2AccountAPIController) GetAccountBalance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	accountNoParam := params["accountNo"]
	if accountNoParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountNo"}, nil)
		return
	}
	result, err := c.service.GetAccountBalance(r.Context(), authorizationParam, accountNoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTransactions - 
func (c *Class2AccountAPIController) GetTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	accountNoParam := params["accountNo"]
	if accountNoParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountNo"}, nil)
		return
	}
	bodyParam := Dates{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDatesRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDatesConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetTransactions(r.Context(), authorizationParam, accountNoParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShowLastTenTransactions - 
func (c *Class2AccountAPIController) ShowLastTenTransactions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	authorizationParam := r.Header.Get("Authorization")
	accountNoParam := params["accountNo"]
	if accountNoParam == "" {
		c.errorHandler(w, r, &RequiredError{"accountNo"}, nil)
		return
	}
	result, err := c.service.ShowLastTenTransactions(r.Context(), authorizationParam, accountNoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
