/*
 * AltoroJ REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0.2
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// Class1LoginAPIController binds http requests to an api service and writes the service results to the http response
type Class1LoginAPIController struct {
	service Class1LoginAPIServicer
	errorHandler ErrorHandler
}

// Class1LoginAPIOption for how the controller is set up.
type Class1LoginAPIOption func(*Class1LoginAPIController)

// WithClass1LoginAPIErrorHandler inject ErrorHandler into controller
func WithClass1LoginAPIErrorHandler(h ErrorHandler) Class1LoginAPIOption {
	return func(c *Class1LoginAPIController) {
		c.errorHandler = h
	}
}

// NewClass1LoginAPIController creates a default api controller
func NewClass1LoginAPIController(s Class1LoginAPIServicer, opts ...Class1LoginAPIOption) Router {
	controller := &Class1LoginAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the Class1LoginAPIController
func (c *Class1LoginAPIController) Routes() Routes {
	return Routes{
		"CheckLogin": Route{
			strings.ToUpper("Get"),
			"/api/login",
			c.CheckLogin,
		},
		"Login": Route{
			strings.ToUpper("Post"),
			"/api/login",
			c.Login,
		},
	}
}

// CheckLogin - Check if any user is logged in
func (c *Class1LoginAPIController) CheckLogin(w http.ResponseWriter, r *http.Request) {
	authorizationParam := r.Header.Get("Authorization")
	result, err := c.service.CheckLogin(r.Context(), authorizationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Login - Login method
func (c *Class1LoginAPIController) Login(w http.ResponseWriter, r *http.Request) {
	bodyParam := Login{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertLoginRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertLoginConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.Login(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
