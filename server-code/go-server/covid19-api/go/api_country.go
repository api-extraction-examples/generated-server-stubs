/*
 * COVID-19 data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CountryAPIController binds http requests to an api service and writes the service results to the http response
type CountryAPIController struct {
	service CountryAPIServicer
	errorHandler ErrorHandler
}

// CountryAPIOption for how the controller is set up.
type CountryAPIOption func(*CountryAPIController)

// WithCountryAPIErrorHandler inject ErrorHandler into controller
func WithCountryAPIErrorHandler(h ErrorHandler) CountryAPIOption {
	return func(c *CountryAPIController) {
		c.errorHandler = h
	}
}

// NewCountryAPIController creates a default api controller
func NewCountryAPIController(s CountryAPIServicer, opts ...CountryAPIOption) Router {
	controller := &CountryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CountryAPIController
func (c *CountryAPIController) Routes() Routes {
	return Routes{
		"GetDailyReportAllCountries": Route{
			strings.ToUpper("Get"),
			"/report/country/all",
			c.GetDailyReportAllCountries,
		},
		"GetDailyReportByCountryCode": Route{
			strings.ToUpper("Get"),
			"/report/country/code",
			c.GetDailyReportByCountryCode,
		},
		"GetDailyReportByCountryName": Route{
			strings.ToUpper("Get"),
			"/report/country/name",
			c.GetDailyReportByCountryName,
		},
		"GetLatestAllCountries": Route{
			strings.ToUpper("Get"),
			"/country/all",
			c.GetLatestAllCountries,
		},
		"GetLatestCountryDataByCode": Route{
			strings.ToUpper("Get"),
			"/country/code",
			c.GetLatestCountryDataByCode,
		},
		"GetLatestCountryDataByName": Route{
			strings.ToUpper("Get"),
			"/country",
			c.GetLatestCountryDataByName,
		},
	}
}

// GetDailyReportAllCountries - getDailyReportAllCountries
func (c *CountryAPIController) GetDailyReportAllCountries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dateParam string
	if query.Has("date") {
		param := query.Get("date")

		dateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "date"}, nil)
		return
	}
	var dateFormatParam string
	if query.Has("date-format") {
		param := query.Get("date-format")

		dateFormatParam = param
	} else {
		param := YYYY-MM-DD
		dateFormatParam = param
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetDailyReportAllCountries(r.Context(), dateParam, dateFormatParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDailyReportByCountryCode - getDailyReportByCountryCode
func (c *CountryAPIController) GetDailyReportByCountryCode(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var codeParam string
	if query.Has("code") {
		param := query.Get("code")

		codeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "code"}, nil)
		return
	}
	var dateParam string
	if query.Has("date") {
		param := query.Get("date")

		dateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "date"}, nil)
		return
	}
	var dateFormatParam string
	if query.Has("date-format") {
		param := query.Get("date-format")

		dateFormatParam = param
	} else {
		param := YYYY-MM-DD
		dateFormatParam = param
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetDailyReportByCountryCode(r.Context(), codeParam, dateParam, dateFormatParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDailyReportByCountryName - getDailyReportByCountryName
func (c *CountryAPIController) GetDailyReportByCountryName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	var dateParam string
	if query.Has("date") {
		param := query.Get("date")

		dateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "date"}, nil)
		return
	}
	var dateFormatParam string
	if query.Has("date-format") {
		param := query.Get("date-format")

		dateFormatParam = param
	} else {
		param := YYYY-MM-DD
		dateFormatParam = param
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetDailyReportByCountryName(r.Context(), nameParam, dateParam, dateFormatParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestAllCountries - getLatestAllCountries
func (c *CountryAPIController) GetLatestAllCountries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetLatestAllCountries(r.Context(), formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestCountryDataByCode - getLatestCountryDataByCode
func (c *CountryAPIController) GetLatestCountryDataByCode(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var codeParam string
	if query.Has("code") {
		param := query.Get("code")

		codeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "code"}, nil)
		return
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetLatestCountryDataByCode(r.Context(), codeParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestCountryDataByName - getLatestCountryDataByName
func (c *CountryAPIController) GetLatestCountryDataByName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetLatestCountryDataByName(r.Context(), nameParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
