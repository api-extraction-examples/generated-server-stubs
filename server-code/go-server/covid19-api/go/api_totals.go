/*
 * COVID-19 data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TotalsAPIController binds http requests to an api service and writes the service results to the http response
type TotalsAPIController struct {
	service TotalsAPIServicer
	errorHandler ErrorHandler
}

// TotalsAPIOption for how the controller is set up.
type TotalsAPIOption func(*TotalsAPIController)

// WithTotalsAPIErrorHandler inject ErrorHandler into controller
func WithTotalsAPIErrorHandler(h ErrorHandler) TotalsAPIOption {
	return func(c *TotalsAPIController) {
		c.errorHandler = h
	}
}

// NewTotalsAPIController creates a default api controller
func NewTotalsAPIController(s TotalsAPIServicer, opts ...TotalsAPIOption) Router {
	controller := &TotalsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TotalsAPIController
func (c *TotalsAPIController) Routes() Routes {
	return Routes{
		"GetDailyReportTotals": Route{
			strings.ToUpper("Get"),
			"/report/totals",
			c.GetDailyReportTotals,
		},
		"GetLatestTotals": Route{
			strings.ToUpper("Get"),
			"/totals",
			c.GetLatestTotals,
		},
	}
}

// GetDailyReportTotals - getDailyReportTotals
func (c *TotalsAPIController) GetDailyReportTotals(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var dateParam string
	if query.Has("date") {
		param := query.Get("date")

		dateParam = param
	} else {
	}
	var dateFormatParam string
	if query.Has("date-format") {
		param := query.Get("date-format")

		dateFormatParam = param
	} else {
		param := YYYY-MM-DD
		dateFormatParam = param
	}
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetDailyReportTotals(r.Context(), dateParam, dateFormatParam, formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestTotals - getLatestTotals
func (c *TotalsAPIController) GetLatestTotals(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetLatestTotals(r.Context(), formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
