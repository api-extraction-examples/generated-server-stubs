/*
 * COVID-19 data API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.2.6
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// HelpAPIController binds http requests to an api service and writes the service results to the http response
type HelpAPIController struct {
	service HelpAPIServicer
	errorHandler ErrorHandler
}

// HelpAPIOption for how the controller is set up.
type HelpAPIOption func(*HelpAPIController)

// WithHelpAPIErrorHandler inject ErrorHandler into controller
func WithHelpAPIErrorHandler(h ErrorHandler) HelpAPIOption {
	return func(c *HelpAPIController) {
		c.errorHandler = h
	}
}

// NewHelpAPIController creates a default api controller
func NewHelpAPIController(s HelpAPIServicer, opts ...HelpAPIOption) Router {
	controller := &HelpAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the HelpAPIController
func (c *HelpAPIController) Routes() Routes {
	return Routes{
		"GetListOfCountries": Route{
			strings.ToUpper("Get"),
			"/help/countries",
			c.GetListOfCountries,
		},
	}
}

// GetListOfCountries - getListOfCountries
func (c *HelpAPIController) GetListOfCountries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var formatParam string
	if query.Has("format") {
		param := query.Get("format")

		formatParam = param
	} else {
		param := json
		formatParam = param
	}
	result, err := c.service.GetListOfCountries(r.Context(), formatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
