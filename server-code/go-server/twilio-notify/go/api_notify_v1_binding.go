/*
 * Twilio - Notify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.52.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// NotifyV1BindingAPIController binds http requests to an api service and writes the service results to the http response
type NotifyV1BindingAPIController struct {
	service NotifyV1BindingAPIServicer
	errorHandler ErrorHandler
}

// NotifyV1BindingAPIOption for how the controller is set up.
type NotifyV1BindingAPIOption func(*NotifyV1BindingAPIController)

// WithNotifyV1BindingAPIErrorHandler inject ErrorHandler into controller
func WithNotifyV1BindingAPIErrorHandler(h ErrorHandler) NotifyV1BindingAPIOption {
	return func(c *NotifyV1BindingAPIController) {
		c.errorHandler = h
	}
}

// NewNotifyV1BindingAPIController creates a default api controller
func NewNotifyV1BindingAPIController(s NotifyV1BindingAPIServicer, opts ...NotifyV1BindingAPIOption) Router {
	controller := &NotifyV1BindingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotifyV1BindingAPIController
func (c *NotifyV1BindingAPIController) Routes() Routes {
	return Routes{
		"CreateBinding": Route{
			strings.ToUpper("Post"),
			"/v1/Services/{ServiceSid}/Bindings",
			c.CreateBinding,
		},
		"DeleteBinding": Route{
			strings.ToUpper("Delete"),
			"/v1/Services/{ServiceSid}/Bindings/{Sid}",
			c.DeleteBinding,
		},
		"FetchBinding": Route{
			strings.ToUpper("Get"),
			"/v1/Services/{ServiceSid}/Bindings/{Sid}",
			c.FetchBinding,
		},
		"ListBinding": Route{
			strings.ToUpper("Get"),
			"/v1/Services/{ServiceSid}/Bindings",
			c.ListBinding,
		},
	}
}

// CreateBinding - 
func (c *NotifyV1BindingAPIController) CreateBinding(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	serviceSidParam := params["ServiceSid"]
	if serviceSidParam == "" {
		c.errorHandler(w, r, &RequiredError{"ServiceSid"}, nil)
		return
	}
	
	
	addressParam := r.FormValue("Address")
	
	
	bindingTypeParam := r.FormValue("BindingType")
	
	
	identityParam := r.FormValue("Identity")
	
	
	credentialSidParam := r.FormValue("CredentialSid")
	
	
	endpointParam := r.FormValue("Endpoint")
	
	
	notificationProtocolVersionParam := r.FormValue("NotificationProtocolVersion")
	
	
	tagParam := strings.Split(r.FormValue("Tag"), ",")
	result, err := c.service.CreateBinding(r.Context(), serviceSidParam, addressParam, bindingTypeParam, identityParam, credentialSidParam, endpointParam, notificationProtocolVersionParam, tagParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteBinding - 
func (c *NotifyV1BindingAPIController) DeleteBinding(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serviceSidParam := params["ServiceSid"]
	if serviceSidParam == "" {
		c.errorHandler(w, r, &RequiredError{"ServiceSid"}, nil)
		return
	}
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.DeleteBinding(r.Context(), serviceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FetchBinding - 
func (c *NotifyV1BindingAPIController) FetchBinding(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serviceSidParam := params["ServiceSid"]
	if serviceSidParam == "" {
		c.errorHandler(w, r, &RequiredError{"ServiceSid"}, nil)
		return
	}
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.FetchBinding(r.Context(), serviceSidParam, sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListBinding - 
func (c *NotifyV1BindingAPIController) ListBinding(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	serviceSidParam := params["ServiceSid"]
	if serviceSidParam == "" {
		c.errorHandler(w, r, &RequiredError{"ServiceSid"}, nil)
		return
	}
	var startDateParam string
	if query.Has("StartDate") {
		param := string(query.Get("StartDate"))

		startDateParam = param
	} else {
	}
	var endDateParam string
	if query.Has("EndDate") {
		param := string(query.Get("EndDate"))

		endDateParam = param
	} else {
	}
	var identityParam []string
	if query.Has("Identity") {
		identityParam = strings.Split(query.Get("Identity"), ",")
	}
	var tagParam []string
	if query.Has("Tag") {
		tagParam = strings.Split(query.Get("Tag"), ",")
	}
	var pageSizeParam int32
	if query.Has("PageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("PageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("Page") {
		param, err := parseNumericParameter[int32](
			query.Get("Page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageTokenParam string
	if query.Has("PageToken") {
		param := query.Get("PageToken")

		pageTokenParam = param
	} else {
	}
	result, err := c.service.ListBinding(r.Context(), serviceSidParam, startDateParam, endDateParam, identityParam, tagParam, pageSizeParam, pageParam, pageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
