/*
 * Twilio - Notify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.52.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NotifyV1ServiceAPIController binds http requests to an api service and writes the service results to the http response
type NotifyV1ServiceAPIController struct {
	service NotifyV1ServiceAPIServicer
	errorHandler ErrorHandler
}

// NotifyV1ServiceAPIOption for how the controller is set up.
type NotifyV1ServiceAPIOption func(*NotifyV1ServiceAPIController)

// WithNotifyV1ServiceAPIErrorHandler inject ErrorHandler into controller
func WithNotifyV1ServiceAPIErrorHandler(h ErrorHandler) NotifyV1ServiceAPIOption {
	return func(c *NotifyV1ServiceAPIController) {
		c.errorHandler = h
	}
}

// NewNotifyV1ServiceAPIController creates a default api controller
func NewNotifyV1ServiceAPIController(s NotifyV1ServiceAPIServicer, opts ...NotifyV1ServiceAPIOption) Router {
	controller := &NotifyV1ServiceAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotifyV1ServiceAPIController
func (c *NotifyV1ServiceAPIController) Routes() Routes {
	return Routes{
		"CreateService": Route{
			strings.ToUpper("Post"),
			"/v1/Services",
			c.CreateService,
		},
		"DeleteService": Route{
			strings.ToUpper("Delete"),
			"/v1/Services/{Sid}",
			c.DeleteService,
		},
		"FetchService": Route{
			strings.ToUpper("Get"),
			"/v1/Services/{Sid}",
			c.FetchService,
		},
		"ListService": Route{
			strings.ToUpper("Get"),
			"/v1/Services",
			c.ListService,
		},
		"UpdateService": Route{
			strings.ToUpper("Post"),
			"/v1/Services/{Sid}",
			c.UpdateService,
		},
	}
}

// CreateService - 
func (c *NotifyV1ServiceAPIController) CreateService(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	alexaSkillIdParam := r.FormValue("AlexaSkillId")
	
	
	apnCredentialSidParam := r.FormValue("ApnCredentialSid")
	
	
	defaultAlexaNotificationProtocolVersionParam := r.FormValue("DefaultAlexaNotificationProtocolVersion")
	
	
	defaultApnNotificationProtocolVersionParam := r.FormValue("DefaultApnNotificationProtocolVersion")
	
	
	defaultFcmNotificationProtocolVersionParam := r.FormValue("DefaultFcmNotificationProtocolVersion")
	
	
	defaultGcmNotificationProtocolVersionParam := r.FormValue("DefaultGcmNotificationProtocolVersion")
	
	
	deliveryCallbackEnabledParam := r.FormValue("DeliveryCallbackEnabled")
	
	
	deliveryCallbackUrlParam := r.FormValue("DeliveryCallbackUrl")
	
	
	facebookMessengerPageIdParam := r.FormValue("FacebookMessengerPageId")
	
	
	fcmCredentialSidParam := r.FormValue("FcmCredentialSid")
	
	
	friendlyNameParam := r.FormValue("FriendlyName")
	
	
	gcmCredentialSidParam := r.FormValue("GcmCredentialSid")
	
	
	logEnabledParam := r.FormValue("LogEnabled")
	
	
	messagingServiceSidParam := r.FormValue("MessagingServiceSid")
	result, err := c.service.CreateService(r.Context(), alexaSkillIdParam, apnCredentialSidParam, defaultAlexaNotificationProtocolVersionParam, defaultApnNotificationProtocolVersionParam, defaultFcmNotificationProtocolVersionParam, defaultGcmNotificationProtocolVersionParam, deliveryCallbackEnabledParam, deliveryCallbackUrlParam, facebookMessengerPageIdParam, fcmCredentialSidParam, friendlyNameParam, gcmCredentialSidParam, logEnabledParam, messagingServiceSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteService - 
func (c *NotifyV1ServiceAPIController) DeleteService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.DeleteService(r.Context(), sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FetchService - 
func (c *NotifyV1ServiceAPIController) FetchService(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.FetchService(r.Context(), sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListService - 
func (c *NotifyV1ServiceAPIController) ListService(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var friendlyNameParam string
	if query.Has("FriendlyName") {
		param := query.Get("FriendlyName")

		friendlyNameParam = param
	} else {
	}
	var pageSizeParam int32
	if query.Has("PageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("PageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("Page") {
		param, err := parseNumericParameter[int32](
			query.Get("Page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageTokenParam string
	if query.Has("PageToken") {
		param := query.Get("PageToken")

		pageTokenParam = param
	} else {
	}
	result, err := c.service.ListService(r.Context(), friendlyNameParam, pageSizeParam, pageParam, pageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateService - 
func (c *NotifyV1ServiceAPIController) UpdateService(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	
	
	alexaSkillIdParam := r.FormValue("AlexaSkillId")
	
	
	apnCredentialSidParam := r.FormValue("ApnCredentialSid")
	
	
	defaultAlexaNotificationProtocolVersionParam := r.FormValue("DefaultAlexaNotificationProtocolVersion")
	
	
	defaultApnNotificationProtocolVersionParam := r.FormValue("DefaultApnNotificationProtocolVersion")
	
	
	defaultFcmNotificationProtocolVersionParam := r.FormValue("DefaultFcmNotificationProtocolVersion")
	
	
	defaultGcmNotificationProtocolVersionParam := r.FormValue("DefaultGcmNotificationProtocolVersion")
	
	
	deliveryCallbackEnabledParam := r.FormValue("DeliveryCallbackEnabled")
	
	
	deliveryCallbackUrlParam := r.FormValue("DeliveryCallbackUrl")
	
	
	facebookMessengerPageIdParam := r.FormValue("FacebookMessengerPageId")
	
	
	fcmCredentialSidParam := r.FormValue("FcmCredentialSid")
	
	
	friendlyNameParam := r.FormValue("FriendlyName")
	
	
	gcmCredentialSidParam := r.FormValue("GcmCredentialSid")
	
	
	logEnabledParam := r.FormValue("LogEnabled")
	
	
	messagingServiceSidParam := r.FormValue("MessagingServiceSid")
	result, err := c.service.UpdateService(r.Context(), sidParam, alexaSkillIdParam, apnCredentialSidParam, defaultAlexaNotificationProtocolVersionParam, defaultApnNotificationProtocolVersionParam, defaultFcmNotificationProtocolVersionParam, defaultGcmNotificationProtocolVersionParam, deliveryCallbackEnabledParam, deliveryCallbackUrlParam, facebookMessengerPageIdParam, fcmCredentialSidParam, friendlyNameParam, gcmCredentialSidParam, logEnabledParam, messagingServiceSidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
