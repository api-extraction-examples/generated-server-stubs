/*
 * Twilio - Notify
 *
 * This is the public Twilio REST API.
 *
 * API version: 1.52.0
 * Contact: support@twilio.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NotifyV1CredentialAPIController binds http requests to an api service and writes the service results to the http response
type NotifyV1CredentialAPIController struct {
	service NotifyV1CredentialAPIServicer
	errorHandler ErrorHandler
}

// NotifyV1CredentialAPIOption for how the controller is set up.
type NotifyV1CredentialAPIOption func(*NotifyV1CredentialAPIController)

// WithNotifyV1CredentialAPIErrorHandler inject ErrorHandler into controller
func WithNotifyV1CredentialAPIErrorHandler(h ErrorHandler) NotifyV1CredentialAPIOption {
	return func(c *NotifyV1CredentialAPIController) {
		c.errorHandler = h
	}
}

// NewNotifyV1CredentialAPIController creates a default api controller
func NewNotifyV1CredentialAPIController(s NotifyV1CredentialAPIServicer, opts ...NotifyV1CredentialAPIOption) Router {
	controller := &NotifyV1CredentialAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotifyV1CredentialAPIController
func (c *NotifyV1CredentialAPIController) Routes() Routes {
	return Routes{
		"CreateCredential": Route{
			strings.ToUpper("Post"),
			"/v1/Credentials",
			c.CreateCredential,
		},
		"DeleteCredential": Route{
			strings.ToUpper("Delete"),
			"/v1/Credentials/{Sid}",
			c.DeleteCredential,
		},
		"FetchCredential": Route{
			strings.ToUpper("Get"),
			"/v1/Credentials/{Sid}",
			c.FetchCredential,
		},
		"ListCredential": Route{
			strings.ToUpper("Get"),
			"/v1/Credentials",
			c.ListCredential,
		},
		"UpdateCredential": Route{
			strings.ToUpper("Post"),
			"/v1/Credentials/{Sid}",
			c.UpdateCredential,
		},
	}
}

// CreateCredential - 
func (c *NotifyV1CredentialAPIController) CreateCredential(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	
	
	type_Param := r.FormValue("Type")
	
	
	apiKeyParam := r.FormValue("ApiKey")
	
	
	certificateParam := r.FormValue("Certificate")
	
	
	friendlyNameParam := r.FormValue("FriendlyName")
	
	
	privateKeyParam := r.FormValue("PrivateKey")
	
	
	sandboxParam := r.FormValue("Sandbox")
	
	
	secretParam := r.FormValue("Secret")
	result, err := c.service.CreateCredential(r.Context(), type_Param, apiKeyParam, certificateParam, friendlyNameParam, privateKeyParam, sandboxParam, secretParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteCredential - 
func (c *NotifyV1CredentialAPIController) DeleteCredential(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.DeleteCredential(r.Context(), sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FetchCredential - 
func (c *NotifyV1CredentialAPIController) FetchCredential(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	result, err := c.service.FetchCredential(r.Context(), sidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ListCredential - 
func (c *NotifyV1CredentialAPIController) ListCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pageSizeParam int32
	if query.Has("PageSize") {
		param, err := parseNumericParameter[int32](
			query.Get("PageSize"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageSizeParam = param
	} else {
	}
	var pageParam int32
	if query.Has("Page") {
		param, err := parseNumericParameter[int32](
			query.Get("Page"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](0),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pageParam = param
	} else {
	}
	var pageTokenParam string
	if query.Has("PageToken") {
		param := query.Get("PageToken")

		pageTokenParam = param
	} else {
	}
	result, err := c.service.ListCredential(r.Context(), pageSizeParam, pageParam, pageTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCredential - 
func (c *NotifyV1CredentialAPIController) UpdateCredential(w http.ResponseWriter, r *http.Request) {
	if err := r.ParseForm(); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	params := mux.Vars(r)
	sidParam := params["Sid"]
	if sidParam == "" {
		c.errorHandler(w, r, &RequiredError{"Sid"}, nil)
		return
	}
	
	
	apiKeyParam := r.FormValue("ApiKey")
	
	
	certificateParam := r.FormValue("Certificate")
	
	
	friendlyNameParam := r.FormValue("FriendlyName")
	
	
	privateKeyParam := r.FormValue("PrivateKey")
	
	
	sandboxParam := r.FormValue("Sandbox")
	
	
	secretParam := r.FormValue("Secret")
	result, err := c.service.UpdateCredential(r.Context(), sidParam, apiKeyParam, certificateParam, friendlyNameParam, privateKeyParam, sandboxParam, secretParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
