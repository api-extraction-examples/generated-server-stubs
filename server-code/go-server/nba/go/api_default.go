/*
 * NBA Stats API
 *
 * The destination for current and historic NBA statistics.
 *
 * API version: version
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"AllstarballotpredictorGet": Route{
			strings.ToUpper("Get"),
			"/stats/allstarballotpredictor",
			c.AllstarballotpredictorGet,
		},
		"BoxscoreGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscore",
			c.BoxscoreGet,
		},
		"BoxscoreadvancedGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoreadvanced",
			c.BoxscoreadvancedGet,
		},
		"Boxscoreadvancedv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoreadvancedv2",
			c.Boxscoreadvancedv2Get,
		},
		"BoxscorefourfactorsGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscorefourfactors",
			c.BoxscorefourfactorsGet,
		},
		"Boxscorefourfactorsv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscorefourfactorsv2",
			c.Boxscorefourfactorsv2Get,
		},
		"BoxscoremiscGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoremisc",
			c.BoxscoremiscGet,
		},
		"Boxscoremiscv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoremiscv2",
			c.Boxscoremiscv2Get,
		},
		"Boxscoreplayertrackv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoreplayertrackv2",
			c.Boxscoreplayertrackv2Get,
		},
		"BoxscorescoringGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscorescoring",
			c.BoxscorescoringGet,
		},
		"Boxscorescoringv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscorescoringv2",
			c.Boxscorescoringv2Get,
		},
		"Boxscoresummaryv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoresummaryv2",
			c.Boxscoresummaryv2Get,
		},
		"Boxscoretraditionalv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoretraditionalv2",
			c.Boxscoretraditionalv2Get,
		},
		"BoxscoreusageGet": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoreusage",
			c.BoxscoreusageGet,
		},
		"Boxscoreusagev2Get": Route{
			strings.ToUpper("Get"),
			"/stats/boxscoreusagev2",
			c.Boxscoreusagev2Get,
		},
		"CommonTeamYearsGet": Route{
			strings.ToUpper("Get"),
			"/stats/commonTeamYears",
			c.CommonTeamYearsGet,
		},
		"CommonallplayersGet": Route{
			strings.ToUpper("Get"),
			"/stats/commonallplayers",
			c.CommonallplayersGet,
		},
		"CommonplayerinfoGet": Route{
			strings.ToUpper("Get"),
			"/stats/commonplayerinfo",
			c.CommonplayerinfoGet,
		},
		"CommonplayoffseriesGet": Route{
			strings.ToUpper("Get"),
			"/stats/commonplayoffseries",
			c.CommonplayoffseriesGet,
		},
		"CommonteamrosterGet": Route{
			strings.ToUpper("Get"),
			"/stats/commonteamroster",
			c.CommonteamrosterGet,
		},
		"DraftcombinedrillresultsGet": Route{
			strings.ToUpper("Get"),
			"/stats/draftcombinedrillresults",
			c.DraftcombinedrillresultsGet,
		},
		"DraftcombinenonstationaryshootingGet": Route{
			strings.ToUpper("Get"),
			"/stats/draftcombinenonstationaryshooting",
			c.DraftcombinenonstationaryshootingGet,
		},
		"DraftcombineplayeranthroGet": Route{
			strings.ToUpper("Get"),
			"/stats/draftcombineplayeranthro",
			c.DraftcombineplayeranthroGet,
		},
		"DraftcombinespotshootingGet": Route{
			strings.ToUpper("Get"),
			"/stats/draftcombinespotshooting",
			c.DraftcombinespotshootingGet,
		},
		"DraftcombinestatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/draftcombinestats",
			c.DraftcombinestatsGet,
		},
		"DrafthistoryGet": Route{
			strings.ToUpper("Get"),
			"/stats/drafthistory",
			c.DrafthistoryGet,
		},
		"FranchisehistoryGet": Route{
			strings.ToUpper("Get"),
			"/stats/franchisehistory",
			c.FranchisehistoryGet,
		},
		"HomepageleadersGet": Route{
			strings.ToUpper("Get"),
			"/stats/homepageleaders",
			c.HomepageleadersGet,
		},
		"Homepagev2Get": Route{
			strings.ToUpper("Get"),
			"/stats/homepagev2",
			c.Homepagev2Get,
		},
		"LeaderstilesGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaderstiles",
			c.LeaderstilesGet,
		},
		"LeaguedashlineupsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashlineups",
			c.LeaguedashlineupsGet,
		},
		"LeaguedashplayerbiostatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashplayerbiostats",
			c.LeaguedashplayerbiostatsGet,
		},
		"LeaguedashplayerclutchGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashplayerclutch",
			c.LeaguedashplayerclutchGet,
		},
		"LeaguedashplayerptshotGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashplayerptshot",
			c.LeaguedashplayerptshotGet,
		},
		"LeaguedashplayershotlocationsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashplayershotlocations",
			c.LeaguedashplayershotlocationsGet,
		},
		"LeaguedashplayerstatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashplayerstats",
			c.LeaguedashplayerstatsGet,
		},
		"LeaguedashptdefendGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashptdefend",
			c.LeaguedashptdefendGet,
		},
		"LeaguedashptteamdefendGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashptteamdefend",
			c.LeaguedashptteamdefendGet,
		},
		"LeaguedashteamclutchGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashteamclutch",
			c.LeaguedashteamclutchGet,
		},
		"LeaguedashteamptshotGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashteamptshot",
			c.LeaguedashteamptshotGet,
		},
		"LeaguedashteamshotlocationsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashteamshotlocations",
			c.LeaguedashteamshotlocationsGet,
		},
		"LeaguedashteamstatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/leaguedashteamstats",
			c.LeaguedashteamstatsGet,
		},
		"LeagueleadersGet": Route{
			strings.ToUpper("Get"),
			"/stats/leagueleaders",
			c.LeagueleadersGet,
		},
		"PlaybyplayGet": Route{
			strings.ToUpper("Get"),
			"/stats/playbyplay",
			c.PlaybyplayGet,
		},
		"Playbyplayv2Get": Route{
			strings.ToUpper("Get"),
			"/stats/playbyplayv2",
			c.Playbyplayv2Get,
		},
		"PlayercareerstatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playercareerstats",
			c.PlayercareerstatsGet,
		},
		"PlayercompareGet": Route{
			strings.ToUpper("Get"),
			"/stats/playercompare",
			c.PlayercompareGet,
		},
		"PlayerdashboardbyclutchGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbyclutch",
			c.PlayerdashboardbyclutchGet,
		},
		"PlayerdashboardbygamesplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbygamesplits",
			c.PlayerdashboardbygamesplitsGet,
		},
		"PlayerdashboardbygeneralsplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbygeneralsplits",
			c.PlayerdashboardbygeneralsplitsGet,
		},
		"PlayerdashboardbylastngamesGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbylastngames",
			c.PlayerdashboardbylastngamesGet,
		},
		"PlayerdashboardbyopponentGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbyopponent",
			c.PlayerdashboardbyopponentGet,
		},
		"PlayerdashboardbyshootingsplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbyshootingsplits",
			c.PlayerdashboardbyshootingsplitsGet,
		},
		"PlayerdashboardbyteamperformanceGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbyteamperformance",
			c.PlayerdashboardbyteamperformanceGet,
		},
		"PlayerdashboardbyyearoveryearGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashboardbyyearoveryear",
			c.PlayerdashboardbyyearoveryearGet,
		},
		"PlayerdashptpassGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptpass",
			c.PlayerdashptpassGet,
		},
		"PlayerdashptrebGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptreb",
			c.PlayerdashptrebGet,
		},
		"PlayerdashptreboundlogsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptreboundlogs",
			c.PlayerdashptreboundlogsGet,
		},
		"PlayerdashptshotdefendGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptshotdefend",
			c.PlayerdashptshotdefendGet,
		},
		"PlayerdashptshotlogGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptshotlog",
			c.PlayerdashptshotlogGet,
		},
		"PlayerdashptshotsGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerdashptshots",
			c.PlayerdashptshotsGet,
		},
		"PlayergamelogGet": Route{
			strings.ToUpper("Get"),
			"/stats/playergamelog",
			c.PlayergamelogGet,
		},
		"PlayerprofileGet": Route{
			strings.ToUpper("Get"),
			"/stats/playerprofile",
			c.PlayerprofileGet,
		},
		"Playerprofilev2Get": Route{
			strings.ToUpper("Get"),
			"/stats/playerprofilev2",
			c.Playerprofilev2Get,
		},
		"PlayersvsplayersGet": Route{
			strings.ToUpper("Get"),
			"/stats/playersvsplayers",
			c.PlayersvsplayersGet,
		},
		"PlayervsplayerGet": Route{
			strings.ToUpper("Get"),
			"/stats/playervsplayer",
			c.PlayervsplayerGet,
		},
		"PlayoffpictureGet": Route{
			strings.ToUpper("Get"),
			"/stats/playoffpicture",
			c.PlayoffpictureGet,
		},
		"ScoreboardGet": Route{
			strings.ToUpper("Get"),
			"/stats/scoreboard",
			c.ScoreboardGet,
		},
		"ScoreboardV2Get": Route{
			strings.ToUpper("Get"),
			"/stats/scoreboardV2",
			c.ScoreboardV2Get,
		},
		"ShotchartdetailGet": Route{
			strings.ToUpper("Get"),
			"/stats/shotchartdetail",
			c.ShotchartdetailGet,
		},
		"ShotchartlineupdetailGet": Route{
			strings.ToUpper("Get"),
			"/stats/shotchartlineupdetail",
			c.ShotchartlineupdetailGet,
		},
		"TeamdashboardbyclutchGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbyclutch",
			c.TeamdashboardbyclutchGet,
		},
		"TeamdashboardbygamesplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbygamesplits",
			c.TeamdashboardbygamesplitsGet,
		},
		"TeamdashboardbygeneralsplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbygeneralsplits",
			c.TeamdashboardbygeneralsplitsGet,
		},
		"TeamdashboardbylastngamesGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbylastngames",
			c.TeamdashboardbylastngamesGet,
		},
		"TeamdashboardbyopponentGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbyopponent",
			c.TeamdashboardbyopponentGet,
		},
		"TeamdashboardbyshootingsplitsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbyshootingsplits",
			c.TeamdashboardbyshootingsplitsGet,
		},
		"TeamdashboardbyteamperformanceGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbyteamperformance",
			c.TeamdashboardbyteamperformanceGet,
		},
		"TeamdashboardbyyearoveryearGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashboardbyyearoveryear",
			c.TeamdashboardbyyearoveryearGet,
		},
		"TeamdashlineupsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashlineups",
			c.TeamdashlineupsGet,
		},
		"TeamdashptpassGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashptpass",
			c.TeamdashptpassGet,
		},
		"TeamdashptrebGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashptreb",
			c.TeamdashptrebGet,
		},
		"TeamdashptshotsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamdashptshots",
			c.TeamdashptshotsGet,
		},
		"TeamgamelogGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamgamelog",
			c.TeamgamelogGet,
		},
		"TeaminfocommonGet": Route{
			strings.ToUpper("Get"),
			"/stats/teaminfocommon",
			c.TeaminfocommonGet,
		},
		"TeamplayerdashboardGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamplayerdashboard",
			c.TeamplayerdashboardGet,
		},
		"TeamplayeronoffdetailsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamplayeronoffdetails",
			c.TeamplayeronoffdetailsGet,
		},
		"TeamplayeronoffsummaryGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamplayeronoffsummary",
			c.TeamplayeronoffsummaryGet,
		},
		"TeamvsplayerGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamvsplayer",
			c.TeamvsplayerGet,
		},
		"TeamyearbyyearstatsGet": Route{
			strings.ToUpper("Get"),
			"/stats/teamyearbyyearstats",
			c.TeamyearbyyearstatsGet,
		},
		"VideoStatusGet": Route{
			strings.ToUpper("Get"),
			"/stats/videoStatus",
			c.VideoStatusGet,
		},
	}
}

// AllstarballotpredictorGet - 
func (c *DefaultAPIController) AllstarballotpredictorGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var westPlayer1Param string
	if query.Has("WestPlayer1") {
		param := query.Get("WestPlayer1")

		westPlayer1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "WestPlayer1"}, nil)
		return
	}
	var westPlayer2Param string
	if query.Has("WestPlayer2") {
		param := query.Get("WestPlayer2")

		westPlayer2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "WestPlayer2"}, nil)
		return
	}
	var westPlayer3Param string
	if query.Has("WestPlayer3") {
		param := query.Get("WestPlayer3")

		westPlayer3Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "WestPlayer3"}, nil)
		return
	}
	var westPlayer4Param string
	if query.Has("WestPlayer4") {
		param := query.Get("WestPlayer4")

		westPlayer4Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "WestPlayer4"}, nil)
		return
	}
	var westPlayer5Param string
	if query.Has("WestPlayer5") {
		param := query.Get("WestPlayer5")

		westPlayer5Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "WestPlayer5"}, nil)
		return
	}
	var eastPlayer1Param string
	if query.Has("EastPlayer1") {
		param := query.Get("EastPlayer1")

		eastPlayer1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EastPlayer1"}, nil)
		return
	}
	var eastPlayer2Param string
	if query.Has("EastPlayer2") {
		param := query.Get("EastPlayer2")

		eastPlayer2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EastPlayer2"}, nil)
		return
	}
	var eastPlayer3Param string
	if query.Has("EastPlayer3") {
		param := query.Get("EastPlayer3")

		eastPlayer3Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EastPlayer3"}, nil)
		return
	}
	var eastPlayer4Param string
	if query.Has("EastPlayer4") {
		param := query.Get("EastPlayer4")

		eastPlayer4Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EastPlayer4"}, nil)
		return
	}
	var eastPlayer5Param string
	if query.Has("EastPlayer5") {
		param := query.Get("EastPlayer5")

		eastPlayer5Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EastPlayer5"}, nil)
		return
	}
	var pointCapParam string
	if query.Has("PointCap") {
		param := query.Get("PointCap")

		pointCapParam = param
	} else {
	}
	result, err := c.service.AllstarballotpredictorGet(r.Context(), westPlayer1Param, westPlayer2Param, westPlayer3Param, westPlayer4Param, westPlayer5Param, eastPlayer1Param, eastPlayer2Param, eastPlayer3Param, eastPlayer4Param, eastPlayer5Param, pointCapParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscoreGet - 
// Deprecated
func (c *DefaultAPIController) BoxscoreGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscoreGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscoreadvancedGet - 
// Deprecated
func (c *DefaultAPIController) BoxscoreadvancedGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscoreadvancedGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoreadvancedv2Get - 
func (c *DefaultAPIController) Boxscoreadvancedv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscoreadvancedv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscorefourfactorsGet - 
// Deprecated
func (c *DefaultAPIController) BoxscorefourfactorsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscorefourfactorsGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscorefourfactorsv2Get - 
func (c *DefaultAPIController) Boxscorefourfactorsv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscorefourfactorsv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscoremiscGet - 
// Deprecated
func (c *DefaultAPIController) BoxscoremiscGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscoremiscGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoremiscv2Get - 
func (c *DefaultAPIController) Boxscoremiscv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscoremiscv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoreplayertrackv2Get - 
func (c *DefaultAPIController) Boxscoreplayertrackv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	result, err := c.service.Boxscoreplayertrackv2Get(r.Context(), gameIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscorescoringGet - 
// Deprecated
func (c *DefaultAPIController) BoxscorescoringGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscorescoringGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscorescoringv2Get - 
func (c *DefaultAPIController) Boxscorescoringv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscorescoringv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoresummaryv2Get - 
func (c *DefaultAPIController) Boxscoresummaryv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	result, err := c.service.Boxscoresummaryv2Get(r.Context(), gameIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoretraditionalv2Get - 
func (c *DefaultAPIController) Boxscoretraditionalv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscoretraditionalv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BoxscoreusageGet - 
// Deprecated
func (c *DefaultAPIController) BoxscoreusageGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
	}
	result, err := c.service.BoxscoreusageGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Boxscoreusagev2Get - 
func (c *DefaultAPIController) Boxscoreusagev2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	var startRangeParam string
	if query.Has("StartRange") {
		param := query.Get("StartRange")

		startRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartRange"}, nil)
		return
	}
	var endRangeParam string
	if query.Has("EndRange") {
		param := query.Get("EndRange")

		endRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndRange"}, nil)
		return
	}
	var rangeTypeParam string
	if query.Has("RangeType") {
		param := query.Get("RangeType")

		rangeTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RangeType"}, nil)
		return
	}
	result, err := c.service.Boxscoreusagev2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam, startRangeParam, endRangeParam, rangeTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CommonTeamYearsGet - 
func (c *DefaultAPIController) CommonTeamYearsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	result, err := c.service.CommonTeamYearsGet(r.Context(), leagueIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CommonallplayersGet - 
func (c *DefaultAPIController) CommonallplayersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var isOnlyCurrentSeasonParam string
	if query.Has("IsOnlyCurrentSeason") {
		param := query.Get("IsOnlyCurrentSeason")

		isOnlyCurrentSeasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "IsOnlyCurrentSeason"}, nil)
		return
	}
	result, err := c.service.CommonallplayersGet(r.Context(), leagueIDParam, seasonParam, isOnlyCurrentSeasonParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CommonplayerinfoGet - 
func (c *DefaultAPIController) CommonplayerinfoGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	result, err := c.service.CommonplayerinfoGet(r.Context(), playerIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CommonplayoffseriesGet - 
func (c *DefaultAPIController) CommonplayoffseriesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	result, err := c.service.CommonplayoffseriesGet(r.Context(), leagueIDParam, seasonParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CommonteamrosterGet - 
func (c *DefaultAPIController) CommonteamrosterGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	result, err := c.service.CommonteamrosterGet(r.Context(), seasonParam, teamIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DraftcombinedrillresultsGet - 
func (c *DefaultAPIController) DraftcombinedrillresultsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonYearParam string
	if query.Has("SeasonYear") {
		param := query.Get("SeasonYear")

		seasonYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonYear"}, nil)
		return
	}
	result, err := c.service.DraftcombinedrillresultsGet(r.Context(), leagueIDParam, seasonYearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DraftcombinenonstationaryshootingGet - 
func (c *DefaultAPIController) DraftcombinenonstationaryshootingGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonYearParam string
	if query.Has("SeasonYear") {
		param := query.Get("SeasonYear")

		seasonYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonYear"}, nil)
		return
	}
	result, err := c.service.DraftcombinenonstationaryshootingGet(r.Context(), leagueIDParam, seasonYearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DraftcombineplayeranthroGet - 
func (c *DefaultAPIController) DraftcombineplayeranthroGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonYearParam string
	if query.Has("SeasonYear") {
		param := query.Get("SeasonYear")

		seasonYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonYear"}, nil)
		return
	}
	result, err := c.service.DraftcombineplayeranthroGet(r.Context(), leagueIDParam, seasonYearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DraftcombinespotshootingGet - 
func (c *DefaultAPIController) DraftcombinespotshootingGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonYearParam string
	if query.Has("SeasonYear") {
		param := query.Get("SeasonYear")

		seasonYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonYear"}, nil)
		return
	}
	result, err := c.service.DraftcombinespotshootingGet(r.Context(), leagueIDParam, seasonYearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DraftcombinestatsGet - 
func (c *DefaultAPIController) DraftcombinestatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonYearParam string
	if query.Has("SeasonYear") {
		param := query.Get("SeasonYear")

		seasonYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonYear"}, nil)
		return
	}
	result, err := c.service.DraftcombinestatsGet(r.Context(), leagueIDParam, seasonYearParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DrafthistoryGet - 
func (c *DefaultAPIController) DrafthistoryGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	result, err := c.service.DrafthistoryGet(r.Context(), leagueIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// FranchisehistoryGet - 
func (c *DefaultAPIController) FranchisehistoryGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	result, err := c.service.FranchisehistoryGet(r.Context(), leagueIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HomepageleadersGet - 
func (c *DefaultAPIController) HomepageleadersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var statCategoryParam string
	if query.Has("StatCategory") {
		param := query.Get("StatCategory")

		statCategoryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StatCategory"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerOrTeamParam string
	if query.Has("PlayerOrTeam") {
		param := query.Get("PlayerOrTeam")

		playerOrTeamParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerOrTeam"}, nil)
		return
	}
	var playerScopeParam string
	if query.Has("PlayerScope") {
		param := query.Get("PlayerScope")

		playerScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerScope"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var gameParam string
	if query.Has("Game") {
		param := query.Get("Game")

		gameParam = param
	} else {
	}
	var playerParam string
	if query.Has("Player") {
		param := query.Get("Player")

		playerParam = param
	} else {
	}
	result, err := c.service.HomepageleadersGet(r.Context(), statCategoryParam, leagueIDParam, seasonParam, seasonTypeParam, playerOrTeamParam, playerScopeParam, gameScopeParam, gameParam, playerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Homepagev2Get - 
func (c *DefaultAPIController) Homepagev2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var statTypeParam string
	if query.Has("StatType") {
		param := query.Get("StatType")

		statTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StatType"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerOrTeamParam string
	if query.Has("PlayerOrTeam") {
		param := query.Get("PlayerOrTeam")

		playerOrTeamParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerOrTeam"}, nil)
		return
	}
	var playerScopeParam string
	if query.Has("PlayerScope") {
		param := query.Get("PlayerScope")

		playerScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerScope"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var gameParam string
	if query.Has("Game") {
		param := query.Get("Game")

		gameParam = param
	} else {
	}
	var playerParam string
	if query.Has("Player") {
		param := query.Get("Player")

		playerParam = param
	} else {
	}
	result, err := c.service.Homepagev2Get(r.Context(), statTypeParam, leagueIDParam, seasonParam, seasonTypeParam, playerOrTeamParam, playerScopeParam, gameScopeParam, gameParam, playerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaderstilesGet - 
func (c *DefaultAPIController) LeaderstilesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var statParam string
	if query.Has("Stat") {
		param := query.Get("Stat")

		statParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Stat"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerOrTeamParam string
	if query.Has("PlayerOrTeam") {
		param := query.Get("PlayerOrTeam")

		playerOrTeamParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerOrTeam"}, nil)
		return
	}
	var playerScopeParam string
	if query.Has("PlayerScope") {
		param := query.Get("PlayerScope")

		playerScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerScope"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var gameParam string
	if query.Has("Game") {
		param := query.Get("Game")

		gameParam = param
	} else {
	}
	var playerParam string
	if query.Has("Player") {
		param := query.Get("Player")

		playerParam = param
	} else {
	}
	result, err := c.service.LeaderstilesGet(r.Context(), statParam, leagueIDParam, seasonParam, seasonTypeParam, playerOrTeamParam, playerScopeParam, gameScopeParam, gameParam, playerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashlineupsGet - 
func (c *DefaultAPIController) LeaguedashlineupsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupQuantityParam string
	if query.Has("GroupQuantity") {
		param := query.Get("GroupQuantity")

		groupQuantityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupQuantity"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.LeaguedashlineupsGet(r.Context(), groupQuantityParam, seasonTypeParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashplayerbiostatsGet - 
func (c *DefaultAPIController) LeaguedashplayerbiostatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.LeaguedashplayerbiostatsGet(r.Context(), perModeParam, leagueIDParam, seasonParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashplayerclutchGet - 
func (c *DefaultAPIController) LeaguedashplayerclutchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var clutchTimeParam string
	if query.Has("ClutchTime") {
		param := query.Get("ClutchTime")

		clutchTimeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ClutchTime"}, nil)
		return
	}
	var aheadBehindParam string
	if query.Has("AheadBehind") {
		param := query.Get("AheadBehind")

		aheadBehindParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AheadBehind"}, nil)
		return
	}
	var pointDiffParam string
	if query.Has("PointDiff") {
		param := query.Get("PointDiff")

		pointDiffParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PointDiff"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var playerExperienceParam string
	if query.Has("PlayerExperience") {
		param := query.Get("PlayerExperience")

		playerExperienceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerExperience"}, nil)
		return
	}
	var playerPositionParam string
	if query.Has("PlayerPosition") {
		param := query.Get("PlayerPosition")

		playerPositionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerPosition"}, nil)
		return
	}
	var starterBenchParam string
	if query.Has("StarterBench") {
		param := query.Get("StarterBench")

		starterBenchParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StarterBench"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.LeaguedashplayerclutchGet(r.Context(), clutchTimeParam, aheadBehindParam, pointDiffParam, gameScopeParam, playerExperienceParam, playerPositionParam, starterBenchParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashplayerptshotGet - 
func (c *DefaultAPIController) LeaguedashplayerptshotGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.LeaguedashplayerptshotGet(r.Context(), leagueIDParam, perModeParam, seasonParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashplayershotlocationsGet - 
func (c *DefaultAPIController) LeaguedashplayershotlocationsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	var distanceRangeParam string
	if query.Has("DistanceRange") {
		param := query.Get("DistanceRange")

		distanceRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DistanceRange"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var playerExperienceParam string
	if query.Has("PlayerExperience") {
		param := query.Get("PlayerExperience")

		playerExperienceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerExperience"}, nil)
		return
	}
	var playerPositionParam string
	if query.Has("PlayerPosition") {
		param := query.Get("PlayerPosition")

		playerPositionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerPosition"}, nil)
		return
	}
	var starterBenchParam string
	if query.Has("StarterBench") {
		param := query.Get("StarterBench")

		starterBenchParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StarterBench"}, nil)
		return
	}
	result, err := c.service.LeaguedashplayershotlocationsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam, distanceRangeParam, gameScopeParam, playerExperienceParam, playerPositionParam, starterBenchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashplayerstatsGet - 
func (c *DefaultAPIController) LeaguedashplayerstatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var playerExperienceParam string
	if query.Has("PlayerExperience") {
		param := query.Get("PlayerExperience")

		playerExperienceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerExperience"}, nil)
		return
	}
	var playerPositionParam string
	if query.Has("PlayerPosition") {
		param := query.Get("PlayerPosition")

		playerPositionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerPosition"}, nil)
		return
	}
	var starterBenchParam string
	if query.Has("StarterBench") {
		param := query.Get("StarterBench")

		starterBenchParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StarterBench"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.LeaguedashplayerstatsGet(r.Context(), gameScopeParam, playerExperienceParam, playerPositionParam, starterBenchParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashptdefendGet - 
func (c *DefaultAPIController) LeaguedashptdefendGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var defenseCategoryParam string
	if query.Has("DefenseCategory") {
		param := query.Get("DefenseCategory")

		defenseCategoryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DefenseCategory"}, nil)
		return
	}
	result, err := c.service.LeaguedashptdefendGet(r.Context(), leagueIDParam, perModeParam, seasonParam, seasonTypeParam, defenseCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashptteamdefendGet - 
func (c *DefaultAPIController) LeaguedashptteamdefendGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var defenseCategoryParam string
	if query.Has("DefenseCategory") {
		param := query.Get("DefenseCategory")

		defenseCategoryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DefenseCategory"}, nil)
		return
	}
	result, err := c.service.LeaguedashptteamdefendGet(r.Context(), leagueIDParam, perModeParam, seasonParam, seasonTypeParam, defenseCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashteamclutchGet - 
func (c *DefaultAPIController) LeaguedashteamclutchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var clutchTimeParam string
	if query.Has("ClutchTime") {
		param := query.Get("ClutchTime")

		clutchTimeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ClutchTime"}, nil)
		return
	}
	var aheadBehindParam string
	if query.Has("AheadBehind") {
		param := query.Get("AheadBehind")

		aheadBehindParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AheadBehind"}, nil)
		return
	}
	var pointDiffParam string
	if query.Has("PointDiff") {
		param := query.Get("PointDiff")

		pointDiffParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PointDiff"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var playerExperienceParam string
	if query.Has("PlayerExperience") {
		param := query.Get("PlayerExperience")

		playerExperienceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerExperience"}, nil)
		return
	}
	var playerPositionParam string
	if query.Has("PlayerPosition") {
		param := query.Get("PlayerPosition")

		playerPositionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerPosition"}, nil)
		return
	}
	var starterBenchParam string
	if query.Has("StarterBench") {
		param := query.Get("StarterBench")

		starterBenchParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StarterBench"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.LeaguedashteamclutchGet(r.Context(), clutchTimeParam, aheadBehindParam, pointDiffParam, gameScopeParam, playerExperienceParam, playerPositionParam, starterBenchParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashteamptshotGet - 
func (c *DefaultAPIController) LeaguedashteamptshotGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.LeaguedashteamptshotGet(r.Context(), leagueIDParam, perModeParam, seasonParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashteamshotlocationsGet - 
func (c *DefaultAPIController) LeaguedashteamshotlocationsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	var distanceRangeParam string
	if query.Has("DistanceRange") {
		param := query.Get("DistanceRange")

		distanceRangeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DistanceRange"}, nil)
		return
	}
	var gameScopeParam string
	if query.Has("GameScope") {
		param := query.Get("GameScope")

		gameScopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameScope"}, nil)
		return
	}
	var playerExperienceParam string
	if query.Has("PlayerExperience") {
		param := query.Get("PlayerExperience")

		playerExperienceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerExperience"}, nil)
		return
	}
	var playerPositionParam string
	if query.Has("PlayerPosition") {
		param := query.Get("PlayerPosition")

		playerPositionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerPosition"}, nil)
		return
	}
	var starterBenchParam string
	if query.Has("StarterBench") {
		param := query.Get("StarterBench")

		starterBenchParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StarterBench"}, nil)
		return
	}
	result, err := c.service.LeaguedashteamshotlocationsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam, distanceRangeParam, gameScopeParam, playerExperienceParam, playerPositionParam, starterBenchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeaguedashteamstatsGet - 
func (c *DefaultAPIController) LeaguedashteamstatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.LeaguedashteamstatsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LeagueleadersGet - 
func (c *DefaultAPIController) LeagueleadersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var scopeParam string
	if query.Has("Scope") {
		param := query.Get("Scope")

		scopeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Scope"}, nil)
		return
	}
	var statCategoryParam string
	if query.Has("StatCategory") {
		param := query.Get("StatCategory")

		statCategoryParam = param
	} else {
	}
	result, err := c.service.LeagueleadersGet(r.Context(), leagueIDParam, perModeParam, seasonParam, seasonTypeParam, scopeParam, statCategoryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlaybyplayGet - 
func (c *DefaultAPIController) PlaybyplayGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	result, err := c.service.PlaybyplayGet(r.Context(), gameIDParam, startPeriodParam, endPeriodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Playbyplayv2Get - 
func (c *DefaultAPIController) Playbyplayv2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var startPeriodParam string
	if query.Has("StartPeriod") {
		param := query.Get("StartPeriod")

		startPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "StartPeriod"}, nil)
		return
	}
	var endPeriodParam string
	if query.Has("EndPeriod") {
		param := query.Get("EndPeriod")

		endPeriodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EndPeriod"}, nil)
		return
	}
	result, err := c.service.Playbyplayv2Get(r.Context(), gameIDParam, startPeriodParam, endPeriodParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayercareerstatsGet - 
func (c *DefaultAPIController) PlayercareerstatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	result, err := c.service.PlayercareerstatsGet(r.Context(), perModeParam, playerIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayercompareGet - 
func (c *DefaultAPIController) PlayercompareGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var playerIDListParam string
	if query.Has("PlayerIDList") {
		param := query.Get("PlayerIDList")

		playerIDListParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerIDList"}, nil)
		return
	}
	var vsPlayerIDListParam string
	if query.Has("VsPlayerIDList") {
		param := query.Get("VsPlayerIDList")

		vsPlayerIDListParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerIDList"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayercompareGet(r.Context(), playerIDListParam, vsPlayerIDListParam, seasonTypeParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbyclutchGet - 
func (c *DefaultAPIController) PlayerdashboardbyclutchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbyclutchGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbygamesplitsGet - 
func (c *DefaultAPIController) PlayerdashboardbygamesplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbygamesplitsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbygeneralsplitsGet - 
func (c *DefaultAPIController) PlayerdashboardbygeneralsplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbygeneralsplitsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbylastngamesGet - 
func (c *DefaultAPIController) PlayerdashboardbylastngamesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbylastngamesGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbyopponentGet - 
func (c *DefaultAPIController) PlayerdashboardbyopponentGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbyopponentGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbyshootingsplitsGet - 
func (c *DefaultAPIController) PlayerdashboardbyshootingsplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbyshootingsplitsGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbyteamperformanceGet - 
func (c *DefaultAPIController) PlayerdashboardbyteamperformanceGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbyteamperformanceGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashboardbyyearoveryearGet - 
func (c *DefaultAPIController) PlayerdashboardbyyearoveryearGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashboardbyyearoveryearGet(r.Context(), measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, playerIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptpassGet - 
func (c *DefaultAPIController) PlayerdashptpassGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashptpassGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, playerIDParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptrebGet - 
func (c *DefaultAPIController) PlayerdashptrebGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashptrebGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, playerIDParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptreboundlogsGet - 
// Deprecated
func (c *DefaultAPIController) PlayerdashptreboundlogsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
	}
	result, err := c.service.PlayerdashptreboundlogsGet(r.Context(), seasonParam, seasonTypeParam, playerIDParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptshotdefendGet - 
func (c *DefaultAPIController) PlayerdashptshotdefendGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashptshotdefendGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, playerIDParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptshotlogGet - 
// Deprecated
func (c *DefaultAPIController) PlayerdashptshotlogGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
	}
	result, err := c.service.PlayerdashptshotlogGet(r.Context(), leagueIDParam, seasonParam, seasonTypeParam, playerIDParam, teamIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerdashptshotsGet - 
func (c *DefaultAPIController) PlayerdashptshotsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayerdashptshotsGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, playerIDParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayergamelogGet - 
func (c *DefaultAPIController) PlayergamelogGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.PlayergamelogGet(r.Context(), playerIDParam, seasonParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayerprofileGet - 
func (c *DefaultAPIController) PlayerprofileGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var graphStartSeasonParam string
	if query.Has("GraphStartSeason") {
		param := query.Get("GraphStartSeason")

		graphStartSeasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GraphStartSeason"}, nil)
		return
	}
	var graphEndSeasonParam string
	if query.Has("GraphEndSeason") {
		param := query.Get("GraphEndSeason")

		graphEndSeasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GraphEndSeason"}, nil)
		return
	}
	var graphStatParam string
	if query.Has("GraphStat") {
		param := query.Get("GraphStat")

		graphStatParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GraphStat"}, nil)
		return
	}
	result, err := c.service.PlayerprofileGet(r.Context(), leagueIDParam, playerIDParam, seasonParam, seasonTypeParam, graphStartSeasonParam, graphEndSeasonParam, graphStatParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Playerprofilev2Get - 
func (c *DefaultAPIController) Playerprofilev2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	result, err := c.service.Playerprofilev2Get(r.Context(), perModeParam, playerIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayersvsplayersGet - 
func (c *DefaultAPIController) PlayersvsplayersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var playerTeamIDParam string
	if query.Has("PlayerTeamID") {
		param := query.Get("PlayerTeamID")

		playerTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerTeamID"}, nil)
		return
	}
	var playerID1Param string
	if query.Has("PlayerID1") {
		param := query.Get("PlayerID1")

		playerID1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID1"}, nil)
		return
	}
	var playerID2Param string
	if query.Has("PlayerID2") {
		param := query.Get("PlayerID2")

		playerID2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID2"}, nil)
		return
	}
	var playerID3Param string
	if query.Has("PlayerID3") {
		param := query.Get("PlayerID3")

		playerID3Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID3"}, nil)
		return
	}
	var playerID4Param string
	if query.Has("PlayerID4") {
		param := query.Get("PlayerID4")

		playerID4Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID4"}, nil)
		return
	}
	var playerID5Param string
	if query.Has("PlayerID5") {
		param := query.Get("PlayerID5")

		playerID5Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID5"}, nil)
		return
	}
	var vsTeamIDParam string
	if query.Has("VsTeamID") {
		param := query.Get("VsTeamID")

		vsTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsTeamID"}, nil)
		return
	}
	var vsPlayerID1Param string
	if query.Has("VsPlayerID1") {
		param := query.Get("VsPlayerID1")

		vsPlayerID1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID1"}, nil)
		return
	}
	var vsPlayerID2Param string
	if query.Has("VsPlayerID2") {
		param := query.Get("VsPlayerID2")

		vsPlayerID2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID2"}, nil)
		return
	}
	var vsPlayerID3Param string
	if query.Has("VsPlayerID3") {
		param := query.Get("VsPlayerID3")

		vsPlayerID3Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID3"}, nil)
		return
	}
	var vsPlayerID4Param string
	if query.Has("VsPlayerID4") {
		param := query.Get("VsPlayerID4")

		vsPlayerID4Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID4"}, nil)
		return
	}
	var vsPlayerID5Param string
	if query.Has("VsPlayerID5") {
		param := query.Get("VsPlayerID5")

		vsPlayerID5Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID5"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayersvsplayersGet(r.Context(), playerTeamIDParam, playerID1Param, playerID2Param, playerID3Param, playerID4Param, playerID5Param, vsTeamIDParam, vsPlayerID1Param, vsPlayerID2Param, vsPlayerID3Param, vsPlayerID4Param, vsPlayerID5Param, seasonTypeParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayervsplayerGet - 
func (c *DefaultAPIController) PlayervsplayerGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var vsPlayerIDParam string
	if query.Has("VsPlayerID") {
		param := query.Get("VsPlayerID")

		vsPlayerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.PlayervsplayerGet(r.Context(), playerIDParam, vsPlayerIDParam, seasonTypeParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PlayoffpictureGet - 
func (c *DefaultAPIController) PlayoffpictureGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonIDParam string
	if query.Has("SeasonID") {
		param := query.Get("SeasonID")

		seasonIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonID"}, nil)
		return
	}
	result, err := c.service.PlayoffpictureGet(r.Context(), leagueIDParam, seasonIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ScoreboardGet - 
func (c *DefaultAPIController) ScoreboardGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameDateParam string
	if query.Has("GameDate") {
		param := query.Get("GameDate")

		gameDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameDate"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var dayOffsetParam string
	if query.Has("DayOffset") {
		param := query.Get("DayOffset")

		dayOffsetParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DayOffset"}, nil)
		return
	}
	result, err := c.service.ScoreboardGet(r.Context(), gameDateParam, leagueIDParam, dayOffsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ScoreboardV2Get - 
func (c *DefaultAPIController) ScoreboardV2Get(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var gameDateParam string
	if query.Has("GameDate") {
		param := query.Get("GameDate")

		gameDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameDate"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var dayOffsetParam string
	if query.Has("DayOffset") {
		param := query.Get("DayOffset")

		dayOffsetParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DayOffset"}, nil)
		return
	}
	result, err := c.service.ScoreboardV2Get(r.Context(), gameDateParam, leagueIDParam, dayOffsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShotchartdetailGet - 
func (c *DefaultAPIController) ShotchartdetailGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var playerIDParam string
	if query.Has("PlayerID") {
		param := query.Get("PlayerID")

		playerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlayerID"}, nil)
		return
	}
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var positionParam string
	if query.Has("Position") {
		param := query.Get("Position")

		positionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Position"}, nil)
		return
	}
	var rookieYearParam string
	if query.Has("RookieYear") {
		param := query.Get("RookieYear")

		rookieYearParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RookieYear"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	var contextMeasureParam string
	if query.Has("ContextMeasure") {
		param := query.Get("ContextMeasure")

		contextMeasureParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ContextMeasure"}, nil)
		return
	}
	result, err := c.service.ShotchartdetailGet(r.Context(), seasonTypeParam, teamIDParam, playerIDParam, gameIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, positionParam, rookieYearParam, gameSegmentParam, periodParam, lastNGamesParam, contextMeasureParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ShotchartlineupdetailGet - 
func (c *DefaultAPIController) ShotchartlineupdetailGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var gROUPIDParam string
	if query.Has("GROUP_ID") {
		param := query.Get("GROUP_ID")

		gROUPIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GROUP_ID"}, nil)
		return
	}
	var contextMeasureParam string
	if query.Has("ContextMeasure") {
		param := query.Get("ContextMeasure")

		contextMeasureParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ContextMeasure"}, nil)
		return
	}
	var contextFilterParam string
	if query.Has("ContextFilter") {
		param := query.Get("ContextFilter")

		contextFilterParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ContextFilter"}, nil)
		return
	}
	result, err := c.service.ShotchartlineupdetailGet(r.Context(), leagueIDParam, seasonParam, seasonTypeParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam, gameIDParam, gROUPIDParam, contextMeasureParam, contextFilterParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbyclutchGet - 
func (c *DefaultAPIController) TeamdashboardbyclutchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbyclutchGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbygamesplitsGet - 
func (c *DefaultAPIController) TeamdashboardbygamesplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbygamesplitsGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbygeneralsplitsGet - 
func (c *DefaultAPIController) TeamdashboardbygeneralsplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbygeneralsplitsGet(r.Context(), seasonTypeParam, teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbylastngamesGet - 
func (c *DefaultAPIController) TeamdashboardbylastngamesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbylastngamesGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbyopponentGet - 
func (c *DefaultAPIController) TeamdashboardbyopponentGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbyopponentGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbyshootingsplitsGet - 
func (c *DefaultAPIController) TeamdashboardbyshootingsplitsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbyshootingsplitsGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbyteamperformanceGet - 
func (c *DefaultAPIController) TeamdashboardbyteamperformanceGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbyteamperformanceGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashboardbyyearoveryearGet - 
func (c *DefaultAPIController) TeamdashboardbyyearoveryearGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashboardbyyearoveryearGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashlineupsGet - 
func (c *DefaultAPIController) TeamdashlineupsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupQuantityParam string
	if query.Has("GroupQuantity") {
		param := query.Get("GroupQuantity")

		groupQuantityParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupQuantity"}, nil)
		return
	}
	var gameIDParam string
	if query.Has("GameID") {
		param := query.Get("GameID")

		gameIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameID"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashlineupsGet(r.Context(), groupQuantityParam, gameIDParam, seasonTypeParam, teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashptpassGet - 
func (c *DefaultAPIController) TeamdashptpassGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashptpassGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashptrebGet - 
func (c *DefaultAPIController) TeamdashptrebGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashptrebGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamdashptshotsGet - 
func (c *DefaultAPIController) TeamdashptshotsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamdashptshotsGet(r.Context(), perModeParam, seasonParam, seasonTypeParam, teamIDParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamgamelogGet - 
func (c *DefaultAPIController) TeamgamelogGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.TeamgamelogGet(r.Context(), teamIDParam, seasonParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeaminfocommonGet - 
func (c *DefaultAPIController) TeaminfocommonGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	result, err := c.service.TeaminfocommonGet(r.Context(), seasonParam, teamIDParam, leagueIDParam, seasonTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamplayerdashboardGet - 
func (c *DefaultAPIController) TeamplayerdashboardGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamplayerdashboardGet(r.Context(), seasonTypeParam, teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamplayeronoffdetailsGet - 
func (c *DefaultAPIController) TeamplayeronoffdetailsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamplayeronoffdetailsGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamplayeronoffsummaryGet - 
func (c *DefaultAPIController) TeamplayeronoffsummaryGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamplayeronoffsummaryGet(r.Context(), teamIDParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, seasonTypeParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamvsplayerGet - 
func (c *DefaultAPIController) TeamvsplayerGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	var vsPlayerIDParam string
	if query.Has("VsPlayerID") {
		param := query.Get("VsPlayerID")

		vsPlayerIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsPlayerID"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var measureTypeParam string
	if query.Has("MeasureType") {
		param := query.Get("MeasureType")

		measureTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "MeasureType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var plusMinusParam string
	if query.Has("PlusMinus") {
		param := query.Get("PlusMinus")

		plusMinusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PlusMinus"}, nil)
		return
	}
	var paceAdjustParam string
	if query.Has("PaceAdjust") {
		param := query.Get("PaceAdjust")

		paceAdjustParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PaceAdjust"}, nil)
		return
	}
	var rankParam string
	if query.Has("Rank") {
		param := query.Get("Rank")

		rankParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Rank"}, nil)
		return
	}
	var seasonParam string
	if query.Has("Season") {
		param := query.Get("Season")

		seasonParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Season"}, nil)
		return
	}
	var outcomeParam string
	if query.Has("Outcome") {
		param := query.Get("Outcome")

		outcomeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Outcome"}, nil)
		return
	}
	var locationParam string
	if query.Has("Location") {
		param := query.Get("Location")

		locationParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Location"}, nil)
		return
	}
	var monthParam string
	if query.Has("Month") {
		param := query.Get("Month")

		monthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Month"}, nil)
		return
	}
	var seasonSegmentParam string
	if query.Has("SeasonSegment") {
		param := query.Get("SeasonSegment")

		seasonSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonSegment"}, nil)
		return
	}
	var dateFromParam string
	if query.Has("DateFrom") {
		param := query.Get("DateFrom")

		dateFromParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateFrom"}, nil)
		return
	}
	var dateToParam string
	if query.Has("DateTo") {
		param := query.Get("DateTo")

		dateToParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DateTo"}, nil)
		return
	}
	var opponentTeamIDParam string
	if query.Has("OpponentTeamID") {
		param := query.Get("OpponentTeamID")

		opponentTeamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpponentTeamID"}, nil)
		return
	}
	var vsConferenceParam string
	if query.Has("VsConference") {
		param := query.Get("VsConference")

		vsConferenceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsConference"}, nil)
		return
	}
	var vsDivisionParam string
	if query.Has("VsDivision") {
		param := query.Get("VsDivision")

		vsDivisionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VsDivision"}, nil)
		return
	}
	var gameSegmentParam string
	if query.Has("GameSegment") {
		param := query.Get("GameSegment")

		gameSegmentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameSegment"}, nil)
		return
	}
	var periodParam string
	if query.Has("Period") {
		param := query.Get("Period")

		periodParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Period"}, nil)
		return
	}
	var lastNGamesParam string
	if query.Has("LastNGames") {
		param := query.Get("LastNGames")

		lastNGamesParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LastNGames"}, nil)
		return
	}
	result, err := c.service.TeamvsplayerGet(r.Context(), teamIDParam, vsPlayerIDParam, seasonTypeParam, measureTypeParam, perModeParam, plusMinusParam, paceAdjustParam, rankParam, seasonParam, outcomeParam, locationParam, monthParam, seasonSegmentParam, dateFromParam, dateToParam, opponentTeamIDParam, vsConferenceParam, vsDivisionParam, gameSegmentParam, periodParam, lastNGamesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TeamyearbyyearstatsGet - 
func (c *DefaultAPIController) TeamyearbyyearstatsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var seasonTypeParam string
	if query.Has("SeasonType") {
		param := query.Get("SeasonType")

		seasonTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SeasonType"}, nil)
		return
	}
	var perModeParam string
	if query.Has("PerMode") {
		param := query.Get("PerMode")

		perModeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PerMode"}, nil)
		return
	}
	var teamIDParam string
	if query.Has("TeamID") {
		param := query.Get("TeamID")

		teamIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "TeamID"}, nil)
		return
	}
	result, err := c.service.TeamyearbyyearstatsGet(r.Context(), leagueIDParam, seasonTypeParam, perModeParam, teamIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// VideoStatusGet - 
func (c *DefaultAPIController) VideoStatusGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var leagueIDParam string
	if query.Has("LeagueID") {
		param := query.Get("LeagueID")

		leagueIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "LeagueID"}, nil)
		return
	}
	var gameDateParam string
	if query.Has("GameDate") {
		param := query.Get("GameDate")

		gameDateParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GameDate"}, nil)
		return
	}
	result, err := c.service.VideoStatusGet(r.Context(), leagueIDParam, gameDateParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
