/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OauthAPIController binds http requests to an api service and writes the service results to the http response
type OauthAPIController struct {
	service OauthAPIServicer
	errorHandler ErrorHandler
}

// OauthAPIOption for how the controller is set up.
type OauthAPIOption func(*OauthAPIController)

// WithOauthAPIErrorHandler inject ErrorHandler into controller
func WithOauthAPIErrorHandler(h ErrorHandler) OauthAPIOption {
	return func(c *OauthAPIController) {
		c.errorHandler = h
	}
}

// NewOauthAPIController creates a default api controller
func NewOauthAPIController(s OauthAPIServicer, opts ...OauthAPIOption) Router {
	controller := &OauthAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OauthAPIController
func (c *OauthAPIController) Routes() Routes {
	return Routes{
		"OauthAuthorizeGet": Route{
			strings.ToUpper("Get"),
			"/oauth/authorize",
			c.OauthAuthorizeGet,
		},
		"OauthRevokePost": Route{
			strings.ToUpper("Post"),
			"/oauth/revoke",
			c.OauthRevokePost,
		},
		"OauthTokenPost": Route{
			strings.ToUpper("Post"),
			"/oauth/token",
			c.OauthTokenPost,
		},
	}
}

// OauthAuthorizeGet - 
func (c *OauthAPIController) OauthAuthorizeGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var responseTypeParam string
	if query.Has("response_type") {
		param := query.Get("response_type")

		responseTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "response_type"}, nil)
		return
	}
	var clientIdParam string
	if query.Has("client_id") {
		param := query.Get("client_id")

		clientIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "client_id"}, nil)
		return
	}
	var redirectUriParam string
	if query.Has("redirect_uri") {
		param := query.Get("redirect_uri")

		redirectUriParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "redirect_uri"}, nil)
		return
	}
	var scopeParam string
	if query.Has("scope") {
		param := query.Get("scope")

		scopeParam = param
	} else {
	}
	var forceLoginParam bool
	if query.Has("force_login") {
		param, err := parseBoolParameter(
			query.Get("force_login"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		forceLoginParam = param
	} else {
	}
	result, err := c.service.OauthAuthorizeGet(r.Context(), responseTypeParam, clientIdParam, redirectUriParam, scopeParam, forceLoginParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OauthRevokePost - 
func (c *OauthAPIController) OauthRevokePost(w http.ResponseWriter, r *http.Request) {
	oauthRevokePostRequestParam := OauthRevokePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oauthRevokePostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOauthRevokePostRequestRequired(oauthRevokePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOauthRevokePostRequestConstraints(oauthRevokePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OauthRevokePost(r.Context(), oauthRevokePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OauthTokenPost - 
func (c *OauthAPIController) OauthTokenPost(w http.ResponseWriter, r *http.Request) {
	oauthTokenPostRequestParam := OauthTokenPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oauthTokenPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOauthTokenPostRequestRequired(oauthTokenPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertOauthTokenPostRequestConstraints(oauthTokenPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OauthTokenPost(r.Context(), oauthTokenPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
