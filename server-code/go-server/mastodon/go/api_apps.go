/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppsAPIController binds http requests to an api service and writes the service results to the http response
type AppsAPIController struct {
	service AppsAPIServicer
	errorHandler ErrorHandler
}

// AppsAPIOption for how the controller is set up.
type AppsAPIOption func(*AppsAPIController)

// WithAppsAPIErrorHandler inject ErrorHandler into controller
func WithAppsAPIErrorHandler(h ErrorHandler) AppsAPIOption {
	return func(c *AppsAPIController) {
		c.errorHandler = h
	}
}

// NewAppsAPIController creates a default api controller
func NewAppsAPIController(s AppsAPIServicer, opts ...AppsAPIOption) Router {
	controller := &AppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppsAPIController
func (c *AppsAPIController) Routes() Routes {
	return Routes{
		"ApiV1AppsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/apps",
			c.ApiV1AppsPost,
		},
		"ApiV1AppsVerifyCredentialsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/apps/verify_credentials",
			c.ApiV1AppsVerifyCredentialsGet,
		},
	}
}

// ApiV1AppsPost - 
func (c *AppsAPIController) ApiV1AppsPost(w http.ResponseWriter, r *http.Request) {
	apiV1AppsPostRequestParam := ApiV1AppsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AppsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AppsPostRequestRequired(apiV1AppsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AppsPostRequestConstraints(apiV1AppsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AppsPost(r.Context(), apiV1AppsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AppsVerifyCredentialsGet - 
func (c *AppsAPIController) ApiV1AppsVerifyCredentialsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1AppsVerifyCredentialsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
