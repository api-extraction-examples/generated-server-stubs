/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// Account - Represents a user of Mastodon and their associated profile.
type Account struct {

	// The Webfinger account URI. Equal to `username` for local users, or `username@domain` for
	Acct string `json:"acct,omitempty"`

	// An image icon that is shown next to statuses and in the profile. The format is URL.
	Avatar string `json:"avatar,omitempty"`

	// A static version of the avatar. Equal to `avatar` if its value is a static image; different if `avatar` is an animated GIF. The format is URL.
	AvatarStatic string `json:"avatar_static,omitempty"`

	// A presentational flag. Indicates that the account may perform automated actions, may not be monitored, or identifies as a robot.
	Bot bool `json:"bot,omitempty"`

	// When the account was created.
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Whether the account has opted into discovery features such as the profile directory.
	Discoverable bool `json:"discoverable,omitempty"`

	// The profile's display name.
	DisplayName string `json:"display_name,omitempty"`

	// Custom emoji entities to be used when rendering the profile. If none, an empty array will be returned.
	Emojis []Emoji `json:"emojis,omitempty"`

	// Additional metadata attached to a profile as name-value pairs.
	Fields []Field `json:"fields,omitempty"`

	// The reported followers of this profile.
	FollowersCount int32 `json:"followers_count,omitempty"`

	// The reported follows of this profile.
	FollowingCount int32 `json:"following_count,omitempty"`

	// An image banner that is shown above the profile and in profile cards. The format is URL.
	Header string `json:"header,omitempty"`

	// A static version of the header. Equal to `header` if its value is a static image; different if `header` is an animated GIF. The format is URL.
	HeaderStatic string `json:"header_static,omitempty"`

	// The account id `header`.
	Id string `json:"id,omitempty"`

	// When the most recent status was posted.
	LastStatusAt time.Time `json:"last_status_at,omitempty"`

	// Whether the account manually approves follow requests.
	Locked bool `json:"locked,omitempty"`

	Moved Account `json:"moved,omitempty"`

	// When a timed mute will expire, if applicable. ISO 8601 Datetime.
	MuteExpiresAt time.Time `json:"mute_expires_at,omitempty"`

	// The profile's bio / description.
	Note string `json:"note,omitempty"`

	Source Source `json:"source,omitempty"`

	// How many statuses are attached to this account.
	StatusesCount int32 `json:"statuses_count,omitempty"`

	// An extra entity returned when an account is suspended.
	Suspended bool `json:"suspended,omitempty"`

	// The location of the user's profile page. (HTTPS URL)
	Url string `json:"url,omitempty"`

	// The username of the account, not including domain.
	Username string `json:"username,omitempty"`
}

// AssertAccountRequired checks if the required fields are not zero-ed
func AssertAccountRequired(obj Account) error {
	for _, el := range obj.Emojis {
		if err := AssertEmojiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Fields {
		if err := AssertFieldRequired(el); err != nil {
			return err
		}
	}
	if err := AssertAccountRequired(obj.Moved); err != nil {
		return err
	}
	if err := AssertSourceRequired(obj.Source); err != nil {
		return err
	}
	return nil
}

// AssertAccountConstraints checks if the values respects the defined constraints
func AssertAccountConstraints(obj Account) error {
	return nil
}
