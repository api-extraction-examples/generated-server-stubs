/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"ApiOembedGet": Route{
			strings.ToUpper("Get"),
			"/api/oembed",
			c.ApiOembedGet,
		},
		"ApiProofsGet": Route{
			strings.ToUpper("Get"),
			"/api/proofs",
			c.ApiProofsGet,
		},
		"ApiV1AdminAccountsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/admin/accounts",
			c.ApiV1AdminAccountsGet,
		},
		"ApiV1AdminAccountsIdActionPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/action",
			c.ApiV1AdminAccountsIdActionPost,
		},
		"ApiV1AdminAccountsIdApprovePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/approve",
			c.ApiV1AdminAccountsIdApprovePost,
		},
		"ApiV1AdminAccountsIdEnablePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/enable",
			c.ApiV1AdminAccountsIdEnablePost,
		},
		"ApiV1AdminAccountsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/admin/accounts/{id}",
			c.ApiV1AdminAccountsIdGet,
		},
		"ApiV1AdminAccountsIdRejectPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/reject",
			c.ApiV1AdminAccountsIdRejectPost,
		},
		"ApiV1AdminAccountsIdUnsilencePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/unsilence",
			c.ApiV1AdminAccountsIdUnsilencePost,
		},
		"ApiV1AdminAccountsIdUnsuspendPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/accounts/{id}/unsuspend",
			c.ApiV1AdminAccountsIdUnsuspendPost,
		},
		"ApiV1AdminReportsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/admin/reports",
			c.ApiV1AdminReportsGet,
		},
		"ApiV1AdminReportsIdAssignToSelfPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/reports/{id}/assign_to_self",
			c.ApiV1AdminReportsIdAssignToSelfPost,
		},
		"ApiV1AdminReportsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/admin/reports/{id}",
			c.ApiV1AdminReportsIdGet,
		},
		"ApiV1AdminReportsIdReopenPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/reports/{id}/reopen",
			c.ApiV1AdminReportsIdReopenPost,
		},
		"ApiV1AdminReportsIdResolvePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/reports/{id}/resolve",
			c.ApiV1AdminReportsIdResolvePost,
		},
		"ApiV1AdminReportsIdUnassignPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/admin/reports/{id}/unassign",
			c.ApiV1AdminReportsIdUnassignPost,
		},
		"ApiV1AnnouncementsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/announcements",
			c.ApiV1AnnouncementsGet,
		},
		"ApiV1AnnouncementsIdDismissPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/announcements/{id}/dismiss",
			c.ApiV1AnnouncementsIdDismissPost,
		},
		"ApiV1AnnouncementsIdReactionsNameDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/announcements/{id}/reactions/{name}",
			c.ApiV1AnnouncementsIdReactionsNameDelete,
		},
		"ApiV1AnnouncementsIdReactionsNamePut": Route{
			strings.ToUpper("Put"),
			"/api/v1/announcements/{id}/reactions/{name}",
			c.ApiV1AnnouncementsIdReactionsNamePut,
		},
		"ApiV1BlocksGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/blocks",
			c.ApiV1BlocksGet,
		},
		"ApiV1BookmarksGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/bookmarks",
			c.ApiV1BookmarksGet,
		},
		"ApiV1ConversationsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/conversations",
			c.ApiV1ConversationsGet,
		},
		"ApiV1ConversationsIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/conversations/{id}",
			c.ApiV1ConversationsIdDelete,
		},
		"ApiV1ConversationsIdReadPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/conversations/{id}/read",
			c.ApiV1ConversationsIdReadPost,
		},
		"ApiV1CustomEmojisGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/custom_emojis",
			c.ApiV1CustomEmojisGet,
		},
		"ApiV1DirectoryGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/directory",
			c.ApiV1DirectoryGet,
		},
		"ApiV1DomainBlocksDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/domain_blocks",
			c.ApiV1DomainBlocksDelete,
		},
		"ApiV1DomainBlocksGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/domain_blocks",
			c.ApiV1DomainBlocksGet,
		},
		"ApiV1DomainBlocksPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/domain_blocks",
			c.ApiV1DomainBlocksPost,
		},
		"ApiV1EndorsementsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/endorsements",
			c.ApiV1EndorsementsGet,
		},
		"ApiV1FavouritesGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/favourites",
			c.ApiV1FavouritesGet,
		},
		"ApiV1FeaturedTagsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/featured_tags",
			c.ApiV1FeaturedTagsGet,
		},
		"ApiV1FeaturedTagsIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/featured_tags/{id}",
			c.ApiV1FeaturedTagsIdDelete,
		},
		"ApiV1FeaturedTagsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/featured_tags",
			c.ApiV1FeaturedTagsPost,
		},
		"ApiV1FeaturedTagsSuggestionsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/featured_tags/suggestions",
			c.ApiV1FeaturedTagsSuggestionsGet,
		},
		"ApiV1FiltersGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/filters",
			c.ApiV1FiltersGet,
		},
		"ApiV1FiltersIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/filters/{id}",
			c.ApiV1FiltersIdDelete,
		},
		"ApiV1FiltersIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/filters/{id}",
			c.ApiV1FiltersIdGet,
		},
		"ApiV1FiltersIdPut": Route{
			strings.ToUpper("Put"),
			"/api/v1/filters/{id}",
			c.ApiV1FiltersIdPut,
		},
		"ApiV1FiltersPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/filters",
			c.ApiV1FiltersPost,
		},
		"ApiV1FollowRequestsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/follow_requests",
			c.ApiV1FollowRequestsGet,
		},
		"ApiV1FollowRequestsIdAuthorizePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/follow_requests/{id}/authorize",
			c.ApiV1FollowRequestsIdAuthorizePost,
		},
		"ApiV1FollowRequestsIdRejectPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/follow_requests/{id}/reject",
			c.ApiV1FollowRequestsIdRejectPost,
		},
		"ApiV1InstanceActivityGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance/activity",
			c.ApiV1InstanceActivityGet,
		},
		"ApiV1InstanceGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance",
			c.ApiV1InstanceGet,
		},
		"ApiV1InstancePeersGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/instance/peers",
			c.ApiV1InstancePeersGet,
		},
		"ApiV1ListsDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/lists",
			c.ApiV1ListsDelete,
		},
		"ApiV1ListsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/lists",
			c.ApiV1ListsGet,
		},
		"ApiV1ListsIdAccountsDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/lists/{id}/accounts",
			c.ApiV1ListsIdAccountsDelete,
		},
		"ApiV1ListsIdAccountsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/lists/{id}/accounts",
			c.ApiV1ListsIdAccountsGet,
		},
		"ApiV1ListsIdAccountsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/lists/{id}/accounts",
			c.ApiV1ListsIdAccountsPost,
		},
		"ApiV1ListsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/lists/{id}",
			c.ApiV1ListsIdGet,
		},
		"ApiV1ListsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/lists",
			c.ApiV1ListsPost,
		},
		"ApiV1ListsPut": Route{
			strings.ToUpper("Put"),
			"/api/v1/lists",
			c.ApiV1ListsPut,
		},
		"ApiV1MarkersGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/markers",
			c.ApiV1MarkersGet,
		},
		"ApiV1MarkersPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/markers",
			c.ApiV1MarkersPost,
		},
		"ApiV1MediaIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/media/{id}",
			c.ApiV1MediaIdGet,
		},
		"ApiV1MediaIdPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/media/{id}",
			c.ApiV1MediaIdPost,
		},
		"ApiV1MediaPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/media",
			c.ApiV1MediaPost,
		},
		"ApiV1MutesGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/mutes",
			c.ApiV1MutesGet,
		},
		"ApiV1NotificationsClearPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/notifications/clear",
			c.ApiV1NotificationsClearPost,
		},
		"ApiV1NotificationsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/notifications",
			c.ApiV1NotificationsGet,
		},
		"ApiV1NotificationsIdDismissPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/notifications/{id}/dismiss",
			c.ApiV1NotificationsIdDismissPost,
		},
		"ApiV1NotificationsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/notifications/{id}",
			c.ApiV1NotificationsIdGet,
		},
		"ApiV1PollsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/polls/{id}",
			c.ApiV1PollsIdGet,
		},
		"ApiV1PollsIdPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/polls/{id}",
			c.ApiV1PollsIdPost,
		},
		"ApiV1PreferencesGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/preferences",
			c.ApiV1PreferencesGet,
		},
		"ApiV1PushSubscriptionDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/push/subscription",
			c.ApiV1PushSubscriptionDelete,
		},
		"ApiV1PushSubscriptionGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/push/subscription",
			c.ApiV1PushSubscriptionGet,
		},
		"ApiV1PushSubscriptionPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/push/subscription",
			c.ApiV1PushSubscriptionPost,
		},
		"ApiV1PushSubscriptionPut": Route{
			strings.ToUpper("Put"),
			"/api/v1/push/subscription",
			c.ApiV1PushSubscriptionPut,
		},
		"ApiV1ReportsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/reports",
			c.ApiV1ReportsPost,
		},
		"ApiV1ScheduledStatusesGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/scheduled_statuses",
			c.ApiV1ScheduledStatusesGet,
		},
		"ApiV1ScheduledStatusesIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/scheduled_statuses/{id}",
			c.ApiV1ScheduledStatusesIdDelete,
		},
		"ApiV1ScheduledStatusesIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/scheduled_statuses/{id}",
			c.ApiV1ScheduledStatusesIdGet,
		},
		"ApiV1ScheduledStatusesIdPut": Route{
			strings.ToUpper("Put"),
			"/api/v1/scheduled_statuses/{id}",
			c.ApiV1ScheduledStatusesIdPut,
		},
		"ApiV1StatusesIdBookmarkPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/bookmark",
			c.ApiV1StatusesIdBookmarkPost,
		},
		"ApiV1StatusesIdContextGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/statuses/{id}/context",
			c.ApiV1StatusesIdContextGet,
		},
		"ApiV1StatusesIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/statuses/{id}",
			c.ApiV1StatusesIdDelete,
		},
		"ApiV1StatusesIdFavouritePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/favourite",
			c.ApiV1StatusesIdFavouritePost,
		},
		"ApiV1StatusesIdFavouritedByGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/statuses/{id}/favourited_by",
			c.ApiV1StatusesIdFavouritedByGet,
		},
		"ApiV1StatusesIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/statuses/{id}",
			c.ApiV1StatusesIdGet,
		},
		"ApiV1StatusesIdMutePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/mute",
			c.ApiV1StatusesIdMutePost,
		},
		"ApiV1StatusesIdPinPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/pin",
			c.ApiV1StatusesIdPinPost,
		},
		"ApiV1StatusesIdReblogPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/reblog",
			c.ApiV1StatusesIdReblogPost,
		},
		"ApiV1StatusesIdRebloggedByGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/statuses/{id}/reblogged_by",
			c.ApiV1StatusesIdRebloggedByGet,
		},
		"ApiV1StatusesIdUnbookmarkPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/unbookmark",
			c.ApiV1StatusesIdUnbookmarkPost,
		},
		"ApiV1StatusesIdUnfavouritePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/unfavourite",
			c.ApiV1StatusesIdUnfavouritePost,
		},
		"ApiV1StatusesIdUnmutePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/unmute",
			c.ApiV1StatusesIdUnmutePost,
		},
		"ApiV1StatusesIdUnpinPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/unpin",
			c.ApiV1StatusesIdUnpinPost,
		},
		"ApiV1StatusesIdUnreblogPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses/{id}/unreblog",
			c.ApiV1StatusesIdUnreblogPost,
		},
		"ApiV1StatusesPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/statuses",
			c.ApiV1StatusesPost,
		},
		"ApiV1SuggestionsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/suggestions",
			c.ApiV1SuggestionsGet,
		},
		"ApiV1SuggestionsIdDelete": Route{
			strings.ToUpper("Delete"),
			"/api/v1/suggestions/{id}",
			c.ApiV1SuggestionsIdDelete,
		},
		"ApiV1TimelinesHomeGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/timelines/home",
			c.ApiV1TimelinesHomeGet,
		},
		"ApiV1TimelinesListListIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/timelines/list/{list_id}",
			c.ApiV1TimelinesListListIdGet,
		},
		"ApiV1TimelinesPublicGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/timelines/public",
			c.ApiV1TimelinesPublicGet,
		},
		"ApiV1TimelinesTagHashtagGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/timelines/tag/{hashtag}",
			c.ApiV1TimelinesTagHashtagGet,
		},
		"ApiV1TrendsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/trends",
			c.ApiV1TrendsGet,
		},
		"ApiV2SearchGet": Route{
			strings.ToUpper("Get"),
			"/api/v2/search",
			c.ApiV2SearchGet,
		},
	}
}

// ApiOembedGet - 
func (c *DefaultAPIController) ApiOembedGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var urlParam string
	if query.Has("url") {
		param := query.Get("url")

		urlParam = param
	} else {
	}
	var maxwidthParam int32
	if query.Has("maxwidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxwidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxwidthParam = param
	} else {
		var param int32 = 400
		maxwidthParam = param
	}
	var maxheightParam int32
	if query.Has("maxheight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxheight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxheightParam = param
	} else {
	}
	result, err := c.service.ApiOembedGet(r.Context(), urlParam, maxwidthParam, maxheightParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiProofsGet - 
func (c *DefaultAPIController) ApiProofsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var providerParam string
	if query.Has("provider") {
		param := query.Get("provider")

		providerParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	result, err := c.service.ApiProofsGet(r.Context(), providerParam, usernameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsGet - 
func (c *DefaultAPIController) ApiV1AdminAccountsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localParam bool
	if query.Has("local") {
		param, err := parseBoolParameter(
			query.Get("local"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		localParam = param
	} else {
	}
	var remoteParam bool
	if query.Has("remote") {
		param, err := parseBoolParameter(
			query.Get("remote"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		remoteParam = param
	} else {
	}
	var byDomainParam string
	if query.Has("by_domain") {
		param := query.Get("by_domain")

		byDomainParam = param
	} else {
	}
	var activeParam bool
	if query.Has("active") {
		param, err := parseBoolParameter(
			query.Get("active"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		activeParam = param
	} else {
	}
	var pendingParam bool
	if query.Has("pending") {
		param, err := parseBoolParameter(
			query.Get("pending"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		pendingParam = param
	} else {
	}
	var disabledParam bool
	if query.Has("disabled") {
		param, err := parseBoolParameter(
			query.Get("disabled"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		disabledParam = param
	} else {
	}
	var silencedParam bool
	if query.Has("silenced") {
		param, err := parseBoolParameter(
			query.Get("silenced"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		silencedParam = param
	} else {
	}
	var suspendedParam bool
	if query.Has("suspended") {
		param, err := parseBoolParameter(
			query.Get("suspended"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		suspendedParam = param
	} else {
	}
	var staffParam bool
	if query.Has("staff") {
		param, err := parseBoolParameter(
			query.Get("staff"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staffParam = param
	} else {
	}
	var usernameParam string
	if query.Has("username") {
		param := query.Get("username")

		usernameParam = param
	} else {
	}
	var displayNameParam string
	if query.Has("display_name") {
		param := query.Get("display_name")

		displayNameParam = param
	} else {
	}
	var emailParam string
	if query.Has("email") {
		param := query.Get("email")

		emailParam = param
	} else {
	}
	var ipParam string
	if query.Has("ip") {
		param := query.Get("ip")

		ipParam = param
	} else {
	}
	result, err := c.service.ApiV1AdminAccountsGet(r.Context(), localParam, remoteParam, byDomainParam, activeParam, pendingParam, disabledParam, silencedParam, suspendedParam, staffParam, usernameParam, displayNameParam, emailParam, ipParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdActionPost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdActionPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1AdminAccountsIdActionPostRequestParam := ApiV1AdminAccountsIdActionPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AdminAccountsIdActionPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AdminAccountsIdActionPostRequestRequired(apiV1AdminAccountsIdActionPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AdminAccountsIdActionPostRequestConstraints(apiV1AdminAccountsIdActionPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdActionPost(r.Context(), idParam, apiV1AdminAccountsIdActionPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdApprovePost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdApprovePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdApprovePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdEnablePost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdEnablePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdEnablePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdGet - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdRejectPost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdRejectPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdRejectPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdUnsilencePost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdUnsilencePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdUnsilencePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminAccountsIdUnsuspendPost - 
func (c *DefaultAPIController) ApiV1AdminAccountsIdUnsuspendPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminAccountsIdUnsuspendPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsGet - 
func (c *DefaultAPIController) ApiV1AdminReportsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var resolvedParam bool
	if query.Has("resolved") {
		param, err := parseBoolParameter(
			query.Get("resolved"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		resolvedParam = param
	} else {
	}
	var accountIdParam string
	if query.Has("account_id") {
		param := query.Get("account_id")

		accountIdParam = param
	} else {
	}
	var targetAccountIdParam string
	if query.Has("target_account_id") {
		param := query.Get("target_account_id")

		targetAccountIdParam = param
	} else {
	}
	result, err := c.service.ApiV1AdminReportsGet(r.Context(), resolvedParam, accountIdParam, targetAccountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsIdAssignToSelfPost - 
func (c *DefaultAPIController) ApiV1AdminReportsIdAssignToSelfPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminReportsIdAssignToSelfPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsIdGet - 
func (c *DefaultAPIController) ApiV1AdminReportsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminReportsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsIdReopenPost - 
func (c *DefaultAPIController) ApiV1AdminReportsIdReopenPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminReportsIdReopenPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsIdResolvePost - 
func (c *DefaultAPIController) ApiV1AdminReportsIdResolvePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminReportsIdResolvePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AdminReportsIdUnassignPost - 
func (c *DefaultAPIController) ApiV1AdminReportsIdUnassignPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AdminReportsIdUnassignPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AnnouncementsGet - 
func (c *DefaultAPIController) ApiV1AnnouncementsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var withDismissedParam bool
	if query.Has("with_dismissed") {
		param, err := parseBoolParameter(
			query.Get("with_dismissed"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		withDismissedParam = param
	} else {
	}
	result, err := c.service.ApiV1AnnouncementsGet(r.Context(), withDismissedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AnnouncementsIdDismissPost - 
func (c *DefaultAPIController) ApiV1AnnouncementsIdDismissPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AnnouncementsIdDismissPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AnnouncementsIdReactionsNameDelete - 
func (c *DefaultAPIController) ApiV1AnnouncementsIdReactionsNameDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.ApiV1AnnouncementsIdReactionsNameDelete(r.Context(), idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AnnouncementsIdReactionsNamePut - 
func (c *DefaultAPIController) ApiV1AnnouncementsIdReactionsNamePut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.ApiV1AnnouncementsIdReactionsNamePut(r.Context(), idParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1BlocksGet - 
func (c *DefaultAPIController) ApiV1BlocksGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	result, err := c.service.ApiV1BlocksGet(r.Context(), limitParam, maxIdParam, sinceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1BookmarksGet - 
func (c *DefaultAPIController) ApiV1BookmarksGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1BookmarksGet(r.Context(), limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ConversationsGet - 
func (c *DefaultAPIController) ApiV1ConversationsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1ConversationsGet(r.Context(), limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ConversationsIdDelete - 
func (c *DefaultAPIController) ApiV1ConversationsIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1ConversationsIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ConversationsIdReadPost - 
func (c *DefaultAPIController) ApiV1ConversationsIdReadPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1ConversationsIdReadPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1CustomEmojisGet - 
func (c *DefaultAPIController) ApiV1CustomEmojisGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1CustomEmojisGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1DirectoryGet - 
func (c *DefaultAPIController) ApiV1DirectoryGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
		var param int32 = 0
		offsetParam = param
	}
	var orderParam string
	if query.Has("order") {
		param := query.Get("order")

		orderParam = param
	} else {
		param := active
		orderParam = param
	}
	var localParam bool
	if query.Has("local") {
		param, err := parseBoolParameter(
			query.Get("local"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		localParam = param
	} else {
	}
	result, err := c.service.ApiV1DirectoryGet(r.Context(), limitParam, offsetParam, orderParam, localParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1DomainBlocksDelete - 
func (c *DefaultAPIController) ApiV1DomainBlocksDelete(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var domainParam string
	if query.Has("domain") {
		param := query.Get("domain")

		domainParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "domain"}, nil)
		return
	}
	result, err := c.service.ApiV1DomainBlocksDelete(r.Context(), domainParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1DomainBlocksGet - 
func (c *DefaultAPIController) ApiV1DomainBlocksGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	result, err := c.service.ApiV1DomainBlocksGet(r.Context(), limitParam, maxIdParam, sinceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1DomainBlocksPost - 
func (c *DefaultAPIController) ApiV1DomainBlocksPost(w http.ResponseWriter, r *http.Request) {
	apiV1DomainBlocksPostRequestParam := ApiV1DomainBlocksPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1DomainBlocksPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1DomainBlocksPostRequestRequired(apiV1DomainBlocksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1DomainBlocksPostRequestConstraints(apiV1DomainBlocksPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1DomainBlocksPost(r.Context(), apiV1DomainBlocksPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1EndorsementsGet - 
func (c *DefaultAPIController) ApiV1EndorsementsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	result, err := c.service.ApiV1EndorsementsGet(r.Context(), limitParam, maxIdParam, sinceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FavouritesGet - 
func (c *DefaultAPIController) ApiV1FavouritesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam string
	if query.Has("limit") {
		param := query.Get("limit")

		limitParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1FavouritesGet(r.Context(), limitParam, maxIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FeaturedTagsGet - 
func (c *DefaultAPIController) ApiV1FeaturedTagsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1FeaturedTagsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FeaturedTagsIdDelete - 
func (c *DefaultAPIController) ApiV1FeaturedTagsIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1FeaturedTagsIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FeaturedTagsPost - 
func (c *DefaultAPIController) ApiV1FeaturedTagsPost(w http.ResponseWriter, r *http.Request) {
	apiV1FeaturedTagsPostRequestParam := ApiV1FeaturedTagsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1FeaturedTagsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1FeaturedTagsPostRequestRequired(apiV1FeaturedTagsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1FeaturedTagsPostRequestConstraints(apiV1FeaturedTagsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1FeaturedTagsPost(r.Context(), apiV1FeaturedTagsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FeaturedTagsSuggestionsGet - 
func (c *DefaultAPIController) ApiV1FeaturedTagsSuggestionsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1FeaturedTagsSuggestionsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FiltersGet - 
func (c *DefaultAPIController) ApiV1FiltersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1FiltersGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FiltersIdDelete - 
func (c *DefaultAPIController) ApiV1FiltersIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1FiltersIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FiltersIdGet - 
func (c *DefaultAPIController) ApiV1FiltersIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1FiltersIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FiltersIdPut - 
func (c *DefaultAPIController) ApiV1FiltersIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1FiltersPostRequestParam := ApiV1FiltersPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1FiltersPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1FiltersPostRequestRequired(apiV1FiltersPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1FiltersPostRequestConstraints(apiV1FiltersPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1FiltersIdPut(r.Context(), idParam, apiV1FiltersPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FiltersPost - 
func (c *DefaultAPIController) ApiV1FiltersPost(w http.ResponseWriter, r *http.Request) {
	apiV1FiltersPostRequestParam := ApiV1FiltersPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1FiltersPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1FiltersPostRequestRequired(apiV1FiltersPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1FiltersPostRequestConstraints(apiV1FiltersPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1FiltersPost(r.Context(), apiV1FiltersPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FollowRequestsGet - 
func (c *DefaultAPIController) ApiV1FollowRequestsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	result, err := c.service.ApiV1FollowRequestsGet(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FollowRequestsIdAuthorizePost - 
func (c *DefaultAPIController) ApiV1FollowRequestsIdAuthorizePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1FollowRequestsIdAuthorizePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1FollowRequestsIdRejectPost - 
func (c *DefaultAPIController) ApiV1FollowRequestsIdRejectPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1FollowRequestsIdRejectPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1InstanceActivityGet - 
func (c *DefaultAPIController) ApiV1InstanceActivityGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1InstanceActivityGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1InstanceGet - 
func (c *DefaultAPIController) ApiV1InstanceGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1InstanceGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1InstancePeersGet - 
func (c *DefaultAPIController) ApiV1InstancePeersGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1InstancePeersGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsDelete - 
func (c *DefaultAPIController) ApiV1ListsDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1ListsDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsGet - 
func (c *DefaultAPIController) ApiV1ListsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1ListsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsIdAccountsDelete - 
func (c *DefaultAPIController) ApiV1ListsIdAccountsDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var accountIdsParam []string
	if query.Has("account_ids") {
		accountIdsParam = strings.Split(query.Get("account_ids"), ",")
	}
	result, err := c.service.ApiV1ListsIdAccountsDelete(r.Context(), idParam, accountIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsIdAccountsGet - 
func (c *DefaultAPIController) ApiV1ListsIdAccountsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	result, err := c.service.ApiV1ListsIdAccountsGet(r.Context(), idParam, limitParam, maxIdParam, sinceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsIdAccountsPost - 
func (c *DefaultAPIController) ApiV1ListsIdAccountsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1ListsIdAccountsPostRequestParam := ApiV1ListsIdAccountsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1ListsIdAccountsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1ListsIdAccountsPostRequestRequired(apiV1ListsIdAccountsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1ListsIdAccountsPostRequestConstraints(apiV1ListsIdAccountsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1ListsIdAccountsPost(r.Context(), idParam, apiV1ListsIdAccountsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsIdGet - 
func (c *DefaultAPIController) ApiV1ListsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1ListsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsPost - 
func (c *DefaultAPIController) ApiV1ListsPost(w http.ResponseWriter, r *http.Request) {
	apiV1ListsPostRequestParam := ApiV1ListsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1ListsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1ListsPostRequestRequired(apiV1ListsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1ListsPostRequestConstraints(apiV1ListsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1ListsPost(r.Context(), apiV1ListsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ListsPut - 
func (c *DefaultAPIController) ApiV1ListsPut(w http.ResponseWriter, r *http.Request) {
	apiV1ListsPutRequestParam := ApiV1ListsPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1ListsPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1ListsPutRequestRequired(apiV1ListsPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1ListsPutRequestConstraints(apiV1ListsPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1ListsPut(r.Context(), apiV1ListsPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MarkersGet - 
func (c *DefaultAPIController) ApiV1MarkersGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var timelineParam []string
	if query.Has("timeline") {
		timelineParam = strings.Split(query.Get("timeline"), ",")
	}
	result, err := c.service.ApiV1MarkersGet(r.Context(), timelineParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MarkersPost - 
func (c *DefaultAPIController) ApiV1MarkersPost(w http.ResponseWriter, r *http.Request) {
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ApiV1MarkersPost(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MediaIdGet - 
func (c *DefaultAPIController) ApiV1MediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1MediaIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MediaIdPost - 
func (c *DefaultAPIController) ApiV1MediaIdPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1MediaPostRequestParam := ApiV1MediaPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1MediaPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1MediaPostRequestRequired(apiV1MediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1MediaPostRequestConstraints(apiV1MediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1MediaIdPost(r.Context(), idParam, apiV1MediaPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MediaPost - 
func (c *DefaultAPIController) ApiV1MediaPost(w http.ResponseWriter, r *http.Request) {
	apiV1MediaPostRequestParam := ApiV1MediaPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1MediaPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1MediaPostRequestRequired(apiV1MediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1MediaPostRequestConstraints(apiV1MediaPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1MediaPost(r.Context(), apiV1MediaPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1MutesGet - 
func (c *DefaultAPIController) ApiV1MutesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam string
	if query.Has("limit") {
		param := query.Get("limit")

		limitParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	result, err := c.service.ApiV1MutesGet(r.Context(), limitParam, maxIdParam, sinceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1NotificationsClearPost - 
func (c *DefaultAPIController) ApiV1NotificationsClearPost(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1NotificationsClearPost(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1NotificationsGet - 
func (c *DefaultAPIController) ApiV1NotificationsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	var excludeTypesParam []string
	if query.Has("exclude_types") {
		excludeTypesParam = strings.Split(query.Get("exclude_types"), ",")
	}
	var accountIdParam string
	if query.Has("account_id") {
		param := query.Get("account_id")

		accountIdParam = param
	} else {
	}
	result, err := c.service.ApiV1NotificationsGet(r.Context(), limitParam, maxIdParam, sinceIdParam, minIdParam, excludeTypesParam, accountIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1NotificationsIdDismissPost - 
func (c *DefaultAPIController) ApiV1NotificationsIdDismissPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1NotificationsIdDismissPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1NotificationsIdGet - 
func (c *DefaultAPIController) ApiV1NotificationsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1NotificationsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PollsIdGet - 
func (c *DefaultAPIController) ApiV1PollsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1PollsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PollsIdPost - 
func (c *DefaultAPIController) ApiV1PollsIdPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1PollsIdPostRequestParam := ApiV1PollsIdPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1PollsIdPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1PollsIdPostRequestRequired(apiV1PollsIdPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1PollsIdPostRequestConstraints(apiV1PollsIdPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1PollsIdPost(r.Context(), idParam, apiV1PollsIdPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PreferencesGet - 
func (c *DefaultAPIController) ApiV1PreferencesGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1PreferencesGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PushSubscriptionDelete - 
func (c *DefaultAPIController) ApiV1PushSubscriptionDelete(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1PushSubscriptionDelete(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PushSubscriptionGet - 
func (c *DefaultAPIController) ApiV1PushSubscriptionGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1PushSubscriptionGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PushSubscriptionPost - 
func (c *DefaultAPIController) ApiV1PushSubscriptionPost(w http.ResponseWriter, r *http.Request) {
	apiV1PushSubscriptionPostRequestParam := ApiV1PushSubscriptionPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1PushSubscriptionPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1PushSubscriptionPostRequestRequired(apiV1PushSubscriptionPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1PushSubscriptionPostRequestConstraints(apiV1PushSubscriptionPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1PushSubscriptionPost(r.Context(), apiV1PushSubscriptionPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PushSubscriptionPut - 
func (c *DefaultAPIController) ApiV1PushSubscriptionPut(w http.ResponseWriter, r *http.Request) {
	apiV1PushSubscriptionPutRequestParam := ApiV1PushSubscriptionPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1PushSubscriptionPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1PushSubscriptionPutRequestRequired(apiV1PushSubscriptionPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1PushSubscriptionPutRequestConstraints(apiV1PushSubscriptionPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1PushSubscriptionPut(r.Context(), apiV1PushSubscriptionPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ReportsPost - 
func (c *DefaultAPIController) ApiV1ReportsPost(w http.ResponseWriter, r *http.Request) {
	apiV1ReportsPostRequestParam := ApiV1ReportsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1ReportsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1ReportsPostRequestRequired(apiV1ReportsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1ReportsPostRequestConstraints(apiV1ReportsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1ReportsPost(r.Context(), apiV1ReportsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ScheduledStatusesGet - 
func (c *DefaultAPIController) ApiV1ScheduledStatusesGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1ScheduledStatusesGet(r.Context(), limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ScheduledStatusesIdDelete - 
func (c *DefaultAPIController) ApiV1ScheduledStatusesIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1ScheduledStatusesIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ScheduledStatusesIdGet - 
func (c *DefaultAPIController) ApiV1ScheduledStatusesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1ScheduledStatusesIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1ScheduledStatusesIdPut - 
func (c *DefaultAPIController) ApiV1ScheduledStatusesIdPut(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1ScheduledStatusesIdPutRequestParam := ApiV1ScheduledStatusesIdPutRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1ScheduledStatusesIdPutRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1ScheduledStatusesIdPutRequestRequired(apiV1ScheduledStatusesIdPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1ScheduledStatusesIdPutRequestConstraints(apiV1ScheduledStatusesIdPutRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1ScheduledStatusesIdPut(r.Context(), idParam, apiV1ScheduledStatusesIdPutRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdBookmarkPost - 
func (c *DefaultAPIController) ApiV1StatusesIdBookmarkPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdBookmarkPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdContextGet - 
func (c *DefaultAPIController) ApiV1StatusesIdContextGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdContextGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdDelete - 
func (c *DefaultAPIController) ApiV1StatusesIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdFavouritePost - 
func (c *DefaultAPIController) ApiV1StatusesIdFavouritePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdFavouritePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdFavouritedByGet - 
func (c *DefaultAPIController) ApiV1StatusesIdFavouritedByGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdFavouritedByGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdGet - 
func (c *DefaultAPIController) ApiV1StatusesIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdMutePost - 
func (c *DefaultAPIController) ApiV1StatusesIdMutePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdMutePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdPinPost - 
func (c *DefaultAPIController) ApiV1StatusesIdPinPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdPinPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdReblogPost - 
func (c *DefaultAPIController) ApiV1StatusesIdReblogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1StatusesIdReblogPostRequestParam := ApiV1StatusesIdReblogPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1StatusesIdReblogPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1StatusesIdReblogPostRequestRequired(apiV1StatusesIdReblogPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1StatusesIdReblogPostRequestConstraints(apiV1StatusesIdReblogPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdReblogPost(r.Context(), idParam, apiV1StatusesIdReblogPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdRebloggedByGet - 
func (c *DefaultAPIController) ApiV1StatusesIdRebloggedByGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdRebloggedByGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdUnbookmarkPost - 
func (c *DefaultAPIController) ApiV1StatusesIdUnbookmarkPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdUnbookmarkPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdUnfavouritePost - 
func (c *DefaultAPIController) ApiV1StatusesIdUnfavouritePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdUnfavouritePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdUnmutePost - 
func (c *DefaultAPIController) ApiV1StatusesIdUnmutePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdUnmutePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdUnpinPost - 
func (c *DefaultAPIController) ApiV1StatusesIdUnpinPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdUnpinPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesIdUnreblogPost - 
func (c *DefaultAPIController) ApiV1StatusesIdUnreblogPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1StatusesIdUnreblogPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1StatusesPost - 
func (c *DefaultAPIController) ApiV1StatusesPost(w http.ResponseWriter, r *http.Request) {
	idempotencyKeyParam := r.Header.Get("Idempotency-Key")
	apiV1StatusesPostRequestInnerParam := []ApiV1StatusesPostRequestInner{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1StatusesPostRequestInnerParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range apiV1StatusesPostRequestInnerParam {
		if err := AssertApiV1StatusesPostRequestInnerRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.ApiV1StatusesPost(r.Context(), idempotencyKeyParam, apiV1StatusesPostRequestInnerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1SuggestionsGet - 
func (c *DefaultAPIController) ApiV1SuggestionsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	result, err := c.service.ApiV1SuggestionsGet(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1SuggestionsIdDelete - 
func (c *DefaultAPIController) ApiV1SuggestionsIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1SuggestionsIdDelete(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1TimelinesHomeGet - 
func (c *DefaultAPIController) ApiV1TimelinesHomeGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localParam bool
	if query.Has("local") {
		param, err := parseBoolParameter(
			query.Get("local"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		localParam = param
	} else {
		var param bool = false
		localParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1TimelinesHomeGet(r.Context(), localParam, limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1TimelinesListListIdGet - 
func (c *DefaultAPIController) ApiV1TimelinesListListIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	listIdParam := params["list_id"]
	if listIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"list_id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1TimelinesListListIdGet(r.Context(), listIdParam, limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1TimelinesPublicGet - 
func (c *DefaultAPIController) ApiV1TimelinesPublicGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var localParam bool
	if query.Has("local") {
		param, err := parseBoolParameter(
			query.Get("local"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		localParam = param
	} else {
		var param bool = false
		localParam = param
	}
	var remoteParam bool
	if query.Has("remote") {
		param, err := parseBoolParameter(
			query.Get("remote"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		remoteParam = param
	} else {
		var param bool = false
		remoteParam = param
	}
	var onlyMediaParam bool
	if query.Has("only_media") {
		param, err := parseBoolParameter(
			query.Get("only_media"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyMediaParam = param
	} else {
		var param bool = false
		onlyMediaParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1TimelinesPublicGet(r.Context(), localParam, remoteParam, onlyMediaParam, limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1TimelinesTagHashtagGet - 
func (c *DefaultAPIController) ApiV1TimelinesTagHashtagGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	hashtagParam := params["hashtag"]
	if hashtagParam == "" {
		c.errorHandler(w, r, &RequiredError{"hashtag"}, nil)
		return
	}
	var localParam bool
	if query.Has("local") {
		param, err := parseBoolParameter(
			query.Get("local"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		localParam = param
	} else {
		var param bool = false
		localParam = param
	}
	var remoteParam bool
	if query.Has("remote") {
		param, err := parseBoolParameter(
			query.Get("remote"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		remoteParam = param
	} else {
		var param bool = false
		remoteParam = param
	}
	var onlyMediaParam bool
	if query.Has("only_media") {
		param, err := parseBoolParameter(
			query.Get("only_media"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyMediaParam = param
	} else {
		var param bool = false
		onlyMediaParam = param
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.ApiV1TimelinesTagHashtagGet(r.Context(), hashtagParam, localParam, remoteParam, onlyMediaParam, limitParam, maxIdParam, sinceIdParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1TrendsGet - 
func (c *DefaultAPIController) ApiV1TrendsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 10
		limitParam = param
	}
	result, err := c.service.ApiV1TrendsGet(r.Context(), limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV2SearchGet - 
func (c *DefaultAPIController) ApiV2SearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var resolveParam string
	if query.Has("resolve") {
		param := query.Get("resolve")

		resolveParam = param
	} else {
	}
	var followingParam bool
	if query.Has("following") {
		param, err := parseBoolParameter(
			query.Get("following"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		followingParam = param
	} else {
	}
	var accountIdParam string
	if query.Has("account_id") {
		param := query.Get("account_id")

		accountIdParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	var type_Param string
	if query.Has("type") {
		param := query.Get("type")

		type_Param = param
	} else {
	}
	var excludeUnreviewedParam bool
	if query.Has("exclude_unreviewed") {
		param, err := parseBoolParameter(
			query.Get("exclude_unreviewed"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		excludeUnreviewedParam = param
	} else {
	}
	var offsetParam int32
	if query.Has("offset") {
		param, err := parseNumericParameter[int32](
			query.Get("offset"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		offsetParam = param
	} else {
	}
	result, err := c.service.ApiV2SearchGet(r.Context(), qParam, limitParam, resolveParam, followingParam, accountIdParam, maxIdParam, minIdParam, type_Param, excludeUnreviewedParam, offsetParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
