/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type ApiV1StatusesPost200Response struct {

	Account Account `json:"account,omitempty"`

	Application Application `json:"application,omitempty"`

	// Have you bookmarked this status?
	Bookmarked bool `json:"bookmarked,omitempty"`

	Card Card `json:"card,omitempty"`

	// HTML-encoded status content.
	Content string `json:"content,omitempty"`

	// The date when this status was created.
	CreatedAt time.Time `json:"created_at,omitempty"`

	// Custom emoji to be used when rendering status content.
	Emojis []Emoji `json:"emojis,omitempty"`

	// Have you favourited this status?
	Favourited bool `json:"favourited,omitempty"`

	// How many favourites this status has received.
	FavouritesCount int32 `json:"favourites_count,omitempty"`

	// ID of the scheduled status in the database. Cast from an integer, but not guaranteed to be a number.
	Id string `json:"id"`

	// ID of the account being replied to.
	InReplyToAccountId string `json:"in_reply_to_account_id,omitempty"`

	// ID of the status being replied. Cast from an integer but not guaranteed to be a number.
	InReplyToId string `json:"in_reply_to_id,omitempty"`

	// Primary language of this status. ISO 639 Part 1 two-letter language code.
	Language string `json:"language,omitempty"`

	// Array of attachements
	MediaAttachments []Attachment `json:"media_attachments"`

	// Mentions of users within the status content.
	Mentions []Mention `json:"mentions,omitempty"`

	// Have you muted notifications for this status's conversation?
	Muted bool `json:"muted,omitempty"`

	// Have you pinned this status? Only appears if the status is pinnable.
	Pinned bool `json:"pinned,omitempty"`

	Poll Poll `json:"poll,omitempty"`

	Reblog Status `json:"reblog,omitempty"`

	// Have you boosted this status?
	Reblogged bool `json:"reblogged,omitempty"`

	// How many boosts this status has received.
	ReblogsCount int32 `json:"reblogs_count,omitempty"`

	// How many replies this status has received.
	RepliesCount int32 `json:"replies_count,omitempty"`

	// Is this status marked as sensitive content?
	Sensitive bool `json:"sensitive,omitempty"`

	// Subject or summary line, below which status content is collapsed until expanded.
	SpoilerText string `json:"spoiler_text,omitempty"`

	// Hashtags used within the status content.
	Tags []Tag `json:"tags,omitempty"`

	// Plain-text source of a status. Returned instead of `content` when status is deleted, so the user may redraft from the source text without the client having to reverse-engineer the original text from the HTML content.
	Text string `json:"text,omitempty"`

	// URI of the status used for federation.
	Uri string `json:"uri,omitempty"`

	// A link to the status's HTML representation.
	Url string `json:"url,omitempty"`

	// Visibility of this status.
	Visibility string `json:"visibility,omitempty"`

	Params StatusParams `json:"params"`

	// ID of the status in the database. ISO 8601 Datetime.
	ScheduledAt time.Time `json:"scheduled_at"`
}

// AssertApiV1StatusesPost200ResponseRequired checks if the required fields are not zero-ed
func AssertApiV1StatusesPost200ResponseRequired(obj ApiV1StatusesPost200Response) error {
	elements := map[string]interface{}{
		"id": obj.Id,
		"media_attachments": obj.MediaAttachments,
		"params": obj.Params,
		"scheduled_at": obj.ScheduledAt,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertAccountRequired(obj.Account); err != nil {
		return err
	}
	if err := AssertApplicationRequired(obj.Application); err != nil {
		return err
	}
	if err := AssertCardRequired(obj.Card); err != nil {
		return err
	}
	for _, el := range obj.Emojis {
		if err := AssertEmojiRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.MediaAttachments {
		if err := AssertAttachmentRequired(el); err != nil {
			return err
		}
	}
	for _, el := range obj.Mentions {
		if err := AssertMentionRequired(el); err != nil {
			return err
		}
	}
	if err := AssertPollRequired(obj.Poll); err != nil {
		return err
	}
	if err := AssertStatusRequired(obj.Reblog); err != nil {
		return err
	}
	for _, el := range obj.Tags {
		if err := AssertTagRequired(el); err != nil {
			return err
		}
	}
	if err := AssertStatusParamsRequired(obj.Params); err != nil {
		return err
	}
	return nil
}

// AssertApiV1StatusesPost200ResponseConstraints checks if the values respects the defined constraints
func AssertApiV1StatusesPost200ResponseConstraints(obj ApiV1StatusesPost200Response) error {
	return nil
}
