/*
 * Mastodon API Specification (https://github.com/mastodon/mastodon)
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Contact: sardo@hey.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// AccountsAPIController binds http requests to an api service and writes the service results to the http response
type AccountsAPIController struct {
	service AccountsAPIServicer
	errorHandler ErrorHandler
}

// AccountsAPIOption for how the controller is set up.
type AccountsAPIOption func(*AccountsAPIController)

// WithAccountsAPIErrorHandler inject ErrorHandler into controller
func WithAccountsAPIErrorHandler(h ErrorHandler) AccountsAPIOption {
	return func(c *AccountsAPIController) {
		c.errorHandler = h
	}
}

// NewAccountsAPIController creates a default api controller
func NewAccountsAPIController(s AccountsAPIServicer, opts ...AccountsAPIOption) Router {
	controller := &AccountsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AccountsAPIController
func (c *AccountsAPIController) Routes() Routes {
	return Routes{
		"ApiV1AccountsIdBlockPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/block",
			c.ApiV1AccountsIdBlockPost,
		},
		"ApiV1AccountsIdFeaturedTagsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/featured_tags",
			c.ApiV1AccountsIdFeaturedTagsGet,
		},
		"ApiV1AccountsIdFollowPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/follow",
			c.ApiV1AccountsIdFollowPost,
		},
		"ApiV1AccountsIdFollowersGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/followers",
			c.ApiV1AccountsIdFollowersGet,
		},
		"ApiV1AccountsIdFollowingGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/following",
			c.ApiV1AccountsIdFollowingGet,
		},
		"ApiV1AccountsIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}",
			c.ApiV1AccountsIdGet,
		},
		"ApiV1AccountsIdIdentityProofsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/identity_proofs",
			c.ApiV1AccountsIdIdentityProofsGet,
		},
		"ApiV1AccountsIdListsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/lists",
			c.ApiV1AccountsIdListsGet,
		},
		"ApiV1AccountsIdMutePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/mute",
			c.ApiV1AccountsIdMutePost,
		},
		"ApiV1AccountsIdNotePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/note",
			c.ApiV1AccountsIdNotePost,
		},
		"ApiV1AccountsIdPinPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/pin",
			c.ApiV1AccountsIdPinPost,
		},
		"ApiV1AccountsIdStatusesGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/{id}/statuses",
			c.ApiV1AccountsIdStatusesGet,
		},
		"ApiV1AccountsIdUnblockPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/unblock",
			c.ApiV1AccountsIdUnblockPost,
		},
		"ApiV1AccountsIdUnfollowPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/unfollow",
			c.ApiV1AccountsIdUnfollowPost,
		},
		"ApiV1AccountsIdUnmutePost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/unmute",
			c.ApiV1AccountsIdUnmutePost,
		},
		"ApiV1AccountsIdUnpinPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts/{id}/unpin",
			c.ApiV1AccountsIdUnpinPost,
		},
		"ApiV1AccountsPost": Route{
			strings.ToUpper("Post"),
			"/api/v1/accounts",
			c.ApiV1AccountsPost,
		},
		"ApiV1AccountsRelationshipsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/relationships",
			c.ApiV1AccountsRelationshipsGet,
		},
		"ApiV1AccountsSearchGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/search",
			c.ApiV1AccountsSearchGet,
		},
		"ApiV1AccountsUpdateCredentialsPatch": Route{
			strings.ToUpper("Patch"),
			"/api/v1/accounts/update_credentials",
			c.ApiV1AccountsUpdateCredentialsPatch,
		},
		"ApiV1AccountsVerifyCredentialsGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/accounts/verify_credentials",
			c.ApiV1AccountsVerifyCredentialsGet,
		},
	}
}

// ApiV1AccountsIdBlockPost - 
func (c *AccountsAPIController) ApiV1AccountsIdBlockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdBlockPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdFeaturedTagsGet - 
func (c *AccountsAPIController) ApiV1AccountsIdFeaturedTagsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdFeaturedTagsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdFollowPost - 
func (c *AccountsAPIController) ApiV1AccountsIdFollowPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1AccountsIdFollowPostRequestParam := ApiV1AccountsIdFollowPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AccountsIdFollowPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AccountsIdFollowPostRequestRequired(apiV1AccountsIdFollowPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AccountsIdFollowPostRequestConstraints(apiV1AccountsIdFollowPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdFollowPost(r.Context(), idParam, apiV1AccountsIdFollowPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdFollowersGet - 
func (c *AccountsAPIController) ApiV1AccountsIdFollowersGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	result, err := c.service.ApiV1AccountsIdFollowersGet(r.Context(), idParam, maxIdParam, sinceIdParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdFollowingGet - 
func (c *AccountsAPIController) ApiV1AccountsIdFollowingGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	var sinceIdParam string
	if query.Has("since_id") {
		param := query.Get("since_id")

		sinceIdParam = param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	result, err := c.service.ApiV1AccountsIdFollowingGet(r.Context(), idParam, maxIdParam, sinceIdParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdGet - 
func (c *AccountsAPIController) ApiV1AccountsIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdIdentityProofsGet - 
func (c *AccountsAPIController) ApiV1AccountsIdIdentityProofsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdIdentityProofsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdListsGet - 
func (c *AccountsAPIController) ApiV1AccountsIdListsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdListsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdMutePost - 
func (c *AccountsAPIController) ApiV1AccountsIdMutePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1AccountsIdMutePostRequestParam := ApiV1AccountsIdMutePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AccountsIdMutePostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AccountsIdMutePostRequestRequired(apiV1AccountsIdMutePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AccountsIdMutePostRequestConstraints(apiV1AccountsIdMutePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdMutePost(r.Context(), idParam, apiV1AccountsIdMutePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdNotePost - 
func (c *AccountsAPIController) ApiV1AccountsIdNotePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	apiV1AccountsIdNotePostRequestParam := ApiV1AccountsIdNotePostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AccountsIdNotePostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AccountsIdNotePostRequestRequired(apiV1AccountsIdNotePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AccountsIdNotePostRequestConstraints(apiV1AccountsIdNotePostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdNotePost(r.Context(), idParam, apiV1AccountsIdNotePostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdPinPost - 
func (c *AccountsAPIController) ApiV1AccountsIdPinPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdPinPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdStatusesGet - 
func (c *AccountsAPIController) ApiV1AccountsIdStatusesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdStatusesGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdUnblockPost - 
func (c *AccountsAPIController) ApiV1AccountsIdUnblockPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdUnblockPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdUnfollowPost - 
func (c *AccountsAPIController) ApiV1AccountsIdUnfollowPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdUnfollowPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdUnmutePost - 
func (c *AccountsAPIController) ApiV1AccountsIdUnmutePost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdUnmutePost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsIdUnpinPost - 
func (c *AccountsAPIController) ApiV1AccountsIdUnpinPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ApiV1AccountsIdUnpinPost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsPost - 
func (c *AccountsAPIController) ApiV1AccountsPost(w http.ResponseWriter, r *http.Request) {
	apiV1AccountsPostRequestParam := ApiV1AccountsPostRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AccountsPostRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AccountsPostRequestRequired(apiV1AccountsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AccountsPostRequestConstraints(apiV1AccountsPostRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AccountsPost(r.Context(), apiV1AccountsPostRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsRelationshipsGet - 
func (c *AccountsAPIController) ApiV1AccountsRelationshipsGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam []string
	if query.Has("id") {
		idParam = strings.Split(query.Get("id"), ",")
	}
	result, err := c.service.ApiV1AccountsRelationshipsGet(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsSearchGet - 
func (c *AccountsAPIController) ApiV1AccountsSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 40
		limitParam = param
	}
	var resolveParam string
	if query.Has("resolve") {
		param := query.Get("resolve")

		resolveParam = param
	} else {
	}
	var followingParam bool
	if query.Has("following") {
		param, err := parseBoolParameter(
			query.Get("following"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		followingParam = param
	} else {
	}
	result, err := c.service.ApiV1AccountsSearchGet(r.Context(), qParam, limitParam, resolveParam, followingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsUpdateCredentialsPatch - 
func (c *AccountsAPIController) ApiV1AccountsUpdateCredentialsPatch(w http.ResponseWriter, r *http.Request) {
	apiV1AccountsUpdateCredentialsPatchRequestParam := ApiV1AccountsUpdateCredentialsPatchRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&apiV1AccountsUpdateCredentialsPatchRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertApiV1AccountsUpdateCredentialsPatchRequestRequired(apiV1AccountsUpdateCredentialsPatchRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertApiV1AccountsUpdateCredentialsPatchRequestConstraints(apiV1AccountsUpdateCredentialsPatchRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ApiV1AccountsUpdateCredentialsPatch(r.Context(), apiV1AccountsUpdateCredentialsPatchRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1AccountsVerifyCredentialsGet - 
func (c *AccountsAPIController) ApiV1AccountsVerifyCredentialsGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ApiV1AccountsVerifyCredentialsGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
