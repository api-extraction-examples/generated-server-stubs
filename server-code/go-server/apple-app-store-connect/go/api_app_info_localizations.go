/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppInfoLocalizationsAPIController binds http requests to an api service and writes the service results to the http response
type AppInfoLocalizationsAPIController struct {
	service AppInfoLocalizationsAPIServicer
	errorHandler ErrorHandler
}

// AppInfoLocalizationsAPIOption for how the controller is set up.
type AppInfoLocalizationsAPIOption func(*AppInfoLocalizationsAPIController)

// WithAppInfoLocalizationsAPIErrorHandler inject ErrorHandler into controller
func WithAppInfoLocalizationsAPIErrorHandler(h ErrorHandler) AppInfoLocalizationsAPIOption {
	return func(c *AppInfoLocalizationsAPIController) {
		c.errorHandler = h
	}
}

// NewAppInfoLocalizationsAPIController creates a default api controller
func NewAppInfoLocalizationsAPIController(s AppInfoLocalizationsAPIServicer, opts ...AppInfoLocalizationsAPIOption) Router {
	controller := &AppInfoLocalizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppInfoLocalizationsAPIController
func (c *AppInfoLocalizationsAPIController) Routes() Routes {
	return Routes{
		"AppInfoLocalizationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appInfoLocalizations",
			c.AppInfoLocalizationsCreateInstance,
		},
		"AppInfoLocalizationsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appInfoLocalizations/{id}",
			c.AppInfoLocalizationsDeleteInstance,
		},
		"AppInfoLocalizationsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appInfoLocalizations/{id}",
			c.AppInfoLocalizationsGetInstance,
		},
		"AppInfoLocalizationsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appInfoLocalizations/{id}",
			c.AppInfoLocalizationsUpdateInstance,
		},
	}
}

// AppInfoLocalizationsCreateInstance - 
func (c *AppInfoLocalizationsAPIController) AppInfoLocalizationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	appInfoLocalizationCreateRequestParam := AppInfoLocalizationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appInfoLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppInfoLocalizationCreateRequestRequired(appInfoLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppInfoLocalizationCreateRequestConstraints(appInfoLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppInfoLocalizationsCreateInstance(r.Context(), appInfoLocalizationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfoLocalizationsDeleteInstance - 
func (c *AppInfoLocalizationsAPIController) AppInfoLocalizationsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppInfoLocalizationsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfoLocalizationsGetInstance - 
func (c *AppInfoLocalizationsAPIController) AppInfoLocalizationsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppInfoLocalizationsParam []string
	if query.Has("fields[appInfoLocalizations]") {
		fieldsAppInfoLocalizationsParam = strings.Split(query.Get("fields[appInfoLocalizations]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppInfoLocalizationsGetInstance(r.Context(), idParam, fieldsAppInfoLocalizationsParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfoLocalizationsUpdateInstance - 
func (c *AppInfoLocalizationsAPIController) AppInfoLocalizationsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appInfoLocalizationUpdateRequestParam := AppInfoLocalizationUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appInfoLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppInfoLocalizationUpdateRequestRequired(appInfoLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppInfoLocalizationUpdateRequestConstraints(appInfoLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppInfoLocalizationsUpdateInstance(r.Context(), idParam, appInfoLocalizationUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
