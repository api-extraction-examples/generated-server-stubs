/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type BrazilAgeRating string

// List of BrazilAgeRating
const (
	L BrazilAgeRating = "L"
	TEN BrazilAgeRating = "TEN"
	TWELVE BrazilAgeRating = "TWELVE"
	FOURTEEN BrazilAgeRating = "FOURTEEN"
	SIXTEEN BrazilAgeRating = "SIXTEEN"
	EIGHTEEN BrazilAgeRating = "EIGHTEEN"
)

// AllowedBrazilAgeRatingEnumValues is all the allowed values of BrazilAgeRating enum
var AllowedBrazilAgeRatingEnumValues = []BrazilAgeRating{
	"L",
	"TEN",
	"TWELVE",
	"FOURTEEN",
	"SIXTEEN",
	"EIGHTEEN",
}

// validBrazilAgeRatingEnumValue provides a map of BrazilAgeRatings for fast verification of use input
var validBrazilAgeRatingEnumValues = map[BrazilAgeRating]struct{}{
	"L": {},
	"TEN": {},
	"TWELVE": {},
	"FOURTEEN": {},
	"SIXTEEN": {},
	"EIGHTEEN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BrazilAgeRating) IsValid() bool {
	_, ok := validBrazilAgeRatingEnumValues[v]
	return ok
}

// NewBrazilAgeRatingFromValue returns a pointer to a valid BrazilAgeRating
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBrazilAgeRatingFromValue(v string) (BrazilAgeRating, error) {
	ev := BrazilAgeRating(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for BrazilAgeRating: valid values are %v", v, AllowedBrazilAgeRatingEnumValues)
	}
}



// AssertBrazilAgeRatingRequired checks if the required fields are not zero-ed
func AssertBrazilAgeRatingRequired(obj BrazilAgeRating) error {
	return nil
}

// AssertBrazilAgeRatingConstraints checks if the values respects the defined constraints
func AssertBrazilAgeRatingConstraints(obj BrazilAgeRating) error {
	return nil
}
