/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppPricesAPIController binds http requests to an api service and writes the service results to the http response
type AppPricesAPIController struct {
	service AppPricesAPIServicer
	errorHandler ErrorHandler
}

// AppPricesAPIOption for how the controller is set up.
type AppPricesAPIOption func(*AppPricesAPIController)

// WithAppPricesAPIErrorHandler inject ErrorHandler into controller
func WithAppPricesAPIErrorHandler(h ErrorHandler) AppPricesAPIOption {
	return func(c *AppPricesAPIController) {
		c.errorHandler = h
	}
}

// NewAppPricesAPIController creates a default api controller
func NewAppPricesAPIController(s AppPricesAPIServicer, opts ...AppPricesAPIOption) Router {
	controller := &AppPricesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppPricesAPIController
func (c *AppPricesAPIController) Routes() Routes {
	return Routes{
		"AppPricesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appPrices/{id}",
			c.AppPricesGetInstance,
		},
	}
}

// AppPricesGetInstance - 
func (c *AppPricesAPIController) AppPricesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppPricesParam []string
	if query.Has("fields[appPrices]") {
		fieldsAppPricesParam = strings.Split(query.Get("fields[appPrices]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppPricesGetInstance(r.Context(), idParam, fieldsAppPricesParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
