/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RoutingAppCoveragesAPIController binds http requests to an api service and writes the service results to the http response
type RoutingAppCoveragesAPIController struct {
	service RoutingAppCoveragesAPIServicer
	errorHandler ErrorHandler
}

// RoutingAppCoveragesAPIOption for how the controller is set up.
type RoutingAppCoveragesAPIOption func(*RoutingAppCoveragesAPIController)

// WithRoutingAppCoveragesAPIErrorHandler inject ErrorHandler into controller
func WithRoutingAppCoveragesAPIErrorHandler(h ErrorHandler) RoutingAppCoveragesAPIOption {
	return func(c *RoutingAppCoveragesAPIController) {
		c.errorHandler = h
	}
}

// NewRoutingAppCoveragesAPIController creates a default api controller
func NewRoutingAppCoveragesAPIController(s RoutingAppCoveragesAPIServicer, opts ...RoutingAppCoveragesAPIOption) Router {
	controller := &RoutingAppCoveragesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RoutingAppCoveragesAPIController
func (c *RoutingAppCoveragesAPIController) Routes() Routes {
	return Routes{
		"RoutingAppCoveragesCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/routingAppCoverages",
			c.RoutingAppCoveragesCreateInstance,
		},
		"RoutingAppCoveragesDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/routingAppCoverages/{id}",
			c.RoutingAppCoveragesDeleteInstance,
		},
		"RoutingAppCoveragesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/routingAppCoverages/{id}",
			c.RoutingAppCoveragesGetInstance,
		},
		"RoutingAppCoveragesUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/routingAppCoverages/{id}",
			c.RoutingAppCoveragesUpdateInstance,
		},
	}
}

// RoutingAppCoveragesCreateInstance - 
func (c *RoutingAppCoveragesAPIController) RoutingAppCoveragesCreateInstance(w http.ResponseWriter, r *http.Request) {
	routingAppCoverageCreateRequestParam := RoutingAppCoverageCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&routingAppCoverageCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoutingAppCoverageCreateRequestRequired(routingAppCoverageCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoutingAppCoverageCreateRequestConstraints(routingAppCoverageCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RoutingAppCoveragesCreateInstance(r.Context(), routingAppCoverageCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RoutingAppCoveragesDeleteInstance - 
func (c *RoutingAppCoveragesAPIController) RoutingAppCoveragesDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.RoutingAppCoveragesDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RoutingAppCoveragesGetInstance - 
func (c *RoutingAppCoveragesAPIController) RoutingAppCoveragesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsRoutingAppCoveragesParam []string
	if query.Has("fields[routingAppCoverages]") {
		fieldsRoutingAppCoveragesParam = strings.Split(query.Get("fields[routingAppCoverages]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.RoutingAppCoveragesGetInstance(r.Context(), idParam, fieldsRoutingAppCoveragesParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RoutingAppCoveragesUpdateInstance - 
func (c *RoutingAppCoveragesAPIController) RoutingAppCoveragesUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	routingAppCoverageUpdateRequestParam := RoutingAppCoverageUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&routingAppCoverageUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRoutingAppCoverageUpdateRequestRequired(routingAppCoverageUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRoutingAppCoverageUpdateRequestConstraints(routingAppCoverageUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.RoutingAppCoveragesUpdateInstance(r.Context(), idParam, routingAppCoverageUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
