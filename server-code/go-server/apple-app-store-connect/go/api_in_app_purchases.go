/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// InAppPurchasesAPIController binds http requests to an api service and writes the service results to the http response
type InAppPurchasesAPIController struct {
	service InAppPurchasesAPIServicer
	errorHandler ErrorHandler
}

// InAppPurchasesAPIOption for how the controller is set up.
type InAppPurchasesAPIOption func(*InAppPurchasesAPIController)

// WithInAppPurchasesAPIErrorHandler inject ErrorHandler into controller
func WithInAppPurchasesAPIErrorHandler(h ErrorHandler) InAppPurchasesAPIOption {
	return func(c *InAppPurchasesAPIController) {
		c.errorHandler = h
	}
}

// NewInAppPurchasesAPIController creates a default api controller
func NewInAppPurchasesAPIController(s InAppPurchasesAPIServicer, opts ...InAppPurchasesAPIOption) Router {
	controller := &InAppPurchasesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the InAppPurchasesAPIController
func (c *InAppPurchasesAPIController) Routes() Routes {
	return Routes{
		"InAppPurchasesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/inAppPurchases/{id}",
			c.InAppPurchasesGetInstance,
		},
	}
}

// InAppPurchasesGetInstance - 
func (c *InAppPurchasesAPIController) InAppPurchasesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsInAppPurchasesParam []string
	if query.Has("fields[inAppPurchases]") {
		fieldsInAppPurchasesParam = strings.Split(query.Get("fields[inAppPurchases]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var limitAppsParam int32
	if query.Has("limit[apps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[apps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppsParam = param
	} else {
	}
	result, err := c.service.InAppPurchasesGetInstance(r.Context(), idParam, fieldsInAppPurchasesParam, includeParam, limitAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
