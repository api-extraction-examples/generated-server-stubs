/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DiagnosticSignaturesAPIController binds http requests to an api service and writes the service results to the http response
type DiagnosticSignaturesAPIController struct {
	service DiagnosticSignaturesAPIServicer
	errorHandler ErrorHandler
}

// DiagnosticSignaturesAPIOption for how the controller is set up.
type DiagnosticSignaturesAPIOption func(*DiagnosticSignaturesAPIController)

// WithDiagnosticSignaturesAPIErrorHandler inject ErrorHandler into controller
func WithDiagnosticSignaturesAPIErrorHandler(h ErrorHandler) DiagnosticSignaturesAPIOption {
	return func(c *DiagnosticSignaturesAPIController) {
		c.errorHandler = h
	}
}

// NewDiagnosticSignaturesAPIController creates a default api controller
func NewDiagnosticSignaturesAPIController(s DiagnosticSignaturesAPIServicer, opts ...DiagnosticSignaturesAPIOption) Router {
	controller := &DiagnosticSignaturesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DiagnosticSignaturesAPIController
func (c *DiagnosticSignaturesAPIController) Routes() Routes {
	return Routes{
		"DiagnosticSignaturesLogsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/diagnosticSignatures/{id}/logs",
			c.DiagnosticSignaturesLogsGetToManyRelated,
		},
	}
}

// DiagnosticSignaturesLogsGetToManyRelated - 
func (c *DiagnosticSignaturesAPIController) DiagnosticSignaturesLogsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.DiagnosticSignaturesLogsGetToManyRelated(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
