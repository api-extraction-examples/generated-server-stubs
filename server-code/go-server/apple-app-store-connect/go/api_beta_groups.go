/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaGroupsAPIController binds http requests to an api service and writes the service results to the http response
type BetaGroupsAPIController struct {
	service BetaGroupsAPIServicer
	errorHandler ErrorHandler
}

// BetaGroupsAPIOption for how the controller is set up.
type BetaGroupsAPIOption func(*BetaGroupsAPIController)

// WithBetaGroupsAPIErrorHandler inject ErrorHandler into controller
func WithBetaGroupsAPIErrorHandler(h ErrorHandler) BetaGroupsAPIOption {
	return func(c *BetaGroupsAPIController) {
		c.errorHandler = h
	}
}

// NewBetaGroupsAPIController creates a default api controller
func NewBetaGroupsAPIController(s BetaGroupsAPIServicer, opts ...BetaGroupsAPIOption) Router {
	controller := &BetaGroupsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaGroupsAPIController
func (c *BetaGroupsAPIController) Routes() Routes {
	return Routes{
		"BetaGroupsAppGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}/app",
			c.BetaGroupsAppGetToOneRelated,
		},
		"BetaGroupsBetaTestersCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/betaGroups/{id}/relationships/betaTesters",
			c.BetaGroupsBetaTestersCreateToManyRelationship,
		},
		"BetaGroupsBetaTestersDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/betaGroups/{id}/relationships/betaTesters",
			c.BetaGroupsBetaTestersDeleteToManyRelationship,
		},
		"BetaGroupsBetaTestersGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}/betaTesters",
			c.BetaGroupsBetaTestersGetToManyRelated,
		},
		"BetaGroupsBetaTestersGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}/relationships/betaTesters",
			c.BetaGroupsBetaTestersGetToManyRelationship,
		},
		"BetaGroupsBuildsCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/betaGroups/{id}/relationships/builds",
			c.BetaGroupsBuildsCreateToManyRelationship,
		},
		"BetaGroupsBuildsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/betaGroups/{id}/relationships/builds",
			c.BetaGroupsBuildsDeleteToManyRelationship,
		},
		"BetaGroupsBuildsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}/builds",
			c.BetaGroupsBuildsGetToManyRelated,
		},
		"BetaGroupsBuildsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}/relationships/builds",
			c.BetaGroupsBuildsGetToManyRelationship,
		},
		"BetaGroupsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/betaGroups",
			c.BetaGroupsCreateInstance,
		},
		"BetaGroupsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/betaGroups/{id}",
			c.BetaGroupsDeleteInstance,
		},
		"BetaGroupsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups",
			c.BetaGroupsGetCollection,
		},
		"BetaGroupsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/betaGroups/{id}",
			c.BetaGroupsGetInstance,
		},
		"BetaGroupsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/betaGroups/{id}",
			c.BetaGroupsUpdateInstance,
		},
	}
}

// BetaGroupsAppGetToOneRelated - 
func (c *BetaGroupsAPIController) BetaGroupsAppGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaGroupsAppGetToOneRelated(r.Context(), idParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBetaTestersCreateToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBetaTestersCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaGroupBetaTestersLinkagesRequestParam := BetaGroupBetaTestersLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupBetaTestersLinkagesRequestRequired(betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupBetaTestersLinkagesRequestConstraints(betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsBetaTestersCreateToManyRelationship(r.Context(), idParam, betaGroupBetaTestersLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBetaTestersDeleteToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBetaTestersDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaGroupBetaTestersLinkagesRequestParam := BetaGroupBetaTestersLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupBetaTestersLinkagesRequestRequired(betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupBetaTestersLinkagesRequestConstraints(betaGroupBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsBetaTestersDeleteToManyRelationship(r.Context(), idParam, betaGroupBetaTestersLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBetaTestersGetToManyRelated - 
func (c *BetaGroupsAPIController) BetaGroupsBetaTestersGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaTestersParam []string
	if query.Has("fields[betaTesters]") {
		fieldsBetaTestersParam = strings.Split(query.Get("fields[betaTesters]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaGroupsBetaTestersGetToManyRelated(r.Context(), idParam, fieldsBetaTestersParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBetaTestersGetToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBetaTestersGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaGroupsBetaTestersGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBuildsCreateToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBuildsCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaGroupBuildsLinkagesRequestParam := BetaGroupBuildsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupBuildsLinkagesRequestRequired(betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupBuildsLinkagesRequestConstraints(betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsBuildsCreateToManyRelationship(r.Context(), idParam, betaGroupBuildsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBuildsDeleteToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBuildsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaGroupBuildsLinkagesRequestParam := BetaGroupBuildsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupBuildsLinkagesRequestRequired(betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupBuildsLinkagesRequestConstraints(betaGroupBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsBuildsDeleteToManyRelationship(r.Context(), idParam, betaGroupBuildsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBuildsGetToManyRelated - 
func (c *BetaGroupsAPIController) BetaGroupsBuildsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaGroupsBuildsGetToManyRelated(r.Context(), idParam, fieldsBuildsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsBuildsGetToManyRelationship - 
func (c *BetaGroupsAPIController) BetaGroupsBuildsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaGroupsBuildsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsCreateInstance - 
func (c *BetaGroupsAPIController) BetaGroupsCreateInstance(w http.ResponseWriter, r *http.Request) {
	betaGroupCreateRequestParam := BetaGroupCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupCreateRequestRequired(betaGroupCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupCreateRequestConstraints(betaGroupCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsCreateInstance(r.Context(), betaGroupCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsDeleteInstance - 
func (c *BetaGroupsAPIController) BetaGroupsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.BetaGroupsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsGetCollection - 
func (c *BetaGroupsAPIController) BetaGroupsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterIsInternalGroupParam []string
	if query.Has("filter[isInternalGroup]") {
		filterIsInternalGroupParam = strings.Split(query.Get("filter[isInternalGroup]"), ",")
	}
	var filterNameParam []string
	if query.Has("filter[name]") {
		filterNameParam = strings.Split(query.Get("filter[name]"), ",")
	}
	var filterPublicLinkParam []string
	if query.Has("filter[publicLink]") {
		filterPublicLinkParam = strings.Split(query.Get("filter[publicLink]"), ",")
	}
	var filterPublicLinkEnabledParam []string
	if query.Has("filter[publicLinkEnabled]") {
		filterPublicLinkEnabledParam = strings.Split(query.Get("filter[publicLinkEnabled]"), ",")
	}
	var filterPublicLinkLimitEnabledParam []string
	if query.Has("filter[publicLinkLimitEnabled]") {
		filterPublicLinkLimitEnabledParam = strings.Split(query.Get("filter[publicLinkLimitEnabled]"), ",")
	}
	var filterAppParam []string
	if query.Has("filter[app]") {
		filterAppParam = strings.Split(query.Get("filter[app]"), ",")
	}
	var filterBuildsParam []string
	if query.Has("filter[builds]") {
		filterBuildsParam = strings.Split(query.Get("filter[builds]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsBetaTestersParam []string
	if query.Has("fields[betaTesters]") {
		fieldsBetaTestersParam = strings.Split(query.Get("fields[betaTesters]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBetaTestersParam int32
	if query.Has("limit[betaTesters]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaTesters]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaTestersParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.BetaGroupsGetCollection(r.Context(), filterIsInternalGroupParam, filterNameParam, filterPublicLinkParam, filterPublicLinkEnabledParam, filterPublicLinkLimitEnabledParam, filterAppParam, filterBuildsParam, filterIdParam, sortParam, fieldsBetaGroupsParam, limitParam, includeParam, fieldsBuildsParam, fieldsBetaTestersParam, fieldsAppsParam, limitBetaTestersParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsGetInstance - 
func (c *BetaGroupsAPIController) BetaGroupsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsBetaTestersParam []string
	if query.Has("fields[betaTesters]") {
		fieldsBetaTestersParam = strings.Split(query.Get("fields[betaTesters]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBetaTestersParam int32
	if query.Has("limit[betaTesters]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaTesters]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaTestersParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.BetaGroupsGetInstance(r.Context(), idParam, fieldsBetaGroupsParam, includeParam, fieldsBuildsParam, fieldsBetaTestersParam, fieldsAppsParam, limitBetaTestersParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaGroupsUpdateInstance - 
func (c *BetaGroupsAPIController) BetaGroupsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaGroupUpdateRequestParam := BetaGroupUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaGroupUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaGroupUpdateRequestRequired(betaGroupUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaGroupUpdateRequestConstraints(betaGroupUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaGroupsUpdateInstance(r.Context(), idParam, betaGroupUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
