/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BundleIdsAPIController binds http requests to an api service and writes the service results to the http response
type BundleIdsAPIController struct {
	service BundleIdsAPIServicer
	errorHandler ErrorHandler
}

// BundleIdsAPIOption for how the controller is set up.
type BundleIdsAPIOption func(*BundleIdsAPIController)

// WithBundleIdsAPIErrorHandler inject ErrorHandler into controller
func WithBundleIdsAPIErrorHandler(h ErrorHandler) BundleIdsAPIOption {
	return func(c *BundleIdsAPIController) {
		c.errorHandler = h
	}
}

// NewBundleIdsAPIController creates a default api controller
func NewBundleIdsAPIController(s BundleIdsAPIServicer, opts ...BundleIdsAPIOption) Router {
	controller := &BundleIdsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BundleIdsAPIController
func (c *BundleIdsAPIController) Routes() Routes {
	return Routes{
		"BundleIdsAppGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/bundleIds/{id}/app",
			c.BundleIdsAppGetToOneRelated,
		},
		"BundleIdsBundleIdCapabilitiesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/bundleIds/{id}/bundleIdCapabilities",
			c.BundleIdsBundleIdCapabilitiesGetToManyRelated,
		},
		"BundleIdsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/bundleIds",
			c.BundleIdsCreateInstance,
		},
		"BundleIdsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/bundleIds/{id}",
			c.BundleIdsDeleteInstance,
		},
		"BundleIdsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/bundleIds",
			c.BundleIdsGetCollection,
		},
		"BundleIdsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/bundleIds/{id}",
			c.BundleIdsGetInstance,
		},
		"BundleIdsProfilesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/bundleIds/{id}/profiles",
			c.BundleIdsProfilesGetToManyRelated,
		},
		"BundleIdsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/bundleIds/{id}",
			c.BundleIdsUpdateInstance,
		},
	}
}

// BundleIdsAppGetToOneRelated - 
func (c *BundleIdsAPIController) BundleIdsAppGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BundleIdsAppGetToOneRelated(r.Context(), idParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsBundleIdCapabilitiesGetToManyRelated - 
func (c *BundleIdsAPIController) BundleIdsBundleIdCapabilitiesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBundleIdCapabilitiesParam []string
	if query.Has("fields[bundleIdCapabilities]") {
		fieldsBundleIdCapabilitiesParam = strings.Split(query.Get("fields[bundleIdCapabilities]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BundleIdsBundleIdCapabilitiesGetToManyRelated(r.Context(), idParam, fieldsBundleIdCapabilitiesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsCreateInstance - 
func (c *BundleIdsAPIController) BundleIdsCreateInstance(w http.ResponseWriter, r *http.Request) {
	bundleIdCreateRequestParam := BundleIdCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bundleIdCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBundleIdCreateRequestRequired(bundleIdCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBundleIdCreateRequestConstraints(bundleIdCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BundleIdsCreateInstance(r.Context(), bundleIdCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsDeleteInstance - 
func (c *BundleIdsAPIController) BundleIdsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.BundleIdsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsGetCollection - 
func (c *BundleIdsAPIController) BundleIdsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterIdentifierParam []string
	if query.Has("filter[identifier]") {
		filterIdentifierParam = strings.Split(query.Get("filter[identifier]"), ",")
	}
	var filterNameParam []string
	if query.Has("filter[name]") {
		filterNameParam = strings.Split(query.Get("filter[name]"), ",")
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterSeedIdParam []string
	if query.Has("filter[seedId]") {
		filterSeedIdParam = strings.Split(query.Get("filter[seedId]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsBundleIdsParam []string
	if query.Has("fields[bundleIds]") {
		fieldsBundleIdsParam = strings.Split(query.Get("fields[bundleIds]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBundleIdCapabilitiesParam []string
	if query.Has("fields[bundleIdCapabilities]") {
		fieldsBundleIdCapabilitiesParam = strings.Split(query.Get("fields[bundleIdCapabilities]"), ",")
	}
	var fieldsProfilesParam []string
	if query.Has("fields[profiles]") {
		fieldsProfilesParam = strings.Split(query.Get("fields[profiles]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBundleIdCapabilitiesParam int32
	if query.Has("limit[bundleIdCapabilities]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[bundleIdCapabilities]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBundleIdCapabilitiesParam = param
	} else {
	}
	var limitProfilesParam int32
	if query.Has("limit[profiles]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[profiles]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitProfilesParam = param
	} else {
	}
	result, err := c.service.BundleIdsGetCollection(r.Context(), filterIdentifierParam, filterNameParam, filterPlatformParam, filterSeedIdParam, filterIdParam, sortParam, fieldsBundleIdsParam, limitParam, includeParam, fieldsBundleIdCapabilitiesParam, fieldsProfilesParam, fieldsAppsParam, limitBundleIdCapabilitiesParam, limitProfilesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsGetInstance - 
func (c *BundleIdsAPIController) BundleIdsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBundleIdsParam []string
	if query.Has("fields[bundleIds]") {
		fieldsBundleIdsParam = strings.Split(query.Get("fields[bundleIds]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBundleIdCapabilitiesParam []string
	if query.Has("fields[bundleIdCapabilities]") {
		fieldsBundleIdCapabilitiesParam = strings.Split(query.Get("fields[bundleIdCapabilities]"), ",")
	}
	var fieldsProfilesParam []string
	if query.Has("fields[profiles]") {
		fieldsProfilesParam = strings.Split(query.Get("fields[profiles]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBundleIdCapabilitiesParam int32
	if query.Has("limit[bundleIdCapabilities]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[bundleIdCapabilities]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBundleIdCapabilitiesParam = param
	} else {
	}
	var limitProfilesParam int32
	if query.Has("limit[profiles]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[profiles]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitProfilesParam = param
	} else {
	}
	result, err := c.service.BundleIdsGetInstance(r.Context(), idParam, fieldsBundleIdsParam, includeParam, fieldsBundleIdCapabilitiesParam, fieldsProfilesParam, fieldsAppsParam, limitBundleIdCapabilitiesParam, limitProfilesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsProfilesGetToManyRelated - 
func (c *BundleIdsAPIController) BundleIdsProfilesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsProfilesParam []string
	if query.Has("fields[profiles]") {
		fieldsProfilesParam = strings.Split(query.Get("fields[profiles]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BundleIdsProfilesGetToManyRelated(r.Context(), idParam, fieldsProfilesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BundleIdsUpdateInstance - 
func (c *BundleIdsAPIController) BundleIdsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	bundleIdUpdateRequestParam := BundleIdUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bundleIdUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBundleIdUpdateRequestRequired(bundleIdUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBundleIdUpdateRequestConstraints(bundleIdUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BundleIdsUpdateInstance(r.Context(), idParam, bundleIdUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
