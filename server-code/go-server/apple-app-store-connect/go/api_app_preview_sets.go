/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppPreviewSetsAPIController binds http requests to an api service and writes the service results to the http response
type AppPreviewSetsAPIController struct {
	service AppPreviewSetsAPIServicer
	errorHandler ErrorHandler
}

// AppPreviewSetsAPIOption for how the controller is set up.
type AppPreviewSetsAPIOption func(*AppPreviewSetsAPIController)

// WithAppPreviewSetsAPIErrorHandler inject ErrorHandler into controller
func WithAppPreviewSetsAPIErrorHandler(h ErrorHandler) AppPreviewSetsAPIOption {
	return func(c *AppPreviewSetsAPIController) {
		c.errorHandler = h
	}
}

// NewAppPreviewSetsAPIController creates a default api controller
func NewAppPreviewSetsAPIController(s AppPreviewSetsAPIServicer, opts ...AppPreviewSetsAPIOption) Router {
	controller := &AppPreviewSetsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppPreviewSetsAPIController
func (c *AppPreviewSetsAPIController) Routes() Routes {
	return Routes{
		"AppPreviewSetsAppPreviewsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appPreviewSets/{id}/appPreviews",
			c.AppPreviewSetsAppPreviewsGetToManyRelated,
		},
		"AppPreviewSetsAppPreviewsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/appPreviewSets/{id}/relationships/appPreviews",
			c.AppPreviewSetsAppPreviewsGetToManyRelationship,
		},
		"AppPreviewSetsAppPreviewsReplaceToManyRelationship": Route{
			strings.ToUpper("Patch"),
			"/v1/appPreviewSets/{id}/relationships/appPreviews",
			c.AppPreviewSetsAppPreviewsReplaceToManyRelationship,
		},
		"AppPreviewSetsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appPreviewSets",
			c.AppPreviewSetsCreateInstance,
		},
		"AppPreviewSetsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appPreviewSets/{id}",
			c.AppPreviewSetsDeleteInstance,
		},
		"AppPreviewSetsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appPreviewSets/{id}",
			c.AppPreviewSetsGetInstance,
		},
	}
}

// AppPreviewSetsAppPreviewsGetToManyRelated - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsAppPreviewsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppPreviewsParam []string
	if query.Has("fields[appPreviews]") {
		fieldsAppPreviewsParam = strings.Split(query.Get("fields[appPreviews]"), ",")
	}
	var fieldsAppPreviewSetsParam []string
	if query.Has("fields[appPreviewSets]") {
		fieldsAppPreviewSetsParam = strings.Split(query.Get("fields[appPreviewSets]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppPreviewSetsAppPreviewsGetToManyRelated(r.Context(), idParam, fieldsAppPreviewsParam, fieldsAppPreviewSetsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppPreviewSetsAppPreviewsGetToManyRelationship - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsAppPreviewsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppPreviewSetsAppPreviewsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppPreviewSetsAppPreviewsReplaceToManyRelationship - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsAppPreviewsReplaceToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appPreviewSetAppPreviewsLinkagesRequestParam := AppPreviewSetAppPreviewsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appPreviewSetAppPreviewsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppPreviewSetAppPreviewsLinkagesRequestRequired(appPreviewSetAppPreviewsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppPreviewSetAppPreviewsLinkagesRequestConstraints(appPreviewSetAppPreviewsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppPreviewSetsAppPreviewsReplaceToManyRelationship(r.Context(), idParam, appPreviewSetAppPreviewsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppPreviewSetsCreateInstance - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsCreateInstance(w http.ResponseWriter, r *http.Request) {
	appPreviewSetCreateRequestParam := AppPreviewSetCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appPreviewSetCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppPreviewSetCreateRequestRequired(appPreviewSetCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppPreviewSetCreateRequestConstraints(appPreviewSetCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppPreviewSetsCreateInstance(r.Context(), appPreviewSetCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppPreviewSetsDeleteInstance - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppPreviewSetsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppPreviewSetsGetInstance - 
func (c *AppPreviewSetsAPIController) AppPreviewSetsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppPreviewSetsParam []string
	if query.Has("fields[appPreviewSets]") {
		fieldsAppPreviewSetsParam = strings.Split(query.Get("fields[appPreviewSets]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppPreviewsParam []string
	if query.Has("fields[appPreviews]") {
		fieldsAppPreviewsParam = strings.Split(query.Get("fields[appPreviews]"), ",")
	}
	var limitAppPreviewsParam int32
	if query.Has("limit[appPreviews]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appPreviews]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppPreviewsParam = param
	} else {
	}
	result, err := c.service.AppPreviewSetsGetInstance(r.Context(), idParam, fieldsAppPreviewSetsParam, includeParam, fieldsAppPreviewsParam, limitAppPreviewsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
