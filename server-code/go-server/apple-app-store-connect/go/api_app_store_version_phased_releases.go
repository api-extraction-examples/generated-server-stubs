/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppStoreVersionPhasedReleasesAPIController binds http requests to an api service and writes the service results to the http response
type AppStoreVersionPhasedReleasesAPIController struct {
	service AppStoreVersionPhasedReleasesAPIServicer
	errorHandler ErrorHandler
}

// AppStoreVersionPhasedReleasesAPIOption for how the controller is set up.
type AppStoreVersionPhasedReleasesAPIOption func(*AppStoreVersionPhasedReleasesAPIController)

// WithAppStoreVersionPhasedReleasesAPIErrorHandler inject ErrorHandler into controller
func WithAppStoreVersionPhasedReleasesAPIErrorHandler(h ErrorHandler) AppStoreVersionPhasedReleasesAPIOption {
	return func(c *AppStoreVersionPhasedReleasesAPIController) {
		c.errorHandler = h
	}
}

// NewAppStoreVersionPhasedReleasesAPIController creates a default api controller
func NewAppStoreVersionPhasedReleasesAPIController(s AppStoreVersionPhasedReleasesAPIServicer, opts ...AppStoreVersionPhasedReleasesAPIOption) Router {
	controller := &AppStoreVersionPhasedReleasesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppStoreVersionPhasedReleasesAPIController
func (c *AppStoreVersionPhasedReleasesAPIController) Routes() Routes {
	return Routes{
		"AppStoreVersionPhasedReleasesCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appStoreVersionPhasedReleases",
			c.AppStoreVersionPhasedReleasesCreateInstance,
		},
		"AppStoreVersionPhasedReleasesDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appStoreVersionPhasedReleases/{id}",
			c.AppStoreVersionPhasedReleasesDeleteInstance,
		},
		"AppStoreVersionPhasedReleasesUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appStoreVersionPhasedReleases/{id}",
			c.AppStoreVersionPhasedReleasesUpdateInstance,
		},
	}
}

// AppStoreVersionPhasedReleasesCreateInstance - 
func (c *AppStoreVersionPhasedReleasesAPIController) AppStoreVersionPhasedReleasesCreateInstance(w http.ResponseWriter, r *http.Request) {
	appStoreVersionPhasedReleaseCreateRequestParam := AppStoreVersionPhasedReleaseCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreVersionPhasedReleaseCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreVersionPhasedReleaseCreateRequestRequired(appStoreVersionPhasedReleaseCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreVersionPhasedReleaseCreateRequestConstraints(appStoreVersionPhasedReleaseCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreVersionPhasedReleasesCreateInstance(r.Context(), appStoreVersionPhasedReleaseCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionPhasedReleasesDeleteInstance - 
func (c *AppStoreVersionPhasedReleasesAPIController) AppStoreVersionPhasedReleasesDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppStoreVersionPhasedReleasesDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionPhasedReleasesUpdateInstance - 
func (c *AppStoreVersionPhasedReleasesAPIController) AppStoreVersionPhasedReleasesUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appStoreVersionPhasedReleaseUpdateRequestParam := AppStoreVersionPhasedReleaseUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreVersionPhasedReleaseUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreVersionPhasedReleaseUpdateRequestRequired(appStoreVersionPhasedReleaseUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreVersionPhasedReleaseUpdateRequestConstraints(appStoreVersionPhasedReleaseUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreVersionPhasedReleasesUpdateInstance(r.Context(), idParam, appStoreVersionPhasedReleaseUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
