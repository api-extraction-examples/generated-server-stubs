/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FinanceReportsAPIController binds http requests to an api service and writes the service results to the http response
type FinanceReportsAPIController struct {
	service FinanceReportsAPIServicer
	errorHandler ErrorHandler
}

// FinanceReportsAPIOption for how the controller is set up.
type FinanceReportsAPIOption func(*FinanceReportsAPIController)

// WithFinanceReportsAPIErrorHandler inject ErrorHandler into controller
func WithFinanceReportsAPIErrorHandler(h ErrorHandler) FinanceReportsAPIOption {
	return func(c *FinanceReportsAPIController) {
		c.errorHandler = h
	}
}

// NewFinanceReportsAPIController creates a default api controller
func NewFinanceReportsAPIController(s FinanceReportsAPIServicer, opts ...FinanceReportsAPIOption) Router {
	controller := &FinanceReportsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FinanceReportsAPIController
func (c *FinanceReportsAPIController) Routes() Routes {
	return Routes{
		"FinanceReportsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/financeReports",
			c.FinanceReportsGetCollection,
		},
	}
}

// FinanceReportsGetCollection - 
func (c *FinanceReportsAPIController) FinanceReportsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterRegionCodeParam []string
	if query.Has("filter[regionCode]") {
		filterRegionCodeParam = strings.Split(query.Get("filter[regionCode]"), ",")
	}
	var filterReportDateParam []string
	if query.Has("filter[reportDate]") {
		filterReportDateParam = strings.Split(query.Get("filter[reportDate]"), ",")
	}
	var filterReportTypeParam []string
	if query.Has("filter[reportType]") {
		filterReportTypeParam = strings.Split(query.Get("filter[reportType]"), ",")
	}
	var filterVendorNumberParam []string
	if query.Has("filter[vendorNumber]") {
		filterVendorNumberParam = strings.Split(query.Get("filter[vendorNumber]"), ",")
	}
	result, err := c.service.FinanceReportsGetCollection(r.Context(), filterRegionCodeParam, filterReportDateParam, filterReportTypeParam, filterVendorNumberParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
