/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ExternalBetaState string

// List of ExternalBetaState
const (
	PROCESSING ExternalBetaState = "PROCESSING"
	PROCESSING_EXCEPTION ExternalBetaState = "PROCESSING_EXCEPTION"
	MISSING_EXPORT_COMPLIANCE ExternalBetaState = "MISSING_EXPORT_COMPLIANCE"
	READY_FOR_BETA_TESTING ExternalBetaState = "READY_FOR_BETA_TESTING"
	IN_BETA_TESTING ExternalBetaState = "IN_BETA_TESTING"
	EXPIRED ExternalBetaState = "EXPIRED"
	READY_FOR_BETA_SUBMISSION ExternalBetaState = "READY_FOR_BETA_SUBMISSION"
	IN_EXPORT_COMPLIANCE_REVIEW ExternalBetaState = "IN_EXPORT_COMPLIANCE_REVIEW"
	WAITING_FOR_BETA_REVIEW ExternalBetaState = "WAITING_FOR_BETA_REVIEW"
	IN_BETA_REVIEW ExternalBetaState = "IN_BETA_REVIEW"
	BETA_REJECTED ExternalBetaState = "BETA_REJECTED"
	BETA_APPROVED ExternalBetaState = "BETA_APPROVED"
)

// AllowedExternalBetaStateEnumValues is all the allowed values of ExternalBetaState enum
var AllowedExternalBetaStateEnumValues = []ExternalBetaState{
	"PROCESSING",
	"PROCESSING_EXCEPTION",
	"MISSING_EXPORT_COMPLIANCE",
	"READY_FOR_BETA_TESTING",
	"IN_BETA_TESTING",
	"EXPIRED",
	"READY_FOR_BETA_SUBMISSION",
	"IN_EXPORT_COMPLIANCE_REVIEW",
	"WAITING_FOR_BETA_REVIEW",
	"IN_BETA_REVIEW",
	"BETA_REJECTED",
	"BETA_APPROVED",
}

// validExternalBetaStateEnumValue provides a map of ExternalBetaStates for fast verification of use input
var validExternalBetaStateEnumValues = map[ExternalBetaState]struct{}{
	"PROCESSING": {},
	"PROCESSING_EXCEPTION": {},
	"MISSING_EXPORT_COMPLIANCE": {},
	"READY_FOR_BETA_TESTING": {},
	"IN_BETA_TESTING": {},
	"EXPIRED": {},
	"READY_FOR_BETA_SUBMISSION": {},
	"IN_EXPORT_COMPLIANCE_REVIEW": {},
	"WAITING_FOR_BETA_REVIEW": {},
	"IN_BETA_REVIEW": {},
	"BETA_REJECTED": {},
	"BETA_APPROVED": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalBetaState) IsValid() bool {
	_, ok := validExternalBetaStateEnumValues[v]
	return ok
}

// NewExternalBetaStateFromValue returns a pointer to a valid ExternalBetaState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalBetaStateFromValue(v string) (ExternalBetaState, error) {
	ev := ExternalBetaState(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ExternalBetaState: valid values are %v", v, AllowedExternalBetaStateEnumValues)
	}
}



// AssertExternalBetaStateRequired checks if the required fields are not zero-ed
func AssertExternalBetaStateRequired(obj ExternalBetaState) error {
	return nil
}

// AssertExternalBetaStateConstraints checks if the values respects the defined constraints
func AssertExternalBetaStateConstraints(obj ExternalBetaState) error {
	return nil
}
