/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PreReleaseVersionsAPIController binds http requests to an api service and writes the service results to the http response
type PreReleaseVersionsAPIController struct {
	service PreReleaseVersionsAPIServicer
	errorHandler ErrorHandler
}

// PreReleaseVersionsAPIOption for how the controller is set up.
type PreReleaseVersionsAPIOption func(*PreReleaseVersionsAPIController)

// WithPreReleaseVersionsAPIErrorHandler inject ErrorHandler into controller
func WithPreReleaseVersionsAPIErrorHandler(h ErrorHandler) PreReleaseVersionsAPIOption {
	return func(c *PreReleaseVersionsAPIController) {
		c.errorHandler = h
	}
}

// NewPreReleaseVersionsAPIController creates a default api controller
func NewPreReleaseVersionsAPIController(s PreReleaseVersionsAPIServicer, opts ...PreReleaseVersionsAPIOption) Router {
	controller := &PreReleaseVersionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PreReleaseVersionsAPIController
func (c *PreReleaseVersionsAPIController) Routes() Routes {
	return Routes{
		"PreReleaseVersionsAppGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/preReleaseVersions/{id}/app",
			c.PreReleaseVersionsAppGetToOneRelated,
		},
		"PreReleaseVersionsBuildsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/preReleaseVersions/{id}/builds",
			c.PreReleaseVersionsBuildsGetToManyRelated,
		},
		"PreReleaseVersionsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/preReleaseVersions",
			c.PreReleaseVersionsGetCollection,
		},
		"PreReleaseVersionsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/preReleaseVersions/{id}",
			c.PreReleaseVersionsGetInstance,
		},
	}
}

// PreReleaseVersionsAppGetToOneRelated - 
func (c *PreReleaseVersionsAPIController) PreReleaseVersionsAppGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.PreReleaseVersionsAppGetToOneRelated(r.Context(), idParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PreReleaseVersionsBuildsGetToManyRelated - 
func (c *PreReleaseVersionsAPIController) PreReleaseVersionsBuildsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.PreReleaseVersionsBuildsGetToManyRelated(r.Context(), idParam, fieldsBuildsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PreReleaseVersionsGetCollection - 
func (c *PreReleaseVersionsAPIController) PreReleaseVersionsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterBuildsExpiredParam []string
	if query.Has("filter[builds.expired]") {
		filterBuildsExpiredParam = strings.Split(query.Get("filter[builds.expired]"), ",")
	}
	var filterBuildsProcessingStateParam []string
	if query.Has("filter[builds.processingState]") {
		filterBuildsProcessingStateParam = strings.Split(query.Get("filter[builds.processingState]"), ",")
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterVersionParam []string
	if query.Has("filter[version]") {
		filterVersionParam = strings.Split(query.Get("filter[version]"), ",")
	}
	var filterAppParam []string
	if query.Has("filter[app]") {
		filterAppParam = strings.Split(query.Get("filter[app]"), ",")
	}
	var filterBuildsParam []string
	if query.Has("filter[builds]") {
		filterBuildsParam = strings.Split(query.Get("filter[builds]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsPreReleaseVersionsParam []string
	if query.Has("fields[preReleaseVersions]") {
		fieldsPreReleaseVersionsParam = strings.Split(query.Get("fields[preReleaseVersions]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.PreReleaseVersionsGetCollection(r.Context(), filterBuildsExpiredParam, filterBuildsProcessingStateParam, filterPlatformParam, filterVersionParam, filterAppParam, filterBuildsParam, sortParam, fieldsPreReleaseVersionsParam, limitParam, includeParam, fieldsBuildsParam, fieldsAppsParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PreReleaseVersionsGetInstance - 
func (c *PreReleaseVersionsAPIController) PreReleaseVersionsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsPreReleaseVersionsParam []string
	if query.Has("fields[preReleaseVersions]") {
		fieldsPreReleaseVersionsParam = strings.Split(query.Get("fields[preReleaseVersions]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.PreReleaseVersionsGetInstance(r.Context(), idParam, fieldsPreReleaseVersionsParam, includeParam, fieldsBuildsParam, fieldsAppsParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
