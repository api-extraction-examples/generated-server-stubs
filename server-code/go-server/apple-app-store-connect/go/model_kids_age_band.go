/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type KidsAgeBand string

// List of KidsAgeBand
const (
	FIVE_AND_UNDER KidsAgeBand = "FIVE_AND_UNDER"
	SIX_TO_EIGHT KidsAgeBand = "SIX_TO_EIGHT"
	NINE_TO_ELEVEN KidsAgeBand = "NINE_TO_ELEVEN"
)

// AllowedKidsAgeBandEnumValues is all the allowed values of KidsAgeBand enum
var AllowedKidsAgeBandEnumValues = []KidsAgeBand{
	"FIVE_AND_UNDER",
	"SIX_TO_EIGHT",
	"NINE_TO_ELEVEN",
}

// validKidsAgeBandEnumValue provides a map of KidsAgeBands for fast verification of use input
var validKidsAgeBandEnumValues = map[KidsAgeBand]struct{}{
	"FIVE_AND_UNDER": {},
	"SIX_TO_EIGHT": {},
	"NINE_TO_ELEVEN": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KidsAgeBand) IsValid() bool {
	_, ok := validKidsAgeBandEnumValues[v]
	return ok
}

// NewKidsAgeBandFromValue returns a pointer to a valid KidsAgeBand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKidsAgeBandFromValue(v string) (KidsAgeBand, error) {
	ev := KidsAgeBand(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for KidsAgeBand: valid values are %v", v, AllowedKidsAgeBandEnumValues)
	}
}



// AssertKidsAgeBandRequired checks if the required fields are not zero-ed
func AssertKidsAgeBandRequired(obj KidsAgeBand) error {
	return nil
}

// AssertKidsAgeBandConstraints checks if the values respects the defined constraints
func AssertKidsAgeBandConstraints(obj KidsAgeBand) error {
	return nil
}
