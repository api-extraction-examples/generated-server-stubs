/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GameCenterEnabledVersionsAPIController binds http requests to an api service and writes the service results to the http response
type GameCenterEnabledVersionsAPIController struct {
	service GameCenterEnabledVersionsAPIServicer
	errorHandler ErrorHandler
}

// GameCenterEnabledVersionsAPIOption for how the controller is set up.
type GameCenterEnabledVersionsAPIOption func(*GameCenterEnabledVersionsAPIController)

// WithGameCenterEnabledVersionsAPIErrorHandler inject ErrorHandler into controller
func WithGameCenterEnabledVersionsAPIErrorHandler(h ErrorHandler) GameCenterEnabledVersionsAPIOption {
	return func(c *GameCenterEnabledVersionsAPIController) {
		c.errorHandler = h
	}
}

// NewGameCenterEnabledVersionsAPIController creates a default api controller
func NewGameCenterEnabledVersionsAPIController(s GameCenterEnabledVersionsAPIServicer, opts ...GameCenterEnabledVersionsAPIOption) Router {
	controller := &GameCenterEnabledVersionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GameCenterEnabledVersionsAPIController
func (c *GameCenterEnabledVersionsAPIController) Routes() Routes {
	return Routes{
		"GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
			c.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship,
		},
		"GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
			c.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship,
		},
		"GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/gameCenterEnabledVersions/{id}/compatibleVersions",
			c.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated,
		},
		"GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
			c.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship,
		},
		"GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship": Route{
			strings.ToUpper("Patch"),
			"/v1/gameCenterEnabledVersions/{id}/relationships/compatibleVersions",
			c.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship,
		},
	}
}

// GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship - 
func (c *GameCenterEnabledVersionsAPIController) GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam := GameCenterEnabledVersionCompatibleVersionsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestRequired(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestConstraints(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GameCenterEnabledVersionsCompatibleVersionsCreateToManyRelationship(r.Context(), idParam, gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship - 
func (c *GameCenterEnabledVersionsAPIController) GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam := GameCenterEnabledVersionCompatibleVersionsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestRequired(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestConstraints(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GameCenterEnabledVersionsCompatibleVersionsDeleteToManyRelationship(r.Context(), idParam, gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated - 
func (c *GameCenterEnabledVersionsAPIController) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterVersionStringParam []string
	if query.Has("filter[versionString]") {
		filterVersionStringParam = strings.Split(query.Get("filter[versionString]"), ",")
	}
	var filterAppParam []string
	if query.Has("filter[app]") {
		filterAppParam = strings.Split(query.Get("filter[app]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsGameCenterEnabledVersionsParam []string
	if query.Has("fields[gameCenterEnabledVersions]") {
		fieldsGameCenterEnabledVersionsParam = strings.Split(query.Get("fields[gameCenterEnabledVersions]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelated(r.Context(), idParam, filterPlatformParam, filterVersionStringParam, filterAppParam, filterIdParam, sortParam, fieldsGameCenterEnabledVersionsParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship - 
func (c *GameCenterEnabledVersionsAPIController) GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.GameCenterEnabledVersionsCompatibleVersionsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship - 
func (c *GameCenterEnabledVersionsAPIController) GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam := GameCenterEnabledVersionCompatibleVersionsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestRequired(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGameCenterEnabledVersionCompatibleVersionsLinkagesRequestConstraints(gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GameCenterEnabledVersionsCompatibleVersionsReplaceToManyRelationship(r.Context(), idParam, gameCenterEnabledVersionCompatibleVersionsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
