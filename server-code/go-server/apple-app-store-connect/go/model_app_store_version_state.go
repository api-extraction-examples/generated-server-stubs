/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type AppStoreVersionState string

// List of AppStoreVersionState
const (
	DEVELOPER_REMOVED_FROM_SALE AppStoreVersionState = "DEVELOPER_REMOVED_FROM_SALE"
	DEVELOPER_REJECTED AppStoreVersionState = "DEVELOPER_REJECTED"
	IN_REVIEW AppStoreVersionState = "IN_REVIEW"
	INVALID_BINARY AppStoreVersionState = "INVALID_BINARY"
	METADATA_REJECTED AppStoreVersionState = "METADATA_REJECTED"
	PENDING_APPLE_RELEASE AppStoreVersionState = "PENDING_APPLE_RELEASE"
	PENDING_CONTRACT AppStoreVersionState = "PENDING_CONTRACT"
	PENDING_DEVELOPER_RELEASE AppStoreVersionState = "PENDING_DEVELOPER_RELEASE"
	PREPARE_FOR_SUBMISSION AppStoreVersionState = "PREPARE_FOR_SUBMISSION"
	PREORDER_READY_FOR_SALE AppStoreVersionState = "PREORDER_READY_FOR_SALE"
	PROCESSING_FOR_APP_STORE AppStoreVersionState = "PROCESSING_FOR_APP_STORE"
	READY_FOR_SALE AppStoreVersionState = "READY_FOR_SALE"
	REJECTED AppStoreVersionState = "REJECTED"
	REMOVED_FROM_SALE AppStoreVersionState = "REMOVED_FROM_SALE"
	WAITING_FOR_EXPORT_COMPLIANCE AppStoreVersionState = "WAITING_FOR_EXPORT_COMPLIANCE"
	WAITING_FOR_REVIEW AppStoreVersionState = "WAITING_FOR_REVIEW"
	REPLACED_WITH_NEW_VERSION AppStoreVersionState = "REPLACED_WITH_NEW_VERSION"
)

// AllowedAppStoreVersionStateEnumValues is all the allowed values of AppStoreVersionState enum
var AllowedAppStoreVersionStateEnumValues = []AppStoreVersionState{
	"DEVELOPER_REMOVED_FROM_SALE",
	"DEVELOPER_REJECTED",
	"IN_REVIEW",
	"INVALID_BINARY",
	"METADATA_REJECTED",
	"PENDING_APPLE_RELEASE",
	"PENDING_CONTRACT",
	"PENDING_DEVELOPER_RELEASE",
	"PREPARE_FOR_SUBMISSION",
	"PREORDER_READY_FOR_SALE",
	"PROCESSING_FOR_APP_STORE",
	"READY_FOR_SALE",
	"REJECTED",
	"REMOVED_FROM_SALE",
	"WAITING_FOR_EXPORT_COMPLIANCE",
	"WAITING_FOR_REVIEW",
	"REPLACED_WITH_NEW_VERSION",
}

// validAppStoreVersionStateEnumValue provides a map of AppStoreVersionStates for fast verification of use input
var validAppStoreVersionStateEnumValues = map[AppStoreVersionState]struct{}{
	"DEVELOPER_REMOVED_FROM_SALE": {},
	"DEVELOPER_REJECTED": {},
	"IN_REVIEW": {},
	"INVALID_BINARY": {},
	"METADATA_REJECTED": {},
	"PENDING_APPLE_RELEASE": {},
	"PENDING_CONTRACT": {},
	"PENDING_DEVELOPER_RELEASE": {},
	"PREPARE_FOR_SUBMISSION": {},
	"PREORDER_READY_FOR_SALE": {},
	"PROCESSING_FOR_APP_STORE": {},
	"READY_FOR_SALE": {},
	"REJECTED": {},
	"REMOVED_FROM_SALE": {},
	"WAITING_FOR_EXPORT_COMPLIANCE": {},
	"WAITING_FOR_REVIEW": {},
	"REPLACED_WITH_NEW_VERSION": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppStoreVersionState) IsValid() bool {
	_, ok := validAppStoreVersionStateEnumValues[v]
	return ok
}

// NewAppStoreVersionStateFromValue returns a pointer to a valid AppStoreVersionState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppStoreVersionStateFromValue(v string) (AppStoreVersionState, error) {
	ev := AppStoreVersionState(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for AppStoreVersionState: valid values are %v", v, AllowedAppStoreVersionStateEnumValues)
	}
}



// AssertAppStoreVersionStateRequired checks if the required fields are not zero-ed
func AssertAppStoreVersionStateRequired(obj AppStoreVersionState) error {
	return nil
}

// AssertAppStoreVersionStateConstraints checks if the values respects the defined constraints
func AssertAppStoreVersionStateConstraints(obj AppStoreVersionState) error {
	return nil
}
