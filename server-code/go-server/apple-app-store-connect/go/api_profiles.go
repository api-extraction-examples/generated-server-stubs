/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProfilesAPIController binds http requests to an api service and writes the service results to the http response
type ProfilesAPIController struct {
	service ProfilesAPIServicer
	errorHandler ErrorHandler
}

// ProfilesAPIOption for how the controller is set up.
type ProfilesAPIOption func(*ProfilesAPIController)

// WithProfilesAPIErrorHandler inject ErrorHandler into controller
func WithProfilesAPIErrorHandler(h ErrorHandler) ProfilesAPIOption {
	return func(c *ProfilesAPIController) {
		c.errorHandler = h
	}
}

// NewProfilesAPIController creates a default api controller
func NewProfilesAPIController(s ProfilesAPIServicer, opts ...ProfilesAPIOption) Router {
	controller := &ProfilesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProfilesAPIController
func (c *ProfilesAPIController) Routes() Routes {
	return Routes{
		"ProfilesBundleIdGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/profiles/{id}/bundleId",
			c.ProfilesBundleIdGetToOneRelated,
		},
		"ProfilesCertificatesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/profiles/{id}/certificates",
			c.ProfilesCertificatesGetToManyRelated,
		},
		"ProfilesCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/profiles",
			c.ProfilesCreateInstance,
		},
		"ProfilesDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/profiles/{id}",
			c.ProfilesDeleteInstance,
		},
		"ProfilesDevicesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/profiles/{id}/devices",
			c.ProfilesDevicesGetToManyRelated,
		},
		"ProfilesGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/profiles",
			c.ProfilesGetCollection,
		},
		"ProfilesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/profiles/{id}",
			c.ProfilesGetInstance,
		},
	}
}

// ProfilesBundleIdGetToOneRelated - 
func (c *ProfilesAPIController) ProfilesBundleIdGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBundleIdsParam []string
	if query.Has("fields[bundleIds]") {
		fieldsBundleIdsParam = strings.Split(query.Get("fields[bundleIds]"), ",")
	}
	result, err := c.service.ProfilesBundleIdGetToOneRelated(r.Context(), idParam, fieldsBundleIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesCertificatesGetToManyRelated - 
func (c *ProfilesAPIController) ProfilesCertificatesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsCertificatesParam []string
	if query.Has("fields[certificates]") {
		fieldsCertificatesParam = strings.Split(query.Get("fields[certificates]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.ProfilesCertificatesGetToManyRelated(r.Context(), idParam, fieldsCertificatesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesCreateInstance - 
func (c *ProfilesAPIController) ProfilesCreateInstance(w http.ResponseWriter, r *http.Request) {
	profileCreateRequestParam := ProfileCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&profileCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProfileCreateRequestRequired(profileCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProfileCreateRequestConstraints(profileCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ProfilesCreateInstance(r.Context(), profileCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesDeleteInstance - 
func (c *ProfilesAPIController) ProfilesDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.ProfilesDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesDevicesGetToManyRelated - 
func (c *ProfilesAPIController) ProfilesDevicesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsDevicesParam []string
	if query.Has("fields[devices]") {
		fieldsDevicesParam = strings.Split(query.Get("fields[devices]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.ProfilesDevicesGetToManyRelated(r.Context(), idParam, fieldsDevicesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesGetCollection - 
func (c *ProfilesAPIController) ProfilesGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterNameParam []string
	if query.Has("filter[name]") {
		filterNameParam = strings.Split(query.Get("filter[name]"), ",")
	}
	var filterProfileStateParam []string
	if query.Has("filter[profileState]") {
		filterProfileStateParam = strings.Split(query.Get("filter[profileState]"), ",")
	}
	var filterProfileTypeParam []string
	if query.Has("filter[profileType]") {
		filterProfileTypeParam = strings.Split(query.Get("filter[profileType]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsProfilesParam []string
	if query.Has("fields[profiles]") {
		fieldsProfilesParam = strings.Split(query.Get("fields[profiles]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsCertificatesParam []string
	if query.Has("fields[certificates]") {
		fieldsCertificatesParam = strings.Split(query.Get("fields[certificates]"), ",")
	}
	var fieldsDevicesParam []string
	if query.Has("fields[devices]") {
		fieldsDevicesParam = strings.Split(query.Get("fields[devices]"), ",")
	}
	var fieldsBundleIdsParam []string
	if query.Has("fields[bundleIds]") {
		fieldsBundleIdsParam = strings.Split(query.Get("fields[bundleIds]"), ",")
	}
	var limitCertificatesParam int32
	if query.Has("limit[certificates]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[certificates]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitCertificatesParam = param
	} else {
	}
	var limitDevicesParam int32
	if query.Has("limit[devices]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[devices]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitDevicesParam = param
	} else {
	}
	result, err := c.service.ProfilesGetCollection(r.Context(), filterNameParam, filterProfileStateParam, filterProfileTypeParam, filterIdParam, sortParam, fieldsProfilesParam, limitParam, includeParam, fieldsCertificatesParam, fieldsDevicesParam, fieldsBundleIdsParam, limitCertificatesParam, limitDevicesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProfilesGetInstance - 
func (c *ProfilesAPIController) ProfilesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsProfilesParam []string
	if query.Has("fields[profiles]") {
		fieldsProfilesParam = strings.Split(query.Get("fields[profiles]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsCertificatesParam []string
	if query.Has("fields[certificates]") {
		fieldsCertificatesParam = strings.Split(query.Get("fields[certificates]"), ",")
	}
	var fieldsDevicesParam []string
	if query.Has("fields[devices]") {
		fieldsDevicesParam = strings.Split(query.Get("fields[devices]"), ",")
	}
	var fieldsBundleIdsParam []string
	if query.Has("fields[bundleIds]") {
		fieldsBundleIdsParam = strings.Split(query.Get("fields[bundleIds]"), ",")
	}
	var limitCertificatesParam int32
	if query.Has("limit[certificates]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[certificates]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitCertificatesParam = param
	} else {
	}
	var limitDevicesParam int32
	if query.Has("limit[devices]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[devices]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitDevicesParam = param
	} else {
	}
	result, err := c.service.ProfilesGetInstance(r.Context(), idParam, fieldsProfilesParam, includeParam, fieldsCertificatesParam, fieldsDevicesParam, fieldsBundleIdsParam, limitCertificatesParam, limitDevicesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
