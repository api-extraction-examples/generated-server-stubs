/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserInvitationsAPIController binds http requests to an api service and writes the service results to the http response
type UserInvitationsAPIController struct {
	service UserInvitationsAPIServicer
	errorHandler ErrorHandler
}

// UserInvitationsAPIOption for how the controller is set up.
type UserInvitationsAPIOption func(*UserInvitationsAPIController)

// WithUserInvitationsAPIErrorHandler inject ErrorHandler into controller
func WithUserInvitationsAPIErrorHandler(h ErrorHandler) UserInvitationsAPIOption {
	return func(c *UserInvitationsAPIController) {
		c.errorHandler = h
	}
}

// NewUserInvitationsAPIController creates a default api controller
func NewUserInvitationsAPIController(s UserInvitationsAPIServicer, opts ...UserInvitationsAPIOption) Router {
	controller := &UserInvitationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserInvitationsAPIController
func (c *UserInvitationsAPIController) Routes() Routes {
	return Routes{
		"UserInvitationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/userInvitations",
			c.UserInvitationsCreateInstance,
		},
		"UserInvitationsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/userInvitations/{id}",
			c.UserInvitationsDeleteInstance,
		},
		"UserInvitationsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/userInvitations",
			c.UserInvitationsGetCollection,
		},
		"UserInvitationsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/userInvitations/{id}",
			c.UserInvitationsGetInstance,
		},
		"UserInvitationsVisibleAppsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/userInvitations/{id}/visibleApps",
			c.UserInvitationsVisibleAppsGetToManyRelated,
		},
	}
}

// UserInvitationsCreateInstance - 
func (c *UserInvitationsAPIController) UserInvitationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	userInvitationCreateRequestParam := UserInvitationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserInvitationCreateRequestRequired(userInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserInvitationCreateRequestConstraints(userInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UserInvitationsCreateInstance(r.Context(), userInvitationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserInvitationsDeleteInstance - 
func (c *UserInvitationsAPIController) UserInvitationsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.UserInvitationsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserInvitationsGetCollection - 
func (c *UserInvitationsAPIController) UserInvitationsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterEmailParam []string
	if query.Has("filter[email]") {
		filterEmailParam = strings.Split(query.Get("filter[email]"), ",")
	}
	var filterRolesParam []string
	if query.Has("filter[roles]") {
		filterRolesParam = strings.Split(query.Get("filter[roles]"), ",")
	}
	var filterVisibleAppsParam []string
	if query.Has("filter[visibleApps]") {
		filterVisibleAppsParam = strings.Split(query.Get("filter[visibleApps]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsUserInvitationsParam []string
	if query.Has("fields[userInvitations]") {
		fieldsUserInvitationsParam = strings.Split(query.Get("fields[userInvitations]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitVisibleAppsParam int32
	if query.Has("limit[visibleApps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[visibleApps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitVisibleAppsParam = param
	} else {
	}
	result, err := c.service.UserInvitationsGetCollection(r.Context(), filterEmailParam, filterRolesParam, filterVisibleAppsParam, sortParam, fieldsUserInvitationsParam, limitParam, includeParam, fieldsAppsParam, limitVisibleAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserInvitationsGetInstance - 
func (c *UserInvitationsAPIController) UserInvitationsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsUserInvitationsParam []string
	if query.Has("fields[userInvitations]") {
		fieldsUserInvitationsParam = strings.Split(query.Get("fields[userInvitations]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitVisibleAppsParam int32
	if query.Has("limit[visibleApps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[visibleApps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitVisibleAppsParam = param
	} else {
	}
	result, err := c.service.UserInvitationsGetInstance(r.Context(), idParam, fieldsUserInvitationsParam, includeParam, fieldsAppsParam, limitVisibleAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UserInvitationsVisibleAppsGetToManyRelated - 
func (c *UserInvitationsAPIController) UserInvitationsVisibleAppsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.UserInvitationsVisibleAppsGetToManyRelated(r.Context(), idParam, fieldsAppsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
