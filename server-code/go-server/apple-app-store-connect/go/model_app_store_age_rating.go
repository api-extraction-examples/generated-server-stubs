/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type AppStoreAgeRating string

// List of AppStoreAgeRating
const (
	FOUR_PLUS AppStoreAgeRating = "FOUR_PLUS"
	NINE_PLUS AppStoreAgeRating = "NINE_PLUS"
	TWELVE_PLUS AppStoreAgeRating = "TWELVE_PLUS"
	SEVENTEEN_PLUS AppStoreAgeRating = "SEVENTEEN_PLUS"
)

// AllowedAppStoreAgeRatingEnumValues is all the allowed values of AppStoreAgeRating enum
var AllowedAppStoreAgeRatingEnumValues = []AppStoreAgeRating{
	"FOUR_PLUS",
	"NINE_PLUS",
	"TWELVE_PLUS",
	"SEVENTEEN_PLUS",
}

// validAppStoreAgeRatingEnumValue provides a map of AppStoreAgeRatings for fast verification of use input
var validAppStoreAgeRatingEnumValues = map[AppStoreAgeRating]struct{}{
	"FOUR_PLUS": {},
	"NINE_PLUS": {},
	"TWELVE_PLUS": {},
	"SEVENTEEN_PLUS": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AppStoreAgeRating) IsValid() bool {
	_, ok := validAppStoreAgeRatingEnumValues[v]
	return ok
}

// NewAppStoreAgeRatingFromValue returns a pointer to a valid AppStoreAgeRating
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAppStoreAgeRatingFromValue(v string) (AppStoreAgeRating, error) {
	ev := AppStoreAgeRating(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for AppStoreAgeRating: valid values are %v", v, AllowedAppStoreAgeRatingEnumValues)
	}
}



// AssertAppStoreAgeRatingRequired checks if the required fields are not zero-ed
func AssertAppStoreAgeRatingRequired(obj AppStoreAgeRating) error {
	return nil
}

// AssertAppStoreAgeRatingConstraints checks if the values respects the defined constraints
func AssertAppStoreAgeRatingConstraints(obj AppStoreAgeRating) error {
	return nil
}
