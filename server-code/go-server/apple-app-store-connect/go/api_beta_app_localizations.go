/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaAppLocalizationsAPIController binds http requests to an api service and writes the service results to the http response
type BetaAppLocalizationsAPIController struct {
	service BetaAppLocalizationsAPIServicer
	errorHandler ErrorHandler
}

// BetaAppLocalizationsAPIOption for how the controller is set up.
type BetaAppLocalizationsAPIOption func(*BetaAppLocalizationsAPIController)

// WithBetaAppLocalizationsAPIErrorHandler inject ErrorHandler into controller
func WithBetaAppLocalizationsAPIErrorHandler(h ErrorHandler) BetaAppLocalizationsAPIOption {
	return func(c *BetaAppLocalizationsAPIController) {
		c.errorHandler = h
	}
}

// NewBetaAppLocalizationsAPIController creates a default api controller
func NewBetaAppLocalizationsAPIController(s BetaAppLocalizationsAPIServicer, opts ...BetaAppLocalizationsAPIOption) Router {
	controller := &BetaAppLocalizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaAppLocalizationsAPIController
func (c *BetaAppLocalizationsAPIController) Routes() Routes {
	return Routes{
		"BetaAppLocalizationsAppGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppLocalizations/{id}/app",
			c.BetaAppLocalizationsAppGetToOneRelated,
		},
		"BetaAppLocalizationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/betaAppLocalizations",
			c.BetaAppLocalizationsCreateInstance,
		},
		"BetaAppLocalizationsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/betaAppLocalizations/{id}",
			c.BetaAppLocalizationsDeleteInstance,
		},
		"BetaAppLocalizationsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppLocalizations",
			c.BetaAppLocalizationsGetCollection,
		},
		"BetaAppLocalizationsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppLocalizations/{id}",
			c.BetaAppLocalizationsGetInstance,
		},
		"BetaAppLocalizationsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/betaAppLocalizations/{id}",
			c.BetaAppLocalizationsUpdateInstance,
		},
	}
}

// BetaAppLocalizationsAppGetToOneRelated - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsAppGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaAppLocalizationsAppGetToOneRelated(r.Context(), idParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppLocalizationsCreateInstance - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	betaAppLocalizationCreateRequestParam := BetaAppLocalizationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaAppLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaAppLocalizationCreateRequestRequired(betaAppLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaAppLocalizationCreateRequestConstraints(betaAppLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaAppLocalizationsCreateInstance(r.Context(), betaAppLocalizationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppLocalizationsDeleteInstance - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.BetaAppLocalizationsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppLocalizationsGetCollection - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterLocaleParam []string
	if query.Has("filter[locale]") {
		filterLocaleParam = strings.Split(query.Get("filter[locale]"), ",")
	}
	var filterAppParam []string
	if query.Has("filter[app]") {
		filterAppParam = strings.Split(query.Get("filter[app]"), ",")
	}
	var fieldsBetaAppLocalizationsParam []string
	if query.Has("fields[betaAppLocalizations]") {
		fieldsBetaAppLocalizationsParam = strings.Split(query.Get("fields[betaAppLocalizations]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaAppLocalizationsGetCollection(r.Context(), filterLocaleParam, filterAppParam, fieldsBetaAppLocalizationsParam, limitParam, includeParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppLocalizationsGetInstance - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaAppLocalizationsParam []string
	if query.Has("fields[betaAppLocalizations]") {
		fieldsBetaAppLocalizationsParam = strings.Split(query.Get("fields[betaAppLocalizations]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaAppLocalizationsGetInstance(r.Context(), idParam, fieldsBetaAppLocalizationsParam, includeParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppLocalizationsUpdateInstance - 
func (c *BetaAppLocalizationsAPIController) BetaAppLocalizationsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaAppLocalizationUpdateRequestParam := BetaAppLocalizationUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaAppLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaAppLocalizationUpdateRequestRequired(betaAppLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaAppLocalizationUpdateRequestConstraints(betaAppLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaAppLocalizationsUpdateInstance(r.Context(), idParam, betaAppLocalizationUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
