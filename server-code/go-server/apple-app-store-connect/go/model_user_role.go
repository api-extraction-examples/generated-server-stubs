/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type UserRole string

// List of UserRole
const (
	ADMIN UserRole = "ADMIN"
	FINANCE UserRole = "FINANCE"
	TECHNICAL UserRole = "TECHNICAL"
	ACCOUNT_HOLDER UserRole = "ACCOUNT_HOLDER"
	READ_ONLY UserRole = "READ_ONLY"
	SALES UserRole = "SALES"
	MARKETING UserRole = "MARKETING"
	APP_MANAGER UserRole = "APP_MANAGER"
	DEVELOPER UserRole = "DEVELOPER"
	ACCESS_TO_REPORTS UserRole = "ACCESS_TO_REPORTS"
	CUSTOMER_SUPPORT UserRole = "CUSTOMER_SUPPORT"
	CREATE_APPS UserRole = "CREATE_APPS"
	CLOUD_MANAGED_DEVELOPER_ID UserRole = "CLOUD_MANAGED_DEVELOPER_ID"
	CLOUD_MANAGED_APP_DISTRIBUTION UserRole = "CLOUD_MANAGED_APP_DISTRIBUTION"
)

// AllowedUserRoleEnumValues is all the allowed values of UserRole enum
var AllowedUserRoleEnumValues = []UserRole{
	"ADMIN",
	"FINANCE",
	"TECHNICAL",
	"ACCOUNT_HOLDER",
	"READ_ONLY",
	"SALES",
	"MARKETING",
	"APP_MANAGER",
	"DEVELOPER",
	"ACCESS_TO_REPORTS",
	"CUSTOMER_SUPPORT",
	"CREATE_APPS",
	"CLOUD_MANAGED_DEVELOPER_ID",
	"CLOUD_MANAGED_APP_DISTRIBUTION",
}

// validUserRoleEnumValue provides a map of UserRoles for fast verification of use input
var validUserRoleEnumValues = map[UserRole]struct{}{
	"ADMIN": {},
	"FINANCE": {},
	"TECHNICAL": {},
	"ACCOUNT_HOLDER": {},
	"READ_ONLY": {},
	"SALES": {},
	"MARKETING": {},
	"APP_MANAGER": {},
	"DEVELOPER": {},
	"ACCESS_TO_REPORTS": {},
	"CUSTOMER_SUPPORT": {},
	"CREATE_APPS": {},
	"CLOUD_MANAGED_DEVELOPER_ID": {},
	"CLOUD_MANAGED_APP_DISTRIBUTION": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v UserRole) IsValid() bool {
	_, ok := validUserRoleEnumValues[v]
	return ok
}

// NewUserRoleFromValue returns a pointer to a valid UserRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewUserRoleFromValue(v string) (UserRole, error) {
	ev := UserRole(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for UserRole: valid values are %v", v, AllowedUserRoleEnumValues)
	}
}



// AssertUserRoleRequired checks if the required fields are not zero-ed
func AssertUserRoleRequired(obj UserRole) error {
	return nil
}

// AssertUserRoleConstraints checks if the values respects the defined constraints
func AssertUserRoleConstraints(obj UserRole) error {
	return nil
}
