/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TerritoriesAPIController binds http requests to an api service and writes the service results to the http response
type TerritoriesAPIController struct {
	service TerritoriesAPIServicer
	errorHandler ErrorHandler
}

// TerritoriesAPIOption for how the controller is set up.
type TerritoriesAPIOption func(*TerritoriesAPIController)

// WithTerritoriesAPIErrorHandler inject ErrorHandler into controller
func WithTerritoriesAPIErrorHandler(h ErrorHandler) TerritoriesAPIOption {
	return func(c *TerritoriesAPIController) {
		c.errorHandler = h
	}
}

// NewTerritoriesAPIController creates a default api controller
func NewTerritoriesAPIController(s TerritoriesAPIServicer, opts ...TerritoriesAPIOption) Router {
	controller := &TerritoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TerritoriesAPIController
func (c *TerritoriesAPIController) Routes() Routes {
	return Routes{
		"TerritoriesGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/territories",
			c.TerritoriesGetCollection,
		},
	}
}

// TerritoriesGetCollection - 
func (c *TerritoriesAPIController) TerritoriesGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var fieldsTerritoriesParam []string
	if query.Has("fields[territories]") {
		fieldsTerritoriesParam = strings.Split(query.Get("fields[territories]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.TerritoriesGetCollection(r.Context(), fieldsTerritoriesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
