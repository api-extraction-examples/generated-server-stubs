/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// IdfaDeclarationsAPIController binds http requests to an api service and writes the service results to the http response
type IdfaDeclarationsAPIController struct {
	service IdfaDeclarationsAPIServicer
	errorHandler ErrorHandler
}

// IdfaDeclarationsAPIOption for how the controller is set up.
type IdfaDeclarationsAPIOption func(*IdfaDeclarationsAPIController)

// WithIdfaDeclarationsAPIErrorHandler inject ErrorHandler into controller
func WithIdfaDeclarationsAPIErrorHandler(h ErrorHandler) IdfaDeclarationsAPIOption {
	return func(c *IdfaDeclarationsAPIController) {
		c.errorHandler = h
	}
}

// NewIdfaDeclarationsAPIController creates a default api controller
func NewIdfaDeclarationsAPIController(s IdfaDeclarationsAPIServicer, opts ...IdfaDeclarationsAPIOption) Router {
	controller := &IdfaDeclarationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the IdfaDeclarationsAPIController
func (c *IdfaDeclarationsAPIController) Routes() Routes {
	return Routes{
		"IdfaDeclarationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/idfaDeclarations",
			c.IdfaDeclarationsCreateInstance,
		},
		"IdfaDeclarationsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/idfaDeclarations/{id}",
			c.IdfaDeclarationsDeleteInstance,
		},
		"IdfaDeclarationsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/idfaDeclarations/{id}",
			c.IdfaDeclarationsUpdateInstance,
		},
	}
}

// IdfaDeclarationsCreateInstance - 
func (c *IdfaDeclarationsAPIController) IdfaDeclarationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	idfaDeclarationCreateRequestParam := IdfaDeclarationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&idfaDeclarationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdfaDeclarationCreateRequestRequired(idfaDeclarationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdfaDeclarationCreateRequestConstraints(idfaDeclarationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IdfaDeclarationsCreateInstance(r.Context(), idfaDeclarationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IdfaDeclarationsDeleteInstance - 
func (c *IdfaDeclarationsAPIController) IdfaDeclarationsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.IdfaDeclarationsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// IdfaDeclarationsUpdateInstance - 
func (c *IdfaDeclarationsAPIController) IdfaDeclarationsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	idfaDeclarationUpdateRequestParam := IdfaDeclarationUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&idfaDeclarationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIdfaDeclarationUpdateRequestRequired(idfaDeclarationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIdfaDeclarationUpdateRequestConstraints(idfaDeclarationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.IdfaDeclarationsUpdateInstance(r.Context(), idParam, idfaDeclarationUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
