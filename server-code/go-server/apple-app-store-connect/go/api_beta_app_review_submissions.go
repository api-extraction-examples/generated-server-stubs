/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaAppReviewSubmissionsAPIController binds http requests to an api service and writes the service results to the http response
type BetaAppReviewSubmissionsAPIController struct {
	service BetaAppReviewSubmissionsAPIServicer
	errorHandler ErrorHandler
}

// BetaAppReviewSubmissionsAPIOption for how the controller is set up.
type BetaAppReviewSubmissionsAPIOption func(*BetaAppReviewSubmissionsAPIController)

// WithBetaAppReviewSubmissionsAPIErrorHandler inject ErrorHandler into controller
func WithBetaAppReviewSubmissionsAPIErrorHandler(h ErrorHandler) BetaAppReviewSubmissionsAPIOption {
	return func(c *BetaAppReviewSubmissionsAPIController) {
		c.errorHandler = h
	}
}

// NewBetaAppReviewSubmissionsAPIController creates a default api controller
func NewBetaAppReviewSubmissionsAPIController(s BetaAppReviewSubmissionsAPIServicer, opts ...BetaAppReviewSubmissionsAPIOption) Router {
	controller := &BetaAppReviewSubmissionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaAppReviewSubmissionsAPIController
func (c *BetaAppReviewSubmissionsAPIController) Routes() Routes {
	return Routes{
		"BetaAppReviewSubmissionsBuildGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppReviewSubmissions/{id}/build",
			c.BetaAppReviewSubmissionsBuildGetToOneRelated,
		},
		"BetaAppReviewSubmissionsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/betaAppReviewSubmissions",
			c.BetaAppReviewSubmissionsCreateInstance,
		},
		"BetaAppReviewSubmissionsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppReviewSubmissions",
			c.BetaAppReviewSubmissionsGetCollection,
		},
		"BetaAppReviewSubmissionsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/betaAppReviewSubmissions/{id}",
			c.BetaAppReviewSubmissionsGetInstance,
		},
	}
}

// BetaAppReviewSubmissionsBuildGetToOneRelated - 
func (c *BetaAppReviewSubmissionsAPIController) BetaAppReviewSubmissionsBuildGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BetaAppReviewSubmissionsBuildGetToOneRelated(r.Context(), idParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppReviewSubmissionsCreateInstance - 
func (c *BetaAppReviewSubmissionsAPIController) BetaAppReviewSubmissionsCreateInstance(w http.ResponseWriter, r *http.Request) {
	betaAppReviewSubmissionCreateRequestParam := BetaAppReviewSubmissionCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaAppReviewSubmissionCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaAppReviewSubmissionCreateRequestRequired(betaAppReviewSubmissionCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaAppReviewSubmissionCreateRequestConstraints(betaAppReviewSubmissionCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaAppReviewSubmissionsCreateInstance(r.Context(), betaAppReviewSubmissionCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppReviewSubmissionsGetCollection - 
func (c *BetaAppReviewSubmissionsAPIController) BetaAppReviewSubmissionsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterBuildParam []string
	if query.Has("filter[build]") {
		filterBuildParam = strings.Split(query.Get("filter[build]"), ",")
	}
	var filterBetaReviewStateParam []string
	if query.Has("filter[betaReviewState]") {
		filterBetaReviewStateParam = strings.Split(query.Get("filter[betaReviewState]"), ",")
	}
	var fieldsBetaAppReviewSubmissionsParam []string
	if query.Has("fields[betaAppReviewSubmissions]") {
		fieldsBetaAppReviewSubmissionsParam = strings.Split(query.Get("fields[betaAppReviewSubmissions]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BetaAppReviewSubmissionsGetCollection(r.Context(), filterBuildParam, filterBetaReviewStateParam, fieldsBetaAppReviewSubmissionsParam, limitParam, includeParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaAppReviewSubmissionsGetInstance - 
func (c *BetaAppReviewSubmissionsAPIController) BetaAppReviewSubmissionsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaAppReviewSubmissionsParam []string
	if query.Has("fields[betaAppReviewSubmissions]") {
		fieldsBetaAppReviewSubmissionsParam = strings.Split(query.Get("fields[betaAppReviewSubmissions]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BetaAppReviewSubmissionsGetInstance(r.Context(), idParam, fieldsBetaAppReviewSubmissionsParam, includeParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
