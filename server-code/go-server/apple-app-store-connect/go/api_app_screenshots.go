/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppScreenshotsAPIController binds http requests to an api service and writes the service results to the http response
type AppScreenshotsAPIController struct {
	service AppScreenshotsAPIServicer
	errorHandler ErrorHandler
}

// AppScreenshotsAPIOption for how the controller is set up.
type AppScreenshotsAPIOption func(*AppScreenshotsAPIController)

// WithAppScreenshotsAPIErrorHandler inject ErrorHandler into controller
func WithAppScreenshotsAPIErrorHandler(h ErrorHandler) AppScreenshotsAPIOption {
	return func(c *AppScreenshotsAPIController) {
		c.errorHandler = h
	}
}

// NewAppScreenshotsAPIController creates a default api controller
func NewAppScreenshotsAPIController(s AppScreenshotsAPIServicer, opts ...AppScreenshotsAPIOption) Router {
	controller := &AppScreenshotsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppScreenshotsAPIController
func (c *AppScreenshotsAPIController) Routes() Routes {
	return Routes{
		"AppScreenshotsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appScreenshots",
			c.AppScreenshotsCreateInstance,
		},
		"AppScreenshotsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appScreenshots/{id}",
			c.AppScreenshotsDeleteInstance,
		},
		"AppScreenshotsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appScreenshots/{id}",
			c.AppScreenshotsGetInstance,
		},
		"AppScreenshotsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appScreenshots/{id}",
			c.AppScreenshotsUpdateInstance,
		},
	}
}

// AppScreenshotsCreateInstance - 
func (c *AppScreenshotsAPIController) AppScreenshotsCreateInstance(w http.ResponseWriter, r *http.Request) {
	appScreenshotCreateRequestParam := AppScreenshotCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appScreenshotCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppScreenshotCreateRequestRequired(appScreenshotCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppScreenshotCreateRequestConstraints(appScreenshotCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppScreenshotsCreateInstance(r.Context(), appScreenshotCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppScreenshotsDeleteInstance - 
func (c *AppScreenshotsAPIController) AppScreenshotsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppScreenshotsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppScreenshotsGetInstance - 
func (c *AppScreenshotsAPIController) AppScreenshotsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppScreenshotsParam []string
	if query.Has("fields[appScreenshots]") {
		fieldsAppScreenshotsParam = strings.Split(query.Get("fields[appScreenshots]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppScreenshotsGetInstance(r.Context(), idParam, fieldsAppScreenshotsParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppScreenshotsUpdateInstance - 
func (c *AppScreenshotsAPIController) AppScreenshotsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appScreenshotUpdateRequestParam := AppScreenshotUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appScreenshotUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppScreenshotUpdateRequestRequired(appScreenshotUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppScreenshotUpdateRequestConstraints(appScreenshotUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppScreenshotsUpdateInstance(r.Context(), idParam, appScreenshotUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
