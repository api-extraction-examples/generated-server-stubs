/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppStoreVersionLocalizationsAPIController binds http requests to an api service and writes the service results to the http response
type AppStoreVersionLocalizationsAPIController struct {
	service AppStoreVersionLocalizationsAPIServicer
	errorHandler ErrorHandler
}

// AppStoreVersionLocalizationsAPIOption for how the controller is set up.
type AppStoreVersionLocalizationsAPIOption func(*AppStoreVersionLocalizationsAPIController)

// WithAppStoreVersionLocalizationsAPIErrorHandler inject ErrorHandler into controller
func WithAppStoreVersionLocalizationsAPIErrorHandler(h ErrorHandler) AppStoreVersionLocalizationsAPIOption {
	return func(c *AppStoreVersionLocalizationsAPIController) {
		c.errorHandler = h
	}
}

// NewAppStoreVersionLocalizationsAPIController creates a default api controller
func NewAppStoreVersionLocalizationsAPIController(s AppStoreVersionLocalizationsAPIServicer, opts ...AppStoreVersionLocalizationsAPIOption) Router {
	controller := &AppStoreVersionLocalizationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppStoreVersionLocalizationsAPIController
func (c *AppStoreVersionLocalizationsAPIController) Routes() Routes {
	return Routes{
		"AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appStoreVersionLocalizations/{id}/appPreviewSets",
			c.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated,
		},
		"AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appStoreVersionLocalizations/{id}/appScreenshotSets",
			c.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated,
		},
		"AppStoreVersionLocalizationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appStoreVersionLocalizations",
			c.AppStoreVersionLocalizationsCreateInstance,
		},
		"AppStoreVersionLocalizationsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appStoreVersionLocalizations/{id}",
			c.AppStoreVersionLocalizationsDeleteInstance,
		},
		"AppStoreVersionLocalizationsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appStoreVersionLocalizations/{id}",
			c.AppStoreVersionLocalizationsGetInstance,
		},
		"AppStoreVersionLocalizationsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appStoreVersionLocalizations/{id}",
			c.AppStoreVersionLocalizationsUpdateInstance,
		},
	}
}

// AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterPreviewTypeParam []string
	if query.Has("filter[previewType]") {
		filterPreviewTypeParam = strings.Split(query.Get("filter[previewType]"), ",")
	}
	var fieldsAppStoreVersionLocalizationsParam []string
	if query.Has("fields[appStoreVersionLocalizations]") {
		fieldsAppStoreVersionLocalizationsParam = strings.Split(query.Get("fields[appStoreVersionLocalizations]"), ",")
	}
	var fieldsAppPreviewsParam []string
	if query.Has("fields[appPreviews]") {
		fieldsAppPreviewsParam = strings.Split(query.Get("fields[appPreviews]"), ",")
	}
	var fieldsAppPreviewSetsParam []string
	if query.Has("fields[appPreviewSets]") {
		fieldsAppPreviewSetsParam = strings.Split(query.Get("fields[appPreviewSets]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppStoreVersionLocalizationsAppPreviewSetsGetToManyRelated(r.Context(), idParam, filterPreviewTypeParam, fieldsAppStoreVersionLocalizationsParam, fieldsAppPreviewsParam, fieldsAppPreviewSetsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterScreenshotDisplayTypeParam []string
	if query.Has("filter[screenshotDisplayType]") {
		filterScreenshotDisplayTypeParam = strings.Split(query.Get("filter[screenshotDisplayType]"), ",")
	}
	var fieldsAppStoreVersionLocalizationsParam []string
	if query.Has("fields[appStoreVersionLocalizations]") {
		fieldsAppStoreVersionLocalizationsParam = strings.Split(query.Get("fields[appStoreVersionLocalizations]"), ",")
	}
	var fieldsAppScreenshotSetsParam []string
	if query.Has("fields[appScreenshotSets]") {
		fieldsAppScreenshotSetsParam = strings.Split(query.Get("fields[appScreenshotSets]"), ",")
	}
	var fieldsAppScreenshotsParam []string
	if query.Has("fields[appScreenshots]") {
		fieldsAppScreenshotsParam = strings.Split(query.Get("fields[appScreenshots]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppStoreVersionLocalizationsAppScreenshotSetsGetToManyRelated(r.Context(), idParam, filterScreenshotDisplayTypeParam, fieldsAppStoreVersionLocalizationsParam, fieldsAppScreenshotSetsParam, fieldsAppScreenshotsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionLocalizationsCreateInstance - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	appStoreVersionLocalizationCreateRequestParam := AppStoreVersionLocalizationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreVersionLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreVersionLocalizationCreateRequestRequired(appStoreVersionLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreVersionLocalizationCreateRequestConstraints(appStoreVersionLocalizationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreVersionLocalizationsCreateInstance(r.Context(), appStoreVersionLocalizationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionLocalizationsDeleteInstance - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppStoreVersionLocalizationsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionLocalizationsGetInstance - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppStoreVersionLocalizationsParam []string
	if query.Has("fields[appStoreVersionLocalizations]") {
		fieldsAppStoreVersionLocalizationsParam = strings.Split(query.Get("fields[appStoreVersionLocalizations]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppScreenshotSetsParam []string
	if query.Has("fields[appScreenshotSets]") {
		fieldsAppScreenshotSetsParam = strings.Split(query.Get("fields[appScreenshotSets]"), ",")
	}
	var fieldsAppPreviewSetsParam []string
	if query.Has("fields[appPreviewSets]") {
		fieldsAppPreviewSetsParam = strings.Split(query.Get("fields[appPreviewSets]"), ",")
	}
	var limitAppPreviewSetsParam int32
	if query.Has("limit[appPreviewSets]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appPreviewSets]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppPreviewSetsParam = param
	} else {
	}
	var limitAppScreenshotSetsParam int32
	if query.Has("limit[appScreenshotSets]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appScreenshotSets]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppScreenshotSetsParam = param
	} else {
	}
	result, err := c.service.AppStoreVersionLocalizationsGetInstance(r.Context(), idParam, fieldsAppStoreVersionLocalizationsParam, includeParam, fieldsAppScreenshotSetsParam, fieldsAppPreviewSetsParam, limitAppPreviewSetsParam, limitAppScreenshotSetsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreVersionLocalizationsUpdateInstance - 
func (c *AppStoreVersionLocalizationsAPIController) AppStoreVersionLocalizationsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appStoreVersionLocalizationUpdateRequestParam := AppStoreVersionLocalizationUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreVersionLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreVersionLocalizationUpdateRequestRequired(appStoreVersionLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreVersionLocalizationUpdateRequestConstraints(appStoreVersionLocalizationUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreVersionLocalizationsUpdateInstance(r.Context(), idParam, appStoreVersionLocalizationUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
