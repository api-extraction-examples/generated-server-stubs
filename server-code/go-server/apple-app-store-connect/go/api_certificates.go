/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CertificatesAPIController binds http requests to an api service and writes the service results to the http response
type CertificatesAPIController struct {
	service CertificatesAPIServicer
	errorHandler ErrorHandler
}

// CertificatesAPIOption for how the controller is set up.
type CertificatesAPIOption func(*CertificatesAPIController)

// WithCertificatesAPIErrorHandler inject ErrorHandler into controller
func WithCertificatesAPIErrorHandler(h ErrorHandler) CertificatesAPIOption {
	return func(c *CertificatesAPIController) {
		c.errorHandler = h
	}
}

// NewCertificatesAPIController creates a default api controller
func NewCertificatesAPIController(s CertificatesAPIServicer, opts ...CertificatesAPIOption) Router {
	controller := &CertificatesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CertificatesAPIController
func (c *CertificatesAPIController) Routes() Routes {
	return Routes{
		"CertificatesCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/certificates",
			c.CertificatesCreateInstance,
		},
		"CertificatesDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/certificates/{id}",
			c.CertificatesDeleteInstance,
		},
		"CertificatesGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/certificates",
			c.CertificatesGetCollection,
		},
		"CertificatesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/certificates/{id}",
			c.CertificatesGetInstance,
		},
	}
}

// CertificatesCreateInstance - 
func (c *CertificatesAPIController) CertificatesCreateInstance(w http.ResponseWriter, r *http.Request) {
	certificateCreateRequestParam := CertificateCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&certificateCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCertificateCreateRequestRequired(certificateCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCertificateCreateRequestConstraints(certificateCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CertificatesCreateInstance(r.Context(), certificateCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CertificatesDeleteInstance - 
func (c *CertificatesAPIController) CertificatesDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.CertificatesDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CertificatesGetCollection - 
func (c *CertificatesAPIController) CertificatesGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterCertificateTypeParam []string
	if query.Has("filter[certificateType]") {
		filterCertificateTypeParam = strings.Split(query.Get("filter[certificateType]"), ",")
	}
	var filterDisplayNameParam []string
	if query.Has("filter[displayName]") {
		filterDisplayNameParam = strings.Split(query.Get("filter[displayName]"), ",")
	}
	var filterSerialNumberParam []string
	if query.Has("filter[serialNumber]") {
		filterSerialNumberParam = strings.Split(query.Get("filter[serialNumber]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsCertificatesParam []string
	if query.Has("fields[certificates]") {
		fieldsCertificatesParam = strings.Split(query.Get("fields[certificates]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.CertificatesGetCollection(r.Context(), filterCertificateTypeParam, filterDisplayNameParam, filterSerialNumberParam, filterIdParam, sortParam, fieldsCertificatesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CertificatesGetInstance - 
func (c *CertificatesAPIController) CertificatesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsCertificatesParam []string
	if query.Has("fields[certificates]") {
		fieldsCertificatesParam = strings.Split(query.Get("fields[certificates]"), ",")
	}
	result, err := c.service.CertificatesGetInstance(r.Context(), idParam, fieldsCertificatesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
