/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BuildBetaDetailsAPIController binds http requests to an api service and writes the service results to the http response
type BuildBetaDetailsAPIController struct {
	service BuildBetaDetailsAPIServicer
	errorHandler ErrorHandler
}

// BuildBetaDetailsAPIOption for how the controller is set up.
type BuildBetaDetailsAPIOption func(*BuildBetaDetailsAPIController)

// WithBuildBetaDetailsAPIErrorHandler inject ErrorHandler into controller
func WithBuildBetaDetailsAPIErrorHandler(h ErrorHandler) BuildBetaDetailsAPIOption {
	return func(c *BuildBetaDetailsAPIController) {
		c.errorHandler = h
	}
}

// NewBuildBetaDetailsAPIController creates a default api controller
func NewBuildBetaDetailsAPIController(s BuildBetaDetailsAPIServicer, opts ...BuildBetaDetailsAPIOption) Router {
	controller := &BuildBetaDetailsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BuildBetaDetailsAPIController
func (c *BuildBetaDetailsAPIController) Routes() Routes {
	return Routes{
		"BuildBetaDetailsBuildGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/buildBetaDetails/{id}/build",
			c.BuildBetaDetailsBuildGetToOneRelated,
		},
		"BuildBetaDetailsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/buildBetaDetails",
			c.BuildBetaDetailsGetCollection,
		},
		"BuildBetaDetailsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/buildBetaDetails/{id}",
			c.BuildBetaDetailsGetInstance,
		},
		"BuildBetaDetailsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/buildBetaDetails/{id}",
			c.BuildBetaDetailsUpdateInstance,
		},
	}
}

// BuildBetaDetailsBuildGetToOneRelated - 
func (c *BuildBetaDetailsAPIController) BuildBetaDetailsBuildGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BuildBetaDetailsBuildGetToOneRelated(r.Context(), idParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildBetaDetailsGetCollection - 
func (c *BuildBetaDetailsAPIController) BuildBetaDetailsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterBuildParam []string
	if query.Has("filter[build]") {
		filterBuildParam = strings.Split(query.Get("filter[build]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var fieldsBuildBetaDetailsParam []string
	if query.Has("fields[buildBetaDetails]") {
		fieldsBuildBetaDetailsParam = strings.Split(query.Get("fields[buildBetaDetails]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BuildBetaDetailsGetCollection(r.Context(), filterBuildParam, filterIdParam, fieldsBuildBetaDetailsParam, limitParam, includeParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildBetaDetailsGetInstance - 
func (c *BuildBetaDetailsAPIController) BuildBetaDetailsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildBetaDetailsParam []string
	if query.Has("fields[buildBetaDetails]") {
		fieldsBuildBetaDetailsParam = strings.Split(query.Get("fields[buildBetaDetails]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	result, err := c.service.BuildBetaDetailsGetInstance(r.Context(), idParam, fieldsBuildBetaDetailsParam, includeParam, fieldsBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BuildBetaDetailsUpdateInstance - 
func (c *BuildBetaDetailsAPIController) BuildBetaDetailsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	buildBetaDetailUpdateRequestParam := BuildBetaDetailUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&buildBetaDetailUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBuildBetaDetailUpdateRequestRequired(buildBetaDetailUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBuildBetaDetailUpdateRequestConstraints(buildBetaDetailUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BuildBetaDetailsUpdateInstance(r.Context(), idParam, buildBetaDetailUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
