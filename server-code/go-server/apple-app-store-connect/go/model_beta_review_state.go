/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type BetaReviewState string

// List of BetaReviewState
const (
	WAITING_FOR_REVIEW BetaReviewState = "WAITING_FOR_REVIEW"
	IN_REVIEW BetaReviewState = "IN_REVIEW"
	REJECTED BetaReviewState = "REJECTED"
	APPROVED BetaReviewState = "APPROVED"
)

// AllowedBetaReviewStateEnumValues is all the allowed values of BetaReviewState enum
var AllowedBetaReviewStateEnumValues = []BetaReviewState{
	"WAITING_FOR_REVIEW",
	"IN_REVIEW",
	"REJECTED",
	"APPROVED",
}

// validBetaReviewStateEnumValue provides a map of BetaReviewStates for fast verification of use input
var validBetaReviewStateEnumValues = map[BetaReviewState]struct{}{
	"WAITING_FOR_REVIEW": {},
	"IN_REVIEW": {},
	"REJECTED": {},
	"APPROVED": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BetaReviewState) IsValid() bool {
	_, ok := validBetaReviewStateEnumValues[v]
	return ok
}

// NewBetaReviewStateFromValue returns a pointer to a valid BetaReviewState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBetaReviewStateFromValue(v string) (BetaReviewState, error) {
	ev := BetaReviewState(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for BetaReviewState: valid values are %v", v, AllowedBetaReviewStateEnumValues)
	}
}



// AssertBetaReviewStateRequired checks if the required fields are not zero-ed
func AssertBetaReviewStateRequired(obj BetaReviewState) error {
	return nil
}

// AssertBetaReviewStateConstraints checks if the values respects the defined constraints
func AssertBetaReviewStateConstraints(obj BetaReviewState) error {
	return nil
}
