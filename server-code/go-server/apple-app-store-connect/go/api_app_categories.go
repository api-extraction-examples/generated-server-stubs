/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppCategoriesAPIController binds http requests to an api service and writes the service results to the http response
type AppCategoriesAPIController struct {
	service AppCategoriesAPIServicer
	errorHandler ErrorHandler
}

// AppCategoriesAPIOption for how the controller is set up.
type AppCategoriesAPIOption func(*AppCategoriesAPIController)

// WithAppCategoriesAPIErrorHandler inject ErrorHandler into controller
func WithAppCategoriesAPIErrorHandler(h ErrorHandler) AppCategoriesAPIOption {
	return func(c *AppCategoriesAPIController) {
		c.errorHandler = h
	}
}

// NewAppCategoriesAPIController creates a default api controller
func NewAppCategoriesAPIController(s AppCategoriesAPIServicer, opts ...AppCategoriesAPIOption) Router {
	controller := &AppCategoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppCategoriesAPIController
func (c *AppCategoriesAPIController) Routes() Routes {
	return Routes{
		"AppCategoriesGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/appCategories",
			c.AppCategoriesGetCollection,
		},
		"AppCategoriesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appCategories/{id}",
			c.AppCategoriesGetInstance,
		},
		"AppCategoriesParentGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appCategories/{id}/parent",
			c.AppCategoriesParentGetToOneRelated,
		},
		"AppCategoriesSubcategoriesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appCategories/{id}/subcategories",
			c.AppCategoriesSubcategoriesGetToManyRelated,
		},
	}
}

// AppCategoriesGetCollection - 
func (c *AppCategoriesAPIController) AppCategoriesGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterPlatformsParam []string
	if query.Has("filter[platforms]") {
		filterPlatformsParam = strings.Split(query.Get("filter[platforms]"), ",")
	}
	var existsParentParam []string
	if query.Has("exists[parent]") {
		existsParentParam = strings.Split(query.Get("exists[parent]"), ",")
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var limitSubcategoriesParam int32
	if query.Has("limit[subcategories]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[subcategories]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitSubcategoriesParam = param
	} else {
	}
	result, err := c.service.AppCategoriesGetCollection(r.Context(), filterPlatformsParam, existsParentParam, fieldsAppCategoriesParam, limitParam, includeParam, limitSubcategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppCategoriesGetInstance - 
func (c *AppCategoriesAPIController) AppCategoriesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var limitSubcategoriesParam int32
	if query.Has("limit[subcategories]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[subcategories]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitSubcategoriesParam = param
	} else {
	}
	result, err := c.service.AppCategoriesGetInstance(r.Context(), idParam, fieldsAppCategoriesParam, includeParam, limitSubcategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppCategoriesParentGetToOneRelated - 
func (c *AppCategoriesAPIController) AppCategoriesParentGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppCategoriesParentGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppCategoriesSubcategoriesGetToManyRelated - 
func (c *AppCategoriesAPIController) AppCategoriesSubcategoriesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppCategoriesSubcategoriesGetToManyRelated(r.Context(), idParam, fieldsAppCategoriesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
