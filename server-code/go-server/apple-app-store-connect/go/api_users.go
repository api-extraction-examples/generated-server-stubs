/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"UsersDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/users/{id}",
			c.UsersDeleteInstance,
		},
		"UsersGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/users",
			c.UsersGetCollection,
		},
		"UsersGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/users/{id}",
			c.UsersGetInstance,
		},
		"UsersUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/users/{id}",
			c.UsersUpdateInstance,
		},
		"UsersVisibleAppsCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/users/{id}/relationships/visibleApps",
			c.UsersVisibleAppsCreateToManyRelationship,
		},
		"UsersVisibleAppsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/users/{id}/relationships/visibleApps",
			c.UsersVisibleAppsDeleteToManyRelationship,
		},
		"UsersVisibleAppsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/users/{id}/visibleApps",
			c.UsersVisibleAppsGetToManyRelated,
		},
		"UsersVisibleAppsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/users/{id}/relationships/visibleApps",
			c.UsersVisibleAppsGetToManyRelationship,
		},
		"UsersVisibleAppsReplaceToManyRelationship": Route{
			strings.ToUpper("Patch"),
			"/v1/users/{id}/relationships/visibleApps",
			c.UsersVisibleAppsReplaceToManyRelationship,
		},
	}
}

// UsersDeleteInstance - 
func (c *UsersAPIController) UsersDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.UsersDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersGetCollection - 
func (c *UsersAPIController) UsersGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterRolesParam []string
	if query.Has("filter[roles]") {
		filterRolesParam = strings.Split(query.Get("filter[roles]"), ",")
	}
	var filterUsernameParam []string
	if query.Has("filter[username]") {
		filterUsernameParam = strings.Split(query.Get("filter[username]"), ",")
	}
	var filterVisibleAppsParam []string
	if query.Has("filter[visibleApps]") {
		filterVisibleAppsParam = strings.Split(query.Get("filter[visibleApps]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsUsersParam []string
	if query.Has("fields[users]") {
		fieldsUsersParam = strings.Split(query.Get("fields[users]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitVisibleAppsParam int32
	if query.Has("limit[visibleApps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[visibleApps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitVisibleAppsParam = param
	} else {
	}
	result, err := c.service.UsersGetCollection(r.Context(), filterRolesParam, filterUsernameParam, filterVisibleAppsParam, sortParam, fieldsUsersParam, limitParam, includeParam, fieldsAppsParam, limitVisibleAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersGetInstance - 
func (c *UsersAPIController) UsersGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsUsersParam []string
	if query.Has("fields[users]") {
		fieldsUsersParam = strings.Split(query.Get("fields[users]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitVisibleAppsParam int32
	if query.Has("limit[visibleApps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[visibleApps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitVisibleAppsParam = param
	} else {
	}
	result, err := c.service.UsersGetInstance(r.Context(), idParam, fieldsUsersParam, includeParam, fieldsAppsParam, limitVisibleAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUpdateInstance - 
func (c *UsersAPIController) UsersUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	userUpdateRequestParam := UserUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserUpdateRequestRequired(userUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserUpdateRequestConstraints(userUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersUpdateInstance(r.Context(), idParam, userUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersVisibleAppsCreateToManyRelationship - 
func (c *UsersAPIController) UsersVisibleAppsCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	userVisibleAppsLinkagesRequestParam := UserVisibleAppsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestRequired(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestConstraints(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersVisibleAppsCreateToManyRelationship(r.Context(), idParam, userVisibleAppsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersVisibleAppsDeleteToManyRelationship - 
func (c *UsersAPIController) UsersVisibleAppsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	userVisibleAppsLinkagesRequestParam := UserVisibleAppsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestRequired(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestConstraints(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersVisibleAppsDeleteToManyRelationship(r.Context(), idParam, userVisibleAppsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersVisibleAppsGetToManyRelated - 
func (c *UsersAPIController) UsersVisibleAppsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.UsersVisibleAppsGetToManyRelated(r.Context(), idParam, fieldsAppsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersVisibleAppsGetToManyRelationship - 
func (c *UsersAPIController) UsersVisibleAppsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.UsersVisibleAppsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersVisibleAppsReplaceToManyRelationship - 
func (c *UsersAPIController) UsersVisibleAppsReplaceToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	userVisibleAppsLinkagesRequestParam := UserVisibleAppsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestRequired(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserVisibleAppsLinkagesRequestConstraints(userVisibleAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UsersVisibleAppsReplaceToManyRelationship(r.Context(), idParam, userVisibleAppsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
