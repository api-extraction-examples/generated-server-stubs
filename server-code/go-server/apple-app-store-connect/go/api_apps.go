/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppsAPIController binds http requests to an api service and writes the service results to the http response
type AppsAPIController struct {
	service AppsAPIServicer
	errorHandler ErrorHandler
}

// AppsAPIOption for how the controller is set up.
type AppsAPIOption func(*AppsAPIController)

// WithAppsAPIErrorHandler inject ErrorHandler into controller
func WithAppsAPIErrorHandler(h ErrorHandler) AppsAPIOption {
	return func(c *AppsAPIController) {
		c.errorHandler = h
	}
}

// NewAppsAPIController creates a default api controller
func NewAppsAPIController(s AppsAPIServicer, opts ...AppsAPIOption) Router {
	controller := &AppsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppsAPIController
func (c *AppsAPIController) Routes() Routes {
	return Routes{
		"AppsAppInfosGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/appInfos",
			c.AppsAppInfosGetToManyRelated,
		},
		"AppsAppStoreVersionsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/appStoreVersions",
			c.AppsAppStoreVersionsGetToManyRelated,
		},
		"AppsAvailableTerritoriesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/availableTerritories",
			c.AppsAvailableTerritoriesGetToManyRelated,
		},
		"AppsBetaAppLocalizationsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/betaAppLocalizations",
			c.AppsBetaAppLocalizationsGetToManyRelated,
		},
		"AppsBetaAppReviewDetailGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/betaAppReviewDetail",
			c.AppsBetaAppReviewDetailGetToOneRelated,
		},
		"AppsBetaGroupsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/betaGroups",
			c.AppsBetaGroupsGetToManyRelated,
		},
		"AppsBetaLicenseAgreementGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/betaLicenseAgreement",
			c.AppsBetaLicenseAgreementGetToOneRelated,
		},
		"AppsBetaTestersDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/apps/{id}/relationships/betaTesters",
			c.AppsBetaTestersDeleteToManyRelationship,
		},
		"AppsBuildsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/builds",
			c.AppsBuildsGetToManyRelated,
		},
		"AppsEndUserLicenseAgreementGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/endUserLicenseAgreement",
			c.AppsEndUserLicenseAgreementGetToOneRelated,
		},
		"AppsGameCenterEnabledVersionsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/gameCenterEnabledVersions",
			c.AppsGameCenterEnabledVersionsGetToManyRelated,
		},
		"AppsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/apps",
			c.AppsGetCollection,
		},
		"AppsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}",
			c.AppsGetInstance,
		},
		"AppsInAppPurchasesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/inAppPurchases",
			c.AppsInAppPurchasesGetToManyRelated,
		},
		"AppsPerfPowerMetricsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/perfPowerMetrics",
			c.AppsPerfPowerMetricsGetToManyRelated,
		},
		"AppsPreOrderGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/preOrder",
			c.AppsPreOrderGetToOneRelated,
		},
		"AppsPreReleaseVersionsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/preReleaseVersions",
			c.AppsPreReleaseVersionsGetToManyRelated,
		},
		"AppsPricesGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/apps/{id}/prices",
			c.AppsPricesGetToManyRelated,
		},
		"AppsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/apps/{id}",
			c.AppsUpdateInstance,
		},
	}
}

// AppsAppInfosGetToManyRelated - 
func (c *AppsAPIController) AppsAppInfosGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAgeRatingDeclarationsParam []string
	if query.Has("fields[ageRatingDeclarations]") {
		fieldsAgeRatingDeclarationsParam = strings.Split(query.Get("fields[ageRatingDeclarations]"), ",")
	}
	var fieldsAppInfosParam []string
	if query.Has("fields[appInfos]") {
		fieldsAppInfosParam = strings.Split(query.Get("fields[appInfos]"), ",")
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	var fieldsAppInfoLocalizationsParam []string
	if query.Has("fields[appInfoLocalizations]") {
		fieldsAppInfoLocalizationsParam = strings.Split(query.Get("fields[appInfoLocalizations]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppsAppInfosGetToManyRelated(r.Context(), idParam, fieldsAgeRatingDeclarationsParam, fieldsAppInfosParam, fieldsAppCategoriesParam, fieldsAppInfoLocalizationsParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsAppStoreVersionsGetToManyRelated - 
func (c *AppsAPIController) AppsAppStoreVersionsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterAppStoreStateParam []string
	if query.Has("filter[appStoreState]") {
		filterAppStoreStateParam = strings.Split(query.Get("filter[appStoreState]"), ",")
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterVersionStringParam []string
	if query.Has("filter[versionString]") {
		filterVersionStringParam = strings.Split(query.Get("filter[versionString]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var fieldsIdfaDeclarationsParam []string
	if query.Has("fields[idfaDeclarations]") {
		fieldsIdfaDeclarationsParam = strings.Split(query.Get("fields[idfaDeclarations]"), ",")
	}
	var fieldsAppStoreVersionLocalizationsParam []string
	if query.Has("fields[appStoreVersionLocalizations]") {
		fieldsAppStoreVersionLocalizationsParam = strings.Split(query.Get("fields[appStoreVersionLocalizations]"), ",")
	}
	var fieldsRoutingAppCoveragesParam []string
	if query.Has("fields[routingAppCoverages]") {
		fieldsRoutingAppCoveragesParam = strings.Split(query.Get("fields[routingAppCoverages]"), ",")
	}
	var fieldsAppStoreVersionPhasedReleasesParam []string
	if query.Has("fields[appStoreVersionPhasedReleases]") {
		fieldsAppStoreVersionPhasedReleasesParam = strings.Split(query.Get("fields[appStoreVersionPhasedReleases]"), ",")
	}
	var fieldsAgeRatingDeclarationsParam []string
	if query.Has("fields[ageRatingDeclarations]") {
		fieldsAgeRatingDeclarationsParam = strings.Split(query.Get("fields[ageRatingDeclarations]"), ",")
	}
	var fieldsAppStoreReviewDetailsParam []string
	if query.Has("fields[appStoreReviewDetails]") {
		fieldsAppStoreReviewDetailsParam = strings.Split(query.Get("fields[appStoreReviewDetails]"), ",")
	}
	var fieldsAppStoreVersionsParam []string
	if query.Has("fields[appStoreVersions]") {
		fieldsAppStoreVersionsParam = strings.Split(query.Get("fields[appStoreVersions]"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsAppStoreVersionSubmissionsParam []string
	if query.Has("fields[appStoreVersionSubmissions]") {
		fieldsAppStoreVersionSubmissionsParam = strings.Split(query.Get("fields[appStoreVersionSubmissions]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppsAppStoreVersionsGetToManyRelated(r.Context(), idParam, filterAppStoreStateParam, filterPlatformParam, filterVersionStringParam, filterIdParam, fieldsIdfaDeclarationsParam, fieldsAppStoreVersionLocalizationsParam, fieldsRoutingAppCoveragesParam, fieldsAppStoreVersionPhasedReleasesParam, fieldsAgeRatingDeclarationsParam, fieldsAppStoreReviewDetailsParam, fieldsAppStoreVersionsParam, fieldsBuildsParam, fieldsAppStoreVersionSubmissionsParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsAvailableTerritoriesGetToManyRelated - 
func (c *AppsAPIController) AppsAvailableTerritoriesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsTerritoriesParam []string
	if query.Has("fields[territories]") {
		fieldsTerritoriesParam = strings.Split(query.Get("fields[territories]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppsAvailableTerritoriesGetToManyRelated(r.Context(), idParam, fieldsTerritoriesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBetaAppLocalizationsGetToManyRelated - 
func (c *AppsAPIController) AppsBetaAppLocalizationsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaAppLocalizationsParam []string
	if query.Has("fields[betaAppLocalizations]") {
		fieldsBetaAppLocalizationsParam = strings.Split(query.Get("fields[betaAppLocalizations]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppsBetaAppLocalizationsGetToManyRelated(r.Context(), idParam, fieldsBetaAppLocalizationsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBetaAppReviewDetailGetToOneRelated - 
func (c *AppsAPIController) AppsBetaAppReviewDetailGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaAppReviewDetailsParam []string
	if query.Has("fields[betaAppReviewDetails]") {
		fieldsBetaAppReviewDetailsParam = strings.Split(query.Get("fields[betaAppReviewDetails]"), ",")
	}
	result, err := c.service.AppsBetaAppReviewDetailGetToOneRelated(r.Context(), idParam, fieldsBetaAppReviewDetailsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBetaGroupsGetToManyRelated - 
func (c *AppsAPIController) AppsBetaGroupsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppsBetaGroupsGetToManyRelated(r.Context(), idParam, fieldsBetaGroupsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBetaLicenseAgreementGetToOneRelated - 
func (c *AppsAPIController) AppsBetaLicenseAgreementGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaLicenseAgreementsParam []string
	if query.Has("fields[betaLicenseAgreements]") {
		fieldsBetaLicenseAgreementsParam = strings.Split(query.Get("fields[betaLicenseAgreements]"), ",")
	}
	result, err := c.service.AppsBetaLicenseAgreementGetToOneRelated(r.Context(), idParam, fieldsBetaLicenseAgreementsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBetaTestersDeleteToManyRelationship - 
func (c *AppsAPIController) AppsBetaTestersDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appBetaTestersLinkagesRequestParam := AppBetaTestersLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppBetaTestersLinkagesRequestRequired(appBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppBetaTestersLinkagesRequestConstraints(appBetaTestersLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppsBetaTestersDeleteToManyRelationship(r.Context(), idParam, appBetaTestersLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsBuildsGetToManyRelated - 
func (c *AppsAPIController) AppsBuildsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppsBuildsGetToManyRelated(r.Context(), idParam, fieldsBuildsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsEndUserLicenseAgreementGetToOneRelated - 
func (c *AppsAPIController) AppsEndUserLicenseAgreementGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsEndUserLicenseAgreementsParam []string
	if query.Has("fields[endUserLicenseAgreements]") {
		fieldsEndUserLicenseAgreementsParam = strings.Split(query.Get("fields[endUserLicenseAgreements]"), ",")
	}
	result, err := c.service.AppsEndUserLicenseAgreementGetToOneRelated(r.Context(), idParam, fieldsEndUserLicenseAgreementsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsGameCenterEnabledVersionsGetToManyRelated - 
func (c *AppsAPIController) AppsGameCenterEnabledVersionsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterVersionStringParam []string
	if query.Has("filter[versionString]") {
		filterVersionStringParam = strings.Split(query.Get("filter[versionString]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsGameCenterEnabledVersionsParam []string
	if query.Has("fields[gameCenterEnabledVersions]") {
		fieldsGameCenterEnabledVersionsParam = strings.Split(query.Get("fields[gameCenterEnabledVersions]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppsGameCenterEnabledVersionsGetToManyRelated(r.Context(), idParam, filterPlatformParam, filterVersionStringParam, filterIdParam, sortParam, fieldsGameCenterEnabledVersionsParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsGetCollection - 
func (c *AppsAPIController) AppsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterAppStoreVersionsAppStoreStateParam []string
	if query.Has("filter[appStoreVersions.appStoreState]") {
		filterAppStoreVersionsAppStoreStateParam = strings.Split(query.Get("filter[appStoreVersions.appStoreState]"), ",")
	}
	var filterAppStoreVersionsPlatformParam []string
	if query.Has("filter[appStoreVersions.platform]") {
		filterAppStoreVersionsPlatformParam = strings.Split(query.Get("filter[appStoreVersions.platform]"), ",")
	}
	var filterBundleIdParam []string
	if query.Has("filter[bundleId]") {
		filterBundleIdParam = strings.Split(query.Get("filter[bundleId]"), ",")
	}
	var filterNameParam []string
	if query.Has("filter[name]") {
		filterNameParam = strings.Split(query.Get("filter[name]"), ",")
	}
	var filterSkuParam []string
	if query.Has("filter[sku]") {
		filterSkuParam = strings.Split(query.Get("filter[sku]"), ",")
	}
	var filterAppStoreVersionsParam []string
	if query.Has("filter[appStoreVersions]") {
		filterAppStoreVersionsParam = strings.Split(query.Get("filter[appStoreVersions]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var existsGameCenterEnabledVersionsParam []string
	if query.Has("exists[gameCenterEnabledVersions]") {
		existsGameCenterEnabledVersionsParam = strings.Split(query.Get("exists[gameCenterEnabledVersions]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var fieldsPerfPowerMetricsParam []string
	if query.Has("fields[perfPowerMetrics]") {
		fieldsPerfPowerMetricsParam = strings.Split(query.Get("fields[perfPowerMetrics]"), ",")
	}
	var fieldsAppInfosParam []string
	if query.Has("fields[appInfos]") {
		fieldsAppInfosParam = strings.Split(query.Get("fields[appInfos]"), ",")
	}
	var fieldsAppPreOrdersParam []string
	if query.Has("fields[appPreOrders]") {
		fieldsAppPreOrdersParam = strings.Split(query.Get("fields[appPreOrders]"), ",")
	}
	var fieldsPreReleaseVersionsParam []string
	if query.Has("fields[preReleaseVersions]") {
		fieldsPreReleaseVersionsParam = strings.Split(query.Get("fields[preReleaseVersions]"), ",")
	}
	var fieldsAppPricesParam []string
	if query.Has("fields[appPrices]") {
		fieldsAppPricesParam = strings.Split(query.Get("fields[appPrices]"), ",")
	}
	var fieldsInAppPurchasesParam []string
	if query.Has("fields[inAppPurchases]") {
		fieldsInAppPurchasesParam = strings.Split(query.Get("fields[inAppPurchases]"), ",")
	}
	var fieldsBetaAppReviewDetailsParam []string
	if query.Has("fields[betaAppReviewDetails]") {
		fieldsBetaAppReviewDetailsParam = strings.Split(query.Get("fields[betaAppReviewDetails]"), ",")
	}
	var fieldsTerritoriesParam []string
	if query.Has("fields[territories]") {
		fieldsTerritoriesParam = strings.Split(query.Get("fields[territories]"), ",")
	}
	var fieldsGameCenterEnabledVersionsParam []string
	if query.Has("fields[gameCenterEnabledVersions]") {
		fieldsGameCenterEnabledVersionsParam = strings.Split(query.Get("fields[gameCenterEnabledVersions]"), ",")
	}
	var fieldsAppStoreVersionsParam []string
	if query.Has("fields[appStoreVersions]") {
		fieldsAppStoreVersionsParam = strings.Split(query.Get("fields[appStoreVersions]"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsBetaAppLocalizationsParam []string
	if query.Has("fields[betaAppLocalizations]") {
		fieldsBetaAppLocalizationsParam = strings.Split(query.Get("fields[betaAppLocalizations]"), ",")
	}
	var fieldsBetaLicenseAgreementsParam []string
	if query.Has("fields[betaLicenseAgreements]") {
		fieldsBetaLicenseAgreementsParam = strings.Split(query.Get("fields[betaLicenseAgreements]"), ",")
	}
	var fieldsEndUserLicenseAgreementsParam []string
	if query.Has("fields[endUserLicenseAgreements]") {
		fieldsEndUserLicenseAgreementsParam = strings.Split(query.Get("fields[endUserLicenseAgreements]"), ",")
	}
	var limitAppInfosParam int32
	if query.Has("limit[appInfos]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appInfos]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppInfosParam = param
	} else {
	}
	var limitAppStoreVersionsParam int32
	if query.Has("limit[appStoreVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appStoreVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppStoreVersionsParam = param
	} else {
	}
	var limitAvailableTerritoriesParam int32
	if query.Has("limit[availableTerritories]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[availableTerritories]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAvailableTerritoriesParam = param
	} else {
	}
	var limitBetaAppLocalizationsParam int32
	if query.Has("limit[betaAppLocalizations]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaAppLocalizations]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaAppLocalizationsParam = param
	} else {
	}
	var limitBetaGroupsParam int32
	if query.Has("limit[betaGroups]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaGroups]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaGroupsParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	var limitGameCenterEnabledVersionsParam int32
	if query.Has("limit[gameCenterEnabledVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[gameCenterEnabledVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitGameCenterEnabledVersionsParam = param
	} else {
	}
	var limitInAppPurchasesParam int32
	if query.Has("limit[inAppPurchases]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[inAppPurchases]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitInAppPurchasesParam = param
	} else {
	}
	var limitPreReleaseVersionsParam int32
	if query.Has("limit[preReleaseVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[preReleaseVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitPreReleaseVersionsParam = param
	} else {
	}
	var limitPricesParam int32
	if query.Has("limit[prices]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[prices]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitPricesParam = param
	} else {
	}
	result, err := c.service.AppsGetCollection(r.Context(), filterAppStoreVersionsAppStoreStateParam, filterAppStoreVersionsPlatformParam, filterBundleIdParam, filterNameParam, filterSkuParam, filterAppStoreVersionsParam, filterIdParam, existsGameCenterEnabledVersionsParam, sortParam, fieldsAppsParam, limitParam, includeParam, fieldsBetaGroupsParam, fieldsPerfPowerMetricsParam, fieldsAppInfosParam, fieldsAppPreOrdersParam, fieldsPreReleaseVersionsParam, fieldsAppPricesParam, fieldsInAppPurchasesParam, fieldsBetaAppReviewDetailsParam, fieldsTerritoriesParam, fieldsGameCenterEnabledVersionsParam, fieldsAppStoreVersionsParam, fieldsBuildsParam, fieldsBetaAppLocalizationsParam, fieldsBetaLicenseAgreementsParam, fieldsEndUserLicenseAgreementsParam, limitAppInfosParam, limitAppStoreVersionsParam, limitAvailableTerritoriesParam, limitBetaAppLocalizationsParam, limitBetaGroupsParam, limitBuildsParam, limitGameCenterEnabledVersionsParam, limitInAppPurchasesParam, limitPreReleaseVersionsParam, limitPricesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsGetInstance - 
func (c *AppsAPIController) AppsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var fieldsPerfPowerMetricsParam []string
	if query.Has("fields[perfPowerMetrics]") {
		fieldsPerfPowerMetricsParam = strings.Split(query.Get("fields[perfPowerMetrics]"), ",")
	}
	var fieldsAppInfosParam []string
	if query.Has("fields[appInfos]") {
		fieldsAppInfosParam = strings.Split(query.Get("fields[appInfos]"), ",")
	}
	var fieldsAppPreOrdersParam []string
	if query.Has("fields[appPreOrders]") {
		fieldsAppPreOrdersParam = strings.Split(query.Get("fields[appPreOrders]"), ",")
	}
	var fieldsPreReleaseVersionsParam []string
	if query.Has("fields[preReleaseVersions]") {
		fieldsPreReleaseVersionsParam = strings.Split(query.Get("fields[preReleaseVersions]"), ",")
	}
	var fieldsAppPricesParam []string
	if query.Has("fields[appPrices]") {
		fieldsAppPricesParam = strings.Split(query.Get("fields[appPrices]"), ",")
	}
	var fieldsInAppPurchasesParam []string
	if query.Has("fields[inAppPurchases]") {
		fieldsInAppPurchasesParam = strings.Split(query.Get("fields[inAppPurchases]"), ",")
	}
	var fieldsBetaAppReviewDetailsParam []string
	if query.Has("fields[betaAppReviewDetails]") {
		fieldsBetaAppReviewDetailsParam = strings.Split(query.Get("fields[betaAppReviewDetails]"), ",")
	}
	var fieldsTerritoriesParam []string
	if query.Has("fields[territories]") {
		fieldsTerritoriesParam = strings.Split(query.Get("fields[territories]"), ",")
	}
	var fieldsGameCenterEnabledVersionsParam []string
	if query.Has("fields[gameCenterEnabledVersions]") {
		fieldsGameCenterEnabledVersionsParam = strings.Split(query.Get("fields[gameCenterEnabledVersions]"), ",")
	}
	var fieldsAppStoreVersionsParam []string
	if query.Has("fields[appStoreVersions]") {
		fieldsAppStoreVersionsParam = strings.Split(query.Get("fields[appStoreVersions]"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsBetaAppLocalizationsParam []string
	if query.Has("fields[betaAppLocalizations]") {
		fieldsBetaAppLocalizationsParam = strings.Split(query.Get("fields[betaAppLocalizations]"), ",")
	}
	var fieldsBetaLicenseAgreementsParam []string
	if query.Has("fields[betaLicenseAgreements]") {
		fieldsBetaLicenseAgreementsParam = strings.Split(query.Get("fields[betaLicenseAgreements]"), ",")
	}
	var fieldsEndUserLicenseAgreementsParam []string
	if query.Has("fields[endUserLicenseAgreements]") {
		fieldsEndUserLicenseAgreementsParam = strings.Split(query.Get("fields[endUserLicenseAgreements]"), ",")
	}
	var limitAppInfosParam int32
	if query.Has("limit[appInfos]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appInfos]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppInfosParam = param
	} else {
	}
	var limitAppStoreVersionsParam int32
	if query.Has("limit[appStoreVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appStoreVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppStoreVersionsParam = param
	} else {
	}
	var limitAvailableTerritoriesParam int32
	if query.Has("limit[availableTerritories]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[availableTerritories]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAvailableTerritoriesParam = param
	} else {
	}
	var limitBetaAppLocalizationsParam int32
	if query.Has("limit[betaAppLocalizations]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaAppLocalizations]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaAppLocalizationsParam = param
	} else {
	}
	var limitBetaGroupsParam int32
	if query.Has("limit[betaGroups]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaGroups]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaGroupsParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	var limitGameCenterEnabledVersionsParam int32
	if query.Has("limit[gameCenterEnabledVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[gameCenterEnabledVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitGameCenterEnabledVersionsParam = param
	} else {
	}
	var limitInAppPurchasesParam int32
	if query.Has("limit[inAppPurchases]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[inAppPurchases]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitInAppPurchasesParam = param
	} else {
	}
	var limitPreReleaseVersionsParam int32
	if query.Has("limit[preReleaseVersions]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[preReleaseVersions]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitPreReleaseVersionsParam = param
	} else {
	}
	var limitPricesParam int32
	if query.Has("limit[prices]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[prices]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitPricesParam = param
	} else {
	}
	result, err := c.service.AppsGetInstance(r.Context(), idParam, fieldsAppsParam, includeParam, fieldsBetaGroupsParam, fieldsPerfPowerMetricsParam, fieldsAppInfosParam, fieldsAppPreOrdersParam, fieldsPreReleaseVersionsParam, fieldsAppPricesParam, fieldsInAppPurchasesParam, fieldsBetaAppReviewDetailsParam, fieldsTerritoriesParam, fieldsGameCenterEnabledVersionsParam, fieldsAppStoreVersionsParam, fieldsBuildsParam, fieldsBetaAppLocalizationsParam, fieldsBetaLicenseAgreementsParam, fieldsEndUserLicenseAgreementsParam, limitAppInfosParam, limitAppStoreVersionsParam, limitAvailableTerritoriesParam, limitBetaAppLocalizationsParam, limitBetaGroupsParam, limitBuildsParam, limitGameCenterEnabledVersionsParam, limitInAppPurchasesParam, limitPreReleaseVersionsParam, limitPricesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsInAppPurchasesGetToManyRelated - 
func (c *AppsAPIController) AppsInAppPurchasesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterInAppPurchaseTypeParam []string
	if query.Has("filter[inAppPurchaseType]") {
		filterInAppPurchaseTypeParam = strings.Split(query.Get("filter[inAppPurchaseType]"), ",")
	}
	var filterCanBeSubmittedParam []string
	if query.Has("filter[canBeSubmitted]") {
		filterCanBeSubmittedParam = strings.Split(query.Get("filter[canBeSubmitted]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsInAppPurchasesParam []string
	if query.Has("fields[inAppPurchases]") {
		fieldsInAppPurchasesParam = strings.Split(query.Get("fields[inAppPurchases]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppsInAppPurchasesGetToManyRelated(r.Context(), idParam, filterInAppPurchaseTypeParam, filterCanBeSubmittedParam, sortParam, fieldsInAppPurchasesParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsPerfPowerMetricsGetToManyRelated - 
func (c *AppsAPIController) AppsPerfPowerMetricsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterDeviceTypeParam []string
	if query.Has("filter[deviceType]") {
		filterDeviceTypeParam = strings.Split(query.Get("filter[deviceType]"), ",")
	}
	var filterMetricTypeParam []string
	if query.Has("filter[metricType]") {
		filterMetricTypeParam = strings.Split(query.Get("filter[metricType]"), ",")
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	result, err := c.service.AppsPerfPowerMetricsGetToManyRelated(r.Context(), idParam, filterDeviceTypeParam, filterMetricTypeParam, filterPlatformParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsPreOrderGetToOneRelated - 
func (c *AppsAPIController) AppsPreOrderGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppPreOrdersParam []string
	if query.Has("fields[appPreOrders]") {
		fieldsAppPreOrdersParam = strings.Split(query.Get("fields[appPreOrders]"), ",")
	}
	result, err := c.service.AppsPreOrderGetToOneRelated(r.Context(), idParam, fieldsAppPreOrdersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsPreReleaseVersionsGetToManyRelated - 
func (c *AppsAPIController) AppsPreReleaseVersionsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsPreReleaseVersionsParam []string
	if query.Has("fields[preReleaseVersions]") {
		fieldsPreReleaseVersionsParam = strings.Split(query.Get("fields[preReleaseVersions]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.AppsPreReleaseVersionsGetToManyRelated(r.Context(), idParam, fieldsPreReleaseVersionsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsPricesGetToManyRelated - 
func (c *AppsAPIController) AppsPricesGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppPricesParam []string
	if query.Has("fields[appPrices]") {
		fieldsAppPricesParam = strings.Split(query.Get("fields[appPrices]"), ",")
	}
	var fieldsAppPriceTiersParam []string
	if query.Has("fields[appPriceTiers]") {
		fieldsAppPriceTiersParam = strings.Split(query.Get("fields[appPriceTiers]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppsPricesGetToManyRelated(r.Context(), idParam, fieldsAppPricesParam, fieldsAppPriceTiersParam, fieldsAppsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppsUpdateInstance - 
func (c *AppsAPIController) AppsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appUpdateRequestParam := AppUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppUpdateRequestRequired(appUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppUpdateRequestConstraints(appUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppsUpdateInstance(r.Context(), idParam, appUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
