/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaLicenseAgreementsAPIController binds http requests to an api service and writes the service results to the http response
type BetaLicenseAgreementsAPIController struct {
	service BetaLicenseAgreementsAPIServicer
	errorHandler ErrorHandler
}

// BetaLicenseAgreementsAPIOption for how the controller is set up.
type BetaLicenseAgreementsAPIOption func(*BetaLicenseAgreementsAPIController)

// WithBetaLicenseAgreementsAPIErrorHandler inject ErrorHandler into controller
func WithBetaLicenseAgreementsAPIErrorHandler(h ErrorHandler) BetaLicenseAgreementsAPIOption {
	return func(c *BetaLicenseAgreementsAPIController) {
		c.errorHandler = h
	}
}

// NewBetaLicenseAgreementsAPIController creates a default api controller
func NewBetaLicenseAgreementsAPIController(s BetaLicenseAgreementsAPIServicer, opts ...BetaLicenseAgreementsAPIOption) Router {
	controller := &BetaLicenseAgreementsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaLicenseAgreementsAPIController
func (c *BetaLicenseAgreementsAPIController) Routes() Routes {
	return Routes{
		"BetaLicenseAgreementsAppGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaLicenseAgreements/{id}/app",
			c.BetaLicenseAgreementsAppGetToOneRelated,
		},
		"BetaLicenseAgreementsGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/betaLicenseAgreements",
			c.BetaLicenseAgreementsGetCollection,
		},
		"BetaLicenseAgreementsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/betaLicenseAgreements/{id}",
			c.BetaLicenseAgreementsGetInstance,
		},
		"BetaLicenseAgreementsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/betaLicenseAgreements/{id}",
			c.BetaLicenseAgreementsUpdateInstance,
		},
	}
}

// BetaLicenseAgreementsAppGetToOneRelated - 
func (c *BetaLicenseAgreementsAPIController) BetaLicenseAgreementsAppGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaLicenseAgreementsAppGetToOneRelated(r.Context(), idParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaLicenseAgreementsGetCollection - 
func (c *BetaLicenseAgreementsAPIController) BetaLicenseAgreementsGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterAppParam []string
	if query.Has("filter[app]") {
		filterAppParam = strings.Split(query.Get("filter[app]"), ",")
	}
	var fieldsBetaLicenseAgreementsParam []string
	if query.Has("fields[betaLicenseAgreements]") {
		fieldsBetaLicenseAgreementsParam = strings.Split(query.Get("fields[betaLicenseAgreements]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaLicenseAgreementsGetCollection(r.Context(), filterAppParam, fieldsBetaLicenseAgreementsParam, limitParam, includeParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaLicenseAgreementsGetInstance - 
func (c *BetaLicenseAgreementsAPIController) BetaLicenseAgreementsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaLicenseAgreementsParam []string
	if query.Has("fields[betaLicenseAgreements]") {
		fieldsBetaLicenseAgreementsParam = strings.Split(query.Get("fields[betaLicenseAgreements]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	result, err := c.service.BetaLicenseAgreementsGetInstance(r.Context(), idParam, fieldsBetaLicenseAgreementsParam, includeParam, fieldsAppsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaLicenseAgreementsUpdateInstance - 
func (c *BetaLicenseAgreementsAPIController) BetaLicenseAgreementsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaLicenseAgreementUpdateRequestParam := BetaLicenseAgreementUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaLicenseAgreementUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaLicenseAgreementUpdateRequestRequired(betaLicenseAgreementUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaLicenseAgreementUpdateRequestConstraints(betaLicenseAgreementUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaLicenseAgreementsUpdateInstance(r.Context(), idParam, betaLicenseAgreementUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
