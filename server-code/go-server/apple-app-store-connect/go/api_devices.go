/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DevicesAPIController binds http requests to an api service and writes the service results to the http response
type DevicesAPIController struct {
	service DevicesAPIServicer
	errorHandler ErrorHandler
}

// DevicesAPIOption for how the controller is set up.
type DevicesAPIOption func(*DevicesAPIController)

// WithDevicesAPIErrorHandler inject ErrorHandler into controller
func WithDevicesAPIErrorHandler(h ErrorHandler) DevicesAPIOption {
	return func(c *DevicesAPIController) {
		c.errorHandler = h
	}
}

// NewDevicesAPIController creates a default api controller
func NewDevicesAPIController(s DevicesAPIServicer, opts ...DevicesAPIOption) Router {
	controller := &DevicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DevicesAPIController
func (c *DevicesAPIController) Routes() Routes {
	return Routes{
		"DevicesCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/devices",
			c.DevicesCreateInstance,
		},
		"DevicesGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/devices",
			c.DevicesGetCollection,
		},
		"DevicesGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/devices/{id}",
			c.DevicesGetInstance,
		},
		"DevicesUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/devices/{id}",
			c.DevicesUpdateInstance,
		},
	}
}

// DevicesCreateInstance - 
func (c *DevicesAPIController) DevicesCreateInstance(w http.ResponseWriter, r *http.Request) {
	deviceCreateRequestParam := DeviceCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceCreateRequestRequired(deviceCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceCreateRequestConstraints(deviceCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DevicesCreateInstance(r.Context(), deviceCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DevicesGetCollection - 
func (c *DevicesAPIController) DevicesGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterNameParam []string
	if query.Has("filter[name]") {
		filterNameParam = strings.Split(query.Get("filter[name]"), ",")
	}
	var filterPlatformParam []string
	if query.Has("filter[platform]") {
		filterPlatformParam = strings.Split(query.Get("filter[platform]"), ",")
	}
	var filterStatusParam []string
	if query.Has("filter[status]") {
		filterStatusParam = strings.Split(query.Get("filter[status]"), ",")
	}
	var filterUdidParam []string
	if query.Has("filter[udid]") {
		filterUdidParam = strings.Split(query.Get("filter[udid]"), ",")
	}
	var filterIdParam []string
	if query.Has("filter[id]") {
		filterIdParam = strings.Split(query.Get("filter[id]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsDevicesParam []string
	if query.Has("fields[devices]") {
		fieldsDevicesParam = strings.Split(query.Get("fields[devices]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.DevicesGetCollection(r.Context(), filterNameParam, filterPlatformParam, filterStatusParam, filterUdidParam, filterIdParam, sortParam, fieldsDevicesParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DevicesGetInstance - 
func (c *DevicesAPIController) DevicesGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsDevicesParam []string
	if query.Has("fields[devices]") {
		fieldsDevicesParam = strings.Split(query.Get("fields[devices]"), ",")
	}
	result, err := c.service.DevicesGetInstance(r.Context(), idParam, fieldsDevicesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DevicesUpdateInstance - 
func (c *DevicesAPIController) DevicesUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	deviceUpdateRequestParam := DeviceUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceUpdateRequestRequired(deviceUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceUpdateRequestConstraints(deviceUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.DevicesUpdateInstance(r.Context(), idParam, deviceUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
