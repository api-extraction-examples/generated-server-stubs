/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaTesterInvitationsAPIController binds http requests to an api service and writes the service results to the http response
type BetaTesterInvitationsAPIController struct {
	service BetaTesterInvitationsAPIServicer
	errorHandler ErrorHandler
}

// BetaTesterInvitationsAPIOption for how the controller is set up.
type BetaTesterInvitationsAPIOption func(*BetaTesterInvitationsAPIController)

// WithBetaTesterInvitationsAPIErrorHandler inject ErrorHandler into controller
func WithBetaTesterInvitationsAPIErrorHandler(h ErrorHandler) BetaTesterInvitationsAPIOption {
	return func(c *BetaTesterInvitationsAPIController) {
		c.errorHandler = h
	}
}

// NewBetaTesterInvitationsAPIController creates a default api controller
func NewBetaTesterInvitationsAPIController(s BetaTesterInvitationsAPIServicer, opts ...BetaTesterInvitationsAPIOption) Router {
	controller := &BetaTesterInvitationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaTesterInvitationsAPIController
func (c *BetaTesterInvitationsAPIController) Routes() Routes {
	return Routes{
		"BetaTesterInvitationsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/betaTesterInvitations",
			c.BetaTesterInvitationsCreateInstance,
		},
	}
}

// BetaTesterInvitationsCreateInstance - 
func (c *BetaTesterInvitationsAPIController) BetaTesterInvitationsCreateInstance(w http.ResponseWriter, r *http.Request) {
	betaTesterInvitationCreateRequestParam := BetaTesterInvitationCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterInvitationCreateRequestRequired(betaTesterInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterInvitationCreateRequestConstraints(betaTesterInvitationCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTesterInvitationsCreateInstance(r.Context(), betaTesterInvitationCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
