/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// BetaTestersAPIController binds http requests to an api service and writes the service results to the http response
type BetaTestersAPIController struct {
	service BetaTestersAPIServicer
	errorHandler ErrorHandler
}

// BetaTestersAPIOption for how the controller is set up.
type BetaTestersAPIOption func(*BetaTestersAPIController)

// WithBetaTestersAPIErrorHandler inject ErrorHandler into controller
func WithBetaTestersAPIErrorHandler(h ErrorHandler) BetaTestersAPIOption {
	return func(c *BetaTestersAPIController) {
		c.errorHandler = h
	}
}

// NewBetaTestersAPIController creates a default api controller
func NewBetaTestersAPIController(s BetaTestersAPIServicer, opts ...BetaTestersAPIOption) Router {
	controller := &BetaTestersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the BetaTestersAPIController
func (c *BetaTestersAPIController) Routes() Routes {
	return Routes{
		"BetaTestersAppsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/betaTesters/{id}/relationships/apps",
			c.BetaTestersAppsDeleteToManyRelationship,
		},
		"BetaTestersAppsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/apps",
			c.BetaTestersAppsGetToManyRelated,
		},
		"BetaTestersAppsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/relationships/apps",
			c.BetaTestersAppsGetToManyRelationship,
		},
		"BetaTestersBetaGroupsCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/betaTesters/{id}/relationships/betaGroups",
			c.BetaTestersBetaGroupsCreateToManyRelationship,
		},
		"BetaTestersBetaGroupsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/betaTesters/{id}/relationships/betaGroups",
			c.BetaTestersBetaGroupsDeleteToManyRelationship,
		},
		"BetaTestersBetaGroupsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/betaGroups",
			c.BetaTestersBetaGroupsGetToManyRelated,
		},
		"BetaTestersBetaGroupsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/relationships/betaGroups",
			c.BetaTestersBetaGroupsGetToManyRelationship,
		},
		"BetaTestersBuildsCreateToManyRelationship": Route{
			strings.ToUpper("Post"),
			"/v1/betaTesters/{id}/relationships/builds",
			c.BetaTestersBuildsCreateToManyRelationship,
		},
		"BetaTestersBuildsDeleteToManyRelationship": Route{
			strings.ToUpper("Delete"),
			"/v1/betaTesters/{id}/relationships/builds",
			c.BetaTestersBuildsDeleteToManyRelationship,
		},
		"BetaTestersBuildsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/builds",
			c.BetaTestersBuildsGetToManyRelated,
		},
		"BetaTestersBuildsGetToManyRelationship": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}/relationships/builds",
			c.BetaTestersBuildsGetToManyRelationship,
		},
		"BetaTestersCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/betaTesters",
			c.BetaTestersCreateInstance,
		},
		"BetaTestersDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/betaTesters/{id}",
			c.BetaTestersDeleteInstance,
		},
		"BetaTestersGetCollection": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters",
			c.BetaTestersGetCollection,
		},
		"BetaTestersGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/betaTesters/{id}",
			c.BetaTestersGetInstance,
		},
	}
}

// BetaTestersAppsDeleteToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersAppsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaTesterAppsLinkagesRequestParam := BetaTesterAppsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterAppsLinkagesRequestRequired(betaTesterAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterAppsLinkagesRequestConstraints(betaTesterAppsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersAppsDeleteToManyRelationship(r.Context(), idParam, betaTesterAppsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersAppsGetToManyRelated - 
func (c *BetaTestersAPIController) BetaTestersAppsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersAppsGetToManyRelated(r.Context(), idParam, fieldsAppsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersAppsGetToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersAppsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersAppsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBetaGroupsCreateToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBetaGroupsCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaTesterBetaGroupsLinkagesRequestParam := BetaTesterBetaGroupsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterBetaGroupsLinkagesRequestRequired(betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterBetaGroupsLinkagesRequestConstraints(betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersBetaGroupsCreateToManyRelationship(r.Context(), idParam, betaTesterBetaGroupsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBetaGroupsDeleteToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBetaGroupsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaTesterBetaGroupsLinkagesRequestParam := BetaTesterBetaGroupsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterBetaGroupsLinkagesRequestRequired(betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterBetaGroupsLinkagesRequestConstraints(betaTesterBetaGroupsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersBetaGroupsDeleteToManyRelationship(r.Context(), idParam, betaTesterBetaGroupsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBetaGroupsGetToManyRelated - 
func (c *BetaTestersAPIController) BetaTestersBetaGroupsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersBetaGroupsGetToManyRelated(r.Context(), idParam, fieldsBetaGroupsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBetaGroupsGetToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBetaGroupsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersBetaGroupsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBuildsCreateToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBuildsCreateToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaTesterBuildsLinkagesRequestParam := BetaTesterBuildsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterBuildsLinkagesRequestRequired(betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterBuildsLinkagesRequestConstraints(betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersBuildsCreateToManyRelationship(r.Context(), idParam, betaTesterBuildsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBuildsDeleteToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBuildsDeleteToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	betaTesterBuildsLinkagesRequestParam := BetaTesterBuildsLinkagesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterBuildsLinkagesRequestRequired(betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterBuildsLinkagesRequestConstraints(betaTesterBuildsLinkagesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersBuildsDeleteToManyRelationship(r.Context(), idParam, betaTesterBuildsLinkagesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBuildsGetToManyRelated - 
func (c *BetaTestersAPIController) BetaTestersBuildsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersBuildsGetToManyRelated(r.Context(), idParam, fieldsBuildsParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersBuildsGetToManyRelationship - 
func (c *BetaTestersAPIController) BetaTestersBuildsGetToManyRelationship(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	result, err := c.service.BetaTestersBuildsGetToManyRelationship(r.Context(), idParam, limitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersCreateInstance - 
func (c *BetaTestersAPIController) BetaTestersCreateInstance(w http.ResponseWriter, r *http.Request) {
	betaTesterCreateRequestParam := BetaTesterCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&betaTesterCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBetaTesterCreateRequestRequired(betaTesterCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBetaTesterCreateRequestConstraints(betaTesterCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.BetaTestersCreateInstance(r.Context(), betaTesterCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersDeleteInstance - 
func (c *BetaTestersAPIController) BetaTestersDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.BetaTestersDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersGetCollection - 
func (c *BetaTestersAPIController) BetaTestersGetCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var filterEmailParam []string
	if query.Has("filter[email]") {
		filterEmailParam = strings.Split(query.Get("filter[email]"), ",")
	}
	var filterFirstNameParam []string
	if query.Has("filter[firstName]") {
		filterFirstNameParam = strings.Split(query.Get("filter[firstName]"), ",")
	}
	var filterInviteTypeParam []string
	if query.Has("filter[inviteType]") {
		filterInviteTypeParam = strings.Split(query.Get("filter[inviteType]"), ",")
	}
	var filterLastNameParam []string
	if query.Has("filter[lastName]") {
		filterLastNameParam = strings.Split(query.Get("filter[lastName]"), ",")
	}
	var filterAppsParam []string
	if query.Has("filter[apps]") {
		filterAppsParam = strings.Split(query.Get("filter[apps]"), ",")
	}
	var filterBetaGroupsParam []string
	if query.Has("filter[betaGroups]") {
		filterBetaGroupsParam = strings.Split(query.Get("filter[betaGroups]"), ",")
	}
	var filterBuildsParam []string
	if query.Has("filter[builds]") {
		filterBuildsParam = strings.Split(query.Get("filter[builds]"), ",")
	}
	var sortParam []string
	if query.Has("sort") {
		sortParam = strings.Split(query.Get("sort"), ",")
	}
	var fieldsBetaTestersParam []string
	if query.Has("fields[betaTesters]") {
		fieldsBetaTestersParam = strings.Split(query.Get("fields[betaTesters]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitAppsParam int32
	if query.Has("limit[apps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[apps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppsParam = param
	} else {
	}
	var limitBetaGroupsParam int32
	if query.Has("limit[betaGroups]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaGroups]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaGroupsParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.BetaTestersGetCollection(r.Context(), filterEmailParam, filterFirstNameParam, filterInviteTypeParam, filterLastNameParam, filterAppsParam, filterBetaGroupsParam, filterBuildsParam, sortParam, fieldsBetaTestersParam, limitParam, includeParam, fieldsBetaGroupsParam, fieldsBuildsParam, fieldsAppsParam, limitAppsParam, limitBetaGroupsParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// BetaTestersGetInstance - 
func (c *BetaTestersAPIController) BetaTestersGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsBetaTestersParam []string
	if query.Has("fields[betaTesters]") {
		fieldsBetaTestersParam = strings.Split(query.Get("fields[betaTesters]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsBetaGroupsParam []string
	if query.Has("fields[betaGroups]") {
		fieldsBetaGroupsParam = strings.Split(query.Get("fields[betaGroups]"), ",")
	}
	var fieldsBuildsParam []string
	if query.Has("fields[builds]") {
		fieldsBuildsParam = strings.Split(query.Get("fields[builds]"), ",")
	}
	var fieldsAppsParam []string
	if query.Has("fields[apps]") {
		fieldsAppsParam = strings.Split(query.Get("fields[apps]"), ",")
	}
	var limitAppsParam int32
	if query.Has("limit[apps]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[apps]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppsParam = param
	} else {
	}
	var limitBetaGroupsParam int32
	if query.Has("limit[betaGroups]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[betaGroups]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBetaGroupsParam = param
	} else {
	}
	var limitBuildsParam int32
	if query.Has("limit[builds]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[builds]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitBuildsParam = param
	} else {
	}
	result, err := c.service.BetaTestersGetInstance(r.Context(), idParam, fieldsBetaTestersParam, includeParam, fieldsBetaGroupsParam, fieldsBuildsParam, fieldsAppsParam, limitAppsParam, limitBetaGroupsParam, limitBuildsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
