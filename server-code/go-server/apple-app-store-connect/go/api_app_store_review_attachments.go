/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppStoreReviewAttachmentsAPIController binds http requests to an api service and writes the service results to the http response
type AppStoreReviewAttachmentsAPIController struct {
	service AppStoreReviewAttachmentsAPIServicer
	errorHandler ErrorHandler
}

// AppStoreReviewAttachmentsAPIOption for how the controller is set up.
type AppStoreReviewAttachmentsAPIOption func(*AppStoreReviewAttachmentsAPIController)

// WithAppStoreReviewAttachmentsAPIErrorHandler inject ErrorHandler into controller
func WithAppStoreReviewAttachmentsAPIErrorHandler(h ErrorHandler) AppStoreReviewAttachmentsAPIOption {
	return func(c *AppStoreReviewAttachmentsAPIController) {
		c.errorHandler = h
	}
}

// NewAppStoreReviewAttachmentsAPIController creates a default api controller
func NewAppStoreReviewAttachmentsAPIController(s AppStoreReviewAttachmentsAPIServicer, opts ...AppStoreReviewAttachmentsAPIOption) Router {
	controller := &AppStoreReviewAttachmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppStoreReviewAttachmentsAPIController
func (c *AppStoreReviewAttachmentsAPIController) Routes() Routes {
	return Routes{
		"AppStoreReviewAttachmentsCreateInstance": Route{
			strings.ToUpper("Post"),
			"/v1/appStoreReviewAttachments",
			c.AppStoreReviewAttachmentsCreateInstance,
		},
		"AppStoreReviewAttachmentsDeleteInstance": Route{
			strings.ToUpper("Delete"),
			"/v1/appStoreReviewAttachments/{id}",
			c.AppStoreReviewAttachmentsDeleteInstance,
		},
		"AppStoreReviewAttachmentsGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appStoreReviewAttachments/{id}",
			c.AppStoreReviewAttachmentsGetInstance,
		},
		"AppStoreReviewAttachmentsUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appStoreReviewAttachments/{id}",
			c.AppStoreReviewAttachmentsUpdateInstance,
		},
	}
}

// AppStoreReviewAttachmentsCreateInstance - 
func (c *AppStoreReviewAttachmentsAPIController) AppStoreReviewAttachmentsCreateInstance(w http.ResponseWriter, r *http.Request) {
	appStoreReviewAttachmentCreateRequestParam := AppStoreReviewAttachmentCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreReviewAttachmentCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreReviewAttachmentCreateRequestRequired(appStoreReviewAttachmentCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreReviewAttachmentCreateRequestConstraints(appStoreReviewAttachmentCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreReviewAttachmentsCreateInstance(r.Context(), appStoreReviewAttachmentCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreReviewAttachmentsDeleteInstance - 
func (c *AppStoreReviewAttachmentsAPIController) AppStoreReviewAttachmentsDeleteInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.AppStoreReviewAttachmentsDeleteInstance(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreReviewAttachmentsGetInstance - 
func (c *AppStoreReviewAttachmentsAPIController) AppStoreReviewAttachmentsGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppStoreReviewAttachmentsParam []string
	if query.Has("fields[appStoreReviewAttachments]") {
		fieldsAppStoreReviewAttachmentsParam = strings.Split(query.Get("fields[appStoreReviewAttachments]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppStoreReviewAttachmentsGetInstance(r.Context(), idParam, fieldsAppStoreReviewAttachmentsParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppStoreReviewAttachmentsUpdateInstance - 
func (c *AppStoreReviewAttachmentsAPIController) AppStoreReviewAttachmentsUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appStoreReviewAttachmentUpdateRequestParam := AppStoreReviewAttachmentUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appStoreReviewAttachmentUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppStoreReviewAttachmentUpdateRequestRequired(appStoreReviewAttachmentUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppStoreReviewAttachmentUpdateRequestConstraints(appStoreReviewAttachmentUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppStoreReviewAttachmentsUpdateInstance(r.Context(), idParam, appStoreReviewAttachmentUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
