/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type CertificateType string

// List of CertificateType
const (
	IOS_DEVELOPMENT CertificateType = "IOS_DEVELOPMENT"
	IOS_DISTRIBUTION CertificateType = "IOS_DISTRIBUTION"
	MAC_APP_DISTRIBUTION CertificateType = "MAC_APP_DISTRIBUTION"
	MAC_INSTALLER_DISTRIBUTION CertificateType = "MAC_INSTALLER_DISTRIBUTION"
	MAC_APP_DEVELOPMENT CertificateType = "MAC_APP_DEVELOPMENT"
	DEVELOPER_ID_KEXT CertificateType = "DEVELOPER_ID_KEXT"
	DEVELOPER_ID_APPLICATION CertificateType = "DEVELOPER_ID_APPLICATION"
	DEVELOPMENT CertificateType = "DEVELOPMENT"
	DISTRIBUTION CertificateType = "DISTRIBUTION"
)

// AllowedCertificateTypeEnumValues is all the allowed values of CertificateType enum
var AllowedCertificateTypeEnumValues = []CertificateType{
	"IOS_DEVELOPMENT",
	"IOS_DISTRIBUTION",
	"MAC_APP_DISTRIBUTION",
	"MAC_INSTALLER_DISTRIBUTION",
	"MAC_APP_DEVELOPMENT",
	"DEVELOPER_ID_KEXT",
	"DEVELOPER_ID_APPLICATION",
	"DEVELOPMENT",
	"DISTRIBUTION",
}

// validCertificateTypeEnumValue provides a map of CertificateTypes for fast verification of use input
var validCertificateTypeEnumValues = map[CertificateType]struct{}{
	"IOS_DEVELOPMENT": {},
	"IOS_DISTRIBUTION": {},
	"MAC_APP_DISTRIBUTION": {},
	"MAC_INSTALLER_DISTRIBUTION": {},
	"MAC_APP_DEVELOPMENT": {},
	"DEVELOPER_ID_KEXT": {},
	"DEVELOPER_ID_APPLICATION": {},
	"DEVELOPMENT": {},
	"DISTRIBUTION": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CertificateType) IsValid() bool {
	_, ok := validCertificateTypeEnumValues[v]
	return ok
}

// NewCertificateTypeFromValue returns a pointer to a valid CertificateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCertificateTypeFromValue(v string) (CertificateType, error) {
	ev := CertificateType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for CertificateType: valid values are %v", v, AllowedCertificateTypeEnumValues)
	}
}



// AssertCertificateTypeRequired checks if the required fields are not zero-ed
func AssertCertificateTypeRequired(obj CertificateType) error {
	return nil
}

// AssertCertificateTypeConstraints checks if the values respects the defined constraints
func AssertCertificateTypeConstraints(obj CertificateType) error {
	return nil
}
