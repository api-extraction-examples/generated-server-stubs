/*
 * App Store Connect API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.4.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AppInfosAPIController binds http requests to an api service and writes the service results to the http response
type AppInfosAPIController struct {
	service AppInfosAPIServicer
	errorHandler ErrorHandler
}

// AppInfosAPIOption for how the controller is set up.
type AppInfosAPIOption func(*AppInfosAPIController)

// WithAppInfosAPIErrorHandler inject ErrorHandler into controller
func WithAppInfosAPIErrorHandler(h ErrorHandler) AppInfosAPIOption {
	return func(c *AppInfosAPIController) {
		c.errorHandler = h
	}
}

// NewAppInfosAPIController creates a default api controller
func NewAppInfosAPIController(s AppInfosAPIServicer, opts ...AppInfosAPIOption) Router {
	controller := &AppInfosAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AppInfosAPIController
func (c *AppInfosAPIController) Routes() Routes {
	return Routes{
		"AppInfosAgeRatingDeclarationGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/ageRatingDeclaration",
			c.AppInfosAgeRatingDeclarationGetToOneRelated,
		},
		"AppInfosAppInfoLocalizationsGetToManyRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/appInfoLocalizations",
			c.AppInfosAppInfoLocalizationsGetToManyRelated,
		},
		"AppInfosGetInstance": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}",
			c.AppInfosGetInstance,
		},
		"AppInfosPrimaryCategoryGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/primaryCategory",
			c.AppInfosPrimaryCategoryGetToOneRelated,
		},
		"AppInfosPrimarySubcategoryOneGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/primarySubcategoryOne",
			c.AppInfosPrimarySubcategoryOneGetToOneRelated,
		},
		"AppInfosPrimarySubcategoryTwoGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/primarySubcategoryTwo",
			c.AppInfosPrimarySubcategoryTwoGetToOneRelated,
		},
		"AppInfosSecondaryCategoryGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/secondaryCategory",
			c.AppInfosSecondaryCategoryGetToOneRelated,
		},
		"AppInfosSecondarySubcategoryOneGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/secondarySubcategoryOne",
			c.AppInfosSecondarySubcategoryOneGetToOneRelated,
		},
		"AppInfosSecondarySubcategoryTwoGetToOneRelated": Route{
			strings.ToUpper("Get"),
			"/v1/appInfos/{id}/secondarySubcategoryTwo",
			c.AppInfosSecondarySubcategoryTwoGetToOneRelated,
		},
		"AppInfosUpdateInstance": Route{
			strings.ToUpper("Patch"),
			"/v1/appInfos/{id}",
			c.AppInfosUpdateInstance,
		},
	}
}

// AppInfosAgeRatingDeclarationGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosAgeRatingDeclarationGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAgeRatingDeclarationsParam []string
	if query.Has("fields[ageRatingDeclarations]") {
		fieldsAgeRatingDeclarationsParam = strings.Split(query.Get("fields[ageRatingDeclarations]"), ",")
	}
	result, err := c.service.AppInfosAgeRatingDeclarationGetToOneRelated(r.Context(), idParam, fieldsAgeRatingDeclarationsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosAppInfoLocalizationsGetToManyRelated - 
func (c *AppInfosAPIController) AppInfosAppInfoLocalizationsGetToManyRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var filterLocaleParam []string
	if query.Has("filter[locale]") {
		filterLocaleParam = strings.Split(query.Get("filter[locale]"), ",")
	}
	var fieldsAppInfosParam []string
	if query.Has("fields[appInfos]") {
		fieldsAppInfosParam = strings.Split(query.Get("fields[appInfos]"), ",")
	}
	var fieldsAppInfoLocalizationsParam []string
	if query.Has("fields[appInfoLocalizations]") {
		fieldsAppInfoLocalizationsParam = strings.Split(query.Get("fields[appInfoLocalizations]"), ",")
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	result, err := c.service.AppInfosAppInfoLocalizationsGetToManyRelated(r.Context(), idParam, filterLocaleParam, fieldsAppInfosParam, fieldsAppInfoLocalizationsParam, limitParam, includeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosGetInstance - 
func (c *AppInfosAPIController) AppInfosGetInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppInfosParam []string
	if query.Has("fields[appInfos]") {
		fieldsAppInfosParam = strings.Split(query.Get("fields[appInfos]"), ",")
	}
	var includeParam []string
	if query.Has("include") {
		includeParam = strings.Split(query.Get("include"), ",")
	}
	var fieldsAgeRatingDeclarationsParam []string
	if query.Has("fields[ageRatingDeclarations]") {
		fieldsAgeRatingDeclarationsParam = strings.Split(query.Get("fields[ageRatingDeclarations]"), ",")
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	var fieldsAppInfoLocalizationsParam []string
	if query.Has("fields[appInfoLocalizations]") {
		fieldsAppInfoLocalizationsParam = strings.Split(query.Get("fields[appInfoLocalizations]"), ",")
	}
	var limitAppInfoLocalizationsParam int32
	if query.Has("limit[appInfoLocalizations]") {
		param, err := parseNumericParameter[int32](
			query.Get("limit[appInfoLocalizations]"),
			WithParse[int32](parseInt32),
			WithMaximum[int32](50),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitAppInfoLocalizationsParam = param
	} else {
	}
	result, err := c.service.AppInfosGetInstance(r.Context(), idParam, fieldsAppInfosParam, includeParam, fieldsAgeRatingDeclarationsParam, fieldsAppCategoriesParam, fieldsAppInfoLocalizationsParam, limitAppInfoLocalizationsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosPrimaryCategoryGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosPrimaryCategoryGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosPrimaryCategoryGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosPrimarySubcategoryOneGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosPrimarySubcategoryOneGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosPrimarySubcategoryOneGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosPrimarySubcategoryTwoGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosPrimarySubcategoryTwoGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosPrimarySubcategoryTwoGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosSecondaryCategoryGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosSecondaryCategoryGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosSecondaryCategoryGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosSecondarySubcategoryOneGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosSecondarySubcategoryOneGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosSecondarySubcategoryOneGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosSecondarySubcategoryTwoGetToOneRelated - 
func (c *AppInfosAPIController) AppInfosSecondarySubcategoryTwoGetToOneRelated(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var fieldsAppCategoriesParam []string
	if query.Has("fields[appCategories]") {
		fieldsAppCategoriesParam = strings.Split(query.Get("fields[appCategories]"), ",")
	}
	result, err := c.service.AppInfosSecondarySubcategoryTwoGetToOneRelated(r.Context(), idParam, fieldsAppCategoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AppInfosUpdateInstance - 
func (c *AppInfosAPIController) AppInfosUpdateInstance(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	appInfoUpdateRequestParam := AppInfoUpdateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&appInfoUpdateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAppInfoUpdateRequestRequired(appInfoUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAppInfoUpdateRequestConstraints(appInfoUpdateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AppInfosUpdateInstance(r.Context(), idParam, appInfoUpdateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
