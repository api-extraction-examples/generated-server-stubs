/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



type UploadSshPublicKeyResponseSshPublicKey struct {

	UserName string `json:"UserName"`

	SSHPublicKeyId string `json:"SSHPublicKeyId"`

	Fingerprint string `json:"Fingerprint"`

	SSHPublicKeyBody string `json:"SSHPublicKeyBody"`

	Status StatusType `json:"Status"`

	UploadDate time.Time `json:"UploadDate,omitempty"`
}

// AssertUploadSshPublicKeyResponseSshPublicKeyRequired checks if the required fields are not zero-ed
func AssertUploadSshPublicKeyResponseSshPublicKeyRequired(obj UploadSshPublicKeyResponseSshPublicKey) error {
	elements := map[string]interface{}{
		"UserName": obj.UserName,
		"SSHPublicKeyId": obj.SSHPublicKeyId,
		"Fingerprint": obj.Fingerprint,
		"SSHPublicKeyBody": obj.SSHPublicKeyBody,
		"Status": obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.UserName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.SSHPublicKeyId); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Fingerprint); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.SSHPublicKeyBody); err != nil {
		return err
	}
	if err := AssertstatusTypeRequired(obj.Status); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.UploadDate); err != nil {
		return err
	}
	return nil
}

// AssertUploadSshPublicKeyResponseSshPublicKeyConstraints checks if the values respects the defined constraints
func AssertUploadSshPublicKeyResponseSshPublicKeyConstraints(obj UploadSshPublicKeyResponseSshPublicKey) error {
	return nil
}
