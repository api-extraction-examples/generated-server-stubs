/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// ServiceLastAccessed - <p>Contains details about the most recent attempt to access the service.</p> <p>This data type is used as a response element in the <a>GetServiceLastAccessedDetails</a> operation.</p>
type ServiceLastAccessed struct {

	ServiceName string `json:"ServiceName"`

	LastAuthenticated time.Time `json:"LastAuthenticated,omitempty"`

	ServiceNamespace string `json:"ServiceNamespace"`

	LastAuthenticatedEntity string `json:"LastAuthenticatedEntity,omitempty"`

	LastAuthenticatedRegion string `json:"LastAuthenticatedRegion,omitempty"`

	TotalAuthenticatedEntities int32 `json:"TotalAuthenticatedEntities,omitempty"`

	TrackedActionsLastAccessed Array `json:"TrackedActionsLastAccessed,omitempty"`
}

// AssertServiceLastAccessedRequired checks if the required fields are not zero-ed
func AssertServiceLastAccessedRequired(obj ServiceLastAccessed) error {
	elements := map[string]interface{}{
		"ServiceName": obj.ServiceName,
		"ServiceNamespace": obj.ServiceNamespace,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.ServiceName); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.LastAuthenticated); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.ServiceNamespace); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.LastAuthenticatedEntity); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.LastAuthenticatedRegion); err != nil {
		return err
	}
	if err := Assertint32Required(obj.TotalAuthenticatedEntities); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.TrackedActionsLastAccessed); err != nil {
		return err
	}
	return nil
}

// AssertServiceLastAccessedConstraints checks if the values respects the defined constraints
func AssertServiceLastAccessedConstraints(obj ServiceLastAccessed) error {
	return nil
}
