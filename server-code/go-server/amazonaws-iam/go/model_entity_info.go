/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// EntityInfo - <p>Contains details about the specified entity (user or role).</p> <p>This data type is an element of the <a>EntityDetails</a> object.</p>
type EntityInfo struct {

	// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
	Arn string `json:"Arn"`

	Name string `json:"Name"`

	Type PolicyOwnerEntityType `json:"Type"`

	Id string `json:"Id"`

	Path string `json:"Path,omitempty"`
}

// AssertEntityInfoRequired checks if the required fields are not zero-ed
func AssertEntityInfoRequired(obj EntityInfo) error {
	elements := map[string]interface{}{
		"Arn": obj.Arn,
		"Name": obj.Name,
		"Type": obj.Type,
		"Id": obj.Id,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.Name); err != nil {
		return err
	}
	if err := AssertpolicyOwnerEntityTypeRequired(obj.Type); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Id); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Path); err != nil {
		return err
	}
	return nil
}

// AssertEntityInfoConstraints checks if the values respects the defined constraints
func AssertEntityInfoConstraints(obj EntityInfo) error {
	return nil
}
