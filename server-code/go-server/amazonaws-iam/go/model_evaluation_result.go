/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// EvaluationResult - <p>Contains the results of a simulation.</p> <p>This data type is used by the return parameter of <code> <a>SimulateCustomPolicy</a> </code> and <code> <a>SimulatePrincipalPolicy</a> </code>.</p>
type EvaluationResult struct {

	EvalActionName string `json:"EvalActionName"`

	EvalResourceName string `json:"EvalResourceName,omitempty"`

	EvalDecision PolicyEvaluationDecisionType `json:"EvalDecision"`

	MatchedStatements Array `json:"MatchedStatements,omitempty"`

	MissingContextValues Array `json:"MissingContextValues,omitempty"`

	OrganizationsDecisionDetail EvaluationResultOrganizationsDecisionDetail `json:"OrganizationsDecisionDetail,omitempty"`

	PermissionsBoundaryDecisionDetail EvaluationResultPermissionsBoundaryDecisionDetail `json:"PermissionsBoundaryDecisionDetail,omitempty"`

	EvalDecisionDetails ModelMap `json:"EvalDecisionDetails,omitempty"`

	ResourceSpecificResults Array `json:"ResourceSpecificResults,omitempty"`
}

// AssertEvaluationResultRequired checks if the required fields are not zero-ed
func AssertEvaluationResultRequired(obj EvaluationResult) error {
	elements := map[string]interface{}{
		"EvalActionName": obj.EvalActionName,
		"EvalDecision": obj.EvalDecision,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.EvalActionName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.EvalResourceName); err != nil {
		return err
	}
	if err := AssertPolicyEvaluationDecisionTypeRequired(obj.EvalDecision); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.MatchedStatements); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.MissingContextValues); err != nil {
		return err
	}
	if err := AssertEvaluationResultOrganizationsDecisionDetailRequired(obj.OrganizationsDecisionDetail); err != nil {
		return err
	}
	if err := AssertEvaluationResultPermissionsBoundaryDecisionDetailRequired(obj.PermissionsBoundaryDecisionDetail); err != nil {
		return err
	}
	if err := AssertmapRequired(obj.EvalDecisionDetails); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.ResourceSpecificResults); err != nil {
		return err
	}
	return nil
}

// AssertEvaluationResultConstraints checks if the values respects the defined constraints
func AssertEvaluationResultConstraints(obj EvaluationResult) error {
	return nil
}
