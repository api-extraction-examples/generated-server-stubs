/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type SortKeyType string

// List of SortKeyType
const (
	SERVICE_NAMESPACE_ASCENDING SortKeyType = "SERVICE_NAMESPACE_ASCENDING"
	SERVICE_NAMESPACE_DESCENDING SortKeyType = "SERVICE_NAMESPACE_DESCENDING"
	LAST_AUTHENTICATED_TIME_ASCENDING SortKeyType = "LAST_AUTHENTICATED_TIME_ASCENDING"
	LAST_AUTHENTICATED_TIME_DESCENDING SortKeyType = "LAST_AUTHENTICATED_TIME_DESCENDING"
)

// AllowedSortKeyTypeEnumValues is all the allowed values of SortKeyType enum
var AllowedSortKeyTypeEnumValues = []SortKeyType{
	"SERVICE_NAMESPACE_ASCENDING",
	"SERVICE_NAMESPACE_DESCENDING",
	"LAST_AUTHENTICATED_TIME_ASCENDING",
	"LAST_AUTHENTICATED_TIME_DESCENDING",
}

// validSortKeyTypeEnumValue provides a map of SortKeyTypes for fast verification of use input
var validSortKeyTypeEnumValues = map[SortKeyType]struct{}{
	"SERVICE_NAMESPACE_ASCENDING": {},
	"SERVICE_NAMESPACE_DESCENDING": {},
	"LAST_AUTHENTICATED_TIME_ASCENDING": {},
	"LAST_AUTHENTICATED_TIME_DESCENDING": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortKeyType) IsValid() bool {
	_, ok := validSortKeyTypeEnumValues[v]
	return ok
}

// NewSortKeyTypeFromValue returns a pointer to a valid SortKeyType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortKeyTypeFromValue(v string) (SortKeyType, error) {
	ev := SortKeyType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SortKeyType: valid values are %v", v, AllowedSortKeyTypeEnumValues)
	}
}



// AssertSortKeyTypeRequired checks if the required fields are not zero-ed
func AssertSortKeyTypeRequired(obj SortKeyType) error {
	return nil
}

// AssertSortKeyTypeConstraints checks if the values respects the defined constraints
func AssertSortKeyTypeConstraints(obj SortKeyType) error {
	return nil
}
