/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// GroupDetail - <p>Contains information about an IAM group, including all of the group's policies.</p> <p>This data type is used as a response element in the <a>GetAccountAuthorizationDetails</a> operation.</p>
type GroupDetail struct {

	Path string `json:"Path,omitempty"`

	GroupName string `json:"GroupName,omitempty"`

	GroupId string `json:"GroupId,omitempty"`

	// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
	Arn string `json:"Arn,omitempty"`

	CreateDate time.Time `json:"CreateDate,omitempty"`

	GroupPolicyList Array `json:"GroupPolicyList,omitempty"`

	AttachedManagedPolicies Array `json:"AttachedManagedPolicies,omitempty"`
}

// AssertGroupDetailRequired checks if the required fields are not zero-ed
func AssertGroupDetailRequired(obj GroupDetail) error {
	if err := AssertstringRequired(obj.Path); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.GroupName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.GroupId); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.CreateDate); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.GroupPolicyList); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.AttachedManagedPolicies); err != nil {
		return err
	}
	return nil
}

// AssertGroupDetailConstraints checks if the values respects the defined constraints
func AssertGroupDetailConstraints(obj GroupDetail) error {
	return nil
}
