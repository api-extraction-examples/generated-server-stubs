/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// AccessKey - <p>Contains information about an Amazon Web Services access key.</p> <p> This data type is used as a response element in the <a>CreateAccessKey</a> and <a>ListAccessKeys</a> operations. </p> <note> <p>The <code>SecretAccessKey</code> value is returned only in response to <a>CreateAccessKey</a>. You can get a secret access key only when you first create an access key; you cannot recover the secret access key later. If you lose a secret access key, you must create a new access key.</p> </note>
type AccessKey struct {

	UserName string `json:"UserName"`

	AccessKeyId string `json:"AccessKeyId"`

	Status StatusType `json:"Status"`

	SecretAccessKey string `json:"SecretAccessKey"`

	CreateDate time.Time `json:"CreateDate,omitempty"`
}

// AssertAccessKeyRequired checks if the required fields are not zero-ed
func AssertAccessKeyRequired(obj AccessKey) error {
	elements := map[string]interface{}{
		"UserName": obj.UserName,
		"AccessKeyId": obj.AccessKeyId,
		"Status": obj.Status,
		"SecretAccessKey": obj.SecretAccessKey,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.UserName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.AccessKeyId); err != nil {
		return err
	}
	if err := AssertstatusTypeRequired(obj.Status); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.SecretAccessKey); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.CreateDate); err != nil {
		return err
	}
	return nil
}

// AssertAccessKeyConstraints checks if the values respects the defined constraints
func AssertAccessKeyConstraints(obj AccessKey) error {
	return nil
}
