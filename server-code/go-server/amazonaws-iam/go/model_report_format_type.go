/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ReportFormatType string

// List of ReportFormatType
const (
	TEXT_CSV ReportFormatType = "text/csv"
)

// AllowedReportFormatTypeEnumValues is all the allowed values of ReportFormatType enum
var AllowedReportFormatTypeEnumValues = []ReportFormatType{
	"text/csv",
}

// validReportFormatTypeEnumValue provides a map of ReportFormatTypes for fast verification of use input
var validReportFormatTypeEnumValues = map[ReportFormatType]struct{}{
	"text/csv": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportFormatType) IsValid() bool {
	_, ok := validReportFormatTypeEnumValues[v]
	return ok
}

// NewReportFormatTypeFromValue returns a pointer to a valid ReportFormatType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportFormatTypeFromValue(v string) (ReportFormatType, error) {
	ev := ReportFormatType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ReportFormatType: valid values are %v", v, AllowedReportFormatTypeEnumValues)
	}
}



// AssertReportFormatTypeRequired checks if the required fields are not zero-ed
func AssertReportFormatTypeRequired(obj ReportFormatType) error {
	return nil
}

// AssertReportFormatTypeConstraints checks if the values respects the defined constraints
func AssertReportFormatTypeConstraints(obj ReportFormatType) error {
	return nil
}
