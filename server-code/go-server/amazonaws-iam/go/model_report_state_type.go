/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ReportStateType string

// List of ReportStateType
const (
	STARTED ReportStateType = "STARTED"
	INPROGRESS ReportStateType = "INPROGRESS"
	COMPLETE ReportStateType = "COMPLETE"
)

// AllowedReportStateTypeEnumValues is all the allowed values of ReportStateType enum
var AllowedReportStateTypeEnumValues = []ReportStateType{
	"STARTED",
	"INPROGRESS",
	"COMPLETE",
}

// validReportStateTypeEnumValue provides a map of ReportStateTypes for fast verification of use input
var validReportStateTypeEnumValues = map[ReportStateType]struct{}{
	"STARTED": {},
	"INPROGRESS": {},
	"COMPLETE": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ReportStateType) IsValid() bool {
	_, ok := validReportStateTypeEnumValues[v]
	return ok
}

// NewReportStateTypeFromValue returns a pointer to a valid ReportStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewReportStateTypeFromValue(v string) (ReportStateType, error) {
	ev := ReportStateType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ReportStateType: valid values are %v", v, AllowedReportStateTypeEnumValues)
	}
}



// AssertReportStateTypeRequired checks if the required fields are not zero-ed
func AssertReportStateTypeRequired(obj ReportStateType) error {
	return nil
}

// AssertReportStateTypeConstraints checks if the values respects the defined constraints
func AssertReportStateTypeConstraints(obj ReportStateType) error {
	return nil
}
