/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// VirtualMfaDevice - Contains information about a virtual MFA device.
type VirtualMfaDevice struct {

	SerialNumber string `json:"SerialNumber"`

	Base32StringSeed string `json:"Base32StringSeed,omitempty"`

	QRCodePNG string `json:"QRCodePNG,omitempty"`

	User VirtualMfaDeviceUser `json:"User,omitempty"`

	EnableDate time.Time `json:"EnableDate,omitempty"`

	Tags Array `json:"Tags,omitempty"`
}

// AssertVirtualMfaDeviceRequired checks if the required fields are not zero-ed
func AssertVirtualMfaDeviceRequired(obj VirtualMfaDevice) error {
	elements := map[string]interface{}{
		"SerialNumber": obj.SerialNumber,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.SerialNumber); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Base32StringSeed); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.QRCodePNG); err != nil {
		return err
	}
	if err := AssertVirtualMfaDeviceUserRequired(obj.User); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.EnableDate); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.Tags); err != nil {
		return err
	}
	return nil
}

// AssertVirtualMfaDeviceConstraints checks if the values respects the defined constraints
func AssertVirtualMfaDeviceConstraints(obj VirtualMfaDevice) error {
	return nil
}
