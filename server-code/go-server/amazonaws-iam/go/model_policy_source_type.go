/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type PolicySourceType string

// List of PolicySourceType
const (
	USER PolicySourceType = "user"
	GROUP PolicySourceType = "group"
	ROLE PolicySourceType = "role"
	AWS_MANAGED PolicySourceType = "aws-managed"
	USER_MANAGED PolicySourceType = "user-managed"
	RESOURCE PolicySourceType = "resource"
	NONE PolicySourceType = "none"
)

// AllowedPolicySourceTypeEnumValues is all the allowed values of PolicySourceType enum
var AllowedPolicySourceTypeEnumValues = []PolicySourceType{
	"user",
	"group",
	"role",
	"aws-managed",
	"user-managed",
	"resource",
	"none",
}

// validPolicySourceTypeEnumValue provides a map of PolicySourceTypes for fast verification of use input
var validPolicySourceTypeEnumValues = map[PolicySourceType]struct{}{
	"user": {},
	"group": {},
	"role": {},
	"aws-managed": {},
	"user-managed": {},
	"resource": {},
	"none": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicySourceType) IsValid() bool {
	_, ok := validPolicySourceTypeEnumValues[v]
	return ok
}

// NewPolicySourceTypeFromValue returns a pointer to a valid PolicySourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicySourceTypeFromValue(v string) (PolicySourceType, error) {
	ev := PolicySourceType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PolicySourceType: valid values are %v", v, AllowedPolicySourceTypeEnumValues)
	}
}



// AssertPolicySourceTypeRequired checks if the required fields are not zero-ed
func AssertPolicySourceTypeRequired(obj PolicySourceType) error {
	return nil
}

// AssertPolicySourceTypeConstraints checks if the values respects the defined constraints
func AssertPolicySourceTypeConstraints(obj PolicySourceType) error {
	return nil
}
