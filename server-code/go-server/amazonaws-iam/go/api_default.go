/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"GETAddClientIDToOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=AddClientIDToOpenIDConnectProvider",
			c.GETAddClientIDToOpenIDConnectProvider,
		},
		"GETAddRoleToInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=AddRoleToInstanceProfile",
			c.GETAddRoleToInstanceProfile,
		},
		"GETAddUserToGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=AddUserToGroup",
			c.GETAddUserToGroup,
		},
		"GETAttachGroupPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=AttachGroupPolicy",
			c.GETAttachGroupPolicy,
		},
		"GETAttachRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=AttachRolePolicy",
			c.GETAttachRolePolicy,
		},
		"GETAttachUserPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=AttachUserPolicy",
			c.GETAttachUserPolicy,
		},
		"GETChangePassword": Route{
			strings.ToUpper("Get"),
			"/#Action=ChangePassword",
			c.GETChangePassword,
		},
		"GETCreateAccessKey": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateAccessKey",
			c.GETCreateAccessKey,
		},
		"GETCreateAccountAlias": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateAccountAlias",
			c.GETCreateAccountAlias,
		},
		"GETCreateGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateGroup",
			c.GETCreateGroup,
		},
		"GETCreateInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateInstanceProfile",
			c.GETCreateInstanceProfile,
		},
		"GETCreateLoginProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateLoginProfile",
			c.GETCreateLoginProfile,
		},
		"GETCreateOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateOpenIDConnectProvider",
			c.GETCreateOpenIDConnectProvider,
		},
		"GETCreatePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=CreatePolicy",
			c.GETCreatePolicy,
		},
		"GETCreatePolicyVersion": Route{
			strings.ToUpper("Get"),
			"/#Action=CreatePolicyVersion",
			c.GETCreatePolicyVersion,
		},
		"GETCreateRole": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateRole",
			c.GETCreateRole,
		},
		"GETCreateSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateSAMLProvider",
			c.GETCreateSAMLProvider,
		},
		"GETCreateServiceLinkedRole": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateServiceLinkedRole",
			c.GETCreateServiceLinkedRole,
		},
		"GETCreateServiceSpecificCredential": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateServiceSpecificCredential",
			c.GETCreateServiceSpecificCredential,
		},
		"GETCreateUser": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateUser",
			c.GETCreateUser,
		},
		"GETCreateVirtualMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=CreateVirtualMFADevice",
			c.GETCreateVirtualMFADevice,
		},
		"GETDeactivateMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=DeactivateMFADevice",
			c.GETDeactivateMFADevice,
		},
		"GETDeleteAccessKey": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteAccessKey",
			c.GETDeleteAccessKey,
		},
		"GETDeleteAccountAlias": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteAccountAlias",
			c.GETDeleteAccountAlias,
		},
		"GETDeleteAccountPasswordPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteAccountPasswordPolicy",
			c.GETDeleteAccountPasswordPolicy,
		},
		"GETDeleteGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteGroup",
			c.GETDeleteGroup,
		},
		"GETDeleteGroupPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteGroupPolicy",
			c.GETDeleteGroupPolicy,
		},
		"GETDeleteInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteInstanceProfile",
			c.GETDeleteInstanceProfile,
		},
		"GETDeleteLoginProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteLoginProfile",
			c.GETDeleteLoginProfile,
		},
		"GETDeleteOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteOpenIDConnectProvider",
			c.GETDeleteOpenIDConnectProvider,
		},
		"GETDeletePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DeletePolicy",
			c.GETDeletePolicy,
		},
		"GETDeletePolicyVersion": Route{
			strings.ToUpper("Get"),
			"/#Action=DeletePolicyVersion",
			c.GETDeletePolicyVersion,
		},
		"GETDeleteRole": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteRole",
			c.GETDeleteRole,
		},
		"GETDeleteRolePermissionsBoundary": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteRolePermissionsBoundary",
			c.GETDeleteRolePermissionsBoundary,
		},
		"GETDeleteRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteRolePolicy",
			c.GETDeleteRolePolicy,
		},
		"GETDeleteSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteSAMLProvider",
			c.GETDeleteSAMLProvider,
		},
		"GETDeleteSSHPublicKey": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteSSHPublicKey",
			c.GETDeleteSSHPublicKey,
		},
		"GETDeleteServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteServerCertificate",
			c.GETDeleteServerCertificate,
		},
		"GETDeleteServiceLinkedRole": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteServiceLinkedRole",
			c.GETDeleteServiceLinkedRole,
		},
		"GETDeleteServiceSpecificCredential": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteServiceSpecificCredential",
			c.GETDeleteServiceSpecificCredential,
		},
		"GETDeleteSigningCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteSigningCertificate",
			c.GETDeleteSigningCertificate,
		},
		"GETDeleteUser": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteUser",
			c.GETDeleteUser,
		},
		"GETDeleteUserPermissionsBoundary": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteUserPermissionsBoundary",
			c.GETDeleteUserPermissionsBoundary,
		},
		"GETDeleteUserPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteUserPolicy",
			c.GETDeleteUserPolicy,
		},
		"GETDeleteVirtualMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=DeleteVirtualMFADevice",
			c.GETDeleteVirtualMFADevice,
		},
		"GETDetachGroupPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DetachGroupPolicy",
			c.GETDetachGroupPolicy,
		},
		"GETDetachRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DetachRolePolicy",
			c.GETDetachRolePolicy,
		},
		"GETDetachUserPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=DetachUserPolicy",
			c.GETDetachUserPolicy,
		},
		"GETEnableMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=EnableMFADevice",
			c.GETEnableMFADevice,
		},
		"GETGenerateCredentialReport": Route{
			strings.ToUpper("Get"),
			"/#Action=GenerateCredentialReport",
			c.GETGenerateCredentialReport,
		},
		"GETGenerateOrganizationsAccessReport": Route{
			strings.ToUpper("Get"),
			"/#Action=GenerateOrganizationsAccessReport",
			c.GETGenerateOrganizationsAccessReport,
		},
		"GETGenerateServiceLastAccessedDetails": Route{
			strings.ToUpper("Get"),
			"/#Action=GenerateServiceLastAccessedDetails",
			c.GETGenerateServiceLastAccessedDetails,
		},
		"GETGetAccessKeyLastUsed": Route{
			strings.ToUpper("Get"),
			"/#Action=GetAccessKeyLastUsed",
			c.GETGetAccessKeyLastUsed,
		},
		"GETGetAccountAuthorizationDetails": Route{
			strings.ToUpper("Get"),
			"/#Action=GetAccountAuthorizationDetails",
			c.GETGetAccountAuthorizationDetails,
		},
		"GETGetAccountPasswordPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetAccountPasswordPolicy",
			c.GETGetAccountPasswordPolicy,
		},
		"GETGetAccountSummary": Route{
			strings.ToUpper("Get"),
			"/#Action=GetAccountSummary",
			c.GETGetAccountSummary,
		},
		"GETGetContextKeysForCustomPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetContextKeysForCustomPolicy",
			c.GETGetContextKeysForCustomPolicy,
		},
		"GETGetContextKeysForPrincipalPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetContextKeysForPrincipalPolicy",
			c.GETGetContextKeysForPrincipalPolicy,
		},
		"GETGetCredentialReport": Route{
			strings.ToUpper("Get"),
			"/#Action=GetCredentialReport",
			c.GETGetCredentialReport,
		},
		"GETGetGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=GetGroup",
			c.GETGetGroup,
		},
		"GETGetGroupPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetGroupPolicy",
			c.GETGetGroupPolicy,
		},
		"GETGetInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=GetInstanceProfile",
			c.GETGetInstanceProfile,
		},
		"GETGetLoginProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=GetLoginProfile",
			c.GETGetLoginProfile,
		},
		"GETGetMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=GetMFADevice",
			c.GETGetMFADevice,
		},
		"GETGetOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=GetOpenIDConnectProvider",
			c.GETGetOpenIDConnectProvider,
		},
		"GETGetOrganizationsAccessReport": Route{
			strings.ToUpper("Get"),
			"/#Action=GetOrganizationsAccessReport",
			c.GETGetOrganizationsAccessReport,
		},
		"GETGetPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetPolicy",
			c.GETGetPolicy,
		},
		"GETGetPolicyVersion": Route{
			strings.ToUpper("Get"),
			"/#Action=GetPolicyVersion",
			c.GETGetPolicyVersion,
		},
		"GETGetRole": Route{
			strings.ToUpper("Get"),
			"/#Action=GetRole",
			c.GETGetRole,
		},
		"GETGetRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetRolePolicy",
			c.GETGetRolePolicy,
		},
		"GETGetSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=GetSAMLProvider",
			c.GETGetSAMLProvider,
		},
		"GETGetSSHPublicKey": Route{
			strings.ToUpper("Get"),
			"/#Action=GetSSHPublicKey",
			c.GETGetSSHPublicKey,
		},
		"GETGetServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=GetServerCertificate",
			c.GETGetServerCertificate,
		},
		"GETGetServiceLastAccessedDetails": Route{
			strings.ToUpper("Get"),
			"/#Action=GetServiceLastAccessedDetails",
			c.GETGetServiceLastAccessedDetails,
		},
		"GETGetServiceLastAccessedDetailsWithEntities": Route{
			strings.ToUpper("Get"),
			"/#Action=GetServiceLastAccessedDetailsWithEntities",
			c.GETGetServiceLastAccessedDetailsWithEntities,
		},
		"GETGetServiceLinkedRoleDeletionStatus": Route{
			strings.ToUpper("Get"),
			"/#Action=GetServiceLinkedRoleDeletionStatus",
			c.GETGetServiceLinkedRoleDeletionStatus,
		},
		"GETGetUser": Route{
			strings.ToUpper("Get"),
			"/#Action=GetUser",
			c.GETGetUser,
		},
		"GETGetUserPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=GetUserPolicy",
			c.GETGetUserPolicy,
		},
		"GETListAccessKeys": Route{
			strings.ToUpper("Get"),
			"/#Action=ListAccessKeys",
			c.GETListAccessKeys,
		},
		"GETListAccountAliases": Route{
			strings.ToUpper("Get"),
			"/#Action=ListAccountAliases",
			c.GETListAccountAliases,
		},
		"GETListAttachedGroupPolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListAttachedGroupPolicies",
			c.GETListAttachedGroupPolicies,
		},
		"GETListAttachedRolePolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListAttachedRolePolicies",
			c.GETListAttachedRolePolicies,
		},
		"GETListAttachedUserPolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListAttachedUserPolicies",
			c.GETListAttachedUserPolicies,
		},
		"GETListEntitiesForPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=ListEntitiesForPolicy",
			c.GETListEntitiesForPolicy,
		},
		"GETListGroupPolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListGroupPolicies",
			c.GETListGroupPolicies,
		},
		"GETListGroups": Route{
			strings.ToUpper("Get"),
			"/#Action=ListGroups",
			c.GETListGroups,
		},
		"GETListGroupsForUser": Route{
			strings.ToUpper("Get"),
			"/#Action=ListGroupsForUser",
			c.GETListGroupsForUser,
		},
		"GETListInstanceProfileTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListInstanceProfileTags",
			c.GETListInstanceProfileTags,
		},
		"GETListInstanceProfiles": Route{
			strings.ToUpper("Get"),
			"/#Action=ListInstanceProfiles",
			c.GETListInstanceProfiles,
		},
		"GETListInstanceProfilesForRole": Route{
			strings.ToUpper("Get"),
			"/#Action=ListInstanceProfilesForRole",
			c.GETListInstanceProfilesForRole,
		},
		"GETListMFADeviceTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListMFADeviceTags",
			c.GETListMFADeviceTags,
		},
		"GETListMFADevices": Route{
			strings.ToUpper("Get"),
			"/#Action=ListMFADevices",
			c.GETListMFADevices,
		},
		"GETListOpenIDConnectProviderTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListOpenIDConnectProviderTags",
			c.GETListOpenIDConnectProviderTags,
		},
		"GETListOpenIDConnectProviders": Route{
			strings.ToUpper("Get"),
			"/#Action=ListOpenIDConnectProviders",
			c.GETListOpenIDConnectProviders,
		},
		"GETListPolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListPolicies",
			c.GETListPolicies,
		},
		"GETListPoliciesGrantingServiceAccess": Route{
			strings.ToUpper("Get"),
			"/#Action=ListPoliciesGrantingServiceAccess",
			c.GETListPoliciesGrantingServiceAccess,
		},
		"GETListPolicyTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListPolicyTags",
			c.GETListPolicyTags,
		},
		"GETListPolicyVersions": Route{
			strings.ToUpper("Get"),
			"/#Action=ListPolicyVersions",
			c.GETListPolicyVersions,
		},
		"GETListRolePolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListRolePolicies",
			c.GETListRolePolicies,
		},
		"GETListRoleTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListRoleTags",
			c.GETListRoleTags,
		},
		"GETListRoles": Route{
			strings.ToUpper("Get"),
			"/#Action=ListRoles",
			c.GETListRoles,
		},
		"GETListSAMLProviderTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListSAMLProviderTags",
			c.GETListSAMLProviderTags,
		},
		"GETListSAMLProviders": Route{
			strings.ToUpper("Get"),
			"/#Action=ListSAMLProviders",
			c.GETListSAMLProviders,
		},
		"GETListSSHPublicKeys": Route{
			strings.ToUpper("Get"),
			"/#Action=ListSSHPublicKeys",
			c.GETListSSHPublicKeys,
		},
		"GETListServerCertificateTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListServerCertificateTags",
			c.GETListServerCertificateTags,
		},
		"GETListServerCertificates": Route{
			strings.ToUpper("Get"),
			"/#Action=ListServerCertificates",
			c.GETListServerCertificates,
		},
		"GETListServiceSpecificCredentials": Route{
			strings.ToUpper("Get"),
			"/#Action=ListServiceSpecificCredentials",
			c.GETListServiceSpecificCredentials,
		},
		"GETListSigningCertificates": Route{
			strings.ToUpper("Get"),
			"/#Action=ListSigningCertificates",
			c.GETListSigningCertificates,
		},
		"GETListUserPolicies": Route{
			strings.ToUpper("Get"),
			"/#Action=ListUserPolicies",
			c.GETListUserPolicies,
		},
		"GETListUserTags": Route{
			strings.ToUpper("Get"),
			"/#Action=ListUserTags",
			c.GETListUserTags,
		},
		"GETListUsers": Route{
			strings.ToUpper("Get"),
			"/#Action=ListUsers",
			c.GETListUsers,
		},
		"GETListVirtualMFADevices": Route{
			strings.ToUpper("Get"),
			"/#Action=ListVirtualMFADevices",
			c.GETListVirtualMFADevices,
		},
		"GETPutGroupPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=PutGroupPolicy",
			c.GETPutGroupPolicy,
		},
		"GETPutRolePermissionsBoundary": Route{
			strings.ToUpper("Get"),
			"/#Action=PutRolePermissionsBoundary",
			c.GETPutRolePermissionsBoundary,
		},
		"GETPutRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=PutRolePolicy",
			c.GETPutRolePolicy,
		},
		"GETPutUserPermissionsBoundary": Route{
			strings.ToUpper("Get"),
			"/#Action=PutUserPermissionsBoundary",
			c.GETPutUserPermissionsBoundary,
		},
		"GETPutUserPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=PutUserPolicy",
			c.GETPutUserPolicy,
		},
		"GETRemoveClientIDFromOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=RemoveClientIDFromOpenIDConnectProvider",
			c.GETRemoveClientIDFromOpenIDConnectProvider,
		},
		"GETRemoveRoleFromInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=RemoveRoleFromInstanceProfile",
			c.GETRemoveRoleFromInstanceProfile,
		},
		"GETRemoveUserFromGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=RemoveUserFromGroup",
			c.GETRemoveUserFromGroup,
		},
		"GETResetServiceSpecificCredential": Route{
			strings.ToUpper("Get"),
			"/#Action=ResetServiceSpecificCredential",
			c.GETResetServiceSpecificCredential,
		},
		"GETResyncMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=ResyncMFADevice",
			c.GETResyncMFADevice,
		},
		"GETSetDefaultPolicyVersion": Route{
			strings.ToUpper("Get"),
			"/#Action=SetDefaultPolicyVersion",
			c.GETSetDefaultPolicyVersion,
		},
		"GETSetSecurityTokenServicePreferences": Route{
			strings.ToUpper("Get"),
			"/#Action=SetSecurityTokenServicePreferences",
			c.GETSetSecurityTokenServicePreferences,
		},
		"GETSimulateCustomPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=SimulateCustomPolicy",
			c.GETSimulateCustomPolicy,
		},
		"GETSimulatePrincipalPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=SimulatePrincipalPolicy",
			c.GETSimulatePrincipalPolicy,
		},
		"GETTagInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=TagInstanceProfile",
			c.GETTagInstanceProfile,
		},
		"GETTagMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=TagMFADevice",
			c.GETTagMFADevice,
		},
		"GETTagOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=TagOpenIDConnectProvider",
			c.GETTagOpenIDConnectProvider,
		},
		"GETTagPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=TagPolicy",
			c.GETTagPolicy,
		},
		"GETTagRole": Route{
			strings.ToUpper("Get"),
			"/#Action=TagRole",
			c.GETTagRole,
		},
		"GETTagSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=TagSAMLProvider",
			c.GETTagSAMLProvider,
		},
		"GETTagServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=TagServerCertificate",
			c.GETTagServerCertificate,
		},
		"GETTagUser": Route{
			strings.ToUpper("Get"),
			"/#Action=TagUser",
			c.GETTagUser,
		},
		"GETUntagInstanceProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagInstanceProfile",
			c.GETUntagInstanceProfile,
		},
		"GETUntagMFADevice": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagMFADevice",
			c.GETUntagMFADevice,
		},
		"GETUntagOpenIDConnectProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagOpenIDConnectProvider",
			c.GETUntagOpenIDConnectProvider,
		},
		"GETUntagPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagPolicy",
			c.GETUntagPolicy,
		},
		"GETUntagRole": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagRole",
			c.GETUntagRole,
		},
		"GETUntagSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagSAMLProvider",
			c.GETUntagSAMLProvider,
		},
		"GETUntagServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagServerCertificate",
			c.GETUntagServerCertificate,
		},
		"GETUntagUser": Route{
			strings.ToUpper("Get"),
			"/#Action=UntagUser",
			c.GETUntagUser,
		},
		"GETUpdateAccessKey": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateAccessKey",
			c.GETUpdateAccessKey,
		},
		"GETUpdateAccountPasswordPolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateAccountPasswordPolicy",
			c.GETUpdateAccountPasswordPolicy,
		},
		"GETUpdateAssumeRolePolicy": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateAssumeRolePolicy",
			c.GETUpdateAssumeRolePolicy,
		},
		"GETUpdateGroup": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateGroup",
			c.GETUpdateGroup,
		},
		"GETUpdateLoginProfile": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateLoginProfile",
			c.GETUpdateLoginProfile,
		},
		"GETUpdateOpenIDConnectProviderThumbprint": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateOpenIDConnectProviderThumbprint",
			c.GETUpdateOpenIDConnectProviderThumbprint,
		},
		"GETUpdateRole": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateRole",
			c.GETUpdateRole,
		},
		"GETUpdateRoleDescription": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateRoleDescription",
			c.GETUpdateRoleDescription,
		},
		"GETUpdateSAMLProvider": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateSAMLProvider",
			c.GETUpdateSAMLProvider,
		},
		"GETUpdateSSHPublicKey": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateSSHPublicKey",
			c.GETUpdateSSHPublicKey,
		},
		"GETUpdateServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateServerCertificate",
			c.GETUpdateServerCertificate,
		},
		"GETUpdateServiceSpecificCredential": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateServiceSpecificCredential",
			c.GETUpdateServiceSpecificCredential,
		},
		"GETUpdateSigningCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateSigningCertificate",
			c.GETUpdateSigningCertificate,
		},
		"GETUpdateUser": Route{
			strings.ToUpper("Get"),
			"/#Action=UpdateUser",
			c.GETUpdateUser,
		},
		"GETUploadSSHPublicKey": Route{
			strings.ToUpper("Get"),
			"/#Action=UploadSSHPublicKey",
			c.GETUploadSSHPublicKey,
		},
		"GETUploadServerCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=UploadServerCertificate",
			c.GETUploadServerCertificate,
		},
		"GETUploadSigningCertificate": Route{
			strings.ToUpper("Get"),
			"/#Action=UploadSigningCertificate",
			c.GETUploadSigningCertificate,
		},
		"POSTAddClientIDToOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=AddClientIDToOpenIDConnectProvider",
			c.POSTAddClientIDToOpenIDConnectProvider,
		},
		"POSTAddRoleToInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=AddRoleToInstanceProfile",
			c.POSTAddRoleToInstanceProfile,
		},
		"POSTAddUserToGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=AddUserToGroup",
			c.POSTAddUserToGroup,
		},
		"POSTAttachGroupPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=AttachGroupPolicy",
			c.POSTAttachGroupPolicy,
		},
		"POSTAttachRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=AttachRolePolicy",
			c.POSTAttachRolePolicy,
		},
		"POSTAttachUserPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=AttachUserPolicy",
			c.POSTAttachUserPolicy,
		},
		"POSTChangePassword": Route{
			strings.ToUpper("Post"),
			"/#Action=ChangePassword",
			c.POSTChangePassword,
		},
		"POSTCreateAccessKey": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateAccessKey",
			c.POSTCreateAccessKey,
		},
		"POSTCreateAccountAlias": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateAccountAlias",
			c.POSTCreateAccountAlias,
		},
		"POSTCreateGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateGroup",
			c.POSTCreateGroup,
		},
		"POSTCreateInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateInstanceProfile",
			c.POSTCreateInstanceProfile,
		},
		"POSTCreateLoginProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateLoginProfile",
			c.POSTCreateLoginProfile,
		},
		"POSTCreateOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateOpenIDConnectProvider",
			c.POSTCreateOpenIDConnectProvider,
		},
		"POSTCreatePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=CreatePolicy",
			c.POSTCreatePolicy,
		},
		"POSTCreatePolicyVersion": Route{
			strings.ToUpper("Post"),
			"/#Action=CreatePolicyVersion",
			c.POSTCreatePolicyVersion,
		},
		"POSTCreateRole": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateRole",
			c.POSTCreateRole,
		},
		"POSTCreateSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateSAMLProvider",
			c.POSTCreateSAMLProvider,
		},
		"POSTCreateServiceLinkedRole": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateServiceLinkedRole",
			c.POSTCreateServiceLinkedRole,
		},
		"POSTCreateServiceSpecificCredential": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateServiceSpecificCredential",
			c.POSTCreateServiceSpecificCredential,
		},
		"POSTCreateUser": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateUser",
			c.POSTCreateUser,
		},
		"POSTCreateVirtualMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=CreateVirtualMFADevice",
			c.POSTCreateVirtualMFADevice,
		},
		"POSTDeactivateMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=DeactivateMFADevice",
			c.POSTDeactivateMFADevice,
		},
		"POSTDeleteAccessKey": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteAccessKey",
			c.POSTDeleteAccessKey,
		},
		"POSTDeleteAccountAlias": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteAccountAlias",
			c.POSTDeleteAccountAlias,
		},
		"POSTDeleteAccountPasswordPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteAccountPasswordPolicy",
			c.POSTDeleteAccountPasswordPolicy,
		},
		"POSTDeleteGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteGroup",
			c.POSTDeleteGroup,
		},
		"POSTDeleteGroupPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteGroupPolicy",
			c.POSTDeleteGroupPolicy,
		},
		"POSTDeleteInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteInstanceProfile",
			c.POSTDeleteInstanceProfile,
		},
		"POSTDeleteLoginProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteLoginProfile",
			c.POSTDeleteLoginProfile,
		},
		"POSTDeleteOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteOpenIDConnectProvider",
			c.POSTDeleteOpenIDConnectProvider,
		},
		"POSTDeletePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DeletePolicy",
			c.POSTDeletePolicy,
		},
		"POSTDeletePolicyVersion": Route{
			strings.ToUpper("Post"),
			"/#Action=DeletePolicyVersion",
			c.POSTDeletePolicyVersion,
		},
		"POSTDeleteRole": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteRole",
			c.POSTDeleteRole,
		},
		"POSTDeleteRolePermissionsBoundary": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteRolePermissionsBoundary",
			c.POSTDeleteRolePermissionsBoundary,
		},
		"POSTDeleteRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteRolePolicy",
			c.POSTDeleteRolePolicy,
		},
		"POSTDeleteSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteSAMLProvider",
			c.POSTDeleteSAMLProvider,
		},
		"POSTDeleteSSHPublicKey": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteSSHPublicKey",
			c.POSTDeleteSSHPublicKey,
		},
		"POSTDeleteServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteServerCertificate",
			c.POSTDeleteServerCertificate,
		},
		"POSTDeleteServiceLinkedRole": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteServiceLinkedRole",
			c.POSTDeleteServiceLinkedRole,
		},
		"POSTDeleteServiceSpecificCredential": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteServiceSpecificCredential",
			c.POSTDeleteServiceSpecificCredential,
		},
		"POSTDeleteSigningCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteSigningCertificate",
			c.POSTDeleteSigningCertificate,
		},
		"POSTDeleteUser": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteUser",
			c.POSTDeleteUser,
		},
		"POSTDeleteUserPermissionsBoundary": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteUserPermissionsBoundary",
			c.POSTDeleteUserPermissionsBoundary,
		},
		"POSTDeleteUserPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteUserPolicy",
			c.POSTDeleteUserPolicy,
		},
		"POSTDeleteVirtualMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=DeleteVirtualMFADevice",
			c.POSTDeleteVirtualMFADevice,
		},
		"POSTDetachGroupPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DetachGroupPolicy",
			c.POSTDetachGroupPolicy,
		},
		"POSTDetachRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DetachRolePolicy",
			c.POSTDetachRolePolicy,
		},
		"POSTDetachUserPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=DetachUserPolicy",
			c.POSTDetachUserPolicy,
		},
		"POSTEnableMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=EnableMFADevice",
			c.POSTEnableMFADevice,
		},
		"POSTGenerateCredentialReport": Route{
			strings.ToUpper("Post"),
			"/#Action=GenerateCredentialReport",
			c.POSTGenerateCredentialReport,
		},
		"POSTGenerateOrganizationsAccessReport": Route{
			strings.ToUpper("Post"),
			"/#Action=GenerateOrganizationsAccessReport",
			c.POSTGenerateOrganizationsAccessReport,
		},
		"POSTGenerateServiceLastAccessedDetails": Route{
			strings.ToUpper("Post"),
			"/#Action=GenerateServiceLastAccessedDetails",
			c.POSTGenerateServiceLastAccessedDetails,
		},
		"POSTGetAccessKeyLastUsed": Route{
			strings.ToUpper("Post"),
			"/#Action=GetAccessKeyLastUsed",
			c.POSTGetAccessKeyLastUsed,
		},
		"POSTGetAccountAuthorizationDetails": Route{
			strings.ToUpper("Post"),
			"/#Action=GetAccountAuthorizationDetails",
			c.POSTGetAccountAuthorizationDetails,
		},
		"POSTGetAccountPasswordPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetAccountPasswordPolicy",
			c.POSTGetAccountPasswordPolicy,
		},
		"POSTGetAccountSummary": Route{
			strings.ToUpper("Post"),
			"/#Action=GetAccountSummary",
			c.POSTGetAccountSummary,
		},
		"POSTGetContextKeysForCustomPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetContextKeysForCustomPolicy",
			c.POSTGetContextKeysForCustomPolicy,
		},
		"POSTGetContextKeysForPrincipalPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetContextKeysForPrincipalPolicy",
			c.POSTGetContextKeysForPrincipalPolicy,
		},
		"POSTGetCredentialReport": Route{
			strings.ToUpper("Post"),
			"/#Action=GetCredentialReport",
			c.POSTGetCredentialReport,
		},
		"POSTGetGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=GetGroup",
			c.POSTGetGroup,
		},
		"POSTGetGroupPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetGroupPolicy",
			c.POSTGetGroupPolicy,
		},
		"POSTGetInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=GetInstanceProfile",
			c.POSTGetInstanceProfile,
		},
		"POSTGetLoginProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=GetLoginProfile",
			c.POSTGetLoginProfile,
		},
		"POSTGetMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=GetMFADevice",
			c.POSTGetMFADevice,
		},
		"POSTGetOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=GetOpenIDConnectProvider",
			c.POSTGetOpenIDConnectProvider,
		},
		"POSTGetOrganizationsAccessReport": Route{
			strings.ToUpper("Post"),
			"/#Action=GetOrganizationsAccessReport",
			c.POSTGetOrganizationsAccessReport,
		},
		"POSTGetPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetPolicy",
			c.POSTGetPolicy,
		},
		"POSTGetPolicyVersion": Route{
			strings.ToUpper("Post"),
			"/#Action=GetPolicyVersion",
			c.POSTGetPolicyVersion,
		},
		"POSTGetRole": Route{
			strings.ToUpper("Post"),
			"/#Action=GetRole",
			c.POSTGetRole,
		},
		"POSTGetRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetRolePolicy",
			c.POSTGetRolePolicy,
		},
		"POSTGetSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=GetSAMLProvider",
			c.POSTGetSAMLProvider,
		},
		"POSTGetSSHPublicKey": Route{
			strings.ToUpper("Post"),
			"/#Action=GetSSHPublicKey",
			c.POSTGetSSHPublicKey,
		},
		"POSTGetServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=GetServerCertificate",
			c.POSTGetServerCertificate,
		},
		"POSTGetServiceLastAccessedDetails": Route{
			strings.ToUpper("Post"),
			"/#Action=GetServiceLastAccessedDetails",
			c.POSTGetServiceLastAccessedDetails,
		},
		"POSTGetServiceLastAccessedDetailsWithEntities": Route{
			strings.ToUpper("Post"),
			"/#Action=GetServiceLastAccessedDetailsWithEntities",
			c.POSTGetServiceLastAccessedDetailsWithEntities,
		},
		"POSTGetServiceLinkedRoleDeletionStatus": Route{
			strings.ToUpper("Post"),
			"/#Action=GetServiceLinkedRoleDeletionStatus",
			c.POSTGetServiceLinkedRoleDeletionStatus,
		},
		"POSTGetUser": Route{
			strings.ToUpper("Post"),
			"/#Action=GetUser",
			c.POSTGetUser,
		},
		"POSTGetUserPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=GetUserPolicy",
			c.POSTGetUserPolicy,
		},
		"POSTListAccessKeys": Route{
			strings.ToUpper("Post"),
			"/#Action=ListAccessKeys",
			c.POSTListAccessKeys,
		},
		"POSTListAccountAliases": Route{
			strings.ToUpper("Post"),
			"/#Action=ListAccountAliases",
			c.POSTListAccountAliases,
		},
		"POSTListAttachedGroupPolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListAttachedGroupPolicies",
			c.POSTListAttachedGroupPolicies,
		},
		"POSTListAttachedRolePolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListAttachedRolePolicies",
			c.POSTListAttachedRolePolicies,
		},
		"POSTListAttachedUserPolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListAttachedUserPolicies",
			c.POSTListAttachedUserPolicies,
		},
		"POSTListEntitiesForPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=ListEntitiesForPolicy",
			c.POSTListEntitiesForPolicy,
		},
		"POSTListGroupPolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListGroupPolicies",
			c.POSTListGroupPolicies,
		},
		"POSTListGroups": Route{
			strings.ToUpper("Post"),
			"/#Action=ListGroups",
			c.POSTListGroups,
		},
		"POSTListGroupsForUser": Route{
			strings.ToUpper("Post"),
			"/#Action=ListGroupsForUser",
			c.POSTListGroupsForUser,
		},
		"POSTListInstanceProfileTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListInstanceProfileTags",
			c.POSTListInstanceProfileTags,
		},
		"POSTListInstanceProfiles": Route{
			strings.ToUpper("Post"),
			"/#Action=ListInstanceProfiles",
			c.POSTListInstanceProfiles,
		},
		"POSTListInstanceProfilesForRole": Route{
			strings.ToUpper("Post"),
			"/#Action=ListInstanceProfilesForRole",
			c.POSTListInstanceProfilesForRole,
		},
		"POSTListMFADeviceTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListMFADeviceTags",
			c.POSTListMFADeviceTags,
		},
		"POSTListMFADevices": Route{
			strings.ToUpper("Post"),
			"/#Action=ListMFADevices",
			c.POSTListMFADevices,
		},
		"POSTListOpenIDConnectProviderTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListOpenIDConnectProviderTags",
			c.POSTListOpenIDConnectProviderTags,
		},
		"POSTListOpenIDConnectProviders": Route{
			strings.ToUpper("Post"),
			"/#Action=ListOpenIDConnectProviders",
			c.POSTListOpenIDConnectProviders,
		},
		"POSTListPolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListPolicies",
			c.POSTListPolicies,
		},
		"POSTListPoliciesGrantingServiceAccess": Route{
			strings.ToUpper("Post"),
			"/#Action=ListPoliciesGrantingServiceAccess",
			c.POSTListPoliciesGrantingServiceAccess,
		},
		"POSTListPolicyTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListPolicyTags",
			c.POSTListPolicyTags,
		},
		"POSTListPolicyVersions": Route{
			strings.ToUpper("Post"),
			"/#Action=ListPolicyVersions",
			c.POSTListPolicyVersions,
		},
		"POSTListRolePolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListRolePolicies",
			c.POSTListRolePolicies,
		},
		"POSTListRoleTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListRoleTags",
			c.POSTListRoleTags,
		},
		"POSTListRoles": Route{
			strings.ToUpper("Post"),
			"/#Action=ListRoles",
			c.POSTListRoles,
		},
		"POSTListSAMLProviderTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListSAMLProviderTags",
			c.POSTListSAMLProviderTags,
		},
		"POSTListSAMLProviders": Route{
			strings.ToUpper("Post"),
			"/#Action=ListSAMLProviders",
			c.POSTListSAMLProviders,
		},
		"POSTListSSHPublicKeys": Route{
			strings.ToUpper("Post"),
			"/#Action=ListSSHPublicKeys",
			c.POSTListSSHPublicKeys,
		},
		"POSTListServerCertificateTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListServerCertificateTags",
			c.POSTListServerCertificateTags,
		},
		"POSTListServerCertificates": Route{
			strings.ToUpper("Post"),
			"/#Action=ListServerCertificates",
			c.POSTListServerCertificates,
		},
		"POSTListServiceSpecificCredentials": Route{
			strings.ToUpper("Post"),
			"/#Action=ListServiceSpecificCredentials",
			c.POSTListServiceSpecificCredentials,
		},
		"POSTListSigningCertificates": Route{
			strings.ToUpper("Post"),
			"/#Action=ListSigningCertificates",
			c.POSTListSigningCertificates,
		},
		"POSTListUserPolicies": Route{
			strings.ToUpper("Post"),
			"/#Action=ListUserPolicies",
			c.POSTListUserPolicies,
		},
		"POSTListUserTags": Route{
			strings.ToUpper("Post"),
			"/#Action=ListUserTags",
			c.POSTListUserTags,
		},
		"POSTListUsers": Route{
			strings.ToUpper("Post"),
			"/#Action=ListUsers",
			c.POSTListUsers,
		},
		"POSTListVirtualMFADevices": Route{
			strings.ToUpper("Post"),
			"/#Action=ListVirtualMFADevices",
			c.POSTListVirtualMFADevices,
		},
		"POSTPutGroupPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=PutGroupPolicy",
			c.POSTPutGroupPolicy,
		},
		"POSTPutRolePermissionsBoundary": Route{
			strings.ToUpper("Post"),
			"/#Action=PutRolePermissionsBoundary",
			c.POSTPutRolePermissionsBoundary,
		},
		"POSTPutRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=PutRolePolicy",
			c.POSTPutRolePolicy,
		},
		"POSTPutUserPermissionsBoundary": Route{
			strings.ToUpper("Post"),
			"/#Action=PutUserPermissionsBoundary",
			c.POSTPutUserPermissionsBoundary,
		},
		"POSTPutUserPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=PutUserPolicy",
			c.POSTPutUserPolicy,
		},
		"POSTRemoveClientIDFromOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=RemoveClientIDFromOpenIDConnectProvider",
			c.POSTRemoveClientIDFromOpenIDConnectProvider,
		},
		"POSTRemoveRoleFromInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=RemoveRoleFromInstanceProfile",
			c.POSTRemoveRoleFromInstanceProfile,
		},
		"POSTRemoveUserFromGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=RemoveUserFromGroup",
			c.POSTRemoveUserFromGroup,
		},
		"POSTResetServiceSpecificCredential": Route{
			strings.ToUpper("Post"),
			"/#Action=ResetServiceSpecificCredential",
			c.POSTResetServiceSpecificCredential,
		},
		"POSTResyncMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=ResyncMFADevice",
			c.POSTResyncMFADevice,
		},
		"POSTSetDefaultPolicyVersion": Route{
			strings.ToUpper("Post"),
			"/#Action=SetDefaultPolicyVersion",
			c.POSTSetDefaultPolicyVersion,
		},
		"POSTSetSecurityTokenServicePreferences": Route{
			strings.ToUpper("Post"),
			"/#Action=SetSecurityTokenServicePreferences",
			c.POSTSetSecurityTokenServicePreferences,
		},
		"POSTSimulateCustomPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=SimulateCustomPolicy",
			c.POSTSimulateCustomPolicy,
		},
		"POSTSimulatePrincipalPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=SimulatePrincipalPolicy",
			c.POSTSimulatePrincipalPolicy,
		},
		"POSTTagInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=TagInstanceProfile",
			c.POSTTagInstanceProfile,
		},
		"POSTTagMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=TagMFADevice",
			c.POSTTagMFADevice,
		},
		"POSTTagOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=TagOpenIDConnectProvider",
			c.POSTTagOpenIDConnectProvider,
		},
		"POSTTagPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=TagPolicy",
			c.POSTTagPolicy,
		},
		"POSTTagRole": Route{
			strings.ToUpper("Post"),
			"/#Action=TagRole",
			c.POSTTagRole,
		},
		"POSTTagSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=TagSAMLProvider",
			c.POSTTagSAMLProvider,
		},
		"POSTTagServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=TagServerCertificate",
			c.POSTTagServerCertificate,
		},
		"POSTTagUser": Route{
			strings.ToUpper("Post"),
			"/#Action=TagUser",
			c.POSTTagUser,
		},
		"POSTUntagInstanceProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagInstanceProfile",
			c.POSTUntagInstanceProfile,
		},
		"POSTUntagMFADevice": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagMFADevice",
			c.POSTUntagMFADevice,
		},
		"POSTUntagOpenIDConnectProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagOpenIDConnectProvider",
			c.POSTUntagOpenIDConnectProvider,
		},
		"POSTUntagPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagPolicy",
			c.POSTUntagPolicy,
		},
		"POSTUntagRole": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagRole",
			c.POSTUntagRole,
		},
		"POSTUntagSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagSAMLProvider",
			c.POSTUntagSAMLProvider,
		},
		"POSTUntagServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagServerCertificate",
			c.POSTUntagServerCertificate,
		},
		"POSTUntagUser": Route{
			strings.ToUpper("Post"),
			"/#Action=UntagUser",
			c.POSTUntagUser,
		},
		"POSTUpdateAccessKey": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateAccessKey",
			c.POSTUpdateAccessKey,
		},
		"POSTUpdateAccountPasswordPolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateAccountPasswordPolicy",
			c.POSTUpdateAccountPasswordPolicy,
		},
		"POSTUpdateAssumeRolePolicy": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateAssumeRolePolicy",
			c.POSTUpdateAssumeRolePolicy,
		},
		"POSTUpdateGroup": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateGroup",
			c.POSTUpdateGroup,
		},
		"POSTUpdateLoginProfile": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateLoginProfile",
			c.POSTUpdateLoginProfile,
		},
		"POSTUpdateOpenIDConnectProviderThumbprint": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateOpenIDConnectProviderThumbprint",
			c.POSTUpdateOpenIDConnectProviderThumbprint,
		},
		"POSTUpdateRole": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateRole",
			c.POSTUpdateRole,
		},
		"POSTUpdateRoleDescription": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateRoleDescription",
			c.POSTUpdateRoleDescription,
		},
		"POSTUpdateSAMLProvider": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateSAMLProvider",
			c.POSTUpdateSAMLProvider,
		},
		"POSTUpdateSSHPublicKey": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateSSHPublicKey",
			c.POSTUpdateSSHPublicKey,
		},
		"POSTUpdateServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateServerCertificate",
			c.POSTUpdateServerCertificate,
		},
		"POSTUpdateServiceSpecificCredential": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateServiceSpecificCredential",
			c.POSTUpdateServiceSpecificCredential,
		},
		"POSTUpdateSigningCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateSigningCertificate",
			c.POSTUpdateSigningCertificate,
		},
		"POSTUpdateUser": Route{
			strings.ToUpper("Post"),
			"/#Action=UpdateUser",
			c.POSTUpdateUser,
		},
		"POSTUploadSSHPublicKey": Route{
			strings.ToUpper("Post"),
			"/#Action=UploadSSHPublicKey",
			c.POSTUploadSSHPublicKey,
		},
		"POSTUploadServerCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=UploadServerCertificate",
			c.POSTUploadServerCertificate,
		},
		"POSTUploadSigningCertificate": Route{
			strings.ToUpper("Post"),
			"/#Action=UploadSigningCertificate",
			c.POSTUploadSigningCertificate,
		},
	}
}

// GETAddClientIDToOpenIDConnectProvider - 
func (c *DefaultAPIController) GETAddClientIDToOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var clientIDParam string
	if query.Has("ClientID") {
		param := query.Get("ClientID")

		clientIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ClientID"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAddClientIDToOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, clientIDParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETAddRoleToInstanceProfile - 
func (c *DefaultAPIController) GETAddRoleToInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAddRoleToInstanceProfile(r.Context(), instanceProfileNameParam, roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETAddUserToGroup - 
func (c *DefaultAPIController) GETAddUserToGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAddUserToGroup(r.Context(), groupNameParam, userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETAttachGroupPolicy - 
func (c *DefaultAPIController) GETAttachGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAttachGroupPolicy(r.Context(), groupNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETAttachRolePolicy - 
func (c *DefaultAPIController) GETAttachRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAttachRolePolicy(r.Context(), roleNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETAttachUserPolicy - 
func (c *DefaultAPIController) GETAttachUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETAttachUserPolicy(r.Context(), userNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETChangePassword - 
func (c *DefaultAPIController) GETChangePassword(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var oldPasswordParam string
	if query.Has("OldPassword") {
		param := query.Get("OldPassword")

		oldPasswordParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OldPassword"}, nil)
		return
	}
	var newPasswordParam string
	if query.Has("NewPassword") {
		param := query.Get("NewPassword")

		newPasswordParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "NewPassword"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETChangePassword(r.Context(), oldPasswordParam, newPasswordParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateAccessKey - 
func (c *DefaultAPIController) GETCreateAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETCreateAccessKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateAccountAlias - 
func (c *DefaultAPIController) GETCreateAccountAlias(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accountAliasParam string
	if query.Has("AccountAlias") {
		param := query.Get("AccountAlias")

		accountAliasParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AccountAlias"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETCreateAccountAlias(r.Context(), accountAliasParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateGroup - 
func (c *DefaultAPIController) GETCreateGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	result, err := c.service.GETCreateGroup(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateInstanceProfile - 
func (c *DefaultAPIController) GETCreateInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateInstanceProfile(r.Context(), instanceProfileNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateLoginProfile - 
func (c *DefaultAPIController) GETCreateLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var passwordParam string
	if query.Has("Password") {
		param := query.Get("Password")

		passwordParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Password"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var passwordResetRequiredParam bool
	if query.Has("PasswordResetRequired") {
		param, err := parseBoolParameter(
			query.Get("PasswordResetRequired"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		passwordResetRequiredParam = param
	} else {
	}
	result, err := c.service.GETCreateLoginProfile(r.Context(), userNameParam, passwordParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, passwordResetRequiredParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateOpenIDConnectProvider - 
func (c *DefaultAPIController) GETCreateOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var urlParam string
	if query.Has("Url") {
		param := query.Get("Url")

		urlParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Url"}, nil)
		return
	}
	var thumbprintListParam []string
	if query.Has("ThumbprintList") {
		thumbprintListParam = strings.Split(query.Get("ThumbprintList"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var clientIDListParam []string
	if query.Has("ClientIDList") {
		clientIDListParam = strings.Split(query.Get("ClientIDList"), ",")
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateOpenIDConnectProvider(r.Context(), urlParam, thumbprintListParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, clientIDListParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreatePolicy - 
func (c *DefaultAPIController) GETCreatePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var descriptionParam string
	if query.Has("Description") {
		param := query.Get("Description")

		descriptionParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreatePolicy(r.Context(), policyNameParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, descriptionParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreatePolicyVersion - 
func (c *DefaultAPIController) GETCreatePolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var setAsDefaultParam bool
	if query.Has("SetAsDefault") {
		param, err := parseBoolParameter(
			query.Get("SetAsDefault"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		setAsDefaultParam = param
	} else {
	}
	result, err := c.service.GETCreatePolicyVersion(r.Context(), policyArnParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, setAsDefaultParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateRole - 
func (c *DefaultAPIController) GETCreateRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var assumeRolePolicyDocumentParam string
	if query.Has("AssumeRolePolicyDocument") {
		param := query.Get("AssumeRolePolicyDocument")

		assumeRolePolicyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AssumeRolePolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var descriptionParam string
	if query.Has("Description") {
		param := query.Get("Description")

		descriptionParam = param
	} else {
	}
	var maxSessionDurationParam int32
	if query.Has("MaxSessionDuration") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxSessionDuration"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](3600),
			WithMaximum[int32](43200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxSessionDurationParam = param
	} else {
	}
	var permissionsBoundaryParam string
	if query.Has("PermissionsBoundary") {
		param := query.Get("PermissionsBoundary")

		permissionsBoundaryParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateRole(r.Context(), roleNameParam, assumeRolePolicyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, descriptionParam, maxSessionDurationParam, permissionsBoundaryParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateSAMLProvider - 
func (c *DefaultAPIController) GETCreateSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLMetadataDocumentParam string
	if query.Has("SAMLMetadataDocument") {
		param := query.Get("SAMLMetadataDocument")

		sAMLMetadataDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLMetadataDocument"}, nil)
		return
	}
	var nameParam string
	if query.Has("Name") {
		param := query.Get("Name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Name"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateSAMLProvider(r.Context(), sAMLMetadataDocumentParam, nameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateServiceLinkedRole - 
func (c *DefaultAPIController) GETCreateServiceLinkedRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var aWSServiceNameParam string
	if query.Has("AWSServiceName") {
		param := query.Get("AWSServiceName")

		aWSServiceNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AWSServiceName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var descriptionParam string
	if query.Has("Description") {
		param := query.Get("Description")

		descriptionParam = param
	} else {
	}
	var customSuffixParam string
	if query.Has("CustomSuffix") {
		param := query.Get("CustomSuffix")

		customSuffixParam = param
	} else {
	}
	result, err := c.service.GETCreateServiceLinkedRole(r.Context(), aWSServiceNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, descriptionParam, customSuffixParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateServiceSpecificCredential - 
func (c *DefaultAPIController) GETCreateServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var serviceNameParam string
	if query.Has("ServiceName") {
		param := query.Get("ServiceName")

		serviceNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServiceName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETCreateServiceSpecificCredential(r.Context(), userNameParam, serviceNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateUser - 
func (c *DefaultAPIController) GETCreateUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var permissionsBoundaryParam string
	if query.Has("PermissionsBoundary") {
		param := query.Get("PermissionsBoundary")

		permissionsBoundaryParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateUser(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, permissionsBoundaryParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETCreateVirtualMFADevice - 
func (c *DefaultAPIController) GETCreateVirtualMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var virtualMFADeviceNameParam string
	if query.Has("VirtualMFADeviceName") {
		param := query.Get("VirtualMFADeviceName")

		virtualMFADeviceNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VirtualMFADeviceName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETCreateVirtualMFADevice(r.Context(), virtualMFADeviceNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeactivateMFADevice - 
func (c *DefaultAPIController) GETDeactivateMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeactivateMFADevice(r.Context(), userNameParam, serialNumberParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteAccessKey - 
func (c *DefaultAPIController) GETDeleteAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accessKeyIdParam string
	if query.Has("AccessKeyId") {
		param := query.Get("AccessKeyId")

		accessKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AccessKeyId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETDeleteAccessKey(r.Context(), accessKeyIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteAccountAlias - 
func (c *DefaultAPIController) GETDeleteAccountAlias(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accountAliasParam string
	if query.Has("AccountAlias") {
		param := query.Get("AccountAlias")

		accountAliasParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AccountAlias"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteAccountAlias(r.Context(), accountAliasParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteAccountPasswordPolicy - 
func (c *DefaultAPIController) GETDeleteAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteGroup - 
func (c *DefaultAPIController) GETDeleteGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteGroup(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteGroupPolicy - 
func (c *DefaultAPIController) GETDeleteGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteGroupPolicy(r.Context(), groupNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteInstanceProfile - 
func (c *DefaultAPIController) GETDeleteInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteInstanceProfile(r.Context(), instanceProfileNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteLoginProfile - 
func (c *DefaultAPIController) GETDeleteLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteLoginProfile(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteOpenIDConnectProvider - 
func (c *DefaultAPIController) GETDeleteOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeletePolicy - 
func (c *DefaultAPIController) GETDeletePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeletePolicy(r.Context(), policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeletePolicyVersion - 
func (c *DefaultAPIController) GETDeletePolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var versionIdParam string
	if query.Has("VersionId") {
		param := query.Get("VersionId")

		versionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VersionId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeletePolicyVersion(r.Context(), policyArnParam, versionIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteRole - 
func (c *DefaultAPIController) GETDeleteRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteRole(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteRolePermissionsBoundary - 
func (c *DefaultAPIController) GETDeleteRolePermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteRolePermissionsBoundary(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteRolePolicy - 
func (c *DefaultAPIController) GETDeleteRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteRolePolicy(r.Context(), roleNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteSAMLProvider - 
func (c *DefaultAPIController) GETDeleteSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteSAMLProvider(r.Context(), sAMLProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteSSHPublicKey - 
func (c *DefaultAPIController) GETDeleteSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var sSHPublicKeyIdParam string
	if query.Has("SSHPublicKeyId") {
		param := query.Get("SSHPublicKeyId")

		sSHPublicKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SSHPublicKeyId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteSSHPublicKey(r.Context(), userNameParam, sSHPublicKeyIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteServerCertificate - 
func (c *DefaultAPIController) GETDeleteServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteServerCertificate(r.Context(), serverCertificateNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteServiceLinkedRole - 
func (c *DefaultAPIController) GETDeleteServiceLinkedRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteServiceLinkedRole(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteServiceSpecificCredential - 
func (c *DefaultAPIController) GETDeleteServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serviceSpecificCredentialIdParam string
	if query.Has("ServiceSpecificCredentialId") {
		param := query.Get("ServiceSpecificCredentialId")

		serviceSpecificCredentialIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServiceSpecificCredentialId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETDeleteServiceSpecificCredential(r.Context(), serviceSpecificCredentialIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteSigningCertificate - 
func (c *DefaultAPIController) GETDeleteSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var certificateIdParam string
	if query.Has("CertificateId") {
		param := query.Get("CertificateId")

		certificateIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "CertificateId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETDeleteSigningCertificate(r.Context(), certificateIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteUser - 
func (c *DefaultAPIController) GETDeleteUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteUser(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteUserPermissionsBoundary - 
func (c *DefaultAPIController) GETDeleteUserPermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteUserPermissionsBoundary(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteUserPolicy - 
func (c *DefaultAPIController) GETDeleteUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteUserPolicy(r.Context(), userNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDeleteVirtualMFADevice - 
func (c *DefaultAPIController) GETDeleteVirtualMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDeleteVirtualMFADevice(r.Context(), serialNumberParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDetachGroupPolicy - 
func (c *DefaultAPIController) GETDetachGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDetachGroupPolicy(r.Context(), groupNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDetachRolePolicy - 
func (c *DefaultAPIController) GETDetachRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDetachRolePolicy(r.Context(), roleNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETDetachUserPolicy - 
func (c *DefaultAPIController) GETDetachUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETDetachUserPolicy(r.Context(), userNameParam, policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETEnableMFADevice - 
func (c *DefaultAPIController) GETEnableMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var authenticationCode1Param string
	if query.Has("AuthenticationCode1") {
		param := query.Get("AuthenticationCode1")

		authenticationCode1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AuthenticationCode1"}, nil)
		return
	}
	var authenticationCode2Param string
	if query.Has("AuthenticationCode2") {
		param := query.Get("AuthenticationCode2")

		authenticationCode2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AuthenticationCode2"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETEnableMFADevice(r.Context(), userNameParam, serialNumberParam, authenticationCode1Param, authenticationCode2Param, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGenerateCredentialReport - 
func (c *DefaultAPIController) GETGenerateCredentialReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGenerateCredentialReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGenerateOrganizationsAccessReport - 
func (c *DefaultAPIController) GETGenerateOrganizationsAccessReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var entityPathParam string
	if query.Has("EntityPath") {
		param := query.Get("EntityPath")

		entityPathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "EntityPath"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var organizationsPolicyIdParam string
	if query.Has("OrganizationsPolicyId") {
		param := query.Get("OrganizationsPolicyId")

		organizationsPolicyIdParam = param
	} else {
	}
	result, err := c.service.GETGenerateOrganizationsAccessReport(r.Context(), entityPathParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, organizationsPolicyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGenerateServiceLastAccessedDetails - 
func (c *DefaultAPIController) GETGenerateServiceLastAccessedDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var arnParam string
	if query.Has("Arn") {
		param := query.Get("Arn")

		arnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Arn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var granularityParam string
	if query.Has("Granularity") {
		param := query.Get("Granularity")

		granularityParam = param
	} else {
	}
	result, err := c.service.GETGenerateServiceLastAccessedDetails(r.Context(), arnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, granularityParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetAccessKeyLastUsed - 
func (c *DefaultAPIController) GETGetAccessKeyLastUsed(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accessKeyIdParam string
	if query.Has("AccessKeyId") {
		param := query.Get("AccessKeyId")

		accessKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AccessKeyId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetAccessKeyLastUsed(r.Context(), accessKeyIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetAccountAuthorizationDetails - 
func (c *DefaultAPIController) GETGetAccountAuthorizationDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var filterParam []EntityType
	if query.Has("Filter") {
		paramSplits := strings.Split(query.Get("Filter"), ",")
		filterParam = make([]EntityType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewEntityTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filterParam = append(filterParam, paramEnum)
		}
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETGetAccountAuthorizationDetails(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, filterParam, maxItemsParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetAccountPasswordPolicy - 
func (c *DefaultAPIController) GETGetAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetAccountSummary - 
func (c *DefaultAPIController) GETGetAccountSummary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetAccountSummary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetContextKeysForCustomPolicy - 
func (c *DefaultAPIController) GETGetContextKeysForCustomPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyInputListParam []string
	if query.Has("PolicyInputList") {
		policyInputListParam = strings.Split(query.Get("PolicyInputList"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetContextKeysForCustomPolicy(r.Context(), policyInputListParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetContextKeysForPrincipalPolicy - 
func (c *DefaultAPIController) GETGetContextKeysForPrincipalPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policySourceArnParam string
	if query.Has("PolicySourceArn") {
		param := query.Get("PolicySourceArn")

		policySourceArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicySourceArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var policyInputListParam []string
	if query.Has("PolicyInputList") {
		policyInputListParam = strings.Split(query.Get("PolicyInputList"), ",")
	}
	result, err := c.service.GETGetContextKeysForPrincipalPolicy(r.Context(), policySourceArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, policyInputListParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetCredentialReport - 
func (c *DefaultAPIController) GETGetCredentialReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetCredentialReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetGroup - 
func (c *DefaultAPIController) GETGetGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETGetGroup(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetGroupPolicy - 
func (c *DefaultAPIController) GETGetGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetGroupPolicy(r.Context(), groupNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetInstanceProfile - 
func (c *DefaultAPIController) GETGetInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetInstanceProfile(r.Context(), instanceProfileNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetLoginProfile - 
func (c *DefaultAPIController) GETGetLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetLoginProfile(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetMFADevice - 
func (c *DefaultAPIController) GETGetMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETGetMFADevice(r.Context(), serialNumberParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetOpenIDConnectProvider - 
func (c *DefaultAPIController) GETGetOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetOrganizationsAccessReport - 
func (c *DefaultAPIController) GETGetOrganizationsAccessReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var jobIdParam string
	if query.Has("JobId") {
		param := query.Get("JobId")

		jobIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "JobId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var sortKeyParam string
	if query.Has("SortKey") {
		param := query.Get("SortKey")

		sortKeyParam = param
	} else {
	}
	result, err := c.service.GETGetOrganizationsAccessReport(r.Context(), jobIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, sortKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetPolicy - 
func (c *DefaultAPIController) GETGetPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetPolicy(r.Context(), policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetPolicyVersion - 
func (c *DefaultAPIController) GETGetPolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var versionIdParam string
	if query.Has("VersionId") {
		param := query.Get("VersionId")

		versionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VersionId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetPolicyVersion(r.Context(), policyArnParam, versionIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetRole - 
func (c *DefaultAPIController) GETGetRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetRole(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetRolePolicy - 
func (c *DefaultAPIController) GETGetRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetRolePolicy(r.Context(), roleNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetSAMLProvider - 
func (c *DefaultAPIController) GETGetSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetSAMLProvider(r.Context(), sAMLProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetSSHPublicKey - 
func (c *DefaultAPIController) GETGetSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var sSHPublicKeyIdParam string
	if query.Has("SSHPublicKeyId") {
		param := query.Get("SSHPublicKeyId")

		sSHPublicKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SSHPublicKeyId"}, nil)
		return
	}
	var encodingParam string
	if query.Has("Encoding") {
		param := query.Get("Encoding")

		encodingParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Encoding"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetSSHPublicKey(r.Context(), userNameParam, sSHPublicKeyIdParam, encodingParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetServerCertificate - 
func (c *DefaultAPIController) GETGetServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetServerCertificate(r.Context(), serverCertificateNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetServiceLastAccessedDetails - 
func (c *DefaultAPIController) GETGetServiceLastAccessedDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var jobIdParam string
	if query.Has("JobId") {
		param := query.Get("JobId")

		jobIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "JobId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETGetServiceLastAccessedDetails(r.Context(), jobIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetServiceLastAccessedDetailsWithEntities - 
func (c *DefaultAPIController) GETGetServiceLastAccessedDetailsWithEntities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var jobIdParam string
	if query.Has("JobId") {
		param := query.Get("JobId")

		jobIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "JobId"}, nil)
		return
	}
	var serviceNamespaceParam string
	if query.Has("ServiceNamespace") {
		param := query.Get("ServiceNamespace")

		serviceNamespaceParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServiceNamespace"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETGetServiceLastAccessedDetailsWithEntities(r.Context(), jobIdParam, serviceNamespaceParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetServiceLinkedRoleDeletionStatus - 
func (c *DefaultAPIController) GETGetServiceLinkedRoleDeletionStatus(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var deletionTaskIdParam string
	if query.Has("DeletionTaskId") {
		param := query.Get("DeletionTaskId")

		deletionTaskIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "DeletionTaskId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetServiceLinkedRoleDeletionStatus(r.Context(), deletionTaskIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetUser - 
func (c *DefaultAPIController) GETGetUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETGetUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETGetUserPolicy - 
func (c *DefaultAPIController) GETGetUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETGetUserPolicy(r.Context(), userNameParam, policyNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListAccessKeys - 
func (c *DefaultAPIController) GETListAccessKeys(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListAccessKeys(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListAccountAliases - 
func (c *DefaultAPIController) GETListAccountAliases(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListAccountAliases(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListAttachedGroupPolicies - 
func (c *DefaultAPIController) GETListAttachedGroupPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListAttachedGroupPolicies(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListAttachedRolePolicies - 
func (c *DefaultAPIController) GETListAttachedRolePolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListAttachedRolePolicies(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListAttachedUserPolicies - 
func (c *DefaultAPIController) GETListAttachedUserPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListAttachedUserPolicies(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListEntitiesForPolicy - 
func (c *DefaultAPIController) GETListEntitiesForPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var entityFilterParam string
	if query.Has("EntityFilter") {
		param := query.Get("EntityFilter")

		entityFilterParam = param
	} else {
	}
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var policyUsageFilterParam string
	if query.Has("PolicyUsageFilter") {
		param := query.Get("PolicyUsageFilter")

		policyUsageFilterParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListEntitiesForPolicy(r.Context(), policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, entityFilterParam, pathPrefixParam, policyUsageFilterParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListGroupPolicies - 
func (c *DefaultAPIController) GETListGroupPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListGroupPolicies(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListGroups - 
func (c *DefaultAPIController) GETListGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListGroups(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListGroupsForUser - 
func (c *DefaultAPIController) GETListGroupsForUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListGroupsForUser(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListInstanceProfileTags - 
func (c *DefaultAPIController) GETListInstanceProfileTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListInstanceProfileTags(r.Context(), instanceProfileNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListInstanceProfiles - 
func (c *DefaultAPIController) GETListInstanceProfiles(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListInstanceProfiles(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListInstanceProfilesForRole - 
func (c *DefaultAPIController) GETListInstanceProfilesForRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListInstanceProfilesForRole(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListMFADeviceTags - 
func (c *DefaultAPIController) GETListMFADeviceTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListMFADeviceTags(r.Context(), serialNumberParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListMFADevices - 
func (c *DefaultAPIController) GETListMFADevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListMFADevices(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListOpenIDConnectProviderTags - 
func (c *DefaultAPIController) GETListOpenIDConnectProviderTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListOpenIDConnectProviderTags(r.Context(), openIDConnectProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListOpenIDConnectProviders - 
func (c *DefaultAPIController) GETListOpenIDConnectProviders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETListOpenIDConnectProviders(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListPolicies - 
func (c *DefaultAPIController) GETListPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var scopeParam string
	if query.Has("Scope") {
		param := query.Get("Scope")

		scopeParam = param
	} else {
	}
	var onlyAttachedParam bool
	if query.Has("OnlyAttached") {
		param, err := parseBoolParameter(
			query.Get("OnlyAttached"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		onlyAttachedParam = param
	} else {
	}
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var policyUsageFilterParam string
	if query.Has("PolicyUsageFilter") {
		param := query.Get("PolicyUsageFilter")

		policyUsageFilterParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, scopeParam, onlyAttachedParam, pathPrefixParam, policyUsageFilterParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListPoliciesGrantingServiceAccess - 
func (c *DefaultAPIController) GETListPoliciesGrantingServiceAccess(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var arnParam string
	if query.Has("Arn") {
		param := query.Get("Arn")

		arnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Arn"}, nil)
		return
	}
	var serviceNamespacesParam []string
	if query.Has("ServiceNamespaces") {
		serviceNamespacesParam = strings.Split(query.Get("ServiceNamespaces"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETListPoliciesGrantingServiceAccess(r.Context(), arnParam, serviceNamespacesParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListPolicyTags - 
func (c *DefaultAPIController) GETListPolicyTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListPolicyTags(r.Context(), policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListPolicyVersions - 
func (c *DefaultAPIController) GETListPolicyVersions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListPolicyVersions(r.Context(), policyArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListRolePolicies - 
func (c *DefaultAPIController) GETListRolePolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListRolePolicies(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListRoleTags - 
func (c *DefaultAPIController) GETListRoleTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListRoleTags(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListRoles - 
func (c *DefaultAPIController) GETListRoles(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListRoles(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListSAMLProviderTags - 
func (c *DefaultAPIController) GETListSAMLProviderTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListSAMLProviderTags(r.Context(), sAMLProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListSAMLProviders - 
func (c *DefaultAPIController) GETListSAMLProviders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETListSAMLProviders(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListSSHPublicKeys - 
func (c *DefaultAPIController) GETListSSHPublicKeys(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListSSHPublicKeys(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListServerCertificateTags - 
func (c *DefaultAPIController) GETListServerCertificateTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListServerCertificateTags(r.Context(), serverCertificateNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListServerCertificates - 
func (c *DefaultAPIController) GETListServerCertificates(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListServerCertificates(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListServiceSpecificCredentials - 
func (c *DefaultAPIController) GETListServiceSpecificCredentials(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	var serviceNameParam string
	if query.Has("ServiceName") {
		param := query.Get("ServiceName")

		serviceNameParam = param
	} else {
	}
	result, err := c.service.GETListServiceSpecificCredentials(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam, serviceNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListSigningCertificates - 
func (c *DefaultAPIController) GETListSigningCertificates(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListSigningCertificates(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListUserPolicies - 
func (c *DefaultAPIController) GETListUserPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListUserPolicies(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListUserTags - 
func (c *DefaultAPIController) GETListUserTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListUserTags(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListUsers - 
func (c *DefaultAPIController) GETListUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathPrefixParam string
	if query.Has("PathPrefix") {
		param := query.Get("PathPrefix")

		pathPrefixParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListUsers(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathPrefixParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETListVirtualMFADevices - 
func (c *DefaultAPIController) GETListVirtualMFADevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var assignmentStatusParam string
	if query.Has("AssignmentStatus") {
		param := query.Get("AssignmentStatus")

		assignmentStatusParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	result, err := c.service.GETListVirtualMFADevices(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, assignmentStatusParam, markerParam, maxItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETPutGroupPolicy - 
func (c *DefaultAPIController) GETPutGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETPutGroupPolicy(r.Context(), groupNameParam, policyNameParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETPutRolePermissionsBoundary - 
func (c *DefaultAPIController) GETPutRolePermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var permissionsBoundaryParam string
	if query.Has("PermissionsBoundary") {
		param := query.Get("PermissionsBoundary")

		permissionsBoundaryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PermissionsBoundary"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETPutRolePermissionsBoundary(r.Context(), roleNameParam, permissionsBoundaryParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETPutRolePolicy - 
func (c *DefaultAPIController) GETPutRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETPutRolePolicy(r.Context(), roleNameParam, policyNameParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETPutUserPermissionsBoundary - 
func (c *DefaultAPIController) GETPutUserPermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var permissionsBoundaryParam string
	if query.Has("PermissionsBoundary") {
		param := query.Get("PermissionsBoundary")

		permissionsBoundaryParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PermissionsBoundary"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETPutUserPermissionsBoundary(r.Context(), userNameParam, permissionsBoundaryParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETPutUserPolicy - 
func (c *DefaultAPIController) GETPutUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var policyNameParam string
	if query.Has("PolicyName") {
		param := query.Get("PolicyName")

		policyNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyName"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETPutUserPolicy(r.Context(), userNameParam, policyNameParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETRemoveClientIDFromOpenIDConnectProvider - 
func (c *DefaultAPIController) GETRemoveClientIDFromOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var clientIDParam string
	if query.Has("ClientID") {
		param := query.Get("ClientID")

		clientIDParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ClientID"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETRemoveClientIDFromOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, clientIDParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETRemoveRoleFromInstanceProfile - 
func (c *DefaultAPIController) GETRemoveRoleFromInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETRemoveRoleFromInstanceProfile(r.Context(), instanceProfileNameParam, roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETRemoveUserFromGroup - 
func (c *DefaultAPIController) GETRemoveUserFromGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETRemoveUserFromGroup(r.Context(), groupNameParam, userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETResetServiceSpecificCredential - 
func (c *DefaultAPIController) GETResetServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serviceSpecificCredentialIdParam string
	if query.Has("ServiceSpecificCredentialId") {
		param := query.Get("ServiceSpecificCredentialId")

		serviceSpecificCredentialIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServiceSpecificCredentialId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETResetServiceSpecificCredential(r.Context(), serviceSpecificCredentialIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETResyncMFADevice - 
func (c *DefaultAPIController) GETResyncMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var authenticationCode1Param string
	if query.Has("AuthenticationCode1") {
		param := query.Get("AuthenticationCode1")

		authenticationCode1Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AuthenticationCode1"}, nil)
		return
	}
	var authenticationCode2Param string
	if query.Has("AuthenticationCode2") {
		param := query.Get("AuthenticationCode2")

		authenticationCode2Param = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AuthenticationCode2"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETResyncMFADevice(r.Context(), userNameParam, serialNumberParam, authenticationCode1Param, authenticationCode2Param, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETSetDefaultPolicyVersion - 
func (c *DefaultAPIController) GETSetDefaultPolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var versionIdParam string
	if query.Has("VersionId") {
		param := query.Get("VersionId")

		versionIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "VersionId"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETSetDefaultPolicyVersion(r.Context(), policyArnParam, versionIdParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETSetSecurityTokenServicePreferences - 
func (c *DefaultAPIController) GETSetSecurityTokenServicePreferences(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var globalEndpointTokenVersionParam string
	if query.Has("GlobalEndpointTokenVersion") {
		param := query.Get("GlobalEndpointTokenVersion")

		globalEndpointTokenVersionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GlobalEndpointTokenVersion"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETSetSecurityTokenServicePreferences(r.Context(), globalEndpointTokenVersionParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETSimulateCustomPolicy - 
func (c *DefaultAPIController) GETSimulateCustomPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyInputListParam []string
	if query.Has("PolicyInputList") {
		policyInputListParam = strings.Split(query.Get("PolicyInputList"), ",")
	}
	var actionNamesParam []string
	if query.Has("ActionNames") {
		actionNamesParam = strings.Split(query.Get("ActionNames"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var permissionsBoundaryPolicyInputListParam []string
	if query.Has("PermissionsBoundaryPolicyInputList") {
		permissionsBoundaryPolicyInputListParam = strings.Split(query.Get("PermissionsBoundaryPolicyInputList"), ",")
	}
	var resourceArnsParam []string
	if query.Has("ResourceArns") {
		resourceArnsParam = strings.Split(query.Get("ResourceArns"), ",")
	}
	var resourcePolicyParam string
	if query.Has("ResourcePolicy") {
		param := query.Get("ResourcePolicy")

		resourcePolicyParam = param
	} else {
	}
	var resourceOwnerParam string
	if query.Has("ResourceOwner") {
		param := query.Get("ResourceOwner")

		resourceOwnerParam = param
	} else {
	}
	var callerArnParam string
	if query.Has("CallerArn") {
		param := query.Get("CallerArn")

		callerArnParam = param
	} else {
	}
	var contextEntriesParam []string
	if query.Has("ContextEntries") {
		contextEntriesParam = strings.Split(query.Get("ContextEntries"), ",")
	}
	var resourceHandlingOptionParam string
	if query.Has("ResourceHandlingOption") {
		param := query.Get("ResourceHandlingOption")

		resourceHandlingOptionParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETSimulateCustomPolicy(r.Context(), policyInputListParam, actionNamesParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, permissionsBoundaryPolicyInputListParam, resourceArnsParam, resourcePolicyParam, resourceOwnerParam, callerArnParam, contextEntriesParam, resourceHandlingOptionParam, maxItemsParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETSimulatePrincipalPolicy - 
func (c *DefaultAPIController) GETSimulatePrincipalPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policySourceArnParam string
	if query.Has("PolicySourceArn") {
		param := query.Get("PolicySourceArn")

		policySourceArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicySourceArn"}, nil)
		return
	}
	var actionNamesParam []string
	if query.Has("ActionNames") {
		actionNamesParam = strings.Split(query.Get("ActionNames"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var policyInputListParam []string
	if query.Has("PolicyInputList") {
		policyInputListParam = strings.Split(query.Get("PolicyInputList"), ",")
	}
	var permissionsBoundaryPolicyInputListParam []string
	if query.Has("PermissionsBoundaryPolicyInputList") {
		permissionsBoundaryPolicyInputListParam = strings.Split(query.Get("PermissionsBoundaryPolicyInputList"), ",")
	}
	var resourceArnsParam []string
	if query.Has("ResourceArns") {
		resourceArnsParam = strings.Split(query.Get("ResourceArns"), ",")
	}
	var resourcePolicyParam string
	if query.Has("ResourcePolicy") {
		param := query.Get("ResourcePolicy")

		resourcePolicyParam = param
	} else {
	}
	var resourceOwnerParam string
	if query.Has("ResourceOwner") {
		param := query.Get("ResourceOwner")

		resourceOwnerParam = param
	} else {
	}
	var callerArnParam string
	if query.Has("CallerArn") {
		param := query.Get("CallerArn")

		callerArnParam = param
	} else {
	}
	var contextEntriesParam []string
	if query.Has("ContextEntries") {
		contextEntriesParam = strings.Split(query.Get("ContextEntries"), ",")
	}
	var resourceHandlingOptionParam string
	if query.Has("ResourceHandlingOption") {
		param := query.Get("ResourceHandlingOption")

		resourceHandlingOptionParam = param
	} else {
	}
	var maxItemsParam int32
	if query.Has("MaxItems") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxItems"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1000),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	result, err := c.service.GETSimulatePrincipalPolicy(r.Context(), policySourceArnParam, actionNamesParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, policyInputListParam, permissionsBoundaryPolicyInputListParam, resourceArnsParam, resourcePolicyParam, resourceOwnerParam, callerArnParam, contextEntriesParam, resourceHandlingOptionParam, maxItemsParam, markerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagInstanceProfile - 
func (c *DefaultAPIController) GETTagInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagInstanceProfile(r.Context(), instanceProfileNameParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagMFADevice - 
func (c *DefaultAPIController) GETTagMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagMFADevice(r.Context(), serialNumberParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagOpenIDConnectProvider - 
func (c *DefaultAPIController) GETTagOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagPolicy - 
func (c *DefaultAPIController) GETTagPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagPolicy(r.Context(), policyArnParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagRole - 
func (c *DefaultAPIController) GETTagRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagRole(r.Context(), roleNameParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagSAMLProvider - 
func (c *DefaultAPIController) GETTagSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagSAMLProvider(r.Context(), sAMLProviderArnParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagServerCertificate - 
func (c *DefaultAPIController) GETTagServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagServerCertificate(r.Context(), serverCertificateNameParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETTagUser - 
func (c *DefaultAPIController) GETTagUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETTagUser(r.Context(), userNameParam, tagsParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagInstanceProfile - 
func (c *DefaultAPIController) GETUntagInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var instanceProfileNameParam string
	if query.Has("InstanceProfileName") {
		param := query.Get("InstanceProfileName")

		instanceProfileNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "InstanceProfileName"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagInstanceProfile(r.Context(), instanceProfileNameParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagMFADevice - 
func (c *DefaultAPIController) GETUntagMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serialNumberParam string
	if query.Has("SerialNumber") {
		param := query.Get("SerialNumber")

		serialNumberParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SerialNumber"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagMFADevice(r.Context(), serialNumberParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagOpenIDConnectProvider - 
func (c *DefaultAPIController) GETUntagOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagOpenIDConnectProvider(r.Context(), openIDConnectProviderArnParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagPolicy - 
func (c *DefaultAPIController) GETUntagPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var policyArnParam string
	if query.Has("PolicyArn") {
		param := query.Get("PolicyArn")

		policyArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyArn"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagPolicy(r.Context(), policyArnParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagRole - 
func (c *DefaultAPIController) GETUntagRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagRole(r.Context(), roleNameParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagSAMLProvider - 
func (c *DefaultAPIController) GETUntagSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagSAMLProvider(r.Context(), sAMLProviderArnParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagServerCertificate - 
func (c *DefaultAPIController) GETUntagServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagServerCertificate(r.Context(), serverCertificateNameParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUntagUser - 
func (c *DefaultAPIController) GETUntagUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var tagKeysParam []string
	if query.Has("TagKeys") {
		tagKeysParam = strings.Split(query.Get("TagKeys"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUntagUser(r.Context(), userNameParam, tagKeysParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateAccessKey - 
func (c *DefaultAPIController) GETUpdateAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var accessKeyIdParam string
	if query.Has("AccessKeyId") {
		param := query.Get("AccessKeyId")

		accessKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "AccessKeyId"}, nil)
		return
	}
	var statusParam string
	if query.Has("Status") {
		param := query.Get("Status")

		statusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Status"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateAccessKey(r.Context(), accessKeyIdParam, statusParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateAccountPasswordPolicy - 
func (c *DefaultAPIController) GETUpdateAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var minimumPasswordLengthParam int32
	if query.Has("MinimumPasswordLength") {
		param, err := parseNumericParameter[int32](
			query.Get("MinimumPasswordLength"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](6),
			WithMaximum[int32](128),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minimumPasswordLengthParam = param
	} else {
	}
	var requireSymbolsParam bool
	if query.Has("RequireSymbols") {
		param, err := parseBoolParameter(
			query.Get("RequireSymbols"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireSymbolsParam = param
	} else {
	}
	var requireNumbersParam bool
	if query.Has("RequireNumbers") {
		param, err := parseBoolParameter(
			query.Get("RequireNumbers"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNumbersParam = param
	} else {
	}
	var requireUppercaseCharactersParam bool
	if query.Has("RequireUppercaseCharacters") {
		param, err := parseBoolParameter(
			query.Get("RequireUppercaseCharacters"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireUppercaseCharactersParam = param
	} else {
	}
	var requireLowercaseCharactersParam bool
	if query.Has("RequireLowercaseCharacters") {
		param, err := parseBoolParameter(
			query.Get("RequireLowercaseCharacters"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireLowercaseCharactersParam = param
	} else {
	}
	var allowUsersToChangePasswordParam bool
	if query.Has("AllowUsersToChangePassword") {
		param, err := parseBoolParameter(
			query.Get("AllowUsersToChangePassword"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowUsersToChangePasswordParam = param
	} else {
	}
	var maxPasswordAgeParam int32
	if query.Has("MaxPasswordAge") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxPasswordAge"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](1095),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxPasswordAgeParam = param
	} else {
	}
	var passwordReusePreventionParam int32
	if query.Has("PasswordReusePrevention") {
		param, err := parseNumericParameter[int32](
			query.Get("PasswordReusePrevention"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](1),
			WithMaximum[int32](24),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		passwordReusePreventionParam = param
	} else {
	}
	var hardExpiryParam bool
	if query.Has("HardExpiry") {
		param, err := parseBoolParameter(
			query.Get("HardExpiry"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hardExpiryParam = param
	} else {
	}
	result, err := c.service.GETUpdateAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, minimumPasswordLengthParam, requireSymbolsParam, requireNumbersParam, requireUppercaseCharactersParam, requireLowercaseCharactersParam, allowUsersToChangePasswordParam, maxPasswordAgeParam, passwordReusePreventionParam, hardExpiryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateAssumeRolePolicy - 
func (c *DefaultAPIController) GETUpdateAssumeRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var policyDocumentParam string
	if query.Has("PolicyDocument") {
		param := query.Get("PolicyDocument")

		policyDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PolicyDocument"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUpdateAssumeRolePolicy(r.Context(), roleNameParam, policyDocumentParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateGroup - 
func (c *DefaultAPIController) GETUpdateGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var groupNameParam string
	if query.Has("GroupName") {
		param := query.Get("GroupName")

		groupNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "GroupName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var newPathParam string
	if query.Has("NewPath") {
		param := query.Get("NewPath")

		newPathParam = param
	} else {
	}
	var newGroupNameParam string
	if query.Has("NewGroupName") {
		param := query.Get("NewGroupName")

		newGroupNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateGroup(r.Context(), groupNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, newPathParam, newGroupNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateLoginProfile - 
func (c *DefaultAPIController) GETUpdateLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var passwordParam string
	if query.Has("Password") {
		param := query.Get("Password")

		passwordParam = param
	} else {
	}
	var passwordResetRequiredParam bool
	if query.Has("PasswordResetRequired") {
		param, err := parseBoolParameter(
			query.Get("PasswordResetRequired"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		passwordResetRequiredParam = param
	} else {
	}
	result, err := c.service.GETUpdateLoginProfile(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, passwordParam, passwordResetRequiredParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateOpenIDConnectProviderThumbprint - 
func (c *DefaultAPIController) GETUpdateOpenIDConnectProviderThumbprint(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var openIDConnectProviderArnParam string
	if query.Has("OpenIDConnectProviderArn") {
		param := query.Get("OpenIDConnectProviderArn")

		openIDConnectProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "OpenIDConnectProviderArn"}, nil)
		return
	}
	var thumbprintListParam []string
	if query.Has("ThumbprintList") {
		thumbprintListParam = strings.Split(query.Get("ThumbprintList"), ",")
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUpdateOpenIDConnectProviderThumbprint(r.Context(), openIDConnectProviderArnParam, thumbprintListParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateRole - 
func (c *DefaultAPIController) GETUpdateRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var descriptionParam string
	if query.Has("Description") {
		param := query.Get("Description")

		descriptionParam = param
	} else {
	}
	var maxSessionDurationParam int32
	if query.Has("MaxSessionDuration") {
		param, err := parseNumericParameter[int32](
			query.Get("MaxSessionDuration"),
			WithParse[int32](parseInt32),
			WithMinimum[int32](3600),
			WithMaximum[int32](43200),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxSessionDurationParam = param
	} else {
	}
	result, err := c.service.GETUpdateRole(r.Context(), roleNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, descriptionParam, maxSessionDurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateRoleDescription - 
func (c *DefaultAPIController) GETUpdateRoleDescription(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var roleNameParam string
	if query.Has("RoleName") {
		param := query.Get("RoleName")

		roleNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "RoleName"}, nil)
		return
	}
	var descriptionParam string
	if query.Has("Description") {
		param := query.Get("Description")

		descriptionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Description"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUpdateRoleDescription(r.Context(), roleNameParam, descriptionParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateSAMLProvider - 
func (c *DefaultAPIController) GETUpdateSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sAMLMetadataDocumentParam string
	if query.Has("SAMLMetadataDocument") {
		param := query.Get("SAMLMetadataDocument")

		sAMLMetadataDocumentParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLMetadataDocument"}, nil)
		return
	}
	var sAMLProviderArnParam string
	if query.Has("SAMLProviderArn") {
		param := query.Get("SAMLProviderArn")

		sAMLProviderArnParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SAMLProviderArn"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUpdateSAMLProvider(r.Context(), sAMLMetadataDocumentParam, sAMLProviderArnParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateSSHPublicKey - 
func (c *DefaultAPIController) GETUpdateSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var sSHPublicKeyIdParam string
	if query.Has("SSHPublicKeyId") {
		param := query.Get("SSHPublicKeyId")

		sSHPublicKeyIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SSHPublicKeyId"}, nil)
		return
	}
	var statusParam string
	if query.Has("Status") {
		param := query.Get("Status")

		statusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Status"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUpdateSSHPublicKey(r.Context(), userNameParam, sSHPublicKeyIdParam, statusParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateServerCertificate - 
func (c *DefaultAPIController) GETUpdateServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var newPathParam string
	if query.Has("NewPath") {
		param := query.Get("NewPath")

		newPathParam = param
	} else {
	}
	var newServerCertificateNameParam string
	if query.Has("NewServerCertificateName") {
		param := query.Get("NewServerCertificateName")

		newServerCertificateNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateServerCertificate(r.Context(), serverCertificateNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, newPathParam, newServerCertificateNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateServiceSpecificCredential - 
func (c *DefaultAPIController) GETUpdateServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serviceSpecificCredentialIdParam string
	if query.Has("ServiceSpecificCredentialId") {
		param := query.Get("ServiceSpecificCredentialId")

		serviceSpecificCredentialIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServiceSpecificCredentialId"}, nil)
		return
	}
	var statusParam string
	if query.Has("Status") {
		param := query.Get("Status")

		statusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Status"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateServiceSpecificCredential(r.Context(), serviceSpecificCredentialIdParam, statusParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateSigningCertificate - 
func (c *DefaultAPIController) GETUpdateSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var certificateIdParam string
	if query.Has("CertificateId") {
		param := query.Get("CertificateId")

		certificateIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "CertificateId"}, nil)
		return
	}
	var statusParam string
	if query.Has("Status") {
		param := query.Get("Status")

		statusParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Status"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateSigningCertificate(r.Context(), certificateIdParam, statusParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUpdateUser - 
func (c *DefaultAPIController) GETUpdateUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var newPathParam string
	if query.Has("NewPath") {
		param := query.Get("NewPath")

		newPathParam = param
	} else {
	}
	var newUserNameParam string
	if query.Has("NewUserName") {
		param := query.Get("NewUserName")

		newUserNameParam = param
	} else {
	}
	result, err := c.service.GETUpdateUser(r.Context(), userNameParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, newPathParam, newUserNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUploadSSHPublicKey - 
func (c *DefaultAPIController) GETUploadSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "UserName"}, nil)
		return
	}
	var sSHPublicKeyBodyParam string
	if query.Has("SSHPublicKeyBody") {
		param := query.Get("SSHPublicKeyBody")

		sSHPublicKeyBodyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "SSHPublicKeyBody"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.GETUploadSSHPublicKey(r.Context(), userNameParam, sSHPublicKeyBodyParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUploadServerCertificate - 
func (c *DefaultAPIController) GETUploadServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var serverCertificateNameParam string
	if query.Has("ServerCertificateName") {
		param := query.Get("ServerCertificateName")

		serverCertificateNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "ServerCertificateName"}, nil)
		return
	}
	var certificateBodyParam string
	if query.Has("CertificateBody") {
		param := query.Get("CertificateBody")

		certificateBodyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "CertificateBody"}, nil)
		return
	}
	var privateKeyParam string
	if query.Has("PrivateKey") {
		param := query.Get("PrivateKey")

		privateKeyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "PrivateKey"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var pathParam string
	if query.Has("Path") {
		param := query.Get("Path")

		pathParam = param
	} else {
	}
	var certificateChainParam string
	if query.Has("CertificateChain") {
		param := query.Get("CertificateChain")

		certificateChainParam = param
	} else {
	}
	var tagsParam []string
	if query.Has("Tags") {
		tagsParam = strings.Split(query.Get("Tags"), ",")
	}
	result, err := c.service.GETUploadServerCertificate(r.Context(), serverCertificateNameParam, certificateBodyParam, privateKeyParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, pathParam, certificateChainParam, tagsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GETUploadSigningCertificate - 
func (c *DefaultAPIController) GETUploadSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var certificateBodyParam string
	if query.Has("CertificateBody") {
		param := query.Get("CertificateBody")

		certificateBodyParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "CertificateBody"}, nil)
		return
	}
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var userNameParam string
	if query.Has("UserName") {
		param := query.Get("UserName")

		userNameParam = param
	} else {
	}
	result, err := c.service.GETUploadSigningCertificate(r.Context(), certificateBodyParam, actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, userNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAddClientIDToOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTAddClientIDToOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	addClientIdtoOpenIdConnectProviderRequestParam := AddClientIdtoOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addClientIdtoOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddClientIdtoOpenIdConnectProviderRequestRequired(addClientIdtoOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddClientIdtoOpenIdConnectProviderRequestConstraints(addClientIdtoOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAddClientIDToOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, addClientIdtoOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAddRoleToInstanceProfile - 
func (c *DefaultAPIController) POSTAddRoleToInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	addRoleToInstanceProfileRequestParam := AddRoleToInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addRoleToInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddRoleToInstanceProfileRequestRequired(addRoleToInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddRoleToInstanceProfileRequestConstraints(addRoleToInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAddRoleToInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, addRoleToInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAddUserToGroup - 
func (c *DefaultAPIController) POSTAddUserToGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	addUserToGroupRequestParam := AddUserToGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addUserToGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddUserToGroupRequestRequired(addUserToGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddUserToGroupRequestConstraints(addUserToGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAddUserToGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, addUserToGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAttachGroupPolicy - 
func (c *DefaultAPIController) POSTAttachGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	attachGroupPolicyRequestParam := AttachGroupPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&attachGroupPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAttachGroupPolicyRequestRequired(attachGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAttachGroupPolicyRequestConstraints(attachGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAttachGroupPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, attachGroupPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAttachRolePolicy - 
func (c *DefaultAPIController) POSTAttachRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	attachRolePolicyRequestParam := AttachRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&attachRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAttachRolePolicyRequestRequired(attachRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAttachRolePolicyRequestConstraints(attachRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAttachRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, attachRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTAttachUserPolicy - 
func (c *DefaultAPIController) POSTAttachUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	attachUserPolicyRequestParam := AttachUserPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&attachUserPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAttachUserPolicyRequestRequired(attachUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAttachUserPolicyRequestConstraints(attachUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTAttachUserPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, attachUserPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTChangePassword - 
func (c *DefaultAPIController) POSTChangePassword(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	changePasswordRequestParam := ChangePasswordRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&changePasswordRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertChangePasswordRequestRequired(changePasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertChangePasswordRequestConstraints(changePasswordRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTChangePassword(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, changePasswordRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateAccessKey - 
func (c *DefaultAPIController) POSTCreateAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createAccessKeyRequestParam := CreateAccessKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAccessKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAccessKeyRequestRequired(createAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAccessKeyRequestConstraints(createAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateAccessKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createAccessKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateAccountAlias - 
func (c *DefaultAPIController) POSTCreateAccountAlias(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createAccountAliasRequestParam := CreateAccountAliasRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createAccountAliasRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateAccountAliasRequestRequired(createAccountAliasRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateAccountAliasRequestConstraints(createAccountAliasRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateAccountAlias(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createAccountAliasRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateGroup - 
func (c *DefaultAPIController) POSTCreateGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createGroupRequestParam := CreateGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateGroupRequestRequired(createGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateGroupRequestConstraints(createGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateInstanceProfile - 
func (c *DefaultAPIController) POSTCreateInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createInstanceProfileRequestParam := CreateInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateInstanceProfileRequestRequired(createInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateInstanceProfileRequestConstraints(createInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateLoginProfile - 
func (c *DefaultAPIController) POSTCreateLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createLoginProfileRequestParam := CreateLoginProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createLoginProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateLoginProfileRequestRequired(createLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateLoginProfileRequestConstraints(createLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateLoginProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createLoginProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTCreateOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createOpenIdConnectProviderRequestParam := CreateOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateOpenIdConnectProviderRequestRequired(createOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateOpenIdConnectProviderRequestConstraints(createOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreatePolicy - 
func (c *DefaultAPIController) POSTCreatePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createPolicyRequestParam := CreatePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePolicyRequestRequired(createPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePolicyRequestConstraints(createPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreatePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreatePolicyVersion - 
func (c *DefaultAPIController) POSTCreatePolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createPolicyVersionRequestParam := CreatePolicyVersionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPolicyVersionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePolicyVersionRequestRequired(createPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePolicyVersionRequestConstraints(createPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreatePolicyVersion(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createPolicyVersionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateRole - 
func (c *DefaultAPIController) POSTCreateRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createRoleRequestParam := CreateRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateRoleRequestRequired(createRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateRoleRequestConstraints(createRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateSAMLProvider - 
func (c *DefaultAPIController) POSTCreateSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createSamlProviderRequestParam := CreateSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateSamlProviderRequestRequired(createSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateSamlProviderRequestConstraints(createSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateServiceLinkedRole - 
func (c *DefaultAPIController) POSTCreateServiceLinkedRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createServiceLinkedRoleRequestParam := CreateServiceLinkedRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createServiceLinkedRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateServiceLinkedRoleRequestRequired(createServiceLinkedRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateServiceLinkedRoleRequestConstraints(createServiceLinkedRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateServiceLinkedRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createServiceLinkedRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateServiceSpecificCredential - 
func (c *DefaultAPIController) POSTCreateServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createServiceSpecificCredentialRequestParam := CreateServiceSpecificCredentialRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createServiceSpecificCredentialRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateServiceSpecificCredentialRequestRequired(createServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateServiceSpecificCredentialRequestConstraints(createServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateServiceSpecificCredential(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createServiceSpecificCredentialRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateUser - 
func (c *DefaultAPIController) POSTCreateUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createUserRequestParam := CreateUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUserRequestRequired(createUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUserRequestConstraints(createUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTCreateVirtualMFADevice - 
func (c *DefaultAPIController) POSTCreateVirtualMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	createVirtualMfaDeviceRequestParam := CreateVirtualMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createVirtualMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateVirtualMfaDeviceRequestRequired(createVirtualMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateVirtualMfaDeviceRequestConstraints(createVirtualMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTCreateVirtualMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, createVirtualMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeactivateMFADevice - 
func (c *DefaultAPIController) POSTDeactivateMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deactivateMfaDeviceRequestParam := DeactivateMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deactivateMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeactivateMfaDeviceRequestRequired(deactivateMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeactivateMfaDeviceRequestConstraints(deactivateMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeactivateMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deactivateMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteAccessKey - 
func (c *DefaultAPIController) POSTDeleteAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteAccessKeyRequestParam := DeleteAccessKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteAccessKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteAccessKeyRequestRequired(deleteAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteAccessKeyRequestConstraints(deleteAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteAccessKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteAccessKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteAccountAlias - 
func (c *DefaultAPIController) POSTDeleteAccountAlias(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteAccountAliasRequestParam := DeleteAccountAliasRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteAccountAliasRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteAccountAliasRequestRequired(deleteAccountAliasRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteAccountAliasRequestConstraints(deleteAccountAliasRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteAccountAlias(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteAccountAliasRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteAccountPasswordPolicy - 
func (c *DefaultAPIController) POSTDeleteAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.POSTDeleteAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteGroup - 
func (c *DefaultAPIController) POSTDeleteGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteGroupRequestParam := DeleteGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteGroupRequestRequired(deleteGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteGroupRequestConstraints(deleteGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteGroupPolicy - 
func (c *DefaultAPIController) POSTDeleteGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteGroupPolicyRequestParam := DeleteGroupPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteGroupPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteGroupPolicyRequestRequired(deleteGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteGroupPolicyRequestConstraints(deleteGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteGroupPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteGroupPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteInstanceProfile - 
func (c *DefaultAPIController) POSTDeleteInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteInstanceProfileRequestParam := DeleteInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteInstanceProfileRequestRequired(deleteInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteInstanceProfileRequestConstraints(deleteInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteLoginProfile - 
func (c *DefaultAPIController) POSTDeleteLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteLoginProfileRequestParam := DeleteLoginProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteLoginProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteLoginProfileRequestRequired(deleteLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteLoginProfileRequestConstraints(deleteLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteLoginProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteLoginProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTDeleteOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteOpenIdConnectProviderRequestParam := DeleteOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteOpenIdConnectProviderRequestRequired(deleteOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteOpenIdConnectProviderRequestConstraints(deleteOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeletePolicy - 
func (c *DefaultAPIController) POSTDeletePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deletePolicyRequestParam := DeletePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePolicyRequestRequired(deletePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePolicyRequestConstraints(deletePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeletePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deletePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeletePolicyVersion - 
func (c *DefaultAPIController) POSTDeletePolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deletePolicyVersionRequestParam := DeletePolicyVersionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deletePolicyVersionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeletePolicyVersionRequestRequired(deletePolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeletePolicyVersionRequestConstraints(deletePolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeletePolicyVersion(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deletePolicyVersionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteRole - 
func (c *DefaultAPIController) POSTDeleteRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteRoleRequestParam := DeleteRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteRoleRequestRequired(deleteRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteRoleRequestConstraints(deleteRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteRolePermissionsBoundary - 
func (c *DefaultAPIController) POSTDeleteRolePermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteRolePermissionsBoundaryRequestParam := DeleteRolePermissionsBoundaryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteRolePermissionsBoundaryRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteRolePermissionsBoundaryRequestRequired(deleteRolePermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteRolePermissionsBoundaryRequestConstraints(deleteRolePermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteRolePermissionsBoundary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteRolePermissionsBoundaryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteRolePolicy - 
func (c *DefaultAPIController) POSTDeleteRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteRolePolicyRequestParam := DeleteRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteRolePolicyRequestRequired(deleteRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteRolePolicyRequestConstraints(deleteRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteSAMLProvider - 
func (c *DefaultAPIController) POSTDeleteSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteSamlProviderRequestParam := DeleteSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteSamlProviderRequestRequired(deleteSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteSamlProviderRequestConstraints(deleteSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteSSHPublicKey - 
func (c *DefaultAPIController) POSTDeleteSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteSshPublicKeyRequestParam := DeleteSshPublicKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteSshPublicKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteSshPublicKeyRequestRequired(deleteSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteSshPublicKeyRequestConstraints(deleteSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteSSHPublicKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteSshPublicKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteServerCertificate - 
func (c *DefaultAPIController) POSTDeleteServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteServerCertificateRequestParam := DeleteServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteServerCertificateRequestRequired(deleteServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteServerCertificateRequestConstraints(deleteServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteServiceLinkedRole - 
func (c *DefaultAPIController) POSTDeleteServiceLinkedRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteServiceLinkedRoleRequestParam := DeleteServiceLinkedRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteServiceLinkedRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteServiceLinkedRoleRequestRequired(deleteServiceLinkedRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteServiceLinkedRoleRequestConstraints(deleteServiceLinkedRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteServiceLinkedRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteServiceLinkedRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteServiceSpecificCredential - 
func (c *DefaultAPIController) POSTDeleteServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteServiceSpecificCredentialRequestParam := DeleteServiceSpecificCredentialRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteServiceSpecificCredentialRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteServiceSpecificCredentialRequestRequired(deleteServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteServiceSpecificCredentialRequestConstraints(deleteServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteServiceSpecificCredential(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteServiceSpecificCredentialRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteSigningCertificate - 
func (c *DefaultAPIController) POSTDeleteSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteSigningCertificateRequestParam := DeleteSigningCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteSigningCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteSigningCertificateRequestRequired(deleteSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteSigningCertificateRequestConstraints(deleteSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteSigningCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteSigningCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteUser - 
func (c *DefaultAPIController) POSTDeleteUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteUserRequestParam := DeleteUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteUserRequestRequired(deleteUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteUserRequestConstraints(deleteUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteUserPermissionsBoundary - 
func (c *DefaultAPIController) POSTDeleteUserPermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteUserPermissionsBoundaryRequestParam := DeleteUserPermissionsBoundaryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteUserPermissionsBoundaryRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteUserPermissionsBoundaryRequestRequired(deleteUserPermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteUserPermissionsBoundaryRequestConstraints(deleteUserPermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteUserPermissionsBoundary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteUserPermissionsBoundaryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteUserPolicy - 
func (c *DefaultAPIController) POSTDeleteUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteUserPolicyRequestParam := DeleteUserPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteUserPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteUserPolicyRequestRequired(deleteUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteUserPolicyRequestConstraints(deleteUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteUserPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteUserPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDeleteVirtualMFADevice - 
func (c *DefaultAPIController) POSTDeleteVirtualMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	deleteVirtualMfaDeviceRequestParam := DeleteVirtualMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deleteVirtualMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeleteVirtualMfaDeviceRequestRequired(deleteVirtualMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeleteVirtualMfaDeviceRequestConstraints(deleteVirtualMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDeleteVirtualMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, deleteVirtualMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDetachGroupPolicy - 
func (c *DefaultAPIController) POSTDetachGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	detachGroupPolicyRequestParam := DetachGroupPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&detachGroupPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDetachGroupPolicyRequestRequired(detachGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDetachGroupPolicyRequestConstraints(detachGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDetachGroupPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, detachGroupPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDetachRolePolicy - 
func (c *DefaultAPIController) POSTDetachRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	detachRolePolicyRequestParam := DetachRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&detachRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDetachRolePolicyRequestRequired(detachRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDetachRolePolicyRequestConstraints(detachRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDetachRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, detachRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTDetachUserPolicy - 
func (c *DefaultAPIController) POSTDetachUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	detachUserPolicyRequestParam := DetachUserPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&detachUserPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDetachUserPolicyRequestRequired(detachUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDetachUserPolicyRequestConstraints(detachUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTDetachUserPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, detachUserPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTEnableMFADevice - 
func (c *DefaultAPIController) POSTEnableMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	enableMfaDeviceRequestParam := EnableMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&enableMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertEnableMfaDeviceRequestRequired(enableMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertEnableMfaDeviceRequestConstraints(enableMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTEnableMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, enableMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGenerateCredentialReport - 
func (c *DefaultAPIController) POSTGenerateCredentialReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.POSTGenerateCredentialReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGenerateOrganizationsAccessReport - 
func (c *DefaultAPIController) POSTGenerateOrganizationsAccessReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	generateOrganizationsAccessReportRequestParam := GenerateOrganizationsAccessReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateOrganizationsAccessReportRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateOrganizationsAccessReportRequestRequired(generateOrganizationsAccessReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateOrganizationsAccessReportRequestConstraints(generateOrganizationsAccessReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGenerateOrganizationsAccessReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, generateOrganizationsAccessReportRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGenerateServiceLastAccessedDetails - 
func (c *DefaultAPIController) POSTGenerateServiceLastAccessedDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	generateServiceLastAccessedDetailsRequestParam := GenerateServiceLastAccessedDetailsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generateServiceLastAccessedDetailsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGenerateServiceLastAccessedDetailsRequestRequired(generateServiceLastAccessedDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGenerateServiceLastAccessedDetailsRequestConstraints(generateServiceLastAccessedDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGenerateServiceLastAccessedDetails(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, generateServiceLastAccessedDetailsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetAccessKeyLastUsed - 
func (c *DefaultAPIController) POSTGetAccessKeyLastUsed(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getAccessKeyLastUsedRequestParam := GetAccessKeyLastUsedRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getAccessKeyLastUsedRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetAccessKeyLastUsedRequestRequired(getAccessKeyLastUsedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetAccessKeyLastUsedRequestConstraints(getAccessKeyLastUsedRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetAccessKeyLastUsed(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getAccessKeyLastUsedRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetAccountAuthorizationDetails - 
func (c *DefaultAPIController) POSTGetAccountAuthorizationDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	getAccountAuthorizationDetailsRequestParam := GetAccountAuthorizationDetailsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getAccountAuthorizationDetailsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetAccountAuthorizationDetailsRequestRequired(getAccountAuthorizationDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetAccountAuthorizationDetailsRequestConstraints(getAccountAuthorizationDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetAccountAuthorizationDetails(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, getAccountAuthorizationDetailsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetAccountPasswordPolicy - 
func (c *DefaultAPIController) POSTGetAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.POSTGetAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetAccountSummary - 
func (c *DefaultAPIController) POSTGetAccountSummary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.POSTGetAccountSummary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetContextKeysForCustomPolicy - 
func (c *DefaultAPIController) POSTGetContextKeysForCustomPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getContextKeysForCustomPolicyRequestParam := GetContextKeysForCustomPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getContextKeysForCustomPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetContextKeysForCustomPolicyRequestRequired(getContextKeysForCustomPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetContextKeysForCustomPolicyRequestConstraints(getContextKeysForCustomPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetContextKeysForCustomPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getContextKeysForCustomPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetContextKeysForPrincipalPolicy - 
func (c *DefaultAPIController) POSTGetContextKeysForPrincipalPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getContextKeysForPrincipalPolicyRequestParam := GetContextKeysForPrincipalPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getContextKeysForPrincipalPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetContextKeysForPrincipalPolicyRequestRequired(getContextKeysForPrincipalPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetContextKeysForPrincipalPolicyRequestConstraints(getContextKeysForPrincipalPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetContextKeysForPrincipalPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getContextKeysForPrincipalPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetCredentialReport - 
func (c *DefaultAPIController) POSTGetCredentialReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	result, err := c.service.POSTGetCredentialReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetGroup - 
func (c *DefaultAPIController) POSTGetGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	getGroupRequestParam := GetGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGroupRequestRequired(getGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGroupRequestConstraints(getGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, getGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetGroupPolicy - 
func (c *DefaultAPIController) POSTGetGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getGroupPolicyRequestParam := GetGroupPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getGroupPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetGroupPolicyRequestRequired(getGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetGroupPolicyRequestConstraints(getGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetGroupPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getGroupPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetInstanceProfile - 
func (c *DefaultAPIController) POSTGetInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getInstanceProfileRequestParam := GetInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetInstanceProfileRequestRequired(getInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetInstanceProfileRequestConstraints(getInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetLoginProfile - 
func (c *DefaultAPIController) POSTGetLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getLoginProfileRequestParam := GetLoginProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getLoginProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetLoginProfileRequestRequired(getLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetLoginProfileRequestConstraints(getLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetLoginProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getLoginProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetMFADevice - 
func (c *DefaultAPIController) POSTGetMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getMfaDeviceRequestParam := GetMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetMfaDeviceRequestRequired(getMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetMfaDeviceRequestConstraints(getMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTGetOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getOpenIdConnectProviderRequestParam := GetOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOpenIdConnectProviderRequestRequired(getOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOpenIdConnectProviderRequestConstraints(getOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetOrganizationsAccessReport - 
func (c *DefaultAPIController) POSTGetOrganizationsAccessReport(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getOrganizationsAccessReportRequestParam := GetOrganizationsAccessReportRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getOrganizationsAccessReportRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetOrganizationsAccessReportRequestRequired(getOrganizationsAccessReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetOrganizationsAccessReportRequestConstraints(getOrganizationsAccessReportRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetOrganizationsAccessReport(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getOrganizationsAccessReportRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetPolicy - 
func (c *DefaultAPIController) POSTGetPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getPolicyRequestParam := GetPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPolicyRequestRequired(getPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPolicyRequestConstraints(getPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetPolicyVersion - 
func (c *DefaultAPIController) POSTGetPolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getPolicyVersionRequestParam := GetPolicyVersionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getPolicyVersionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetPolicyVersionRequestRequired(getPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetPolicyVersionRequestConstraints(getPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetPolicyVersion(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getPolicyVersionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetRole - 
func (c *DefaultAPIController) POSTGetRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getRoleRequestParam := GetRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetRoleRequestRequired(getRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetRoleRequestConstraints(getRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetRolePolicy - 
func (c *DefaultAPIController) POSTGetRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getRolePolicyRequestParam := GetRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetRolePolicyRequestRequired(getRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetRolePolicyRequestConstraints(getRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetSAMLProvider - 
func (c *DefaultAPIController) POSTGetSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getSamlProviderRequestParam := GetSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSamlProviderRequestRequired(getSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSamlProviderRequestConstraints(getSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetSSHPublicKey - 
func (c *DefaultAPIController) POSTGetSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getSshPublicKeyRequestParam := GetSshPublicKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getSshPublicKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetSshPublicKeyRequestRequired(getSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetSshPublicKeyRequestConstraints(getSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetSSHPublicKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getSshPublicKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetServerCertificate - 
func (c *DefaultAPIController) POSTGetServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getServerCertificateRequestParam := GetServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetServerCertificateRequestRequired(getServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetServerCertificateRequestConstraints(getServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetServiceLastAccessedDetails - 
func (c *DefaultAPIController) POSTGetServiceLastAccessedDetails(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getServiceLastAccessedDetailsRequestParam := GetServiceLastAccessedDetailsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getServiceLastAccessedDetailsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetServiceLastAccessedDetailsRequestRequired(getServiceLastAccessedDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetServiceLastAccessedDetailsRequestConstraints(getServiceLastAccessedDetailsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetServiceLastAccessedDetails(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getServiceLastAccessedDetailsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetServiceLastAccessedDetailsWithEntities - 
func (c *DefaultAPIController) POSTGetServiceLastAccessedDetailsWithEntities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getServiceLastAccessedDetailsWithEntitiesRequestParam := GetServiceLastAccessedDetailsWithEntitiesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getServiceLastAccessedDetailsWithEntitiesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetServiceLastAccessedDetailsWithEntitiesRequestRequired(getServiceLastAccessedDetailsWithEntitiesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetServiceLastAccessedDetailsWithEntitiesRequestConstraints(getServiceLastAccessedDetailsWithEntitiesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetServiceLastAccessedDetailsWithEntities(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getServiceLastAccessedDetailsWithEntitiesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetServiceLinkedRoleDeletionStatus - 
func (c *DefaultAPIController) POSTGetServiceLinkedRoleDeletionStatus(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getServiceLinkedRoleDeletionStatusRequestParam := GetServiceLinkedRoleDeletionStatusRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getServiceLinkedRoleDeletionStatusRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetServiceLinkedRoleDeletionStatusRequestRequired(getServiceLinkedRoleDeletionStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetServiceLinkedRoleDeletionStatusRequestConstraints(getServiceLinkedRoleDeletionStatusRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetServiceLinkedRoleDeletionStatus(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getServiceLinkedRoleDeletionStatusRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetUser - 
func (c *DefaultAPIController) POSTGetUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getUserRequestParam := GetUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetUserRequestRequired(getUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetUserRequestConstraints(getUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTGetUserPolicy - 
func (c *DefaultAPIController) POSTGetUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	getUserPolicyRequestParam := GetUserPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getUserPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetUserPolicyRequestRequired(getUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetUserPolicyRequestConstraints(getUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTGetUserPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, getUserPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListAccessKeys - 
func (c *DefaultAPIController) POSTListAccessKeys(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listAccessKeysRequestParam := ListAccessKeysRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listAccessKeysRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListAccessKeysRequestRequired(listAccessKeysRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListAccessKeysRequestConstraints(listAccessKeysRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListAccessKeys(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listAccessKeysRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListAccountAliases - 
func (c *DefaultAPIController) POSTListAccountAliases(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listAccountAliasesRequestParam := ListAccountAliasesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listAccountAliasesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListAccountAliasesRequestRequired(listAccountAliasesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListAccountAliasesRequestConstraints(listAccountAliasesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListAccountAliases(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listAccountAliasesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListAttachedGroupPolicies - 
func (c *DefaultAPIController) POSTListAttachedGroupPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listAttachedGroupPoliciesRequestParam := ListAttachedGroupPoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listAttachedGroupPoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListAttachedGroupPoliciesRequestRequired(listAttachedGroupPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListAttachedGroupPoliciesRequestConstraints(listAttachedGroupPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListAttachedGroupPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listAttachedGroupPoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListAttachedRolePolicies - 
func (c *DefaultAPIController) POSTListAttachedRolePolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listAttachedRolePoliciesRequestParam := ListAttachedRolePoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listAttachedRolePoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListAttachedRolePoliciesRequestRequired(listAttachedRolePoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListAttachedRolePoliciesRequestConstraints(listAttachedRolePoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListAttachedRolePolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listAttachedRolePoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListAttachedUserPolicies - 
func (c *DefaultAPIController) POSTListAttachedUserPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listAttachedUserPoliciesRequestParam := ListAttachedUserPoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listAttachedUserPoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListAttachedUserPoliciesRequestRequired(listAttachedUserPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListAttachedUserPoliciesRequestConstraints(listAttachedUserPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListAttachedUserPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listAttachedUserPoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListEntitiesForPolicy - 
func (c *DefaultAPIController) POSTListEntitiesForPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listEntitiesForPolicyRequestParam := ListEntitiesForPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listEntitiesForPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListEntitiesForPolicyRequestRequired(listEntitiesForPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListEntitiesForPolicyRequestConstraints(listEntitiesForPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListEntitiesForPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listEntitiesForPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListGroupPolicies - 
func (c *DefaultAPIController) POSTListGroupPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listGroupPoliciesRequestParam := ListGroupPoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listGroupPoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListGroupPoliciesRequestRequired(listGroupPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListGroupPoliciesRequestConstraints(listGroupPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListGroupPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listGroupPoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListGroups - 
func (c *DefaultAPIController) POSTListGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listGroupsRequestParam := ListGroupsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listGroupsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListGroupsRequestRequired(listGroupsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListGroupsRequestConstraints(listGroupsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListGroups(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listGroupsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListGroupsForUser - 
func (c *DefaultAPIController) POSTListGroupsForUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listGroupsForUserRequestParam := ListGroupsForUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listGroupsForUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListGroupsForUserRequestRequired(listGroupsForUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListGroupsForUserRequestConstraints(listGroupsForUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListGroupsForUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listGroupsForUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListInstanceProfileTags - 
func (c *DefaultAPIController) POSTListInstanceProfileTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listInstanceProfileTagsRequestParam := ListInstanceProfileTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listInstanceProfileTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListInstanceProfileTagsRequestRequired(listInstanceProfileTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListInstanceProfileTagsRequestConstraints(listInstanceProfileTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListInstanceProfileTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listInstanceProfileTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListInstanceProfiles - 
func (c *DefaultAPIController) POSTListInstanceProfiles(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listInstanceProfilesRequestParam := ListInstanceProfilesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listInstanceProfilesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListInstanceProfilesRequestRequired(listInstanceProfilesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListInstanceProfilesRequestConstraints(listInstanceProfilesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListInstanceProfiles(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listInstanceProfilesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListInstanceProfilesForRole - 
func (c *DefaultAPIController) POSTListInstanceProfilesForRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listInstanceProfilesForRoleRequestParam := ListInstanceProfilesForRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listInstanceProfilesForRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListInstanceProfilesForRoleRequestRequired(listInstanceProfilesForRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListInstanceProfilesForRoleRequestConstraints(listInstanceProfilesForRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListInstanceProfilesForRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listInstanceProfilesForRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListMFADeviceTags - 
func (c *DefaultAPIController) POSTListMFADeviceTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listMfaDeviceTagsRequestParam := ListMfaDeviceTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listMfaDeviceTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListMfaDeviceTagsRequestRequired(listMfaDeviceTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListMfaDeviceTagsRequestConstraints(listMfaDeviceTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListMFADeviceTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listMfaDeviceTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListMFADevices - 
func (c *DefaultAPIController) POSTListMFADevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listMfaDevicesRequestParam := ListMfaDevicesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listMfaDevicesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListMfaDevicesRequestRequired(listMfaDevicesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListMfaDevicesRequestConstraints(listMfaDevicesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListMFADevices(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listMfaDevicesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListOpenIDConnectProviderTags - 
func (c *DefaultAPIController) POSTListOpenIDConnectProviderTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listOpenIdConnectProviderTagsRequestParam := ListOpenIdConnectProviderTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listOpenIdConnectProviderTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListOpenIdConnectProviderTagsRequestRequired(listOpenIdConnectProviderTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListOpenIdConnectProviderTagsRequestConstraints(listOpenIdConnectProviderTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListOpenIDConnectProviderTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listOpenIdConnectProviderTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListOpenIDConnectProviders - 
func (c *DefaultAPIController) POSTListOpenIDConnectProviders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.POSTListOpenIDConnectProviders(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListPolicies - 
func (c *DefaultAPIController) POSTListPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listPoliciesRequestParam := ListPoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listPoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListPoliciesRequestRequired(listPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListPoliciesRequestConstraints(listPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listPoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListPoliciesGrantingServiceAccess - 
func (c *DefaultAPIController) POSTListPoliciesGrantingServiceAccess(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	listPoliciesGrantingServiceAccessRequestParam := ListPoliciesGrantingServiceAccessRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listPoliciesGrantingServiceAccessRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListPoliciesGrantingServiceAccessRequestRequired(listPoliciesGrantingServiceAccessRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListPoliciesGrantingServiceAccessRequestConstraints(listPoliciesGrantingServiceAccessRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListPoliciesGrantingServiceAccess(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, listPoliciesGrantingServiceAccessRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListPolicyTags - 
func (c *DefaultAPIController) POSTListPolicyTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listPolicyTagsRequestParam := ListPolicyTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listPolicyTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListPolicyTagsRequestRequired(listPolicyTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListPolicyTagsRequestConstraints(listPolicyTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListPolicyTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listPolicyTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListPolicyVersions - 
func (c *DefaultAPIController) POSTListPolicyVersions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listPolicyVersionsRequestParam := ListPolicyVersionsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listPolicyVersionsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListPolicyVersionsRequestRequired(listPolicyVersionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListPolicyVersionsRequestConstraints(listPolicyVersionsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListPolicyVersions(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listPolicyVersionsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListRolePolicies - 
func (c *DefaultAPIController) POSTListRolePolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listRolePoliciesRequestParam := ListRolePoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listRolePoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListRolePoliciesRequestRequired(listRolePoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListRolePoliciesRequestConstraints(listRolePoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListRolePolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listRolePoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListRoleTags - 
func (c *DefaultAPIController) POSTListRoleTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listRoleTagsRequestParam := ListRoleTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listRoleTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListRoleTagsRequestRequired(listRoleTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListRoleTagsRequestConstraints(listRoleTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListRoleTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listRoleTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListRoles - 
func (c *DefaultAPIController) POSTListRoles(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listRolesRequestParam := ListRolesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listRolesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListRolesRequestRequired(listRolesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListRolesRequestConstraints(listRolesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListRoles(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listRolesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListSAMLProviderTags - 
func (c *DefaultAPIController) POSTListSAMLProviderTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listSamlProviderTagsRequestParam := ListSamlProviderTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listSamlProviderTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListSamlProviderTagsRequestRequired(listSamlProviderTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListSamlProviderTagsRequestConstraints(listSamlProviderTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListSAMLProviderTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listSamlProviderTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListSAMLProviders - 
func (c *DefaultAPIController) POSTListSAMLProviders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	bodyParam := map[string]interface{}{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.POSTListSAMLProviders(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListSSHPublicKeys - 
func (c *DefaultAPIController) POSTListSSHPublicKeys(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listSshPublicKeysRequestParam := ListSshPublicKeysRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listSshPublicKeysRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListSshPublicKeysRequestRequired(listSshPublicKeysRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListSshPublicKeysRequestConstraints(listSshPublicKeysRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListSSHPublicKeys(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listSshPublicKeysRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListServerCertificateTags - 
func (c *DefaultAPIController) POSTListServerCertificateTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listServerCertificateTagsRequestParam := ListServerCertificateTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listServerCertificateTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListServerCertificateTagsRequestRequired(listServerCertificateTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListServerCertificateTagsRequestConstraints(listServerCertificateTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListServerCertificateTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listServerCertificateTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListServerCertificates - 
func (c *DefaultAPIController) POSTListServerCertificates(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listServerCertificatesRequestParam := ListServerCertificatesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listServerCertificatesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListServerCertificatesRequestRequired(listServerCertificatesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListServerCertificatesRequestConstraints(listServerCertificatesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListServerCertificates(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listServerCertificatesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListServiceSpecificCredentials - 
func (c *DefaultAPIController) POSTListServiceSpecificCredentials(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	listServiceSpecificCredentialsRequestParam := ListServiceSpecificCredentialsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listServiceSpecificCredentialsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListServiceSpecificCredentialsRequestRequired(listServiceSpecificCredentialsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListServiceSpecificCredentialsRequestConstraints(listServiceSpecificCredentialsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListServiceSpecificCredentials(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, listServiceSpecificCredentialsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListSigningCertificates - 
func (c *DefaultAPIController) POSTListSigningCertificates(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listSigningCertificatesRequestParam := ListSigningCertificatesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listSigningCertificatesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListSigningCertificatesRequestRequired(listSigningCertificatesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListSigningCertificatesRequestConstraints(listSigningCertificatesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListSigningCertificates(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listSigningCertificatesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListUserPolicies - 
func (c *DefaultAPIController) POSTListUserPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listUserPoliciesRequestParam := ListUserPoliciesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listUserPoliciesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListUserPoliciesRequestRequired(listUserPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListUserPoliciesRequestConstraints(listUserPoliciesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListUserPolicies(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listUserPoliciesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListUserTags - 
func (c *DefaultAPIController) POSTListUserTags(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listUserTagsRequestParam := ListUserTagsRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listUserTagsRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListUserTagsRequestRequired(listUserTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListUserTagsRequestConstraints(listUserTagsRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListUserTags(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listUserTagsRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListUsers - 
func (c *DefaultAPIController) POSTListUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listUsersRequestParam := ListUsersRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listUsersRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListUsersRequestRequired(listUsersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListUsersRequestConstraints(listUsersRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListUsers(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listUsersRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTListVirtualMFADevices - 
func (c *DefaultAPIController) POSTListVirtualMFADevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	listVirtualMfaDevicesRequestParam := ListVirtualMfaDevicesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listVirtualMfaDevicesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListVirtualMfaDevicesRequestRequired(listVirtualMfaDevicesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListVirtualMfaDevicesRequestConstraints(listVirtualMfaDevicesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTListVirtualMFADevices(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, listVirtualMfaDevicesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTPutGroupPolicy - 
func (c *DefaultAPIController) POSTPutGroupPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	putGroupPolicyRequestParam := PutGroupPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putGroupPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutGroupPolicyRequestRequired(putGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutGroupPolicyRequestConstraints(putGroupPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTPutGroupPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, putGroupPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTPutRolePermissionsBoundary - 
func (c *DefaultAPIController) POSTPutRolePermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	putRolePermissionsBoundaryRequestParam := PutRolePermissionsBoundaryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putRolePermissionsBoundaryRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutRolePermissionsBoundaryRequestRequired(putRolePermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutRolePermissionsBoundaryRequestConstraints(putRolePermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTPutRolePermissionsBoundary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, putRolePermissionsBoundaryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTPutRolePolicy - 
func (c *DefaultAPIController) POSTPutRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	putRolePolicyRequestParam := PutRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutRolePolicyRequestRequired(putRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutRolePolicyRequestConstraints(putRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTPutRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, putRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTPutUserPermissionsBoundary - 
func (c *DefaultAPIController) POSTPutUserPermissionsBoundary(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	putUserPermissionsBoundaryRequestParam := PutUserPermissionsBoundaryRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putUserPermissionsBoundaryRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutUserPermissionsBoundaryRequestRequired(putUserPermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutUserPermissionsBoundaryRequestConstraints(putUserPermissionsBoundaryRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTPutUserPermissionsBoundary(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, putUserPermissionsBoundaryRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTPutUserPolicy - 
func (c *DefaultAPIController) POSTPutUserPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	putUserPolicyRequestParam := PutUserPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&putUserPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPutUserPolicyRequestRequired(putUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPutUserPolicyRequestConstraints(putUserPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTPutUserPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, putUserPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTRemoveClientIDFromOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTRemoveClientIDFromOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	removeClientIdFromOpenIdConnectProviderRequestParam := RemoveClientIdFromOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeClientIdFromOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveClientIdFromOpenIdConnectProviderRequestRequired(removeClientIdFromOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveClientIdFromOpenIdConnectProviderRequestConstraints(removeClientIdFromOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTRemoveClientIDFromOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, removeClientIdFromOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTRemoveRoleFromInstanceProfile - 
func (c *DefaultAPIController) POSTRemoveRoleFromInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	removeRoleFromInstanceProfileRequestParam := RemoveRoleFromInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeRoleFromInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveRoleFromInstanceProfileRequestRequired(removeRoleFromInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveRoleFromInstanceProfileRequestConstraints(removeRoleFromInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTRemoveRoleFromInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, removeRoleFromInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTRemoveUserFromGroup - 
func (c *DefaultAPIController) POSTRemoveUserFromGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	removeUserFromGroupRequestParam := RemoveUserFromGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeUserFromGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveUserFromGroupRequestRequired(removeUserFromGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveUserFromGroupRequestConstraints(removeUserFromGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTRemoveUserFromGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, removeUserFromGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTResetServiceSpecificCredential - 
func (c *DefaultAPIController) POSTResetServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	resetServiceSpecificCredentialRequestParam := ResetServiceSpecificCredentialRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&resetServiceSpecificCredentialRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertResetServiceSpecificCredentialRequestRequired(resetServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertResetServiceSpecificCredentialRequestConstraints(resetServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTResetServiceSpecificCredential(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, resetServiceSpecificCredentialRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTResyncMFADevice - 
func (c *DefaultAPIController) POSTResyncMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	resyncMfaDeviceRequestParam := ResyncMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&resyncMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertResyncMfaDeviceRequestRequired(resyncMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertResyncMfaDeviceRequestConstraints(resyncMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTResyncMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, resyncMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTSetDefaultPolicyVersion - 
func (c *DefaultAPIController) POSTSetDefaultPolicyVersion(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	setDefaultPolicyVersionRequestParam := SetDefaultPolicyVersionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setDefaultPolicyVersionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetDefaultPolicyVersionRequestRequired(setDefaultPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetDefaultPolicyVersionRequestConstraints(setDefaultPolicyVersionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTSetDefaultPolicyVersion(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, setDefaultPolicyVersionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTSetSecurityTokenServicePreferences - 
func (c *DefaultAPIController) POSTSetSecurityTokenServicePreferences(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	setSecurityTokenServicePreferencesRequestParam := SetSecurityTokenServicePreferencesRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setSecurityTokenServicePreferencesRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetSecurityTokenServicePreferencesRequestRequired(setSecurityTokenServicePreferencesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetSecurityTokenServicePreferencesRequestConstraints(setSecurityTokenServicePreferencesRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTSetSecurityTokenServicePreferences(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, setSecurityTokenServicePreferencesRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTSimulateCustomPolicy - 
func (c *DefaultAPIController) POSTSimulateCustomPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	simulateCustomPolicyRequestParam := SimulateCustomPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&simulateCustomPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSimulateCustomPolicyRequestRequired(simulateCustomPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSimulateCustomPolicyRequestConstraints(simulateCustomPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTSimulateCustomPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, simulateCustomPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTSimulatePrincipalPolicy - 
func (c *DefaultAPIController) POSTSimulatePrincipalPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	var maxItemsParam string
	if query.Has("MaxItems") {
		param := query.Get("MaxItems")

		maxItemsParam = param
	} else {
	}
	var markerParam string
	if query.Has("Marker") {
		param := query.Get("Marker")

		markerParam = param
	} else {
	}
	simulatePrincipalPolicyRequestParam := SimulatePrincipalPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&simulatePrincipalPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSimulatePrincipalPolicyRequestRequired(simulatePrincipalPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSimulatePrincipalPolicyRequestConstraints(simulatePrincipalPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTSimulatePrincipalPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, maxItemsParam, markerParam, simulatePrincipalPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagInstanceProfile - 
func (c *DefaultAPIController) POSTTagInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagInstanceProfileRequestParam := TagInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagInstanceProfileRequestRequired(tagInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagInstanceProfileRequestConstraints(tagInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagMFADevice - 
func (c *DefaultAPIController) POSTTagMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagMfaDeviceRequestParam := TagMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagMfaDeviceRequestRequired(tagMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagMfaDeviceRequestConstraints(tagMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTTagOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagOpenIdConnectProviderRequestParam := TagOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagOpenIdConnectProviderRequestRequired(tagOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagOpenIdConnectProviderRequestConstraints(tagOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagPolicy - 
func (c *DefaultAPIController) POSTTagPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagPolicyRequestParam := TagPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagPolicyRequestRequired(tagPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagPolicyRequestConstraints(tagPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagRole - 
func (c *DefaultAPIController) POSTTagRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagRoleRequestParam := TagRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagRoleRequestRequired(tagRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagRoleRequestConstraints(tagRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagSAMLProvider - 
func (c *DefaultAPIController) POSTTagSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagSamlProviderRequestParam := TagSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagSamlProviderRequestRequired(tagSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagSamlProviderRequestConstraints(tagSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagServerCertificate - 
func (c *DefaultAPIController) POSTTagServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagServerCertificateRequestParam := TagServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagServerCertificateRequestRequired(tagServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagServerCertificateRequestConstraints(tagServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTTagUser - 
func (c *DefaultAPIController) POSTTagUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	tagUserRequestParam := TagUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tagUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTagUserRequestRequired(tagUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTagUserRequestConstraints(tagUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTTagUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, tagUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagInstanceProfile - 
func (c *DefaultAPIController) POSTUntagInstanceProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagInstanceProfileRequestParam := UntagInstanceProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagInstanceProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagInstanceProfileRequestRequired(untagInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagInstanceProfileRequestConstraints(untagInstanceProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagInstanceProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagInstanceProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagMFADevice - 
func (c *DefaultAPIController) POSTUntagMFADevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagMfaDeviceRequestParam := UntagMfaDeviceRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagMfaDeviceRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagMfaDeviceRequestRequired(untagMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagMfaDeviceRequestConstraints(untagMfaDeviceRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagMFADevice(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagMfaDeviceRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagOpenIDConnectProvider - 
func (c *DefaultAPIController) POSTUntagOpenIDConnectProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagOpenIdConnectProviderRequestParam := UntagOpenIdConnectProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagOpenIdConnectProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagOpenIdConnectProviderRequestRequired(untagOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagOpenIdConnectProviderRequestConstraints(untagOpenIdConnectProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagOpenIDConnectProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagOpenIdConnectProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagPolicy - 
func (c *DefaultAPIController) POSTUntagPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagPolicyRequestParam := UntagPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagPolicyRequestRequired(untagPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagPolicyRequestConstraints(untagPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagRole - 
func (c *DefaultAPIController) POSTUntagRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagRoleRequestParam := UntagRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagRoleRequestRequired(untagRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagRoleRequestConstraints(untagRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagSAMLProvider - 
func (c *DefaultAPIController) POSTUntagSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagSamlProviderRequestParam := UntagSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagSamlProviderRequestRequired(untagSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagSamlProviderRequestConstraints(untagSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagServerCertificate - 
func (c *DefaultAPIController) POSTUntagServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagServerCertificateRequestParam := UntagServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagServerCertificateRequestRequired(untagServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagServerCertificateRequestConstraints(untagServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUntagUser - 
func (c *DefaultAPIController) POSTUntagUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	untagUserRequestParam := UntagUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&untagUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUntagUserRequestRequired(untagUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUntagUserRequestConstraints(untagUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUntagUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, untagUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateAccessKey - 
func (c *DefaultAPIController) POSTUpdateAccessKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateAccessKeyRequestParam := UpdateAccessKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAccessKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAccessKeyRequestRequired(updateAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateAccessKeyRequestConstraints(updateAccessKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateAccessKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateAccessKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateAccountPasswordPolicy - 
func (c *DefaultAPIController) POSTUpdateAccountPasswordPolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateAccountPasswordPolicyRequestParam := UpdateAccountPasswordPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAccountPasswordPolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAccountPasswordPolicyRequestRequired(updateAccountPasswordPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateAccountPasswordPolicyRequestConstraints(updateAccountPasswordPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateAccountPasswordPolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateAccountPasswordPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateAssumeRolePolicy - 
func (c *DefaultAPIController) POSTUpdateAssumeRolePolicy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateAssumeRolePolicyRequestParam := UpdateAssumeRolePolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateAssumeRolePolicyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateAssumeRolePolicyRequestRequired(updateAssumeRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateAssumeRolePolicyRequestConstraints(updateAssumeRolePolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateAssumeRolePolicy(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateAssumeRolePolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateGroup - 
func (c *DefaultAPIController) POSTUpdateGroup(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateGroupRequestParam := UpdateGroupRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateGroupRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateGroupRequestRequired(updateGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateGroupRequestConstraints(updateGroupRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateGroup(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateGroupRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateLoginProfile - 
func (c *DefaultAPIController) POSTUpdateLoginProfile(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateLoginProfileRequestParam := UpdateLoginProfileRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateLoginProfileRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateLoginProfileRequestRequired(updateLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateLoginProfileRequestConstraints(updateLoginProfileRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateLoginProfile(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateLoginProfileRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateOpenIDConnectProviderThumbprint - 
func (c *DefaultAPIController) POSTUpdateOpenIDConnectProviderThumbprint(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateOpenIdConnectProviderThumbprintRequestParam := UpdateOpenIdConnectProviderThumbprintRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateOpenIdConnectProviderThumbprintRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateOpenIdConnectProviderThumbprintRequestRequired(updateOpenIdConnectProviderThumbprintRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateOpenIdConnectProviderThumbprintRequestConstraints(updateOpenIdConnectProviderThumbprintRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateOpenIDConnectProviderThumbprint(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateOpenIdConnectProviderThumbprintRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateRole - 
func (c *DefaultAPIController) POSTUpdateRole(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateRoleRequestParam := UpdateRoleRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateRoleRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateRoleRequestRequired(updateRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateRoleRequestConstraints(updateRoleRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateRole(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateRoleRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateRoleDescription - 
func (c *DefaultAPIController) POSTUpdateRoleDescription(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateRoleDescriptionRequestParam := UpdateRoleDescriptionRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateRoleDescriptionRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateRoleDescriptionRequestRequired(updateRoleDescriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateRoleDescriptionRequestConstraints(updateRoleDescriptionRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateRoleDescription(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateRoleDescriptionRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateSAMLProvider - 
func (c *DefaultAPIController) POSTUpdateSAMLProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateSamlProviderRequestParam := UpdateSamlProviderRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateSamlProviderRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateSamlProviderRequestRequired(updateSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateSamlProviderRequestConstraints(updateSamlProviderRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateSAMLProvider(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateSamlProviderRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateSSHPublicKey - 
func (c *DefaultAPIController) POSTUpdateSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateSshPublicKeyRequestParam := UpdateSshPublicKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateSshPublicKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateSshPublicKeyRequestRequired(updateSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateSshPublicKeyRequestConstraints(updateSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateSSHPublicKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateSshPublicKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateServerCertificate - 
func (c *DefaultAPIController) POSTUpdateServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateServerCertificateRequestParam := UpdateServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateServerCertificateRequestRequired(updateServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateServerCertificateRequestConstraints(updateServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateServiceSpecificCredential - 
func (c *DefaultAPIController) POSTUpdateServiceSpecificCredential(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateServiceSpecificCredentialRequestParam := UpdateServiceSpecificCredentialRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateServiceSpecificCredentialRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateServiceSpecificCredentialRequestRequired(updateServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateServiceSpecificCredentialRequestConstraints(updateServiceSpecificCredentialRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateServiceSpecificCredential(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateServiceSpecificCredentialRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateSigningCertificate - 
func (c *DefaultAPIController) POSTUpdateSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateSigningCertificateRequestParam := UpdateSigningCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateSigningCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateSigningCertificateRequestRequired(updateSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateSigningCertificateRequestConstraints(updateSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateSigningCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateSigningCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUpdateUser - 
func (c *DefaultAPIController) POSTUpdateUser(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	updateUserRequestParam := UpdateUserRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserRequestRequired(updateUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateUserRequestConstraints(updateUserRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUpdateUser(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, updateUserRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUploadSSHPublicKey - 
func (c *DefaultAPIController) POSTUploadSSHPublicKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	uploadSshPublicKeyRequestParam := UploadSshPublicKeyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&uploadSshPublicKeyRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUploadSshPublicKeyRequestRequired(uploadSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUploadSshPublicKeyRequestConstraints(uploadSshPublicKeyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUploadSSHPublicKey(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, uploadSshPublicKeyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUploadServerCertificate - 
func (c *DefaultAPIController) POSTUploadServerCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	uploadServerCertificateRequestParam := UploadServerCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&uploadServerCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUploadServerCertificateRequestRequired(uploadServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUploadServerCertificateRequestConstraints(uploadServerCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUploadServerCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, uploadServerCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// POSTUploadSigningCertificate - 
func (c *DefaultAPIController) POSTUploadSigningCertificate(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var actionParam string
	if query.Has("Action") {
		param := query.Get("Action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Action"}, nil)
		return
	}
	var versionParam string
	if query.Has("Version") {
		param := query.Get("Version")

		versionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "Version"}, nil)
		return
	}
	xAmzContentSha256Param := r.Header.Get("X-Amz-Content-Sha256")
	xAmzDateParam := r.Header.Get("X-Amz-Date")
	xAmzAlgorithmParam := r.Header.Get("X-Amz-Algorithm")
	xAmzCredentialParam := r.Header.Get("X-Amz-Credential")
	xAmzSecurityTokenParam := r.Header.Get("X-Amz-Security-Token")
	xAmzSignatureParam := r.Header.Get("X-Amz-Signature")
	xAmzSignedHeadersParam := r.Header.Get("X-Amz-SignedHeaders")
	uploadSigningCertificateRequestParam := UploadSigningCertificateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&uploadSigningCertificateRequestParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUploadSigningCertificateRequestRequired(uploadSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUploadSigningCertificateRequestConstraints(uploadSigningCertificateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.POSTUploadSigningCertificate(r.Context(), actionParam, versionParam, xAmzContentSha256Param, xAmzDateParam, xAmzAlgorithmParam, xAmzCredentialParam, xAmzSecurityTokenParam, xAmzSignatureParam, xAmzSignedHeadersParam, uploadSigningCertificateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
