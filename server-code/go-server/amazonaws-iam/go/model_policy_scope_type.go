/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type PolicyScopeType string

// List of PolicyScopeType
const (
	ALL PolicyScopeType = "All"
	AWS PolicyScopeType = "AWS"
	LOCAL PolicyScopeType = "Local"
)

// AllowedPolicyScopeTypeEnumValues is all the allowed values of PolicyScopeType enum
var AllowedPolicyScopeTypeEnumValues = []PolicyScopeType{
	"All",
	"AWS",
	"Local",
}

// validPolicyScopeTypeEnumValue provides a map of PolicyScopeTypes for fast verification of use input
var validPolicyScopeTypeEnumValues = map[PolicyScopeType]struct{}{
	"All": {},
	"AWS": {},
	"Local": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PolicyScopeType) IsValid() bool {
	_, ok := validPolicyScopeTypeEnumValues[v]
	return ok
}

// NewPolicyScopeTypeFromValue returns a pointer to a valid PolicyScopeType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPolicyScopeTypeFromValue(v string) (PolicyScopeType, error) {
	ev := PolicyScopeType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PolicyScopeType: valid values are %v", v, AllowedPolicyScopeTypeEnumValues)
	}
}



// AssertPolicyScopeTypeRequired checks if the required fields are not zero-ed
func AssertPolicyScopeTypeRequired(obj PolicyScopeType) error {
	return nil
}

// AssertPolicyScopeTypeConstraints checks if the values respects the defined constraints
func AssertPolicyScopeTypeConstraints(obj PolicyScopeType) error {
	return nil
}
