/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type EncodingType string

// List of EncodingType
const (
	SSH EncodingType = "SSH"
	PEM EncodingType = "PEM"
)

// AllowedEncodingTypeEnumValues is all the allowed values of EncodingType enum
var AllowedEncodingTypeEnumValues = []EncodingType{
	"SSH",
	"PEM",
}

// validEncodingTypeEnumValue provides a map of EncodingTypes for fast verification of use input
var validEncodingTypeEnumValues = map[EncodingType]struct{}{
	"SSH": {},
	"PEM": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncodingType) IsValid() bool {
	_, ok := validEncodingTypeEnumValues[v]
	return ok
}

// NewEncodingTypeFromValue returns a pointer to a valid EncodingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncodingTypeFromValue(v string) (EncodingType, error) {
	ev := EncodingType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for EncodingType: valid values are %v", v, AllowedEncodingTypeEnumValues)
	}
}



// AssertEncodingTypeRequired checks if the required fields are not zero-ed
func AssertEncodingTypeRequired(obj EncodingType) error {
	return nil
}

// AssertEncodingTypeConstraints checks if the values respects the defined constraints
func AssertEncodingTypeConstraints(obj EncodingType) error {
	return nil
}
