/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type StatusType string

// List of StatusType
const (
	ACTIVE StatusType = "Active"
	INACTIVE StatusType = "Inactive"
)

// AllowedStatusTypeEnumValues is all the allowed values of StatusType enum
var AllowedStatusTypeEnumValues = []StatusType{
	"Active",
	"Inactive",
}

// validStatusTypeEnumValue provides a map of StatusTypes for fast verification of use input
var validStatusTypeEnumValues = map[StatusType]struct{}{
	"Active": {},
	"Inactive": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StatusType) IsValid() bool {
	_, ok := validStatusTypeEnumValues[v]
	return ok
}

// NewStatusTypeFromValue returns a pointer to a valid StatusType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStatusTypeFromValue(v string) (StatusType, error) {
	ev := StatusType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for StatusType: valid values are %v", v, AllowedStatusTypeEnumValues)
	}
}



// AssertStatusTypeRequired checks if the required fields are not zero-ed
func AssertStatusTypeRequired(obj StatusType) error {
	return nil
}

// AssertStatusTypeConstraints checks if the values respects the defined constraints
func AssertStatusTypeConstraints(obj StatusType) error {
	return nil
}
