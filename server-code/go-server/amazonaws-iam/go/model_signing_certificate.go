/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// SigningCertificate - <p>Contains information about an X.509 signing certificate.</p> <p>This data type is used as a response element in the <a>UploadSigningCertificate</a> and <a>ListSigningCertificates</a> operations. </p>
type SigningCertificate struct {

	UserName string `json:"UserName"`

	CertificateId string `json:"CertificateId"`

	CertificateBody string `json:"CertificateBody"`

	Status StatusType `json:"Status"`

	UploadDate time.Time `json:"UploadDate,omitempty"`
}

// AssertSigningCertificateRequired checks if the required fields are not zero-ed
func AssertSigningCertificateRequired(obj SigningCertificate) error {
	elements := map[string]interface{}{
		"UserName": obj.UserName,
		"CertificateId": obj.CertificateId,
		"CertificateBody": obj.CertificateBody,
		"Status": obj.Status,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.UserName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.CertificateId); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.CertificateBody); err != nil {
		return err
	}
	if err := AssertstatusTypeRequired(obj.Status); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.UploadDate); err != nil {
		return err
	}
	return nil
}

// AssertSigningCertificateConstraints checks if the values respects the defined constraints
func AssertSigningCertificateConstraints(obj SigningCertificate) error {
	return nil
}
