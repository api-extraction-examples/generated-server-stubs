/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// PolicyGrantingServiceAccess - <p>Contains details about the permissions policies that are attached to the specified identity (user, group, or role).</p> <p>This data type is an element of the <a>ListPoliciesGrantingServiceAccessEntry</a> object.</p>
type PolicyGrantingServiceAccess struct {

	PolicyName string `json:"PolicyName"`

	PolicyType PolicyType `json:"PolicyType"`

	// <p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href=\"https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html\">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>
	PolicyArn string `json:"PolicyArn,omitempty"`

	EntityType PolicyOwnerEntityType `json:"EntityType,omitempty"`

	EntityName string `json:"EntityName,omitempty"`
}

// AssertPolicyGrantingServiceAccessRequired checks if the required fields are not zero-ed
func AssertPolicyGrantingServiceAccessRequired(obj PolicyGrantingServiceAccess) error {
	elements := map[string]interface{}{
		"PolicyName": obj.PolicyName,
		"PolicyType": obj.PolicyType,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.PolicyName); err != nil {
		return err
	}
	if err := AssertpolicyTypeRequired(obj.PolicyType); err != nil {
		return err
	}
	if err := AssertpolicyOwnerEntityTypeRequired(obj.EntityType); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.EntityName); err != nil {
		return err
	}
	return nil
}

// AssertPolicyGrantingServiceAccessConstraints checks if the values respects the defined constraints
func AssertPolicyGrantingServiceAccessConstraints(obj PolicyGrantingServiceAccess) error {
	return nil
}
