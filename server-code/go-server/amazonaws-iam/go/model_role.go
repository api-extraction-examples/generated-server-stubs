/*
 * AWS Identity and Access Management
 *
 * <fullname>Identity and Access Management</fullname> <p>Identity and Access Management (IAM) is a web service for securely controlling access to Amazon Web Services services. With IAM, you can centrally manage users, security credentials such as access keys, and permissions that control which Amazon Web Services resources users and applications can access. For more information about IAM, see <a href=\"http://aws.amazon.com/iam/\">Identity and Access Management (IAM)</a> and the <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/\">Identity and Access Management User Guide</a>.</p>
 *
 * API version: 2010-05-08
 * Contact: mike.ralphson@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"time"
)



// Role - Contains information about an IAM role. This structure is returned as a response element in several API operations that interact with roles.
type Role struct {

	Path string `json:"Path"`

	RoleName string `json:"RoleName"`

	RoleId string `json:"RoleId"`

	Arn string `json:"Arn"`

	CreateDate time.Time `json:"CreateDate"`

	AssumeRolePolicyDocument string `json:"AssumeRolePolicyDocument,omitempty"`

	Description string `json:"Description,omitempty"`

	MaxSessionDuration int32 `json:"MaxSessionDuration,omitempty"`

	PermissionsBoundary RolePermissionsBoundary `json:"PermissionsBoundary,omitempty"`

	Tags Array `json:"Tags,omitempty"`

	RoleLastUsed RoleRoleLastUsed `json:"RoleLastUsed,omitempty"`
}

// AssertRoleRequired checks if the required fields are not zero-ed
func AssertRoleRequired(obj Role) error {
	elements := map[string]interface{}{
		"Path": obj.Path,
		"RoleName": obj.RoleName,
		"RoleId": obj.RoleId,
		"Arn": obj.Arn,
		"CreateDate": obj.CreateDate,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertstringRequired(obj.Path); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.RoleName); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.RoleId); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Arn); err != nil {
		return err
	}
	if err := Asserttime.TimeRequired(obj.CreateDate); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.AssumeRolePolicyDocument); err != nil {
		return err
	}
	if err := AssertstringRequired(obj.Description); err != nil {
		return err
	}
	if err := Assertint32Required(obj.MaxSessionDuration); err != nil {
		return err
	}
	if err := AssertRolePermissionsBoundaryRequired(obj.PermissionsBoundary); err != nil {
		return err
	}
	if err := AssertarrayRequired(obj.Tags); err != nil {
		return err
	}
	if err := AssertRoleRoleLastUsedRequired(obj.RoleLastUsed); err != nil {
		return err
	}
	return nil
}

// AssertRoleConstraints checks if the values respects the defined constraints
func AssertRoleConstraints(obj Role) error {
	return nil
}
