/*
 * Top Stories
 *
 * The Top Stories API provides lists of articles and associated images by section.
 *
 * API version: 2.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// StoriesAPIController binds http requests to an api service and writes the service results to the http response
type StoriesAPIController struct {
	service StoriesAPIServicer
	errorHandler ErrorHandler
}

// StoriesAPIOption for how the controller is set up.
type StoriesAPIOption func(*StoriesAPIController)

// WithStoriesAPIErrorHandler inject ErrorHandler into controller
func WithStoriesAPIErrorHandler(h ErrorHandler) StoriesAPIOption {
	return func(c *StoriesAPIController) {
		c.errorHandler = h
	}
}

// NewStoriesAPIController creates a default api controller
func NewStoriesAPIController(s StoriesAPIServicer, opts ...StoriesAPIOption) Router {
	controller := &StoriesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StoriesAPIController
func (c *StoriesAPIController) Routes() Routes {
	return Routes{
		"SectionFormatGet": Route{
			strings.ToUpper("Get"),
			"/svc/topstories/v2/{section}.{format}",
			c.SectionFormatGet,
		},
	}
}

// SectionFormatGet - Top Stories
func (c *StoriesAPIController) SectionFormatGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sectionParam := params["section"]
	if sectionParam == "" {
		c.errorHandler(w, r, &RequiredError{"section"}, nil)
		return
	}
	formatParam := params["format"]
	if formatParam == "" {
		c.errorHandler(w, r, &RequiredError{"format"}, nil)
		return
	}
	var callbackParam string
	if query.Has("callback") {
		param := query.Get("callback")

		callbackParam = param
	} else {
	}
	result, err := c.service.SectionFormatGet(r.Context(), sectionParam, formatParam, callbackParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
