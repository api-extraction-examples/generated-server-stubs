/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// MediaAPIController binds http requests to an api service and writes the service results to the http response
type MediaAPIController struct {
	service MediaAPIServicer
	errorHandler ErrorHandler
}

// MediaAPIOption for how the controller is set up.
type MediaAPIOption func(*MediaAPIController)

// WithMediaAPIErrorHandler inject ErrorHandler into controller
func WithMediaAPIErrorHandler(h ErrorHandler) MediaAPIOption {
	return func(c *MediaAPIController) {
		c.errorHandler = h
	}
}

// NewMediaAPIController creates a default api controller
func NewMediaAPIController(s MediaAPIServicer, opts ...MediaAPIOption) Router {
	controller := &MediaAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MediaAPIController
func (c *MediaAPIController) Routes() Routes {
	return Routes{
		"MediaMediaIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/{media-id}",
			c.MediaMediaIdGet,
		},
		"MediaPopularGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/popular",
			c.MediaPopularGet,
		},
		"MediaSearchGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/search",
			c.MediaSearchGet,
		},
		"MediaShortcodeShortcodeGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/shortcode/{shortcode}",
			c.MediaShortcodeShortcodeGet,
		},
	}
}

// MediaMediaIdGet - Get information about a media object.
func (c *MediaAPIController) MediaMediaIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdGet(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaPopularGet - Get a list of currently popular media.
// Deprecated
func (c *MediaAPIController) MediaPopularGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.MediaPopularGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaSearchGet - Search for media in a given area.
func (c *MediaAPIController) MediaSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var latParam float64
	if query.Has("lat") {
		param, err := parseNumericParameter[float64](
			query.Get("lat"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		latParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "lat"}, nil)
		return
	}
	var lngParam float64
	if query.Has("lng") {
		param, err := parseNumericParameter[float64](
			query.Get("lng"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		lngParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "lng"}, nil)
		return
	}
	var minTimestampParam int64
	if query.Has("min_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("min_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minTimestampParam = param
	} else {
	}
	var maxTimestampParam int64
	if query.Has("max_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("max_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxTimestampParam = param
	} else {
	}
	var distanceParam int32
	if query.Has("distance") {
		param, err := parseNumericParameter[int32](
			query.Get("distance"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		distanceParam = param
	} else {
	}
	result, err := c.service.MediaSearchGet(r.Context(), latParam, lngParam, minTimestampParam, maxTimestampParam, distanceParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaShortcodeShortcodeGet - Get information about a media object.
func (c *MediaAPIController) MediaShortcodeShortcodeGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	shortcodeParam := params["shortcode"]
	if shortcodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"shortcode"}, nil)
		return
	}
	result, err := c.service.MediaShortcodeShortcodeGet(r.Context(), shortcodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
