/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// GeographiesAPIController binds http requests to an api service and writes the service results to the http response
type GeographiesAPIController struct {
	service GeographiesAPIServicer
	errorHandler ErrorHandler
}

// GeographiesAPIOption for how the controller is set up.
type GeographiesAPIOption func(*GeographiesAPIController)

// WithGeographiesAPIErrorHandler inject ErrorHandler into controller
func WithGeographiesAPIErrorHandler(h ErrorHandler) GeographiesAPIOption {
	return func(c *GeographiesAPIController) {
		c.errorHandler = h
	}
}

// NewGeographiesAPIController creates a default api controller
func NewGeographiesAPIController(s GeographiesAPIServicer, opts ...GeographiesAPIOption) Router {
	controller := &GeographiesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the GeographiesAPIController
func (c *GeographiesAPIController) Routes() Routes {
	return Routes{
		"GeographiesGeoIdMediaRecentGet": Route{
			strings.ToUpper("Get"),
			"/v1/geographies/{geo-id}/media/recent",
			c.GeographiesGeoIdMediaRecentGet,
		},
	}
}

// GeographiesGeoIdMediaRecentGet - Get recent media from a custom geo-id.
// Deprecated
func (c *GeographiesAPIController) GeographiesGeoIdMediaRecentGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	geoIdParam := params["geo-id"]
	if geoIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"geo-id"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	result, err := c.service.GeographiesGeoIdMediaRecentGet(r.Context(), geoIdParam, countParam, minIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
