/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LikesAPIController binds http requests to an api service and writes the service results to the http response
type LikesAPIController struct {
	service LikesAPIServicer
	errorHandler ErrorHandler
}

// LikesAPIOption for how the controller is set up.
type LikesAPIOption func(*LikesAPIController)

// WithLikesAPIErrorHandler inject ErrorHandler into controller
func WithLikesAPIErrorHandler(h ErrorHandler) LikesAPIOption {
	return func(c *LikesAPIController) {
		c.errorHandler = h
	}
}

// NewLikesAPIController creates a default api controller
func NewLikesAPIController(s LikesAPIServicer, opts ...LikesAPIOption) Router {
	controller := &LikesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LikesAPIController
func (c *LikesAPIController) Routes() Routes {
	return Routes{
		"MediaMediaIdLikesDelete": Route{
			strings.ToUpper("Delete"),
			"/v1/media/{media-id}/likes",
			c.MediaMediaIdLikesDelete,
		},
		"MediaMediaIdLikesGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/{media-id}/likes",
			c.MediaMediaIdLikesGet,
		},
		"MediaMediaIdLikesPost": Route{
			strings.ToUpper("Post"),
			"/v1/media/{media-id}/likes",
			c.MediaMediaIdLikesPost,
		},
	}
}

// MediaMediaIdLikesDelete - Remove a like on this media by the current user.
func (c *LikesAPIController) MediaMediaIdLikesDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdLikesDelete(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediaIdLikesGet - Get a list of users who have liked this media.
func (c *LikesAPIController) MediaMediaIdLikesGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdLikesGet(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediaIdLikesPost - Set a like on this media by the current user.
func (c *LikesAPIController) MediaMediaIdLikesPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdLikesPost(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
