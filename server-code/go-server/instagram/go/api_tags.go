/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// TagsAPIController binds http requests to an api service and writes the service results to the http response
type TagsAPIController struct {
	service TagsAPIServicer
	errorHandler ErrorHandler
}

// TagsAPIOption for how the controller is set up.
type TagsAPIOption func(*TagsAPIController)

// WithTagsAPIErrorHandler inject ErrorHandler into controller
func WithTagsAPIErrorHandler(h ErrorHandler) TagsAPIOption {
	return func(c *TagsAPIController) {
		c.errorHandler = h
	}
}

// NewTagsAPIController creates a default api controller
func NewTagsAPIController(s TagsAPIServicer, opts ...TagsAPIOption) Router {
	controller := &TagsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TagsAPIController
func (c *TagsAPIController) Routes() Routes {
	return Routes{
		"TagsSearchGet": Route{
			strings.ToUpper("Get"),
			"/v1/tags/search",
			c.TagsSearchGet,
		},
		"TagsTagNameGet": Route{
			strings.ToUpper("Get"),
			"/v1/tags/{tag-name}",
			c.TagsTagNameGet,
		},
		"TagsTagNameMediaRecentGet": Route{
			strings.ToUpper("Get"),
			"/v1/tags/{tag-name}/media/recent",
			c.TagsTagNameMediaRecentGet,
		},
	}
}

// TagsSearchGet - Search for tags by name.
func (c *TagsAPIController) TagsSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	result, err := c.service.TagsSearchGet(r.Context(), qParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TagsTagNameGet - Get information about a tag object.
func (c *TagsAPIController) TagsTagNameGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tagNameParam := params["tag-name"]
	if tagNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag-name"}, nil)
		return
	}
	result, err := c.service.TagsTagNameGet(r.Context(), tagNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// TagsTagNameMediaRecentGet - Get a list of recently tagged media.
func (c *TagsAPIController) TagsTagNameMediaRecentGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	tagNameParam := params["tag-name"]
	if tagNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag-name"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	var minTagIdParam string
	if query.Has("min_tag_id") {
		param := query.Get("min_tag_id")

		minTagIdParam = param
	} else {
	}
	var maxTagIdParam string
	if query.Has("max_tag_id") {
		param := query.Get("max_tag_id")

		maxTagIdParam = param
	} else {
	}
	result, err := c.service.TagsTagNameMediaRecentGet(r.Context(), tagNameParam, countParam, minTagIdParam, maxTagIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
