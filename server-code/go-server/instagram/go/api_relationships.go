/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RelationshipsAPIController binds http requests to an api service and writes the service results to the http response
type RelationshipsAPIController struct {
	service RelationshipsAPIServicer
	errorHandler ErrorHandler
}

// RelationshipsAPIOption for how the controller is set up.
type RelationshipsAPIOption func(*RelationshipsAPIController)

// WithRelationshipsAPIErrorHandler inject ErrorHandler into controller
func WithRelationshipsAPIErrorHandler(h ErrorHandler) RelationshipsAPIOption {
	return func(c *RelationshipsAPIController) {
		c.errorHandler = h
	}
}

// NewRelationshipsAPIController creates a default api controller
func NewRelationshipsAPIController(s RelationshipsAPIServicer, opts ...RelationshipsAPIOption) Router {
	controller := &RelationshipsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RelationshipsAPIController
func (c *RelationshipsAPIController) Routes() Routes {
	return Routes{
		"UsersSelfRequestedByGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/self/requested-by",
			c.UsersSelfRequestedByGet,
		},
		"UsersUserIdFollowedByGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/{user-id}/followed-by",
			c.UsersUserIdFollowedByGet,
		},
		"UsersUserIdFollowsGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/{user-id}/follows",
			c.UsersUserIdFollowsGet,
		},
		"UsersUserIdRelationshipGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/{user-id}/relationship",
			c.UsersUserIdRelationshipGet,
		},
		"UsersUserIdRelationshipPost": Route{
			strings.ToUpper("Post"),
			"/v1/users/{user-id}/relationship",
			c.UsersUserIdRelationshipPost,
		},
	}
}

// UsersSelfRequestedByGet - List the users who have requested this user's permission to follow.
func (c *RelationshipsAPIController) UsersSelfRequestedByGet(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.UsersSelfRequestedByGet(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdFollowedByGet - Get the list of users this user is followed by.
func (c *RelationshipsAPIController) UsersUserIdFollowedByGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	result, err := c.service.UsersUserIdFollowedByGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdFollowsGet - Get the list of users this user follows.
func (c *RelationshipsAPIController) UsersUserIdFollowsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	result, err := c.service.UsersUserIdFollowsGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdRelationshipGet - Get information about a relationship to another user.
func (c *RelationshipsAPIController) UsersUserIdRelationshipGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	result, err := c.service.UsersUserIdRelationshipGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdRelationshipPost - Modify the relationship between the current user and the target user.
func (c *RelationshipsAPIController) UsersUserIdRelationshipPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	var actionParam string
	if query.Has("action") {
		param := query.Get("action")

		actionParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "action"}, nil)
		return
	}
	result, err := c.service.UsersUserIdRelationshipPost(r.Context(), userIdParam, actionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
