/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LocationsAPIController binds http requests to an api service and writes the service results to the http response
type LocationsAPIController struct {
	service LocationsAPIServicer
	errorHandler ErrorHandler
}

// LocationsAPIOption for how the controller is set up.
type LocationsAPIOption func(*LocationsAPIController)

// WithLocationsAPIErrorHandler inject ErrorHandler into controller
func WithLocationsAPIErrorHandler(h ErrorHandler) LocationsAPIOption {
	return func(c *LocationsAPIController) {
		c.errorHandler = h
	}
}

// NewLocationsAPIController creates a default api controller
func NewLocationsAPIController(s LocationsAPIServicer, opts ...LocationsAPIOption) Router {
	controller := &LocationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LocationsAPIController
func (c *LocationsAPIController) Routes() Routes {
	return Routes{
		"LocationsLocationIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/locations/{location-id}",
			c.LocationsLocationIdGet,
		},
		"LocationsLocationIdMediaRecentGet": Route{
			strings.ToUpper("Get"),
			"/v1/locations/{location-id}/media/recent",
			c.LocationsLocationIdMediaRecentGet,
		},
		"LocationsSearchGet": Route{
			strings.ToUpper("Get"),
			"/v1/locations/search",
			c.LocationsSearchGet,
		},
	}
}

// LocationsLocationIdGet - Get information about a location.
func (c *LocationsAPIController) LocationsLocationIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	locationIdParam := params["location-id"]
	if locationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"location-id"}, nil)
		return
	}
	result, err := c.service.LocationsLocationIdGet(r.Context(), locationIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LocationsLocationIdMediaRecentGet - Get a list of recent media objects from a given location.
func (c *LocationsAPIController) LocationsLocationIdMediaRecentGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	locationIdParam := params["location-id"]
	if locationIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"location-id"}, nil)
		return
	}
	var minTimestampParam int64
	if query.Has("min_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("min_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minTimestampParam = param
	} else {
	}
	var maxTimestampParam int64
	if query.Has("max_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("max_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxTimestampParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	result, err := c.service.LocationsLocationIdMediaRecentGet(r.Context(), locationIdParam, minTimestampParam, maxTimestampParam, minIdParam, maxIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// LocationsSearchGet - Search for a location by geographic coordinate.
func (c *LocationsAPIController) LocationsSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var distanceParam int32
	if query.Has("distance") {
		param, err := parseNumericParameter[int32](
			query.Get("distance"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		distanceParam = param
	} else {
	}
	var facebookPlacesIdParam string
	if query.Has("facebook_places_id") {
		param := query.Get("facebook_places_id")

		facebookPlacesIdParam = param
	} else {
	}
	var foursquareIdParam string
	if query.Has("foursquare_id") {
		param := query.Get("foursquare_id")

		foursquareIdParam = param
	} else {
	}
	var latParam float64
	if query.Has("lat") {
		param, err := parseNumericParameter[float64](
			query.Get("lat"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		latParam = param
	} else {
	}
	var lngParam float64
	if query.Has("lng") {
		param, err := parseNumericParameter[float64](
			query.Get("lng"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		lngParam = param
	} else {
	}
	var foursquareV2IdParam string
	if query.Has("foursquare_v2_id") {
		param := query.Get("foursquare_v2_id")

		foursquareV2IdParam = param
	} else {
	}
	result, err := c.service.LocationsSearchGet(r.Context(), distanceParam, facebookPlacesIdParam, foursquareIdParam, latParam, lngParam, foursquareV2IdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
