/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UsersAPIController binds http requests to an api service and writes the service results to the http response
type UsersAPIController struct {
	service UsersAPIServicer
	errorHandler ErrorHandler
}

// UsersAPIOption for how the controller is set up.
type UsersAPIOption func(*UsersAPIController)

// WithUsersAPIErrorHandler inject ErrorHandler into controller
func WithUsersAPIErrorHandler(h ErrorHandler) UsersAPIOption {
	return func(c *UsersAPIController) {
		c.errorHandler = h
	}
}

// NewUsersAPIController creates a default api controller
func NewUsersAPIController(s UsersAPIServicer, opts ...UsersAPIOption) Router {
	controller := &UsersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UsersAPIController
func (c *UsersAPIController) Routes() Routes {
	return Routes{
		"UsersSearchGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/search",
			c.UsersSearchGet,
		},
		"UsersSelfFeedGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/self/feed",
			c.UsersSelfFeedGet,
		},
		"UsersSelfMediaLikedGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/self/media/liked",
			c.UsersSelfMediaLikedGet,
		},
		"UsersUserIdGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/{user-id}",
			c.UsersUserIdGet,
		},
		"UsersUserIdMediaRecentGet": Route{
			strings.ToUpper("Get"),
			"/v1/users/{user-id}/media/recent",
			c.UsersUserIdMediaRecentGet,
		},
	}
}

// UsersSearchGet - Search for a user by name.
func (c *UsersAPIController) UsersSearchGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var qParam string
	if query.Has("q") {
		param := query.Get("q")

		qParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "q"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	result, err := c.service.UsersSearchGet(r.Context(), qParam, countParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersSelfFeedGet - See the authenticated user's feed.
// Deprecated
func (c *UsersAPIController) UsersSelfFeedGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	result, err := c.service.UsersSelfFeedGet(r.Context(), countParam, minIdParam, maxIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersSelfMediaLikedGet - See the list of media liked by the authenticated user.
func (c *UsersAPIController) UsersSelfMediaLikedGet(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	var maxLikeIdParam string
	if query.Has("max_like_id") {
		param := query.Get("max_like_id")

		maxLikeIdParam = param
	} else {
	}
	result, err := c.service.UsersSelfMediaLikedGet(r.Context(), countParam, maxLikeIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdGet - Get basic information about a user.
func (c *UsersAPIController) UsersUserIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	result, err := c.service.UsersUserIdGet(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UsersUserIdMediaRecentGet - Get the most recent media published by a user.
func (c *UsersAPIController) UsersUserIdMediaRecentGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["user-id"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"user-id"}, nil)
		return
	}
	var countParam int32
	if query.Has("count") {
		param, err := parseNumericParameter[int32](
			query.Get("count"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		countParam = param
	} else {
	}
	var maxTimestampParam int64
	if query.Has("max_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("max_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxTimestampParam = param
	} else {
	}
	var minTimestampParam int64
	if query.Has("min_timestamp") {
		param, err := parseNumericParameter[int64](
			query.Get("min_timestamp"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minTimestampParam = param
	} else {
	}
	var minIdParam string
	if query.Has("min_id") {
		param := query.Get("min_id")

		minIdParam = param
	} else {
	}
	var maxIdParam string
	if query.Has("max_id") {
		param := query.Get("max_id")

		maxIdParam = param
	} else {
	}
	result, err := c.service.UsersUserIdMediaRecentGet(r.Context(), userIdParam, countParam, maxTimestampParam, minTimestampParam, minIdParam, maxIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
