/*
 * Instagram API
 *
 * Description of Instagram RESTful API.  Current limitations:   * Instagram service does not support [cross origin headers](https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS)   for security reasons, therefore it is not possible to use Swagger UI and make API calls directly from browser.   * Modification API requests (`POST`, `DELETE`) require additional security [scopes](https://instagram.com/developer/authorization/)   that are available for Apps [created on or after Nov 17, 2015](http://instagram.com/developer/review/) and   started in [Sandbox Mode](http://instagram.com/developer/sandbox/).   * Consider the [Instagram limitations](https://instagram.com/developer/limits/) for API calls that depends on App Mode.  **Warning:** For Apps [created on or after Nov 17, 2015](http://instagram.com/developer/changelog/) API responses containing media objects no longer return the `data` field in `comments` and `likes` nodes.  Last update: 2015-11-28 
 *
 * API version: 1.0.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CommentsAPIController binds http requests to an api service and writes the service results to the http response
type CommentsAPIController struct {
	service CommentsAPIServicer
	errorHandler ErrorHandler
}

// CommentsAPIOption for how the controller is set up.
type CommentsAPIOption func(*CommentsAPIController)

// WithCommentsAPIErrorHandler inject ErrorHandler into controller
func WithCommentsAPIErrorHandler(h ErrorHandler) CommentsAPIOption {
	return func(c *CommentsAPIController) {
		c.errorHandler = h
	}
}

// NewCommentsAPIController creates a default api controller
func NewCommentsAPIController(s CommentsAPIServicer, opts ...CommentsAPIOption) Router {
	controller := &CommentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CommentsAPIController
func (c *CommentsAPIController) Routes() Routes {
	return Routes{
		"MediaMediaIdCommentsCommentIdDelete": Route{
			strings.ToUpper("Delete"),
			"/v1/media/{media-id}/comments/{comment-id}",
			c.MediaMediaIdCommentsCommentIdDelete,
		},
		"MediaMediaIdCommentsGet": Route{
			strings.ToUpper("Get"),
			"/v1/media/{media-id}/comments",
			c.MediaMediaIdCommentsGet,
		},
		"MediaMediaIdCommentsPost": Route{
			strings.ToUpper("Post"),
			"/v1/media/{media-id}/comments",
			c.MediaMediaIdCommentsPost,
		},
	}
}

// MediaMediaIdCommentsCommentIdDelete - Remove a comment.
func (c *CommentsAPIController) MediaMediaIdCommentsCommentIdDelete(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	commentIdParam := params["comment-id"]
	if commentIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"comment-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdCommentsCommentIdDelete(r.Context(), mediaIdParam, commentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediaIdCommentsGet - Get a list of recent comments on a media object.
func (c *CommentsAPIController) MediaMediaIdCommentsGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdCommentsGet(r.Context(), mediaIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MediaMediaIdCommentsPost - Create a comment on a media object.
func (c *CommentsAPIController) MediaMediaIdCommentsPost(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	mediaIdParam := params["media-id"]
	if mediaIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"media-id"}, nil)
		return
	}
	var textParam string
	if query.Has("text") {
		param := query.Get("text")

		textParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "text"}, nil)
		return
	}
	result, err := c.service.MediaMediaIdCommentsPost(r.Context(), mediaIdParam, textParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
