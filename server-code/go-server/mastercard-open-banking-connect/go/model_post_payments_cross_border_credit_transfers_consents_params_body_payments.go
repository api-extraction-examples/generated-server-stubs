/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * API version: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments struct {

	CreditorAccount PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccount `json:"creditorAccount"`

	CreditorAddress PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddress `json:"creditorAddress,omitempty"`

	CreditorAgent PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgent `json:"creditorAgent"`

	// Bank name
	CreditorName string `json:"creditorName"`

	DebtorAccount PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccount `json:"debtorAccount"`

	DebtorAddress PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddress `json:"debtorAddress,omitempty"`

	// Debtor legal name
	DebtorName string `json:"debtorName,omitempty"`

	// Payment end to end identification
	EndToEndIdentification string `json:"endToEndIdentification"`

	InstructedAmount PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmount `json:"instructedAmount"`

	// Unique identification as assigned by an instructing party for an instructed party to unambiguously identify the instruction. If API profile of ASPSP is CMA9, then field is mandatory.
	InstructionIdentification string `json:"instructionIdentification,omitempty"`

	// Indicator of the urgency or order of importance
	InstructionPriority string `json:"instructionPriority"`

	// User community specific instrument.
	LocalInstrument string `json:"localInstrument"`

	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)
	RemittanceInformationReference string `json:"remittanceInformationReference,omitempty"`

	// Description of the payment
	RemittanceInformationUnstructured string `json:"remittanceInformationUnstructured,omitempty"`

	// Scheduled Payment Date
	RequestedExecutionDate string `json:"requestedExecutionDate,omitempty"`

	// Charge bearer
	TransferCharges string `json:"transferCharges,omitempty"`
}

// AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsRequired checks if the required fields are not zero-ed
func AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsRequired(obj PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments) error {
	elements := map[string]interface{}{
		"creditorAccount": obj.CreditorAccount,
		"creditorAgent": obj.CreditorAgent,
		"creditorName": obj.CreditorName,
		"debtorAccount": obj.DebtorAccount,
		"endToEndIdentification": obj.EndToEndIdentification,
		"instructedAmount": obj.InstructedAmount,
		"instructionPriority": obj.InstructionPriority,
		"localInstrument": obj.LocalInstrument,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAccountRequired(obj.CreditorAccount); err != nil {
		return err
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAddressRequired(obj.CreditorAddress); err != nil {
		return err
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsCreditorAgentRequired(obj.CreditorAgent); err != nil {
		return err
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAccountRequired(obj.DebtorAccount); err != nil {
		return err
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsDebtorAddressRequired(obj.DebtorAddress); err != nil {
		return err
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsInstructedAmountRequired(obj.InstructedAmount); err != nil {
		return err
	}
	return nil
}

// AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsConstraints checks if the values respects the defined constraints
func AssertPostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPaymentsConstraints(obj PostPaymentsCrossBorderCreditTransfersConsentsParamsBodyPayments) error {
	return nil
}
