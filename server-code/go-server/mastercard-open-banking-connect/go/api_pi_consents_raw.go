/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * API version: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PIConsentsRawAPIController binds http requests to an api service and writes the service results to the http response
type PIConsentsRawAPIController struct {
	service PIConsentsRawAPIServicer
	errorHandler ErrorHandler
}

// PIConsentsRawAPIOption for how the controller is set up.
type PIConsentsRawAPIOption func(*PIConsentsRawAPIController)

// WithPIConsentsRawAPIErrorHandler inject ErrorHandler into controller
func WithPIConsentsRawAPIErrorHandler(h ErrorHandler) PIConsentsRawAPIOption {
	return func(c *PIConsentsRawAPIController) {
		c.errorHandler = h
	}
}

// NewPIConsentsRawAPIController creates a default api controller
func NewPIConsentsRawAPIController(s PIConsentsRawAPIServicer, opts ...PIConsentsRawAPIOption) Router {
	controller := &PIConsentsRawAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PIConsentsRawAPIController
func (c *PIConsentsRawAPIController) Routes() Routes {
	return Routes{
		"PaymentsConsentsRawPost": Route{
			strings.ToUpper("Post"),
			"/openbanking/sandbox/connect/api/payments/consents/raw",
			c.PaymentsConsentsRawPost,
		},
	}
}

// PaymentsConsentsRawPost - Extracts the original raw consent given by the aspsp
func (c *PIConsentsRawAPIController) PaymentsConsentsRawPost(w http.ResponseWriter, r *http.Request) {
	bodyParam := PostPaymentsConsentsRawParamsBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostPaymentsConsentsRawParamsBodyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostPaymentsConsentsRawParamsBodyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PaymentsConsentsRawPost(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
