/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * API version: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments struct {

	// Purpose of the payment
	CategoryPurpose string `json:"categoryPurpose,omitempty"`

	CreditorAccount PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccount `json:"creditorAccount"`

	CreditorAddress PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddress `json:"creditorAddress"`

	CreditorAgent PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgent `json:"creditorAgent"`

	// Bank name
	CreditorName string `json:"creditorName"`

	DebtorAccount PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccount `json:"debtorAccount,omitempty"`

	DebtorAddress PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddress `json:"debtorAddress,omitempty"`

	DebtorAgent PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgent `json:"debtorAgent,omitempty"`

	// Debtor legal name
	DebtorName string `json:"debtorName"`

	// Payment end to end identification
	EndToEndIdentification string `json:"endToEndIdentification"`

	InstructedAmount PostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmount `json:"instructedAmount"`

	// Indicator of the urgency or order of importance
	InstructionPriority string `json:"instructionPriority"`

	// User community specific instrument.
	LocalInstrument string `json:"localInstrument"`

	// Unique reference, as assigned by the creditor, to unambiguously refer to the payment transaction. (future use)
	RemittanceInformationReference string `json:"remittanceInformationReference,omitempty"`

	// Description of the payment
	RemittanceInformationStructured string `json:"remittanceInformationStructured,omitempty"`

	// Description of the payment
	RemittanceInformationUnstructured string `json:"remittanceInformationUnstructured,omitempty"`

	// Scheduled Payment Date
	RequestedExecutionDate string `json:"requestedExecutionDate,omitempty"`

	Schedule RequestPisSepaSchedule `json:"schedule,omitempty"`
}

// AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsRequired checks if the required fields are not zero-ed
func AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsRequired(obj PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments) error {
	elements := map[string]interface{}{
		"creditorAccount": obj.CreditorAccount,
		"creditorAddress": obj.CreditorAddress,
		"creditorAgent": obj.CreditorAgent,
		"creditorName": obj.CreditorName,
		"debtorName": obj.DebtorName,
		"endToEndIdentification": obj.EndToEndIdentification,
		"instructedAmount": obj.InstructedAmount,
		"instructionPriority": obj.InstructionPriority,
		"localInstrument": obj.LocalInstrument,
	}
	for name, el := range elements {
		if isZero := IsZeroValue(el); isZero {
			return &RequiredError{Field: name}
		}
	}

	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAccountRequired(obj.CreditorAccount); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAddressRequired(obj.CreditorAddress); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsCreditorAgentRequired(obj.CreditorAgent); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAccountRequired(obj.DebtorAccount); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAddressRequired(obj.DebtorAddress); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsDebtorAgentRequired(obj.DebtorAgent); err != nil {
		return err
	}
	if err := AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsInstructedAmountRequired(obj.InstructedAmount); err != nil {
		return err
	}
	if err := AssertRequestPisSepaScheduleRequired(obj.Schedule); err != nil {
		return err
	}
	return nil
}

// AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsConstraints checks if the values respects the defined constraints
func AssertPostPaymentsSepaCreditTransfersConsentsParamsBodyPaymentsConstraints(obj PostPaymentsSepaCreditTransfersConsentsParamsBodyPayments) error {
	return nil
}
