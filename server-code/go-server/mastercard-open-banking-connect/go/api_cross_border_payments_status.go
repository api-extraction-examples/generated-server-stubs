/*
 * Open Banking - Payments initiation service
 *
 * Open Banking - Payments initiation service
 *
 * API version: 1.16.0
 * Contact: apisupport@mastercard.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CrossBorderPaymentsStatusAPIController binds http requests to an api service and writes the service results to the http response
type CrossBorderPaymentsStatusAPIController struct {
	service CrossBorderPaymentsStatusAPIServicer
	errorHandler ErrorHandler
}

// CrossBorderPaymentsStatusAPIOption for how the controller is set up.
type CrossBorderPaymentsStatusAPIOption func(*CrossBorderPaymentsStatusAPIController)

// WithCrossBorderPaymentsStatusAPIErrorHandler inject ErrorHandler into controller
func WithCrossBorderPaymentsStatusAPIErrorHandler(h ErrorHandler) CrossBorderPaymentsStatusAPIOption {
	return func(c *CrossBorderPaymentsStatusAPIController) {
		c.errorHandler = h
	}
}

// NewCrossBorderPaymentsStatusAPIController creates a default api controller
func NewCrossBorderPaymentsStatusAPIController(s CrossBorderPaymentsStatusAPIServicer, opts ...CrossBorderPaymentsStatusAPIOption) Router {
	controller := &CrossBorderPaymentsStatusAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CrossBorderPaymentsStatusAPIController
func (c *CrossBorderPaymentsStatusAPIController) Routes() Routes {
	return Routes{
		"PaymentsCrossBorderCreditTransfersPaymentStatusPost": Route{
			strings.ToUpper("Post"),
			"/openbanking/sandbox/connect/api/payments/cross-border-credit-transfers/payment-status",
			c.PaymentsCrossBorderCreditTransfersPaymentStatusPost,
		},
	}
}

// PaymentsCrossBorderCreditTransfersPaymentStatusPost - Get payment status
func (c *CrossBorderPaymentsStatusAPIController) PaymentsCrossBorderCreditTransfersPaymentStatusPost(w http.ResponseWriter, r *http.Request) {
	bodyParam := PostPaymentsCrossBorderCreditTransfersPaymentStatusParamsBody{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersPaymentStatusParamsBodyRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPostPaymentsCrossBorderCreditTransfersPaymentStatusParamsBodyConstraints(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.PaymentsCrossBorderCreditTransfersPaymentStatusPost(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
