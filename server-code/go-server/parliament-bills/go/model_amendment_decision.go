/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type AmendmentDecision string

// List of AmendmentDecision
const (
	NO_DECISION AmendmentDecision = "NoDecision"
	WITHDRAWN AmendmentDecision = "Withdrawn"
	DISAGREED AmendmentDecision = "Disagreed"
	NOT_MOVED AmendmentDecision = "NotMoved"
	AGREED AmendmentDecision = "Agreed"
)

// AllowedAmendmentDecisionEnumValues is all the allowed values of AmendmentDecision enum
var AllowedAmendmentDecisionEnumValues = []AmendmentDecision{
	"NoDecision",
	"Withdrawn",
	"Disagreed",
	"NotMoved",
	"Agreed",
}

// validAmendmentDecisionEnumValue provides a map of AmendmentDecisions for fast verification of use input
var validAmendmentDecisionEnumValues = map[AmendmentDecision]struct{}{
	"NoDecision": {},
	"Withdrawn": {},
	"Disagreed": {},
	"NotMoved": {},
	"Agreed": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmendmentDecision) IsValid() bool {
	_, ok := validAmendmentDecisionEnumValues[v]
	return ok
}

// NewAmendmentDecisionFromValue returns a pointer to a valid AmendmentDecision
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmendmentDecisionFromValue(v string) (AmendmentDecision, error) {
	ev := AmendmentDecision(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for AmendmentDecision: valid values are %v", v, AllowedAmendmentDecisionEnumValues)
	}
}



// AssertAmendmentDecisionRequired checks if the required fields are not zero-ed
func AssertAmendmentDecisionRequired(obj AmendmentDecision) error {
	return nil
}

// AssertAmendmentDecisionConstraints checks if the values respects the defined constraints
func AssertAmendmentDecisionConstraints(obj AmendmentDecision) error {
	return nil
}
