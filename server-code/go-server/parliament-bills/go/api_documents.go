/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DocumentsAPIController binds http requests to an api service and writes the service results to the http response
type DocumentsAPIController struct {
	service DocumentsAPIServicer
	errorHandler ErrorHandler
}

// DocumentsAPIOption for how the controller is set up.
type DocumentsAPIOption func(*DocumentsAPIController)

// WithDocumentsAPIErrorHandler inject ErrorHandler into controller
func WithDocumentsAPIErrorHandler(h ErrorHandler) DocumentsAPIOption {
	return func(c *DocumentsAPIController) {
		c.errorHandler = h
	}
}

// NewDocumentsAPIController creates a default api controller
func NewDocumentsAPIController(s DocumentsAPIServicer, opts ...DocumentsAPIOption) Router {
	controller := &DocumentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DocumentsAPIController
func (c *DocumentsAPIController) Routes() Routes {
	return Routes{
		"ApiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/Publications/{publicationId}/Documents/{documentId}/Download",
			c.ApiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet,
		},
		"ApiV1PublicationsPublicationIdDocumentsDocumentIdGet": Route{
			strings.ToUpper("Get"),
			"/api/v1/Publications/{publicationId}/Documents/{documentId}",
			c.ApiV1PublicationsPublicationIdDocumentsDocumentIdGet,
		},
	}
}

// ApiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet - Return a document.
func (c *DocumentsAPIController) ApiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	publicationIdParam, err := parseNumericParameter[int32](
		params["publicationId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	documentIdParam, err := parseNumericParameter[int32](
		params["documentId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ApiV1PublicationsPublicationIdDocumentsDocumentIdDownloadGet(r.Context(), publicationIdParam, documentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ApiV1PublicationsPublicationIdDocumentsDocumentIdGet - Return information on a document.
func (c *DocumentsAPIController) ApiV1PublicationsPublicationIdDocumentsDocumentIdGet(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	publicationIdParam, err := parseNumericParameter[int32](
		params["publicationId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	documentIdParam, err := parseNumericParameter[int32](
		params["documentId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ApiV1PublicationsPublicationIdDocumentsDocumentIdGet(r.Context(), publicationIdParam, documentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
