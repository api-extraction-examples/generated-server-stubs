/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type CommitteeHouse string

// List of CommitteeHouse
const (
	COMMONS CommitteeHouse = "Commons"
	LORDS CommitteeHouse = "Lords"
	JOINT CommitteeHouse = "Joint"
)

// AllowedCommitteeHouseEnumValues is all the allowed values of CommitteeHouse enum
var AllowedCommitteeHouseEnumValues = []CommitteeHouse{
	"Commons",
	"Lords",
	"Joint",
}

// validCommitteeHouseEnumValue provides a map of CommitteeHouses for fast verification of use input
var validCommitteeHouseEnumValues = map[CommitteeHouse]struct{}{
	"Commons": {},
	"Lords": {},
	"Joint": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CommitteeHouse) IsValid() bool {
	_, ok := validCommitteeHouseEnumValues[v]
	return ok
}

// NewCommitteeHouseFromValue returns a pointer to a valid CommitteeHouse
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCommitteeHouseFromValue(v string) (CommitteeHouse, error) {
	ev := CommitteeHouse(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for CommitteeHouse: valid values are %v", v, AllowedCommitteeHouseEnumValues)
	}
}



// AssertCommitteeHouseRequired checks if the required fields are not zero-ed
func AssertCommitteeHouseRequired(obj CommitteeHouse) error {
	return nil
}

// AssertCommitteeHouseConstraints checks if the values respects the defined constraints
func AssertCommitteeHouseConstraints(obj CommitteeHouse) error {
	return nil
}
