/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type House string

// List of House
const (
	ALL House = "All"
	COMMONS House = "Commons"
	LORDS House = "Lords"
	UNASSIGNED House = "Unassigned"
)

// AllowedHouseEnumValues is all the allowed values of House enum
var AllowedHouseEnumValues = []House{
	"All",
	"Commons",
	"Lords",
	"Unassigned",
}

// validHouseEnumValue provides a map of Houses for fast verification of use input
var validHouseEnumValues = map[House]struct{}{
	"All": {},
	"Commons": {},
	"Lords": {},
	"Unassigned": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v House) IsValid() bool {
	_, ok := validHouseEnumValues[v]
	return ok
}

// NewHouseFromValue returns a pointer to a valid House
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewHouseFromValue(v string) (House, error) {
	ev := House(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for House: valid values are %v", v, AllowedHouseEnumValues)
	}
}



// AssertHouseRequired checks if the required fields are not zero-ed
func AssertHouseRequired(obj House) error {
	return nil
}

// AssertHouseConstraints checks if the values respects the defined constraints
func AssertHouseConstraints(obj House) error {
	return nil
}
