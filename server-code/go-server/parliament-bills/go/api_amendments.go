/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AmendmentsAPIController binds http requests to an api service and writes the service results to the http response
type AmendmentsAPIController struct {
	service AmendmentsAPIServicer
	errorHandler ErrorHandler
}

// AmendmentsAPIOption for how the controller is set up.
type AmendmentsAPIOption func(*AmendmentsAPIController)

// WithAmendmentsAPIErrorHandler inject ErrorHandler into controller
func WithAmendmentsAPIErrorHandler(h ErrorHandler) AmendmentsAPIOption {
	return func(c *AmendmentsAPIController) {
		c.errorHandler = h
	}
}

// NewAmendmentsAPIController creates a default api controller
func NewAmendmentsAPIController(s AmendmentsAPIServicer, opts ...AmendmentsAPIOption) Router {
	controller := &AmendmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AmendmentsAPIController
func (c *AmendmentsAPIController) Routes() Routes {
	return Routes{
		"GetAmendment": Route{
			strings.ToUpper("Get"),
			"/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments/{amendmentId}",
			c.GetAmendment,
		},
		"GetAmendments": Route{
			strings.ToUpper("Get"),
			"/api/v1/Bills/{billId}/Stages/{billStageId}/Amendments",
			c.GetAmendments,
		},
	}
}

// GetAmendment - Returns an amendment.
func (c *AmendmentsAPIController) GetAmendment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	billIdParam, err := parseNumericParameter[int32](
		params["billId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	billStageIdParam, err := parseNumericParameter[int32](
		params["billStageId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	amendmentIdParam, err := parseNumericParameter[int32](
		params["amendmentId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetAmendment(r.Context(), billIdParam, billStageIdParam, amendmentIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAmendments - Returns a list of amendments.
func (c *AmendmentsAPIController) GetAmendments(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	billIdParam, err := parseNumericParameter[int32](
		params["billId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	billStageIdParam, err := parseNumericParameter[int32](
		params["billStageId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var searchTermParam string
	if query.Has("SearchTerm") {
		param := query.Get("SearchTerm")

		searchTermParam = param
	} else {
	}
	var decisionParam Decision
	if query.Has("Decision") {
		param := Decision(query.Get("Decision"))

		decisionParam = param
	} else {
	}
	var memberIdParam int32
	if query.Has("MemberId") {
		param, err := parseNumericParameter[int32](
			query.Get("MemberId"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		memberIdParam = param
	} else {
	}
	var skipParam int32
	if query.Has("Skip") {
		param, err := parseNumericParameter[int32](
			query.Get("Skip"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		skipParam = param
	} else {
	}
	var takeParam int32
	if query.Has("Take") {
		param, err := parseNumericParameter[int32](
			query.Get("Take"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		takeParam = param
	} else {
	}
	result, err := c.service.GetAmendments(r.Context(), billIdParam, billStageIdParam, searchTermParam, decisionParam, memberIdParam, skipParam, takeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
