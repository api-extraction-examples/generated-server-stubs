/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type AmendmentType string

// List of AmendmentType
const (
	EDIT_LONG_TITLE AmendmentType = "EditLongTitle"
	EDIT_BILL_BODY AmendmentType = "EditBillBody"
	ADD_CLAUSE_OR_SCHEDULE AmendmentType = "AddClauseOrSchedule"
	DELETE_CLAUSE_OR_SCHEDULE AmendmentType = "DeleteClauseOrSchedule"
)

// AllowedAmendmentTypeEnumValues is all the allowed values of AmendmentType enum
var AllowedAmendmentTypeEnumValues = []AmendmentType{
	"EditLongTitle",
	"EditBillBody",
	"AddClauseOrSchedule",
	"DeleteClauseOrSchedule",
}

// validAmendmentTypeEnumValue provides a map of AmendmentTypes for fast verification of use input
var validAmendmentTypeEnumValues = map[AmendmentType]struct{}{
	"EditLongTitle": {},
	"EditBillBody": {},
	"AddClauseOrSchedule": {},
	"DeleteClauseOrSchedule": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AmendmentType) IsValid() bool {
	_, ok := validAmendmentTypeEnumValues[v]
	return ok
}

// NewAmendmentTypeFromValue returns a pointer to a valid AmendmentType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAmendmentTypeFromValue(v string) (AmendmentType, error) {
	ev := AmendmentType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for AmendmentType: valid values are %v", v, AllowedAmendmentTypeEnumValues)
	}
}



// AssertAmendmentTypeRequired checks if the required fields are not zero-ed
func AssertAmendmentTypeRequired(obj AmendmentType) error {
	return nil
}

// AssertAmendmentTypeConstraints checks if the values respects the defined constraints
func AssertAmendmentTypeConstraints(obj AmendmentType) error {
	return nil
}
