/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type BillSortOrder string

// List of BillSortOrder
const (
	TITLE_ASCENDING BillSortOrder = "TitleAscending"
	TITLE_DESCENDING BillSortOrder = "TitleDescending"
	DATE_UPDATED_ASCENDING BillSortOrder = "DateUpdatedAscending"
	DATE_UPDATED_DESCENDING BillSortOrder = "DateUpdatedDescending"
)

// AllowedBillSortOrderEnumValues is all the allowed values of BillSortOrder enum
var AllowedBillSortOrderEnumValues = []BillSortOrder{
	"TitleAscending",
	"TitleDescending",
	"DateUpdatedAscending",
	"DateUpdatedDescending",
}

// validBillSortOrderEnumValue provides a map of BillSortOrders for fast verification of use input
var validBillSortOrderEnumValues = map[BillSortOrder]struct{}{
	"TitleAscending": {},
	"TitleDescending": {},
	"DateUpdatedAscending": {},
	"DateUpdatedDescending": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v BillSortOrder) IsValid() bool {
	_, ok := validBillSortOrderEnumValues[v]
	return ok
}

// NewBillSortOrderFromValue returns a pointer to a valid BillSortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewBillSortOrderFromValue(v string) (BillSortOrder, error) {
	ev := BillSortOrder(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for BillSortOrder: valid values are %v", v, AllowedBillSortOrderEnumValues)
	}
}



// AssertBillSortOrderRequired checks if the required fields are not zero-ed
func AssertBillSortOrderRequired(obj BillSortOrder) error {
	return nil
}

// AssertBillSortOrderConstraints checks if the values respects the defined constraints
func AssertBillSortOrderConstraints(obj BillSortOrder) error {
	return nil
}
