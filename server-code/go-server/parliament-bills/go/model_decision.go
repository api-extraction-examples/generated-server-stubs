/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Decision string

// List of Decision
const (
	ALL Decision = "All"
	NO_DECISION Decision = "NoDecision"
	WITHDRAWN Decision = "Withdrawn"
	DISAGREED Decision = "Disagreed"
	NOT_MOVED Decision = "NotMoved"
	AGREED Decision = "Agreed"
)

// AllowedDecisionEnumValues is all the allowed values of Decision enum
var AllowedDecisionEnumValues = []Decision{
	"All",
	"NoDecision",
	"Withdrawn",
	"Disagreed",
	"NotMoved",
	"Agreed",
}

// validDecisionEnumValue provides a map of Decisions for fast verification of use input
var validDecisionEnumValues = map[Decision]struct{}{
	"All": {},
	"NoDecision": {},
	"Withdrawn": {},
	"Disagreed": {},
	"NotMoved": {},
	"Agreed": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Decision) IsValid() bool {
	_, ok := validDecisionEnumValues[v]
	return ok
}

// NewDecisionFromValue returns a pointer to a valid Decision
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDecisionFromValue(v string) (Decision, error) {
	ev := Decision(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Decision: valid values are %v", v, AllowedDecisionEnumValues)
	}
}



// AssertDecisionRequired checks if the required fields are not zero-ed
func AssertDecisionRequired(obj Decision) error {
	return nil
}

// AssertDecisionConstraints checks if the values respects the defined constraints
func AssertDecisionConstraints(obj Decision) error {
	return nil
}
