/*
 * Bills API
 *
 * API to get and search for information regarding Bills, their stages, associated amendments and publications.
 *
 * API version: v1
 * Contact: softwareengineering@parliament.uk
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// SittingsAPIController binds http requests to an api service and writes the service results to the http response
type SittingsAPIController struct {
	service SittingsAPIServicer
	errorHandler ErrorHandler
}

// SittingsAPIOption for how the controller is set up.
type SittingsAPIOption func(*SittingsAPIController)

// WithSittingsAPIErrorHandler inject ErrorHandler into controller
func WithSittingsAPIErrorHandler(h ErrorHandler) SittingsAPIOption {
	return func(c *SittingsAPIController) {
		c.errorHandler = h
	}
}

// NewSittingsAPIController creates a default api controller
func NewSittingsAPIController(s SittingsAPIServicer, opts ...SittingsAPIOption) Router {
	controller := &SittingsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SittingsAPIController
func (c *SittingsAPIController) Routes() Routes {
	return Routes{
		"GetSittings": Route{
			strings.ToUpper("Get"),
			"/api/v1/Sittings",
			c.GetSittings,
		},
	}
}

// GetSittings - Returns a list of Sittings.
func (c *SittingsAPIController) GetSittings(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var houseParam House
	if query.Has("House") {
		param := House(query.Get("House"))

		houseParam = param
	} else {
	}
	var dateFromParam time.Time
	if query.Has("DateFrom"){
		param, err := parseTime(query.Get("DateFrom"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		dateFromParam = param
	} else {
	}
	var dateToParam time.Time
	if query.Has("DateTo"){
		param, err := parseTime(query.Get("DateTo"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		dateToParam = param
	} else {
	}
	var skipParam int32
	if query.Has("Skip") {
		param, err := parseNumericParameter[int32](
			query.Get("Skip"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		skipParam = param
	} else {
	}
	var takeParam int32
	if query.Has("Take") {
		param, err := parseNumericParameter[int32](
			query.Get("Take"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		takeParam = param
	} else {
	}
	result, err := c.service.GetSittings(r.Context(), houseParam, dateFromParam, dateToParam, skipParam, takeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
