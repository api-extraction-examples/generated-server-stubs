/*
 * Datasette API
 *
 * Execute SQL queries against a Datasette database and return the results as JSON
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DefaultAPIController binds http requests to an api service and writes the service results to the http response
type DefaultAPIController struct {
	service DefaultAPIServicer
	errorHandler ErrorHandler
}

// DefaultAPIOption for how the controller is set up.
type DefaultAPIOption func(*DefaultAPIController)

// WithDefaultAPIErrorHandler inject ErrorHandler into controller
func WithDefaultAPIErrorHandler(h ErrorHandler) DefaultAPIOption {
	return func(c *DefaultAPIController) {
		c.errorHandler = h
	}
}

// NewDefaultAPIController creates a default api controller
func NewDefaultAPIController(s DefaultAPIServicer, opts ...DefaultAPIOption) Router {
	controller := &DefaultAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DefaultAPIController
func (c *DefaultAPIController) Routes() Routes {
	return Routes{
		"Query": Route{
			strings.ToUpper("Get"),
			"/content.json",
			c.Query,
		},
	}
}

// Query - Execute a SQLite SQL query against the content database
func (c *DefaultAPIController) Query(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sqlParam string
	if query.Has("sql") {
		param := query.Get("sql")

		sqlParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "sql"}, nil)
		return
	}
	var shapeParam string
	if query.Has("_shape") {
		param := query.Get("_shape")

		shapeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "_shape"}, nil)
		return
	}
	result, err := c.service.Query(r.Context(), sqlParam, shapeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
