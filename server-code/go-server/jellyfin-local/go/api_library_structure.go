/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// LibraryStructureAPIController binds http requests to an api service and writes the service results to the http response
type LibraryStructureAPIController struct {
	service LibraryStructureAPIServicer
	errorHandler ErrorHandler
}

// LibraryStructureAPIOption for how the controller is set up.
type LibraryStructureAPIOption func(*LibraryStructureAPIController)

// WithLibraryStructureAPIErrorHandler inject ErrorHandler into controller
func WithLibraryStructureAPIErrorHandler(h ErrorHandler) LibraryStructureAPIOption {
	return func(c *LibraryStructureAPIController) {
		c.errorHandler = h
	}
}

// NewLibraryStructureAPIController creates a default api controller
func NewLibraryStructureAPIController(s LibraryStructureAPIServicer, opts ...LibraryStructureAPIOption) Router {
	controller := &LibraryStructureAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LibraryStructureAPIController
func (c *LibraryStructureAPIController) Routes() Routes {
	return Routes{
		"AddMediaPath": Route{
			strings.ToUpper("Post"),
			"/Library/VirtualFolders/Paths",
			c.AddMediaPath,
		},
		"AddVirtualFolder": Route{
			strings.ToUpper("Post"),
			"/Library/VirtualFolders",
			c.AddVirtualFolder,
		},
		"GetVirtualFolders": Route{
			strings.ToUpper("Get"),
			"/Library/VirtualFolders",
			c.GetVirtualFolders,
		},
		"RemoveMediaPath": Route{
			strings.ToUpper("Delete"),
			"/Library/VirtualFolders/Paths",
			c.RemoveMediaPath,
		},
		"RemoveVirtualFolder": Route{
			strings.ToUpper("Delete"),
			"/Library/VirtualFolders",
			c.RemoveVirtualFolder,
		},
		"RenameVirtualFolder": Route{
			strings.ToUpper("Post"),
			"/Library/VirtualFolders/Name",
			c.RenameVirtualFolder,
		},
		"UpdateLibraryOptions": Route{
			strings.ToUpper("Post"),
			"/Library/VirtualFolders/LibraryOptions",
			c.UpdateLibraryOptions,
		},
		"UpdateMediaPath": Route{
			strings.ToUpper("Post"),
			"/Library/VirtualFolders/Paths/Update",
			c.UpdateMediaPath,
		},
	}
}

// AddMediaPath - Add a media path to a library.
func (c *LibraryStructureAPIController) AddMediaPath(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	mediaPathDtoParam := MediaPathDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaPathDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaPathDtoRequired(mediaPathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaPathDtoConstraints(mediaPathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var refreshLibraryParam bool
	if query.Has("refreshLibrary") {
		param, err := parseBoolParameter(
			query.Get("refreshLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		refreshLibraryParam = param
	} else {
		var param bool = false
		refreshLibraryParam = param
	}
	result, err := c.service.AddMediaPath(r.Context(), mediaPathDtoParam, refreshLibraryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddVirtualFolder - Adds a virtual folder.
func (c *LibraryStructureAPIController) AddVirtualFolder(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var collectionTypeParam *string
	if query.Has("collectionType") {
		param := query.Get("collectionType")

		collectionTypeParam = &param
	} else {
	}
	var pathsParam []string
	if query.Has("paths") {
		pathsParam = strings.Split(query.Get("paths"), ",")
	}
	var refreshLibraryParam bool
	if query.Has("refreshLibrary") {
		param, err := parseBoolParameter(
			query.Get("refreshLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		refreshLibraryParam = param
	} else {
		var param bool = false
		refreshLibraryParam = param
	}
	addVirtualFolderDtoParam := AddVirtualFolderDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&addVirtualFolderDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAddVirtualFolderDtoRequired(addVirtualFolderDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAddVirtualFolderDtoConstraints(addVirtualFolderDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddVirtualFolder(r.Context(), nameParam, collectionTypeParam, pathsParam, refreshLibraryParam, addVirtualFolderDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVirtualFolders - Gets all virtual folders.
func (c *LibraryStructureAPIController) GetVirtualFolders(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetVirtualFolders(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveMediaPath - Remove a media path.
func (c *LibraryStructureAPIController) RemoveMediaPath(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var pathParam *string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = &param
	} else {
	}
	var refreshLibraryParam bool
	if query.Has("refreshLibrary") {
		param, err := parseBoolParameter(
			query.Get("refreshLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		refreshLibraryParam = param
	} else {
		var param bool = false
		refreshLibraryParam = param
	}
	result, err := c.service.RemoveMediaPath(r.Context(), nameParam, pathParam, refreshLibraryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveVirtualFolder - Removes a virtual folder.
func (c *LibraryStructureAPIController) RemoveVirtualFolder(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var refreshLibraryParam bool
	if query.Has("refreshLibrary") {
		param, err := parseBoolParameter(
			query.Get("refreshLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		refreshLibraryParam = param
	} else {
		var param bool = false
		refreshLibraryParam = param
	}
	result, err := c.service.RemoveVirtualFolder(r.Context(), nameParam, refreshLibraryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RenameVirtualFolder - Renames a virtual folder.
func (c *LibraryStructureAPIController) RenameVirtualFolder(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var newNameParam *string
	if query.Has("newName") {
		param := query.Get("newName")

		newNameParam = &param
	} else {
	}
	var refreshLibraryParam bool
	if query.Has("refreshLibrary") {
		param, err := parseBoolParameter(
			query.Get("refreshLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		refreshLibraryParam = param
	} else {
		var param bool = false
		refreshLibraryParam = param
	}
	result, err := c.service.RenameVirtualFolder(r.Context(), nameParam, newNameParam, refreshLibraryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateLibraryOptions - Update library options.
func (c *LibraryStructureAPIController) UpdateLibraryOptions(w http.ResponseWriter, r *http.Request) {
	updateLibraryOptionsDtoParam := UpdateLibraryOptionsDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateLibraryOptionsDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateLibraryOptionsDtoRequired(updateLibraryOptionsDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateLibraryOptionsDtoConstraints(updateLibraryOptionsDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateLibraryOptions(r.Context(), updateLibraryOptionsDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateMediaPath - Updates a media path.
func (c *LibraryStructureAPIController) UpdateMediaPath(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	mediaPathInfoParam := MediaPathInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaPathInfoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaPathInfoRequired(mediaPathInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaPathInfoConstraints(mediaPathInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateMediaPath(r.Context(), nameParam, mediaPathInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
