/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// UserViewsAPIController binds http requests to an api service and writes the service results to the http response
type UserViewsAPIController struct {
	service UserViewsAPIServicer
	errorHandler ErrorHandler
}

// UserViewsAPIOption for how the controller is set up.
type UserViewsAPIOption func(*UserViewsAPIController)

// WithUserViewsAPIErrorHandler inject ErrorHandler into controller
func WithUserViewsAPIErrorHandler(h ErrorHandler) UserViewsAPIOption {
	return func(c *UserViewsAPIController) {
		c.errorHandler = h
	}
}

// NewUserViewsAPIController creates a default api controller
func NewUserViewsAPIController(s UserViewsAPIServicer, opts ...UserViewsAPIOption) Router {
	controller := &UserViewsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserViewsAPIController
func (c *UserViewsAPIController) Routes() Routes {
	return Routes{
		"GetGroupingOptions": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/GroupingOptions",
			c.GetGroupingOptions,
		},
		"GetUserViews": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Views",
			c.GetUserViews,
		},
	}
}

// GetGroupingOptions - Get user view grouping options.
func (c *UserViewsAPIController) GetGroupingOptions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetGroupingOptions(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserViews - Get user views.
func (c *UserViewsAPIController) GetUserViews(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var includeExternalContentParam *bool
	if query.Has("includeExternalContent") {
		param, err := parseBoolParameter(
			query.Get("includeExternalContent"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeExternalContentParam = &param
	} else {
	}
	var presetViewsParam []string
	if query.Has("presetViews") {
		presetViewsParam = strings.Split(query.Get("presetViews"), ",")
	}
	var includeHiddenParam bool
	if query.Has("includeHidden") {
		param, err := parseBoolParameter(
			query.Get("includeHidden"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeHiddenParam = param
	} else {
		var param bool = false
		includeHiddenParam = param
	}
	result, err := c.service.GetUserViews(r.Context(), userIdParam, includeExternalContentParam, presetViewsParam, includeHiddenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
