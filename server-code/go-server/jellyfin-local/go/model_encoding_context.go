/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type EncodingContext string

// List of EncodingContext
const (
	STREAMING EncodingContext = "Streaming"
	STATIC EncodingContext = "Static"
)

// AllowedEncodingContextEnumValues is all the allowed values of EncodingContext enum
var AllowedEncodingContextEnumValues = []EncodingContext{
	"Streaming",
	"Static",
}

// validEncodingContextEnumValue provides a map of EncodingContexts for fast verification of use input
var validEncodingContextEnumValues = map[EncodingContext]struct{}{
	"Streaming": {},
	"Static": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v EncodingContext) IsValid() bool {
	_, ok := validEncodingContextEnumValues[v]
	return ok
}

// NewEncodingContextFromValue returns a pointer to a valid EncodingContext
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewEncodingContextFromValue(v string) (EncodingContext, error) {
	ev := EncodingContext(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for EncodingContext: valid values are %v", v, AllowedEncodingContextEnumValues)
	}
}



// AssertEncodingContextRequired checks if the required fields are not zero-ed
func AssertEncodingContextRequired(obj EncodingContext) error {
	return nil
}

// AssertEncodingContextConstraints checks if the values respects the defined constraints
func AssertEncodingContextConstraints(obj EncodingContext) error {
	return nil
}
