/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DisplayPreferencesAPIController binds http requests to an api service and writes the service results to the http response
type DisplayPreferencesAPIController struct {
	service DisplayPreferencesAPIServicer
	errorHandler ErrorHandler
}

// DisplayPreferencesAPIOption for how the controller is set up.
type DisplayPreferencesAPIOption func(*DisplayPreferencesAPIController)

// WithDisplayPreferencesAPIErrorHandler inject ErrorHandler into controller
func WithDisplayPreferencesAPIErrorHandler(h ErrorHandler) DisplayPreferencesAPIOption {
	return func(c *DisplayPreferencesAPIController) {
		c.errorHandler = h
	}
}

// NewDisplayPreferencesAPIController creates a default api controller
func NewDisplayPreferencesAPIController(s DisplayPreferencesAPIServicer, opts ...DisplayPreferencesAPIOption) Router {
	controller := &DisplayPreferencesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DisplayPreferencesAPIController
func (c *DisplayPreferencesAPIController) Routes() Routes {
	return Routes{
		"GetDisplayPreferences": Route{
			strings.ToUpper("Get"),
			"/DisplayPreferences/{displayPreferencesId}",
			c.GetDisplayPreferences,
		},
		"UpdateDisplayPreferences": Route{
			strings.ToUpper("Post"),
			"/DisplayPreferences/{displayPreferencesId}",
			c.UpdateDisplayPreferences,
		},
	}
}

// GetDisplayPreferences - Get Display Preferences.
func (c *DisplayPreferencesAPIController) GetDisplayPreferences(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	displayPreferencesIdParam := params["displayPreferencesId"]
	if displayPreferencesIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"displayPreferencesId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var clientParam string
	if query.Has("client") {
		param := query.Get("client")

		clientParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "client"}, nil)
		return
	}
	result, err := c.service.GetDisplayPreferences(r.Context(), displayPreferencesIdParam, userIdParam, clientParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDisplayPreferences - Update Display Preferences.
func (c *DisplayPreferencesAPIController) UpdateDisplayPreferences(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	displayPreferencesIdParam := params["displayPreferencesId"]
	if displayPreferencesIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"displayPreferencesId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var clientParam string
	if query.Has("client") {
		param := query.Get("client")

		clientParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "client"}, nil)
		return
	}
	displayPreferencesDtoParam := DisplayPreferencesDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&displayPreferencesDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDisplayPreferencesDtoRequired(displayPreferencesDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDisplayPreferencesDtoConstraints(displayPreferencesDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDisplayPreferences(r.Context(), displayPreferencesIdParam, userIdParam, clientParam, displayPreferencesDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
