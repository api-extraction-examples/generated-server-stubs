/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemUpdateAPIController binds http requests to an api service and writes the service results to the http response
type ItemUpdateAPIController struct {
	service ItemUpdateAPIServicer
	errorHandler ErrorHandler
}

// ItemUpdateAPIOption for how the controller is set up.
type ItemUpdateAPIOption func(*ItemUpdateAPIController)

// WithItemUpdateAPIErrorHandler inject ErrorHandler into controller
func WithItemUpdateAPIErrorHandler(h ErrorHandler) ItemUpdateAPIOption {
	return func(c *ItemUpdateAPIController) {
		c.errorHandler = h
	}
}

// NewItemUpdateAPIController creates a default api controller
func NewItemUpdateAPIController(s ItemUpdateAPIServicer, opts ...ItemUpdateAPIOption) Router {
	controller := &ItemUpdateAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemUpdateAPIController
func (c *ItemUpdateAPIController) Routes() Routes {
	return Routes{
		"GetMetadataEditorInfo": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/MetadataEditor",
			c.GetMetadataEditorInfo,
		},
		"UpdateItem": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}",
			c.UpdateItem,
		},
		"UpdateItemContentType": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/ContentType",
			c.UpdateItemContentType,
		},
	}
}

// GetMetadataEditorInfo - Gets metadata editor info for an item.
func (c *ItemUpdateAPIController) GetMetadataEditorInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetMetadataEditorInfo(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateItem - Updates an item.
func (c *ItemUpdateAPIController) UpdateItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	baseItemDtoParam := BaseItemDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&baseItemDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBaseItemDtoRequired(baseItemDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBaseItemDtoConstraints(baseItemDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateItem(r.Context(), itemIdParam, baseItemDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateItemContentType - Updates an item's content type.
func (c *ItemUpdateAPIController) UpdateItemContentType(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var contentTypeParam *string
	if query.Has("contentType") {
		param := query.Get("contentType")

		contentTypeParam = &param
	} else {
	}
	result, err := c.service.UpdateItemContentType(r.Context(), itemIdParam, contentTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
