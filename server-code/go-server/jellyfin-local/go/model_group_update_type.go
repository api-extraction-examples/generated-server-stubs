/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// GroupUpdateType : Enum GroupUpdateType.
type GroupUpdateType string

// List of GroupUpdateType
const (
	USER_JOINED GroupUpdateType = "UserJoined"
	USER_LEFT GroupUpdateType = "UserLeft"
	GROUP_JOINED GroupUpdateType = "GroupJoined"
	GROUP_LEFT GroupUpdateType = "GroupLeft"
	STATE_UPDATE GroupUpdateType = "StateUpdate"
	PLAY_QUEUE GroupUpdateType = "PlayQueue"
	NOT_IN_GROUP GroupUpdateType = "NotInGroup"
	GROUP_DOES_NOT_EXIST GroupUpdateType = "GroupDoesNotExist"
	CREATE_GROUP_DENIED GroupUpdateType = "CreateGroupDenied"
	JOIN_GROUP_DENIED GroupUpdateType = "JoinGroupDenied"
	LIBRARY_ACCESS_DENIED GroupUpdateType = "LibraryAccessDenied"
)

// AllowedGroupUpdateTypeEnumValues is all the allowed values of GroupUpdateType enum
var AllowedGroupUpdateTypeEnumValues = []GroupUpdateType{
	"UserJoined",
	"UserLeft",
	"GroupJoined",
	"GroupLeft",
	"StateUpdate",
	"PlayQueue",
	"NotInGroup",
	"GroupDoesNotExist",
	"CreateGroupDenied",
	"JoinGroupDenied",
	"LibraryAccessDenied",
}

// validGroupUpdateTypeEnumValue provides a map of GroupUpdateTypes for fast verification of use input
var validGroupUpdateTypeEnumValues = map[GroupUpdateType]struct{}{
	"UserJoined": {},
	"UserLeft": {},
	"GroupJoined": {},
	"GroupLeft": {},
	"StateUpdate": {},
	"PlayQueue": {},
	"NotInGroup": {},
	"GroupDoesNotExist": {},
	"CreateGroupDenied": {},
	"JoinGroupDenied": {},
	"LibraryAccessDenied": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupUpdateType) IsValid() bool {
	_, ok := validGroupUpdateTypeEnumValues[v]
	return ok
}

// NewGroupUpdateTypeFromValue returns a pointer to a valid GroupUpdateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupUpdateTypeFromValue(v string) (GroupUpdateType, error) {
	ev := GroupUpdateType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for GroupUpdateType: valid values are %v", v, AllowedGroupUpdateTypeEnumValues)
	}
}



// AssertGroupUpdateTypeRequired checks if the required fields are not zero-ed
func AssertGroupUpdateTypeRequired(obj GroupUpdateType) error {
	return nil
}

// AssertGroupUpdateTypeConstraints checks if the values respects the defined constraints
func AssertGroupUpdateTypeConstraints(obj GroupUpdateType) error {
	return nil
}
