/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// VideoAttachmentsAPIController binds http requests to an api service and writes the service results to the http response
type VideoAttachmentsAPIController struct {
	service VideoAttachmentsAPIServicer
	errorHandler ErrorHandler
}

// VideoAttachmentsAPIOption for how the controller is set up.
type VideoAttachmentsAPIOption func(*VideoAttachmentsAPIController)

// WithVideoAttachmentsAPIErrorHandler inject ErrorHandler into controller
func WithVideoAttachmentsAPIErrorHandler(h ErrorHandler) VideoAttachmentsAPIOption {
	return func(c *VideoAttachmentsAPIController) {
		c.errorHandler = h
	}
}

// NewVideoAttachmentsAPIController creates a default api controller
func NewVideoAttachmentsAPIController(s VideoAttachmentsAPIServicer, opts ...VideoAttachmentsAPIOption) Router {
	controller := &VideoAttachmentsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the VideoAttachmentsAPIController
func (c *VideoAttachmentsAPIController) Routes() Routes {
	return Routes{
		"GetAttachment": Route{
			strings.ToUpper("Get"),
			"/Videos/{videoId}/{mediaSourceId}/Attachments/{index}",
			c.GetAttachment,
		},
	}
}

// GetAttachment - Get video attachment.
func (c *VideoAttachmentsAPIController) GetAttachment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	videoIdParam := params["videoId"]
	if videoIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"videoId"}, nil)
		return
	}
	mediaSourceIdParam := params["mediaSourceId"]
	if mediaSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mediaSourceId"}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.GetAttachment(r.Context(), videoIdParam, mediaSourceIdParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
