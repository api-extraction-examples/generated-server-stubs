/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// StartupAPIController binds http requests to an api service and writes the service results to the http response
type StartupAPIController struct {
	service StartupAPIServicer
	errorHandler ErrorHandler
}

// StartupAPIOption for how the controller is set up.
type StartupAPIOption func(*StartupAPIController)

// WithStartupAPIErrorHandler inject ErrorHandler into controller
func WithStartupAPIErrorHandler(h ErrorHandler) StartupAPIOption {
	return func(c *StartupAPIController) {
		c.errorHandler = h
	}
}

// NewStartupAPIController creates a default api controller
func NewStartupAPIController(s StartupAPIServicer, opts ...StartupAPIOption) Router {
	controller := &StartupAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the StartupAPIController
func (c *StartupAPIController) Routes() Routes {
	return Routes{
		"CompleteWizard": Route{
			strings.ToUpper("Post"),
			"/Startup/Complete",
			c.CompleteWizard,
		},
		"GetFirstUser": Route{
			strings.ToUpper("Get"),
			"/Startup/User",
			c.GetFirstUser,
		},
		"GetFirstUser2": Route{
			strings.ToUpper("Get"),
			"/Startup/FirstUser",
			c.GetFirstUser2,
		},
		"GetStartupConfiguration": Route{
			strings.ToUpper("Get"),
			"/Startup/Configuration",
			c.GetStartupConfiguration,
		},
		"SetRemoteAccess": Route{
			strings.ToUpper("Post"),
			"/Startup/RemoteAccess",
			c.SetRemoteAccess,
		},
		"UpdateInitialConfiguration": Route{
			strings.ToUpper("Post"),
			"/Startup/Configuration",
			c.UpdateInitialConfiguration,
		},
		"UpdateStartupUser": Route{
			strings.ToUpper("Post"),
			"/Startup/User",
			c.UpdateStartupUser,
		},
	}
}

// CompleteWizard - Completes the startup wizard.
func (c *StartupAPIController) CompleteWizard(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.CompleteWizard(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFirstUser - Gets the first user.
func (c *StartupAPIController) GetFirstUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetFirstUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFirstUser2 - Gets the first user.
func (c *StartupAPIController) GetFirstUser2(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetFirstUser2(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStartupConfiguration - Gets the initial startup wizard configuration.
func (c *StartupAPIController) GetStartupConfiguration(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStartupConfiguration(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRemoteAccess - Sets remote access and UPnP.
func (c *StartupAPIController) SetRemoteAccess(w http.ResponseWriter, r *http.Request) {
	startupRemoteAccessDtoParam := StartupRemoteAccessDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&startupRemoteAccessDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStartupRemoteAccessDtoRequired(startupRemoteAccessDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStartupRemoteAccessDtoConstraints(startupRemoteAccessDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetRemoteAccess(r.Context(), startupRemoteAccessDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateInitialConfiguration - Sets the initial startup wizard configuration.
func (c *StartupAPIController) UpdateInitialConfiguration(w http.ResponseWriter, r *http.Request) {
	startupConfigurationDtoParam := StartupConfigurationDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&startupConfigurationDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStartupConfigurationDtoRequired(startupConfigurationDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStartupConfigurationDtoConstraints(startupConfigurationDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateInitialConfiguration(r.Context(), startupConfigurationDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateStartupUser - Sets the user name and password.
func (c *StartupAPIController) UpdateStartupUser(w http.ResponseWriter, r *http.Request) {
	startupUserDtoParam := StartupUserDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&startupUserDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertStartupUserDtoRequired(startupUserDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertStartupUserDtoConstraints(startupUserDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateStartupUser(r.Context(), startupUserDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
