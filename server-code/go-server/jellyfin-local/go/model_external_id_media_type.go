/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// ExternalIdMediaType : The specific media type of an MediaBrowser.Model.Providers.ExternalIdInfo.
type ExternalIdMediaType string

// List of ExternalIdMediaType
const (
	ALBUM ExternalIdMediaType = "Album"
	ALBUM_ARTIST ExternalIdMediaType = "AlbumArtist"
	ARTIST ExternalIdMediaType = "Artist"
	BOX_SET ExternalIdMediaType = "BoxSet"
	EPISODE ExternalIdMediaType = "Episode"
	MOVIE ExternalIdMediaType = "Movie"
	OTHER_ARTIST ExternalIdMediaType = "OtherArtist"
	PERSON ExternalIdMediaType = "Person"
	RELEASE_GROUP ExternalIdMediaType = "ReleaseGroup"
	SEASON ExternalIdMediaType = "Season"
	SERIES ExternalIdMediaType = "Series"
	TRACK ExternalIdMediaType = "Track"
)

// AllowedExternalIdMediaTypeEnumValues is all the allowed values of ExternalIdMediaType enum
var AllowedExternalIdMediaTypeEnumValues = []ExternalIdMediaType{
	"Album",
	"AlbumArtist",
	"Artist",
	"BoxSet",
	"Episode",
	"Movie",
	"OtherArtist",
	"Person",
	"ReleaseGroup",
	"Season",
	"Series",
	"Track",
}

// validExternalIdMediaTypeEnumValue provides a map of ExternalIdMediaTypes for fast verification of use input
var validExternalIdMediaTypeEnumValues = map[ExternalIdMediaType]struct{}{
	"Album": {},
	"AlbumArtist": {},
	"Artist": {},
	"BoxSet": {},
	"Episode": {},
	"Movie": {},
	"OtherArtist": {},
	"Person": {},
	"ReleaseGroup": {},
	"Season": {},
	"Series": {},
	"Track": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ExternalIdMediaType) IsValid() bool {
	_, ok := validExternalIdMediaTypeEnumValues[v]
	return ok
}

// NewExternalIdMediaTypeFromValue returns a pointer to a valid ExternalIdMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewExternalIdMediaTypeFromValue(v string) (ExternalIdMediaType, error) {
	ev := ExternalIdMediaType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ExternalIdMediaType: valid values are %v", v, AllowedExternalIdMediaTypeEnumValues)
	}
}



// AssertExternalIdMediaTypeRequired checks if the required fields are not zero-ed
func AssertExternalIdMediaTypeRequired(obj ExternalIdMediaType) error {
	return nil
}

// AssertExternalIdMediaTypeConstraints checks if the values respects the defined constraints
func AssertExternalIdMediaTypeConstraints(obj ExternalIdMediaType) error {
	return nil
}
