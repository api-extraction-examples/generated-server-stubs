/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"
	"time"

	"github.com/gorilla/mux"
)

// LiveTvAPIController binds http requests to an api service and writes the service results to the http response
type LiveTvAPIController struct {
	service LiveTvAPIServicer
	errorHandler ErrorHandler
}

// LiveTvAPIOption for how the controller is set up.
type LiveTvAPIOption func(*LiveTvAPIController)

// WithLiveTvAPIErrorHandler inject ErrorHandler into controller
func WithLiveTvAPIErrorHandler(h ErrorHandler) LiveTvAPIOption {
	return func(c *LiveTvAPIController) {
		c.errorHandler = h
	}
}

// NewLiveTvAPIController creates a default api controller
func NewLiveTvAPIController(s LiveTvAPIServicer, opts ...LiveTvAPIOption) Router {
	controller := &LiveTvAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LiveTvAPIController
func (c *LiveTvAPIController) Routes() Routes {
	return Routes{
		"AddListingProvider": Route{
			strings.ToUpper("Post"),
			"/LiveTv/ListingProviders",
			c.AddListingProvider,
		},
		"AddTunerHost": Route{
			strings.ToUpper("Post"),
			"/LiveTv/TunerHosts",
			c.AddTunerHost,
		},
		"CancelSeriesTimer": Route{
			strings.ToUpper("Delete"),
			"/LiveTv/SeriesTimers/{timerId}",
			c.CancelSeriesTimer,
		},
		"CancelTimer": Route{
			strings.ToUpper("Delete"),
			"/LiveTv/Timers/{timerId}",
			c.CancelTimer,
		},
		"CreateSeriesTimer": Route{
			strings.ToUpper("Post"),
			"/LiveTv/SeriesTimers",
			c.CreateSeriesTimer,
		},
		"CreateTimer": Route{
			strings.ToUpper("Post"),
			"/LiveTv/Timers",
			c.CreateTimer,
		},
		"DeleteListingProvider": Route{
			strings.ToUpper("Delete"),
			"/LiveTv/ListingProviders",
			c.DeleteListingProvider,
		},
		"DeleteRecording": Route{
			strings.ToUpper("Delete"),
			"/LiveTv/Recordings/{recordingId}",
			c.DeleteRecording,
		},
		"DeleteTunerHost": Route{
			strings.ToUpper("Delete"),
			"/LiveTv/TunerHosts",
			c.DeleteTunerHost,
		},
		"DiscoverTuners": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Tuners/Discover",
			c.DiscoverTuners,
		},
		"DiscvoverTuners": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Tuners/Discvover",
			c.DiscvoverTuners,
		},
		"GetChannel": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Channels/{channelId}",
			c.GetChannel,
		},
		"GetChannelMappingOptions": Route{
			strings.ToUpper("Get"),
			"/LiveTv/ChannelMappingOptions",
			c.GetChannelMappingOptions,
		},
		"GetDefaultListingProvider": Route{
			strings.ToUpper("Get"),
			"/LiveTv/ListingProviders/Default",
			c.GetDefaultListingProvider,
		},
		"GetDefaultTimer": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Timers/Defaults",
			c.GetDefaultTimer,
		},
		"GetGuideInfo": Route{
			strings.ToUpper("Get"),
			"/LiveTv/GuideInfo",
			c.GetGuideInfo,
		},
		"GetLineups": Route{
			strings.ToUpper("Get"),
			"/LiveTv/ListingProviders/Lineups",
			c.GetLineups,
		},
		"GetLiveRecordingFile": Route{
			strings.ToUpper("Get"),
			"/LiveTv/LiveRecordings/{recordingId}/stream",
			c.GetLiveRecordingFile,
		},
		"GetLiveStreamFile": Route{
			strings.ToUpper("Get"),
			"/LiveTv/LiveStreamFiles/{streamId}/stream.{container}",
			c.GetLiveStreamFile,
		},
		"GetLiveTvChannels": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Channels",
			c.GetLiveTvChannels,
		},
		"GetLiveTvInfo": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Info",
			c.GetLiveTvInfo,
		},
		"GetLiveTvPrograms": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Programs",
			c.GetLiveTvPrograms,
		},
		"GetProgram": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Programs/{programId}",
			c.GetProgram,
		},
		"GetPrograms": Route{
			strings.ToUpper("Post"),
			"/LiveTv/Programs",
			c.GetPrograms,
		},
		"GetRecommendedPrograms": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Programs/Recommended",
			c.GetRecommendedPrograms,
		},
		"GetRecording": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings/{recordingId}",
			c.GetRecording,
		},
		"GetRecordingFolders": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings/Folders",
			c.GetRecordingFolders,
		},
		"GetRecordingGroup": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings/Groups/{groupId}",
			c.GetRecordingGroup,
		},
		"GetRecordingGroups": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings/Groups",
			c.GetRecordingGroups,
		},
		"GetRecordings": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings",
			c.GetRecordings,
		},
		"GetRecordingsSeries": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Recordings/Series",
			c.GetRecordingsSeries,
		},
		"GetSchedulesDirectCountries": Route{
			strings.ToUpper("Get"),
			"/LiveTv/ListingProviders/SchedulesDirect/Countries",
			c.GetSchedulesDirectCountries,
		},
		"GetSeriesTimer": Route{
			strings.ToUpper("Get"),
			"/LiveTv/SeriesTimers/{timerId}",
			c.GetSeriesTimer,
		},
		"GetSeriesTimers": Route{
			strings.ToUpper("Get"),
			"/LiveTv/SeriesTimers",
			c.GetSeriesTimers,
		},
		"GetTimer": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Timers/{timerId}",
			c.GetTimer,
		},
		"GetTimers": Route{
			strings.ToUpper("Get"),
			"/LiveTv/Timers",
			c.GetTimers,
		},
		"GetTunerHostTypes": Route{
			strings.ToUpper("Get"),
			"/LiveTv/TunerHosts/Types",
			c.GetTunerHostTypes,
		},
		"ResetTuner": Route{
			strings.ToUpper("Post"),
			"/LiveTv/Tuners/{tunerId}/Reset",
			c.ResetTuner,
		},
		"SetChannelMapping": Route{
			strings.ToUpper("Post"),
			"/LiveTv/ChannelMappings",
			c.SetChannelMapping,
		},
		"UpdateSeriesTimer": Route{
			strings.ToUpper("Post"),
			"/LiveTv/SeriesTimers/{timerId}",
			c.UpdateSeriesTimer,
		},
		"UpdateTimer": Route{
			strings.ToUpper("Post"),
			"/LiveTv/Timers/{timerId}",
			c.UpdateTimer,
		},
	}
}

// AddListingProvider - Adds a listings provider.
func (c *LiveTvAPIController) AddListingProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pwParam *string
	if query.Has("pw") {
		param := query.Get("pw")

		pwParam = &param
	} else {
	}
	var validateListingsParam bool
	if query.Has("validateListings") {
		param, err := parseBoolParameter(
			query.Get("validateListings"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		validateListingsParam = param
	} else {
		var param bool = false
		validateListingsParam = param
	}
	var validateLoginParam bool
	if query.Has("validateLogin") {
		param, err := parseBoolParameter(
			query.Get("validateLogin"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		validateLoginParam = param
	} else {
		var param bool = false
		validateLoginParam = param
	}
	listingsProviderInfoParam := ListingsProviderInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&listingsProviderInfoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertListingsProviderInfoRequired(listingsProviderInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertListingsProviderInfoConstraints(listingsProviderInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddListingProvider(r.Context(), pwParam, validateListingsParam, validateLoginParam, listingsProviderInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AddTunerHost - Adds a tuner host.
func (c *LiveTvAPIController) AddTunerHost(w http.ResponseWriter, r *http.Request) {
	tunerHostInfoParam := TunerHostInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&tunerHostInfoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTunerHostInfoRequired(tunerHostInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTunerHostInfoConstraints(tunerHostInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddTunerHost(r.Context(), tunerHostInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CancelSeriesTimer - Cancels a live tv series timer.
func (c *LiveTvAPIController) CancelSeriesTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	result, err := c.service.CancelSeriesTimer(r.Context(), timerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CancelTimer - Cancels a live tv timer.
func (c *LiveTvAPIController) CancelTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	result, err := c.service.CancelTimer(r.Context(), timerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateSeriesTimer - Creates a live tv series timer.
func (c *LiveTvAPIController) CreateSeriesTimer(w http.ResponseWriter, r *http.Request) {
	seriesTimerInfoDtoParam := SeriesTimerInfoDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&seriesTimerInfoDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSeriesTimerInfoDtoRequired(seriesTimerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSeriesTimerInfoDtoConstraints(seriesTimerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateSeriesTimer(r.Context(), seriesTimerInfoDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateTimer - Creates a live tv timer.
func (c *LiveTvAPIController) CreateTimer(w http.ResponseWriter, r *http.Request) {
	timerInfoDtoParam := TimerInfoDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&timerInfoDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTimerInfoDtoRequired(timerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTimerInfoDtoConstraints(timerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateTimer(r.Context(), timerInfoDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteListingProvider - Delete listing provider.
func (c *LiveTvAPIController) DeleteListingProvider(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam *string
	if query.Has("id") {
		param := query.Get("id")

		idParam = &param
	} else {
	}
	result, err := c.service.DeleteListingProvider(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteRecording - Deletes a live tv recording.
func (c *LiveTvAPIController) DeleteRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordingIdParam := params["recordingId"]
	if recordingIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordingId"}, nil)
		return
	}
	result, err := c.service.DeleteRecording(r.Context(), recordingIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteTunerHost - Deletes a tuner host.
func (c *LiveTvAPIController) DeleteTunerHost(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam *string
	if query.Has("id") {
		param := query.Get("id")

		idParam = &param
	} else {
	}
	result, err := c.service.DeleteTunerHost(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DiscoverTuners - Discover tuners.
func (c *LiveTvAPIController) DiscoverTuners(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var newDevicesOnlyParam bool
	if query.Has("newDevicesOnly") {
		param, err := parseBoolParameter(
			query.Get("newDevicesOnly"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		newDevicesOnlyParam = param
	} else {
		var param bool = false
		newDevicesOnlyParam = param
	}
	result, err := c.service.DiscoverTuners(r.Context(), newDevicesOnlyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DiscvoverTuners - Discover tuners.
func (c *LiveTvAPIController) DiscvoverTuners(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var newDevicesOnlyParam bool
	if query.Has("newDevicesOnly") {
		param, err := parseBoolParameter(
			query.Get("newDevicesOnly"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		newDevicesOnlyParam = param
	} else {
		var param bool = false
		newDevicesOnlyParam = param
	}
	result, err := c.service.DiscvoverTuners(r.Context(), newDevicesOnlyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChannel - Gets a live tv channel.
func (c *LiveTvAPIController) GetChannel(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	channelIdParam := params["channelId"]
	if channelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"channelId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetChannel(r.Context(), channelIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChannelMappingOptions - Get channel mapping options.
func (c *LiveTvAPIController) GetChannelMappingOptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var providerIdParam *string
	if query.Has("providerId") {
		param := query.Get("providerId")

		providerIdParam = &param
	} else {
	}
	result, err := c.service.GetChannelMappingOptions(r.Context(), providerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultListingProvider - Gets default listings provider info.
func (c *LiveTvAPIController) GetDefaultListingProvider(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDefaultListingProvider(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultTimer - Gets the default values for a new timer.
func (c *LiveTvAPIController) GetDefaultTimer(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var programIdParam *string
	if query.Has("programId") {
		param := query.Get("programId")

		programIdParam = &param
	} else {
	}
	result, err := c.service.GetDefaultTimer(r.Context(), programIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGuideInfo - Get guid info.
func (c *LiveTvAPIController) GetGuideInfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetGuideInfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLineups - Gets available lineups.
func (c *LiveTvAPIController) GetLineups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam *string
	if query.Has("id") {
		param := query.Get("id")

		idParam = &param
	} else {
	}
	var type_Param *string
	if query.Has("type") {
		param := query.Get("type")

		type_Param = &param
	} else {
	}
	var locationParam *string
	if query.Has("location") {
		param := query.Get("location")

		locationParam = &param
	} else {
	}
	var countryParam *string
	if query.Has("country") {
		param := query.Get("country")

		countryParam = &param
	} else {
	}
	result, err := c.service.GetLineups(r.Context(), idParam, type_Param, locationParam, countryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLiveRecordingFile - Gets a live tv recording stream.
func (c *LiveTvAPIController) GetLiveRecordingFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	recordingIdParam := params["recordingId"]
	if recordingIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordingId"}, nil)
		return
	}
	result, err := c.service.GetLiveRecordingFile(r.Context(), recordingIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLiveStreamFile - Gets a live tv channel stream.
func (c *LiveTvAPIController) GetLiveStreamFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	streamIdParam := params["streamId"]
	if streamIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"streamId"}, nil)
		return
	}
	containerParam := params["container"]
	if containerParam == "" {
		c.errorHandler(w, r, &RequiredError{"container"}, nil)
		return
	}
	result, err := c.service.GetLiveStreamFile(r.Context(), streamIdParam, containerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLiveTvChannels - Gets available live tv channels.
func (c *LiveTvAPIController) GetLiveTvChannels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var type_Param ChannelType
	if query.Has("type") {
		param := ChannelType(query.Get("type"))

		type_Param = param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var isMovieParam *bool
	if query.Has("isMovie") {
		param, err := parseBoolParameter(
			query.Get("isMovie"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMovieParam = &param
	} else {
	}
	var isSeriesParam *bool
	if query.Has("isSeries") {
		param, err := parseBoolParameter(
			query.Get("isSeries"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSeriesParam = &param
	} else {
	}
	var isNewsParam *bool
	if query.Has("isNews") {
		param, err := parseBoolParameter(
			query.Get("isNews"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewsParam = &param
	} else {
	}
	var isKidsParam *bool
	if query.Has("isKids") {
		param, err := parseBoolParameter(
			query.Get("isKids"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isKidsParam = &param
	} else {
	}
	var isSportsParam *bool
	if query.Has("isSports") {
		param, err := parseBoolParameter(
			query.Get("isSports"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSportsParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	var isLikedParam *bool
	if query.Has("isLiked") {
		param, err := parseBoolParameter(
			query.Get("isLiked"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isLikedParam = &param
	} else {
	}
	var isDislikedParam *bool
	if query.Has("isDisliked") {
		param, err := parseBoolParameter(
			query.Get("isDisliked"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isDislikedParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var sortByParam []string
	if query.Has("sortBy") {
		sortByParam = strings.Split(query.Get("sortBy"), ",")
	}
	var sortOrderParam SortOrder
	if query.Has("sortOrder") {
		param := SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	var enableFavoriteSortingParam bool
	if query.Has("enableFavoriteSorting") {
		param, err := parseBoolParameter(
			query.Get("enableFavoriteSorting"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableFavoriteSortingParam = param
	} else {
		var param bool = false
		enableFavoriteSortingParam = param
	}
	var addCurrentProgramParam bool
	if query.Has("addCurrentProgram") {
		param, err := parseBoolParameter(
			query.Get("addCurrentProgram"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addCurrentProgramParam = param
	} else {
		var param bool = true
		addCurrentProgramParam = param
	}
	result, err := c.service.GetLiveTvChannels(r.Context(), type_Param, userIdParam, startIndexParam, isMovieParam, isSeriesParam, isNewsParam, isKidsParam, isSportsParam, limitParam, isFavoriteParam, isLikedParam, isDislikedParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, fieldsParam, enableUserDataParam, sortByParam, sortOrderParam, enableFavoriteSortingParam, addCurrentProgramParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLiveTvInfo - Gets available live tv services.
func (c *LiveTvAPIController) GetLiveTvInfo(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLiveTvInfo(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLiveTvPrograms - Gets available live tv epgs.
func (c *LiveTvAPIController) GetLiveTvPrograms(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var channelIdsParam []string
	if query.Has("channelIds") {
		channelIdsParam = strings.Split(query.Get("channelIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var minStartDateParam *time.Time
	if query.Has("minStartDate"){
		param, err := parseTime(query.Get("minStartDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minStartDateParam = &param
	} else {
	}
	var hasAiredParam *bool
	if query.Has("hasAired") {
		param, err := parseBoolParameter(
			query.Get("hasAired"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasAiredParam = &param
	} else {
	}
	var isAiringParam *bool
	if query.Has("isAiring") {
		param, err := parseBoolParameter(
			query.Get("isAiring"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isAiringParam = &param
	} else {
	}
	var maxStartDateParam *time.Time
	if query.Has("maxStartDate"){
		param, err := parseTime(query.Get("maxStartDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStartDateParam = &param
	} else {
	}
	var minEndDateParam *time.Time
	if query.Has("minEndDate"){
		param, err := parseTime(query.Get("minEndDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minEndDateParam = &param
	} else {
	}
	var maxEndDateParam *time.Time
	if query.Has("maxEndDate"){
		param, err := parseTime(query.Get("maxEndDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxEndDateParam = &param
	} else {
	}
	var isMovieParam *bool
	if query.Has("isMovie") {
		param, err := parseBoolParameter(
			query.Get("isMovie"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMovieParam = &param
	} else {
	}
	var isSeriesParam *bool
	if query.Has("isSeries") {
		param, err := parseBoolParameter(
			query.Get("isSeries"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSeriesParam = &param
	} else {
	}
	var isNewsParam *bool
	if query.Has("isNews") {
		param, err := parseBoolParameter(
			query.Get("isNews"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewsParam = &param
	} else {
	}
	var isKidsParam *bool
	if query.Has("isKids") {
		param, err := parseBoolParameter(
			query.Get("isKids"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isKidsParam = &param
	} else {
	}
	var isSportsParam *bool
	if query.Has("isSports") {
		param, err := parseBoolParameter(
			query.Get("isSports"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSportsParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var sortByParam *string
	if query.Has("sortBy") {
		param := query.Get("sortBy")

		sortByParam = &param
	} else {
	}
	var sortOrderParam *string
	if query.Has("sortOrder") {
		param := query.Get("sortOrder")

		sortOrderParam = &param
	} else {
	}
	var genresParam []string
	if query.Has("genres") {
		genresParam = strings.Split(query.Get("genres"), ",")
	}
	var genreIdsParam []string
	if query.Has("genreIds") {
		genreIdsParam = strings.Split(query.Get("genreIds"), ",")
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var seriesTimerIdParam *string
	if query.Has("seriesTimerId") {
		param := query.Get("seriesTimerId")

		seriesTimerIdParam = &param
	} else {
	}
	var librarySeriesIdParam *string
	if query.Has("librarySeriesId") {
		param := query.Get("librarySeriesId")

		librarySeriesIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetLiveTvPrograms(r.Context(), channelIdsParam, userIdParam, minStartDateParam, hasAiredParam, isAiringParam, maxStartDateParam, minEndDateParam, maxEndDateParam, isMovieParam, isSeriesParam, isNewsParam, isKidsParam, isSportsParam, startIndexParam, limitParam, sortByParam, sortOrderParam, genresParam, genreIdsParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, enableUserDataParam, seriesTimerIdParam, librarySeriesIdParam, fieldsParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProgram - Gets a live tv program.
func (c *LiveTvAPIController) GetProgram(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	programIdParam := params["programId"]
	if programIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"programId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetProgram(r.Context(), programIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPrograms - Gets available live tv epgs.
func (c *LiveTvAPIController) GetPrograms(w http.ResponseWriter, r *http.Request) {
	getProgramsDtoParam := GetProgramsDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&getProgramsDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGetProgramsDtoRequired(getProgramsDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGetProgramsDtoConstraints(getProgramsDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPrograms(r.Context(), getProgramsDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecommendedPrograms - Gets recommended live tv epgs.
func (c *LiveTvAPIController) GetRecommendedPrograms(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var isAiringParam *bool
	if query.Has("isAiring") {
		param, err := parseBoolParameter(
			query.Get("isAiring"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isAiringParam = &param
	} else {
	}
	var hasAiredParam *bool
	if query.Has("hasAired") {
		param, err := parseBoolParameter(
			query.Get("hasAired"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasAiredParam = &param
	} else {
	}
	var isSeriesParam *bool
	if query.Has("isSeries") {
		param, err := parseBoolParameter(
			query.Get("isSeries"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSeriesParam = &param
	} else {
	}
	var isMovieParam *bool
	if query.Has("isMovie") {
		param, err := parseBoolParameter(
			query.Get("isMovie"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMovieParam = &param
	} else {
	}
	var isNewsParam *bool
	if query.Has("isNews") {
		param, err := parseBoolParameter(
			query.Get("isNews"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewsParam = &param
	} else {
	}
	var isKidsParam *bool
	if query.Has("isKids") {
		param, err := parseBoolParameter(
			query.Get("isKids"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isKidsParam = &param
	} else {
	}
	var isSportsParam *bool
	if query.Has("isSports") {
		param, err := parseBoolParameter(
			query.Get("isSports"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSportsParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var genreIdsParam []string
	if query.Has("genreIds") {
		genreIdsParam = strings.Split(query.Get("genreIds"), ",")
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetRecommendedPrograms(r.Context(), userIdParam, limitParam, isAiringParam, hasAiredParam, isSeriesParam, isMovieParam, isNewsParam, isKidsParam, isSportsParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, genreIdsParam, fieldsParam, enableUserDataParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecording - Gets a live tv recording.
func (c *LiveTvAPIController) GetRecording(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	recordingIdParam := params["recordingId"]
	if recordingIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"recordingId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetRecording(r.Context(), recordingIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecordingFolders - Gets recording folders.
func (c *LiveTvAPIController) GetRecordingFolders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetRecordingFolders(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecordingGroup - Get recording group.
// Deprecated
func (c *LiveTvAPIController) GetRecordingGroup(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	groupIdParam := params["groupId"]
	if groupIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"groupId"}, nil)
		return
	}
	result, err := c.service.GetRecordingGroup(r.Context(), groupIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecordingGroups - Gets live tv recording groups.
// Deprecated
func (c *LiveTvAPIController) GetRecordingGroups(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetRecordingGroups(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecordings - Gets live tv recordings.
func (c *LiveTvAPIController) GetRecordings(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var channelIdParam *string
	if query.Has("channelId") {
		param := query.Get("channelId")

		channelIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var statusParam RecordingStatus
	if query.Has("status") {
		param := RecordingStatus(query.Get("status"))

		statusParam = param
	} else {
	}
	var isInProgressParam *bool
	if query.Has("isInProgress") {
		param, err := parseBoolParameter(
			query.Get("isInProgress"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isInProgressParam = &param
	} else {
	}
	var seriesTimerIdParam *string
	if query.Has("seriesTimerId") {
		param := query.Get("seriesTimerId")

		seriesTimerIdParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var isMovieParam *bool
	if query.Has("isMovie") {
		param, err := parseBoolParameter(
			query.Get("isMovie"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMovieParam = &param
	} else {
	}
	var isSeriesParam *bool
	if query.Has("isSeries") {
		param, err := parseBoolParameter(
			query.Get("isSeries"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSeriesParam = &param
	} else {
	}
	var isKidsParam *bool
	if query.Has("isKids") {
		param, err := parseBoolParameter(
			query.Get("isKids"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isKidsParam = &param
	} else {
	}
	var isSportsParam *bool
	if query.Has("isSports") {
		param, err := parseBoolParameter(
			query.Get("isSports"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSportsParam = &param
	} else {
	}
	var isNewsParam *bool
	if query.Has("isNews") {
		param, err := parseBoolParameter(
			query.Get("isNews"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewsParam = &param
	} else {
	}
	var isLibraryItemParam *bool
	if query.Has("isLibraryItem") {
		param, err := parseBoolParameter(
			query.Get("isLibraryItem"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isLibraryItemParam = &param
	} else {
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetRecordings(r.Context(), channelIdParam, userIdParam, startIndexParam, limitParam, statusParam, isInProgressParam, seriesTimerIdParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, fieldsParam, enableUserDataParam, isMovieParam, isSeriesParam, isKidsParam, isSportsParam, isNewsParam, isLibraryItemParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRecordingsSeries - Gets live tv recording series.
// Deprecated
func (c *LiveTvAPIController) GetRecordingsSeries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var channelIdParam *string
	if query.Has("channelId") {
		param := query.Get("channelId")

		channelIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var groupIdParam *string
	if query.Has("groupId") {
		param := query.Get("groupId")

		groupIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var statusParam RecordingStatus
	if query.Has("status") {
		param := RecordingStatus(query.Get("status"))

		statusParam = param
	} else {
	}
	var isInProgressParam *bool
	if query.Has("isInProgress") {
		param, err := parseBoolParameter(
			query.Get("isInProgress"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isInProgressParam = &param
	} else {
	}
	var seriesTimerIdParam *string
	if query.Has("seriesTimerId") {
		param := query.Get("seriesTimerId")

		seriesTimerIdParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetRecordingsSeries(r.Context(), channelIdParam, userIdParam, groupIdParam, startIndexParam, limitParam, statusParam, isInProgressParam, seriesTimerIdParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, fieldsParam, enableUserDataParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSchedulesDirectCountries - Gets available countries.
func (c *LiveTvAPIController) GetSchedulesDirectCountries(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetSchedulesDirectCountries(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSeriesTimer - Gets a live tv series timer.
func (c *LiveTvAPIController) GetSeriesTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	result, err := c.service.GetSeriesTimer(r.Context(), timerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSeriesTimers - Gets live tv series timers.
func (c *LiveTvAPIController) GetSeriesTimers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var sortByParam *string
	if query.Has("sortBy") {
		param := query.Get("sortBy")

		sortByParam = &param
	} else {
	}
	var sortOrderParam SortOrder
	if query.Has("sortOrder") {
		param := SortOrder(query.Get("sortOrder"))

		sortOrderParam = param
	} else {
	}
	result, err := c.service.GetSeriesTimers(r.Context(), sortByParam, sortOrderParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTimer - Gets a timer.
func (c *LiveTvAPIController) GetTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	result, err := c.service.GetTimer(r.Context(), timerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTimers - Gets the live tv timers.
func (c *LiveTvAPIController) GetTimers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var channelIdParam *string
	if query.Has("channelId") {
		param := query.Get("channelId")

		channelIdParam = &param
	} else {
	}
	var seriesTimerIdParam *string
	if query.Has("seriesTimerId") {
		param := query.Get("seriesTimerId")

		seriesTimerIdParam = &param
	} else {
	}
	var isActiveParam *bool
	if query.Has("isActive") {
		param, err := parseBoolParameter(
			query.Get("isActive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isActiveParam = &param
	} else {
	}
	var isScheduledParam *bool
	if query.Has("isScheduled") {
		param, err := parseBoolParameter(
			query.Get("isScheduled"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isScheduledParam = &param
	} else {
	}
	result, err := c.service.GetTimers(r.Context(), channelIdParam, seriesTimerIdParam, isActiveParam, isScheduledParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTunerHostTypes - Get tuner host types.
func (c *LiveTvAPIController) GetTunerHostTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetTunerHostTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ResetTuner - Resets a tv tuner.
func (c *LiveTvAPIController) ResetTuner(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	tunerIdParam := params["tunerId"]
	if tunerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"tunerId"}, nil)
		return
	}
	result, err := c.service.ResetTuner(r.Context(), tunerIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetChannelMapping - Set channel mappings.
func (c *LiveTvAPIController) SetChannelMapping(w http.ResponseWriter, r *http.Request) {
	setChannelMappingDtoParam := SetChannelMappingDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setChannelMappingDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetChannelMappingDtoRequired(setChannelMappingDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetChannelMappingDtoConstraints(setChannelMappingDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SetChannelMapping(r.Context(), setChannelMappingDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateSeriesTimer - Updates a live tv series timer.
func (c *LiveTvAPIController) UpdateSeriesTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	seriesTimerInfoDtoParam := SeriesTimerInfoDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&seriesTimerInfoDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSeriesTimerInfoDtoRequired(seriesTimerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSeriesTimerInfoDtoConstraints(seriesTimerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateSeriesTimer(r.Context(), timerIdParam, seriesTimerInfoDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTimer - Updates a live tv timer.
func (c *LiveTvAPIController) UpdateTimer(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	timerIdParam := params["timerId"]
	if timerIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"timerId"}, nil)
		return
	}
	timerInfoDtoParam := TimerInfoDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&timerInfoDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTimerInfoDtoRequired(timerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTimerInfoDtoConstraints(timerInfoDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateTimer(r.Context(), timerIdParam, timerInfoDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
