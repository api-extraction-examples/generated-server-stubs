/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// GroupShuffleMode : Enum GroupShuffleMode.
type GroupShuffleMode string

// List of GroupShuffleMode
const (
	SORTED GroupShuffleMode = "Sorted"
	SHUFFLE GroupShuffleMode = "Shuffle"
)

// AllowedGroupShuffleModeEnumValues is all the allowed values of GroupShuffleMode enum
var AllowedGroupShuffleModeEnumValues = []GroupShuffleMode{
	"Sorted",
	"Shuffle",
}

// validGroupShuffleModeEnumValue provides a map of GroupShuffleModes for fast verification of use input
var validGroupShuffleModeEnumValues = map[GroupShuffleMode]struct{}{
	"Sorted": {},
	"Shuffle": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupShuffleMode) IsValid() bool {
	_, ok := validGroupShuffleModeEnumValues[v]
	return ok
}

// NewGroupShuffleModeFromValue returns a pointer to a valid GroupShuffleMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupShuffleModeFromValue(v string) (GroupShuffleMode, error) {
	ev := GroupShuffleMode(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for GroupShuffleMode: valid values are %v", v, AllowedGroupShuffleModeEnumValues)
	}
}



// AssertGroupShuffleModeRequired checks if the required fields are not zero-ed
func AssertGroupShuffleModeRequired(obj GroupShuffleMode) error {
	return nil
}

// AssertGroupShuffleModeConstraints checks if the values respects the defined constraints
func AssertGroupShuffleModeConstraints(obj GroupShuffleMode) error {
	return nil
}
