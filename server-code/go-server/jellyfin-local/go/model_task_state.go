/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// TaskState : Enum TaskState.
type TaskState string

// List of TaskState
const (
	IDLE TaskState = "Idle"
	CANCELLING TaskState = "Cancelling"
	RUNNING TaskState = "Running"
)

// AllowedTaskStateEnumValues is all the allowed values of TaskState enum
var AllowedTaskStateEnumValues = []TaskState{
	"Idle",
	"Cancelling",
	"Running",
}

// validTaskStateEnumValue provides a map of TaskStates for fast verification of use input
var validTaskStateEnumValues = map[TaskState]struct{}{
	"Idle": {},
	"Cancelling": {},
	"Running": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskState) IsValid() bool {
	_, ok := validTaskStateEnumValues[v]
	return ok
}

// NewTaskStateFromValue returns a pointer to a valid TaskState
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskStateFromValue(v string) (TaskState, error) {
	ev := TaskState(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for TaskState: valid values are %v", v, AllowedTaskStateEnumValues)
	}
}



// AssertTaskStateRequired checks if the required fields are not zero-ed
func AssertTaskStateRequired(obj TaskState) error {
	return nil
}

// AssertTaskStateConstraints checks if the values respects the defined constraints
func AssertTaskStateConstraints(obj TaskState) error {
	return nil
}
