/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type KeepUntil string

// List of KeepUntil
const (
	UNTIL_DELETED KeepUntil = "UntilDeleted"
	UNTIL_SPACE_NEEDED KeepUntil = "UntilSpaceNeeded"
	UNTIL_WATCHED KeepUntil = "UntilWatched"
	UNTIL_DATE KeepUntil = "UntilDate"
)

// AllowedKeepUntilEnumValues is all the allowed values of KeepUntil enum
var AllowedKeepUntilEnumValues = []KeepUntil{
	"UntilDeleted",
	"UntilSpaceNeeded",
	"UntilWatched",
	"UntilDate",
}

// validKeepUntilEnumValue provides a map of KeepUntils for fast verification of use input
var validKeepUntilEnumValues = map[KeepUntil]struct{}{
	"UntilDeleted": {},
	"UntilSpaceNeeded": {},
	"UntilWatched": {},
	"UntilDate": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v KeepUntil) IsValid() bool {
	_, ok := validKeepUntilEnumValues[v]
	return ok
}

// NewKeepUntilFromValue returns a pointer to a valid KeepUntil
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewKeepUntilFromValue(v string) (KeepUntil, error) {
	ev := KeepUntil(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for KeepUntil: valid values are %v", v, AllowedKeepUntilEnumValues)
	}
}



// AssertKeepUntilRequired checks if the required fields are not zero-ed
func AssertKeepUntilRequired(obj KeepUntil) error {
	return nil
}

// AssertKeepUntilConstraints checks if the values respects the defined constraints
func AssertKeepUntilConstraints(obj KeepUntil) error {
	return nil
}
