/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ApiKeyAPIController binds http requests to an api service and writes the service results to the http response
type ApiKeyAPIController struct {
	service ApiKeyAPIServicer
	errorHandler ErrorHandler
}

// ApiKeyAPIOption for how the controller is set up.
type ApiKeyAPIOption func(*ApiKeyAPIController)

// WithApiKeyAPIErrorHandler inject ErrorHandler into controller
func WithApiKeyAPIErrorHandler(h ErrorHandler) ApiKeyAPIOption {
	return func(c *ApiKeyAPIController) {
		c.errorHandler = h
	}
}

// NewApiKeyAPIController creates a default api controller
func NewApiKeyAPIController(s ApiKeyAPIServicer, opts ...ApiKeyAPIOption) Router {
	controller := &ApiKeyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ApiKeyAPIController
func (c *ApiKeyAPIController) Routes() Routes {
	return Routes{
		"CreateKey": Route{
			strings.ToUpper("Post"),
			"/Auth/Keys",
			c.CreateKey,
		},
		"GetKeys": Route{
			strings.ToUpper("Get"),
			"/Auth/Keys",
			c.GetKeys,
		},
		"RevokeKey": Route{
			strings.ToUpper("Delete"),
			"/Auth/Keys/{key}",
			c.RevokeKey,
		},
	}
}

// CreateKey - Create a new api key.
func (c *ApiKeyAPIController) CreateKey(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var appParam string
	if query.Has("app") {
		param := query.Get("app")

		appParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "app"}, nil)
		return
	}
	result, err := c.service.CreateKey(r.Context(), appParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetKeys - Get all keys.
func (c *ApiKeyAPIController) GetKeys(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetKeys(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RevokeKey - Remove an api key.
func (c *ApiKeyAPIController) RevokeKey(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	keyParam := params["key"]
	if keyParam == "" {
		c.errorHandler(w, r, &RequiredError{"key"}, nil)
		return
	}
	result, err := c.service.RevokeKey(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
