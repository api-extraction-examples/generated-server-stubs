/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type Video3DFormat string

// List of Video3DFormat
const (
	HALF_SIDE_BY_SIDE Video3DFormat = "HalfSideBySide"
	FULL_SIDE_BY_SIDE Video3DFormat = "FullSideBySide"
	FULL_TOP_AND_BOTTOM Video3DFormat = "FullTopAndBottom"
	HALF_TOP_AND_BOTTOM Video3DFormat = "HalfTopAndBottom"
	MVC Video3DFormat = "MVC"
)

// AllowedVideo3DFormatEnumValues is all the allowed values of Video3DFormat enum
var AllowedVideo3DFormatEnumValues = []Video3DFormat{
	"HalfSideBySide",
	"FullSideBySide",
	"FullTopAndBottom",
	"HalfTopAndBottom",
	"MVC",
}

// validVideo3DFormatEnumValue provides a map of Video3DFormats for fast verification of use input
var validVideo3DFormatEnumValues = map[Video3DFormat]struct{}{
	"HalfSideBySide": {},
	"FullSideBySide": {},
	"FullTopAndBottom": {},
	"HalfTopAndBottom": {},
	"MVC": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Video3DFormat) IsValid() bool {
	_, ok := validVideo3DFormatEnumValues[v]
	return ok
}

// NewVideo3DFormatFromValue returns a pointer to a valid Video3DFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVideo3DFormatFromValue(v string) (Video3DFormat, error) {
	ev := Video3DFormat(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for Video3DFormat: valid values are %v", v, AllowedVideo3DFormatEnumValues)
	}
}



// AssertVideo3DFormatRequired checks if the required fields are not zero-ed
func AssertVideo3DFormatRequired(obj Video3DFormat) error {
	return nil
}

// AssertVideo3DFormatConstraints checks if the values respects the defined constraints
func AssertVideo3DFormatConstraints(obj Video3DFormat) error {
	return nil
}
