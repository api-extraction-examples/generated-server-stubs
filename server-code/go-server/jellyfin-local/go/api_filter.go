/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// FilterAPIController binds http requests to an api service and writes the service results to the http response
type FilterAPIController struct {
	service FilterAPIServicer
	errorHandler ErrorHandler
}

// FilterAPIOption for how the controller is set up.
type FilterAPIOption func(*FilterAPIController)

// WithFilterAPIErrorHandler inject ErrorHandler into controller
func WithFilterAPIErrorHandler(h ErrorHandler) FilterAPIOption {
	return func(c *FilterAPIController) {
		c.errorHandler = h
	}
}

// NewFilterAPIController creates a default api controller
func NewFilterAPIController(s FilterAPIServicer, opts ...FilterAPIOption) Router {
	controller := &FilterAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FilterAPIController
func (c *FilterAPIController) Routes() Routes {
	return Routes{
		"GetQueryFilters": Route{
			strings.ToUpper("Get"),
			"/Items/Filters2",
			c.GetQueryFilters,
		},
		"GetQueryFiltersLegacy": Route{
			strings.ToUpper("Get"),
			"/Items/Filters",
			c.GetQueryFiltersLegacy,
		},
	}
}

// GetQueryFilters - Gets query filters.
func (c *FilterAPIController) GetQueryFilters(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var includeItemTypesParam []string
	if query.Has("includeItemTypes") {
		includeItemTypesParam = strings.Split(query.Get("includeItemTypes"), ",")
	}
	var isAiringParam *bool
	if query.Has("isAiring") {
		param, err := parseBoolParameter(
			query.Get("isAiring"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isAiringParam = &param
	} else {
	}
	var isMovieParam *bool
	if query.Has("isMovie") {
		param, err := parseBoolParameter(
			query.Get("isMovie"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMovieParam = &param
	} else {
	}
	var isSportsParam *bool
	if query.Has("isSports") {
		param, err := parseBoolParameter(
			query.Get("isSports"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSportsParam = &param
	} else {
	}
	var isKidsParam *bool
	if query.Has("isKids") {
		param, err := parseBoolParameter(
			query.Get("isKids"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isKidsParam = &param
	} else {
	}
	var isNewsParam *bool
	if query.Has("isNews") {
		param, err := parseBoolParameter(
			query.Get("isNews"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewsParam = &param
	} else {
	}
	var isSeriesParam *bool
	if query.Has("isSeries") {
		param, err := parseBoolParameter(
			query.Get("isSeries"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isSeriesParam = &param
	} else {
	}
	var recursiveParam *bool
	if query.Has("recursive") {
		param, err := parseBoolParameter(
			query.Get("recursive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recursiveParam = &param
	} else {
	}
	result, err := c.service.GetQueryFilters(r.Context(), userIdParam, parentIdParam, includeItemTypesParam, isAiringParam, isMovieParam, isSportsParam, isKidsParam, isNewsParam, isSeriesParam, recursiveParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetQueryFiltersLegacy - Gets legacy query filters.
func (c *FilterAPIController) GetQueryFiltersLegacy(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var includeItemTypesParam []string
	if query.Has("includeItemTypes") {
		includeItemTypesParam = strings.Split(query.Get("includeItemTypes"), ",")
	}
	var mediaTypesParam []string
	if query.Has("mediaTypes") {
		mediaTypesParam = strings.Split(query.Get("mediaTypes"), ",")
	}
	result, err := c.service.GetQueryFiltersLegacy(r.Context(), userIdParam, parentIdParam, includeItemTypesParam, mediaTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
