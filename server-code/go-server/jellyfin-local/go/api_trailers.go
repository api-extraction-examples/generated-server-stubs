/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"
	"time"

	"github.com/gorilla/mux"
)

// TrailersAPIController binds http requests to an api service and writes the service results to the http response
type TrailersAPIController struct {
	service TrailersAPIServicer
	errorHandler ErrorHandler
}

// TrailersAPIOption for how the controller is set up.
type TrailersAPIOption func(*TrailersAPIController)

// WithTrailersAPIErrorHandler inject ErrorHandler into controller
func WithTrailersAPIErrorHandler(h ErrorHandler) TrailersAPIOption {
	return func(c *TrailersAPIController) {
		c.errorHandler = h
	}
}

// NewTrailersAPIController creates a default api controller
func NewTrailersAPIController(s TrailersAPIServicer, opts ...TrailersAPIOption) Router {
	controller := &TrailersAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the TrailersAPIController
func (c *TrailersAPIController) Routes() Routes {
	return Routes{
		"GetTrailers": Route{
			strings.ToUpper("Get"),
			"/Trailers",
			c.GetTrailers,
		},
	}
}

// GetTrailers - Finds movies and trailers similar to a given trailer.
func (c *TrailersAPIController) GetTrailers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var maxOfficialRatingParam *string
	if query.Has("maxOfficialRating") {
		param := query.Get("maxOfficialRating")

		maxOfficialRatingParam = &param
	} else {
	}
	var hasThemeSongParam *bool
	if query.Has("hasThemeSong") {
		param, err := parseBoolParameter(
			query.Get("hasThemeSong"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasThemeSongParam = &param
	} else {
	}
	var hasThemeVideoParam *bool
	if query.Has("hasThemeVideo") {
		param, err := parseBoolParameter(
			query.Get("hasThemeVideo"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasThemeVideoParam = &param
	} else {
	}
	var hasSubtitlesParam *bool
	if query.Has("hasSubtitles") {
		param, err := parseBoolParameter(
			query.Get("hasSubtitles"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasSubtitlesParam = &param
	} else {
	}
	var hasSpecialFeatureParam *bool
	if query.Has("hasSpecialFeature") {
		param, err := parseBoolParameter(
			query.Get("hasSpecialFeature"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasSpecialFeatureParam = &param
	} else {
	}
	var hasTrailerParam *bool
	if query.Has("hasTrailer") {
		param, err := parseBoolParameter(
			query.Get("hasTrailer"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasTrailerParam = &param
	} else {
	}
	var adjacentToParam *string
	if query.Has("adjacentTo") {
		param := query.Get("adjacentTo")

		adjacentToParam = &param
	} else {
	}
	var parentIndexNumberParam *int32
	if query.Has("parentIndexNumber") {
		param, err := parseNumericParameter[int32](
			query.Get("parentIndexNumber"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		parentIndexNumberParam = &param
	} else {
	}
	var hasParentalRatingParam *bool
	if query.Has("hasParentalRating") {
		param, err := parseBoolParameter(
			query.Get("hasParentalRating"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasParentalRatingParam = &param
	} else {
	}
	var isHdParam *bool
	if query.Has("isHd") {
		param, err := parseBoolParameter(
			query.Get("isHd"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isHdParam = &param
	} else {
	}
	var is4KParam *bool
	if query.Has("is4K") {
		param, err := parseBoolParameter(
			query.Get("is4K"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		is4KParam = &param
	} else {
	}
	var locationTypesParam []LocationType
	if query.Has("locationTypes") {
		paramSplits := strings.Split(query.Get("locationTypes"), ",")
		locationTypesParam = make([]LocationType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewLocationTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			locationTypesParam = append(locationTypesParam, paramEnum)
		}
	}
	var excludeLocationTypesParam []LocationType
	if query.Has("excludeLocationTypes") {
		paramSplits := strings.Split(query.Get("excludeLocationTypes"), ",")
		excludeLocationTypesParam = make([]LocationType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewLocationTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			excludeLocationTypesParam = append(excludeLocationTypesParam, paramEnum)
		}
	}
	var isMissingParam *bool
	if query.Has("isMissing") {
		param, err := parseBoolParameter(
			query.Get("isMissing"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isMissingParam = &param
	} else {
	}
	var isUnairedParam *bool
	if query.Has("isUnaired") {
		param, err := parseBoolParameter(
			query.Get("isUnaired"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isUnairedParam = &param
	} else {
	}
	var minCommunityRatingParam *float64
	if query.Has("minCommunityRating") {
		param, err := parseNumericParameter[float64](
			query.Get("minCommunityRating"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minCommunityRatingParam = &param
	} else {
	}
	var minCriticRatingParam *float64
	if query.Has("minCriticRating") {
		param, err := parseNumericParameter[float64](
			query.Get("minCriticRating"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minCriticRatingParam = &param
	} else {
	}
	var minPremiereDateParam *time.Time
	if query.Has("minPremiereDate"){
		param, err := parseTime(query.Get("minPremiereDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minPremiereDateParam = &param
	} else {
	}
	var minDateLastSavedParam *time.Time
	if query.Has("minDateLastSaved"){
		param, err := parseTime(query.Get("minDateLastSaved"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minDateLastSavedParam = &param
	} else {
	}
	var minDateLastSavedForUserParam *time.Time
	if query.Has("minDateLastSavedForUser"){
		param, err := parseTime(query.Get("minDateLastSavedForUser"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minDateLastSavedForUserParam = &param
	} else {
	}
	var maxPremiereDateParam *time.Time
	if query.Has("maxPremiereDate"){
		param, err := parseTime(query.Get("maxPremiereDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxPremiereDateParam = &param
	} else {
	}
	var hasOverviewParam *bool
	if query.Has("hasOverview") {
		param, err := parseBoolParameter(
			query.Get("hasOverview"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasOverviewParam = &param
	} else {
	}
	var hasImdbIdParam *bool
	if query.Has("hasImdbId") {
		param, err := parseBoolParameter(
			query.Get("hasImdbId"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasImdbIdParam = &param
	} else {
	}
	var hasTmdbIdParam *bool
	if query.Has("hasTmdbId") {
		param, err := parseBoolParameter(
			query.Get("hasTmdbId"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasTmdbIdParam = &param
	} else {
	}
	var hasTvdbIdParam *bool
	if query.Has("hasTvdbId") {
		param, err := parseBoolParameter(
			query.Get("hasTvdbId"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasTvdbIdParam = &param
	} else {
	}
	var excludeItemIdsParam []string
	if query.Has("excludeItemIds") {
		excludeItemIdsParam = strings.Split(query.Get("excludeItemIds"), ",")
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var recursiveParam *bool
	if query.Has("recursive") {
		param, err := parseBoolParameter(
			query.Get("recursive"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		recursiveParam = &param
	} else {
	}
	var searchTermParam *string
	if query.Has("searchTerm") {
		param := query.Get("searchTerm")

		searchTermParam = &param
	} else {
	}
	var sortOrderParam *string
	if query.Has("sortOrder") {
		param := query.Get("sortOrder")

		sortOrderParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var excludeItemTypesParam []string
	if query.Has("excludeItemTypes") {
		excludeItemTypesParam = strings.Split(query.Get("excludeItemTypes"), ",")
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	var mediaTypesParam []string
	if query.Has("mediaTypes") {
		mediaTypesParam = strings.Split(query.Get("mediaTypes"), ",")
	}
	var imageTypesParam []ImageType
	if query.Has("imageTypes") {
		paramSplits := strings.Split(query.Get("imageTypes"), ",")
		imageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			imageTypesParam = append(imageTypesParam, paramEnum)
		}
	}
	var sortByParam *string
	if query.Has("sortBy") {
		param := query.Get("sortBy")

		sortByParam = &param
	} else {
	}
	var isPlayedParam *bool
	if query.Has("isPlayed") {
		param, err := parseBoolParameter(
			query.Get("isPlayed"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isPlayedParam = &param
	} else {
	}
	var genresParam []string
	if query.Has("genres") {
		genresParam = strings.Split(query.Get("genres"), ",")
	}
	var officialRatingsParam []string
	if query.Has("officialRatings") {
		officialRatingsParam = strings.Split(query.Get("officialRatings"), ",")
	}
	var tagsParam []string
	if query.Has("tags") {
		tagsParam = strings.Split(query.Get("tags"), ",")
	}
	yearsParam, err := parseNumericArrayParameter[int32](
		query.Get("years"), ",", false,
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var personParam *string
	if query.Has("person") {
		param := query.Get("person")

		personParam = &param
	} else {
	}
	var personIdsParam []string
	if query.Has("personIds") {
		personIdsParam = strings.Split(query.Get("personIds"), ",")
	}
	var personTypesParam []string
	if query.Has("personTypes") {
		personTypesParam = strings.Split(query.Get("personTypes"), ",")
	}
	var studiosParam []string
	if query.Has("studios") {
		studiosParam = strings.Split(query.Get("studios"), ",")
	}
	var artistsParam []string
	if query.Has("artists") {
		artistsParam = strings.Split(query.Get("artists"), ",")
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var artistIdsParam []string
	if query.Has("artistIds") {
		artistIdsParam = strings.Split(query.Get("artistIds"), ",")
	}
	var albumArtistIdsParam []string
	if query.Has("albumArtistIds") {
		albumArtistIdsParam = strings.Split(query.Get("albumArtistIds"), ",")
	}
	var contributingArtistIdsParam []string
	if query.Has("contributingArtistIds") {
		contributingArtistIdsParam = strings.Split(query.Get("contributingArtistIds"), ",")
	}
	var albumsParam []string
	if query.Has("albums") {
		albumsParam = strings.Split(query.Get("albums"), ",")
	}
	var albumIdsParam []string
	if query.Has("albumIds") {
		albumIdsParam = strings.Split(query.Get("albumIds"), ",")
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	var videoTypesParam []VideoType
	if query.Has("videoTypes") {
		paramSplits := strings.Split(query.Get("videoTypes"), ",")
		videoTypesParam = make([]VideoType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewVideoTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			videoTypesParam = append(videoTypesParam, paramEnum)
		}
	}
	var minOfficialRatingParam *string
	if query.Has("minOfficialRating") {
		param := query.Get("minOfficialRating")

		minOfficialRatingParam = &param
	} else {
	}
	var isLockedParam *bool
	if query.Has("isLocked") {
		param, err := parseBoolParameter(
			query.Get("isLocked"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isLockedParam = &param
	} else {
	}
	var isPlaceHolderParam *bool
	if query.Has("isPlaceHolder") {
		param, err := parseBoolParameter(
			query.Get("isPlaceHolder"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isPlaceHolderParam = &param
	} else {
	}
	var hasOfficialRatingParam *bool
	if query.Has("hasOfficialRating") {
		param, err := parseBoolParameter(
			query.Get("hasOfficialRating"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasOfficialRatingParam = &param
	} else {
	}
	var collapseBoxSetItemsParam *bool
	if query.Has("collapseBoxSetItems") {
		param, err := parseBoolParameter(
			query.Get("collapseBoxSetItems"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		collapseBoxSetItemsParam = &param
	} else {
	}
	var minWidthParam *int32
	if query.Has("minWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("minWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minWidthParam = &param
	} else {
	}
	var minHeightParam *int32
	if query.Has("minHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("minHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minHeightParam = &param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var is3DParam *bool
	if query.Has("is3D") {
		param, err := parseBoolParameter(
			query.Get("is3D"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		is3DParam = &param
	} else {
	}
	var seriesStatusParam []SeriesStatus
	if query.Has("seriesStatus") {
		paramSplits := strings.Split(query.Get("seriesStatus"), ",")
		seriesStatusParam = make([]SeriesStatus, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewSeriesStatusFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			seriesStatusParam = append(seriesStatusParam, paramEnum)
		}
	}
	var nameStartsWithOrGreaterParam *string
	if query.Has("nameStartsWithOrGreater") {
		param := query.Get("nameStartsWithOrGreater")

		nameStartsWithOrGreaterParam = &param
	} else {
	}
	var nameStartsWithParam *string
	if query.Has("nameStartsWith") {
		param := query.Get("nameStartsWith")

		nameStartsWithParam = &param
	} else {
	}
	var nameLessThanParam *string
	if query.Has("nameLessThan") {
		param := query.Get("nameLessThan")

		nameLessThanParam = &param
	} else {
	}
	var studioIdsParam []string
	if query.Has("studioIds") {
		studioIdsParam = strings.Split(query.Get("studioIds"), ",")
	}
	var genreIdsParam []string
	if query.Has("genreIds") {
		genreIdsParam = strings.Split(query.Get("genreIds"), ",")
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
		var param bool = true
		enableImagesParam = &param
	}
	result, err := c.service.GetTrailers(r.Context(), userIdParam, maxOfficialRatingParam, hasThemeSongParam, hasThemeVideoParam, hasSubtitlesParam, hasSpecialFeatureParam, hasTrailerParam, adjacentToParam, parentIndexNumberParam, hasParentalRatingParam, isHdParam, is4KParam, locationTypesParam, excludeLocationTypesParam, isMissingParam, isUnairedParam, minCommunityRatingParam, minCriticRatingParam, minPremiereDateParam, minDateLastSavedParam, minDateLastSavedForUserParam, maxPremiereDateParam, hasOverviewParam, hasImdbIdParam, hasTmdbIdParam, hasTvdbIdParam, excludeItemIdsParam, startIndexParam, limitParam, recursiveParam, searchTermParam, sortOrderParam, parentIdParam, fieldsParam, excludeItemTypesParam, filtersParam, isFavoriteParam, mediaTypesParam, imageTypesParam, sortByParam, isPlayedParam, genresParam, officialRatingsParam, tagsParam, yearsParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam, personParam, personIdsParam, personTypesParam, studiosParam, artistsParam, excludeArtistIdsParam, artistIdsParam, albumArtistIdsParam, contributingArtistIdsParam, albumsParam, albumIdsParam, idsParam, videoTypesParam, minOfficialRatingParam, isLockedParam, isPlaceHolderParam, hasOfficialRatingParam, collapseBoxSetItemsParam, minWidthParam, minHeightParam, maxWidthParam, maxHeightParam, is3DParam, seriesStatusParam, nameStartsWithOrGreaterParam, nameStartsWithParam, nameLessThanParam, studioIdsParam, genreIdsParam, enableTotalRecordCountParam, enableImagesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
