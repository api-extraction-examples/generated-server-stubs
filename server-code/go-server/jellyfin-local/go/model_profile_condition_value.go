/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ProfileConditionValue string

// List of ProfileConditionValue
const (
	AUDIO_CHANNELS ProfileConditionValue = "AudioChannels"
	AUDIO_BITRATE ProfileConditionValue = "AudioBitrate"
	AUDIO_PROFILE ProfileConditionValue = "AudioProfile"
	WIDTH ProfileConditionValue = "Width"
	HEIGHT ProfileConditionValue = "Height"
	HAS64_BIT_OFFSETS ProfileConditionValue = "Has64BitOffsets"
	PACKET_LENGTH ProfileConditionValue = "PacketLength"
	VIDEO_BIT_DEPTH ProfileConditionValue = "VideoBitDepth"
	VIDEO_BITRATE ProfileConditionValue = "VideoBitrate"
	VIDEO_FRAMERATE ProfileConditionValue = "VideoFramerate"
	VIDEO_LEVEL ProfileConditionValue = "VideoLevel"
	VIDEO_PROFILE ProfileConditionValue = "VideoProfile"
	VIDEO_TIMESTAMP ProfileConditionValue = "VideoTimestamp"
	IS_ANAMORPHIC ProfileConditionValue = "IsAnamorphic"
	REF_FRAMES ProfileConditionValue = "RefFrames"
	NUM_AUDIO_STREAMS ProfileConditionValue = "NumAudioStreams"
	NUM_VIDEO_STREAMS ProfileConditionValue = "NumVideoStreams"
	IS_SECONDARY_AUDIO ProfileConditionValue = "IsSecondaryAudio"
	VIDEO_CODEC_TAG ProfileConditionValue = "VideoCodecTag"
	IS_AVC ProfileConditionValue = "IsAvc"
	IS_INTERLACED ProfileConditionValue = "IsInterlaced"
	AUDIO_SAMPLE_RATE ProfileConditionValue = "AudioSampleRate"
	AUDIO_BIT_DEPTH ProfileConditionValue = "AudioBitDepth"
)

// AllowedProfileConditionValueEnumValues is all the allowed values of ProfileConditionValue enum
var AllowedProfileConditionValueEnumValues = []ProfileConditionValue{
	"AudioChannels",
	"AudioBitrate",
	"AudioProfile",
	"Width",
	"Height",
	"Has64BitOffsets",
	"PacketLength",
	"VideoBitDepth",
	"VideoBitrate",
	"VideoFramerate",
	"VideoLevel",
	"VideoProfile",
	"VideoTimestamp",
	"IsAnamorphic",
	"RefFrames",
	"NumAudioStreams",
	"NumVideoStreams",
	"IsSecondaryAudio",
	"VideoCodecTag",
	"IsAvc",
	"IsInterlaced",
	"AudioSampleRate",
	"AudioBitDepth",
}

// validProfileConditionValueEnumValue provides a map of ProfileConditionValues for fast verification of use input
var validProfileConditionValueEnumValues = map[ProfileConditionValue]struct{}{
	"AudioChannels": {},
	"AudioBitrate": {},
	"AudioProfile": {},
	"Width": {},
	"Height": {},
	"Has64BitOffsets": {},
	"PacketLength": {},
	"VideoBitDepth": {},
	"VideoBitrate": {},
	"VideoFramerate": {},
	"VideoLevel": {},
	"VideoProfile": {},
	"VideoTimestamp": {},
	"IsAnamorphic": {},
	"RefFrames": {},
	"NumAudioStreams": {},
	"NumVideoStreams": {},
	"IsSecondaryAudio": {},
	"VideoCodecTag": {},
	"IsAvc": {},
	"IsInterlaced": {},
	"AudioSampleRate": {},
	"AudioBitDepth": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ProfileConditionValue) IsValid() bool {
	_, ok := validProfileConditionValueEnumValues[v]
	return ok
}

// NewProfileConditionValueFromValue returns a pointer to a valid ProfileConditionValue
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewProfileConditionValueFromValue(v string) (ProfileConditionValue, error) {
	ev := ProfileConditionValue(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ProfileConditionValue: valid values are %v", v, AllowedProfileConditionValueEnumValues)
	}
}



// AssertProfileConditionValueRequired checks if the required fields are not zero-ed
func AssertProfileConditionValueRequired(obj ProfileConditionValue) error {
	return nil
}

// AssertProfileConditionValueConstraints checks if the values respects the defined constraints
func AssertProfileConditionValueConstraints(obj ProfileConditionValue) error {
	return nil
}
