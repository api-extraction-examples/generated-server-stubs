/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// VideoType : Enum VideoType.
type VideoType string

// List of VideoType
const (
	VIDEO_FILE VideoType = "VideoFile"
	ISO VideoType = "Iso"
	DVD VideoType = "Dvd"
	BLU_RAY VideoType = "BluRay"
)

// AllowedVideoTypeEnumValues is all the allowed values of VideoType enum
var AllowedVideoTypeEnumValues = []VideoType{
	"VideoFile",
	"Iso",
	"Dvd",
	"BluRay",
}

// validVideoTypeEnumValue provides a map of VideoTypes for fast verification of use input
var validVideoTypeEnumValues = map[VideoType]struct{}{
	"VideoFile": {},
	"Iso": {},
	"Dvd": {},
	"BluRay": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VideoType) IsValid() bool {
	_, ok := validVideoTypeEnumValues[v]
	return ok
}

// NewVideoTypeFromValue returns a pointer to a valid VideoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVideoTypeFromValue(v string) (VideoType, error) {
	ev := VideoType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for VideoType: valid values are %v", v, AllowedVideoTypeEnumValues)
	}
}



// AssertVideoTypeRequired checks if the required fields are not zero-ed
func AssertVideoTypeRequired(obj VideoType) error {
	return nil
}

// AssertVideoTypeConstraints checks if the values respects the defined constraints
func AssertVideoTypeConstraints(obj VideoType) error {
	return nil
}
