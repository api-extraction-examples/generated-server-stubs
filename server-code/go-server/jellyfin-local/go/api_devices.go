/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DevicesAPIController binds http requests to an api service and writes the service results to the http response
type DevicesAPIController struct {
	service DevicesAPIServicer
	errorHandler ErrorHandler
}

// DevicesAPIOption for how the controller is set up.
type DevicesAPIOption func(*DevicesAPIController)

// WithDevicesAPIErrorHandler inject ErrorHandler into controller
func WithDevicesAPIErrorHandler(h ErrorHandler) DevicesAPIOption {
	return func(c *DevicesAPIController) {
		c.errorHandler = h
	}
}

// NewDevicesAPIController creates a default api controller
func NewDevicesAPIController(s DevicesAPIServicer, opts ...DevicesAPIOption) Router {
	controller := &DevicesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DevicesAPIController
func (c *DevicesAPIController) Routes() Routes {
	return Routes{
		"DeleteDevice": Route{
			strings.ToUpper("Delete"),
			"/Devices",
			c.DeleteDevice,
		},
		"GetDeviceInfo": Route{
			strings.ToUpper("Get"),
			"/Devices/Info",
			c.GetDeviceInfo,
		},
		"GetDeviceOptions": Route{
			strings.ToUpper("Get"),
			"/Devices/Options",
			c.GetDeviceOptions,
		},
		"GetDevices": Route{
			strings.ToUpper("Get"),
			"/Devices",
			c.GetDevices,
		},
		"UpdateDeviceOptions": Route{
			strings.ToUpper("Post"),
			"/Devices/Options",
			c.UpdateDeviceOptions,
		},
	}
}

// DeleteDevice - Deletes a device.
func (c *DevicesAPIController) DeleteDevice(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "id"}, nil)
		return
	}
	result, err := c.service.DeleteDevice(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeviceInfo - Get info for a device.
func (c *DevicesAPIController) GetDeviceInfo(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "id"}, nil)
		return
	}
	result, err := c.service.GetDeviceInfo(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDeviceOptions - Get options for a device.
func (c *DevicesAPIController) GetDeviceOptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "id"}, nil)
		return
	}
	result, err := c.service.GetDeviceOptions(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDevices - Get Devices.
func (c *DevicesAPIController) GetDevices(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var supportsSyncParam *bool
	if query.Has("supportsSync") {
		param, err := parseBoolParameter(
			query.Get("supportsSync"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsSyncParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetDevices(r.Context(), supportsSyncParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateDeviceOptions - Update device options.
func (c *DevicesAPIController) UpdateDeviceOptions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam string
	if query.Has("id") {
		param := query.Get("id")

		idParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "id"}, nil)
		return
	}
	deviceOptionsParam := DeviceOptions{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceOptionsParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceOptionsRequired(deviceOptionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceOptionsConstraints(deviceOptionsParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateDeviceOptions(r.Context(), idParam, deviceOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
