/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type DayPattern string

// List of DayPattern
const (
	DAILY DayPattern = "Daily"
	WEEKDAYS DayPattern = "Weekdays"
	WEEKENDS DayPattern = "Weekends"
)

// AllowedDayPatternEnumValues is all the allowed values of DayPattern enum
var AllowedDayPatternEnumValues = []DayPattern{
	"Daily",
	"Weekdays",
	"Weekends",
}

// validDayPatternEnumValue provides a map of DayPatterns for fast verification of use input
var validDayPatternEnumValues = map[DayPattern]struct{}{
	"Daily": {},
	"Weekdays": {},
	"Weekends": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DayPattern) IsValid() bool {
	_, ok := validDayPatternEnumValues[v]
	return ok
}

// NewDayPatternFromValue returns a pointer to a valid DayPattern
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDayPatternFromValue(v string) (DayPattern, error) {
	ev := DayPattern(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for DayPattern: valid values are %v", v, AllowedDayPatternEnumValues)
	}
}



// AssertDayPatternRequired checks if the required fields are not zero-ed
func AssertDayPatternRequired(obj DayPattern) error {
	return nil
}

// AssertDayPatternConstraints checks if the values respects the defined constraints
func AssertDayPatternConstraints(obj DayPattern) error {
	return nil
}
