/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// UniversalAudioAPIController binds http requests to an api service and writes the service results to the http response
type UniversalAudioAPIController struct {
	service UniversalAudioAPIServicer
	errorHandler ErrorHandler
}

// UniversalAudioAPIOption for how the controller is set up.
type UniversalAudioAPIOption func(*UniversalAudioAPIController)

// WithUniversalAudioAPIErrorHandler inject ErrorHandler into controller
func WithUniversalAudioAPIErrorHandler(h ErrorHandler) UniversalAudioAPIOption {
	return func(c *UniversalAudioAPIController) {
		c.errorHandler = h
	}
}

// NewUniversalAudioAPIController creates a default api controller
func NewUniversalAudioAPIController(s UniversalAudioAPIServicer, opts ...UniversalAudioAPIOption) Router {
	controller := &UniversalAudioAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UniversalAudioAPIController
func (c *UniversalAudioAPIController) Routes() Routes {
	return Routes{
		"GetUniversalAudioStream": Route{
			strings.ToUpper("Get"),
			"/Audio/{itemId}/universal",
			c.GetUniversalAudioStream,
		},
		"HeadUniversalAudioStream": Route{
			strings.ToUpper("Head"),
			"/Audio/{itemId}/universal",
			c.HeadUniversalAudioStream,
		},
	}
}

// GetUniversalAudioStream - Gets an audio stream.
func (c *UniversalAudioAPIController) GetUniversalAudioStream(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var containerParam []string
	if query.Has("container") {
		containerParam = strings.Split(query.Get("container"), ",")
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var transcodingAudioChannelsParam *int32
	if query.Has("transcodingAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingAudioChannelsParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var transcodingContainerParam *string
	if query.Has("transcodingContainer") {
		param := query.Get("transcodingContainer")

		transcodingContainerParam = &param
	} else {
	}
	var transcodingProtocolParam *string
	if query.Has("transcodingProtocol") {
		param := query.Get("transcodingProtocol")

		transcodingProtocolParam = &param
	} else {
	}
	var maxAudioSampleRateParam *int32
	if query.Has("maxAudioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var enableRemoteMediaParam *bool
	if query.Has("enableRemoteMedia") {
		param, err := parseBoolParameter(
			query.Get("enableRemoteMedia"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableRemoteMediaParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = param
	} else {
	}
	var enableRedirectionParam bool
	if query.Has("enableRedirection") {
		param, err := parseBoolParameter(
			query.Get("enableRedirection"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableRedirectionParam = param
	} else {
		var param bool = true
		enableRedirectionParam = param
	}
	result, err := c.service.GetUniversalAudioStream(r.Context(), itemIdParam, containerParam, mediaSourceIdParam, deviceIdParam, userIdParam, audioCodecParam, maxAudioChannelsParam, transcodingAudioChannelsParam, maxStreamingBitrateParam, audioBitRateParam, startTimeTicksParam, transcodingContainerParam, transcodingProtocolParam, maxAudioSampleRateParam, maxAudioBitDepthParam, enableRemoteMediaParam, breakOnNonKeyFramesParam, enableRedirectionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadUniversalAudioStream - Gets an audio stream.
func (c *UniversalAudioAPIController) HeadUniversalAudioStream(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var containerParam []string
	if query.Has("container") {
		containerParam = strings.Split(query.Get("container"), ",")
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var transcodingAudioChannelsParam *int32
	if query.Has("transcodingAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingAudioChannelsParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var transcodingContainerParam *string
	if query.Has("transcodingContainer") {
		param := query.Get("transcodingContainer")

		transcodingContainerParam = &param
	} else {
	}
	var transcodingProtocolParam *string
	if query.Has("transcodingProtocol") {
		param := query.Get("transcodingProtocol")

		transcodingProtocolParam = &param
	} else {
	}
	var maxAudioSampleRateParam *int32
	if query.Has("maxAudioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var enableRemoteMediaParam *bool
	if query.Has("enableRemoteMedia") {
		param, err := parseBoolParameter(
			query.Get("enableRemoteMedia"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableRemoteMediaParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = param
	} else {
	}
	var enableRedirectionParam bool
	if query.Has("enableRedirection") {
		param, err := parseBoolParameter(
			query.Get("enableRedirection"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableRedirectionParam = param
	} else {
		var param bool = true
		enableRedirectionParam = param
	}
	result, err := c.service.HeadUniversalAudioStream(r.Context(), itemIdParam, containerParam, mediaSourceIdParam, deviceIdParam, userIdParam, audioCodecParam, maxAudioChannelsParam, transcodingAudioChannelsParam, maxStreamingBitrateParam, audioBitRateParam, startTimeTicksParam, transcodingContainerParam, transcodingProtocolParam, maxAudioSampleRateParam, maxAudioBitDepthParam, enableRemoteMediaParam, breakOnNonKeyFramesParam, enableRedirectionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
