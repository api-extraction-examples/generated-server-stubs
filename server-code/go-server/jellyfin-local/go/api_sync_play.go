/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SyncPlayAPIController binds http requests to an api service and writes the service results to the http response
type SyncPlayAPIController struct {
	service SyncPlayAPIServicer
	errorHandler ErrorHandler
}

// SyncPlayAPIOption for how the controller is set up.
type SyncPlayAPIOption func(*SyncPlayAPIController)

// WithSyncPlayAPIErrorHandler inject ErrorHandler into controller
func WithSyncPlayAPIErrorHandler(h ErrorHandler) SyncPlayAPIOption {
	return func(c *SyncPlayAPIController) {
		c.errorHandler = h
	}
}

// NewSyncPlayAPIController creates a default api controller
func NewSyncPlayAPIController(s SyncPlayAPIServicer, opts ...SyncPlayAPIOption) Router {
	controller := &SyncPlayAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SyncPlayAPIController
func (c *SyncPlayAPIController) Routes() Routes {
	return Routes{
		"SyncPlayBuffering": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Buffering",
			c.SyncPlayBuffering,
		},
		"SyncPlayCreateGroup": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/New",
			c.SyncPlayCreateGroup,
		},
		"SyncPlayGetGroups": Route{
			strings.ToUpper("Get"),
			"/SyncPlay/List",
			c.SyncPlayGetGroups,
		},
		"SyncPlayJoinGroup": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Join",
			c.SyncPlayJoinGroup,
		},
		"SyncPlayLeaveGroup": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Leave",
			c.SyncPlayLeaveGroup,
		},
		"SyncPlayMovePlaylistItem": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/MovePlaylistItem",
			c.SyncPlayMovePlaylistItem,
		},
		"SyncPlayNextItem": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/NextItem",
			c.SyncPlayNextItem,
		},
		"SyncPlayPause": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Pause",
			c.SyncPlayPause,
		},
		"SyncPlayPing": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Ping",
			c.SyncPlayPing,
		},
		"SyncPlayPreviousItem": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/PreviousItem",
			c.SyncPlayPreviousItem,
		},
		"SyncPlayQueue": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Queue",
			c.SyncPlayQueue,
		},
		"SyncPlayReady": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Ready",
			c.SyncPlayReady,
		},
		"SyncPlayRemoveFromPlaylist": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/RemoveFromPlaylist",
			c.SyncPlayRemoveFromPlaylist,
		},
		"SyncPlaySeek": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Seek",
			c.SyncPlaySeek,
		},
		"SyncPlaySetIgnoreWait": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/SetIgnoreWait",
			c.SyncPlaySetIgnoreWait,
		},
		"SyncPlaySetNewQueue": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/SetNewQueue",
			c.SyncPlaySetNewQueue,
		},
		"SyncPlaySetPlaylistItem": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/SetPlaylistItem",
			c.SyncPlaySetPlaylistItem,
		},
		"SyncPlaySetRepeatMode": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/SetRepeatMode",
			c.SyncPlaySetRepeatMode,
		},
		"SyncPlaySetShuffleMode": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/SetShuffleMode",
			c.SyncPlaySetShuffleMode,
		},
		"SyncPlayStop": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Stop",
			c.SyncPlayStop,
		},
		"SyncPlayUnpause": Route{
			strings.ToUpper("Post"),
			"/SyncPlay/Unpause",
			c.SyncPlayUnpause,
		},
	}
}

// SyncPlayBuffering - Notify SyncPlay group that member is buffering.
func (c *SyncPlayAPIController) SyncPlayBuffering(w http.ResponseWriter, r *http.Request) {
	bufferRequestDtoParam := BufferRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bufferRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBufferRequestDtoRequired(bufferRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBufferRequestDtoConstraints(bufferRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayBuffering(r.Context(), bufferRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayCreateGroup - Create a new SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayCreateGroup(w http.ResponseWriter, r *http.Request) {
	newGroupRequestDtoParam := NewGroupRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&newGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNewGroupRequestDtoRequired(newGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNewGroupRequestDtoConstraints(newGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayCreateGroup(r.Context(), newGroupRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayGetGroups - Gets all SyncPlay groups.
func (c *SyncPlayAPIController) SyncPlayGetGroups(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SyncPlayGetGroups(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayJoinGroup - Join an existing SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayJoinGroup(w http.ResponseWriter, r *http.Request) {
	joinGroupRequestDtoParam := JoinGroupRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&joinGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertJoinGroupRequestDtoRequired(joinGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertJoinGroupRequestDtoConstraints(joinGroupRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayJoinGroup(r.Context(), joinGroupRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayLeaveGroup - Leave the joined SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayLeaveGroup(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SyncPlayLeaveGroup(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayMovePlaylistItem - Request to move an item in the playlist in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayMovePlaylistItem(w http.ResponseWriter, r *http.Request) {
	movePlaylistItemRequestDtoParam := MovePlaylistItemRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&movePlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMovePlaylistItemRequestDtoRequired(movePlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMovePlaylistItemRequestDtoConstraints(movePlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayMovePlaylistItem(r.Context(), movePlaylistItemRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayNextItem - Request next item in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayNextItem(w http.ResponseWriter, r *http.Request) {
	nextItemRequestDtoParam := NextItemRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&nextItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertNextItemRequestDtoRequired(nextItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertNextItemRequestDtoConstraints(nextItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayNextItem(r.Context(), nextItemRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayPause - Request pause in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayPause(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SyncPlayPause(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayPing - Update session ping.
func (c *SyncPlayAPIController) SyncPlayPing(w http.ResponseWriter, r *http.Request) {
	pingRequestDtoParam := PingRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pingRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPingRequestDtoRequired(pingRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPingRequestDtoConstraints(pingRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayPing(r.Context(), pingRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayPreviousItem - Request previous item in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayPreviousItem(w http.ResponseWriter, r *http.Request) {
	previousItemRequestDtoParam := PreviousItemRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&previousItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPreviousItemRequestDtoRequired(previousItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPreviousItemRequestDtoConstraints(previousItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayPreviousItem(r.Context(), previousItemRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayQueue - Request to queue items to the playlist of a SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayQueue(w http.ResponseWriter, r *http.Request) {
	queueRequestDtoParam := QueueRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&queueRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertQueueRequestDtoRequired(queueRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertQueueRequestDtoConstraints(queueRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayQueue(r.Context(), queueRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayReady - Notify SyncPlay group that member is ready for playback.
func (c *SyncPlayAPIController) SyncPlayReady(w http.ResponseWriter, r *http.Request) {
	readyRequestDtoParam := ReadyRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&readyRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertReadyRequestDtoRequired(readyRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertReadyRequestDtoConstraints(readyRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayReady(r.Context(), readyRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayRemoveFromPlaylist - Request to remove items from the playlist in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayRemoveFromPlaylist(w http.ResponseWriter, r *http.Request) {
	removeFromPlaylistRequestDtoParam := RemoveFromPlaylistRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&removeFromPlaylistRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoveFromPlaylistRequestDtoRequired(removeFromPlaylistRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoveFromPlaylistRequestDtoConstraints(removeFromPlaylistRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlayRemoveFromPlaylist(r.Context(), removeFromPlaylistRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySeek - Request seek in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlaySeek(w http.ResponseWriter, r *http.Request) {
	seekRequestDtoParam := SeekRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&seekRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSeekRequestDtoRequired(seekRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSeekRequestDtoConstraints(seekRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySeek(r.Context(), seekRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySetIgnoreWait - Request SyncPlay group to ignore member during group-wait.
func (c *SyncPlayAPIController) SyncPlaySetIgnoreWait(w http.ResponseWriter, r *http.Request) {
	ignoreWaitRequestDtoParam := IgnoreWaitRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&ignoreWaitRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertIgnoreWaitRequestDtoRequired(ignoreWaitRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertIgnoreWaitRequestDtoConstraints(ignoreWaitRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySetIgnoreWait(r.Context(), ignoreWaitRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySetNewQueue - Request to set new playlist in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlaySetNewQueue(w http.ResponseWriter, r *http.Request) {
	playRequestDtoParam := PlayRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&playRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPlayRequestDtoRequired(playRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPlayRequestDtoConstraints(playRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySetNewQueue(r.Context(), playRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySetPlaylistItem - Request to change playlist item in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlaySetPlaylistItem(w http.ResponseWriter, r *http.Request) {
	setPlaylistItemRequestDtoParam := SetPlaylistItemRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setPlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetPlaylistItemRequestDtoRequired(setPlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetPlaylistItemRequestDtoConstraints(setPlaylistItemRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySetPlaylistItem(r.Context(), setPlaylistItemRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySetRepeatMode - Request to set repeat mode in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlaySetRepeatMode(w http.ResponseWriter, r *http.Request) {
	setRepeatModeRequestDtoParam := SetRepeatModeRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setRepeatModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetRepeatModeRequestDtoRequired(setRepeatModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetRepeatModeRequestDtoConstraints(setRepeatModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySetRepeatMode(r.Context(), setRepeatModeRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlaySetShuffleMode - Request to set shuffle mode in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlaySetShuffleMode(w http.ResponseWriter, r *http.Request) {
	setShuffleModeRequestDtoParam := SetShuffleModeRequestDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&setShuffleModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSetShuffleModeRequestDtoRequired(setShuffleModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSetShuffleModeRequestDtoConstraints(setShuffleModeRequestDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SyncPlaySetShuffleMode(r.Context(), setShuffleModeRequestDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayStop - Request stop in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayStop(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SyncPlayStop(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SyncPlayUnpause - Request unpause in SyncPlay group.
func (c *SyncPlayAPIController) SyncPlayUnpause(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.SyncPlayUnpause(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
