/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// InstantMixAPIController binds http requests to an api service and writes the service results to the http response
type InstantMixAPIController struct {
	service InstantMixAPIServicer
	errorHandler ErrorHandler
}

// InstantMixAPIOption for how the controller is set up.
type InstantMixAPIOption func(*InstantMixAPIController)

// WithInstantMixAPIErrorHandler inject ErrorHandler into controller
func WithInstantMixAPIErrorHandler(h ErrorHandler) InstantMixAPIOption {
	return func(c *InstantMixAPIController) {
		c.errorHandler = h
	}
}

// NewInstantMixAPIController creates a default api controller
func NewInstantMixAPIController(s InstantMixAPIServicer, opts ...InstantMixAPIOption) Router {
	controller := &InstantMixAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the InstantMixAPIController
func (c *InstantMixAPIController) Routes() Routes {
	return Routes{
		"GetInstantMixFromAlbum": Route{
			strings.ToUpper("Get"),
			"/Albums/{id}/InstantMix",
			c.GetInstantMixFromAlbum,
		},
		"GetInstantMixFromArtists": Route{
			strings.ToUpper("Get"),
			"/Artists/{id}/InstantMix",
			c.GetInstantMixFromArtists,
		},
		"GetInstantMixFromItem": Route{
			strings.ToUpper("Get"),
			"/Items/{id}/InstantMix",
			c.GetInstantMixFromItem,
		},
		"GetInstantMixFromMusicGenre": Route{
			strings.ToUpper("Get"),
			"/MusicGenres/{name}/InstantMix",
			c.GetInstantMixFromMusicGenre,
		},
		"GetInstantMixFromMusicGenres": Route{
			strings.ToUpper("Get"),
			"/MusicGenres/{id}/InstantMix",
			c.GetInstantMixFromMusicGenres,
		},
		"GetInstantMixFromPlaylist": Route{
			strings.ToUpper("Get"),
			"/Playlists/{id}/InstantMix",
			c.GetInstantMixFromPlaylist,
		},
		"GetInstantMixFromSong": Route{
			strings.ToUpper("Get"),
			"/Songs/{id}/InstantMix",
			c.GetInstantMixFromSong,
		},
	}
}

// GetInstantMixFromAlbum - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromAlbum(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromAlbum(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromArtists - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromArtists(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromArtists(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromItem - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromItem(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromMusicGenre - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromMusicGenre(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromMusicGenre(r.Context(), nameParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromMusicGenres - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromMusicGenres(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromMusicGenres(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromPlaylist - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromPlaylist(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetInstantMixFromSong - Creates an instant playlist based on a given song.
func (c *InstantMixAPIController) GetInstantMixFromSong(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetInstantMixFromSong(r.Context(), idParam, userIdParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
