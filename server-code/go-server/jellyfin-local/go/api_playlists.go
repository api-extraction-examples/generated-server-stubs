/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// PlaylistsAPIController binds http requests to an api service and writes the service results to the http response
type PlaylistsAPIController struct {
	service PlaylistsAPIServicer
	errorHandler ErrorHandler
}

// PlaylistsAPIOption for how the controller is set up.
type PlaylistsAPIOption func(*PlaylistsAPIController)

// WithPlaylistsAPIErrorHandler inject ErrorHandler into controller
func WithPlaylistsAPIErrorHandler(h ErrorHandler) PlaylistsAPIOption {
	return func(c *PlaylistsAPIController) {
		c.errorHandler = h
	}
}

// NewPlaylistsAPIController creates a default api controller
func NewPlaylistsAPIController(s PlaylistsAPIServicer, opts ...PlaylistsAPIOption) Router {
	controller := &PlaylistsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PlaylistsAPIController
func (c *PlaylistsAPIController) Routes() Routes {
	return Routes{
		"AddToPlaylist": Route{
			strings.ToUpper("Post"),
			"/Playlists/{playlistId}/Items",
			c.AddToPlaylist,
		},
		"CreatePlaylist": Route{
			strings.ToUpper("Post"),
			"/Playlists",
			c.CreatePlaylist,
		},
		"GetPlaylistItems": Route{
			strings.ToUpper("Get"),
			"/Playlists/{playlistId}/Items",
			c.GetPlaylistItems,
		},
		"MoveItem": Route{
			strings.ToUpper("Post"),
			"/Playlists/{playlistId}/Items/{itemId}/Move/{newIndex}",
			c.MoveItem,
		},
		"RemoveFromPlaylist": Route{
			strings.ToUpper("Delete"),
			"/Playlists/{playlistId}/Items",
			c.RemoveFromPlaylist,
		},
	}
}

// AddToPlaylist - Adds items to a playlist.
func (c *PlaylistsAPIController) AddToPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.AddToPlaylist(r.Context(), playlistIdParam, idsParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreatePlaylist - Creates a new playlist.
func (c *PlaylistsAPIController) CreatePlaylist(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var mediaTypeParam *string
	if query.Has("mediaType") {
		param := query.Get("mediaType")

		mediaTypeParam = &param
	} else {
	}
	createPlaylistDtoParam := CreatePlaylistDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createPlaylistDtoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreatePlaylistDtoRequired(createPlaylistDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreatePlaylistDtoConstraints(createPlaylistDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePlaylist(r.Context(), nameParam, idsParam, userIdParam, mediaTypeParam, createPlaylistDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlaylistItems - Gets the original items of a playlist.
func (c *PlaylistsAPIController) GetPlaylistItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	var userIdParam string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "userId"}, nil)
		return
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	result, err := c.service.GetPlaylistItems(r.Context(), playlistIdParam, userIdParam, startIndexParam, limitParam, fieldsParam, enableImagesParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MoveItem - Moves a playlist item.
func (c *PlaylistsAPIController) MoveItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	newIndexParam, err := parseNumericParameter[int32](
		params["newIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.MoveItem(r.Context(), playlistIdParam, itemIdParam, newIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveFromPlaylist - Removes items from a playlist.
func (c *PlaylistsAPIController) RemoveFromPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	var entryIdsParam []string
	if query.Has("entryIds") {
		entryIdsParam = strings.Split(query.Get("entryIds"), ",")
	}
	result, err := c.service.RemoveFromPlaylist(r.Context(), playlistIdParam, entryIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
