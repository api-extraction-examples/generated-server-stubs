/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// UserAPIController binds http requests to an api service and writes the service results to the http response
type UserAPIController struct {
	service UserAPIServicer
	errorHandler ErrorHandler
}

// UserAPIOption for how the controller is set up.
type UserAPIOption func(*UserAPIController)

// WithUserAPIErrorHandler inject ErrorHandler into controller
func WithUserAPIErrorHandler(h ErrorHandler) UserAPIOption {
	return func(c *UserAPIController) {
		c.errorHandler = h
	}
}

// NewUserAPIController creates a default api controller
func NewUserAPIController(s UserAPIServicer, opts ...UserAPIOption) Router {
	controller := &UserAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserAPIController
func (c *UserAPIController) Routes() Routes {
	return Routes{
		"AuthenticateUser": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Authenticate",
			c.AuthenticateUser,
		},
		"AuthenticateUserByName": Route{
			strings.ToUpper("Post"),
			"/Users/AuthenticateByName",
			c.AuthenticateUserByName,
		},
		"AuthenticateWithQuickConnect": Route{
			strings.ToUpper("Post"),
			"/Users/AuthenticateWithQuickConnect",
			c.AuthenticateWithQuickConnect,
		},
		"CreateUserByName": Route{
			strings.ToUpper("Post"),
			"/Users/New",
			c.CreateUserByName,
		},
		"DeleteUser": Route{
			strings.ToUpper("Delete"),
			"/Users/{userId}",
			c.DeleteUser,
		},
		"ForgotPassword": Route{
			strings.ToUpper("Post"),
			"/Users/ForgotPassword",
			c.ForgotPassword,
		},
		"ForgotPasswordPin": Route{
			strings.ToUpper("Post"),
			"/Users/ForgotPassword/Pin",
			c.ForgotPasswordPin,
		},
		"GetCurrentUser": Route{
			strings.ToUpper("Get"),
			"/Users/Me",
			c.GetCurrentUser,
		},
		"GetPublicUsers": Route{
			strings.ToUpper("Get"),
			"/Users/Public",
			c.GetPublicUsers,
		},
		"GetUserById": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}",
			c.GetUserById,
		},
		"GetUsers": Route{
			strings.ToUpper("Get"),
			"/Users",
			c.GetUsers,
		},
		"UpdateUser": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}",
			c.UpdateUser,
		},
		"UpdateUserConfiguration": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Configuration",
			c.UpdateUserConfiguration,
		},
		"UpdateUserEasyPassword": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/EasyPassword",
			c.UpdateUserEasyPassword,
		},
		"UpdateUserPassword": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Password",
			c.UpdateUserPassword,
		},
		"UpdateUserPolicy": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Policy",
			c.UpdateUserPolicy,
		},
	}
}

// AuthenticateUser - Authenticates a user.
func (c *UserAPIController) AuthenticateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var pwParam string
	if query.Has("pw") {
		param := query.Get("pw")

		pwParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "pw"}, nil)
		return
	}
	var passwordParam *string
	if query.Has("password") {
		param := query.Get("password")

		passwordParam = &param
	} else {
	}
	result, err := c.service.AuthenticateUser(r.Context(), userIdParam, pwParam, passwordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AuthenticateUserByName - Authenticates a user by name.
func (c *UserAPIController) AuthenticateUserByName(w http.ResponseWriter, r *http.Request) {
	authenticateUserByNameParam := AuthenticateUserByName{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&authenticateUserByNameParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAuthenticateUserByNameRequired(authenticateUserByNameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAuthenticateUserByNameConstraints(authenticateUserByNameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthenticateUserByName(r.Context(), authenticateUserByNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// AuthenticateWithQuickConnect - Authenticates a user with quick connect.
func (c *UserAPIController) AuthenticateWithQuickConnect(w http.ResponseWriter, r *http.Request) {
	quickConnectDtoParam := QuickConnectDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&quickConnectDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertQuickConnectDtoRequired(quickConnectDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertQuickConnectDtoConstraints(quickConnectDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AuthenticateWithQuickConnect(r.Context(), quickConnectDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateUserByName - Creates a user.
func (c *UserAPIController) CreateUserByName(w http.ResponseWriter, r *http.Request) {
	createUserByNameParam := CreateUserByName{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&createUserByNameParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCreateUserByNameRequired(createUserByNameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCreateUserByNameConstraints(createUserByNameParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateUserByName(r.Context(), createUserByNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUser - Deletes a user.
func (c *UserAPIController) DeleteUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.DeleteUser(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ForgotPassword - Initiates the forgot password process for a local user.
func (c *UserAPIController) ForgotPassword(w http.ResponseWriter, r *http.Request) {
	forgotPasswordDtoParam := ForgotPasswordDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&forgotPasswordDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertForgotPasswordDtoRequired(forgotPasswordDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertForgotPasswordDtoConstraints(forgotPasswordDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ForgotPassword(r.Context(), forgotPasswordDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ForgotPasswordPin - Redeems a forgot password pin.
func (c *UserAPIController) ForgotPasswordPin(w http.ResponseWriter, r *http.Request) {
	bodyParam := string{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.ForgotPasswordPin(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCurrentUser - Gets the user based on auth token.
func (c *UserAPIController) GetCurrentUser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCurrentUser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPublicUsers - Gets a list of publicly visible users for display on a login screen.
func (c *UserAPIController) GetPublicUsers(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPublicUsers(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserById - Gets a user by Id.
func (c *UserAPIController) GetUserById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetUserById(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUsers - Gets a list of users.
func (c *UserAPIController) GetUsers(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var isHiddenParam *bool
	if query.Has("isHidden") {
		param, err := parseBoolParameter(
			query.Get("isHidden"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isHiddenParam = &param
	} else {
	}
	var isDisabledParam *bool
	if query.Has("isDisabled") {
		param, err := parseBoolParameter(
			query.Get("isDisabled"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isDisabledParam = &param
	} else {
	}
	result, err := c.service.GetUsers(r.Context(), isHiddenParam, isDisabledParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUser - Updates a user.
func (c *UserAPIController) UpdateUser(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	userDtoParam := UserDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserDtoRequired(userDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserDtoConstraints(userDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUser(r.Context(), userIdParam, userDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserConfiguration - Updates a user configuration.
func (c *UserAPIController) UpdateUserConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	userConfigurationParam := UserConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userConfigurationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserConfigurationRequired(userConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserConfigurationConstraints(userConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserConfiguration(r.Context(), userIdParam, userConfigurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserEasyPassword - Updates a user's easy password.
func (c *UserAPIController) UpdateUserEasyPassword(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	updateUserEasyPasswordParam := UpdateUserEasyPassword{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserEasyPasswordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserEasyPasswordRequired(updateUserEasyPasswordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateUserEasyPasswordConstraints(updateUserEasyPasswordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserEasyPassword(r.Context(), userIdParam, updateUserEasyPasswordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserPassword - Updates a user's password.
func (c *UserAPIController) UpdateUserPassword(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	updateUserPasswordParam := UpdateUserPassword{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&updateUserPasswordParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUpdateUserPasswordRequired(updateUserPasswordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUpdateUserPasswordConstraints(updateUserPasswordParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserPassword(r.Context(), userIdParam, updateUserPasswordParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserPolicy - Updates a user policy.
func (c *UserAPIController) UpdateUserPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	userPolicyParam := UserPolicy{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&userPolicyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUserPolicyRequired(userPolicyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUserPolicyConstraints(userPolicyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateUserPolicy(r.Context(), userIdParam, userPolicyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
