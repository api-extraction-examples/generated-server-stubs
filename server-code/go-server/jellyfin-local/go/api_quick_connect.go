/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// QuickConnectAPIController binds http requests to an api service and writes the service results to the http response
type QuickConnectAPIController struct {
	service QuickConnectAPIServicer
	errorHandler ErrorHandler
}

// QuickConnectAPIOption for how the controller is set up.
type QuickConnectAPIOption func(*QuickConnectAPIController)

// WithQuickConnectAPIErrorHandler inject ErrorHandler into controller
func WithQuickConnectAPIErrorHandler(h ErrorHandler) QuickConnectAPIOption {
	return func(c *QuickConnectAPIController) {
		c.errorHandler = h
	}
}

// NewQuickConnectAPIController creates a default api controller
func NewQuickConnectAPIController(s QuickConnectAPIServicer, opts ...QuickConnectAPIOption) Router {
	controller := &QuickConnectAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the QuickConnectAPIController
func (c *QuickConnectAPIController) Routes() Routes {
	return Routes{
		"Activate": Route{
			strings.ToUpper("Post"),
			"/QuickConnect/Activate",
			c.Activate,
		},
		"Authorize": Route{
			strings.ToUpper("Post"),
			"/QuickConnect/Authorize",
			c.Authorize,
		},
		"Available": Route{
			strings.ToUpper("Post"),
			"/QuickConnect/Available",
			c.Available,
		},
		"Connect": Route{
			strings.ToUpper("Get"),
			"/QuickConnect/Connect",
			c.Connect,
		},
		"Deauthorize": Route{
			strings.ToUpper("Post"),
			"/QuickConnect/Deauthorize",
			c.Deauthorize,
		},
		"GetStatus": Route{
			strings.ToUpper("Get"),
			"/QuickConnect/Status",
			c.GetStatus,
		},
		"Initiate": Route{
			strings.ToUpper("Get"),
			"/QuickConnect/Initiate",
			c.Initiate,
		},
	}
}

// Activate - Temporarily activates quick connect for five minutes.
func (c *QuickConnectAPIController) Activate(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Activate(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Authorize - Authorizes a pending quick connect request.
func (c *QuickConnectAPIController) Authorize(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var codeParam string
	if query.Has("code") {
		param := query.Get("code")

		codeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "code"}, nil)
		return
	}
	result, err := c.service.Authorize(r.Context(), codeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Available - Enables or disables quick connect.
func (c *QuickConnectAPIController) Available(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var statusParam QuickConnectState
	if query.Has("status") {
		param := QuickConnectState(query.Get("status"))

		statusParam = param
	} else {
	}
	result, err := c.service.Available(r.Context(), statusParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Connect - Attempts to retrieve authentication information.
func (c *QuickConnectAPIController) Connect(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var secretParam string
	if query.Has("secret") {
		param := query.Get("secret")

		secretParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "secret"}, nil)
		return
	}
	result, err := c.service.Connect(r.Context(), secretParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Deauthorize - Deauthorize all quick connect devices for the current user.
func (c *QuickConnectAPIController) Deauthorize(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Deauthorize(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStatus - Gets the current quick connect state.
func (c *QuickConnectAPIController) GetStatus(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetStatus(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Initiate - Initiate a new quick connect request.
func (c *QuickConnectAPIController) Initiate(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.Initiate(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
