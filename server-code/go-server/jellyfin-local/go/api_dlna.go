/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DlnaAPIController binds http requests to an api service and writes the service results to the http response
type DlnaAPIController struct {
	service DlnaAPIServicer
	errorHandler ErrorHandler
}

// DlnaAPIOption for how the controller is set up.
type DlnaAPIOption func(*DlnaAPIController)

// WithDlnaAPIErrorHandler inject ErrorHandler into controller
func WithDlnaAPIErrorHandler(h ErrorHandler) DlnaAPIOption {
	return func(c *DlnaAPIController) {
		c.errorHandler = h
	}
}

// NewDlnaAPIController creates a default api controller
func NewDlnaAPIController(s DlnaAPIServicer, opts ...DlnaAPIOption) Router {
	controller := &DlnaAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DlnaAPIController
func (c *DlnaAPIController) Routes() Routes {
	return Routes{
		"CreateProfile": Route{
			strings.ToUpper("Post"),
			"/Dlna/Profiles",
			c.CreateProfile,
		},
		"DeleteProfile": Route{
			strings.ToUpper("Delete"),
			"/Dlna/Profiles/{profileId}",
			c.DeleteProfile,
		},
		"GetDefaultProfile": Route{
			strings.ToUpper("Get"),
			"/Dlna/Profiles/Default",
			c.GetDefaultProfile,
		},
		"GetProfile": Route{
			strings.ToUpper("Get"),
			"/Dlna/Profiles/{profileId}",
			c.GetProfile,
		},
		"GetProfileInfos": Route{
			strings.ToUpper("Get"),
			"/Dlna/ProfileInfos",
			c.GetProfileInfos,
		},
		"UpdateProfile": Route{
			strings.ToUpper("Post"),
			"/Dlna/Profiles/{profileId}",
			c.UpdateProfile,
		},
	}
}

// CreateProfile - Creates a profile.
func (c *DlnaAPIController) CreateProfile(w http.ResponseWriter, r *http.Request) {
	deviceProfileParam := DeviceProfile{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceProfileParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceProfileRequired(deviceProfileParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceProfileConstraints(deviceProfileParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateProfile(r.Context(), deviceProfileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteProfile - Deletes a profile.
func (c *DlnaAPIController) DeleteProfile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	profileIdParam := params["profileId"]
	if profileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"profileId"}, nil)
		return
	}
	result, err := c.service.DeleteProfile(r.Context(), profileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultProfile - Gets the default profile.
func (c *DlnaAPIController) GetDefaultProfile(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDefaultProfile(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProfile - Gets a single profile.
func (c *DlnaAPIController) GetProfile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	profileIdParam := params["profileId"]
	if profileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"profileId"}, nil)
		return
	}
	result, err := c.service.GetProfile(r.Context(), profileIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetProfileInfos - Get profile infos.
func (c *DlnaAPIController) GetProfileInfos(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetProfileInfos(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateProfile - Updates a profile.
func (c *DlnaAPIController) UpdateProfile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	profileIdParam := params["profileId"]
	if profileIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"profileId"}, nil)
		return
	}
	deviceProfileParam := DeviceProfile{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&deviceProfileParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertDeviceProfileRequired(deviceProfileParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertDeviceProfileConstraints(deviceProfileParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateProfile(r.Context(), profileIdParam, deviceProfileParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
