/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type CodecType string

// List of CodecType
const (
	VIDEO CodecType = "Video"
	VIDEO_AUDIO CodecType = "VideoAudio"
	AUDIO CodecType = "Audio"
)

// AllowedCodecTypeEnumValues is all the allowed values of CodecType enum
var AllowedCodecTypeEnumValues = []CodecType{
	"Video",
	"VideoAudio",
	"Audio",
}

// validCodecTypeEnumValue provides a map of CodecTypes for fast verification of use input
var validCodecTypeEnumValues = map[CodecType]struct{}{
	"Video": {},
	"VideoAudio": {},
	"Audio": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CodecType) IsValid() bool {
	_, ok := validCodecTypeEnumValues[v]
	return ok
}

// NewCodecTypeFromValue returns a pointer to a valid CodecType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCodecTypeFromValue(v string) (CodecType, error) {
	ev := CodecType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for CodecType: valid values are %v", v, AllowedCodecTypeEnumValues)
	}
}



// AssertCodecTypeRequired checks if the required fields are not zero-ed
func AssertCodecTypeRequired(obj CodecType) error {
	return nil
}

// AssertCodecTypeConstraints checks if the values respects the defined constraints
func AssertCodecTypeConstraints(obj CodecType) error {
	return nil
}
