/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DlnaServerAPIController binds http requests to an api service and writes the service results to the http response
type DlnaServerAPIController struct {
	service DlnaServerAPIServicer
	errorHandler ErrorHandler
}

// DlnaServerAPIOption for how the controller is set up.
type DlnaServerAPIOption func(*DlnaServerAPIController)

// WithDlnaServerAPIErrorHandler inject ErrorHandler into controller
func WithDlnaServerAPIErrorHandler(h ErrorHandler) DlnaServerAPIOption {
	return func(c *DlnaServerAPIController) {
		c.errorHandler = h
	}
}

// NewDlnaServerAPIController creates a default api controller
func NewDlnaServerAPIController(s DlnaServerAPIServicer, opts ...DlnaServerAPIOption) Router {
	controller := &DlnaServerAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DlnaServerAPIController
func (c *DlnaServerAPIController) Routes() Routes {
	return Routes{
		"GetConnectionManager": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ConnectionManager",
			c.GetConnectionManager,
		},
		"GetConnectionManager2": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ConnectionManager/ConnectionManager",
			c.GetConnectionManager2,
		},
		"GetConnectionManager3": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ConnectionManager/ConnectionManager.xml",
			c.GetConnectionManager3,
		},
		"GetContentDirectory": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ContentDirectory",
			c.GetContentDirectory,
		},
		"GetContentDirectory2": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ContentDirectory/ContentDirectory",
			c.GetContentDirectory2,
		},
		"GetContentDirectory3": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/ContentDirectory/ContentDirectory.xml",
			c.GetContentDirectory3,
		},
		"GetDescriptionXml": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/description",
			c.GetDescriptionXml,
		},
		"GetDescriptionXml2": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/description.xml",
			c.GetDescriptionXml2,
		},
		"GetIcon": Route{
			strings.ToUpper("Get"),
			"/Dlna/icons/{fileName}",
			c.GetIcon,
		},
		"GetIconId": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/icons/{fileName}",
			c.GetIconId,
		},
		"GetMediaReceiverRegistrar": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/MediaReceiverRegistrar",
			c.GetMediaReceiverRegistrar,
		},
		"GetMediaReceiverRegistrar2": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar",
			c.GetMediaReceiverRegistrar2,
		},
		"GetMediaReceiverRegistrar3": Route{
			strings.ToUpper("Get"),
			"/Dlna/{serverId}/MediaReceiverRegistrar/MediaReceiverRegistrar.xml",
			c.GetMediaReceiverRegistrar3,
		},
		"ProcessConnectionManagerControlRequest": Route{
			strings.ToUpper("Post"),
			"/Dlna/{serverId}/ConnectionManager/Control",
			c.ProcessConnectionManagerControlRequest,
		},
		"ProcessContentDirectoryControlRequest": Route{
			strings.ToUpper("Post"),
			"/Dlna/{serverId}/ContentDirectory/Control",
			c.ProcessContentDirectoryControlRequest,
		},
		"ProcessMediaReceiverRegistrarControlRequest": Route{
			strings.ToUpper("Post"),
			"/Dlna/{serverId}/MediaReceiverRegistrar/Control",
			c.ProcessMediaReceiverRegistrarControlRequest,
		},
	}
}

// GetConnectionManager - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetConnectionManager(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetConnectionManager(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetConnectionManager2 - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetConnectionManager2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetConnectionManager2(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetConnectionManager3 - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetConnectionManager3(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetConnectionManager3(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetContentDirectory - Gets Dlna content directory xml.
func (c *DlnaServerAPIController) GetContentDirectory(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetContentDirectory(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetContentDirectory2 - Gets Dlna content directory xml.
func (c *DlnaServerAPIController) GetContentDirectory2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetContentDirectory2(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetContentDirectory3 - Gets Dlna content directory xml.
func (c *DlnaServerAPIController) GetContentDirectory3(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetContentDirectory3(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDescriptionXml - Get Description Xml.
func (c *DlnaServerAPIController) GetDescriptionXml(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetDescriptionXml(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDescriptionXml2 - Get Description Xml.
func (c *DlnaServerAPIController) GetDescriptionXml2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetDescriptionXml2(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIcon - Gets a server icon.
func (c *DlnaServerAPIController) GetIcon(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fileNameParam := params["fileName"]
	if fileNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"fileName"}, nil)
		return
	}
	result, err := c.service.GetIcon(r.Context(), fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIconId - Gets a server icon.
func (c *DlnaServerAPIController) GetIconId(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	fileNameParam := params["fileName"]
	if fileNameParam == "" {
		c.errorHandler(w, r, &RequiredError{"fileName"}, nil)
		return
	}
	result, err := c.service.GetIconId(r.Context(), serverIdParam, fileNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMediaReceiverRegistrar - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetMediaReceiverRegistrar(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetMediaReceiverRegistrar(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMediaReceiverRegistrar2 - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetMediaReceiverRegistrar2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetMediaReceiverRegistrar2(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMediaReceiverRegistrar3 - Gets Dlna media receiver registrar xml.
func (c *DlnaServerAPIController) GetMediaReceiverRegistrar3(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.GetMediaReceiverRegistrar3(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProcessConnectionManagerControlRequest - Process a connection manager control request.
func (c *DlnaServerAPIController) ProcessConnectionManagerControlRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.ProcessConnectionManagerControlRequest(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProcessContentDirectoryControlRequest - Process a content directory control request.
func (c *DlnaServerAPIController) ProcessContentDirectoryControlRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.ProcessContentDirectoryControlRequest(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ProcessMediaReceiverRegistrarControlRequest - Process a media receiver registrar control request.
func (c *DlnaServerAPIController) ProcessMediaReceiverRegistrarControlRequest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	serverIdParam := params["serverId"]
	if serverIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"serverId"}, nil)
		return
	}
	result, err := c.service.ProcessMediaReceiverRegistrarControlRequest(r.Context(), serverIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
