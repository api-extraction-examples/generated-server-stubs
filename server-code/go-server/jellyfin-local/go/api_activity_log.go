/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"time"

	"github.com/gorilla/mux"
)

// ActivityLogAPIController binds http requests to an api service and writes the service results to the http response
type ActivityLogAPIController struct {
	service ActivityLogAPIServicer
	errorHandler ErrorHandler
}

// ActivityLogAPIOption for how the controller is set up.
type ActivityLogAPIOption func(*ActivityLogAPIController)

// WithActivityLogAPIErrorHandler inject ErrorHandler into controller
func WithActivityLogAPIErrorHandler(h ErrorHandler) ActivityLogAPIOption {
	return func(c *ActivityLogAPIController) {
		c.errorHandler = h
	}
}

// NewActivityLogAPIController creates a default api controller
func NewActivityLogAPIController(s ActivityLogAPIServicer, opts ...ActivityLogAPIOption) Router {
	controller := &ActivityLogAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ActivityLogAPIController
func (c *ActivityLogAPIController) Routes() Routes {
	return Routes{
		"GetLogEntries": Route{
			strings.ToUpper("Get"),
			"/System/ActivityLog/Entries",
			c.GetLogEntries,
		},
	}
}

// GetLogEntries - Gets activity log entries.
func (c *ActivityLogAPIController) GetLogEntries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var minDateParam *time.Time
	if query.Has("minDate"){
		param, err := parseTime(query.Get("minDate"))
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minDateParam = &param
	} else {
	}
	var hasUserIdParam *bool
	if query.Has("hasUserId") {
		param, err := parseBoolParameter(
			query.Get("hasUserId"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		hasUserIdParam = &param
	} else {
	}
	result, err := c.service.GetLogEntries(r.Context(), startIndexParam, limitParam, minDateParam, hasUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
