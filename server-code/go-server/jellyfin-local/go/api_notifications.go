/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// NotificationsAPIController binds http requests to an api service and writes the service results to the http response
type NotificationsAPIController struct {
	service NotificationsAPIServicer
	errorHandler ErrorHandler
}

// NotificationsAPIOption for how the controller is set up.
type NotificationsAPIOption func(*NotificationsAPIController)

// WithNotificationsAPIErrorHandler inject ErrorHandler into controller
func WithNotificationsAPIErrorHandler(h ErrorHandler) NotificationsAPIOption {
	return func(c *NotificationsAPIController) {
		c.errorHandler = h
	}
}

// NewNotificationsAPIController creates a default api controller
func NewNotificationsAPIController(s NotificationsAPIServicer, opts ...NotificationsAPIOption) Router {
	controller := &NotificationsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the NotificationsAPIController
func (c *NotificationsAPIController) Routes() Routes {
	return Routes{
		"CreateAdminNotification": Route{
			strings.ToUpper("Post"),
			"/Notifications/Admin",
			c.CreateAdminNotification,
		},
		"GetNotificationServices": Route{
			strings.ToUpper("Get"),
			"/Notifications/Services",
			c.GetNotificationServices,
		},
		"GetNotificationTypes": Route{
			strings.ToUpper("Get"),
			"/Notifications/Types",
			c.GetNotificationTypes,
		},
		"GetNotifications": Route{
			strings.ToUpper("Get"),
			"/Notifications/{userId}",
			c.GetNotifications,
		},
		"GetNotificationsSummary": Route{
			strings.ToUpper("Get"),
			"/Notifications/{userId}/Summary",
			c.GetNotificationsSummary,
		},
		"SetRead": Route{
			strings.ToUpper("Post"),
			"/Notifications/{userId}/Read",
			c.SetRead,
		},
		"SetUnread": Route{
			strings.ToUpper("Post"),
			"/Notifications/{userId}/Unread",
			c.SetUnread,
		},
	}
}

// CreateAdminNotification - Sends a notification to all admins.
func (c *NotificationsAPIController) CreateAdminNotification(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var urlParam *string
	if query.Has("url") {
		param := query.Get("url")

		urlParam = &param
	} else {
	}
	var levelParam NotificationLevel
	if query.Has("level") {
		param := NotificationLevel(query.Get("level"))

		levelParam = param
	} else {
	}
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
		param := 
		nameParam = &param
	}
	var descriptionParam *string
	if query.Has("description") {
		param := query.Get("description")

		descriptionParam = &param
	} else {
		param := 
		descriptionParam = &param
	}
	result, err := c.service.CreateAdminNotification(r.Context(), urlParam, levelParam, nameParam, descriptionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNotificationServices - Gets notification services.
func (c *NotificationsAPIController) GetNotificationServices(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNotificationServices(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNotificationTypes - Gets notification types.
func (c *NotificationsAPIController) GetNotificationTypes(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNotificationTypes(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNotifications - Gets a user's notifications.
func (c *NotificationsAPIController) GetNotifications(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetNotifications(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNotificationsSummary - Gets a user's notification summary.
func (c *NotificationsAPIController) GetNotificationsSummary(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetNotificationsSummary(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRead - Sets notifications as read.
func (c *NotificationsAPIController) SetRead(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.SetRead(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetUnread - Sets notifications as unread.
func (c *NotificationsAPIController) SetUnread(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.SetUnread(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
