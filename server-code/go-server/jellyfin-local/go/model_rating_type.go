/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type RatingType string

// List of RatingType
const (
	SCORE RatingType = "Score"
	LIKES RatingType = "Likes"
)

// AllowedRatingTypeEnumValues is all the allowed values of RatingType enum
var AllowedRatingTypeEnumValues = []RatingType{
	"Score",
	"Likes",
}

// validRatingTypeEnumValue provides a map of RatingTypes for fast verification of use input
var validRatingTypeEnumValues = map[RatingType]struct{}{
	"Score": {},
	"Likes": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RatingType) IsValid() bool {
	_, ok := validRatingTypeEnumValues[v]
	return ok
}

// NewRatingTypeFromValue returns a pointer to a valid RatingType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRatingTypeFromValue(v string) (RatingType, error) {
	ev := RatingType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RatingType: valid values are %v", v, AllowedRatingTypeEnumValues)
	}
}



// AssertRatingTypeRequired checks if the required fields are not zero-ed
func AssertRatingTypeRequired(obj RatingType) error {
	return nil
}

// AssertRatingTypeConstraints checks if the values respects the defined constraints
func AssertRatingTypeConstraints(obj RatingType) error {
	return nil
}
