/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PackageAPIController binds http requests to an api service and writes the service results to the http response
type PackageAPIController struct {
	service PackageAPIServicer
	errorHandler ErrorHandler
}

// PackageAPIOption for how the controller is set up.
type PackageAPIOption func(*PackageAPIController)

// WithPackageAPIErrorHandler inject ErrorHandler into controller
func WithPackageAPIErrorHandler(h ErrorHandler) PackageAPIOption {
	return func(c *PackageAPIController) {
		c.errorHandler = h
	}
}

// NewPackageAPIController creates a default api controller
func NewPackageAPIController(s PackageAPIServicer, opts ...PackageAPIOption) Router {
	controller := &PackageAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PackageAPIController
func (c *PackageAPIController) Routes() Routes {
	return Routes{
		"CancelPackageInstallation": Route{
			strings.ToUpper("Delete"),
			"/Packages/Installing/{packageId}",
			c.CancelPackageInstallation,
		},
		"GetPackageInfo": Route{
			strings.ToUpper("Get"),
			"/Packages/{name}",
			c.GetPackageInfo,
		},
		"GetPackages": Route{
			strings.ToUpper("Get"),
			"/Packages",
			c.GetPackages,
		},
		"GetRepositories": Route{
			strings.ToUpper("Get"),
			"/Repositories",
			c.GetRepositories,
		},
		"InstallPackage": Route{
			strings.ToUpper("Post"),
			"/Packages/Installed/{name}",
			c.InstallPackage,
		},
		"SetRepositories": Route{
			strings.ToUpper("Post"),
			"/Repositories",
			c.SetRepositories,
		},
	}
}

// CancelPackageInstallation - Cancels a package installation.
func (c *PackageAPIController) CancelPackageInstallation(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	packageIdParam := params["packageId"]
	if packageIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"packageId"}, nil)
		return
	}
	result, err := c.service.CancelPackageInstallation(r.Context(), packageIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPackageInfo - Gets a package by name or assembly GUID.
func (c *PackageAPIController) GetPackageInfo(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var assemblyGuidParam *string
	if query.Has("assemblyGuid") {
		param := query.Get("assemblyGuid")

		assemblyGuidParam = &param
	} else {
	}
	result, err := c.service.GetPackageInfo(r.Context(), nameParam, assemblyGuidParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPackages - Gets available packages.
func (c *PackageAPIController) GetPackages(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPackages(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRepositories - Gets all package repositories.
func (c *PackageAPIController) GetRepositories(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetRepositories(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// InstallPackage - Installs a package.
func (c *PackageAPIController) InstallPackage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var assemblyGuidParam *string
	if query.Has("assemblyGuid") {
		param := query.Get("assemblyGuid")

		assemblyGuidParam = &param
	} else {
	}
	var versionParam *string
	if query.Has("version") {
		param := query.Get("version")

		versionParam = &param
	} else {
	}
	var repositoryUrlParam *string
	if query.Has("repositoryUrl") {
		param := query.Get("repositoryUrl")

		repositoryUrlParam = &param
	} else {
	}
	result, err := c.service.InstallPackage(r.Context(), nameParam, assemblyGuidParam, versionParam, repositoryUrlParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetRepositories - Sets the enabled and existing package repositories.
func (c *PackageAPIController) SetRepositories(w http.ResponseWriter, r *http.Request) {
	repositoryInfoParam := []RepositoryInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&repositoryInfoParam); err != nil && !errors.Is(err, io.EOF) {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range repositoryInfoParam {
		if err := AssertRepositoryInfoRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.SetRepositories(r.Context(), repositoryInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
