/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// SortOrder : An enum representing the sorting order.
type SortOrder string

// List of SortOrder
const (
	ASCENDING SortOrder = "Ascending"
	DESCENDING SortOrder = "Descending"
)

// AllowedSortOrderEnumValues is all the allowed values of SortOrder enum
var AllowedSortOrderEnumValues = []SortOrder{
	"Ascending",
	"Descending",
}

// validSortOrderEnumValue provides a map of SortOrders for fast verification of use input
var validSortOrderEnumValues = map[SortOrder]struct{}{
	"Ascending": {},
	"Descending": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SortOrder) IsValid() bool {
	_, ok := validSortOrderEnumValues[v]
	return ok
}

// NewSortOrderFromValue returns a pointer to a valid SortOrder
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSortOrderFromValue(v string) (SortOrder, error) {
	ev := SortOrder(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SortOrder: valid values are %v", v, AllowedSortOrderEnumValues)
	}
}



// AssertSortOrderRequired checks if the required fields are not zero-ed
func AssertSortOrderRequired(obj SortOrder) error {
	return nil
}

// AssertSortOrderConstraints checks if the values respects the defined constraints
func AssertSortOrderConstraints(obj SortOrder) error {
	return nil
}
