/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type MediaSourceType string

// List of MediaSourceType
const (
	DEFAULT MediaSourceType = "Default"
	GROUPING MediaSourceType = "Grouping"
	PLACEHOLDER MediaSourceType = "Placeholder"
)

// AllowedMediaSourceTypeEnumValues is all the allowed values of MediaSourceType enum
var AllowedMediaSourceTypeEnumValues = []MediaSourceType{
	"Default",
	"Grouping",
	"Placeholder",
}

// validMediaSourceTypeEnumValue provides a map of MediaSourceTypes for fast verification of use input
var validMediaSourceTypeEnumValues = map[MediaSourceType]struct{}{
	"Default": {},
	"Grouping": {},
	"Placeholder": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaSourceType) IsValid() bool {
	_, ok := validMediaSourceTypeEnumValues[v]
	return ok
}

// NewMediaSourceTypeFromValue returns a pointer to a valid MediaSourceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaSourceTypeFromValue(v string) (MediaSourceType, error) {
	ev := MediaSourceType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for MediaSourceType: valid values are %v", v, AllowedMediaSourceTypeEnumValues)
	}
}



// AssertMediaSourceTypeRequired checks if the required fields are not zero-ed
func AssertMediaSourceTypeRequired(obj MediaSourceType) error {
	return nil
}

// AssertMediaSourceTypeConstraints checks if the values respects the defined constraints
func AssertMediaSourceTypeConstraints(obj MediaSourceType) error {
	return nil
}
