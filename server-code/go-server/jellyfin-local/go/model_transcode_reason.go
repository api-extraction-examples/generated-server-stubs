/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type TranscodeReason string

// List of TranscodeReason
const (
	CONTAINER_NOT_SUPPORTED TranscodeReason = "ContainerNotSupported"
	VIDEO_CODEC_NOT_SUPPORTED TranscodeReason = "VideoCodecNotSupported"
	AUDIO_CODEC_NOT_SUPPORTED TranscodeReason = "AudioCodecNotSupported"
	CONTAINER_BITRATE_EXCEEDS_LIMIT TranscodeReason = "ContainerBitrateExceedsLimit"
	AUDIO_BITRATE_NOT_SUPPORTED TranscodeReason = "AudioBitrateNotSupported"
	AUDIO_CHANNELS_NOT_SUPPORTED TranscodeReason = "AudioChannelsNotSupported"
	VIDEO_RESOLUTION_NOT_SUPPORTED TranscodeReason = "VideoResolutionNotSupported"
	UNKNOWN_VIDEO_STREAM_INFO TranscodeReason = "UnknownVideoStreamInfo"
	UNKNOWN_AUDIO_STREAM_INFO TranscodeReason = "UnknownAudioStreamInfo"
	AUDIO_PROFILE_NOT_SUPPORTED TranscodeReason = "AudioProfileNotSupported"
	AUDIO_SAMPLE_RATE_NOT_SUPPORTED TranscodeReason = "AudioSampleRateNotSupported"
	ANAMORPHIC_VIDEO_NOT_SUPPORTED TranscodeReason = "AnamorphicVideoNotSupported"
	INTERLACED_VIDEO_NOT_SUPPORTED TranscodeReason = "InterlacedVideoNotSupported"
	SECONDARY_AUDIO_NOT_SUPPORTED TranscodeReason = "SecondaryAudioNotSupported"
	REF_FRAMES_NOT_SUPPORTED TranscodeReason = "RefFramesNotSupported"
	VIDEO_BIT_DEPTH_NOT_SUPPORTED TranscodeReason = "VideoBitDepthNotSupported"
	VIDEO_BITRATE_NOT_SUPPORTED TranscodeReason = "VideoBitrateNotSupported"
	VIDEO_FRAMERATE_NOT_SUPPORTED TranscodeReason = "VideoFramerateNotSupported"
	VIDEO_LEVEL_NOT_SUPPORTED TranscodeReason = "VideoLevelNotSupported"
	VIDEO_PROFILE_NOT_SUPPORTED TranscodeReason = "VideoProfileNotSupported"
	AUDIO_BIT_DEPTH_NOT_SUPPORTED TranscodeReason = "AudioBitDepthNotSupported"
	SUBTITLE_CODEC_NOT_SUPPORTED TranscodeReason = "SubtitleCodecNotSupported"
	DIRECT_PLAY_ERROR TranscodeReason = "DirectPlayError"
)

// AllowedTranscodeReasonEnumValues is all the allowed values of TranscodeReason enum
var AllowedTranscodeReasonEnumValues = []TranscodeReason{
	"ContainerNotSupported",
	"VideoCodecNotSupported",
	"AudioCodecNotSupported",
	"ContainerBitrateExceedsLimit",
	"AudioBitrateNotSupported",
	"AudioChannelsNotSupported",
	"VideoResolutionNotSupported",
	"UnknownVideoStreamInfo",
	"UnknownAudioStreamInfo",
	"AudioProfileNotSupported",
	"AudioSampleRateNotSupported",
	"AnamorphicVideoNotSupported",
	"InterlacedVideoNotSupported",
	"SecondaryAudioNotSupported",
	"RefFramesNotSupported",
	"VideoBitDepthNotSupported",
	"VideoBitrateNotSupported",
	"VideoFramerateNotSupported",
	"VideoLevelNotSupported",
	"VideoProfileNotSupported",
	"AudioBitDepthNotSupported",
	"SubtitleCodecNotSupported",
	"DirectPlayError",
}

// validTranscodeReasonEnumValue provides a map of TranscodeReasons for fast verification of use input
var validTranscodeReasonEnumValues = map[TranscodeReason]struct{}{
	"ContainerNotSupported": {},
	"VideoCodecNotSupported": {},
	"AudioCodecNotSupported": {},
	"ContainerBitrateExceedsLimit": {},
	"AudioBitrateNotSupported": {},
	"AudioChannelsNotSupported": {},
	"VideoResolutionNotSupported": {},
	"UnknownVideoStreamInfo": {},
	"UnknownAudioStreamInfo": {},
	"AudioProfileNotSupported": {},
	"AudioSampleRateNotSupported": {},
	"AnamorphicVideoNotSupported": {},
	"InterlacedVideoNotSupported": {},
	"SecondaryAudioNotSupported": {},
	"RefFramesNotSupported": {},
	"VideoBitDepthNotSupported": {},
	"VideoBitrateNotSupported": {},
	"VideoFramerateNotSupported": {},
	"VideoLevelNotSupported": {},
	"VideoProfileNotSupported": {},
	"AudioBitDepthNotSupported": {},
	"SubtitleCodecNotSupported": {},
	"DirectPlayError": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TranscodeReason) IsValid() bool {
	_, ok := validTranscodeReasonEnumValues[v]
	return ok
}

// NewTranscodeReasonFromValue returns a pointer to a valid TranscodeReason
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTranscodeReasonFromValue(v string) (TranscodeReason, error) {
	ev := TranscodeReason(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for TranscodeReason: valid values are %v", v, AllowedTranscodeReasonEnumValues)
	}
}



// AssertTranscodeReasonRequired checks if the required fields are not zero-ed
func AssertTranscodeReasonRequired(obj TranscodeReason) error {
	return nil
}

// AssertTranscodeReasonConstraints checks if the values respects the defined constraints
func AssertTranscodeReasonConstraints(obj TranscodeReason) error {
	return nil
}
