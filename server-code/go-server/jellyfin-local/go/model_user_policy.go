/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




type UserPolicy struct {

	AccessSchedules *[]AccessSchedule `json:"AccessSchedules,omitempty"`

	AuthenticationProviderId *string `json:"AuthenticationProviderId,omitempty"`

	BlockUnratedItems *[]UnratedItem `json:"BlockUnratedItems,omitempty"`

	BlockedChannels *[]string `json:"BlockedChannels,omitempty"`

	BlockedMediaFolders *[]string `json:"BlockedMediaFolders,omitempty"`

	BlockedTags *[]string `json:"BlockedTags,omitempty"`

	EnableAllChannels bool `json:"EnableAllChannels,omitempty"`

	EnableAllDevices bool `json:"EnableAllDevices,omitempty"`

	EnableAllFolders bool `json:"EnableAllFolders,omitempty"`

	EnableAudioPlaybackTranscoding bool `json:"EnableAudioPlaybackTranscoding,omitempty"`

	EnableContentDeletion bool `json:"EnableContentDeletion,omitempty"`

	EnableContentDeletionFromFolders *[]string `json:"EnableContentDeletionFromFolders,omitempty"`

	EnableContentDownloading bool `json:"EnableContentDownloading,omitempty"`

	EnableLiveTvAccess bool `json:"EnableLiveTvAccess,omitempty"`

	EnableLiveTvManagement bool `json:"EnableLiveTvManagement,omitempty"`

	EnableMediaConversion bool `json:"EnableMediaConversion,omitempty"`

	EnableMediaPlayback bool `json:"EnableMediaPlayback,omitempty"`

	EnablePlaybackRemuxing bool `json:"EnablePlaybackRemuxing,omitempty"`

	EnablePublicSharing bool `json:"EnablePublicSharing,omitempty"`

	EnableRemoteAccess bool `json:"EnableRemoteAccess,omitempty"`

	EnableRemoteControlOfOtherUsers bool `json:"EnableRemoteControlOfOtherUsers,omitempty"`

	EnableSharedDeviceControl bool `json:"EnableSharedDeviceControl,omitempty"`

	// Gets or sets a value indicating whether [enable synchronize].
	EnableSyncTranscoding bool `json:"EnableSyncTranscoding,omitempty"`

	EnableUserPreferenceAccess bool `json:"EnableUserPreferenceAccess,omitempty"`

	EnableVideoPlaybackTranscoding bool `json:"EnableVideoPlaybackTranscoding,omitempty"`

	EnabledChannels *[]string `json:"EnabledChannels,omitempty"`

	EnabledDevices *[]string `json:"EnabledDevices,omitempty"`

	EnabledFolders *[]string `json:"EnabledFolders,omitempty"`

	ForceRemoteSourceTranscoding bool `json:"ForceRemoteSourceTranscoding,omitempty"`

	InvalidLoginAttemptCount int32 `json:"InvalidLoginAttemptCount,omitempty"`

	// Gets or sets a value indicating whether this instance is administrator.
	IsAdministrator bool `json:"IsAdministrator,omitempty"`

	// Gets or sets a value indicating whether this instance is disabled.
	IsDisabled bool `json:"IsDisabled,omitempty"`

	// Gets or sets a value indicating whether this instance is hidden.
	IsHidden bool `json:"IsHidden,omitempty"`

	LoginAttemptsBeforeLockout int32 `json:"LoginAttemptsBeforeLockout,omitempty"`

	MaxActiveSessions int32 `json:"MaxActiveSessions,omitempty"`

	// Gets or sets the max parental rating.
	MaxParentalRating *int32 `json:"MaxParentalRating,omitempty"`

	PasswordResetProviderId *string `json:"PasswordResetProviderId,omitempty"`

	RemoteClientBitrateLimit int32 `json:"RemoteClientBitrateLimit,omitempty"`

	SyncPlayAccess SyncPlayUserAccessType `json:"SyncPlayAccess,omitempty"`
}

// AssertUserPolicyRequired checks if the required fields are not zero-ed
func AssertUserPolicyRequired(obj UserPolicy) error {
	if obj.AccessSchedules != nil {
		for _, el := range *obj.AccessSchedules {
			if err := AssertAccessScheduleRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertUserPolicyConstraints checks if the values respects the defined constraints
func AssertUserPolicyConstraints(obj UserPolicy) error {
	return nil
}
