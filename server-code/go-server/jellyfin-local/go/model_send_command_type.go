/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// SendCommandType : Enum SendCommandType.
type SendCommandType string

// List of SendCommandType
const (
	UNPAUSE SendCommandType = "Unpause"
	PAUSE SendCommandType = "Pause"
	STOP SendCommandType = "Stop"
	SEEK SendCommandType = "Seek"
)

// AllowedSendCommandTypeEnumValues is all the allowed values of SendCommandType enum
var AllowedSendCommandTypeEnumValues = []SendCommandType{
	"Unpause",
	"Pause",
	"Stop",
	"Seek",
}

// validSendCommandTypeEnumValue provides a map of SendCommandTypes for fast verification of use input
var validSendCommandTypeEnumValues = map[SendCommandType]struct{}{
	"Unpause": {},
	"Pause": {},
	"Stop": {},
	"Seek": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SendCommandType) IsValid() bool {
	_, ok := validSendCommandTypeEnumValues[v]
	return ok
}

// NewSendCommandTypeFromValue returns a pointer to a valid SendCommandType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSendCommandTypeFromValue(v string) (SendCommandType, error) {
	ev := SendCommandType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SendCommandType: valid values are %v", v, AllowedSendCommandTypeEnumValues)
	}
}



// AssertSendCommandTypeRequired checks if the required fields are not zero-ed
func AssertSendCommandTypeRequired(obj SendCommandType) error {
	return nil
}

// AssertSendCommandTypeConstraints checks if the values respects the defined constraints
func AssertSendCommandTypeConstraints(obj SendCommandType) error {
	return nil
}
