/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ImageSavingConvention string

// List of ImageSavingConvention
const (
	LEGACY ImageSavingConvention = "Legacy"
	COMPATIBLE ImageSavingConvention = "Compatible"
)

// AllowedImageSavingConventionEnumValues is all the allowed values of ImageSavingConvention enum
var AllowedImageSavingConventionEnumValues = []ImageSavingConvention{
	"Legacy",
	"Compatible",
}

// validImageSavingConventionEnumValue provides a map of ImageSavingConventions for fast verification of use input
var validImageSavingConventionEnumValues = map[ImageSavingConvention]struct{}{
	"Legacy": {},
	"Compatible": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageSavingConvention) IsValid() bool {
	_, ok := validImageSavingConventionEnumValues[v]
	return ok
}

// NewImageSavingConventionFromValue returns a pointer to a valid ImageSavingConvention
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageSavingConventionFromValue(v string) (ImageSavingConvention, error) {
	ev := ImageSavingConvention(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ImageSavingConvention: valid values are %v", v, AllowedImageSavingConventionEnumValues)
	}
}



// AssertImageSavingConventionRequired checks if the required fields are not zero-ed
func AssertImageSavingConventionRequired(obj ImageSavingConvention) error {
	return nil
}

// AssertImageSavingConventionConstraints checks if the values respects the defined constraints
func AssertImageSavingConventionConstraints(obj ImageSavingConvention) error {
	return nil
}
