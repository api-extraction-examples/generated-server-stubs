/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// ChannelsAPIController binds http requests to an api service and writes the service results to the http response
type ChannelsAPIController struct {
	service ChannelsAPIServicer
	errorHandler ErrorHandler
}

// ChannelsAPIOption for how the controller is set up.
type ChannelsAPIOption func(*ChannelsAPIController)

// WithChannelsAPIErrorHandler inject ErrorHandler into controller
func WithChannelsAPIErrorHandler(h ErrorHandler) ChannelsAPIOption {
	return func(c *ChannelsAPIController) {
		c.errorHandler = h
	}
}

// NewChannelsAPIController creates a default api controller
func NewChannelsAPIController(s ChannelsAPIServicer, opts ...ChannelsAPIOption) Router {
	controller := &ChannelsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ChannelsAPIController
func (c *ChannelsAPIController) Routes() Routes {
	return Routes{
		"GetAllChannelFeatures": Route{
			strings.ToUpper("Get"),
			"/Channels/Features",
			c.GetAllChannelFeatures,
		},
		"GetChannelFeatures": Route{
			strings.ToUpper("Get"),
			"/Channels/{channelId}/Features",
			c.GetChannelFeatures,
		},
		"GetChannelItems": Route{
			strings.ToUpper("Get"),
			"/Channels/{channelId}/Items",
			c.GetChannelItems,
		},
		"GetChannels": Route{
			strings.ToUpper("Get"),
			"/Channels",
			c.GetChannels,
		},
		"GetLatestChannelItems": Route{
			strings.ToUpper("Get"),
			"/Channels/Items/Latest",
			c.GetLatestChannelItems,
		},
	}
}

// GetAllChannelFeatures - Get all channel features.
func (c *ChannelsAPIController) GetAllChannelFeatures(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAllChannelFeatures(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChannelFeatures - Get channel features.
func (c *ChannelsAPIController) GetChannelFeatures(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	channelIdParam := params["channelId"]
	if channelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"channelId"}, nil)
		return
	}
	result, err := c.service.GetChannelFeatures(r.Context(), channelIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChannelItems - Get channel items.
func (c *ChannelsAPIController) GetChannelItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	channelIdParam := params["channelId"]
	if channelIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"channelId"}, nil)
		return
	}
	var folderIdParam *string
	if query.Has("folderId") {
		param := query.Get("folderId")

		folderIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var sortOrderParam *string
	if query.Has("sortOrder") {
		param := query.Get("sortOrder")

		sortOrderParam = &param
	} else {
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var sortByParam *string
	if query.Has("sortBy") {
		param := query.Get("sortBy")

		sortByParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetChannelItems(r.Context(), channelIdParam, folderIdParam, userIdParam, startIndexParam, limitParam, sortOrderParam, filtersParam, sortByParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetChannels - Gets available channels.
func (c *ChannelsAPIController) GetChannels(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var supportsLatestItemsParam *bool
	if query.Has("supportsLatestItems") {
		param, err := parseBoolParameter(
			query.Get("supportsLatestItems"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsLatestItemsParam = &param
	} else {
	}
	var supportsMediaDeletionParam *bool
	if query.Has("supportsMediaDeletion") {
		param, err := parseBoolParameter(
			query.Get("supportsMediaDeletion"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsMediaDeletionParam = &param
	} else {
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	result, err := c.service.GetChannels(r.Context(), userIdParam, startIndexParam, limitParam, supportsLatestItemsParam, supportsMediaDeletionParam, isFavoriteParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestChannelItems - Gets latest channel items.
func (c *ChannelsAPIController) GetLatestChannelItems(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var channelIdsParam []string
	if query.Has("channelIds") {
		channelIdsParam = strings.Split(query.Get("channelIds"), ",")
	}
	result, err := c.service.GetLatestChannelItems(r.Context(), userIdParam, startIndexParam, limitParam, filtersParam, fieldsParam, channelIdsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
