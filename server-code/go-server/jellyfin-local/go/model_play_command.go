/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// PlayCommand : Enum PlayCommand.
type PlayCommand string

// List of PlayCommand
const (
	PLAY_NOW PlayCommand = "PlayNow"
	PLAY_NEXT PlayCommand = "PlayNext"
	PLAY_LAST PlayCommand = "PlayLast"
	PLAY_INSTANT_MIX PlayCommand = "PlayInstantMix"
	PLAY_SHUFFLE PlayCommand = "PlayShuffle"
)

// AllowedPlayCommandEnumValues is all the allowed values of PlayCommand enum
var AllowedPlayCommandEnumValues = []PlayCommand{
	"PlayNow",
	"PlayNext",
	"PlayLast",
	"PlayInstantMix",
	"PlayShuffle",
}

// validPlayCommandEnumValue provides a map of PlayCommands for fast verification of use input
var validPlayCommandEnumValues = map[PlayCommand]struct{}{
	"PlayNow": {},
	"PlayNext": {},
	"PlayLast": {},
	"PlayInstantMix": {},
	"PlayShuffle": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayCommand) IsValid() bool {
	_, ok := validPlayCommandEnumValues[v]
	return ok
}

// NewPlayCommandFromValue returns a pointer to a valid PlayCommand
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayCommandFromValue(v string) (PlayCommand, error) {
	ev := PlayCommand(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PlayCommand: valid values are %v", v, AllowedPlayCommandEnumValues)
	}
}



// AssertPlayCommandRequired checks if the required fields are not zero-ed
func AssertPlayCommandRequired(obj PlayCommand) error {
	return nil
}

// AssertPlayCommandConstraints checks if the values respects the defined constraints
func AssertPlayCommandConstraints(obj PlayCommand) error {
	return nil
}
