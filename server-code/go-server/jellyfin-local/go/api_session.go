/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// SessionAPIController binds http requests to an api service and writes the service results to the http response
type SessionAPIController struct {
	service SessionAPIServicer
	errorHandler ErrorHandler
}

// SessionAPIOption for how the controller is set up.
type SessionAPIOption func(*SessionAPIController)

// WithSessionAPIErrorHandler inject ErrorHandler into controller
func WithSessionAPIErrorHandler(h ErrorHandler) SessionAPIOption {
	return func(c *SessionAPIController) {
		c.errorHandler = h
	}
}

// NewSessionAPIController creates a default api controller
func NewSessionAPIController(s SessionAPIServicer, opts ...SessionAPIOption) Router {
	controller := &SessionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SessionAPIController
func (c *SessionAPIController) Routes() Routes {
	return Routes{
		"AddUserToSession": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/User/{userId}",
			c.AddUserToSession,
		},
		"DisplayContent": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Viewing",
			c.DisplayContent,
		},
		"GetAuthProviders": Route{
			strings.ToUpper("Get"),
			"/Auth/Providers",
			c.GetAuthProviders,
		},
		"GetPasswordResetProviders": Route{
			strings.ToUpper("Get"),
			"/Auth/PasswordResetProviders",
			c.GetPasswordResetProviders,
		},
		"GetSessions": Route{
			strings.ToUpper("Get"),
			"/Sessions",
			c.GetSessions,
		},
		"Play": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Playing",
			c.Play,
		},
		"PostCapabilities": Route{
			strings.ToUpper("Post"),
			"/Sessions/Capabilities",
			c.PostCapabilities,
		},
		"PostFullCapabilities": Route{
			strings.ToUpper("Post"),
			"/Sessions/Capabilities/Full",
			c.PostFullCapabilities,
		},
		"RemoveUserFromSession": Route{
			strings.ToUpper("Delete"),
			"/Sessions/{sessionId}/User/{userId}",
			c.RemoveUserFromSession,
		},
		"ReportSessionEnded": Route{
			strings.ToUpper("Post"),
			"/Sessions/Logout",
			c.ReportSessionEnded,
		},
		"ReportViewing": Route{
			strings.ToUpper("Post"),
			"/Sessions/Viewing",
			c.ReportViewing,
		},
		"SendFullGeneralCommand": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Command",
			c.SendFullGeneralCommand,
		},
		"SendGeneralCommand": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Command/{command}",
			c.SendGeneralCommand,
		},
		"SendMessageCommand": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Message",
			c.SendMessageCommand,
		},
		"SendPlaystateCommand": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/Playing/{command}",
			c.SendPlaystateCommand,
		},
		"SendSystemCommand": Route{
			strings.ToUpper("Post"),
			"/Sessions/{sessionId}/System/{command}",
			c.SendSystemCommand,
		},
	}
}

// AddUserToSession - Adds an additional user to a session.
func (c *SessionAPIController) AddUserToSession(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.AddUserToSession(r.Context(), sessionIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DisplayContent - Instructs a session to browse to an item or view.
func (c *SessionAPIController) DisplayContent(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	var itemTypeParam string
	if query.Has("itemType") {
		param := query.Get("itemType")

		itemTypeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "itemType"}, nil)
		return
	}
	var itemIdParam string
	if query.Has("itemId") {
		param := query.Get("itemId")

		itemIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "itemId"}, nil)
		return
	}
	var itemNameParam string
	if query.Has("itemName") {
		param := query.Get("itemName")

		itemNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "itemName"}, nil)
		return
	}
	result, err := c.service.DisplayContent(r.Context(), sessionIdParam, itemTypeParam, itemIdParam, itemNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAuthProviders - Get all auth providers.
func (c *SessionAPIController) GetAuthProviders(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetAuthProviders(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPasswordResetProviders - Get all password reset providers.
func (c *SessionAPIController) GetPasswordResetProviders(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPasswordResetProviders(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSessions - Gets a list of sessions.
func (c *SessionAPIController) GetSessions(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var controllableByUserIdParam *string
	if query.Has("controllableByUserId") {
		param := query.Get("controllableByUserId")

		controllableByUserIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var activeWithinSecondsParam *int32
	if query.Has("activeWithinSeconds") {
		param, err := parseNumericParameter[int32](
			query.Get("activeWithinSeconds"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		activeWithinSecondsParam = &param
	} else {
	}
	result, err := c.service.GetSessions(r.Context(), controllableByUserIdParam, deviceIdParam, activeWithinSecondsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// Play - Instructs a session to play an item.
func (c *SessionAPIController) Play(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	var playCommandParam PlayCommand
	if query.Has("playCommand") {
		param := PlayCommand(query.Get("playCommand"))

		playCommandParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "playCommand"}, nil)
		return
	}
	var itemIdsParam []string
	if query.Has("itemIds") {
		itemIdsParam = strings.Split(query.Get("itemIds"), ",")
	}
	var startPositionTicksParam *int64
	if query.Has("startPositionTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startPositionTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startPositionTicksParam = &param
	} else {
	}
	result, err := c.service.Play(r.Context(), sessionIdParam, playCommandParam, itemIdsParam, startPositionTicksParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostCapabilities - Updates capabilities for a device.
func (c *SessionAPIController) PostCapabilities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idParam *string
	if query.Has("id") {
		param := query.Get("id")

		idParam = &param
	} else {
	}
	var playableMediaTypesParam []string
	if query.Has("playableMediaTypes") {
		playableMediaTypesParam = strings.Split(query.Get("playableMediaTypes"), ",")
	}
	var supportedCommandsParam []GeneralCommandType
	if query.Has("supportedCommands") {
		paramSplits := strings.Split(query.Get("supportedCommands"), ",")
		supportedCommandsParam = make([]GeneralCommandType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewGeneralCommandTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			supportedCommandsParam = append(supportedCommandsParam, paramEnum)
		}
	}
	var supportsMediaControlParam bool
	if query.Has("supportsMediaControl") {
		param, err := parseBoolParameter(
			query.Get("supportsMediaControl"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsMediaControlParam = param
	} else {
		var param bool = false
		supportsMediaControlParam = param
	}
	var supportsSyncParam bool
	if query.Has("supportsSync") {
		param, err := parseBoolParameter(
			query.Get("supportsSync"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsSyncParam = param
	} else {
		var param bool = false
		supportsSyncParam = param
	}
	var supportsPersistentIdentifierParam bool
	if query.Has("supportsPersistentIdentifier") {
		param, err := parseBoolParameter(
			query.Get("supportsPersistentIdentifier"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		supportsPersistentIdentifierParam = param
	} else {
		var param bool = true
		supportsPersistentIdentifierParam = param
	}
	result, err := c.service.PostCapabilities(r.Context(), idParam, playableMediaTypesParam, supportedCommandsParam, supportsMediaControlParam, supportsSyncParam, supportsPersistentIdentifierParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostFullCapabilities - Updates capabilities for a device.
func (c *SessionAPIController) PostFullCapabilities(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	clientCapabilitiesDtoParam := ClientCapabilitiesDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&clientCapabilitiesDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertClientCapabilitiesDtoRequired(clientCapabilitiesDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertClientCapabilitiesDtoConstraints(clientCapabilitiesDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var idParam *string
	if query.Has("id") {
		param := query.Get("id")

		idParam = &param
	} else {
	}
	result, err := c.service.PostFullCapabilities(r.Context(), clientCapabilitiesDtoParam, idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveUserFromSession - Removes an additional user from a session.
func (c *SessionAPIController) RemoveUserFromSession(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.RemoveUserFromSession(r.Context(), sessionIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReportSessionEnded - Reports that a session has ended.
func (c *SessionAPIController) ReportSessionEnded(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.ReportSessionEnded(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ReportViewing - Reports that a session is viewing an item.
func (c *SessionAPIController) ReportViewing(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var itemIdParam string
	if query.Has("itemId") {
		param := query.Get("itemId")

		itemIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "itemId"}, nil)
		return
	}
	var sessionIdParam *string
	if query.Has("sessionId") {
		param := query.Get("sessionId")

		sessionIdParam = &param
	} else {
	}
	result, err := c.service.ReportViewing(r.Context(), itemIdParam, sessionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendFullGeneralCommand - Issues a full general command to a client.
func (c *SessionAPIController) SendFullGeneralCommand(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	generalCommandParam := GeneralCommand{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&generalCommandParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertGeneralCommandRequired(generalCommandParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertGeneralCommandConstraints(generalCommandParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.SendFullGeneralCommand(r.Context(), sessionIdParam, generalCommandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendGeneralCommand - Issues a general command to a client.
func (c *SessionAPIController) SendGeneralCommand(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	commandParam, err := NewGeneralCommandTypeFromValue(params["command"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SendGeneralCommand(r.Context(), sessionIdParam, commandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendMessageCommand - Issues a command to a client to display a message to the user.
func (c *SessionAPIController) SendMessageCommand(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	var textParam string
	if query.Has("text") {
		param := query.Get("text")

		textParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "text"}, nil)
		return
	}
	var headerParam *string
	if query.Has("header") {
		param := query.Get("header")

		headerParam = &param
	} else {
	}
	var timeoutMsParam *int64
	if query.Has("timeoutMs") {
		param, err := parseNumericParameter[int64](
			query.Get("timeoutMs"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		timeoutMsParam = &param
	} else {
	}
	result, err := c.service.SendMessageCommand(r.Context(), sessionIdParam, textParam, headerParam, timeoutMsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendPlaystateCommand - Issues a playstate command to a client.
func (c *SessionAPIController) SendPlaystateCommand(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	commandParam, err := NewPlaystateCommandFromValue(params["command"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var seekPositionTicksParam *int64
	if query.Has("seekPositionTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("seekPositionTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		seekPositionTicksParam = &param
	} else {
	}
	var controllingUserIdParam *string
	if query.Has("controllingUserId") {
		param := query.Get("controllingUserId")

		controllingUserIdParam = &param
	} else {
	}
	result, err := c.service.SendPlaystateCommand(r.Context(), sessionIdParam, commandParam, seekPositionTicksParam, controllingUserIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SendSystemCommand - Issues a system command to a client.
func (c *SessionAPIController) SendSystemCommand(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	sessionIdParam := params["sessionId"]
	if sessionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"sessionId"}, nil)
		return
	}
	commandParam, err := NewGeneralCommandTypeFromValue(params["command"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SendSystemCommand(r.Context(), sessionIdParam, commandParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
