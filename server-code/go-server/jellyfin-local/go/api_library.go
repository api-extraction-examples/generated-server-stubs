/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// LibraryAPIController binds http requests to an api service and writes the service results to the http response
type LibraryAPIController struct {
	service LibraryAPIServicer
	errorHandler ErrorHandler
}

// LibraryAPIOption for how the controller is set up.
type LibraryAPIOption func(*LibraryAPIController)

// WithLibraryAPIErrorHandler inject ErrorHandler into controller
func WithLibraryAPIErrorHandler(h ErrorHandler) LibraryAPIOption {
	return func(c *LibraryAPIController) {
		c.errorHandler = h
	}
}

// NewLibraryAPIController creates a default api controller
func NewLibraryAPIController(s LibraryAPIServicer, opts ...LibraryAPIOption) Router {
	controller := &LibraryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LibraryAPIController
func (c *LibraryAPIController) Routes() Routes {
	return Routes{
		"DeleteItem": Route{
			strings.ToUpper("Delete"),
			"/Items/{itemId}",
			c.DeleteItem,
		},
		"DeleteItems": Route{
			strings.ToUpper("Delete"),
			"/Items",
			c.DeleteItems,
		},
		"GetAncestors": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Ancestors",
			c.GetAncestors,
		},
		"GetCriticReviews": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/CriticReviews",
			c.GetCriticReviews,
		},
		"GetDownload": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Download",
			c.GetDownload,
		},
		"GetFile": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/File",
			c.GetFile,
		},
		"GetItemCounts": Route{
			strings.ToUpper("Get"),
			"/Items/Counts",
			c.GetItemCounts,
		},
		"GetLibraryOptionsInfo": Route{
			strings.ToUpper("Get"),
			"/Libraries/AvailableOptions",
			c.GetLibraryOptionsInfo,
		},
		"GetMediaFolders": Route{
			strings.ToUpper("Get"),
			"/Library/MediaFolders",
			c.GetMediaFolders,
		},
		"GetPhysicalPaths": Route{
			strings.ToUpper("Get"),
			"/Library/PhysicalPaths",
			c.GetPhysicalPaths,
		},
		"GetSimilarAlbums": Route{
			strings.ToUpper("Get"),
			"/Albums/{itemId}/Similar",
			c.GetSimilarAlbums,
		},
		"GetSimilarArtists": Route{
			strings.ToUpper("Get"),
			"/Artists/{itemId}/Similar",
			c.GetSimilarArtists,
		},
		"GetSimilarItems": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Similar",
			c.GetSimilarItems,
		},
		"GetSimilarMovies": Route{
			strings.ToUpper("Get"),
			"/Movies/{itemId}/Similar",
			c.GetSimilarMovies,
		},
		"GetSimilarShows": Route{
			strings.ToUpper("Get"),
			"/Shows/{itemId}/Similar",
			c.GetSimilarShows,
		},
		"GetSimilarTrailers": Route{
			strings.ToUpper("Get"),
			"/Trailers/{itemId}/Similar",
			c.GetSimilarTrailers,
		},
		"GetThemeMedia": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/ThemeMedia",
			c.GetThemeMedia,
		},
		"GetThemeSongs": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/ThemeSongs",
			c.GetThemeSongs,
		},
		"GetThemeVideos": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/ThemeVideos",
			c.GetThemeVideos,
		},
		"PostAddedMovies": Route{
			strings.ToUpper("Post"),
			"/Library/Movies/Added",
			c.PostAddedMovies,
		},
		"PostAddedSeries": Route{
			strings.ToUpper("Post"),
			"/Library/Series/Added",
			c.PostAddedSeries,
		},
		"PostUpdatedMedia": Route{
			strings.ToUpper("Post"),
			"/Library/Media/Updated",
			c.PostUpdatedMedia,
		},
		"PostUpdatedMovies": Route{
			strings.ToUpper("Post"),
			"/Library/Movies/Updated",
			c.PostUpdatedMovies,
		},
		"PostUpdatedSeries": Route{
			strings.ToUpper("Post"),
			"/Library/Series/Updated",
			c.PostUpdatedSeries,
		},
		"RefreshLibrary": Route{
			strings.ToUpper("Get"),
			"/Library/Refresh",
			c.RefreshLibrary,
		},
	}
}

// DeleteItem - Deletes an item from the library and filesystem.
func (c *LibraryAPIController) DeleteItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.DeleteItem(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteItems - Deletes items from the library and filesystem.
func (c *LibraryAPIController) DeleteItems(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	result, err := c.service.DeleteItems(r.Context(), idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetAncestors - Gets all parents of an item.
func (c *LibraryAPIController) GetAncestors(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetAncestors(r.Context(), itemIdParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCriticReviews - Gets critic review for an item.
// Deprecated
func (c *LibraryAPIController) GetCriticReviews(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetCriticReviews(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDownload - Downloads item media.
func (c *LibraryAPIController) GetDownload(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetDownload(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFile - Get the original file of an item.
func (c *LibraryAPIController) GetFile(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetFile(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemCounts - Get item counts.
func (c *LibraryAPIController) GetItemCounts(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	result, err := c.service.GetItemCounts(r.Context(), userIdParam, isFavoriteParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLibraryOptionsInfo - Gets the library options info.
func (c *LibraryAPIController) GetLibraryOptionsInfo(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var libraryContentTypeParam *string
	if query.Has("libraryContentType") {
		param := query.Get("libraryContentType")

		libraryContentTypeParam = &param
	} else {
	}
	var isNewLibraryParam bool
	if query.Has("isNewLibrary") {
		param, err := parseBoolParameter(
			query.Get("isNewLibrary"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isNewLibraryParam = param
	} else {
	}
	result, err := c.service.GetLibraryOptionsInfo(r.Context(), libraryContentTypeParam, isNewLibraryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMediaFolders - Gets all user media folders.
func (c *LibraryAPIController) GetMediaFolders(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var isHiddenParam *bool
	if query.Has("isHidden") {
		param, err := parseBoolParameter(
			query.Get("isHidden"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isHiddenParam = &param
	} else {
	}
	result, err := c.service.GetMediaFolders(r.Context(), isHiddenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPhysicalPaths - Gets a list of physical paths from virtual folders.
func (c *LibraryAPIController) GetPhysicalPaths(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPhysicalPaths(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarAlbums - Gets similar items.
func (c *LibraryAPIController) GetSimilarAlbums(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarAlbums(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarArtists - Gets similar items.
func (c *LibraryAPIController) GetSimilarArtists(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarArtists(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarItems - Gets similar items.
func (c *LibraryAPIController) GetSimilarItems(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarItems(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarMovies - Gets similar items.
func (c *LibraryAPIController) GetSimilarMovies(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarMovies(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarShows - Gets similar items.
func (c *LibraryAPIController) GetSimilarShows(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarShows(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSimilarTrailers - Gets similar items.
func (c *LibraryAPIController) GetSimilarTrailers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var excludeArtistIdsParam []string
	if query.Has("excludeArtistIds") {
		excludeArtistIdsParam = strings.Split(query.Get("excludeArtistIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	result, err := c.service.GetSimilarTrailers(r.Context(), itemIdParam, excludeArtistIdsParam, userIdParam, limitParam, fieldsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetThemeMedia - Get theme songs and videos for an item.
func (c *LibraryAPIController) GetThemeMedia(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var inheritFromParentParam bool
	if query.Has("inheritFromParent") {
		param, err := parseBoolParameter(
			query.Get("inheritFromParent"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		inheritFromParentParam = param
	} else {
		var param bool = false
		inheritFromParentParam = param
	}
	result, err := c.service.GetThemeMedia(r.Context(), itemIdParam, userIdParam, inheritFromParentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetThemeSongs - Get theme songs for an item.
func (c *LibraryAPIController) GetThemeSongs(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var inheritFromParentParam bool
	if query.Has("inheritFromParent") {
		param, err := parseBoolParameter(
			query.Get("inheritFromParent"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		inheritFromParentParam = param
	} else {
		var param bool = false
		inheritFromParentParam = param
	}
	result, err := c.service.GetThemeSongs(r.Context(), itemIdParam, userIdParam, inheritFromParentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetThemeVideos - Get theme videos for an item.
func (c *LibraryAPIController) GetThemeVideos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var inheritFromParentParam bool
	if query.Has("inheritFromParent") {
		param, err := parseBoolParameter(
			query.Get("inheritFromParent"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		inheritFromParentParam = param
	} else {
		var param bool = false
		inheritFromParentParam = param
	}
	result, err := c.service.GetThemeVideos(r.Context(), itemIdParam, userIdParam, inheritFromParentParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostAddedMovies - Reports that new movies have been added by an external source.
func (c *LibraryAPIController) PostAddedMovies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var tmdbIdParam *string
	if query.Has("tmdbId") {
		param := query.Get("tmdbId")

		tmdbIdParam = &param
	} else {
	}
	var imdbIdParam *string
	if query.Has("imdbId") {
		param := query.Get("imdbId")

		imdbIdParam = &param
	} else {
	}
	result, err := c.service.PostAddedMovies(r.Context(), tmdbIdParam, imdbIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostAddedSeries - Reports that new episodes of a series have been added by an external source.
func (c *LibraryAPIController) PostAddedSeries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var tvdbIdParam *string
	if query.Has("tvdbId") {
		param := query.Get("tvdbId")

		tvdbIdParam = &param
	} else {
	}
	result, err := c.service.PostAddedSeries(r.Context(), tvdbIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUpdatedMedia - Reports that new movies have been added by an external source.
func (c *LibraryAPIController) PostUpdatedMedia(w http.ResponseWriter, r *http.Request) {
	mediaUpdateInfoDtoParam := []MediaUpdateInfoDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaUpdateInfoDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range mediaUpdateInfoDtoParam {
		if err := AssertMediaUpdateInfoDtoRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.PostUpdatedMedia(r.Context(), mediaUpdateInfoDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUpdatedMovies - Reports that new movies have been added by an external source.
func (c *LibraryAPIController) PostUpdatedMovies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var tmdbIdParam *string
	if query.Has("tmdbId") {
		param := query.Get("tmdbId")

		tmdbIdParam = &param
	} else {
	}
	var imdbIdParam *string
	if query.Has("imdbId") {
		param := query.Get("imdbId")

		imdbIdParam = &param
	} else {
	}
	result, err := c.service.PostUpdatedMovies(r.Context(), tmdbIdParam, imdbIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUpdatedSeries - Reports that new episodes of a series have been added by an external source.
func (c *LibraryAPIController) PostUpdatedSeries(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var tvdbIdParam *string
	if query.Has("tvdbId") {
		param := query.Get("tvdbId")

		tvdbIdParam = &param
	} else {
	}
	result, err := c.service.PostUpdatedSeries(r.Context(), tvdbIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RefreshLibrary - Starts a library scan.
func (c *LibraryAPIController) RefreshLibrary(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.RefreshLibrary(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
