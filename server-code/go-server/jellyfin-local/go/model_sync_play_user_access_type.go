/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// SyncPlayUserAccessType : Enum SyncPlayUserAccessType.
type SyncPlayUserAccessType string

// List of SyncPlayUserAccessType
const (
	CREATE_AND_JOIN_GROUPS SyncPlayUserAccessType = "CreateAndJoinGroups"
	JOIN_GROUPS SyncPlayUserAccessType = "JoinGroups"
	NONE SyncPlayUserAccessType = "None"
)

// AllowedSyncPlayUserAccessTypeEnumValues is all the allowed values of SyncPlayUserAccessType enum
var AllowedSyncPlayUserAccessTypeEnumValues = []SyncPlayUserAccessType{
	"CreateAndJoinGroups",
	"JoinGroups",
	"None",
}

// validSyncPlayUserAccessTypeEnumValue provides a map of SyncPlayUserAccessTypes for fast verification of use input
var validSyncPlayUserAccessTypeEnumValues = map[SyncPlayUserAccessType]struct{}{
	"CreateAndJoinGroups": {},
	"JoinGroups": {},
	"None": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v SyncPlayUserAccessType) IsValid() bool {
	_, ok := validSyncPlayUserAccessTypeEnumValues[v]
	return ok
}

// NewSyncPlayUserAccessTypeFromValue returns a pointer to a valid SyncPlayUserAccessType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewSyncPlayUserAccessTypeFromValue(v string) (SyncPlayUserAccessType, error) {
	ev := SyncPlayUserAccessType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for SyncPlayUserAccessType: valid values are %v", v, AllowedSyncPlayUserAccessTypeEnumValues)
	}
}



// AssertSyncPlayUserAccessTypeRequired checks if the required fields are not zero-ed
func AssertSyncPlayUserAccessTypeRequired(obj SyncPlayUserAccessType) error {
	return nil
}

// AssertSyncPlayUserAccessTypeConstraints checks if the values respects the defined constraints
func AssertSyncPlayUserAccessTypeConstraints(obj SyncPlayUserAccessType) error {
	return nil
}
