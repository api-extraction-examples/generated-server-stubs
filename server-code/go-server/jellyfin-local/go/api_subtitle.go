/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubtitleAPIController binds http requests to an api service and writes the service results to the http response
type SubtitleAPIController struct {
	service SubtitleAPIServicer
	errorHandler ErrorHandler
}

// SubtitleAPIOption for how the controller is set up.
type SubtitleAPIOption func(*SubtitleAPIController)

// WithSubtitleAPIErrorHandler inject ErrorHandler into controller
func WithSubtitleAPIErrorHandler(h ErrorHandler) SubtitleAPIOption {
	return func(c *SubtitleAPIController) {
		c.errorHandler = h
	}
}

// NewSubtitleAPIController creates a default api controller
func NewSubtitleAPIController(s SubtitleAPIServicer, opts ...SubtitleAPIOption) Router {
	controller := &SubtitleAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubtitleAPIController
func (c *SubtitleAPIController) Routes() Routes {
	return Routes{
		"DeleteSubtitle": Route{
			strings.ToUpper("Delete"),
			"/Videos/{itemId}/Subtitles/{index}",
			c.DeleteSubtitle,
		},
		"DownloadRemoteSubtitles": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/RemoteSearch/Subtitles/{subtitleId}",
			c.DownloadRemoteSubtitles,
		},
		"GetFallbackFont": Route{
			strings.ToUpper("Get"),
			"/FallbackFont/Fonts/{name}",
			c.GetFallbackFont,
		},
		"GetFallbackFontList": Route{
			strings.ToUpper("Get"),
			"/FallbackFont/Fonts",
			c.GetFallbackFontList,
		},
		"GetRemoteSubtitles": Route{
			strings.ToUpper("Get"),
			"/Providers/Subtitles/Subtitles/{id}",
			c.GetRemoteSubtitles,
		},
		"GetSubtitle": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/Stream.{format}",
			c.GetSubtitle,
		},
		"GetSubtitlePlaylist": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/subtitles.m3u8",
			c.GetSubtitlePlaylist,
		},
		"GetSubtitleWithTicks": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/{mediaSourceId}/Subtitles/{index}/{startPositionTicks}/Stream.{format}",
			c.GetSubtitleWithTicks,
		},
		"SearchRemoteSubtitles": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/RemoteSearch/Subtitles/{language}",
			c.SearchRemoteSubtitles,
		},
		"UploadSubtitle": Route{
			strings.ToUpper("Post"),
			"/Videos/{itemId}/Subtitles",
			c.UploadSubtitle,
		},
	}
}

// DeleteSubtitle - Deletes an external subtitle file.
func (c *SubtitleAPIController) DeleteSubtitle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteSubtitle(r.Context(), itemIdParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DownloadRemoteSubtitles - Downloads a remote subtitle.
func (c *SubtitleAPIController) DownloadRemoteSubtitles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	subtitleIdParam := params["subtitleId"]
	if subtitleIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"subtitleId"}, nil)
		return
	}
	result, err := c.service.DownloadRemoteSubtitles(r.Context(), itemIdParam, subtitleIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFallbackFont - Gets a fallback font file.
func (c *SubtitleAPIController) GetFallbackFont(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	result, err := c.service.GetFallbackFont(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFallbackFontList - Gets a list of available fallback font files.
func (c *SubtitleAPIController) GetFallbackFontList(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetFallbackFontList(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRemoteSubtitles - Gets the remote subtitles.
func (c *SubtitleAPIController) GetRemoteSubtitles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	idParam := params["id"]
	if idParam == "" {
		c.errorHandler(w, r, &RequiredError{"id"}, nil)
		return
	}
	result, err := c.service.GetRemoteSubtitles(r.Context(), idParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubtitle - Gets subtitles in a specified format.
func (c *SubtitleAPIController) GetSubtitle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	mediaSourceIdParam := params["mediaSourceId"]
	if mediaSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mediaSourceId"}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	formatParam := params["format"]
	if formatParam == "" {
		c.errorHandler(w, r, &RequiredError{"format"}, nil)
		return
	}
	var endPositionTicksParam *int64
	if query.Has("endPositionTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("endPositionTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endPositionTicksParam = &param
	} else {
	}
	var copyTimestampsParam bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = param
	} else {
		var param bool = false
		copyTimestampsParam = param
	}
	var addVttTimeMapParam bool
	if query.Has("addVttTimeMap") {
		param, err := parseBoolParameter(
			query.Get("addVttTimeMap"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addVttTimeMapParam = param
	} else {
		var param bool = false
		addVttTimeMapParam = param
	}
	var startPositionTicksParam int64
	if query.Has("startPositionTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startPositionTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startPositionTicksParam = param
	} else {
		var param int64 = 0
		startPositionTicksParam = param
	}
	result, err := c.service.GetSubtitle(r.Context(), itemIdParam, mediaSourceIdParam, indexParam, formatParam, endPositionTicksParam, copyTimestampsParam, addVttTimeMapParam, startPositionTicksParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubtitlePlaylist - Gets an HLS subtitle playlist.
func (c *SubtitleAPIController) GetSubtitlePlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	mediaSourceIdParam := params["mediaSourceId"]
	if mediaSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mediaSourceId"}, nil)
		return
	}
	var segmentLengthParam int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "segmentLength"}, nil)
		return
	}
	result, err := c.service.GetSubtitlePlaylist(r.Context(), itemIdParam, indexParam, mediaSourceIdParam, segmentLengthParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSubtitleWithTicks - Gets subtitles in a specified format.
func (c *SubtitleAPIController) GetSubtitleWithTicks(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	mediaSourceIdParam := params["mediaSourceId"]
	if mediaSourceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"mediaSourceId"}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	startPositionTicksParam, err := parseNumericParameter[int64](
		params["startPositionTicks"],
		WithRequire[int64](parseInt64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	formatParam := params["format"]
	if formatParam == "" {
		c.errorHandler(w, r, &RequiredError{"format"}, nil)
		return
	}
	var endPositionTicksParam *int64
	if query.Has("endPositionTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("endPositionTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		endPositionTicksParam = &param
	} else {
	}
	var copyTimestampsParam bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = param
	} else {
		var param bool = false
		copyTimestampsParam = param
	}
	var addVttTimeMapParam bool
	if query.Has("addVttTimeMap") {
		param, err := parseBoolParameter(
			query.Get("addVttTimeMap"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addVttTimeMapParam = param
	} else {
		var param bool = false
		addVttTimeMapParam = param
	}
	result, err := c.service.GetSubtitleWithTicks(r.Context(), itemIdParam, mediaSourceIdParam, indexParam, startPositionTicksParam, formatParam, endPositionTicksParam, copyTimestampsParam, addVttTimeMapParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SearchRemoteSubtitles - Search remote subtitles.
func (c *SubtitleAPIController) SearchRemoteSubtitles(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	languageParam := params["language"]
	if languageParam == "" {
		c.errorHandler(w, r, &RequiredError{"language"}, nil)
		return
	}
	var isPerfectMatchParam *bool
	if query.Has("isPerfectMatch") {
		param, err := parseBoolParameter(
			query.Get("isPerfectMatch"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isPerfectMatchParam = &param
	} else {
	}
	result, err := c.service.SearchRemoteSubtitles(r.Context(), itemIdParam, languageParam, isPerfectMatchParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UploadSubtitle - Upload an external subtitle file.
func (c *SubtitleAPIController) UploadSubtitle(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	uploadSubtitleDtoParam := UploadSubtitleDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&uploadSubtitleDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertUploadSubtitleDtoRequired(uploadSubtitleDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertUploadSubtitleDtoConstraints(uploadSubtitleDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UploadSubtitle(r.Context(), itemIdParam, uploadSubtitleDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
