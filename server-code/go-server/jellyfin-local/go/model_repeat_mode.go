/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type RepeatMode string

// List of RepeatMode
const (
	REPEAT_NONE RepeatMode = "RepeatNone"
	REPEAT_ALL RepeatMode = "RepeatAll"
	REPEAT_ONE RepeatMode = "RepeatOne"
)

// AllowedRepeatModeEnumValues is all the allowed values of RepeatMode enum
var AllowedRepeatModeEnumValues = []RepeatMode{
	"RepeatNone",
	"RepeatAll",
	"RepeatOne",
}

// validRepeatModeEnumValue provides a map of RepeatModes for fast verification of use input
var validRepeatModeEnumValues = map[RepeatMode]struct{}{
	"RepeatNone": {},
	"RepeatAll": {},
	"RepeatOne": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RepeatMode) IsValid() bool {
	_, ok := validRepeatModeEnumValues[v]
	return ok
}

// NewRepeatModeFromValue returns a pointer to a valid RepeatMode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRepeatModeFromValue(v string) (RepeatMode, error) {
	ev := RepeatMode(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RepeatMode: valid values are %v", v, AllowedRepeatModeEnumValues)
	}
}



// AssertRepeatModeRequired checks if the required fields are not zero-ed
func AssertRepeatModeRequired(obj RepeatMode) error {
	return nil
}

// AssertRepeatModeConstraints checks if the values respects the defined constraints
func AssertRepeatModeConstraints(obj RepeatMode) error {
	return nil
}
