/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ImageAPIController binds http requests to an api service and writes the service results to the http response
type ImageAPIController struct {
	service ImageAPIServicer
	errorHandler ErrorHandler
}

// ImageAPIOption for how the controller is set up.
type ImageAPIOption func(*ImageAPIController)

// WithImageAPIErrorHandler inject ErrorHandler into controller
func WithImageAPIErrorHandler(h ErrorHandler) ImageAPIOption {
	return func(c *ImageAPIController) {
		c.errorHandler = h
	}
}

// NewImageAPIController creates a default api controller
func NewImageAPIController(s ImageAPIServicer, opts ...ImageAPIOption) Router {
	controller := &ImageAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ImageAPIController
func (c *ImageAPIController) Routes() Routes {
	return Routes{
		"DeleteItemImage": Route{
			strings.ToUpper("Delete"),
			"/Items/{itemId}/Images/{imageType}",
			c.DeleteItemImage,
		},
		"DeleteItemImageByIndex": Route{
			strings.ToUpper("Delete"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}",
			c.DeleteItemImageByIndex,
		},
		"DeleteUserImage": Route{
			strings.ToUpper("Delete"),
			"/Users/{userId}/Images/{imageType}",
			c.DeleteUserImage,
		},
		"DeleteUserImageByIndex": Route{
			strings.ToUpper("Delete"),
			"/Users/{userId}/Images/{imageType}/{index}",
			c.DeleteUserImageByIndex,
		},
		"GetArtistImage": Route{
			strings.ToUpper("Get"),
			"/Artists/{name}/Images/{imageType}/{imageIndex}",
			c.GetArtistImage,
		},
		"GetGenreImage": Route{
			strings.ToUpper("Get"),
			"/Genres/{name}/Images/{imageType}",
			c.GetGenreImage,
		},
		"GetGenreImageByIndex": Route{
			strings.ToUpper("Get"),
			"/Genres/{name}/Images/{imageType}/{imageIndex}",
			c.GetGenreImageByIndex,
		},
		"GetItemImage": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Images/{imageType}",
			c.GetItemImage,
		},
		"GetItemImage2": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
			c.GetItemImage2,
		},
		"GetItemImageByIndex": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}",
			c.GetItemImageByIndex,
		},
		"GetItemImageInfos": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/Images",
			c.GetItemImageInfos,
		},
		"GetMusicGenreImage": Route{
			strings.ToUpper("Get"),
			"/MusicGenres/{name}/Images/{imageType}",
			c.GetMusicGenreImage,
		},
		"GetMusicGenreImageByIndex": Route{
			strings.ToUpper("Get"),
			"/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
			c.GetMusicGenreImageByIndex,
		},
		"GetPersonImage": Route{
			strings.ToUpper("Get"),
			"/Persons/{name}/Images/{imageType}",
			c.GetPersonImage,
		},
		"GetPersonImageByIndex": Route{
			strings.ToUpper("Get"),
			"/Persons/{name}/Images/{imageType}/{imageIndex}",
			c.GetPersonImageByIndex,
		},
		"GetStudioImage": Route{
			strings.ToUpper("Get"),
			"/Studios/{name}/Images/{imageType}",
			c.GetStudioImage,
		},
		"GetStudioImageByIndex": Route{
			strings.ToUpper("Get"),
			"/Studios/{name}/Images/{imageType}/{imageIndex}",
			c.GetStudioImageByIndex,
		},
		"GetUserImage": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Images/{imageType}",
			c.GetUserImage,
		},
		"GetUserImageByIndex": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Images/{imageType}/{imageIndex}",
			c.GetUserImageByIndex,
		},
		"HeadArtistImage": Route{
			strings.ToUpper("Head"),
			"/Artists/{name}/Images/{imageType}/{imageIndex}",
			c.HeadArtistImage,
		},
		"HeadGenreImage": Route{
			strings.ToUpper("Head"),
			"/Genres/{name}/Images/{imageType}",
			c.HeadGenreImage,
		},
		"HeadGenreImageByIndex": Route{
			strings.ToUpper("Head"),
			"/Genres/{name}/Images/{imageType}/{imageIndex}",
			c.HeadGenreImageByIndex,
		},
		"HeadItemImage": Route{
			strings.ToUpper("Head"),
			"/Items/{itemId}/Images/{imageType}",
			c.HeadItemImage,
		},
		"HeadItemImage2": Route{
			strings.ToUpper("Head"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}/{tag}/{format}/{maxWidth}/{maxHeight}/{percentPlayed}/{unplayedCount}",
			c.HeadItemImage2,
		},
		"HeadItemImageByIndex": Route{
			strings.ToUpper("Head"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}",
			c.HeadItemImageByIndex,
		},
		"HeadMusicGenreImage": Route{
			strings.ToUpper("Head"),
			"/MusicGenres/{name}/Images/{imageType}",
			c.HeadMusicGenreImage,
		},
		"HeadMusicGenreImageByIndex": Route{
			strings.ToUpper("Head"),
			"/MusicGenres/{name}/Images/{imageType}/{imageIndex}",
			c.HeadMusicGenreImageByIndex,
		},
		"HeadPersonImage": Route{
			strings.ToUpper("Head"),
			"/Persons/{name}/Images/{imageType}",
			c.HeadPersonImage,
		},
		"HeadPersonImageByIndex": Route{
			strings.ToUpper("Head"),
			"/Persons/{name}/Images/{imageType}/{imageIndex}",
			c.HeadPersonImageByIndex,
		},
		"HeadStudioImage": Route{
			strings.ToUpper("Head"),
			"/Studios/{name}/Images/{imageType}",
			c.HeadStudioImage,
		},
		"HeadStudioImageByIndex": Route{
			strings.ToUpper("Head"),
			"/Studios/{name}/Images/{imageType}/{imageIndex}",
			c.HeadStudioImageByIndex,
		},
		"HeadUserImage": Route{
			strings.ToUpper("Head"),
			"/Users/{userId}/Images/{imageType}",
			c.HeadUserImage,
		},
		"HeadUserImageByIndex": Route{
			strings.ToUpper("Head"),
			"/Users/{userId}/Images/{imageType}/{imageIndex}",
			c.HeadUserImageByIndex,
		},
		"PostUserImage": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Images/{imageType}",
			c.PostUserImage,
		},
		"PostUserImageByIndex": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Images/{imageType}/{index}",
			c.PostUserImageByIndex,
		},
		"SetItemImage": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/Images/{imageType}",
			c.SetItemImage,
		},
		"SetItemImageByIndex": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}",
			c.SetItemImageByIndex,
		},
		"UpdateItemImageIndex": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/Images/{imageType}/{imageIndex}/Index",
			c.UpdateItemImageIndex,
		},
	}
}

// DeleteItemImage - Delete an item's image.
func (c *ImageAPIController) DeleteItemImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.DeleteItemImage(r.Context(), itemIdParam, imageTypeParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteItemImageByIndex - Delete an item's image.
func (c *ImageAPIController) DeleteItemImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteItemImageByIndex(r.Context(), itemIdParam, imageTypeParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserImage - Delete the user's image.
func (c *ImageAPIController) DeleteUserImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var indexParam *int32
	if query.Has("index") {
		param, err := parseNumericParameter[int32](
			query.Get("index"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		indexParam = &param
	} else {
	}
	result, err := c.service.DeleteUserImage(r.Context(), userIdParam, imageTypeParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteUserImageByIndex - Delete the user's image.
func (c *ImageAPIController) DeleteUserImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.DeleteUserImageByIndex(r.Context(), userIdParam, imageTypeParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetArtistImage - Get artist image by name.
func (c *ImageAPIController) GetArtistImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetArtistImage(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGenreImage - Get genre image by name.
func (c *ImageAPIController) GetGenreImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetGenreImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetGenreImageByIndex - Get genre image by name.
func (c *ImageAPIController) GetGenreImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetGenreImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemImage - Gets the item's image.
func (c *ImageAPIController) GetItemImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetItemImage(r.Context(), itemIdParam, imageTypeParam, maxWidthParam, maxHeightParam, widthParam, heightParam, qualityParam, tagParam, cropWhitespaceParam, formatParam, addPlayedIndicatorParam, percentPlayedParam, unplayedCountParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemImage2 - Gets the item's image.
func (c *ImageAPIController) GetItemImage2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxWidthParam, err := parseNumericParameter[int32](
		params["maxWidth"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxHeightParam, err := parseNumericParameter[int32](
		params["maxHeight"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tagParam := params["tag"]
	if tagParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag"}, nil)
		return
	}
	formatParam, err := NewImageFormatFromValue(params["format"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	percentPlayedParam, err := parseNumericParameter[float64](
		params["percentPlayed"],
		WithRequire[float64](parseFloat64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	unplayedCountParam, err := parseNumericParameter[int32](
		params["unplayedCount"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetItemImage2(r.Context(), itemIdParam, imageTypeParam, maxWidthParam, maxHeightParam, tagParam, formatParam, percentPlayedParam, unplayedCountParam, imageIndexParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemImageByIndex - Gets the item's image.
func (c *ImageAPIController) GetItemImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetItemImageByIndex(r.Context(), itemIdParam, imageTypeParam, imageIndexParam, maxWidthParam, maxHeightParam, widthParam, heightParam, qualityParam, tagParam, cropWhitespaceParam, formatParam, addPlayedIndicatorParam, percentPlayedParam, unplayedCountParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItemImageInfos - Get item image infos.
func (c *ImageAPIController) GetItemImageInfos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetItemImageInfos(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMusicGenreImage - Get music genre image by name.
func (c *ImageAPIController) GetMusicGenreImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetMusicGenreImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMusicGenreImageByIndex - Get music genre image by name.
func (c *ImageAPIController) GetMusicGenreImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetMusicGenreImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonImage - Get person image by name.
func (c *ImageAPIController) GetPersonImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetPersonImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonImageByIndex - Get person image by name.
func (c *ImageAPIController) GetPersonImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetPersonImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStudioImage - Get studio image by name.
func (c *ImageAPIController) GetStudioImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetStudioImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetStudioImageByIndex - Get studio image by name.
func (c *ImageAPIController) GetStudioImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetStudioImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserImage - Get user profile image.
func (c *ImageAPIController) GetUserImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.GetUserImage(r.Context(), userIdParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetUserImageByIndex - Get user profile image.
func (c *ImageAPIController) GetUserImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.GetUserImageByIndex(r.Context(), userIdParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadArtistImage - Get artist image by name.
func (c *ImageAPIController) HeadArtistImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadArtistImage(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadGenreImage - Get genre image by name.
func (c *ImageAPIController) HeadGenreImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadGenreImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadGenreImageByIndex - Get genre image by name.
func (c *ImageAPIController) HeadGenreImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadGenreImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadItemImage - Gets the item's image.
func (c *ImageAPIController) HeadItemImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadItemImage(r.Context(), itemIdParam, imageTypeParam, maxWidthParam, maxHeightParam, widthParam, heightParam, qualityParam, tagParam, cropWhitespaceParam, formatParam, addPlayedIndicatorParam, percentPlayedParam, unplayedCountParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadItemImage2 - Gets the item's image.
func (c *ImageAPIController) HeadItemImage2(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxWidthParam, err := parseNumericParameter[int32](
		params["maxWidth"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	maxHeightParam, err := parseNumericParameter[int32](
		params["maxHeight"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	tagParam := params["tag"]
	if tagParam == "" {
		c.errorHandler(w, r, &RequiredError{"tag"}, nil)
		return
	}
	formatParam, err := NewImageFormatFromValue(params["format"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	percentPlayedParam, err := parseNumericParameter[float64](
		params["percentPlayed"],
		WithRequire[float64](parseFloat64),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	unplayedCountParam, err := parseNumericParameter[int32](
		params["unplayedCount"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadItemImage2(r.Context(), itemIdParam, imageTypeParam, maxWidthParam, maxHeightParam, tagParam, formatParam, percentPlayedParam, unplayedCountParam, imageIndexParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadItemImageByIndex - Gets the item's image.
func (c *ImageAPIController) HeadItemImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadItemImageByIndex(r.Context(), itemIdParam, imageTypeParam, imageIndexParam, maxWidthParam, maxHeightParam, widthParam, heightParam, qualityParam, tagParam, cropWhitespaceParam, formatParam, addPlayedIndicatorParam, percentPlayedParam, unplayedCountParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadMusicGenreImage - Get music genre image by name.
func (c *ImageAPIController) HeadMusicGenreImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadMusicGenreImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadMusicGenreImageByIndex - Get music genre image by name.
func (c *ImageAPIController) HeadMusicGenreImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadMusicGenreImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadPersonImage - Get person image by name.
func (c *ImageAPIController) HeadPersonImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadPersonImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadPersonImageByIndex - Get person image by name.
func (c *ImageAPIController) HeadPersonImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadPersonImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadStudioImage - Get studio image by name.
func (c *ImageAPIController) HeadStudioImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadStudioImage(r.Context(), nameParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadStudioImageByIndex - Get studio image by name.
func (c *ImageAPIController) HeadStudioImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadStudioImageByIndex(r.Context(), nameParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadUserImage - Get user profile image.
func (c *ImageAPIController) HeadUserImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	var imageIndexParam *int32
	if query.Has("imageIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("imageIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageIndexParam = &param
	} else {
	}
	result, err := c.service.HeadUserImage(r.Context(), userIdParam, imageTypeParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadUserImageByIndex - Get user profile image.
func (c *ImageAPIController) HeadUserImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var formatParam ImageFormat
	if query.Has("format") {
		param := ImageFormat(query.Get("format"))

		formatParam = param
	} else {
	}
	var maxWidthParam *int32
	if query.Has("maxWidth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxWidth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxWidthParam = &param
	} else {
	}
	var maxHeightParam *int32
	if query.Has("maxHeight") {
		param, err := parseNumericParameter[int32](
			query.Get("maxHeight"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxHeightParam = &param
	} else {
	}
	var percentPlayedParam *float64
	if query.Has("percentPlayed") {
		param, err := parseNumericParameter[float64](
			query.Get("percentPlayed"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		percentPlayedParam = &param
	} else {
	}
	var unplayedCountParam *int32
	if query.Has("unplayedCount") {
		param, err := parseNumericParameter[int32](
			query.Get("unplayedCount"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		unplayedCountParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var qualityParam *int32
	if query.Has("quality") {
		param, err := parseNumericParameter[int32](
			query.Get("quality"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		qualityParam = &param
	} else {
	}
	var cropWhitespaceParam *bool
	if query.Has("cropWhitespace") {
		param, err := parseBoolParameter(
			query.Get("cropWhitespace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cropWhitespaceParam = &param
	} else {
	}
	var addPlayedIndicatorParam *bool
	if query.Has("addPlayedIndicator") {
		param, err := parseBoolParameter(
			query.Get("addPlayedIndicator"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		addPlayedIndicatorParam = &param
	} else {
	}
	var blurParam *int32
	if query.Has("blur") {
		param, err := parseNumericParameter[int32](
			query.Get("blur"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		blurParam = &param
	} else {
	}
	var backgroundColorParam *string
	if query.Has("backgroundColor") {
		param := query.Get("backgroundColor")

		backgroundColorParam = &param
	} else {
	}
	var foregroundLayerParam *string
	if query.Has("foregroundLayer") {
		param := query.Get("foregroundLayer")

		foregroundLayerParam = &param
	} else {
	}
	result, err := c.service.HeadUserImageByIndex(r.Context(), userIdParam, imageTypeParam, imageIndexParam, tagParam, formatParam, maxWidthParam, maxHeightParam, percentPlayedParam, unplayedCountParam, widthParam, heightParam, qualityParam, cropWhitespaceParam, addPlayedIndicatorParam, blurParam, backgroundColorParam, foregroundLayerParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUserImage - Sets the user image.
func (c *ImageAPIController) PostUserImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var indexParam *int32
	if query.Has("index") {
		param, err := parseNumericParameter[int32](
			query.Get("index"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		indexParam = &param
	} else {
	}
	result, err := c.service.PostUserImage(r.Context(), userIdParam, imageTypeParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// PostUserImageByIndex - Sets the user image.
func (c *ImageAPIController) PostUserImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	indexParam, err := parseNumericParameter[int32](
		params["index"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.PostUserImageByIndex(r.Context(), userIdParam, imageTypeParam, indexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetItemImage - Set item image.
func (c *ImageAPIController) SetItemImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetItemImage(r.Context(), itemIdParam, imageTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// SetItemImageByIndex - Set item image.
func (c *ImageAPIController) SetItemImageByIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	result, err := c.service.SetItemImageByIndex(r.Context(), itemIdParam, imageTypeParam, imageIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateItemImageIndex - Updates the index for an item image.
func (c *ImageAPIController) UpdateItemImageIndex(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	imageTypeParam, err := NewImageTypeFromValue(params["imageType"])
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	imageIndexParam, err := parseNumericParameter[int32](
		params["imageIndex"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var newIndexParam int32
	if query.Has("newIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("newIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		newIndexParam = param
	} else {
	}
	result, err := c.service.UpdateItemImageIndex(r.Context(), itemIdParam, imageTypeParam, imageIndexParam, newIndexParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
