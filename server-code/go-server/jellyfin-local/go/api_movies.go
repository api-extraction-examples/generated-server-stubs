/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// MoviesAPIController binds http requests to an api service and writes the service results to the http response
type MoviesAPIController struct {
	service MoviesAPIServicer
	errorHandler ErrorHandler
}

// MoviesAPIOption for how the controller is set up.
type MoviesAPIOption func(*MoviesAPIController)

// WithMoviesAPIErrorHandler inject ErrorHandler into controller
func WithMoviesAPIErrorHandler(h ErrorHandler) MoviesAPIOption {
	return func(c *MoviesAPIController) {
		c.errorHandler = h
	}
}

// NewMoviesAPIController creates a default api controller
func NewMoviesAPIController(s MoviesAPIServicer, opts ...MoviesAPIOption) Router {
	controller := &MoviesAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the MoviesAPIController
func (c *MoviesAPIController) Routes() Routes {
	return Routes{
		"GetMovieRecommendations": Route{
			strings.ToUpper("Get"),
			"/Movies/Recommendations",
			c.GetMovieRecommendations,
		},
	}
}

// GetMovieRecommendations - Gets movie recommendations.
func (c *MoviesAPIController) GetMovieRecommendations(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var categoryLimitParam int32
	if query.Has("categoryLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("categoryLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		categoryLimitParam = param
	} else {
		var param int32 = 5
		categoryLimitParam = param
	}
	var itemLimitParam int32
	if query.Has("itemLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("itemLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		itemLimitParam = param
	} else {
		var param int32 = 8
		itemLimitParam = param
	}
	result, err := c.service.GetMovieRecommendations(r.Context(), userIdParam, parentIdParam, fieldsParam, categoryLimitParam, itemLimitParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
