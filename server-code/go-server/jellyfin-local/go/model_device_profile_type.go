/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type DeviceProfileType string

// List of DeviceProfileType
const (
	SYSTEM DeviceProfileType = "System"
	USER DeviceProfileType = "User"
)

// AllowedDeviceProfileTypeEnumValues is all the allowed values of DeviceProfileType enum
var AllowedDeviceProfileTypeEnumValues = []DeviceProfileType{
	"System",
	"User",
}

// validDeviceProfileTypeEnumValue provides a map of DeviceProfileTypes for fast verification of use input
var validDeviceProfileTypeEnumValues = map[DeviceProfileType]struct{}{
	"System": {},
	"User": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DeviceProfileType) IsValid() bool {
	_, ok := validDeviceProfileTypeEnumValues[v]
	return ok
}

// NewDeviceProfileTypeFromValue returns a pointer to a valid DeviceProfileType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDeviceProfileTypeFromValue(v string) (DeviceProfileType, error) {
	ev := DeviceProfileType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for DeviceProfileType: valid values are %v", v, AllowedDeviceProfileTypeEnumValues)
	}
}



// AssertDeviceProfileTypeRequired checks if the required fields are not zero-ed
func AssertDeviceProfileTypeRequired(obj DeviceProfileType) error {
	return nil
}

// AssertDeviceProfileTypeConstraints checks if the values respects the defined constraints
func AssertDeviceProfileTypeConstraints(obj DeviceProfileType) error {
	return nil
}
