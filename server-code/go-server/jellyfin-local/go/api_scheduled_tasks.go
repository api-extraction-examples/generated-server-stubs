/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ScheduledTasksAPIController binds http requests to an api service and writes the service results to the http response
type ScheduledTasksAPIController struct {
	service ScheduledTasksAPIServicer
	errorHandler ErrorHandler
}

// ScheduledTasksAPIOption for how the controller is set up.
type ScheduledTasksAPIOption func(*ScheduledTasksAPIController)

// WithScheduledTasksAPIErrorHandler inject ErrorHandler into controller
func WithScheduledTasksAPIErrorHandler(h ErrorHandler) ScheduledTasksAPIOption {
	return func(c *ScheduledTasksAPIController) {
		c.errorHandler = h
	}
}

// NewScheduledTasksAPIController creates a default api controller
func NewScheduledTasksAPIController(s ScheduledTasksAPIServicer, opts ...ScheduledTasksAPIOption) Router {
	controller := &ScheduledTasksAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ScheduledTasksAPIController
func (c *ScheduledTasksAPIController) Routes() Routes {
	return Routes{
		"GetTask": Route{
			strings.ToUpper("Get"),
			"/ScheduledTasks/{taskId}",
			c.GetTask,
		},
		"GetTasks": Route{
			strings.ToUpper("Get"),
			"/ScheduledTasks",
			c.GetTasks,
		},
		"StartTask": Route{
			strings.ToUpper("Post"),
			"/ScheduledTasks/Running/{taskId}",
			c.StartTask,
		},
		"StopTask": Route{
			strings.ToUpper("Delete"),
			"/ScheduledTasks/Running/{taskId}",
			c.StopTask,
		},
		"UpdateTask": Route{
			strings.ToUpper("Post"),
			"/ScheduledTasks/{taskId}/Triggers",
			c.UpdateTask,
		},
	}
}

// GetTask - Get task by id.
func (c *ScheduledTasksAPIController) GetTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.GetTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTasks - Get tasks.
func (c *ScheduledTasksAPIController) GetTasks(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var isHiddenParam *bool
	if query.Has("isHidden") {
		param, err := parseBoolParameter(
			query.Get("isHidden"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isHiddenParam = &param
	} else {
	}
	var isEnabledParam *bool
	if query.Has("isEnabled") {
		param, err := parseBoolParameter(
			query.Get("isEnabled"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isEnabledParam = &param
	} else {
	}
	result, err := c.service.GetTasks(r.Context(), isHiddenParam, isEnabledParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StartTask - Start specified task.
func (c *ScheduledTasksAPIController) StartTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.StartTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// StopTask - Stop specified task.
func (c *ScheduledTasksAPIController) StopTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	result, err := c.service.StopTask(r.Context(), taskIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateTask - Update specified task triggers.
func (c *ScheduledTasksAPIController) UpdateTask(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	taskIdParam := params["taskId"]
	if taskIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"taskId"}, nil)
		return
	}
	taskTriggerInfoParam := []TaskTriggerInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&taskTriggerInfoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	for _, el := range taskTriggerInfoParam {
		if err := AssertTaskTriggerInfoRequired(el); err != nil {
			c.errorHandler(w, r, err, nil)
			return
		}
	}
	result, err := c.service.UpdateTask(r.Context(), taskIdParam, taskTriggerInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
