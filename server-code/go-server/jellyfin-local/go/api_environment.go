/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// EnvironmentAPIController binds http requests to an api service and writes the service results to the http response
type EnvironmentAPIController struct {
	service EnvironmentAPIServicer
	errorHandler ErrorHandler
}

// EnvironmentAPIOption for how the controller is set up.
type EnvironmentAPIOption func(*EnvironmentAPIController)

// WithEnvironmentAPIErrorHandler inject ErrorHandler into controller
func WithEnvironmentAPIErrorHandler(h ErrorHandler) EnvironmentAPIOption {
	return func(c *EnvironmentAPIController) {
		c.errorHandler = h
	}
}

// NewEnvironmentAPIController creates a default api controller
func NewEnvironmentAPIController(s EnvironmentAPIServicer, opts ...EnvironmentAPIOption) Router {
	controller := &EnvironmentAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the EnvironmentAPIController
func (c *EnvironmentAPIController) Routes() Routes {
	return Routes{
		"GetDefaultDirectoryBrowser": Route{
			strings.ToUpper("Get"),
			"/Environment/DefaultDirectoryBrowser",
			c.GetDefaultDirectoryBrowser,
		},
		"GetDirectoryContents": Route{
			strings.ToUpper("Get"),
			"/Environment/DirectoryContents",
			c.GetDirectoryContents,
		},
		"GetDrives": Route{
			strings.ToUpper("Get"),
			"/Environment/Drives",
			c.GetDrives,
		},
		"GetNetworkShares": Route{
			strings.ToUpper("Get"),
			"/Environment/NetworkShares",
			c.GetNetworkShares,
		},
		"GetParentPath": Route{
			strings.ToUpper("Get"),
			"/Environment/ParentPath",
			c.GetParentPath,
		},
		"ValidatePath": Route{
			strings.ToUpper("Post"),
			"/Environment/ValidatePath",
			c.ValidatePath,
		},
	}
}

// GetDefaultDirectoryBrowser - Get Default directory browser.
func (c *EnvironmentAPIController) GetDefaultDirectoryBrowser(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDefaultDirectoryBrowser(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDirectoryContents - Gets the contents of a given directory in the file system.
func (c *EnvironmentAPIController) GetDirectoryContents(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	var includeFilesParam bool
	if query.Has("includeFiles") {
		param, err := parseBoolParameter(
			query.Get("includeFiles"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeFilesParam = param
	} else {
		var param bool = false
		includeFilesParam = param
	}
	var includeDirectoriesParam bool
	if query.Has("includeDirectories") {
		param, err := parseBoolParameter(
			query.Get("includeDirectories"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		includeDirectoriesParam = param
	} else {
		var param bool = false
		includeDirectoriesParam = param
	}
	result, err := c.service.GetDirectoryContents(r.Context(), pathParam, includeFilesParam, includeDirectoriesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDrives - Gets available drives from the server's file system.
func (c *EnvironmentAPIController) GetDrives(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDrives(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNetworkShares - Gets network paths.
// Deprecated
func (c *EnvironmentAPIController) GetNetworkShares(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetNetworkShares(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetParentPath - Gets the parent path of a given path.
func (c *EnvironmentAPIController) GetParentPath(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var pathParam string
	if query.Has("path") {
		param := query.Get("path")

		pathParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "path"}, nil)
		return
	}
	result, err := c.service.GetParentPath(r.Context(), pathParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// ValidatePath - Validates path.
func (c *EnvironmentAPIController) ValidatePath(w http.ResponseWriter, r *http.Request) {
	validatePathDtoParam := ValidatePathDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&validatePathDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertValidatePathDtoRequired(validatePathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertValidatePathDtoConstraints(validatePathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ValidatePath(r.Context(), validatePathDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
