/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemLookupAPIController binds http requests to an api service and writes the service results to the http response
type ItemLookupAPIController struct {
	service ItemLookupAPIServicer
	errorHandler ErrorHandler
}

// ItemLookupAPIOption for how the controller is set up.
type ItemLookupAPIOption func(*ItemLookupAPIController)

// WithItemLookupAPIErrorHandler inject ErrorHandler into controller
func WithItemLookupAPIErrorHandler(h ErrorHandler) ItemLookupAPIOption {
	return func(c *ItemLookupAPIController) {
		c.errorHandler = h
	}
}

// NewItemLookupAPIController creates a default api controller
func NewItemLookupAPIController(s ItemLookupAPIServicer, opts ...ItemLookupAPIOption) Router {
	controller := &ItemLookupAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemLookupAPIController
func (c *ItemLookupAPIController) Routes() Routes {
	return Routes{
		"ApplySearchCriteria": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Apply/{itemId}",
			c.ApplySearchCriteria,
		},
		"GetBookRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Book",
			c.GetBookRemoteSearchResults,
		},
		"GetBoxSetRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/BoxSet",
			c.GetBoxSetRemoteSearchResults,
		},
		"GetExternalIdInfos": Route{
			strings.ToUpper("Get"),
			"/Items/{itemId}/ExternalIdInfos",
			c.GetExternalIdInfos,
		},
		"GetMovieRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Movie",
			c.GetMovieRemoteSearchResults,
		},
		"GetMusicAlbumRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/MusicAlbum",
			c.GetMusicAlbumRemoteSearchResults,
		},
		"GetMusicArtistRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/MusicArtist",
			c.GetMusicArtistRemoteSearchResults,
		},
		"GetMusicVideoRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/MusicVideo",
			c.GetMusicVideoRemoteSearchResults,
		},
		"GetPersonRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Person",
			c.GetPersonRemoteSearchResults,
		},
		"GetRemoteSearchImage": Route{
			strings.ToUpper("Get"),
			"/Items/RemoteSearch/Image",
			c.GetRemoteSearchImage,
		},
		"GetSeriesRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Series",
			c.GetSeriesRemoteSearchResults,
		},
		"GetTrailerRemoteSearchResults": Route{
			strings.ToUpper("Post"),
			"/Items/RemoteSearch/Trailer",
			c.GetTrailerRemoteSearchResults,
		},
	}
}

// ApplySearchCriteria - Applies search criteria to an item and refreshes metadata.
func (c *ItemLookupAPIController) ApplySearchCriteria(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	remoteSearchResultParam := RemoteSearchResult{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&remoteSearchResultParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertRemoteSearchResultRequired(remoteSearchResultParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertRemoteSearchResultConstraints(remoteSearchResultParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	var replaceAllImagesParam bool
	if query.Has("replaceAllImages") {
		param, err := parseBoolParameter(
			query.Get("replaceAllImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		replaceAllImagesParam = param
	} else {
		var param bool = true
		replaceAllImagesParam = param
	}
	result, err := c.service.ApplySearchCriteria(r.Context(), itemIdParam, remoteSearchResultParam, replaceAllImagesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBookRemoteSearchResults - Get book remote search.
func (c *ItemLookupAPIController) GetBookRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	bookInfoRemoteSearchQueryParam := BookInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bookInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBookInfoRemoteSearchQueryRequired(bookInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBookInfoRemoteSearchQueryConstraints(bookInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetBookRemoteSearchResults(r.Context(), bookInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetBoxSetRemoteSearchResults - Get box set remote search.
func (c *ItemLookupAPIController) GetBoxSetRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	boxSetInfoRemoteSearchQueryParam := BoxSetInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&boxSetInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertBoxSetInfoRemoteSearchQueryRequired(boxSetInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertBoxSetInfoRemoteSearchQueryConstraints(boxSetInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetBoxSetRemoteSearchResults(r.Context(), boxSetInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetExternalIdInfos - Get the item's external id info.
func (c *ItemLookupAPIController) GetExternalIdInfos(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetExternalIdInfos(r.Context(), itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMovieRemoteSearchResults - Get movie remote search.
func (c *ItemLookupAPIController) GetMovieRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	movieInfoRemoteSearchQueryParam := MovieInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&movieInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMovieInfoRemoteSearchQueryRequired(movieInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMovieInfoRemoteSearchQueryConstraints(movieInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetMovieRemoteSearchResults(r.Context(), movieInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMusicAlbumRemoteSearchResults - Get music album remote search.
func (c *ItemLookupAPIController) GetMusicAlbumRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	albumInfoRemoteSearchQueryParam := AlbumInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&albumInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertAlbumInfoRemoteSearchQueryRequired(albumInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertAlbumInfoRemoteSearchQueryConstraints(albumInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetMusicAlbumRemoteSearchResults(r.Context(), albumInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMusicArtistRemoteSearchResults - Get music artist remote search.
func (c *ItemLookupAPIController) GetMusicArtistRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	artistInfoRemoteSearchQueryParam := ArtistInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&artistInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertArtistInfoRemoteSearchQueryRequired(artistInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertArtistInfoRemoteSearchQueryConstraints(artistInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetMusicArtistRemoteSearchResults(r.Context(), artistInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMusicVideoRemoteSearchResults - Get music video remote search.
func (c *ItemLookupAPIController) GetMusicVideoRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	musicVideoInfoRemoteSearchQueryParam := MusicVideoInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&musicVideoInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMusicVideoInfoRemoteSearchQueryRequired(musicVideoInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMusicVideoInfoRemoteSearchQueryConstraints(musicVideoInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetMusicVideoRemoteSearchResults(r.Context(), musicVideoInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersonRemoteSearchResults - Get person remote search.
func (c *ItemLookupAPIController) GetPersonRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	personLookupInfoRemoteSearchQueryParam := PersonLookupInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&personLookupInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPersonLookupInfoRemoteSearchQueryRequired(personLookupInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPersonLookupInfoRemoteSearchQueryConstraints(personLookupInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetPersonRemoteSearchResults(r.Context(), personLookupInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRemoteSearchImage - Gets a remote image.
func (c *ItemLookupAPIController) GetRemoteSearchImage(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var imageUrlParam string
	if query.Has("imageUrl") {
		param := query.Get("imageUrl")

		imageUrlParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "imageUrl"}, nil)
		return
	}
	var providerNameParam string
	if query.Has("providerName") {
		param := query.Get("providerName")

		providerNameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "providerName"}, nil)
		return
	}
	result, err := c.service.GetRemoteSearchImage(r.Context(), imageUrlParam, providerNameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSeriesRemoteSearchResults - Get series remote search.
func (c *ItemLookupAPIController) GetSeriesRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	seriesInfoRemoteSearchQueryParam := SeriesInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&seriesInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSeriesInfoRemoteSearchQueryRequired(seriesInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSeriesInfoRemoteSearchQueryConstraints(seriesInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetSeriesRemoteSearchResults(r.Context(), seriesInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetTrailerRemoteSearchResults - Get trailer remote search.
func (c *ItemLookupAPIController) GetTrailerRemoteSearchResults(w http.ResponseWriter, r *http.Request) {
	trailerInfoRemoteSearchQueryParam := TrailerInfoRemoteSearchQuery{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&trailerInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertTrailerInfoRemoteSearchQueryRequired(trailerInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertTrailerInfoRemoteSearchQueryConstraints(trailerInfoRemoteSearchQueryParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.GetTrailerRemoteSearchResults(r.Context(), trailerInfoRemoteSearchQueryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
