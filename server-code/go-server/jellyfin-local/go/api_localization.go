/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// LocalizationAPIController binds http requests to an api service and writes the service results to the http response
type LocalizationAPIController struct {
	service LocalizationAPIServicer
	errorHandler ErrorHandler
}

// LocalizationAPIOption for how the controller is set up.
type LocalizationAPIOption func(*LocalizationAPIController)

// WithLocalizationAPIErrorHandler inject ErrorHandler into controller
func WithLocalizationAPIErrorHandler(h ErrorHandler) LocalizationAPIOption {
	return func(c *LocalizationAPIController) {
		c.errorHandler = h
	}
}

// NewLocalizationAPIController creates a default api controller
func NewLocalizationAPIController(s LocalizationAPIServicer, opts ...LocalizationAPIOption) Router {
	controller := &LocalizationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the LocalizationAPIController
func (c *LocalizationAPIController) Routes() Routes {
	return Routes{
		"GetCountries": Route{
			strings.ToUpper("Get"),
			"/Localization/Countries",
			c.GetCountries,
		},
		"GetCultures": Route{
			strings.ToUpper("Get"),
			"/Localization/Cultures",
			c.GetCultures,
		},
		"GetLocalizationOptions": Route{
			strings.ToUpper("Get"),
			"/Localization/Options",
			c.GetLocalizationOptions,
		},
		"GetParentalRatings": Route{
			strings.ToUpper("Get"),
			"/Localization/ParentalRatings",
			c.GetParentalRatings,
		},
	}
}

// GetCountries - Gets known countries.
func (c *LocalizationAPIController) GetCountries(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCountries(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCultures - Gets known cultures.
func (c *LocalizationAPIController) GetCultures(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetCultures(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLocalizationOptions - Gets localization options.
func (c *LocalizationAPIController) GetLocalizationOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetLocalizationOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetParentalRatings - Gets known parental ratings.
func (c *LocalizationAPIController) GetParentalRatings(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetParentalRatings(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
