/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type MediaProtocol string

// List of MediaProtocol
const (
	FILE MediaProtocol = "File"
	HTTP MediaProtocol = "Http"
	RTMP MediaProtocol = "Rtmp"
	RTSP MediaProtocol = "Rtsp"
	UDP MediaProtocol = "Udp"
	RTP MediaProtocol = "Rtp"
	FTP MediaProtocol = "Ftp"
)

// AllowedMediaProtocolEnumValues is all the allowed values of MediaProtocol enum
var AllowedMediaProtocolEnumValues = []MediaProtocol{
	"File",
	"Http",
	"Rtmp",
	"Rtsp",
	"Udp",
	"Rtp",
	"Ftp",
}

// validMediaProtocolEnumValue provides a map of MediaProtocols for fast verification of use input
var validMediaProtocolEnumValues = map[MediaProtocol]struct{}{
	"File": {},
	"Http": {},
	"Rtmp": {},
	"Rtsp": {},
	"Udp": {},
	"Rtp": {},
	"Ftp": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MediaProtocol) IsValid() bool {
	_, ok := validMediaProtocolEnumValues[v]
	return ok
}

// NewMediaProtocolFromValue returns a pointer to a valid MediaProtocol
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMediaProtocolFromValue(v string) (MediaProtocol, error) {
	ev := MediaProtocol(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for MediaProtocol: valid values are %v", v, AllowedMediaProtocolEnumValues)
	}
}



// AssertMediaProtocolRequired checks if the required fields are not zero-ed
func AssertMediaProtocolRequired(obj MediaProtocol) error {
	return nil
}

// AssertMediaProtocolConstraints checks if the values respects the defined constraints
func AssertMediaProtocolConstraints(obj MediaProtocol) error {
	return nil
}
