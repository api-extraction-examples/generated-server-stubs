/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PluginsAPIController binds http requests to an api service and writes the service results to the http response
type PluginsAPIController struct {
	service PluginsAPIServicer
	errorHandler ErrorHandler
}

// PluginsAPIOption for how the controller is set up.
type PluginsAPIOption func(*PluginsAPIController)

// WithPluginsAPIErrorHandler inject ErrorHandler into controller
func WithPluginsAPIErrorHandler(h ErrorHandler) PluginsAPIOption {
	return func(c *PluginsAPIController) {
		c.errorHandler = h
	}
}

// NewPluginsAPIController creates a default api controller
func NewPluginsAPIController(s PluginsAPIServicer, opts ...PluginsAPIOption) Router {
	controller := &PluginsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PluginsAPIController
func (c *PluginsAPIController) Routes() Routes {
	return Routes{
		"DisablePlugin": Route{
			strings.ToUpper("Post"),
			"/Plugins/{pluginId}/{version}/Disable",
			c.DisablePlugin,
		},
		"EnablePlugin": Route{
			strings.ToUpper("Post"),
			"/Plugins/{pluginId}/{version}/Enable",
			c.EnablePlugin,
		},
		"GetPluginConfiguration": Route{
			strings.ToUpper("Get"),
			"/Plugins/{pluginId}/Configuration",
			c.GetPluginConfiguration,
		},
		"GetPluginImage": Route{
			strings.ToUpper("Get"),
			"/Plugins/{pluginId}/{version}/Image",
			c.GetPluginImage,
		},
		"GetPluginManifest": Route{
			strings.ToUpper("Post"),
			"/Plugins/{pluginId}/Manifest",
			c.GetPluginManifest,
		},
		"GetPlugins": Route{
			strings.ToUpper("Get"),
			"/Plugins",
			c.GetPlugins,
		},
		"UninstallPlugin": Route{
			strings.ToUpper("Delete"),
			"/Plugins/{pluginId}",
			c.UninstallPlugin,
		},
		"UninstallPluginByVersion": Route{
			strings.ToUpper("Delete"),
			"/Plugins/{pluginId}/{version}",
			c.UninstallPluginByVersion,
		},
		"UpdatePluginConfiguration": Route{
			strings.ToUpper("Post"),
			"/Plugins/{pluginId}/Configuration",
			c.UpdatePluginConfiguration,
		},
		"UpdatePluginSecurityInfo": Route{
			strings.ToUpper("Post"),
			"/Plugins/SecurityInfo",
			c.UpdatePluginSecurityInfo,
		},
	}
}

// DisablePlugin - Disable a plugin.
func (c *PluginsAPIController) DisablePlugin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	versionParam := params["version"]
	if versionParam == "" {
		c.errorHandler(w, r, &RequiredError{"version"}, nil)
		return
	}
	result, err := c.service.DisablePlugin(r.Context(), pluginIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// EnablePlugin - Enables a disabled plugin.
func (c *PluginsAPIController) EnablePlugin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	versionParam := params["version"]
	if versionParam == "" {
		c.errorHandler(w, r, &RequiredError{"version"}, nil)
		return
	}
	result, err := c.service.EnablePlugin(r.Context(), pluginIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPluginConfiguration - Gets plugin configuration.
func (c *PluginsAPIController) GetPluginConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	result, err := c.service.GetPluginConfiguration(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPluginImage - Gets a plugin's image.
func (c *PluginsAPIController) GetPluginImage(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	versionParam := params["version"]
	if versionParam == "" {
		c.errorHandler(w, r, &RequiredError{"version"}, nil)
		return
	}
	result, err := c.service.GetPluginImage(r.Context(), pluginIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPluginManifest - Gets a plugin's manifest.
func (c *PluginsAPIController) GetPluginManifest(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	result, err := c.service.GetPluginManifest(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPlugins - Gets a list of currently installed plugins.
func (c *PluginsAPIController) GetPlugins(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetPlugins(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UninstallPlugin - Uninstalls a plugin.
// Deprecated
func (c *PluginsAPIController) UninstallPlugin(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	result, err := c.service.UninstallPlugin(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UninstallPluginByVersion - Uninstalls a plugin by version.
func (c *PluginsAPIController) UninstallPluginByVersion(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	versionParam := params["version"]
	if versionParam == "" {
		c.errorHandler(w, r, &RequiredError{"version"}, nil)
		return
	}
	result, err := c.service.UninstallPluginByVersion(r.Context(), pluginIdParam, versionParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePluginConfiguration - Updates plugin configuration.
func (c *PluginsAPIController) UpdatePluginConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	pluginIdParam := params["pluginId"]
	if pluginIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"pluginId"}, nil)
		return
	}
	result, err := c.service.UpdatePluginConfiguration(r.Context(), pluginIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePluginSecurityInfo - Updates plugin security info.
// Deprecated
func (c *PluginsAPIController) UpdatePluginSecurityInfo(w http.ResponseWriter, r *http.Request) {
	pluginSecurityInfoParam := PluginSecurityInfo{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&pluginSecurityInfoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPluginSecurityInfoRequired(pluginSecurityInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPluginSecurityInfoConstraints(pluginSecurityInfoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePluginSecurityInfo(r.Context(), pluginSecurityInfoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
