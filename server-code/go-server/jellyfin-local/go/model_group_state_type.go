/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// GroupStateType : Enum GroupState.
type GroupStateType string

// List of GroupStateType
const (
	IDLE GroupStateType = "Idle"
	WAITING GroupStateType = "Waiting"
	PAUSED GroupStateType = "Paused"
	PLAYING GroupStateType = "Playing"
)

// AllowedGroupStateTypeEnumValues is all the allowed values of GroupStateType enum
var AllowedGroupStateTypeEnumValues = []GroupStateType{
	"Idle",
	"Waiting",
	"Paused",
	"Playing",
}

// validGroupStateTypeEnumValue provides a map of GroupStateTypes for fast verification of use input
var validGroupStateTypeEnumValues = map[GroupStateType]struct{}{
	"Idle": {},
	"Waiting": {},
	"Paused": {},
	"Playing": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v GroupStateType) IsValid() bool {
	_, ok := validGroupStateTypeEnumValues[v]
	return ok
}

// NewGroupStateTypeFromValue returns a pointer to a valid GroupStateType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewGroupStateTypeFromValue(v string) (GroupStateType, error) {
	ev := GroupStateType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for GroupStateType: valid values are %v", v, AllowedGroupStateTypeEnumValues)
	}
}



// AssertGroupStateTypeRequired checks if the required fields are not zero-ed
func AssertGroupStateTypeRequired(obj GroupStateType) error {
	return nil
}

// AssertGroupStateTypeConstraints checks if the values respects the defined constraints
func AssertGroupStateTypeConstraints(obj GroupStateType) error {
	return nil
}
