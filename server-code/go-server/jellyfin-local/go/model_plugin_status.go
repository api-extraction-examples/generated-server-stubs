/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// PluginStatus : Plugin load status.
type PluginStatus string

// List of PluginStatus
const (
	ACTIVE PluginStatus = "Active"
	RESTART PluginStatus = "Restart"
	DELETED PluginStatus = "Deleted"
	SUPERCEDED PluginStatus = "Superceded"
	MALFUNCTIONED PluginStatus = "Malfunctioned"
	NOT_SUPPORTED PluginStatus = "NotSupported"
	DISABLED PluginStatus = "Disabled"
)

// AllowedPluginStatusEnumValues is all the allowed values of PluginStatus enum
var AllowedPluginStatusEnumValues = []PluginStatus{
	"Active",
	"Restart",
	"Deleted",
	"Superceded",
	"Malfunctioned",
	"NotSupported",
	"Disabled",
}

// validPluginStatusEnumValue provides a map of PluginStatuss for fast verification of use input
var validPluginStatusEnumValues = map[PluginStatus]struct{}{
	"Active": {},
	"Restart": {},
	"Deleted": {},
	"Superceded": {},
	"Malfunctioned": {},
	"NotSupported": {},
	"Disabled": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PluginStatus) IsValid() bool {
	_, ok := validPluginStatusEnumValues[v]
	return ok
}

// NewPluginStatusFromValue returns a pointer to a valid PluginStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPluginStatusFromValue(v string) (PluginStatus, error) {
	ev := PluginStatus(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PluginStatus: valid values are %v", v, AllowedPluginStatusEnumValues)
	}
}



// AssertPluginStatusRequired checks if the required fields are not zero-ed
func AssertPluginStatusRequired(obj PluginStatus) error {
	return nil
}

// AssertPluginStatusConstraints checks if the values respects the defined constraints
func AssertPluginStatusConstraints(obj PluginStatus) error {
	return nil
}
