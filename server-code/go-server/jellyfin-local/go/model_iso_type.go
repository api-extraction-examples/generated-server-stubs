/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// IsoType : Enum IsoType.
type IsoType string

// List of IsoType
const (
	DVD IsoType = "Dvd"
	BLU_RAY IsoType = "BluRay"
)

// AllowedIsoTypeEnumValues is all the allowed values of IsoType enum
var AllowedIsoTypeEnumValues = []IsoType{
	"Dvd",
	"BluRay",
}

// validIsoTypeEnumValue provides a map of IsoTypes for fast verification of use input
var validIsoTypeEnumValues = map[IsoType]struct{}{
	"Dvd": {},
	"BluRay": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v IsoType) IsValid() bool {
	_, ok := validIsoTypeEnumValues[v]
	return ok
}

// NewIsoTypeFromValue returns a pointer to a valid IsoType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewIsoTypeFromValue(v string) (IsoType, error) {
	ev := IsoType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for IsoType: valid values are %v", v, AllowedIsoTypeEnumValues)
	}
}



// AssertIsoTypeRequired checks if the required fields are not zero-ed
func AssertIsoTypeRequired(obj IsoType) error {
	return nil
}

// AssertIsoTypeConstraints checks if the values respects the defined constraints
func AssertIsoTypeConstraints(obj IsoType) error {
	return nil
}
