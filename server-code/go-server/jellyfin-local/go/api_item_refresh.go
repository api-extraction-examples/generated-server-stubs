/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ItemRefreshAPIController binds http requests to an api service and writes the service results to the http response
type ItemRefreshAPIController struct {
	service ItemRefreshAPIServicer
	errorHandler ErrorHandler
}

// ItemRefreshAPIOption for how the controller is set up.
type ItemRefreshAPIOption func(*ItemRefreshAPIController)

// WithItemRefreshAPIErrorHandler inject ErrorHandler into controller
func WithItemRefreshAPIErrorHandler(h ErrorHandler) ItemRefreshAPIOption {
	return func(c *ItemRefreshAPIController) {
		c.errorHandler = h
	}
}

// NewItemRefreshAPIController creates a default api controller
func NewItemRefreshAPIController(s ItemRefreshAPIServicer, opts ...ItemRefreshAPIOption) Router {
	controller := &ItemRefreshAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ItemRefreshAPIController
func (c *ItemRefreshAPIController) Routes() Routes {
	return Routes{
		"Post": Route{
			strings.ToUpper("Post"),
			"/Items/{itemId}/Refresh",
			c.Post,
		},
	}
}

// Post - Refreshes metadata for an item.
func (c *ItemRefreshAPIController) Post(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var metadataRefreshModeParam MetadataRefreshMode
	if query.Has("metadataRefreshMode") {
		param := MetadataRefreshMode(query.Get("metadataRefreshMode"))

		metadataRefreshModeParam = param
	} else {
	}
	var imageRefreshModeParam MetadataRefreshMode
	if query.Has("imageRefreshMode") {
		param := MetadataRefreshMode(query.Get("imageRefreshMode"))

		imageRefreshModeParam = param
	} else {
	}
	var replaceAllMetadataParam bool
	if query.Has("replaceAllMetadata") {
		param, err := parseBoolParameter(
			query.Get("replaceAllMetadata"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		replaceAllMetadataParam = param
	} else {
		var param bool = false
		replaceAllMetadataParam = param
	}
	var replaceAllImagesParam bool
	if query.Has("replaceAllImages") {
		param, err := parseBoolParameter(
			query.Get("replaceAllImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		replaceAllImagesParam = param
	} else {
		var param bool = false
		replaceAllImagesParam = param
	}
	result, err := c.service.Post(r.Context(), itemIdParam, metadataRefreshModeParam, imageRefreshModeParam, replaceAllMetadataParam, replaceAllImagesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
