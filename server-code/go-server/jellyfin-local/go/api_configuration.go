/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ConfigurationAPIController binds http requests to an api service and writes the service results to the http response
type ConfigurationAPIController struct {
	service ConfigurationAPIServicer
	errorHandler ErrorHandler
}

// ConfigurationAPIOption for how the controller is set up.
type ConfigurationAPIOption func(*ConfigurationAPIController)

// WithConfigurationAPIErrorHandler inject ErrorHandler into controller
func WithConfigurationAPIErrorHandler(h ErrorHandler) ConfigurationAPIOption {
	return func(c *ConfigurationAPIController) {
		c.errorHandler = h
	}
}

// NewConfigurationAPIController creates a default api controller
func NewConfigurationAPIController(s ConfigurationAPIServicer, opts ...ConfigurationAPIOption) Router {
	controller := &ConfigurationAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ConfigurationAPIController
func (c *ConfigurationAPIController) Routes() Routes {
	return Routes{
		"GetConfiguration": Route{
			strings.ToUpper("Get"),
			"/System/Configuration",
			c.GetConfiguration,
		},
		"GetDefaultMetadataOptions": Route{
			strings.ToUpper("Get"),
			"/System/Configuration/MetadataOptions/Default",
			c.GetDefaultMetadataOptions,
		},
		"GetNamedConfiguration": Route{
			strings.ToUpper("Get"),
			"/System/Configuration/{key}",
			c.GetNamedConfiguration,
		},
		"UpdateConfiguration": Route{
			strings.ToUpper("Post"),
			"/System/Configuration",
			c.UpdateConfiguration,
		},
		"UpdateMediaEncoderPath": Route{
			strings.ToUpper("Post"),
			"/System/MediaEncoder/Path",
			c.UpdateMediaEncoderPath,
		},
		"UpdateNamedConfiguration": Route{
			strings.ToUpper("Post"),
			"/System/Configuration/{key}",
			c.UpdateNamedConfiguration,
		},
	}
}

// GetConfiguration - Gets application configuration.
func (c *ConfigurationAPIController) GetConfiguration(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetConfiguration(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDefaultMetadataOptions - Gets a default MetadataOptions object.
func (c *ConfigurationAPIController) GetDefaultMetadataOptions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetDefaultMetadataOptions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetNamedConfiguration - Gets a named configuration.
func (c *ConfigurationAPIController) GetNamedConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	keyParam := params["key"]
	if keyParam == "" {
		c.errorHandler(w, r, &RequiredError{"key"}, nil)
		return
	}
	result, err := c.service.GetNamedConfiguration(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateConfiguration - Updates application configuration.
func (c *ConfigurationAPIController) UpdateConfiguration(w http.ResponseWriter, r *http.Request) {
	serverConfigurationParam := ServerConfiguration{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&serverConfigurationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertServerConfigurationRequired(serverConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertServerConfigurationConstraints(serverConfigurationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateConfiguration(r.Context(), serverConfigurationParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateMediaEncoderPath - Updates the path to the media encoder.
func (c *ConfigurationAPIController) UpdateMediaEncoderPath(w http.ResponseWriter, r *http.Request) {
	mediaEncoderPathDtoParam := MediaEncoderPathDto{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&mediaEncoderPathDtoParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertMediaEncoderPathDtoRequired(mediaEncoderPathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertMediaEncoderPathDtoConstraints(mediaEncoderPathDtoParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateMediaEncoderPath(r.Context(), mediaEncoderPathDtoParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateNamedConfiguration - Updates named configuration.
func (c *ConfigurationAPIController) UpdateNamedConfiguration(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	keyParam := params["key"]
	if keyParam == "" {
		c.errorHandler(w, r, &RequiredError{"key"}, nil)
		return
	}
	result, err := c.service.UpdateNamedConfiguration(r.Context(), keyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
