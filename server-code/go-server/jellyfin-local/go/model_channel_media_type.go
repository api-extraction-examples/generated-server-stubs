/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type ChannelMediaType string

// List of ChannelMediaType
const (
	AUDIO ChannelMediaType = "Audio"
	VIDEO ChannelMediaType = "Video"
	PHOTO ChannelMediaType = "Photo"
)

// AllowedChannelMediaTypeEnumValues is all the allowed values of ChannelMediaType enum
var AllowedChannelMediaTypeEnumValues = []ChannelMediaType{
	"Audio",
	"Video",
	"Photo",
}

// validChannelMediaTypeEnumValue provides a map of ChannelMediaTypes for fast verification of use input
var validChannelMediaTypeEnumValues = map[ChannelMediaType]struct{}{
	"Audio": {},
	"Video": {},
	"Photo": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ChannelMediaType) IsValid() bool {
	_, ok := validChannelMediaTypeEnumValues[v]
	return ok
}

// NewChannelMediaTypeFromValue returns a pointer to a valid ChannelMediaType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewChannelMediaTypeFromValue(v string) (ChannelMediaType, error) {
	ev := ChannelMediaType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ChannelMediaType: valid values are %v", v, AllowedChannelMediaTypeEnumValues)
	}
}



// AssertChannelMediaTypeRequired checks if the required fields are not zero-ed
func AssertChannelMediaTypeRequired(obj ChannelMediaType) error {
	return nil
}

// AssertChannelMediaTypeConstraints checks if the values respects the defined constraints
func AssertChannelMediaTypeConstraints(obj ChannelMediaType) error {
	return nil
}
