/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// ImageFormat : Enum ImageOutputFormat.
type ImageFormat string

// List of ImageFormat
const (
	BMP ImageFormat = "Bmp"
	GIF ImageFormat = "Gif"
	JPG ImageFormat = "Jpg"
	PNG ImageFormat = "Png"
	WEBP ImageFormat = "Webp"
)

// AllowedImageFormatEnumValues is all the allowed values of ImageFormat enum
var AllowedImageFormatEnumValues = []ImageFormat{
	"Bmp",
	"Gif",
	"Jpg",
	"Png",
	"Webp",
}

// validImageFormatEnumValue provides a map of ImageFormats for fast verification of use input
var validImageFormatEnumValues = map[ImageFormat]struct{}{
	"Bmp": {},
	"Gif": {},
	"Jpg": {},
	"Png": {},
	"Webp": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ImageFormat) IsValid() bool {
	_, ok := validImageFormatEnumValues[v]
	return ok
}

// NewImageFormatFromValue returns a pointer to a valid ImageFormat
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewImageFormatFromValue(v string) (ImageFormat, error) {
	ev := ImageFormat(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for ImageFormat: valid values are %v", v, AllowedImageFormatEnumValues)
	}
}



// AssertImageFormatRequired checks if the required fields are not zero-ed
func AssertImageFormatRequired(obj ImageFormat) error {
	return nil
}

// AssertImageFormatConstraints checks if the values respects the defined constraints
func AssertImageFormatConstraints(obj ImageFormat) error {
	return nil
}
