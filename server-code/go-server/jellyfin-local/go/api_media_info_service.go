/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"errors"
)

// MediaInfoAPIService is a service that implements the logic for the MediaInfoAPIServicer
// This service should implement the business logic for every endpoint for the MediaInfoAPI API.
// Include any external packages or services that will be required by this service.
type MediaInfoAPIService struct {
}

// NewMediaInfoAPIService creates a default api service
func NewMediaInfoAPIService() MediaInfoAPIServicer {
	return &MediaInfoAPIService{}
}

// CloseLiveStream - Closes a media source.
func (s *MediaInfoAPIService) CloseLiveStream(ctx context.Context, liveStreamId string) (ImplResponse, error) {
	// TODO - update CloseLiveStream with the required logic for this service method.
	// Add api_media_info_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(204, {}) or use other options such as http.Ok ...
	// return Response(204, nil),nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("CloseLiveStream method not implemented")
}

// GetBitrateTestBytes - Tests the network with a request with the size of the bitrate.
func (s *MediaInfoAPIService) GetBitrateTestBytes(ctx context.Context, size int32) (ImplResponse, error) {
	// TODO - update GetBitrateTestBytes with the required logic for this service method.
	// Add api_media_info_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, *os.File{}) or use other options such as http.Ok ...
	// return Response(200, *os.File{}), nil

	// TODO: Uncomment the next line to return response Response(400, ProblemDetails{}) or use other options such as http.Ok ...
	// return Response(400, ProblemDetails{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetBitrateTestBytes method not implemented")
}

// GetPlaybackInfo - Gets live playback media info for an item.
func (s *MediaInfoAPIService) GetPlaybackInfo(ctx context.Context, itemId string, userId string) (ImplResponse, error) {
	// TODO - update GetPlaybackInfo with the required logic for this service method.
	// Add api_media_info_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PlaybackInfoResponse{}) or use other options such as http.Ok ...
	// return Response(200, PlaybackInfoResponse{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPlaybackInfo method not implemented")
}

// GetPostedPlaybackInfo - Gets live playback media info for an item.
func (s *MediaInfoAPIService) GetPostedPlaybackInfo(ctx context.Context, itemId string, userId *string, maxStreamingBitrate *int32, startTimeTicks *int64, audioStreamIndex *int32, subtitleStreamIndex *int32, maxAudioChannels *int32, mediaSourceId *string, liveStreamId *string, autoOpenLiveStream *bool, enableDirectPlay *bool, enableDirectStream *bool, enableTranscoding *bool, allowVideoStreamCopy *bool, allowAudioStreamCopy *bool, playbackInfoDto PlaybackInfoDto) (ImplResponse, error) {
	// TODO - update GetPostedPlaybackInfo with the required logic for this service method.
	// Add api_media_info_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, PlaybackInfoResponse{}) or use other options such as http.Ok ...
	// return Response(200, PlaybackInfoResponse{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetPostedPlaybackInfo method not implemented")
}

// OpenLiveStream - Opens a media source.
func (s *MediaInfoAPIService) OpenLiveStream(ctx context.Context, openToken *string, userId *string, playSessionId *string, maxStreamingBitrate *int32, startTimeTicks *int64, audioStreamIndex *int32, subtitleStreamIndex *int32, maxAudioChannels *int32, itemId *string, enableDirectPlay *bool, enableDirectStream *bool, openLiveStreamDto OpenLiveStreamDto) (ImplResponse, error) {
	// TODO - update OpenLiveStream with the required logic for this service method.
	// Add api_media_info_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	// TODO: Uncomment the next line to return response Response(200, LiveStreamResponse{}) or use other options such as http.Ok ...
	// return Response(200, LiveStreamResponse{}), nil

	// TODO: Uncomment the next line to return response Response(401, {}) or use other options such as http.Ok ...
	// return Response(401, nil),nil

	// TODO: Uncomment the next line to return response Response(403, {}) or use other options such as http.Ok ...
	// return Response(403, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("OpenLiveStream method not implemented")
}
