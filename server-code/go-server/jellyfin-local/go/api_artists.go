/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// ArtistsAPIController binds http requests to an api service and writes the service results to the http response
type ArtistsAPIController struct {
	service ArtistsAPIServicer
	errorHandler ErrorHandler
}

// ArtistsAPIOption for how the controller is set up.
type ArtistsAPIOption func(*ArtistsAPIController)

// WithArtistsAPIErrorHandler inject ErrorHandler into controller
func WithArtistsAPIErrorHandler(h ErrorHandler) ArtistsAPIOption {
	return func(c *ArtistsAPIController) {
		c.errorHandler = h
	}
}

// NewArtistsAPIController creates a default api controller
func NewArtistsAPIController(s ArtistsAPIServicer, opts ...ArtistsAPIOption) Router {
	controller := &ArtistsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ArtistsAPIController
func (c *ArtistsAPIController) Routes() Routes {
	return Routes{
		"GetAlbumArtists": Route{
			strings.ToUpper("Get"),
			"/Artists/AlbumArtists",
			c.GetAlbumArtists,
		},
		"GetArtistByName": Route{
			strings.ToUpper("Get"),
			"/Artists/{name}",
			c.GetArtistByName,
		},
		"GetArtists": Route{
			strings.ToUpper("Get"),
			"/Artists",
			c.GetArtists,
		},
	}
}

// GetAlbumArtists - Gets all album artists from a given item, folder, or the entire library.
func (c *ArtistsAPIController) GetAlbumArtists(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var minCommunityRatingParam *float64
	if query.Has("minCommunityRating") {
		param, err := parseNumericParameter[float64](
			query.Get("minCommunityRating"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minCommunityRatingParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var searchTermParam *string
	if query.Has("searchTerm") {
		param := query.Get("searchTerm")

		searchTermParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var excludeItemTypesParam []string
	if query.Has("excludeItemTypes") {
		excludeItemTypesParam = strings.Split(query.Get("excludeItemTypes"), ",")
	}
	var includeItemTypesParam []string
	if query.Has("includeItemTypes") {
		includeItemTypesParam = strings.Split(query.Get("includeItemTypes"), ",")
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	var mediaTypesParam []string
	if query.Has("mediaTypes") {
		mediaTypesParam = strings.Split(query.Get("mediaTypes"), ",")
	}
	var genresParam []string
	if query.Has("genres") {
		genresParam = strings.Split(query.Get("genres"), ",")
	}
	var genreIdsParam []string
	if query.Has("genreIds") {
		genreIdsParam = strings.Split(query.Get("genreIds"), ",")
	}
	var officialRatingsParam []string
	if query.Has("officialRatings") {
		officialRatingsParam = strings.Split(query.Get("officialRatings"), ",")
	}
	var tagsParam []string
	if query.Has("tags") {
		tagsParam = strings.Split(query.Get("tags"), ",")
	}
	yearsParam, err := parseNumericArrayParameter[int32](
		query.Get("years"), ",", false,
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var personParam *string
	if query.Has("person") {
		param := query.Get("person")

		personParam = &param
	} else {
	}
	var personIdsParam []string
	if query.Has("personIds") {
		personIdsParam = strings.Split(query.Get("personIds"), ",")
	}
	var personTypesParam []string
	if query.Has("personTypes") {
		personTypesParam = strings.Split(query.Get("personTypes"), ",")
	}
	var studiosParam []string
	if query.Has("studios") {
		studiosParam = strings.Split(query.Get("studios"), ",")
	}
	var studioIdsParam []string
	if query.Has("studioIds") {
		studioIdsParam = strings.Split(query.Get("studioIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var nameStartsWithOrGreaterParam *string
	if query.Has("nameStartsWithOrGreater") {
		param := query.Get("nameStartsWithOrGreater")

		nameStartsWithOrGreaterParam = &param
	} else {
	}
	var nameStartsWithParam *string
	if query.Has("nameStartsWith") {
		param := query.Get("nameStartsWith")

		nameStartsWithParam = &param
	} else {
	}
	var nameLessThanParam *string
	if query.Has("nameLessThan") {
		param := query.Get("nameLessThan")

		nameLessThanParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
		var param bool = true
		enableImagesParam = &param
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetAlbumArtists(r.Context(), minCommunityRatingParam, startIndexParam, limitParam, searchTermParam, parentIdParam, fieldsParam, excludeItemTypesParam, includeItemTypesParam, filtersParam, isFavoriteParam, mediaTypesParam, genresParam, genreIdsParam, officialRatingsParam, tagsParam, yearsParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam, personParam, personIdsParam, personTypesParam, studiosParam, studioIdsParam, userIdParam, nameStartsWithOrGreaterParam, nameStartsWithParam, nameLessThanParam, enableImagesParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetArtistByName - Gets an artist by name.
func (c *ArtistsAPIController) GetArtistByName(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetArtistByName(r.Context(), nameParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetArtists - Gets all artists from a given item, folder, or the entire library.
func (c *ArtistsAPIController) GetArtists(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var minCommunityRatingParam *float64
	if query.Has("minCommunityRating") {
		param, err := parseNumericParameter[float64](
			query.Get("minCommunityRating"),
			WithParse[float64](parseFloat64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minCommunityRatingParam = &param
	} else {
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var searchTermParam *string
	if query.Has("searchTerm") {
		param := query.Get("searchTerm")

		searchTermParam = &param
	} else {
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var excludeItemTypesParam []string
	if query.Has("excludeItemTypes") {
		excludeItemTypesParam = strings.Split(query.Get("excludeItemTypes"), ",")
	}
	var includeItemTypesParam []string
	if query.Has("includeItemTypes") {
		includeItemTypesParam = strings.Split(query.Get("includeItemTypes"), ",")
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	var mediaTypesParam []string
	if query.Has("mediaTypes") {
		mediaTypesParam = strings.Split(query.Get("mediaTypes"), ",")
	}
	var genresParam []string
	if query.Has("genres") {
		genresParam = strings.Split(query.Get("genres"), ",")
	}
	var genreIdsParam []string
	if query.Has("genreIds") {
		genreIdsParam = strings.Split(query.Get("genreIds"), ",")
	}
	var officialRatingsParam []string
	if query.Has("officialRatings") {
		officialRatingsParam = strings.Split(query.Get("officialRatings"), ",")
	}
	var tagsParam []string
	if query.Has("tags") {
		tagsParam = strings.Split(query.Get("tags"), ",")
	}
	yearsParam, err := parseNumericArrayParameter[int32](
		query.Get("years"), ",", false,
		WithParse[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var personParam *string
	if query.Has("person") {
		param := query.Get("person")

		personParam = &param
	} else {
	}
	var personIdsParam []string
	if query.Has("personIds") {
		personIdsParam = strings.Split(query.Get("personIds"), ",")
	}
	var personTypesParam []string
	if query.Has("personTypes") {
		personTypesParam = strings.Split(query.Get("personTypes"), ",")
	}
	var studiosParam []string
	if query.Has("studios") {
		studiosParam = strings.Split(query.Get("studios"), ",")
	}
	var studioIdsParam []string
	if query.Has("studioIds") {
		studioIdsParam = strings.Split(query.Get("studioIds"), ",")
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var nameStartsWithOrGreaterParam *string
	if query.Has("nameStartsWithOrGreater") {
		param := query.Get("nameStartsWithOrGreater")

		nameStartsWithOrGreaterParam = &param
	} else {
	}
	var nameStartsWithParam *string
	if query.Has("nameStartsWith") {
		param := query.Get("nameStartsWith")

		nameStartsWithParam = &param
	} else {
	}
	var nameLessThanParam *string
	if query.Has("nameLessThan") {
		param := query.Get("nameLessThan")

		nameLessThanParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
		var param bool = true
		enableImagesParam = &param
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = true
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetArtists(r.Context(), minCommunityRatingParam, startIndexParam, limitParam, searchTermParam, parentIdParam, fieldsParam, excludeItemTypesParam, includeItemTypesParam, filtersParam, isFavoriteParam, mediaTypesParam, genresParam, genreIdsParam, officialRatingsParam, tagsParam, yearsParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam, personParam, personIdsParam, personTypesParam, studiosParam, studioIdsParam, userIdParam, nameStartsWithOrGreaterParam, nameStartsWithParam, nameLessThanParam, enableImagesParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
