/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"time"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
	"reflect"
)



// ActivityLogAPIRouter defines the required methods for binding the api requests to a responses for the ActivityLogAPI
// The ActivityLogAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ActivityLogAPIServicer to perform the required actions, then write the service results to the http response.
type ActivityLogAPIRouter interface { 
	GetLogEntries(http.ResponseWriter, *http.Request)
}
// ApiKeyAPIRouter defines the required methods for binding the api requests to a responses for the ApiKeyAPI
// The ApiKeyAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ApiKeyAPIServicer to perform the required actions, then write the service results to the http response.
type ApiKeyAPIRouter interface { 
	CreateKey(http.ResponseWriter, *http.Request)
	GetKeys(http.ResponseWriter, *http.Request)
	RevokeKey(http.ResponseWriter, *http.Request)
}
// ArtistsAPIRouter defines the required methods for binding the api requests to a responses for the ArtistsAPI
// The ArtistsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ArtistsAPIServicer to perform the required actions, then write the service results to the http response.
type ArtistsAPIRouter interface { 
	GetAlbumArtists(http.ResponseWriter, *http.Request)
	GetArtistByName(http.ResponseWriter, *http.Request)
	GetArtists(http.ResponseWriter, *http.Request)
}
// AudioAPIRouter defines the required methods for binding the api requests to a responses for the AudioAPI
// The AudioAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AudioAPIServicer to perform the required actions, then write the service results to the http response.
type AudioAPIRouter interface { 
	GetAudioStream(http.ResponseWriter, *http.Request)
	GetAudioStreamByContainer(http.ResponseWriter, *http.Request)
	HeadAudioStream(http.ResponseWriter, *http.Request)
	HeadAudioStreamByContainer(http.ResponseWriter, *http.Request)
}
// BrandingAPIRouter defines the required methods for binding the api requests to a responses for the BrandingAPI
// The BrandingAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BrandingAPIServicer to perform the required actions, then write the service results to the http response.
type BrandingAPIRouter interface { 
	GetBrandingCss(http.ResponseWriter, *http.Request)
	GetBrandingCss2(http.ResponseWriter, *http.Request)
	GetBrandingOptions(http.ResponseWriter, *http.Request)
}
// ChannelsAPIRouter defines the required methods for binding the api requests to a responses for the ChannelsAPI
// The ChannelsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ChannelsAPIServicer to perform the required actions, then write the service results to the http response.
type ChannelsAPIRouter interface { 
	GetAllChannelFeatures(http.ResponseWriter, *http.Request)
	GetChannelFeatures(http.ResponseWriter, *http.Request)
	GetChannelItems(http.ResponseWriter, *http.Request)
	GetChannels(http.ResponseWriter, *http.Request)
	GetLatestChannelItems(http.ResponseWriter, *http.Request)
}
// CollectionAPIRouter defines the required methods for binding the api requests to a responses for the CollectionAPI
// The CollectionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a CollectionAPIServicer to perform the required actions, then write the service results to the http response.
type CollectionAPIRouter interface { 
	AddToCollection(http.ResponseWriter, *http.Request)
	CreateCollection(http.ResponseWriter, *http.Request)
	RemoveFromCollection(http.ResponseWriter, *http.Request)
}
// ConfigurationAPIRouter defines the required methods for binding the api requests to a responses for the ConfigurationAPI
// The ConfigurationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ConfigurationAPIServicer to perform the required actions, then write the service results to the http response.
type ConfigurationAPIRouter interface { 
	GetConfiguration(http.ResponseWriter, *http.Request)
	GetDefaultMetadataOptions(http.ResponseWriter, *http.Request)
	GetNamedConfiguration(http.ResponseWriter, *http.Request)
	UpdateConfiguration(http.ResponseWriter, *http.Request)
	UpdateMediaEncoderPath(http.ResponseWriter, *http.Request)
	UpdateNamedConfiguration(http.ResponseWriter, *http.Request)
}
// DashboardAPIRouter defines the required methods for binding the api requests to a responses for the DashboardAPI
// The DashboardAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DashboardAPIServicer to perform the required actions, then write the service results to the http response.
type DashboardAPIRouter interface { 
	GetConfigurationPages(http.ResponseWriter, *http.Request)
	GetDashboardConfigurationPage(http.ResponseWriter, *http.Request)
}
// DevicesAPIRouter defines the required methods for binding the api requests to a responses for the DevicesAPI
// The DevicesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DevicesAPIServicer to perform the required actions, then write the service results to the http response.
type DevicesAPIRouter interface { 
	DeleteDevice(http.ResponseWriter, *http.Request)
	GetDeviceInfo(http.ResponseWriter, *http.Request)
	GetDeviceOptions(http.ResponseWriter, *http.Request)
	GetDevices(http.ResponseWriter, *http.Request)
	UpdateDeviceOptions(http.ResponseWriter, *http.Request)
}
// DisplayPreferencesAPIRouter defines the required methods for binding the api requests to a responses for the DisplayPreferencesAPI
// The DisplayPreferencesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DisplayPreferencesAPIServicer to perform the required actions, then write the service results to the http response.
type DisplayPreferencesAPIRouter interface { 
	GetDisplayPreferences(http.ResponseWriter, *http.Request)
	UpdateDisplayPreferences(http.ResponseWriter, *http.Request)
}
// DlnaAPIRouter defines the required methods for binding the api requests to a responses for the DlnaAPI
// The DlnaAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DlnaAPIServicer to perform the required actions, then write the service results to the http response.
type DlnaAPIRouter interface { 
	CreateProfile(http.ResponseWriter, *http.Request)
	DeleteProfile(http.ResponseWriter, *http.Request)
	GetDefaultProfile(http.ResponseWriter, *http.Request)
	GetProfile(http.ResponseWriter, *http.Request)
	GetProfileInfos(http.ResponseWriter, *http.Request)
	UpdateProfile(http.ResponseWriter, *http.Request)
}
// DlnaServerAPIRouter defines the required methods for binding the api requests to a responses for the DlnaServerAPI
// The DlnaServerAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DlnaServerAPIServicer to perform the required actions, then write the service results to the http response.
type DlnaServerAPIRouter interface { 
	GetConnectionManager(http.ResponseWriter, *http.Request)
	GetConnectionManager2(http.ResponseWriter, *http.Request)
	GetConnectionManager3(http.ResponseWriter, *http.Request)
	GetContentDirectory(http.ResponseWriter, *http.Request)
	GetContentDirectory2(http.ResponseWriter, *http.Request)
	GetContentDirectory3(http.ResponseWriter, *http.Request)
	GetDescriptionXml(http.ResponseWriter, *http.Request)
	GetDescriptionXml2(http.ResponseWriter, *http.Request)
	GetIcon(http.ResponseWriter, *http.Request)
	GetIconId(http.ResponseWriter, *http.Request)
	GetMediaReceiverRegistrar(http.ResponseWriter, *http.Request)
	GetMediaReceiverRegistrar2(http.ResponseWriter, *http.Request)
	GetMediaReceiverRegistrar3(http.ResponseWriter, *http.Request)
	ProcessConnectionManagerControlRequest(http.ResponseWriter, *http.Request)
	ProcessContentDirectoryControlRequest(http.ResponseWriter, *http.Request)
	ProcessMediaReceiverRegistrarControlRequest(http.ResponseWriter, *http.Request)
}
// DynamicHlsAPIRouter defines the required methods for binding the api requests to a responses for the DynamicHlsAPI
// The DynamicHlsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DynamicHlsAPIServicer to perform the required actions, then write the service results to the http response.
type DynamicHlsAPIRouter interface { 
	GetHlsAudioSegment(http.ResponseWriter, *http.Request)
	GetHlsVideoSegment(http.ResponseWriter, *http.Request)
	GetMasterHlsAudioPlaylist(http.ResponseWriter, *http.Request)
	GetMasterHlsVideoPlaylist(http.ResponseWriter, *http.Request)
	GetVariantHlsAudioPlaylist(http.ResponseWriter, *http.Request)
	GetVariantHlsVideoPlaylist(http.ResponseWriter, *http.Request)
	HeadMasterHlsAudioPlaylist(http.ResponseWriter, *http.Request)
	HeadMasterHlsVideoPlaylist(http.ResponseWriter, *http.Request)
}
// EnvironmentAPIRouter defines the required methods for binding the api requests to a responses for the EnvironmentAPI
// The EnvironmentAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EnvironmentAPIServicer to perform the required actions, then write the service results to the http response.
type EnvironmentAPIRouter interface { 
	GetDefaultDirectoryBrowser(http.ResponseWriter, *http.Request)
	GetDirectoryContents(http.ResponseWriter, *http.Request)
	GetDrives(http.ResponseWriter, *http.Request)
	// Deprecated
	GetNetworkShares(http.ResponseWriter, *http.Request)
	GetParentPath(http.ResponseWriter, *http.Request)
	ValidatePath(http.ResponseWriter, *http.Request)
}
// FilterAPIRouter defines the required methods for binding the api requests to a responses for the FilterAPI
// The FilterAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FilterAPIServicer to perform the required actions, then write the service results to the http response.
type FilterAPIRouter interface { 
	GetQueryFilters(http.ResponseWriter, *http.Request)
	GetQueryFiltersLegacy(http.ResponseWriter, *http.Request)
}
// GenresAPIRouter defines the required methods for binding the api requests to a responses for the GenresAPI
// The GenresAPIRouter implementation should parse necessary information from the http request,
// pass the data to a GenresAPIServicer to perform the required actions, then write the service results to the http response.
type GenresAPIRouter interface { 
	GetGenre(http.ResponseWriter, *http.Request)
	GetGenres(http.ResponseWriter, *http.Request)
}
// HlsSegmentAPIRouter defines the required methods for binding the api requests to a responses for the HlsSegmentAPI
// The HlsSegmentAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HlsSegmentAPIServicer to perform the required actions, then write the service results to the http response.
type HlsSegmentAPIRouter interface { 
	GetHlsAudioSegmentLegacyAac(http.ResponseWriter, *http.Request)
	GetHlsAudioSegmentLegacyMp3(http.ResponseWriter, *http.Request)
	GetHlsPlaylistLegacy(http.ResponseWriter, *http.Request)
	GetHlsVideoSegmentLegacy(http.ResponseWriter, *http.Request)
	StopEncodingProcess(http.ResponseWriter, *http.Request)
}
// ImageAPIRouter defines the required methods for binding the api requests to a responses for the ImageAPI
// The ImageAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ImageAPIServicer to perform the required actions, then write the service results to the http response.
type ImageAPIRouter interface { 
	DeleteItemImage(http.ResponseWriter, *http.Request)
	DeleteItemImageByIndex(http.ResponseWriter, *http.Request)
	DeleteUserImage(http.ResponseWriter, *http.Request)
	DeleteUserImageByIndex(http.ResponseWriter, *http.Request)
	GetArtistImage(http.ResponseWriter, *http.Request)
	GetGenreImage(http.ResponseWriter, *http.Request)
	GetGenreImageByIndex(http.ResponseWriter, *http.Request)
	GetItemImage(http.ResponseWriter, *http.Request)
	GetItemImage2(http.ResponseWriter, *http.Request)
	GetItemImageByIndex(http.ResponseWriter, *http.Request)
	GetItemImageInfos(http.ResponseWriter, *http.Request)
	GetMusicGenreImage(http.ResponseWriter, *http.Request)
	GetMusicGenreImageByIndex(http.ResponseWriter, *http.Request)
	GetPersonImage(http.ResponseWriter, *http.Request)
	GetPersonImageByIndex(http.ResponseWriter, *http.Request)
	GetStudioImage(http.ResponseWriter, *http.Request)
	GetStudioImageByIndex(http.ResponseWriter, *http.Request)
	GetUserImage(http.ResponseWriter, *http.Request)
	GetUserImageByIndex(http.ResponseWriter, *http.Request)
	HeadArtistImage(http.ResponseWriter, *http.Request)
	HeadGenreImage(http.ResponseWriter, *http.Request)
	HeadGenreImageByIndex(http.ResponseWriter, *http.Request)
	HeadItemImage(http.ResponseWriter, *http.Request)
	HeadItemImage2(http.ResponseWriter, *http.Request)
	HeadItemImageByIndex(http.ResponseWriter, *http.Request)
	HeadMusicGenreImage(http.ResponseWriter, *http.Request)
	HeadMusicGenreImageByIndex(http.ResponseWriter, *http.Request)
	HeadPersonImage(http.ResponseWriter, *http.Request)
	HeadPersonImageByIndex(http.ResponseWriter, *http.Request)
	HeadStudioImage(http.ResponseWriter, *http.Request)
	HeadStudioImageByIndex(http.ResponseWriter, *http.Request)
	HeadUserImage(http.ResponseWriter, *http.Request)
	HeadUserImageByIndex(http.ResponseWriter, *http.Request)
	PostUserImage(http.ResponseWriter, *http.Request)
	PostUserImageByIndex(http.ResponseWriter, *http.Request)
	SetItemImage(http.ResponseWriter, *http.Request)
	SetItemImageByIndex(http.ResponseWriter, *http.Request)
	UpdateItemImageIndex(http.ResponseWriter, *http.Request)
}
// ImageByNameAPIRouter defines the required methods for binding the api requests to a responses for the ImageByNameAPI
// The ImageByNameAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ImageByNameAPIServicer to perform the required actions, then write the service results to the http response.
type ImageByNameAPIRouter interface { 
	GetGeneralImage(http.ResponseWriter, *http.Request)
	GetGeneralImages(http.ResponseWriter, *http.Request)
	GetMediaInfoImage(http.ResponseWriter, *http.Request)
	GetMediaInfoImages(http.ResponseWriter, *http.Request)
	GetRatingImage(http.ResponseWriter, *http.Request)
	GetRatingImages(http.ResponseWriter, *http.Request)
}
// InstantMixAPIRouter defines the required methods for binding the api requests to a responses for the InstantMixAPI
// The InstantMixAPIRouter implementation should parse necessary information from the http request,
// pass the data to a InstantMixAPIServicer to perform the required actions, then write the service results to the http response.
type InstantMixAPIRouter interface { 
	GetInstantMixFromAlbum(http.ResponseWriter, *http.Request)
	GetInstantMixFromArtists(http.ResponseWriter, *http.Request)
	GetInstantMixFromItem(http.ResponseWriter, *http.Request)
	GetInstantMixFromMusicGenre(http.ResponseWriter, *http.Request)
	GetInstantMixFromMusicGenres(http.ResponseWriter, *http.Request)
	GetInstantMixFromPlaylist(http.ResponseWriter, *http.Request)
	GetInstantMixFromSong(http.ResponseWriter, *http.Request)
}
// ItemLookupAPIRouter defines the required methods for binding the api requests to a responses for the ItemLookupAPI
// The ItemLookupAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemLookupAPIServicer to perform the required actions, then write the service results to the http response.
type ItemLookupAPIRouter interface { 
	ApplySearchCriteria(http.ResponseWriter, *http.Request)
	GetBookRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetBoxSetRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetExternalIdInfos(http.ResponseWriter, *http.Request)
	GetMovieRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetMusicAlbumRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetMusicArtistRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetMusicVideoRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetPersonRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetRemoteSearchImage(http.ResponseWriter, *http.Request)
	GetSeriesRemoteSearchResults(http.ResponseWriter, *http.Request)
	GetTrailerRemoteSearchResults(http.ResponseWriter, *http.Request)
}
// ItemRefreshAPIRouter defines the required methods for binding the api requests to a responses for the ItemRefreshAPI
// The ItemRefreshAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemRefreshAPIServicer to perform the required actions, then write the service results to the http response.
type ItemRefreshAPIRouter interface { 
	Post(http.ResponseWriter, *http.Request)
}
// ItemUpdateAPIRouter defines the required methods for binding the api requests to a responses for the ItemUpdateAPI
// The ItemUpdateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemUpdateAPIServicer to perform the required actions, then write the service results to the http response.
type ItemUpdateAPIRouter interface { 
	GetMetadataEditorInfo(http.ResponseWriter, *http.Request)
	UpdateItem(http.ResponseWriter, *http.Request)
	UpdateItemContentType(http.ResponseWriter, *http.Request)
}
// ItemsAPIRouter defines the required methods for binding the api requests to a responses for the ItemsAPI
// The ItemsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ItemsAPIServicer to perform the required actions, then write the service results to the http response.
type ItemsAPIRouter interface { 
	GetItems(http.ResponseWriter, *http.Request)
	GetItemsByUserId(http.ResponseWriter, *http.Request)
	GetResumeItems(http.ResponseWriter, *http.Request)
}
// LibraryAPIRouter defines the required methods for binding the api requests to a responses for the LibraryAPI
// The LibraryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LibraryAPIServicer to perform the required actions, then write the service results to the http response.
type LibraryAPIRouter interface { 
	DeleteItem(http.ResponseWriter, *http.Request)
	DeleteItems(http.ResponseWriter, *http.Request)
	GetAncestors(http.ResponseWriter, *http.Request)
	// Deprecated
	GetCriticReviews(http.ResponseWriter, *http.Request)
	GetDownload(http.ResponseWriter, *http.Request)
	GetFile(http.ResponseWriter, *http.Request)
	GetItemCounts(http.ResponseWriter, *http.Request)
	GetLibraryOptionsInfo(http.ResponseWriter, *http.Request)
	GetMediaFolders(http.ResponseWriter, *http.Request)
	GetPhysicalPaths(http.ResponseWriter, *http.Request)
	GetSimilarAlbums(http.ResponseWriter, *http.Request)
	GetSimilarArtists(http.ResponseWriter, *http.Request)
	GetSimilarItems(http.ResponseWriter, *http.Request)
	GetSimilarMovies(http.ResponseWriter, *http.Request)
	GetSimilarShows(http.ResponseWriter, *http.Request)
	GetSimilarTrailers(http.ResponseWriter, *http.Request)
	GetThemeMedia(http.ResponseWriter, *http.Request)
	GetThemeSongs(http.ResponseWriter, *http.Request)
	GetThemeVideos(http.ResponseWriter, *http.Request)
	PostAddedMovies(http.ResponseWriter, *http.Request)
	PostAddedSeries(http.ResponseWriter, *http.Request)
	PostUpdatedMedia(http.ResponseWriter, *http.Request)
	PostUpdatedMovies(http.ResponseWriter, *http.Request)
	PostUpdatedSeries(http.ResponseWriter, *http.Request)
	RefreshLibrary(http.ResponseWriter, *http.Request)
}
// LibraryStructureAPIRouter defines the required methods for binding the api requests to a responses for the LibraryStructureAPI
// The LibraryStructureAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LibraryStructureAPIServicer to perform the required actions, then write the service results to the http response.
type LibraryStructureAPIRouter interface { 
	AddMediaPath(http.ResponseWriter, *http.Request)
	AddVirtualFolder(http.ResponseWriter, *http.Request)
	GetVirtualFolders(http.ResponseWriter, *http.Request)
	RemoveMediaPath(http.ResponseWriter, *http.Request)
	RemoveVirtualFolder(http.ResponseWriter, *http.Request)
	RenameVirtualFolder(http.ResponseWriter, *http.Request)
	UpdateLibraryOptions(http.ResponseWriter, *http.Request)
	UpdateMediaPath(http.ResponseWriter, *http.Request)
}
// LiveTvAPIRouter defines the required methods for binding the api requests to a responses for the LiveTvAPI
// The LiveTvAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LiveTvAPIServicer to perform the required actions, then write the service results to the http response.
type LiveTvAPIRouter interface { 
	AddListingProvider(http.ResponseWriter, *http.Request)
	AddTunerHost(http.ResponseWriter, *http.Request)
	CancelSeriesTimer(http.ResponseWriter, *http.Request)
	CancelTimer(http.ResponseWriter, *http.Request)
	CreateSeriesTimer(http.ResponseWriter, *http.Request)
	CreateTimer(http.ResponseWriter, *http.Request)
	DeleteListingProvider(http.ResponseWriter, *http.Request)
	DeleteRecording(http.ResponseWriter, *http.Request)
	DeleteTunerHost(http.ResponseWriter, *http.Request)
	DiscoverTuners(http.ResponseWriter, *http.Request)
	DiscvoverTuners(http.ResponseWriter, *http.Request)
	GetChannel(http.ResponseWriter, *http.Request)
	GetChannelMappingOptions(http.ResponseWriter, *http.Request)
	GetDefaultListingProvider(http.ResponseWriter, *http.Request)
	GetDefaultTimer(http.ResponseWriter, *http.Request)
	GetGuideInfo(http.ResponseWriter, *http.Request)
	GetLineups(http.ResponseWriter, *http.Request)
	GetLiveRecordingFile(http.ResponseWriter, *http.Request)
	GetLiveStreamFile(http.ResponseWriter, *http.Request)
	GetLiveTvChannels(http.ResponseWriter, *http.Request)
	GetLiveTvInfo(http.ResponseWriter, *http.Request)
	GetLiveTvPrograms(http.ResponseWriter, *http.Request)
	GetProgram(http.ResponseWriter, *http.Request)
	GetPrograms(http.ResponseWriter, *http.Request)
	GetRecommendedPrograms(http.ResponseWriter, *http.Request)
	GetRecording(http.ResponseWriter, *http.Request)
	GetRecordingFolders(http.ResponseWriter, *http.Request)
	// Deprecated
	GetRecordingGroup(http.ResponseWriter, *http.Request)
	// Deprecated
	GetRecordingGroups(http.ResponseWriter, *http.Request)
	GetRecordings(http.ResponseWriter, *http.Request)
	// Deprecated
	GetRecordingsSeries(http.ResponseWriter, *http.Request)
	GetSchedulesDirectCountries(http.ResponseWriter, *http.Request)
	GetSeriesTimer(http.ResponseWriter, *http.Request)
	GetSeriesTimers(http.ResponseWriter, *http.Request)
	GetTimer(http.ResponseWriter, *http.Request)
	GetTimers(http.ResponseWriter, *http.Request)
	GetTunerHostTypes(http.ResponseWriter, *http.Request)
	ResetTuner(http.ResponseWriter, *http.Request)
	SetChannelMapping(http.ResponseWriter, *http.Request)
	UpdateSeriesTimer(http.ResponseWriter, *http.Request)
	UpdateTimer(http.ResponseWriter, *http.Request)
}
// LocalizationAPIRouter defines the required methods for binding the api requests to a responses for the LocalizationAPI
// The LocalizationAPIRouter implementation should parse necessary information from the http request,
// pass the data to a LocalizationAPIServicer to perform the required actions, then write the service results to the http response.
type LocalizationAPIRouter interface { 
	GetCountries(http.ResponseWriter, *http.Request)
	GetCultures(http.ResponseWriter, *http.Request)
	GetLocalizationOptions(http.ResponseWriter, *http.Request)
	GetParentalRatings(http.ResponseWriter, *http.Request)
}
// MediaInfoAPIRouter defines the required methods for binding the api requests to a responses for the MediaInfoAPI
// The MediaInfoAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MediaInfoAPIServicer to perform the required actions, then write the service results to the http response.
type MediaInfoAPIRouter interface { 
	CloseLiveStream(http.ResponseWriter, *http.Request)
	GetBitrateTestBytes(http.ResponseWriter, *http.Request)
	GetPlaybackInfo(http.ResponseWriter, *http.Request)
	GetPostedPlaybackInfo(http.ResponseWriter, *http.Request)
	OpenLiveStream(http.ResponseWriter, *http.Request)
}
// MoviesAPIRouter defines the required methods for binding the api requests to a responses for the MoviesAPI
// The MoviesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MoviesAPIServicer to perform the required actions, then write the service results to the http response.
type MoviesAPIRouter interface { 
	GetMovieRecommendations(http.ResponseWriter, *http.Request)
}
// MusicGenresAPIRouter defines the required methods for binding the api requests to a responses for the MusicGenresAPI
// The MusicGenresAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MusicGenresAPIServicer to perform the required actions, then write the service results to the http response.
type MusicGenresAPIRouter interface { 
	GetMusicGenre(http.ResponseWriter, *http.Request)
	// Deprecated
	GetMusicGenres(http.ResponseWriter, *http.Request)
}
// NotificationsAPIRouter defines the required methods for binding the api requests to a responses for the NotificationsAPI
// The NotificationsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a NotificationsAPIServicer to perform the required actions, then write the service results to the http response.
type NotificationsAPIRouter interface { 
	CreateAdminNotification(http.ResponseWriter, *http.Request)
	GetNotificationServices(http.ResponseWriter, *http.Request)
	GetNotificationTypes(http.ResponseWriter, *http.Request)
	GetNotifications(http.ResponseWriter, *http.Request)
	GetNotificationsSummary(http.ResponseWriter, *http.Request)
	SetRead(http.ResponseWriter, *http.Request)
	SetUnread(http.ResponseWriter, *http.Request)
}
// PackageAPIRouter defines the required methods for binding the api requests to a responses for the PackageAPI
// The PackageAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PackageAPIServicer to perform the required actions, then write the service results to the http response.
type PackageAPIRouter interface { 
	CancelPackageInstallation(http.ResponseWriter, *http.Request)
	GetPackageInfo(http.ResponseWriter, *http.Request)
	GetPackages(http.ResponseWriter, *http.Request)
	GetRepositories(http.ResponseWriter, *http.Request)
	InstallPackage(http.ResponseWriter, *http.Request)
	SetRepositories(http.ResponseWriter, *http.Request)
}
// PersonsAPIRouter defines the required methods for binding the api requests to a responses for the PersonsAPI
// The PersonsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PersonsAPIServicer to perform the required actions, then write the service results to the http response.
type PersonsAPIRouter interface { 
	GetPerson(http.ResponseWriter, *http.Request)
	GetPersons(http.ResponseWriter, *http.Request)
}
// PlaylistsAPIRouter defines the required methods for binding the api requests to a responses for the PlaylistsAPI
// The PlaylistsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PlaylistsAPIServicer to perform the required actions, then write the service results to the http response.
type PlaylistsAPIRouter interface { 
	AddToPlaylist(http.ResponseWriter, *http.Request)
	CreatePlaylist(http.ResponseWriter, *http.Request)
	GetPlaylistItems(http.ResponseWriter, *http.Request)
	MoveItem(http.ResponseWriter, *http.Request)
	RemoveFromPlaylist(http.ResponseWriter, *http.Request)
}
// PlaystateAPIRouter defines the required methods for binding the api requests to a responses for the PlaystateAPI
// The PlaystateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PlaystateAPIServicer to perform the required actions, then write the service results to the http response.
type PlaystateAPIRouter interface { 
	MarkPlayedItem(http.ResponseWriter, *http.Request)
	MarkUnplayedItem(http.ResponseWriter, *http.Request)
	OnPlaybackProgress(http.ResponseWriter, *http.Request)
	OnPlaybackStart(http.ResponseWriter, *http.Request)
	OnPlaybackStopped(http.ResponseWriter, *http.Request)
	PingPlaybackSession(http.ResponseWriter, *http.Request)
	ReportPlaybackProgress(http.ResponseWriter, *http.Request)
	ReportPlaybackStart(http.ResponseWriter, *http.Request)
	ReportPlaybackStopped(http.ResponseWriter, *http.Request)
}
// PluginsAPIRouter defines the required methods for binding the api requests to a responses for the PluginsAPI
// The PluginsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PluginsAPIServicer to perform the required actions, then write the service results to the http response.
type PluginsAPIRouter interface { 
	DisablePlugin(http.ResponseWriter, *http.Request)
	EnablePlugin(http.ResponseWriter, *http.Request)
	GetPluginConfiguration(http.ResponseWriter, *http.Request)
	GetPluginImage(http.ResponseWriter, *http.Request)
	GetPluginManifest(http.ResponseWriter, *http.Request)
	GetPlugins(http.ResponseWriter, *http.Request)
	// Deprecated
	UninstallPlugin(http.ResponseWriter, *http.Request)
	UninstallPluginByVersion(http.ResponseWriter, *http.Request)
	UpdatePluginConfiguration(http.ResponseWriter, *http.Request)
	// Deprecated
	UpdatePluginSecurityInfo(http.ResponseWriter, *http.Request)
}
// QuickConnectAPIRouter defines the required methods for binding the api requests to a responses for the QuickConnectAPI
// The QuickConnectAPIRouter implementation should parse necessary information from the http request,
// pass the data to a QuickConnectAPIServicer to perform the required actions, then write the service results to the http response.
type QuickConnectAPIRouter interface { 
	Activate(http.ResponseWriter, *http.Request)
	Authorize(http.ResponseWriter, *http.Request)
	Available(http.ResponseWriter, *http.Request)
	Connect(http.ResponseWriter, *http.Request)
	Deauthorize(http.ResponseWriter, *http.Request)
	GetStatus(http.ResponseWriter, *http.Request)
	Initiate(http.ResponseWriter, *http.Request)
}
// RemoteImageAPIRouter defines the required methods for binding the api requests to a responses for the RemoteImageAPI
// The RemoteImageAPIRouter implementation should parse necessary information from the http request,
// pass the data to a RemoteImageAPIServicer to perform the required actions, then write the service results to the http response.
type RemoteImageAPIRouter interface { 
	DownloadRemoteImage(http.ResponseWriter, *http.Request)
	GetRemoteImage(http.ResponseWriter, *http.Request)
	GetRemoteImageProviders(http.ResponseWriter, *http.Request)
	GetRemoteImages(http.ResponseWriter, *http.Request)
}
// ScheduledTasksAPIRouter defines the required methods for binding the api requests to a responses for the ScheduledTasksAPI
// The ScheduledTasksAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ScheduledTasksAPIServicer to perform the required actions, then write the service results to the http response.
type ScheduledTasksAPIRouter interface { 
	GetTask(http.ResponseWriter, *http.Request)
	GetTasks(http.ResponseWriter, *http.Request)
	StartTask(http.ResponseWriter, *http.Request)
	StopTask(http.ResponseWriter, *http.Request)
	UpdateTask(http.ResponseWriter, *http.Request)
}
// SearchAPIRouter defines the required methods for binding the api requests to a responses for the SearchAPI
// The SearchAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SearchAPIServicer to perform the required actions, then write the service results to the http response.
type SearchAPIRouter interface { 
	Get(http.ResponseWriter, *http.Request)
}
// SessionAPIRouter defines the required methods for binding the api requests to a responses for the SessionAPI
// The SessionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SessionAPIServicer to perform the required actions, then write the service results to the http response.
type SessionAPIRouter interface { 
	AddUserToSession(http.ResponseWriter, *http.Request)
	DisplayContent(http.ResponseWriter, *http.Request)
	GetAuthProviders(http.ResponseWriter, *http.Request)
	GetPasswordResetProviders(http.ResponseWriter, *http.Request)
	GetSessions(http.ResponseWriter, *http.Request)
	Play(http.ResponseWriter, *http.Request)
	PostCapabilities(http.ResponseWriter, *http.Request)
	PostFullCapabilities(http.ResponseWriter, *http.Request)
	RemoveUserFromSession(http.ResponseWriter, *http.Request)
	ReportSessionEnded(http.ResponseWriter, *http.Request)
	ReportViewing(http.ResponseWriter, *http.Request)
	SendFullGeneralCommand(http.ResponseWriter, *http.Request)
	SendGeneralCommand(http.ResponseWriter, *http.Request)
	SendMessageCommand(http.ResponseWriter, *http.Request)
	SendPlaystateCommand(http.ResponseWriter, *http.Request)
	SendSystemCommand(http.ResponseWriter, *http.Request)
}
// StartupAPIRouter defines the required methods for binding the api requests to a responses for the StartupAPI
// The StartupAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StartupAPIServicer to perform the required actions, then write the service results to the http response.
type StartupAPIRouter interface { 
	CompleteWizard(http.ResponseWriter, *http.Request)
	GetFirstUser(http.ResponseWriter, *http.Request)
	GetFirstUser2(http.ResponseWriter, *http.Request)
	GetStartupConfiguration(http.ResponseWriter, *http.Request)
	SetRemoteAccess(http.ResponseWriter, *http.Request)
	UpdateInitialConfiguration(http.ResponseWriter, *http.Request)
	UpdateStartupUser(http.ResponseWriter, *http.Request)
}
// StudiosAPIRouter defines the required methods for binding the api requests to a responses for the StudiosAPI
// The StudiosAPIRouter implementation should parse necessary information from the http request,
// pass the data to a StudiosAPIServicer to perform the required actions, then write the service results to the http response.
type StudiosAPIRouter interface { 
	GetStudio(http.ResponseWriter, *http.Request)
	GetStudios(http.ResponseWriter, *http.Request)
}
// SubtitleAPIRouter defines the required methods for binding the api requests to a responses for the SubtitleAPI
// The SubtitleAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SubtitleAPIServicer to perform the required actions, then write the service results to the http response.
type SubtitleAPIRouter interface { 
	DeleteSubtitle(http.ResponseWriter, *http.Request)
	DownloadRemoteSubtitles(http.ResponseWriter, *http.Request)
	GetFallbackFont(http.ResponseWriter, *http.Request)
	GetFallbackFontList(http.ResponseWriter, *http.Request)
	GetRemoteSubtitles(http.ResponseWriter, *http.Request)
	GetSubtitle(http.ResponseWriter, *http.Request)
	GetSubtitlePlaylist(http.ResponseWriter, *http.Request)
	GetSubtitleWithTicks(http.ResponseWriter, *http.Request)
	SearchRemoteSubtitles(http.ResponseWriter, *http.Request)
	UploadSubtitle(http.ResponseWriter, *http.Request)
}
// SuggestionsAPIRouter defines the required methods for binding the api requests to a responses for the SuggestionsAPI
// The SuggestionsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SuggestionsAPIServicer to perform the required actions, then write the service results to the http response.
type SuggestionsAPIRouter interface { 
	GetSuggestions(http.ResponseWriter, *http.Request)
}
// SyncPlayAPIRouter defines the required methods for binding the api requests to a responses for the SyncPlayAPI
// The SyncPlayAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SyncPlayAPIServicer to perform the required actions, then write the service results to the http response.
type SyncPlayAPIRouter interface { 
	SyncPlayBuffering(http.ResponseWriter, *http.Request)
	SyncPlayCreateGroup(http.ResponseWriter, *http.Request)
	SyncPlayGetGroups(http.ResponseWriter, *http.Request)
	SyncPlayJoinGroup(http.ResponseWriter, *http.Request)
	SyncPlayLeaveGroup(http.ResponseWriter, *http.Request)
	SyncPlayMovePlaylistItem(http.ResponseWriter, *http.Request)
	SyncPlayNextItem(http.ResponseWriter, *http.Request)
	SyncPlayPause(http.ResponseWriter, *http.Request)
	SyncPlayPing(http.ResponseWriter, *http.Request)
	SyncPlayPreviousItem(http.ResponseWriter, *http.Request)
	SyncPlayQueue(http.ResponseWriter, *http.Request)
	SyncPlayReady(http.ResponseWriter, *http.Request)
	SyncPlayRemoveFromPlaylist(http.ResponseWriter, *http.Request)
	SyncPlaySeek(http.ResponseWriter, *http.Request)
	SyncPlaySetIgnoreWait(http.ResponseWriter, *http.Request)
	SyncPlaySetNewQueue(http.ResponseWriter, *http.Request)
	SyncPlaySetPlaylistItem(http.ResponseWriter, *http.Request)
	SyncPlaySetRepeatMode(http.ResponseWriter, *http.Request)
	SyncPlaySetShuffleMode(http.ResponseWriter, *http.Request)
	SyncPlayStop(http.ResponseWriter, *http.Request)
	SyncPlayUnpause(http.ResponseWriter, *http.Request)
}
// SystemAPIRouter defines the required methods for binding the api requests to a responses for the SystemAPI
// The SystemAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SystemAPIServicer to perform the required actions, then write the service results to the http response.
type SystemAPIRouter interface { 
	GetEndpointInfo(http.ResponseWriter, *http.Request)
	GetLogFile(http.ResponseWriter, *http.Request)
	GetPingSystem(http.ResponseWriter, *http.Request)
	GetPublicSystemInfo(http.ResponseWriter, *http.Request)
	GetServerLogs(http.ResponseWriter, *http.Request)
	GetSystemInfo(http.ResponseWriter, *http.Request)
	GetWakeOnLanInfo(http.ResponseWriter, *http.Request)
	PostPingSystem(http.ResponseWriter, *http.Request)
	RestartApplication(http.ResponseWriter, *http.Request)
	ShutdownApplication(http.ResponseWriter, *http.Request)
}
// TimeSyncAPIRouter defines the required methods for binding the api requests to a responses for the TimeSyncAPI
// The TimeSyncAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TimeSyncAPIServicer to perform the required actions, then write the service results to the http response.
type TimeSyncAPIRouter interface { 
	GetUtcTime(http.ResponseWriter, *http.Request)
}
// TrailersAPIRouter defines the required methods for binding the api requests to a responses for the TrailersAPI
// The TrailersAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TrailersAPIServicer to perform the required actions, then write the service results to the http response.
type TrailersAPIRouter interface { 
	GetTrailers(http.ResponseWriter, *http.Request)
}
// TvShowsAPIRouter defines the required methods for binding the api requests to a responses for the TvShowsAPI
// The TvShowsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TvShowsAPIServicer to perform the required actions, then write the service results to the http response.
type TvShowsAPIRouter interface { 
	GetEpisodes(http.ResponseWriter, *http.Request)
	GetNextUp(http.ResponseWriter, *http.Request)
	GetSeasons(http.ResponseWriter, *http.Request)
	GetUpcomingEpisodes(http.ResponseWriter, *http.Request)
}
// UniversalAudioAPIRouter defines the required methods for binding the api requests to a responses for the UniversalAudioAPI
// The UniversalAudioAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UniversalAudioAPIServicer to perform the required actions, then write the service results to the http response.
type UniversalAudioAPIRouter interface { 
	GetUniversalAudioStream(http.ResponseWriter, *http.Request)
	HeadUniversalAudioStream(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	AuthenticateUser(http.ResponseWriter, *http.Request)
	AuthenticateUserByName(http.ResponseWriter, *http.Request)
	AuthenticateWithQuickConnect(http.ResponseWriter, *http.Request)
	CreateUserByName(http.ResponseWriter, *http.Request)
	DeleteUser(http.ResponseWriter, *http.Request)
	ForgotPassword(http.ResponseWriter, *http.Request)
	ForgotPasswordPin(http.ResponseWriter, *http.Request)
	GetCurrentUser(http.ResponseWriter, *http.Request)
	GetPublicUsers(http.ResponseWriter, *http.Request)
	GetUserById(http.ResponseWriter, *http.Request)
	GetUsers(http.ResponseWriter, *http.Request)
	UpdateUser(http.ResponseWriter, *http.Request)
	UpdateUserConfiguration(http.ResponseWriter, *http.Request)
	UpdateUserEasyPassword(http.ResponseWriter, *http.Request)
	UpdateUserPassword(http.ResponseWriter, *http.Request)
	UpdateUserPolicy(http.ResponseWriter, *http.Request)
}
// UserLibraryAPIRouter defines the required methods for binding the api requests to a responses for the UserLibraryAPI
// The UserLibraryAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserLibraryAPIServicer to perform the required actions, then write the service results to the http response.
type UserLibraryAPIRouter interface { 
	DeleteUserItemRating(http.ResponseWriter, *http.Request)
	GetIntros(http.ResponseWriter, *http.Request)
	GetItem(http.ResponseWriter, *http.Request)
	GetLatestMedia(http.ResponseWriter, *http.Request)
	GetLocalTrailers(http.ResponseWriter, *http.Request)
	GetRootFolder(http.ResponseWriter, *http.Request)
	GetSpecialFeatures(http.ResponseWriter, *http.Request)
	MarkFavoriteItem(http.ResponseWriter, *http.Request)
	UnmarkFavoriteItem(http.ResponseWriter, *http.Request)
	UpdateUserItemRating(http.ResponseWriter, *http.Request)
}
// UserViewsAPIRouter defines the required methods for binding the api requests to a responses for the UserViewsAPI
// The UserViewsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserViewsAPIServicer to perform the required actions, then write the service results to the http response.
type UserViewsAPIRouter interface { 
	GetGroupingOptions(http.ResponseWriter, *http.Request)
	GetUserViews(http.ResponseWriter, *http.Request)
}
// VideoAttachmentsAPIRouter defines the required methods for binding the api requests to a responses for the VideoAttachmentsAPI
// The VideoAttachmentsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VideoAttachmentsAPIServicer to perform the required actions, then write the service results to the http response.
type VideoAttachmentsAPIRouter interface { 
	GetAttachment(http.ResponseWriter, *http.Request)
}
// VideoHlsAPIRouter defines the required methods for binding the api requests to a responses for the VideoHlsAPI
// The VideoHlsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VideoHlsAPIServicer to perform the required actions, then write the service results to the http response.
type VideoHlsAPIRouter interface { 
	GetLiveHlsStream(http.ResponseWriter, *http.Request)
}
// VideosAPIRouter defines the required methods for binding the api requests to a responses for the VideosAPI
// The VideosAPIRouter implementation should parse necessary information from the http request,
// pass the data to a VideosAPIServicer to perform the required actions, then write the service results to the http response.
type VideosAPIRouter interface { 
	DeleteAlternateSources(http.ResponseWriter, *http.Request)
	GetAdditionalPart(http.ResponseWriter, *http.Request)
	GetVideoStream(http.ResponseWriter, *http.Request)
	GetVideoStreamByContainer(http.ResponseWriter, *http.Request)
	HeadVideoStream(http.ResponseWriter, *http.Request)
	HeadVideoStreamByContainer(http.ResponseWriter, *http.Request)
	MergeVersions(http.ResponseWriter, *http.Request)
}
// YearsAPIRouter defines the required methods for binding the api requests to a responses for the YearsAPI
// The YearsAPIRouter implementation should parse necessary information from the http request,
// pass the data to a YearsAPIServicer to perform the required actions, then write the service results to the http response.
type YearsAPIRouter interface { 
	GetYear(http.ResponseWriter, *http.Request)
	GetYears(http.ResponseWriter, *http.Request)
}


// ActivityLogAPIServicer defines the api actions for the ActivityLogAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ActivityLogAPIServicer interface { 
	GetLogEntries(context.Context, *int32, *int32, *time.Time, *bool) (ImplResponse, error)
}


// ApiKeyAPIServicer defines the api actions for the ApiKeyAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ApiKeyAPIServicer interface { 
	CreateKey(context.Context, string) (ImplResponse, error)
	GetKeys(context.Context) (ImplResponse, error)
	RevokeKey(context.Context, string) (ImplResponse, error)
}


// ArtistsAPIServicer defines the api actions for the ArtistsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ArtistsAPIServicer interface { 
	GetAlbumArtists(context.Context, *float64, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *[]ItemFilter, *bool, *[]string, *[]string, *[]string, *[]string, *[]string, *[]int32, *bool, *int32, *[]ImageType, *string, *[]string, *[]string, *[]string, *[]string, *string, *string, *string, *string, *bool, bool) (ImplResponse, error)
	GetArtistByName(context.Context, string, *string) (ImplResponse, error)
	GetArtists(context.Context, *float64, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *[]ItemFilter, *bool, *[]string, *[]string, *[]string, *[]string, *[]string, *[]int32, *bool, *int32, *[]ImageType, *string, *[]string, *[]string, *[]string, *[]string, *string, *string, *string, *string, *bool, bool) (ImplResponse, error)
}


// AudioAPIServicer defines the api actions for the AudioAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AudioAPIServicer interface { 
	GetAudioStream(context.Context, string, *string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	GetAudioStreamByContainer(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	HeadAudioStream(context.Context, string, *string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	HeadAudioStreamByContainer(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
}


// BrandingAPIServicer defines the api actions for the BrandingAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BrandingAPIServicer interface { 
	GetBrandingCss(context.Context) (ImplResponse, error)
	GetBrandingCss2(context.Context) (ImplResponse, error)
	GetBrandingOptions(context.Context) (ImplResponse, error)
}


// ChannelsAPIServicer defines the api actions for the ChannelsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ChannelsAPIServicer interface { 
	GetAllChannelFeatures(context.Context) (ImplResponse, error)
	GetChannelFeatures(context.Context, string) (ImplResponse, error)
	GetChannelItems(context.Context, string, *string, *string, *int32, *int32, *string, *[]ItemFilter, *string, *[]ItemFields) (ImplResponse, error)
	GetChannels(context.Context, *string, *int32, *int32, *bool, *bool, *bool) (ImplResponse, error)
	GetLatestChannelItems(context.Context, *string, *int32, *int32, *[]ItemFilter, *[]ItemFields, *[]string) (ImplResponse, error)
}


// CollectionAPIServicer defines the api actions for the CollectionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type CollectionAPIServicer interface { 
	AddToCollection(context.Context, string, []string) (ImplResponse, error)
	CreateCollection(context.Context, *string, *[]string, *string, bool) (ImplResponse, error)
	RemoveFromCollection(context.Context, string, []string) (ImplResponse, error)
}


// ConfigurationAPIServicer defines the api actions for the ConfigurationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ConfigurationAPIServicer interface { 
	GetConfiguration(context.Context) (ImplResponse, error)
	GetDefaultMetadataOptions(context.Context) (ImplResponse, error)
	GetNamedConfiguration(context.Context, string) (ImplResponse, error)
	UpdateConfiguration(context.Context, ServerConfiguration) (ImplResponse, error)
	UpdateMediaEncoderPath(context.Context, MediaEncoderPathDto) (ImplResponse, error)
	UpdateNamedConfiguration(context.Context, string) (ImplResponse, error)
}


// DashboardAPIServicer defines the api actions for the DashboardAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DashboardAPIServicer interface { 
	GetConfigurationPages(context.Context, *bool, ConfigurationPageType) (ImplResponse, error)
	GetDashboardConfigurationPage(context.Context, *string) (ImplResponse, error)
}


// DevicesAPIServicer defines the api actions for the DevicesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DevicesAPIServicer interface { 
	DeleteDevice(context.Context, string) (ImplResponse, error)
	GetDeviceInfo(context.Context, string) (ImplResponse, error)
	GetDeviceOptions(context.Context, string) (ImplResponse, error)
	GetDevices(context.Context, *bool, *string) (ImplResponse, error)
	UpdateDeviceOptions(context.Context, string, DeviceOptions) (ImplResponse, error)
}


// DisplayPreferencesAPIServicer defines the api actions for the DisplayPreferencesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DisplayPreferencesAPIServicer interface { 
	GetDisplayPreferences(context.Context, string, string, string) (ImplResponse, error)
	UpdateDisplayPreferences(context.Context, string, string, string, DisplayPreferencesDto) (ImplResponse, error)
}


// DlnaAPIServicer defines the api actions for the DlnaAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DlnaAPIServicer interface { 
	CreateProfile(context.Context, DeviceProfile) (ImplResponse, error)
	DeleteProfile(context.Context, string) (ImplResponse, error)
	GetDefaultProfile(context.Context) (ImplResponse, error)
	GetProfile(context.Context, string) (ImplResponse, error)
	GetProfileInfos(context.Context) (ImplResponse, error)
	UpdateProfile(context.Context, string, DeviceProfile) (ImplResponse, error)
}


// DlnaServerAPIServicer defines the api actions for the DlnaServerAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DlnaServerAPIServicer interface { 
	GetConnectionManager(context.Context, string) (ImplResponse, error)
	GetConnectionManager2(context.Context, string) (ImplResponse, error)
	GetConnectionManager3(context.Context, string) (ImplResponse, error)
	GetContentDirectory(context.Context, string) (ImplResponse, error)
	GetContentDirectory2(context.Context, string) (ImplResponse, error)
	GetContentDirectory3(context.Context, string) (ImplResponse, error)
	GetDescriptionXml(context.Context, string) (ImplResponse, error)
	GetDescriptionXml2(context.Context, string) (ImplResponse, error)
	GetIcon(context.Context, string) (ImplResponse, error)
	GetIconId(context.Context, string, string) (ImplResponse, error)
	GetMediaReceiverRegistrar(context.Context, string) (ImplResponse, error)
	GetMediaReceiverRegistrar2(context.Context, string) (ImplResponse, error)
	GetMediaReceiverRegistrar3(context.Context, string) (ImplResponse, error)
	ProcessConnectionManagerControlRequest(context.Context, string) (ImplResponse, error)
	ProcessContentDirectoryControlRequest(context.Context, string) (ImplResponse, error)
	ProcessMediaReceiverRegistrarControlRequest(context.Context, string) (ImplResponse, error)
}


// DynamicHlsAPIServicer defines the api actions for the DynamicHlsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DynamicHlsAPIServicer interface { 
	GetHlsAudioSegment(context.Context, string, string, int32, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	GetHlsVideoSegment(context.Context, string, string, int32, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	GetMasterHlsAudioPlaylist(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string, bool) (ImplResponse, error)
	GetMasterHlsVideoPlaylist(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string, bool) (ImplResponse, error)
	GetVariantHlsAudioPlaylist(context.Context, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	GetVariantHlsVideoPlaylist(context.Context, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	HeadMasterHlsAudioPlaylist(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string, bool) (ImplResponse, error)
	HeadMasterHlsVideoPlaylist(context.Context, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string, bool) (ImplResponse, error)
}


// EnvironmentAPIServicer defines the api actions for the EnvironmentAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EnvironmentAPIServicer interface { 
	GetDefaultDirectoryBrowser(context.Context) (ImplResponse, error)
	GetDirectoryContents(context.Context, string, bool, bool) (ImplResponse, error)
	GetDrives(context.Context) (ImplResponse, error)
	// Deprecated
	GetNetworkShares(context.Context) (ImplResponse, error)
	GetParentPath(context.Context, string) (ImplResponse, error)
	ValidatePath(context.Context, ValidatePathDto) (ImplResponse, error)
}


// FilterAPIServicer defines the api actions for the FilterAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FilterAPIServicer interface { 
	GetQueryFilters(context.Context, *string, *string, *[]string, *bool, *bool, *bool, *bool, *bool, *bool, *bool) (ImplResponse, error)
	GetQueryFiltersLegacy(context.Context, *string, *string, *[]string, *[]string) (ImplResponse, error)
}


// GenresAPIServicer defines the api actions for the GenresAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type GenresAPIServicer interface { 
	GetGenre(context.Context, string, *string) (ImplResponse, error)
	GetGenres(context.Context, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *bool, *int32, *[]ImageType, *string, *string, *string, *string, *bool, bool) (ImplResponse, error)
}


// HlsSegmentAPIServicer defines the api actions for the HlsSegmentAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HlsSegmentAPIServicer interface { 
	GetHlsAudioSegmentLegacyAac(context.Context, string, string) (ImplResponse, error)
	GetHlsAudioSegmentLegacyMp3(context.Context, string, string) (ImplResponse, error)
	GetHlsPlaylistLegacy(context.Context, string, string) (ImplResponse, error)
	GetHlsVideoSegmentLegacy(context.Context, string, string, string, string) (ImplResponse, error)
	StopEncodingProcess(context.Context, *string, *string) (ImplResponse, error)
}


// ImageAPIServicer defines the api actions for the ImageAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ImageAPIServicer interface { 
	DeleteItemImage(context.Context, string, ImageType, *int32) (ImplResponse, error)
	DeleteItemImageByIndex(context.Context, string, ImageType, int32) (ImplResponse, error)
	DeleteUserImage(context.Context, string, ImageType, *int32) (ImplResponse, error)
	DeleteUserImageByIndex(context.Context, string, ImageType, int32) (ImplResponse, error)
	GetArtistImage(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetGenreImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	GetGenreImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetItemImage(context.Context, string, ImageType, *int32, *int32, *int32, *int32, *int32, *string, *bool, ImageFormat, *bool, *float64, *int32, *int32, *string, *string, *int32) (ImplResponse, error)
	GetItemImage2(context.Context, string, ImageType, int32, int32, string, ImageFormat, float64, int32, int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetItemImageByIndex(context.Context, string, ImageType, int32, *int32, *int32, *int32, *int32, *int32, *string, *bool, ImageFormat, *bool, *float64, *int32, *int32, *string, *string) (ImplResponse, error)
	GetItemImageInfos(context.Context, string) (ImplResponse, error)
	GetMusicGenreImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	GetMusicGenreImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetPersonImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	GetPersonImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetStudioImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	GetStudioImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	GetUserImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	GetUserImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadArtistImage(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadGenreImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadGenreImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadItemImage(context.Context, string, ImageType, *int32, *int32, *int32, *int32, *int32, *string, *bool, ImageFormat, *bool, *float64, *int32, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadItemImage2(context.Context, string, ImageType, int32, int32, string, ImageFormat, float64, int32, int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadItemImageByIndex(context.Context, string, ImageType, int32, *int32, *int32, *int32, *int32, *int32, *string, *bool, ImageFormat, *bool, *float64, *int32, *int32, *string, *string) (ImplResponse, error)
	HeadMusicGenreImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadMusicGenreImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadPersonImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadPersonImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadStudioImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadStudioImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	HeadUserImage(context.Context, string, ImageType, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string, *int32) (ImplResponse, error)
	HeadUserImageByIndex(context.Context, string, ImageType, int32, *string, ImageFormat, *int32, *int32, *float64, *int32, *int32, *int32, *int32, *bool, *bool, *int32, *string, *string) (ImplResponse, error)
	PostUserImage(context.Context, string, ImageType, *int32) (ImplResponse, error)
	PostUserImageByIndex(context.Context, string, ImageType, int32) (ImplResponse, error)
	SetItemImage(context.Context, string, ImageType) (ImplResponse, error)
	SetItemImageByIndex(context.Context, string, ImageType, int32) (ImplResponse, error)
	UpdateItemImageIndex(context.Context, string, ImageType, int32, int32) (ImplResponse, error)
}


// ImageByNameAPIServicer defines the api actions for the ImageByNameAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ImageByNameAPIServicer interface { 
	GetGeneralImage(context.Context, string, string) (ImplResponse, error)
	GetGeneralImages(context.Context) (ImplResponse, error)
	GetMediaInfoImage(context.Context, string, string) (ImplResponse, error)
	GetMediaInfoImages(context.Context) (ImplResponse, error)
	GetRatingImage(context.Context, string, string) (ImplResponse, error)
	GetRatingImages(context.Context) (ImplResponse, error)
}


// InstantMixAPIServicer defines the api actions for the InstantMixAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type InstantMixAPIServicer interface { 
	GetInstantMixFromAlbum(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromArtists(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromItem(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromMusicGenre(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromMusicGenres(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromPlaylist(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	GetInstantMixFromSong(context.Context, string, *string, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
}


// ItemLookupAPIServicer defines the api actions for the ItemLookupAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemLookupAPIServicer interface { 
	ApplySearchCriteria(context.Context, string, RemoteSearchResult, bool) (ImplResponse, error)
	GetBookRemoteSearchResults(context.Context, BookInfoRemoteSearchQuery) (ImplResponse, error)
	GetBoxSetRemoteSearchResults(context.Context, BoxSetInfoRemoteSearchQuery) (ImplResponse, error)
	GetExternalIdInfos(context.Context, string) (ImplResponse, error)
	GetMovieRemoteSearchResults(context.Context, MovieInfoRemoteSearchQuery) (ImplResponse, error)
	GetMusicAlbumRemoteSearchResults(context.Context, AlbumInfoRemoteSearchQuery) (ImplResponse, error)
	GetMusicArtistRemoteSearchResults(context.Context, ArtistInfoRemoteSearchQuery) (ImplResponse, error)
	GetMusicVideoRemoteSearchResults(context.Context, MusicVideoInfoRemoteSearchQuery) (ImplResponse, error)
	GetPersonRemoteSearchResults(context.Context, PersonLookupInfoRemoteSearchQuery) (ImplResponse, error)
	GetRemoteSearchImage(context.Context, string, string) (ImplResponse, error)
	GetSeriesRemoteSearchResults(context.Context, SeriesInfoRemoteSearchQuery) (ImplResponse, error)
	GetTrailerRemoteSearchResults(context.Context, TrailerInfoRemoteSearchQuery) (ImplResponse, error)
}


// ItemRefreshAPIServicer defines the api actions for the ItemRefreshAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemRefreshAPIServicer interface { 
	Post(context.Context, string, MetadataRefreshMode, MetadataRefreshMode, bool, bool) (ImplResponse, error)
}


// ItemUpdateAPIServicer defines the api actions for the ItemUpdateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemUpdateAPIServicer interface { 
	GetMetadataEditorInfo(context.Context, string) (ImplResponse, error)
	UpdateItem(context.Context, string, BaseItemDto) (ImplResponse, error)
	UpdateItemContentType(context.Context, string, *string) (ImplResponse, error)
}


// ItemsAPIServicer defines the api actions for the ItemsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ItemsAPIServicer interface { 
	GetItems(context.Context, *string, *string, *bool, *bool, *bool, *bool, *bool, *string, *int32, *bool, *bool, *bool, *[]LocationType, *[]LocationType, *bool, *bool, *float64, *float64, *time.Time, *time.Time, *time.Time, *time.Time, *bool, *bool, *bool, *bool, *[]string, *int32, *int32, *bool, *string, *string, *string, *[]ItemFields, *[]string, *[]string, *[]ItemFilter, *bool, *[]string, *[]ImageType, *string, *bool, *[]string, *[]string, *[]string, *[]int32, *bool, *int32, *[]ImageType, *string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]VideoType, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *bool, *[]SeriesStatus, *string, *string, *string, *[]string, *[]string, bool, *bool) (ImplResponse, error)
	GetItemsByUserId(context.Context, string, *string, *bool, *bool, *bool, *bool, *bool, *string, *int32, *bool, *bool, *bool, *[]LocationType, *[]LocationType, *bool, *bool, *float64, *float64, *time.Time, *time.Time, *time.Time, *time.Time, *bool, *bool, *bool, *bool, *[]string, *int32, *int32, *bool, *string, *string, *string, *[]ItemFields, *[]string, *[]string, *[]ItemFilter, *bool, *[]string, *[]ImageType, *string, *bool, *[]string, *[]string, *[]string, *[]int32, *bool, *int32, *[]ImageType, *string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]VideoType, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *bool, *[]SeriesStatus, *string, *string, *string, *[]string, *[]string, bool, *bool) (ImplResponse, error)
	GetResumeItems(context.Context, string, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *bool, *int32, *[]ImageType, *[]string, *[]string, bool, *bool) (ImplResponse, error)
}


// LibraryAPIServicer defines the api actions for the LibraryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LibraryAPIServicer interface { 
	DeleteItem(context.Context, string) (ImplResponse, error)
	DeleteItems(context.Context, *[]string) (ImplResponse, error)
	GetAncestors(context.Context, string, *string) (ImplResponse, error)
	// Deprecated
	GetCriticReviews(context.Context, string) (ImplResponse, error)
	GetDownload(context.Context, string) (ImplResponse, error)
	GetFile(context.Context, string) (ImplResponse, error)
	GetItemCounts(context.Context, *string, *bool) (ImplResponse, error)
	GetLibraryOptionsInfo(context.Context, *string, bool) (ImplResponse, error)
	GetMediaFolders(context.Context, *bool) (ImplResponse, error)
	GetPhysicalPaths(context.Context) (ImplResponse, error)
	GetSimilarAlbums(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetSimilarArtists(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetSimilarItems(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetSimilarMovies(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetSimilarShows(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetSimilarTrailers(context.Context, string, *[]string, *string, *int32, *[]ItemFields) (ImplResponse, error)
	GetThemeMedia(context.Context, string, *string, bool) (ImplResponse, error)
	GetThemeSongs(context.Context, string, *string, bool) (ImplResponse, error)
	GetThemeVideos(context.Context, string, *string, bool) (ImplResponse, error)
	PostAddedMovies(context.Context, *string, *string) (ImplResponse, error)
	PostAddedSeries(context.Context, *string) (ImplResponse, error)
	PostUpdatedMedia(context.Context, []MediaUpdateInfoDto) (ImplResponse, error)
	PostUpdatedMovies(context.Context, *string, *string) (ImplResponse, error)
	PostUpdatedSeries(context.Context, *string) (ImplResponse, error)
	RefreshLibrary(context.Context) (ImplResponse, error)
}


// LibraryStructureAPIServicer defines the api actions for the LibraryStructureAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LibraryStructureAPIServicer interface { 
	AddMediaPath(context.Context, MediaPathDto, bool) (ImplResponse, error)
	AddVirtualFolder(context.Context, *string, *string, *[]string, bool, AddVirtualFolderDto) (ImplResponse, error)
	GetVirtualFolders(context.Context) (ImplResponse, error)
	RemoveMediaPath(context.Context, *string, *string, bool) (ImplResponse, error)
	RemoveVirtualFolder(context.Context, *string, bool) (ImplResponse, error)
	RenameVirtualFolder(context.Context, *string, *string, bool) (ImplResponse, error)
	UpdateLibraryOptions(context.Context, UpdateLibraryOptionsDto) (ImplResponse, error)
	UpdateMediaPath(context.Context, *string, MediaPathInfo) (ImplResponse, error)
}


// LiveTvAPIServicer defines the api actions for the LiveTvAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LiveTvAPIServicer interface { 
	AddListingProvider(context.Context, *string, bool, bool, ListingsProviderInfo) (ImplResponse, error)
	AddTunerHost(context.Context, TunerHostInfo) (ImplResponse, error)
	CancelSeriesTimer(context.Context, string) (ImplResponse, error)
	CancelTimer(context.Context, string) (ImplResponse, error)
	CreateSeriesTimer(context.Context, SeriesTimerInfoDto) (ImplResponse, error)
	CreateTimer(context.Context, TimerInfoDto) (ImplResponse, error)
	DeleteListingProvider(context.Context, *string) (ImplResponse, error)
	DeleteRecording(context.Context, string) (ImplResponse, error)
	DeleteTunerHost(context.Context, *string) (ImplResponse, error)
	DiscoverTuners(context.Context, bool) (ImplResponse, error)
	DiscvoverTuners(context.Context, bool) (ImplResponse, error)
	GetChannel(context.Context, string, *string) (ImplResponse, error)
	GetChannelMappingOptions(context.Context, *string) (ImplResponse, error)
	GetDefaultListingProvider(context.Context) (ImplResponse, error)
	GetDefaultTimer(context.Context, *string) (ImplResponse, error)
	GetGuideInfo(context.Context) (ImplResponse, error)
	GetLineups(context.Context, *string, *string, *string, *string) (ImplResponse, error)
	GetLiveRecordingFile(context.Context, string) (ImplResponse, error)
	GetLiveStreamFile(context.Context, string, string) (ImplResponse, error)
	GetLiveTvChannels(context.Context, ChannelType, *string, *int32, *bool, *bool, *bool, *bool, *bool, *int32, *bool, *bool, *bool, *bool, *int32, *[]ImageType, *[]ItemFields, *bool, *[]string, SortOrder, bool, bool) (ImplResponse, error)
	GetLiveTvInfo(context.Context) (ImplResponse, error)
	GetLiveTvPrograms(context.Context, *[]string, *string, *time.Time, *bool, *bool, *time.Time, *time.Time, *time.Time, *bool, *bool, *bool, *bool, *bool, *int32, *int32, *string, *string, *[]string, *[]string, *bool, *int32, *[]ImageType, *bool, *string, *string, *[]ItemFields, bool) (ImplResponse, error)
	GetProgram(context.Context, string, *string) (ImplResponse, error)
	GetPrograms(context.Context, GetProgramsDto) (ImplResponse, error)
	GetRecommendedPrograms(context.Context, *string, *int32, *bool, *bool, *bool, *bool, *bool, *bool, *bool, *bool, *int32, *[]ImageType, *[]string, *[]ItemFields, *bool, bool) (ImplResponse, error)
	GetRecording(context.Context, string, *string) (ImplResponse, error)
	GetRecordingFolders(context.Context, *string) (ImplResponse, error)
	// Deprecated
	GetRecordingGroup(context.Context, string) (ImplResponse, error)
	// Deprecated
	GetRecordingGroups(context.Context, *string) (ImplResponse, error)
	GetRecordings(context.Context, *string, *string, *int32, *int32, RecordingStatus, *bool, *string, *bool, *int32, *[]ImageType, *[]ItemFields, *bool, *bool, *bool, *bool, *bool, *bool, *bool, bool) (ImplResponse, error)
	// Deprecated
	GetRecordingsSeries(context.Context, *string, *string, *string, *int32, *int32, RecordingStatus, *bool, *string, *bool, *int32, *[]ImageType, *[]ItemFields, *bool, bool) (ImplResponse, error)
	GetSchedulesDirectCountries(context.Context) (ImplResponse, error)
	GetSeriesTimer(context.Context, string) (ImplResponse, error)
	GetSeriesTimers(context.Context, *string, SortOrder) (ImplResponse, error)
	GetTimer(context.Context, string) (ImplResponse, error)
	GetTimers(context.Context, *string, *string, *bool, *bool) (ImplResponse, error)
	GetTunerHostTypes(context.Context) (ImplResponse, error)
	ResetTuner(context.Context, string) (ImplResponse, error)
	SetChannelMapping(context.Context, SetChannelMappingDto) (ImplResponse, error)
	UpdateSeriesTimer(context.Context, string, SeriesTimerInfoDto) (ImplResponse, error)
	UpdateTimer(context.Context, string, TimerInfoDto) (ImplResponse, error)
}


// LocalizationAPIServicer defines the api actions for the LocalizationAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type LocalizationAPIServicer interface { 
	GetCountries(context.Context) (ImplResponse, error)
	GetCultures(context.Context) (ImplResponse, error)
	GetLocalizationOptions(context.Context) (ImplResponse, error)
	GetParentalRatings(context.Context) (ImplResponse, error)
}


// MediaInfoAPIServicer defines the api actions for the MediaInfoAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MediaInfoAPIServicer interface { 
	CloseLiveStream(context.Context, string) (ImplResponse, error)
	GetBitrateTestBytes(context.Context, int32) (ImplResponse, error)
	GetPlaybackInfo(context.Context, string, string) (ImplResponse, error)
	GetPostedPlaybackInfo(context.Context, string, *string, *int32, *int64, *int32, *int32, *int32, *string, *string, *bool, *bool, *bool, *bool, *bool, *bool, PlaybackInfoDto) (ImplResponse, error)
	OpenLiveStream(context.Context, *string, *string, *string, *int32, *int64, *int32, *int32, *int32, *string, *bool, *bool, OpenLiveStreamDto) (ImplResponse, error)
}


// MoviesAPIServicer defines the api actions for the MoviesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MoviesAPIServicer interface { 
	GetMovieRecommendations(context.Context, *string, *string, *[]ItemFields, int32, int32) (ImplResponse, error)
}


// MusicGenresAPIServicer defines the api actions for the MusicGenresAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MusicGenresAPIServicer interface { 
	GetMusicGenre(context.Context, string, *string) (ImplResponse, error)
	// Deprecated
	GetMusicGenres(context.Context, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *bool, *int32, *[]ImageType, *string, *string, *string, *string, *bool, bool) (ImplResponse, error)
}


// NotificationsAPIServicer defines the api actions for the NotificationsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type NotificationsAPIServicer interface { 
	CreateAdminNotification(context.Context, *string, NotificationLevel, *string, *string) (ImplResponse, error)
	GetNotificationServices(context.Context) (ImplResponse, error)
	GetNotificationTypes(context.Context) (ImplResponse, error)
	GetNotifications(context.Context, string) (ImplResponse, error)
	GetNotificationsSummary(context.Context, string) (ImplResponse, error)
	SetRead(context.Context, string) (ImplResponse, error)
	SetUnread(context.Context, string) (ImplResponse, error)
}


// PackageAPIServicer defines the api actions for the PackageAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PackageAPIServicer interface { 
	CancelPackageInstallation(context.Context, string) (ImplResponse, error)
	GetPackageInfo(context.Context, string, *string) (ImplResponse, error)
	GetPackages(context.Context) (ImplResponse, error)
	GetRepositories(context.Context) (ImplResponse, error)
	InstallPackage(context.Context, string, *string, *string, *string) (ImplResponse, error)
	SetRepositories(context.Context, *[]RepositoryInfo) (ImplResponse, error)
}


// PersonsAPIServicer defines the api actions for the PersonsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PersonsAPIServicer interface { 
	GetPerson(context.Context, string, *string) (ImplResponse, error)
	GetPersons(context.Context, *int32, *string, *[]ItemFields, *[]ItemFilter, *bool, *bool, *int32, *[]ImageType, *[]string, *[]string, *string, *string, *bool) (ImplResponse, error)
}


// PlaylistsAPIServicer defines the api actions for the PlaylistsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PlaylistsAPIServicer interface { 
	AddToPlaylist(context.Context, string, *[]string, *string) (ImplResponse, error)
	CreatePlaylist(context.Context, *string, *[]string, *string, *string, CreatePlaylistDto) (ImplResponse, error)
	GetPlaylistItems(context.Context, string, string, *int32, *int32, *[]ItemFields, *bool, *bool, *int32, *[]ImageType) (ImplResponse, error)
	MoveItem(context.Context, string, string, int32) (ImplResponse, error)
	RemoveFromPlaylist(context.Context, string, *[]string) (ImplResponse, error)
}


// PlaystateAPIServicer defines the api actions for the PlaystateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PlaystateAPIServicer interface { 
	MarkPlayedItem(context.Context, string, string, *time.Time) (ImplResponse, error)
	MarkUnplayedItem(context.Context, string, string) (ImplResponse, error)
	OnPlaybackProgress(context.Context, string, string, *string, *int64, *int32, *int32, *int32, PlayMethod, *string, *string, RepeatMode, bool, bool) (ImplResponse, error)
	OnPlaybackStart(context.Context, string, string, *string, *int32, *int32, PlayMethod, *string, *string, bool) (ImplResponse, error)
	OnPlaybackStopped(context.Context, string, string, *string, *string, *int64, *string, *string) (ImplResponse, error)
	PingPlaybackSession(context.Context, *string) (ImplResponse, error)
	ReportPlaybackProgress(context.Context, PlaybackProgressInfo) (ImplResponse, error)
	ReportPlaybackStart(context.Context, PlaybackStartInfo) (ImplResponse, error)
	ReportPlaybackStopped(context.Context, PlaybackStopInfo) (ImplResponse, error)
}


// PluginsAPIServicer defines the api actions for the PluginsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PluginsAPIServicer interface { 
	DisablePlugin(context.Context, string, Version) (ImplResponse, error)
	EnablePlugin(context.Context, string, Version) (ImplResponse, error)
	GetPluginConfiguration(context.Context, string) (ImplResponse, error)
	GetPluginImage(context.Context, string, Version) (ImplResponse, error)
	GetPluginManifest(context.Context, string) (ImplResponse, error)
	GetPlugins(context.Context) (ImplResponse, error)
	// Deprecated
	UninstallPlugin(context.Context, string) (ImplResponse, error)
	UninstallPluginByVersion(context.Context, string, Version) (ImplResponse, error)
	UpdatePluginConfiguration(context.Context, string) (ImplResponse, error)
	// Deprecated
	UpdatePluginSecurityInfo(context.Context, PluginSecurityInfo) (ImplResponse, error)
}


// QuickConnectAPIServicer defines the api actions for the QuickConnectAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type QuickConnectAPIServicer interface { 
	Activate(context.Context) (ImplResponse, error)
	Authorize(context.Context, string) (ImplResponse, error)
	Available(context.Context, QuickConnectState) (ImplResponse, error)
	Connect(context.Context, string) (ImplResponse, error)
	Deauthorize(context.Context) (ImplResponse, error)
	GetStatus(context.Context) (ImplResponse, error)
	Initiate(context.Context) (ImplResponse, error)
}


// RemoteImageAPIServicer defines the api actions for the RemoteImageAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type RemoteImageAPIServicer interface { 
	DownloadRemoteImage(context.Context, string, ImageType, *string) (ImplResponse, error)
	GetRemoteImage(context.Context, string) (ImplResponse, error)
	GetRemoteImageProviders(context.Context, string) (ImplResponse, error)
	GetRemoteImages(context.Context, string, ImageType, *int32, *int32, *string, bool) (ImplResponse, error)
}


// ScheduledTasksAPIServicer defines the api actions for the ScheduledTasksAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ScheduledTasksAPIServicer interface { 
	GetTask(context.Context, string) (ImplResponse, error)
	GetTasks(context.Context, *bool, *bool) (ImplResponse, error)
	StartTask(context.Context, string) (ImplResponse, error)
	StopTask(context.Context, string) (ImplResponse, error)
	UpdateTask(context.Context, string, []TaskTriggerInfo) (ImplResponse, error)
}


// SearchAPIServicer defines the api actions for the SearchAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SearchAPIServicer interface { 
	Get(context.Context, string, *int32, *int32, *string, *[]string, *[]string, *[]string, *string, *bool, *bool, *bool, *bool, *bool, bool, bool, bool, bool, bool) (ImplResponse, error)
}


// SessionAPIServicer defines the api actions for the SessionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SessionAPIServicer interface { 
	AddUserToSession(context.Context, string, string) (ImplResponse, error)
	DisplayContent(context.Context, string, string, string, string) (ImplResponse, error)
	GetAuthProviders(context.Context) (ImplResponse, error)
	GetPasswordResetProviders(context.Context) (ImplResponse, error)
	GetSessions(context.Context, *string, *string, *int32) (ImplResponse, error)
	Play(context.Context, string, PlayCommand, []string, *int64) (ImplResponse, error)
	PostCapabilities(context.Context, *string, *[]string, *[]GeneralCommandType, bool, bool, bool) (ImplResponse, error)
	PostFullCapabilities(context.Context, ClientCapabilitiesDto, *string) (ImplResponse, error)
	RemoveUserFromSession(context.Context, string, string) (ImplResponse, error)
	ReportSessionEnded(context.Context) (ImplResponse, error)
	ReportViewing(context.Context, string, *string) (ImplResponse, error)
	SendFullGeneralCommand(context.Context, string, GeneralCommand) (ImplResponse, error)
	SendGeneralCommand(context.Context, string, GeneralCommandType) (ImplResponse, error)
	SendMessageCommand(context.Context, string, string, *string, *int64) (ImplResponse, error)
	SendPlaystateCommand(context.Context, string, PlaystateCommand, *int64, *string) (ImplResponse, error)
	SendSystemCommand(context.Context, string, GeneralCommandType) (ImplResponse, error)
}


// StartupAPIServicer defines the api actions for the StartupAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StartupAPIServicer interface { 
	CompleteWizard(context.Context) (ImplResponse, error)
	GetFirstUser(context.Context) (ImplResponse, error)
	GetFirstUser2(context.Context) (ImplResponse, error)
	GetStartupConfiguration(context.Context) (ImplResponse, error)
	SetRemoteAccess(context.Context, StartupRemoteAccessDto) (ImplResponse, error)
	UpdateInitialConfiguration(context.Context, StartupConfigurationDto) (ImplResponse, error)
	UpdateStartupUser(context.Context, StartupUserDto) (ImplResponse, error)
}


// StudiosAPIServicer defines the api actions for the StudiosAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type StudiosAPIServicer interface { 
	GetStudio(context.Context, string, *string) (ImplResponse, error)
	GetStudios(context.Context, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *bool, *bool, *int32, *[]ImageType, *string, *string, *string, *string, *bool, bool) (ImplResponse, error)
}


// SubtitleAPIServicer defines the api actions for the SubtitleAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SubtitleAPIServicer interface { 
	DeleteSubtitle(context.Context, string, int32) (ImplResponse, error)
	DownloadRemoteSubtitles(context.Context, string, string) (ImplResponse, error)
	GetFallbackFont(context.Context, string) (ImplResponse, error)
	GetFallbackFontList(context.Context) (ImplResponse, error)
	GetRemoteSubtitles(context.Context, string) (ImplResponse, error)
	GetSubtitle(context.Context, string, string, int32, string, *int64, bool, bool, int64) (ImplResponse, error)
	GetSubtitlePlaylist(context.Context, string, int32, string, int32) (ImplResponse, error)
	GetSubtitleWithTicks(context.Context, string, string, int32, int64, string, *int64, bool, bool) (ImplResponse, error)
	SearchRemoteSubtitles(context.Context, string, string, *bool) (ImplResponse, error)
	UploadSubtitle(context.Context, string, UploadSubtitleDto) (ImplResponse, error)
}


// SuggestionsAPIServicer defines the api actions for the SuggestionsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SuggestionsAPIServicer interface { 
	GetSuggestions(context.Context, string, *[]string, *[]string, *int32, *int32, bool) (ImplResponse, error)
}


// SyncPlayAPIServicer defines the api actions for the SyncPlayAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SyncPlayAPIServicer interface { 
	SyncPlayBuffering(context.Context, BufferRequestDto) (ImplResponse, error)
	SyncPlayCreateGroup(context.Context, NewGroupRequestDto) (ImplResponse, error)
	SyncPlayGetGroups(context.Context) (ImplResponse, error)
	SyncPlayJoinGroup(context.Context, JoinGroupRequestDto) (ImplResponse, error)
	SyncPlayLeaveGroup(context.Context) (ImplResponse, error)
	SyncPlayMovePlaylistItem(context.Context, MovePlaylistItemRequestDto) (ImplResponse, error)
	SyncPlayNextItem(context.Context, NextItemRequestDto) (ImplResponse, error)
	SyncPlayPause(context.Context) (ImplResponse, error)
	SyncPlayPing(context.Context, PingRequestDto) (ImplResponse, error)
	SyncPlayPreviousItem(context.Context, PreviousItemRequestDto) (ImplResponse, error)
	SyncPlayQueue(context.Context, QueueRequestDto) (ImplResponse, error)
	SyncPlayReady(context.Context, ReadyRequestDto) (ImplResponse, error)
	SyncPlayRemoveFromPlaylist(context.Context, RemoveFromPlaylistRequestDto) (ImplResponse, error)
	SyncPlaySeek(context.Context, SeekRequestDto) (ImplResponse, error)
	SyncPlaySetIgnoreWait(context.Context, IgnoreWaitRequestDto) (ImplResponse, error)
	SyncPlaySetNewQueue(context.Context, PlayRequestDto) (ImplResponse, error)
	SyncPlaySetPlaylistItem(context.Context, SetPlaylistItemRequestDto) (ImplResponse, error)
	SyncPlaySetRepeatMode(context.Context, SetRepeatModeRequestDto) (ImplResponse, error)
	SyncPlaySetShuffleMode(context.Context, SetShuffleModeRequestDto) (ImplResponse, error)
	SyncPlayStop(context.Context) (ImplResponse, error)
	SyncPlayUnpause(context.Context) (ImplResponse, error)
}


// SystemAPIServicer defines the api actions for the SystemAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SystemAPIServicer interface { 
	GetEndpointInfo(context.Context) (ImplResponse, error)
	GetLogFile(context.Context, string) (ImplResponse, error)
	GetPingSystem(context.Context) (ImplResponse, error)
	GetPublicSystemInfo(context.Context) (ImplResponse, error)
	GetServerLogs(context.Context) (ImplResponse, error)
	GetSystemInfo(context.Context) (ImplResponse, error)
	GetWakeOnLanInfo(context.Context) (ImplResponse, error)
	PostPingSystem(context.Context) (ImplResponse, error)
	RestartApplication(context.Context) (ImplResponse, error)
	ShutdownApplication(context.Context) (ImplResponse, error)
}


// TimeSyncAPIServicer defines the api actions for the TimeSyncAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TimeSyncAPIServicer interface { 
	GetUtcTime(context.Context) (ImplResponse, error)
}


// TrailersAPIServicer defines the api actions for the TrailersAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TrailersAPIServicer interface { 
	GetTrailers(context.Context, *string, *string, *bool, *bool, *bool, *bool, *bool, *string, *int32, *bool, *bool, *bool, *[]LocationType, *[]LocationType, *bool, *bool, *float64, *float64, *time.Time, *time.Time, *time.Time, *time.Time, *bool, *bool, *bool, *bool, *[]string, *int32, *int32, *bool, *string, *string, *string, *[]ItemFields, *[]string, *[]ItemFilter, *bool, *[]string, *[]ImageType, *string, *bool, *[]string, *[]string, *[]string, *[]int32, *bool, *int32, *[]ImageType, *string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]string, *[]VideoType, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *bool, *[]SeriesStatus, *string, *string, *string, *[]string, *[]string, bool, *bool) (ImplResponse, error)
}


// TvShowsAPIServicer defines the api actions for the TvShowsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TvShowsAPIServicer interface { 
	GetEpisodes(context.Context, string, *string, *[]ItemFields, *int32, *string, *bool, *string, *string, *int32, *int32, *bool, *int32, *[]ImageType, *bool, *string) (ImplResponse, error)
	GetNextUp(context.Context, *string, *int32, *int32, *[]ItemFields, *string, *string, *bool, *int32, *[]ImageType, *bool, bool) (ImplResponse, error)
	GetSeasons(context.Context, string, *string, *[]ItemFields, *bool, *bool, *string, *bool, *int32, *[]ImageType, *bool) (ImplResponse, error)
	GetUpcomingEpisodes(context.Context, *string, *int32, *int32, *[]ItemFields, *string, *bool, *int32, *[]ImageType, *bool) (ImplResponse, error)
}


// UniversalAudioAPIServicer defines the api actions for the UniversalAudioAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UniversalAudioAPIServicer interface { 
	GetUniversalAudioStream(context.Context, string, *[]string, *string, *string, *string, *string, *int32, *int32, *int32, *int32, *int64, *string, *string, *int32, *int32, *bool, bool, bool) (ImplResponse, error)
	HeadUniversalAudioStream(context.Context, string, *[]string, *string, *string, *string, *string, *int32, *int32, *int32, *int32, *int64, *string, *string, *int32, *int32, *bool, bool, bool) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	AuthenticateUser(context.Context, string, string, *string) (ImplResponse, error)
	AuthenticateUserByName(context.Context, AuthenticateUserByName) (ImplResponse, error)
	AuthenticateWithQuickConnect(context.Context, QuickConnectDto) (ImplResponse, error)
	CreateUserByName(context.Context, CreateUserByName) (ImplResponse, error)
	DeleteUser(context.Context, string) (ImplResponse, error)
	ForgotPassword(context.Context, ForgotPasswordDto) (ImplResponse, error)
	ForgotPasswordPin(context.Context, *string) (ImplResponse, error)
	GetCurrentUser(context.Context) (ImplResponse, error)
	GetPublicUsers(context.Context) (ImplResponse, error)
	GetUserById(context.Context, string) (ImplResponse, error)
	GetUsers(context.Context, *bool, *bool) (ImplResponse, error)
	UpdateUser(context.Context, string, UserDto) (ImplResponse, error)
	UpdateUserConfiguration(context.Context, string, UserConfiguration) (ImplResponse, error)
	UpdateUserEasyPassword(context.Context, string, UpdateUserEasyPassword) (ImplResponse, error)
	UpdateUserPassword(context.Context, string, UpdateUserPassword) (ImplResponse, error)
	UpdateUserPolicy(context.Context, string, UserPolicy) (ImplResponse, error)
}


// UserLibraryAPIServicer defines the api actions for the UserLibraryAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserLibraryAPIServicer interface { 
	DeleteUserItemRating(context.Context, string, string) (ImplResponse, error)
	GetIntros(context.Context, string, string) (ImplResponse, error)
	GetItem(context.Context, string, string) (ImplResponse, error)
	GetLatestMedia(context.Context, string, *string, *[]ItemFields, *[]string, *bool, *bool, *int32, *[]ImageType, *bool, int32, bool) (ImplResponse, error)
	GetLocalTrailers(context.Context, string, string) (ImplResponse, error)
	GetRootFolder(context.Context, string) (ImplResponse, error)
	GetSpecialFeatures(context.Context, string, string) (ImplResponse, error)
	MarkFavoriteItem(context.Context, string, string) (ImplResponse, error)
	UnmarkFavoriteItem(context.Context, string, string) (ImplResponse, error)
	UpdateUserItemRating(context.Context, string, string, *bool) (ImplResponse, error)
}


// UserViewsAPIServicer defines the api actions for the UserViewsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserViewsAPIServicer interface { 
	GetGroupingOptions(context.Context, string) (ImplResponse, error)
	GetUserViews(context.Context, string, *bool, *[]string, bool) (ImplResponse, error)
}


// VideoAttachmentsAPIServicer defines the api actions for the VideoAttachmentsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VideoAttachmentsAPIServicer interface { 
	GetAttachment(context.Context, string, string, int32) (ImplResponse, error)
}


// VideoHlsAPIServicer defines the api actions for the VideoHlsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VideoHlsAPIServicer interface { 
	GetLiveHlsStream(context.Context, string, *string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string, *int32, *int32, *bool) (ImplResponse, error)
}


// VideosAPIServicer defines the api actions for the VideosAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type VideosAPIServicer interface { 
	DeleteAlternateSources(context.Context, string) (ImplResponse, error)
	GetAdditionalPart(context.Context, string, *string) (ImplResponse, error)
	GetVideoStream(context.Context, string, *string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	GetVideoStreamByContainer(context.Context, string, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	HeadVideoStream(context.Context, string, *string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	HeadVideoStreamByContainer(context.Context, string, string, string, *bool, *string, *string, *string, *string, *string, *int32, *int32, *string, *string, *string, *bool, *bool, *bool, *bool, *int32, *int32, *int32, *int32, *int32, *string, *string, *float32, *float32, *bool, *int64, *int32, *int32, *int32, *int32, SubtitleDeliveryMethod, *int32, *int32, *bool, *bool, *bool, *int32, *int32, *string, *bool, *string, *string, *string, *int32, *int32, EncodingContext, *map[string]string) (ImplResponse, error)
	MergeVersions(context.Context, []string) (ImplResponse, error)
}


// YearsAPIServicer defines the api actions for the YearsAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type YearsAPIServicer interface { 
	GetYear(context.Context, int32, *string) (ImplResponse, error)
	GetYears(context.Context, *int32, *int32, *string, *string, *[]ItemFields, *[]string, *[]string, *[]string, *string, *bool, *int32, *[]ImageType, *string, bool, *bool) (ImplResponse, error)
}
