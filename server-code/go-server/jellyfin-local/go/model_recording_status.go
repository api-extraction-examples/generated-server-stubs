/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type RecordingStatus string

// List of RecordingStatus
const (
	NEW RecordingStatus = "New"
	IN_PROGRESS RecordingStatus = "InProgress"
	COMPLETED RecordingStatus = "Completed"
	CANCELLED RecordingStatus = "Cancelled"
	CONFLICTED_OK RecordingStatus = "ConflictedOk"
	CONFLICTED_NOT_OK RecordingStatus = "ConflictedNotOk"
	ERROR RecordingStatus = "Error"
)

// AllowedRecordingStatusEnumValues is all the allowed values of RecordingStatus enum
var AllowedRecordingStatusEnumValues = []RecordingStatus{
	"New",
	"InProgress",
	"Completed",
	"Cancelled",
	"ConflictedOk",
	"ConflictedNotOk",
	"Error",
}

// validRecordingStatusEnumValue provides a map of RecordingStatuss for fast verification of use input
var validRecordingStatusEnumValues = map[RecordingStatus]struct{}{
	"New": {},
	"InProgress": {},
	"Completed": {},
	"Cancelled": {},
	"ConflictedOk": {},
	"ConflictedNotOk": {},
	"Error": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RecordingStatus) IsValid() bool {
	_, ok := validRecordingStatusEnumValues[v]
	return ok
}

// NewRecordingStatusFromValue returns a pointer to a valid RecordingStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRecordingStatusFromValue(v string) (RecordingStatus, error) {
	ev := RecordingStatus(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for RecordingStatus: valid values are %v", v, AllowedRecordingStatusEnumValues)
	}
}



// AssertRecordingStatusRequired checks if the required fields are not zero-ed
func AssertRecordingStatusRequired(obj RecordingStatus) error {
	return nil
}

// AssertRecordingStatusConstraints checks if the values respects the defined constraints
func AssertRecordingStatusConstraints(obj RecordingStatus) error {
	return nil
}
