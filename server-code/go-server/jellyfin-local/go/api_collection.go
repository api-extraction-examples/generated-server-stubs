/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// CollectionAPIController binds http requests to an api service and writes the service results to the http response
type CollectionAPIController struct {
	service CollectionAPIServicer
	errorHandler ErrorHandler
}

// CollectionAPIOption for how the controller is set up.
type CollectionAPIOption func(*CollectionAPIController)

// WithCollectionAPIErrorHandler inject ErrorHandler into controller
func WithCollectionAPIErrorHandler(h ErrorHandler) CollectionAPIOption {
	return func(c *CollectionAPIController) {
		c.errorHandler = h
	}
}

// NewCollectionAPIController creates a default api controller
func NewCollectionAPIController(s CollectionAPIServicer, opts ...CollectionAPIOption) Router {
	controller := &CollectionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CollectionAPIController
func (c *CollectionAPIController) Routes() Routes {
	return Routes{
		"AddToCollection": Route{
			strings.ToUpper("Post"),
			"/Collections/{collectionId}/Items",
			c.AddToCollection,
		},
		"CreateCollection": Route{
			strings.ToUpper("Post"),
			"/Collections",
			c.CreateCollection,
		},
		"RemoveFromCollection": Route{
			strings.ToUpper("Delete"),
			"/Collections/{collectionId}/Items",
			c.RemoveFromCollection,
		},
	}
}

// AddToCollection - Adds items to a collection.
func (c *CollectionAPIController) AddToCollection(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	collectionIdParam := params["collectionId"]
	if collectionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"collectionId"}, nil)
		return
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	result, err := c.service.AddToCollection(r.Context(), collectionIdParam, idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// CreateCollection - Creates a new collection.
func (c *CollectionAPIController) CreateCollection(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var isLockedParam bool
	if query.Has("isLocked") {
		param, err := parseBoolParameter(
			query.Get("isLocked"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isLockedParam = param
	} else {
		var param bool = false
		isLockedParam = param
	}
	result, err := c.service.CreateCollection(r.Context(), nameParam, idsParam, parentIdParam, isLockedParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// RemoveFromCollection - Removes items from a collection.
func (c *CollectionAPIController) RemoveFromCollection(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	collectionIdParam := params["collectionId"]
	if collectionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"collectionId"}, nil)
		return
	}
	var idsParam []string
	if query.Has("ids") {
		idsParam = strings.Split(query.Get("ids"), ",")
	}
	result, err := c.service.RemoveFromCollection(r.Context(), collectionIdParam, idsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
