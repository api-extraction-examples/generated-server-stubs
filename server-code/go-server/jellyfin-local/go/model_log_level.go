/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type LogLevel string

// List of LogLevel
const (
	TRACE LogLevel = "Trace"
	DEBUG LogLevel = "Debug"
	INFORMATION LogLevel = "Information"
	WARNING LogLevel = "Warning"
	ERROR LogLevel = "Error"
	CRITICAL LogLevel = "Critical"
	NONE LogLevel = "None"
)

// AllowedLogLevelEnumValues is all the allowed values of LogLevel enum
var AllowedLogLevelEnumValues = []LogLevel{
	"Trace",
	"Debug",
	"Information",
	"Warning",
	"Error",
	"Critical",
	"None",
}

// validLogLevelEnumValue provides a map of LogLevels for fast verification of use input
var validLogLevelEnumValues = map[LogLevel]struct{}{
	"Trace": {},
	"Debug": {},
	"Information": {},
	"Warning": {},
	"Error": {},
	"Critical": {},
	"None": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LogLevel) IsValid() bool {
	_, ok := validLogLevelEnumValues[v]
	return ok
}

// NewLogLevelFromValue returns a pointer to a valid LogLevel
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLogLevelFromValue(v string) (LogLevel, error) {
	ev := LogLevel(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for LogLevel: valid values are %v", v, AllowedLogLevelEnumValues)
	}
}



// AssertLogLevelRequired checks if the required fields are not zero-ed
func AssertLogLevelRequired(obj LogLevel) error {
	return nil
}

// AssertLogLevelConstraints checks if the values respects the defined constraints
func AssertLogLevelConstraints(obj LogLevel) error {
	return nil
}
