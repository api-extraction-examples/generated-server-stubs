/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type PlaybackErrorCode string

// List of PlaybackErrorCode
const (
	NOT_ALLOWED PlaybackErrorCode = "NotAllowed"
	NO_COMPATIBLE_STREAM PlaybackErrorCode = "NoCompatibleStream"
	RATE_LIMIT_EXCEEDED PlaybackErrorCode = "RateLimitExceeded"
)

// AllowedPlaybackErrorCodeEnumValues is all the allowed values of PlaybackErrorCode enum
var AllowedPlaybackErrorCodeEnumValues = []PlaybackErrorCode{
	"NotAllowed",
	"NoCompatibleStream",
	"RateLimitExceeded",
}

// validPlaybackErrorCodeEnumValue provides a map of PlaybackErrorCodes for fast verification of use input
var validPlaybackErrorCodeEnumValues = map[PlaybackErrorCode]struct{}{
	"NotAllowed": {},
	"NoCompatibleStream": {},
	"RateLimitExceeded": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlaybackErrorCode) IsValid() bool {
	_, ok := validPlaybackErrorCodeEnumValues[v]
	return ok
}

// NewPlaybackErrorCodeFromValue returns a pointer to a valid PlaybackErrorCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlaybackErrorCodeFromValue(v string) (PlaybackErrorCode, error) {
	ev := PlaybackErrorCode(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PlaybackErrorCode: valid values are %v", v, AllowedPlaybackErrorCodeEnumValues)
	}
}



// AssertPlaybackErrorCodeRequired checks if the required fields are not zero-ed
func AssertPlaybackErrorCodeRequired(obj PlaybackErrorCode) error {
	return nil
}

// AssertPlaybackErrorCodeConstraints checks if the values respects the defined constraints
func AssertPlaybackErrorCodeConstraints(obj PlaybackErrorCode) error {
	return nil
}
