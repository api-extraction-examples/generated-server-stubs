/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// UserLibraryAPIController binds http requests to an api service and writes the service results to the http response
type UserLibraryAPIController struct {
	service UserLibraryAPIServicer
	errorHandler ErrorHandler
}

// UserLibraryAPIOption for how the controller is set up.
type UserLibraryAPIOption func(*UserLibraryAPIController)

// WithUserLibraryAPIErrorHandler inject ErrorHandler into controller
func WithUserLibraryAPIErrorHandler(h ErrorHandler) UserLibraryAPIOption {
	return func(c *UserLibraryAPIController) {
		c.errorHandler = h
	}
}

// NewUserLibraryAPIController creates a default api controller
func NewUserLibraryAPIController(s UserLibraryAPIServicer, opts ...UserLibraryAPIOption) Router {
	controller := &UserLibraryAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the UserLibraryAPIController
func (c *UserLibraryAPIController) Routes() Routes {
	return Routes{
		"DeleteUserItemRating": Route{
			strings.ToUpper("Delete"),
			"/Users/{userId}/Items/{itemId}/Rating",
			c.DeleteUserItemRating,
		},
		"GetIntros": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/{itemId}/Intros",
			c.GetIntros,
		},
		"GetItem": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/{itemId}",
			c.GetItem,
		},
		"GetLatestMedia": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/Latest",
			c.GetLatestMedia,
		},
		"GetLocalTrailers": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/{itemId}/LocalTrailers",
			c.GetLocalTrailers,
		},
		"GetRootFolder": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/Root",
			c.GetRootFolder,
		},
		"GetSpecialFeatures": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Items/{itemId}/SpecialFeatures",
			c.GetSpecialFeatures,
		},
		"MarkFavoriteItem": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/FavoriteItems/{itemId}",
			c.MarkFavoriteItem,
		},
		"UnmarkFavoriteItem": Route{
			strings.ToUpper("Delete"),
			"/Users/{userId}/FavoriteItems/{itemId}",
			c.UnmarkFavoriteItem,
		},
		"UpdateUserItemRating": Route{
			strings.ToUpper("Post"),
			"/Users/{userId}/Items/{itemId}/Rating",
			c.UpdateUserItemRating,
		},
	}
}

// DeleteUserItemRating - Deletes a user's saved personal rating for an item.
func (c *UserLibraryAPIController) DeleteUserItemRating(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.DeleteUserItemRating(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetIntros - Gets intros to play before the main media item plays.
func (c *UserLibraryAPIController) GetIntros(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetIntros(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetItem - Gets an item from a user's library.
func (c *UserLibraryAPIController) GetItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetItem(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLatestMedia - Gets latest media.
func (c *UserLibraryAPIController) GetLatestMedia(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var parentIdParam *string
	if query.Has("parentId") {
		param := query.Get("parentId")

		parentIdParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var includeItemTypesParam []string
	if query.Has("includeItemTypes") {
		includeItemTypesParam = strings.Split(query.Get("includeItemTypes"), ",")
	}
	var isPlayedParam *bool
	if query.Has("isPlayed") {
		param, err := parseBoolParameter(
			query.Get("isPlayed"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isPlayedParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var limitParam int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = param
	} else {
		var param int32 = 20
		limitParam = param
	}
	var groupItemsParam bool
	if query.Has("groupItems") {
		param, err := parseBoolParameter(
			query.Get("groupItems"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		groupItemsParam = param
	} else {
		var param bool = true
		groupItemsParam = param
	}
	result, err := c.service.GetLatestMedia(r.Context(), userIdParam, parentIdParam, fieldsParam, includeItemTypesParam, isPlayedParam, enableImagesParam, imageTypeLimitParam, enableImageTypesParam, enableUserDataParam, limitParam, groupItemsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetLocalTrailers - Gets local trailers for an item.
func (c *UserLibraryAPIController) GetLocalTrailers(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetLocalTrailers(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetRootFolder - Gets the root folder from a user's library.
func (c *UserLibraryAPIController) GetRootFolder(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	result, err := c.service.GetRootFolder(r.Context(), userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSpecialFeatures - Gets special features for an item.
func (c *UserLibraryAPIController) GetSpecialFeatures(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.GetSpecialFeatures(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// MarkFavoriteItem - Marks an item as a favorite.
func (c *UserLibraryAPIController) MarkFavoriteItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.MarkFavoriteItem(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UnmarkFavoriteItem - Unmarks item as a favorite.
func (c *UserLibraryAPIController) UnmarkFavoriteItem(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	result, err := c.service.UnmarkFavoriteItem(r.Context(), userIdParam, itemIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateUserItemRating - Updates a user's rating for an item.
func (c *UserLibraryAPIController) UpdateUserItemRating(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var likesParam *bool
	if query.Has("likes") {
		param, err := parseBoolParameter(
			query.Get("likes"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		likesParam = &param
	} else {
	}
	result, err := c.service.UpdateUserItemRating(r.Context(), userIdParam, itemIdParam, likesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
