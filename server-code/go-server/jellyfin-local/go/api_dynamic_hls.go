/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DynamicHlsAPIController binds http requests to an api service and writes the service results to the http response
type DynamicHlsAPIController struct {
	service DynamicHlsAPIServicer
	errorHandler ErrorHandler
}

// DynamicHlsAPIOption for how the controller is set up.
type DynamicHlsAPIOption func(*DynamicHlsAPIController)

// WithDynamicHlsAPIErrorHandler inject ErrorHandler into controller
func WithDynamicHlsAPIErrorHandler(h ErrorHandler) DynamicHlsAPIOption {
	return func(c *DynamicHlsAPIController) {
		c.errorHandler = h
	}
}

// NewDynamicHlsAPIController creates a default api controller
func NewDynamicHlsAPIController(s DynamicHlsAPIServicer, opts ...DynamicHlsAPIOption) Router {
	controller := &DynamicHlsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DynamicHlsAPIController
func (c *DynamicHlsAPIController) Routes() Routes {
	return Routes{
		"GetHlsAudioSegment": Route{
			strings.ToUpper("Get"),
			"/Audio/{itemId}/hls1/{playlistId}/{segmentId}.{container}",
			c.GetHlsAudioSegment,
		},
		"GetHlsVideoSegment": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/hls1/{playlistId}/{segmentId}.{container}",
			c.GetHlsVideoSegment,
		},
		"GetMasterHlsAudioPlaylist": Route{
			strings.ToUpper("Get"),
			"/Audio/{itemId}/master.m3u8",
			c.GetMasterHlsAudioPlaylist,
		},
		"GetMasterHlsVideoPlaylist": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/master.m3u8",
			c.GetMasterHlsVideoPlaylist,
		},
		"GetVariantHlsAudioPlaylist": Route{
			strings.ToUpper("Get"),
			"/Audio/{itemId}/main.m3u8",
			c.GetVariantHlsAudioPlaylist,
		},
		"GetVariantHlsVideoPlaylist": Route{
			strings.ToUpper("Get"),
			"/Videos/{itemId}/main.m3u8",
			c.GetVariantHlsVideoPlaylist,
		},
		"HeadMasterHlsAudioPlaylist": Route{
			strings.ToUpper("Head"),
			"/Audio/{itemId}/master.m3u8",
			c.HeadMasterHlsAudioPlaylist,
		},
		"HeadMasterHlsVideoPlaylist": Route{
			strings.ToUpper("Head"),
			"/Videos/{itemId}/master.m3u8",
			c.HeadMasterHlsVideoPlaylist,
		},
	}
}

// GetHlsAudioSegment - Gets a video stream using HTTP live streaming.
func (c *DynamicHlsAPIController) GetHlsAudioSegment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	segmentIdParam, err := parseNumericParameter[int32](
		params["segmentId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containerParam := params["container"]
	if containerParam == "" {
		c.errorHandler(w, r, &RequiredError{"container"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	result, err := c.service.GetHlsAudioSegment(r.Context(), itemIdParam, playlistIdParam, segmentIdParam, containerParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, mediaSourceIdParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, maxStreamingBitrateParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetHlsVideoSegment - Gets a video stream using HTTP live streaming.
func (c *DynamicHlsAPIController) GetHlsVideoSegment(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	playlistIdParam := params["playlistId"]
	if playlistIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"playlistId"}, nil)
		return
	}
	segmentIdParam, err := parseNumericParameter[int32](
		params["segmentId"],
		WithRequire[int32](parseInt32),
	)
	if err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	containerParam := params["container"]
	if containerParam == "" {
		c.errorHandler(w, r, &RequiredError{"container"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	result, err := c.service.GetHlsVideoSegment(r.Context(), itemIdParam, playlistIdParam, segmentIdParam, containerParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, mediaSourceIdParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMasterHlsAudioPlaylist - Gets an audio hls playlist stream.
func (c *DynamicHlsAPIController) GetMasterHlsAudioPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var mediaSourceIdParam string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "mediaSourceId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	var enableAdaptiveBitrateStreamingParam bool
	if query.Has("enableAdaptiveBitrateStreaming") {
		param, err := parseBoolParameter(
			query.Get("enableAdaptiveBitrateStreaming"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAdaptiveBitrateStreamingParam = param
	} else {
		var param bool = true
		enableAdaptiveBitrateStreamingParam = param
	}
	result, err := c.service.GetMasterHlsAudioPlaylist(r.Context(), itemIdParam, mediaSourceIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, maxStreamingBitrateParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam, enableAdaptiveBitrateStreamingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetMasterHlsVideoPlaylist - Gets a video hls playlist stream.
func (c *DynamicHlsAPIController) GetMasterHlsVideoPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var mediaSourceIdParam string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "mediaSourceId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	var enableAdaptiveBitrateStreamingParam bool
	if query.Has("enableAdaptiveBitrateStreaming") {
		param, err := parseBoolParameter(
			query.Get("enableAdaptiveBitrateStreaming"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAdaptiveBitrateStreamingParam = param
	} else {
		var param bool = true
		enableAdaptiveBitrateStreamingParam = param
	}
	result, err := c.service.GetMasterHlsVideoPlaylist(r.Context(), itemIdParam, mediaSourceIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam, enableAdaptiveBitrateStreamingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVariantHlsAudioPlaylist - Gets an audio stream using HTTP live streaming.
func (c *DynamicHlsAPIController) GetVariantHlsAudioPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	result, err := c.service.GetVariantHlsAudioPlaylist(r.Context(), itemIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, mediaSourceIdParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, maxStreamingBitrateParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetVariantHlsVideoPlaylist - Gets a video stream using HTTP live streaming.
func (c *DynamicHlsAPIController) GetVariantHlsVideoPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var mediaSourceIdParam *string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	result, err := c.service.GetVariantHlsVideoPlaylist(r.Context(), itemIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, mediaSourceIdParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadMasterHlsAudioPlaylist - Gets an audio hls playlist stream.
func (c *DynamicHlsAPIController) HeadMasterHlsAudioPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var mediaSourceIdParam string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "mediaSourceId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var maxStreamingBitrateParam *int32
	if query.Has("maxStreamingBitrate") {
		param, err := parseNumericParameter[int32](
			query.Get("maxStreamingBitrate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxStreamingBitrateParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	var enableAdaptiveBitrateStreamingParam bool
	if query.Has("enableAdaptiveBitrateStreaming") {
		param, err := parseBoolParameter(
			query.Get("enableAdaptiveBitrateStreaming"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAdaptiveBitrateStreamingParam = param
	} else {
		var param bool = true
		enableAdaptiveBitrateStreamingParam = param
	}
	result, err := c.service.HeadMasterHlsAudioPlaylist(r.Context(), itemIdParam, mediaSourceIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, maxStreamingBitrateParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam, enableAdaptiveBitrateStreamingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// HeadMasterHlsVideoPlaylist - Gets a video hls playlist stream.
func (c *DynamicHlsAPIController) HeadMasterHlsVideoPlaylist(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	itemIdParam := params["itemId"]
	if itemIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"itemId"}, nil)
		return
	}
	var mediaSourceIdParam string
	if query.Has("mediaSourceId") {
		param := query.Get("mediaSourceId")

		mediaSourceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "mediaSourceId"}, nil)
		return
	}
	var staticParam *bool
	if query.Has("static") {
		param, err := parseBoolParameter(
			query.Get("static"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		staticParam = &param
	} else {
	}
	var paramsParam *string
	if query.Has("params") {
		param := query.Get("params")

		paramsParam = &param
	} else {
	}
	var tagParam *string
	if query.Has("tag") {
		param := query.Get("tag")

		tagParam = &param
	} else {
	}
	var deviceProfileIdParam *string
	if query.Has("deviceProfileId") {
		param := query.Get("deviceProfileId")

		deviceProfileIdParam = &param
	} else {
	}
	var playSessionIdParam *string
	if query.Has("playSessionId") {
		param := query.Get("playSessionId")

		playSessionIdParam = &param
	} else {
	}
	var segmentContainerParam *string
	if query.Has("segmentContainer") {
		param := query.Get("segmentContainer")

		segmentContainerParam = &param
	} else {
	}
	var segmentLengthParam *int32
	if query.Has("segmentLength") {
		param, err := parseNumericParameter[int32](
			query.Get("segmentLength"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		segmentLengthParam = &param
	} else {
	}
	var minSegmentsParam *int32
	if query.Has("minSegments") {
		param, err := parseNumericParameter[int32](
			query.Get("minSegments"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		minSegmentsParam = &param
	} else {
	}
	var deviceIdParam *string
	if query.Has("deviceId") {
		param := query.Get("deviceId")

		deviceIdParam = &param
	} else {
	}
	var audioCodecParam *string
	if query.Has("audioCodec") {
		param := query.Get("audioCodec")

		audioCodecParam = &param
	} else {
	}
	var enableAutoStreamCopyParam *bool
	if query.Has("enableAutoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("enableAutoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAutoStreamCopyParam = &param
	} else {
	}
	var allowVideoStreamCopyParam *bool
	if query.Has("allowVideoStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowVideoStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowVideoStreamCopyParam = &param
	} else {
	}
	var allowAudioStreamCopyParam *bool
	if query.Has("allowAudioStreamCopy") {
		param, err := parseBoolParameter(
			query.Get("allowAudioStreamCopy"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		allowAudioStreamCopyParam = &param
	} else {
	}
	var breakOnNonKeyFramesParam *bool
	if query.Has("breakOnNonKeyFrames") {
		param, err := parseBoolParameter(
			query.Get("breakOnNonKeyFrames"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		breakOnNonKeyFramesParam = &param
	} else {
	}
	var audioSampleRateParam *int32
	if query.Has("audioSampleRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioSampleRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioSampleRateParam = &param
	} else {
	}
	var maxAudioBitDepthParam *int32
	if query.Has("maxAudioBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioBitDepthParam = &param
	} else {
	}
	var audioBitRateParam *int32
	if query.Has("audioBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("audioBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioBitRateParam = &param
	} else {
	}
	var audioChannelsParam *int32
	if query.Has("audioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("audioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioChannelsParam = &param
	} else {
	}
	var maxAudioChannelsParam *int32
	if query.Has("maxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("maxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxAudioChannelsParam = &param
	} else {
	}
	var profileParam *string
	if query.Has("profile") {
		param := query.Get("profile")

		profileParam = &param
	} else {
	}
	var levelParam *string
	if query.Has("level") {
		param := query.Get("level")

		levelParam = &param
	} else {
	}
	var framerateParam *float32
	if query.Has("framerate") {
		param, err := parseNumericParameter[float32](
			query.Get("framerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		framerateParam = &param
	} else {
	}
	var maxFramerateParam *float32
	if query.Has("maxFramerate") {
		param, err := parseNumericParameter[float32](
			query.Get("maxFramerate"),
			WithParse[float32](parseFloat32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxFramerateParam = &param
	} else {
	}
	var copyTimestampsParam *bool
	if query.Has("copyTimestamps") {
		param, err := parseBoolParameter(
			query.Get("copyTimestamps"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		copyTimestampsParam = &param
	} else {
	}
	var startTimeTicksParam *int64
	if query.Has("startTimeTicks") {
		param, err := parseNumericParameter[int64](
			query.Get("startTimeTicks"),
			WithParse[int64](parseInt64),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startTimeTicksParam = &param
	} else {
	}
	var widthParam *int32
	if query.Has("width") {
		param, err := parseNumericParameter[int32](
			query.Get("width"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		widthParam = &param
	} else {
	}
	var heightParam *int32
	if query.Has("height") {
		param, err := parseNumericParameter[int32](
			query.Get("height"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		heightParam = &param
	} else {
	}
	var videoBitRateParam *int32
	if query.Has("videoBitRate") {
		param, err := parseNumericParameter[int32](
			query.Get("videoBitRate"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoBitRateParam = &param
	} else {
	}
	var subtitleStreamIndexParam *int32
	if query.Has("subtitleStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("subtitleStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		subtitleStreamIndexParam = &param
	} else {
	}
	var subtitleMethodParam SubtitleDeliveryMethod
	if query.Has("subtitleMethod") {
		param := SubtitleDeliveryMethod(query.Get("subtitleMethod"))

		subtitleMethodParam = param
	} else {
	}
	var maxRefFramesParam *int32
	if query.Has("maxRefFrames") {
		param, err := parseNumericParameter[int32](
			query.Get("maxRefFrames"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxRefFramesParam = &param
	} else {
	}
	var maxVideoBitDepthParam *int32
	if query.Has("maxVideoBitDepth") {
		param, err := parseNumericParameter[int32](
			query.Get("maxVideoBitDepth"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		maxVideoBitDepthParam = &param
	} else {
	}
	var requireAvcParam *bool
	if query.Has("requireAvc") {
		param, err := parseBoolParameter(
			query.Get("requireAvc"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireAvcParam = &param
	} else {
	}
	var deInterlaceParam *bool
	if query.Has("deInterlace") {
		param, err := parseBoolParameter(
			query.Get("deInterlace"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		deInterlaceParam = &param
	} else {
	}
	var requireNonAnamorphicParam *bool
	if query.Has("requireNonAnamorphic") {
		param, err := parseBoolParameter(
			query.Get("requireNonAnamorphic"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		requireNonAnamorphicParam = &param
	} else {
	}
	var transcodingMaxAudioChannelsParam *int32
	if query.Has("transcodingMaxAudioChannels") {
		param, err := parseNumericParameter[int32](
			query.Get("transcodingMaxAudioChannels"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		transcodingMaxAudioChannelsParam = &param
	} else {
	}
	var cpuCoreLimitParam *int32
	if query.Has("cpuCoreLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("cpuCoreLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		cpuCoreLimitParam = &param
	} else {
	}
	var liveStreamIdParam *string
	if query.Has("liveStreamId") {
		param := query.Get("liveStreamId")

		liveStreamIdParam = &param
	} else {
	}
	var enableMpegtsM2TsModeParam *bool
	if query.Has("enableMpegtsM2TsMode") {
		param, err := parseBoolParameter(
			query.Get("enableMpegtsM2TsMode"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableMpegtsM2TsModeParam = &param
	} else {
	}
	var videoCodecParam *string
	if query.Has("videoCodec") {
		param := query.Get("videoCodec")

		videoCodecParam = &param
	} else {
	}
	var subtitleCodecParam *string
	if query.Has("subtitleCodec") {
		param := query.Get("subtitleCodec")

		subtitleCodecParam = &param
	} else {
	}
	var transcodeReasonsParam *string
	if query.Has("transcodeReasons") {
		param := query.Get("transcodeReasons")

		transcodeReasonsParam = &param
	} else {
	}
	var audioStreamIndexParam *int32
	if query.Has("audioStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("audioStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		audioStreamIndexParam = &param
	} else {
	}
	var videoStreamIndexParam *int32
	if query.Has("videoStreamIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("videoStreamIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		videoStreamIndexParam = &param
	} else {
	}
	var contextParam EncodingContext
	if query.Has("context") {
		param := EncodingContext(query.Get("context"))

		contextParam = param
	} else {
	}
	var streamOptionsParam *map[string]string
	if query.Has("streamOptions") {
		param := map[string]string(query.Get("streamOptions"))

		streamOptionsParam = &param
	} else {
	}
	var enableAdaptiveBitrateStreamingParam bool
	if query.Has("enableAdaptiveBitrateStreaming") {
		param, err := parseBoolParameter(
			query.Get("enableAdaptiveBitrateStreaming"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableAdaptiveBitrateStreamingParam = param
	} else {
		var param bool = true
		enableAdaptiveBitrateStreamingParam = param
	}
	result, err := c.service.HeadMasterHlsVideoPlaylist(r.Context(), itemIdParam, mediaSourceIdParam, staticParam, paramsParam, tagParam, deviceProfileIdParam, playSessionIdParam, segmentContainerParam, segmentLengthParam, minSegmentsParam, deviceIdParam, audioCodecParam, enableAutoStreamCopyParam, allowVideoStreamCopyParam, allowAudioStreamCopyParam, breakOnNonKeyFramesParam, audioSampleRateParam, maxAudioBitDepthParam, audioBitRateParam, audioChannelsParam, maxAudioChannelsParam, profileParam, levelParam, framerateParam, maxFramerateParam, copyTimestampsParam, startTimeTicksParam, widthParam, heightParam, videoBitRateParam, subtitleStreamIndexParam, subtitleMethodParam, maxRefFramesParam, maxVideoBitDepthParam, requireAvcParam, deInterlaceParam, requireNonAnamorphicParam, transcodingMaxAudioChannelsParam, cpuCoreLimitParam, liveStreamIdParam, enableMpegtsM2TsModeParam, videoCodecParam, subtitleCodecParam, transcodeReasonsParam, audioStreamIndexParam, videoStreamIndexParam, contextParam, streamOptionsParam, enableAdaptiveBitrateStreamingParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
