/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// PersonsAPIController binds http requests to an api service and writes the service results to the http response
type PersonsAPIController struct {
	service PersonsAPIServicer
	errorHandler ErrorHandler
}

// PersonsAPIOption for how the controller is set up.
type PersonsAPIOption func(*PersonsAPIController)

// WithPersonsAPIErrorHandler inject ErrorHandler into controller
func WithPersonsAPIErrorHandler(h ErrorHandler) PersonsAPIOption {
	return func(c *PersonsAPIController) {
		c.errorHandler = h
	}
}

// NewPersonsAPIController creates a default api controller
func NewPersonsAPIController(s PersonsAPIServicer, opts ...PersonsAPIOption) Router {
	controller := &PersonsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PersonsAPIController
func (c *PersonsAPIController) Routes() Routes {
	return Routes{
		"GetPerson": Route{
			strings.ToUpper("Get"),
			"/Persons/{name}",
			c.GetPerson,
		},
		"GetPersons": Route{
			strings.ToUpper("Get"),
			"/Persons",
			c.GetPersons,
		},
	}
}

// GetPerson - Get person by name.
func (c *PersonsAPIController) GetPerson(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	nameParam := params["name"]
	if nameParam == "" {
		c.errorHandler(w, r, &RequiredError{"name"}, nil)
		return
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	result, err := c.service.GetPerson(r.Context(), nameParam, userIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPersons - Gets all persons.
func (c *PersonsAPIController) GetPersons(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var searchTermParam *string
	if query.Has("searchTerm") {
		param := query.Get("searchTerm")

		searchTermParam = &param
	} else {
	}
	var fieldsParam []ItemFields
	if query.Has("fields") {
		paramSplits := strings.Split(query.Get("fields"), ",")
		fieldsParam = make([]ItemFields, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFieldsFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			fieldsParam = append(fieldsParam, paramEnum)
		}
	}
	var filtersParam []ItemFilter
	if query.Has("filters") {
		paramSplits := strings.Split(query.Get("filters"), ",")
		filtersParam = make([]ItemFilter, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewItemFilterFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			filtersParam = append(filtersParam, paramEnum)
		}
	}
	var isFavoriteParam *bool
	if query.Has("isFavorite") {
		param, err := parseBoolParameter(
			query.Get("isFavorite"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		isFavoriteParam = &param
	} else {
	}
	var enableUserDataParam *bool
	if query.Has("enableUserData") {
		param, err := parseBoolParameter(
			query.Get("enableUserData"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableUserDataParam = &param
	} else {
	}
	var imageTypeLimitParam *int32
	if query.Has("imageTypeLimit") {
		param, err := parseNumericParameter[int32](
			query.Get("imageTypeLimit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		imageTypeLimitParam = &param
	} else {
	}
	var enableImageTypesParam []ImageType
	if query.Has("enableImageTypes") {
		paramSplits := strings.Split(query.Get("enableImageTypes"), ",")
		enableImageTypesParam = make([]ImageType, 0, len(paramSplits))
		for _, param := range paramSplits {
			paramEnum, err := NewImageTypeFromValue(param)
			if err != nil {
				c.errorHandler(w, r, &ParsingError{Err: err}, nil)
				return
			}
			enableImageTypesParam = append(enableImageTypesParam, paramEnum)
		}
	}
	var excludePersonTypesParam []string
	if query.Has("excludePersonTypes") {
		excludePersonTypesParam = strings.Split(query.Get("excludePersonTypes"), ",")
	}
	var personTypesParam []string
	if query.Has("personTypes") {
		personTypesParam = strings.Split(query.Get("personTypes"), ",")
	}
	var appearsInItemIdParam *string
	if query.Has("appearsInItemId") {
		param := query.Get("appearsInItemId")

		appearsInItemIdParam = &param
	} else {
	}
	var userIdParam *string
	if query.Has("userId") {
		param := query.Get("userId")

		userIdParam = &param
	} else {
	}
	var enableImagesParam *bool
	if query.Has("enableImages") {
		param, err := parseBoolParameter(
			query.Get("enableImages"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableImagesParam = &param
	} else {
		var param bool = true
		enableImagesParam = &param
	}
	result, err := c.service.GetPersons(r.Context(), limitParam, searchTermParam, fieldsParam, filtersParam, isFavoriteParam, enableUserDataParam, imageTypeLimitParam, enableImageTypesParam, excludePersonTypesParam, personTypesParam, appearsInItemIdParam, userIdParam, enableImagesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
