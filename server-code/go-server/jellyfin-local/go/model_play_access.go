/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)



type PlayAccess string

// List of PlayAccess
const (
	FULL PlayAccess = "Full"
	NONE PlayAccess = "None"
)

// AllowedPlayAccessEnumValues is all the allowed values of PlayAccess enum
var AllowedPlayAccessEnumValues = []PlayAccess{
	"Full",
	"None",
}

// validPlayAccessEnumValue provides a map of PlayAccesss for fast verification of use input
var validPlayAccessEnumValues = map[PlayAccess]struct{}{
	"Full": {},
	"None": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PlayAccess) IsValid() bool {
	_, ok := validPlayAccessEnumValues[v]
	return ok
}

// NewPlayAccessFromValue returns a pointer to a valid PlayAccess
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPlayAccessFromValue(v string) (PlayAccess, error) {
	ev := PlayAccess(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for PlayAccess: valid values are %v", v, AllowedPlayAccessEnumValues)
	}
}



// AssertPlayAccessRequired checks if the required fields are not zero-ed
func AssertPlayAccessRequired(obj PlayAccess) error {
	return nil
}

// AssertPlayAccessConstraints checks if the values respects the defined constraints
func AssertPlayAccessConstraints(obj PlayAccess) error {
	return nil
}
