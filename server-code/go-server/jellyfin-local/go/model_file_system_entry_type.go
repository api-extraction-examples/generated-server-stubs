/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// FileSystemEntryType : Enum FileSystemEntryType.
type FileSystemEntryType string

// List of FileSystemEntryType
const (
	FILE FileSystemEntryType = "File"
	DIRECTORY FileSystemEntryType = "Directory"
	NETWORK_COMPUTER FileSystemEntryType = "NetworkComputer"
	NETWORK_SHARE FileSystemEntryType = "NetworkShare"
)

// AllowedFileSystemEntryTypeEnumValues is all the allowed values of FileSystemEntryType enum
var AllowedFileSystemEntryTypeEnumValues = []FileSystemEntryType{
	"File",
	"Directory",
	"NetworkComputer",
	"NetworkShare",
}

// validFileSystemEntryTypeEnumValue provides a map of FileSystemEntryTypes for fast verification of use input
var validFileSystemEntryTypeEnumValues = map[FileSystemEntryType]struct{}{
	"File": {},
	"Directory": {},
	"NetworkComputer": {},
	"NetworkShare": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v FileSystemEntryType) IsValid() bool {
	_, ok := validFileSystemEntryTypeEnumValues[v]
	return ok
}

// NewFileSystemEntryTypeFromValue returns a pointer to a valid FileSystemEntryType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFileSystemEntryTypeFromValue(v string) (FileSystemEntryType, error) {
	ev := FileSystemEntryType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for FileSystemEntryType: valid values are %v", v, AllowedFileSystemEntryTypeEnumValues)
	}
}



// AssertFileSystemEntryTypeRequired checks if the required fields are not zero-ed
func AssertFileSystemEntryTypeRequired(obj FileSystemEntryType) error {
	return nil
}

// AssertFileSystemEntryTypeConstraints checks if the values respects the defined constraints
func AssertFileSystemEntryTypeConstraints(obj FileSystemEntryType) error {
	return nil
}
