/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// DashboardAPIController binds http requests to an api service and writes the service results to the http response
type DashboardAPIController struct {
	service DashboardAPIServicer
	errorHandler ErrorHandler
}

// DashboardAPIOption for how the controller is set up.
type DashboardAPIOption func(*DashboardAPIController)

// WithDashboardAPIErrorHandler inject ErrorHandler into controller
func WithDashboardAPIErrorHandler(h ErrorHandler) DashboardAPIOption {
	return func(c *DashboardAPIController) {
		c.errorHandler = h
	}
}

// NewDashboardAPIController creates a default api controller
func NewDashboardAPIController(s DashboardAPIServicer, opts ...DashboardAPIOption) Router {
	controller := &DashboardAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the DashboardAPIController
func (c *DashboardAPIController) Routes() Routes {
	return Routes{
		"GetConfigurationPages": Route{
			strings.ToUpper("Get"),
			"/web/ConfigurationPages",
			c.GetConfigurationPages,
		},
		"GetDashboardConfigurationPage": Route{
			strings.ToUpper("Get"),
			"/web/ConfigurationPage",
			c.GetDashboardConfigurationPage,
		},
	}
}

// GetConfigurationPages - Gets the configuration pages.
func (c *DashboardAPIController) GetConfigurationPages(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var enableInMainMenuParam *bool
	if query.Has("enableInMainMenu") {
		param, err := parseBoolParameter(
			query.Get("enableInMainMenu"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableInMainMenuParam = &param
	} else {
	}
	var pageTypeParam ConfigurationPageType
	if query.Has("pageType") {
		param := ConfigurationPageType(query.Get("pageType"))

		pageTypeParam = param
	} else {
	}
	result, err := c.service.GetConfigurationPages(r.Context(), enableInMainMenuParam, pageTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetDashboardConfigurationPage - Gets a dashboard configuration page.
func (c *DashboardAPIController) GetDashboardConfigurationPage(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var nameParam *string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = &param
	} else {
	}
	result, err := c.service.GetDashboardConfigurationPage(r.Context(), nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
