/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"
	"reflect"

	"github.com/gorilla/mux"
)

// SuggestionsAPIController binds http requests to an api service and writes the service results to the http response
type SuggestionsAPIController struct {
	service SuggestionsAPIServicer
	errorHandler ErrorHandler
}

// SuggestionsAPIOption for how the controller is set up.
type SuggestionsAPIOption func(*SuggestionsAPIController)

// WithSuggestionsAPIErrorHandler inject ErrorHandler into controller
func WithSuggestionsAPIErrorHandler(h ErrorHandler) SuggestionsAPIOption {
	return func(c *SuggestionsAPIController) {
		c.errorHandler = h
	}
}

// NewSuggestionsAPIController creates a default api controller
func NewSuggestionsAPIController(s SuggestionsAPIServicer, opts ...SuggestionsAPIOption) Router {
	controller := &SuggestionsAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SuggestionsAPIController
func (c *SuggestionsAPIController) Routes() Routes {
	return Routes{
		"GetSuggestions": Route{
			strings.ToUpper("Get"),
			"/Users/{userId}/Suggestions",
			c.GetSuggestions,
		},
	}
}

// GetSuggestions - Gets suggestions.
func (c *SuggestionsAPIController) GetSuggestions(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	query := r.URL.Query()
	userIdParam := params["userId"]
	if userIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"userId"}, nil)
		return
	}
	var mediaTypeParam []string
	if query.Has("mediaType") {
		mediaTypeParam = strings.Split(query.Get("mediaType"), ",")
	}
	var type_Param []string
	if query.Has("type") {
		type_Param = strings.Split(query.Get("type"), ",")
	}
	var startIndexParam *int32
	if query.Has("startIndex") {
		param, err := parseNumericParameter[int32](
			query.Get("startIndex"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		startIndexParam = &param
	} else {
	}
	var limitParam *int32
	if query.Has("limit") {
		param, err := parseNumericParameter[int32](
			query.Get("limit"),
			WithParse[int32](parseInt32),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		limitParam = &param
	} else {
	}
	var enableTotalRecordCountParam bool
	if query.Has("enableTotalRecordCount") {
		param, err := parseBoolParameter(
			query.Get("enableTotalRecordCount"),
			WithParse[bool](parseBool),
		)
		if err != nil {
			c.errorHandler(w, r, &ParsingError{Err: err}, nil)
			return
		}

		enableTotalRecordCountParam = param
	} else {
		var param bool = false
		enableTotalRecordCountParam = param
	}
	result, err := c.service.GetSuggestions(r.Context(), userIdParam, mediaTypeParam, type_Param, startIndexParam, limitParam, enableTotalRecordCountParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
