/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi




// LibraryTypeOptionsDto - Library type options dto.
type LibraryTypeOptionsDto struct {

	// Gets or sets the default image options.
	DefaultImageOptions *[]ImageOption `json:"DefaultImageOptions,omitempty"`

	// Gets or sets the image fetchers.
	ImageFetchers *[]LibraryOptionInfoDto `json:"ImageFetchers,omitempty"`

	// Gets or sets the metadata fetchers.
	MetadataFetchers *[]LibraryOptionInfoDto `json:"MetadataFetchers,omitempty"`

	// Gets or sets the supported image types.
	SupportedImageTypes *[]ImageType `json:"SupportedImageTypes,omitempty"`

	// Gets or sets the type.
	Type *string `json:"Type,omitempty"`
}

// AssertLibraryTypeOptionsDtoRequired checks if the required fields are not zero-ed
func AssertLibraryTypeOptionsDtoRequired(obj LibraryTypeOptionsDto) error {
	if obj.DefaultImageOptions != nil {
		for _, el := range *obj.DefaultImageOptions {
			if err := AssertImageOptionRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.ImageFetchers != nil {
		for _, el := range *obj.ImageFetchers {
			if err := AssertLibraryOptionInfoDtoRequired(el); err != nil {
				return err
			}
		}
	}
	if obj.MetadataFetchers != nil {
		for _, el := range *obj.MetadataFetchers {
			if err := AssertLibraryOptionInfoDtoRequired(el); err != nil {
				return err
			}
		}
	}
	return nil
}

// AssertLibraryTypeOptionsDtoConstraints checks if the values respects the defined constraints
func AssertLibraryTypeOptionsDtoConstraints(obj LibraryTypeOptionsDto) error {
	return nil
}
