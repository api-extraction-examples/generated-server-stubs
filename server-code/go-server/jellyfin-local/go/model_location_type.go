/*
 * Jellyfin API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: v1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi


import (
	"fmt"
)


// LocationType : Enum LocationType.
type LocationType string

// List of LocationType
const (
	FILE_SYSTEM LocationType = "FileSystem"
	REMOTE LocationType = "Remote"
	VIRTUAL LocationType = "Virtual"
	OFFLINE LocationType = "Offline"
)

// AllowedLocationTypeEnumValues is all the allowed values of LocationType enum
var AllowedLocationTypeEnumValues = []LocationType{
	"FileSystem",
	"Remote",
	"Virtual",
	"Offline",
}

// validLocationTypeEnumValue provides a map of LocationTypes for fast verification of use input
var validLocationTypeEnumValues = map[LocationType]struct{}{
	"FileSystem": {},
	"Remote": {},
	"Virtual": {},
	"Offline": {},
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LocationType) IsValid() bool {
	_, ok := validLocationTypeEnumValues[v]
	return ok
}

// NewLocationTypeFromValue returns a pointer to a valid LocationType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLocationTypeFromValue(v string) (LocationType, error) {
	ev := LocationType(v)
	if ev.IsValid() {
		return ev, nil
	} else {
		return "", fmt.Errorf("invalid value '%v' for LocationType: valid values are %v", v, AllowedLocationTypeEnumValues)
	}
}



// AssertLocationTypeRequired checks if the required fields are not zero-ed
func AssertLocationTypeRequired(obj LocationType) error {
	return nil
}

// AssertLocationTypeConstraints checks if the values respects the defined constraints
func AssertLocationTypeConstraints(obj LocationType) error {
	return nil
}
