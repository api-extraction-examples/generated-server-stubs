/*
 * Netlify's API documentation
 *
 * Netlify is a hosting service for the programmable web. It understands your documents and provides an API to handle atomic deploys of websites, manage form submissions, inject JavaScript snippets, and much more. This is a REST-style API that uses JSON for serialization and OAuth 2 for authentication.  This document is an OpenAPI reference for the Netlify API that you can explore. For more detailed instructions for common uses, please visit the [online documentation](https://www.netlify.com/docs/api/). Visit our Community forum to join the conversation about [understanding and using Netlifyâ€™s API](https://community.netlify.com/t/common-issue-understanding-and-using-netlifys-api/160).  Additionally, we have two API clients for your convenience: - [Go Client](https://github.com/netlify/open-api#go-client) - [JS Client](https://github.com/netlify/build/tree/main/packages/js-client)
 *
 * API version: 2.16.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"context"
	"net/http"
	"os"
	"os"
)



// AccessTokenAPIRouter defines the required methods for binding the api requests to a responses for the AccessTokenAPI
// The AccessTokenAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AccessTokenAPIServicer to perform the required actions, then write the service results to the http response.
type AccessTokenAPIRouter interface { 
	ExchangeTicket(http.ResponseWriter, *http.Request)
}
// AccountMembershipAPIRouter defines the required methods for binding the api requests to a responses for the AccountMembershipAPI
// The AccountMembershipAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AccountMembershipAPIServicer to perform the required actions, then write the service results to the http response.
type AccountMembershipAPIRouter interface { 
	CancelAccount(http.ResponseWriter, *http.Request)
	CreateAccount(http.ResponseWriter, *http.Request)
	GetAccount(http.ResponseWriter, *http.Request)
	ListAccountsForUser(http.ResponseWriter, *http.Request)
	UpdateAccount(http.ResponseWriter, *http.Request)
}
// AccountTypeAPIRouter defines the required methods for binding the api requests to a responses for the AccountTypeAPI
// The AccountTypeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AccountTypeAPIServicer to perform the required actions, then write the service results to the http response.
type AccountTypeAPIRouter interface { 
	ListAccountTypesForUser(http.ResponseWriter, *http.Request)
}
// AssetAPIRouter defines the required methods for binding the api requests to a responses for the AssetAPI
// The AssetAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AssetAPIServicer to perform the required actions, then write the service results to the http response.
type AssetAPIRouter interface { 
	CreateSiteAsset(http.ResponseWriter, *http.Request)
	DeleteSiteAsset(http.ResponseWriter, *http.Request)
	GetSiteAssetInfo(http.ResponseWriter, *http.Request)
	ListSiteAssets(http.ResponseWriter, *http.Request)
	UpdateSiteAsset(http.ResponseWriter, *http.Request)
}
// AssetPublicSignatureAPIRouter defines the required methods for binding the api requests to a responses for the AssetPublicSignatureAPI
// The AssetPublicSignatureAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AssetPublicSignatureAPIServicer to perform the required actions, then write the service results to the http response.
type AssetPublicSignatureAPIRouter interface { 
	GetSiteAssetPublicSignature(http.ResponseWriter, *http.Request)
}
// AuditLogAPIRouter defines the required methods for binding the api requests to a responses for the AuditLogAPI
// The AuditLogAPIRouter implementation should parse necessary information from the http request,
// pass the data to a AuditLogAPIServicer to perform the required actions, then write the service results to the http response.
type AuditLogAPIRouter interface { 
	ListAccountAuditEvents(http.ResponseWriter, *http.Request)
}
// BuildAPIRouter defines the required methods for binding the api requests to a responses for the BuildAPI
// The BuildAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BuildAPIServicer to perform the required actions, then write the service results to the http response.
type BuildAPIRouter interface { 
	CreateSiteBuild(http.ResponseWriter, *http.Request)
	GetAccountBuildStatus(http.ResponseWriter, *http.Request)
	GetSiteBuild(http.ResponseWriter, *http.Request)
	ListSiteBuilds(http.ResponseWriter, *http.Request)
	NotifyBuildStart(http.ResponseWriter, *http.Request)
}
// BuildHookAPIRouter defines the required methods for binding the api requests to a responses for the BuildHookAPI
// The BuildHookAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BuildHookAPIServicer to perform the required actions, then write the service results to the http response.
type BuildHookAPIRouter interface { 
	CreateSiteBuildHook(http.ResponseWriter, *http.Request)
	DeleteSiteBuildHook(http.ResponseWriter, *http.Request)
	GetSiteBuildHook(http.ResponseWriter, *http.Request)
	ListSiteBuildHooks(http.ResponseWriter, *http.Request)
	UpdateSiteBuildHook(http.ResponseWriter, *http.Request)
}
// BuildLogMsgAPIRouter defines the required methods for binding the api requests to a responses for the BuildLogMsgAPI
// The BuildLogMsgAPIRouter implementation should parse necessary information from the http request,
// pass the data to a BuildLogMsgAPIServicer to perform the required actions, then write the service results to the http response.
type BuildLogMsgAPIRouter interface { 
	UpdateSiteBuildLog(http.ResponseWriter, *http.Request)
}
// DeployAPIRouter defines the required methods for binding the api requests to a responses for the DeployAPI
// The DeployAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DeployAPIServicer to perform the required actions, then write the service results to the http response.
type DeployAPIRouter interface { 
	CancelSiteDeploy(http.ResponseWriter, *http.Request)
	CreateSiteDeploy(http.ResponseWriter, *http.Request)
	DeleteDeploy(http.ResponseWriter, *http.Request)
	DeleteSiteDeploy(http.ResponseWriter, *http.Request)
	GetDeploy(http.ResponseWriter, *http.Request)
	GetSiteDeploy(http.ResponseWriter, *http.Request)
	ListSiteDeploys(http.ResponseWriter, *http.Request)
	LockDeploy(http.ResponseWriter, *http.Request)
	RestoreSiteDeploy(http.ResponseWriter, *http.Request)
	RollbackSiteDeploy(http.ResponseWriter, *http.Request)
	UnlockDeploy(http.ResponseWriter, *http.Request)
	UpdateSiteDeploy(http.ResponseWriter, *http.Request)
}
// DeployKeyAPIRouter defines the required methods for binding the api requests to a responses for the DeployKeyAPI
// The DeployKeyAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DeployKeyAPIServicer to perform the required actions, then write the service results to the http response.
type DeployKeyAPIRouter interface { 
	CreateDeployKey(http.ResponseWriter, *http.Request)
	DeleteDeployKey(http.ResponseWriter, *http.Request)
	GetDeployKey(http.ResponseWriter, *http.Request)
	ListDeployKeys(http.ResponseWriter, *http.Request)
}
// DeployedBranchAPIRouter defines the required methods for binding the api requests to a responses for the DeployedBranchAPI
// The DeployedBranchAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DeployedBranchAPIServicer to perform the required actions, then write the service results to the http response.
type DeployedBranchAPIRouter interface { 
	ListSiteDeployedBranches(http.ResponseWriter, *http.Request)
}
// DnsZoneAPIRouter defines the required methods for binding the api requests to a responses for the DnsZoneAPI
// The DnsZoneAPIRouter implementation should parse necessary information from the http request,
// pass the data to a DnsZoneAPIServicer to perform the required actions, then write the service results to the http response.
type DnsZoneAPIRouter interface { 
	ConfigureDNSForSite(http.ResponseWriter, *http.Request)
	CreateDnsRecord(http.ResponseWriter, *http.Request)
	CreateDnsZone(http.ResponseWriter, *http.Request)
	DeleteDnsRecord(http.ResponseWriter, *http.Request)
	DeleteDnsZone(http.ResponseWriter, *http.Request)
	GetDNSForSite(http.ResponseWriter, *http.Request)
	GetDnsRecords(http.ResponseWriter, *http.Request)
	GetDnsZone(http.ResponseWriter, *http.Request)
	GetDnsZones(http.ResponseWriter, *http.Request)
	GetIndividualDnsRecord(http.ResponseWriter, *http.Request)
	TransferDnsZone(http.ResponseWriter, *http.Request)
}
// EnvironmentVariablesAPIRouter defines the required methods for binding the api requests to a responses for the EnvironmentVariablesAPI
// The EnvironmentVariablesAPIRouter implementation should parse necessary information from the http request,
// pass the data to a EnvironmentVariablesAPIServicer to perform the required actions, then write the service results to the http response.
type EnvironmentVariablesAPIRouter interface { 
	CreateEnvVars(http.ResponseWriter, *http.Request)
	DeleteEnvVar(http.ResponseWriter, *http.Request)
	DeleteEnvVarValue(http.ResponseWriter, *http.Request)
	GetEnvVar(http.ResponseWriter, *http.Request)
	GetEnvVars(http.ResponseWriter, *http.Request)
	SetEnvVarValue(http.ResponseWriter, *http.Request)
	UpdateEnvVar(http.ResponseWriter, *http.Request)
}
// FileAPIRouter defines the required methods for binding the api requests to a responses for the FileAPI
// The FileAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FileAPIServicer to perform the required actions, then write the service results to the http response.
type FileAPIRouter interface { 
	GetSiteFileByPathName(http.ResponseWriter, *http.Request)
	ListSiteFiles(http.ResponseWriter, *http.Request)
	UploadDeployFile(http.ResponseWriter, *http.Request)
}
// FormAPIRouter defines the required methods for binding the api requests to a responses for the FormAPI
// The FormAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FormAPIServicer to perform the required actions, then write the service results to the http response.
type FormAPIRouter interface { 
	DeleteSiteForm(http.ResponseWriter, *http.Request)
	ListSiteForms(http.ResponseWriter, *http.Request)
}
// FunctionAPIRouter defines the required methods for binding the api requests to a responses for the FunctionAPI
// The FunctionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a FunctionAPIServicer to perform the required actions, then write the service results to the http response.
type FunctionAPIRouter interface { 
	UploadDeployFunction(http.ResponseWriter, *http.Request)
}
// HookAPIRouter defines the required methods for binding the api requests to a responses for the HookAPI
// The HookAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HookAPIServicer to perform the required actions, then write the service results to the http response.
type HookAPIRouter interface { 
	CreateHookBySiteId(http.ResponseWriter, *http.Request)
	DeleteHook(http.ResponseWriter, *http.Request)
	EnableHook(http.ResponseWriter, *http.Request)
	GetHook(http.ResponseWriter, *http.Request)
	ListHooksBySiteId(http.ResponseWriter, *http.Request)
	UpdateHook(http.ResponseWriter, *http.Request)
}
// HookTypeAPIRouter defines the required methods for binding the api requests to a responses for the HookTypeAPI
// The HookTypeAPIRouter implementation should parse necessary information from the http request,
// pass the data to a HookTypeAPIServicer to perform the required actions, then write the service results to the http response.
type HookTypeAPIRouter interface { 
	ListHookTypes(http.ResponseWriter, *http.Request)
}
// MemberAPIRouter defines the required methods for binding the api requests to a responses for the MemberAPI
// The MemberAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MemberAPIServicer to perform the required actions, then write the service results to the http response.
type MemberAPIRouter interface { 
	AddMemberToAccount(http.ResponseWriter, *http.Request)
	GetAccountMember(http.ResponseWriter, *http.Request)
	ListMembersForAccount(http.ResponseWriter, *http.Request)
	RemoveAccountMember(http.ResponseWriter, *http.Request)
	UpdateAccountMember(http.ResponseWriter, *http.Request)
}
// MetadataAPIRouter defines the required methods for binding the api requests to a responses for the MetadataAPI
// The MetadataAPIRouter implementation should parse necessary information from the http request,
// pass the data to a MetadataAPIServicer to perform the required actions, then write the service results to the http response.
type MetadataAPIRouter interface { 
	GetSiteMetadata(http.ResponseWriter, *http.Request)
	UpdateSiteMetadata(http.ResponseWriter, *http.Request)
}
// PaymentMethodAPIRouter defines the required methods for binding the api requests to a responses for the PaymentMethodAPI
// The PaymentMethodAPIRouter implementation should parse necessary information from the http request,
// pass the data to a PaymentMethodAPIServicer to perform the required actions, then write the service results to the http response.
type PaymentMethodAPIRouter interface { 
	ListPaymentMethodsForUser(http.ResponseWriter, *http.Request)
}
// ServiceAPIRouter defines the required methods for binding the api requests to a responses for the ServiceAPI
// The ServiceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServiceAPIServicer to perform the required actions, then write the service results to the http response.
type ServiceAPIRouter interface { 
	GetServices(http.ResponseWriter, *http.Request)
	ShowService(http.ResponseWriter, *http.Request)
	ShowServiceManifest(http.ResponseWriter, *http.Request)
}
// ServiceInstanceAPIRouter defines the required methods for binding the api requests to a responses for the ServiceInstanceAPI
// The ServiceInstanceAPIRouter implementation should parse necessary information from the http request,
// pass the data to a ServiceInstanceAPIServicer to perform the required actions, then write the service results to the http response.
type ServiceInstanceAPIRouter interface { 
	CreateServiceInstance(http.ResponseWriter, *http.Request)
	DeleteServiceInstance(http.ResponseWriter, *http.Request)
	ListServiceInstancesForSite(http.ResponseWriter, *http.Request)
	ShowServiceInstance(http.ResponseWriter, *http.Request)
	UpdateServiceInstance(http.ResponseWriter, *http.Request)
}
// SiteAPIRouter defines the required methods for binding the api requests to a responses for the SiteAPI
// The SiteAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SiteAPIServicer to perform the required actions, then write the service results to the http response.
type SiteAPIRouter interface { 
	CreateSite(http.ResponseWriter, *http.Request)
	CreateSiteInTeam(http.ResponseWriter, *http.Request)
	DeleteSite(http.ResponseWriter, *http.Request)
	GetSite(http.ResponseWriter, *http.Request)
	ListSites(http.ResponseWriter, *http.Request)
	ListSitesForAccount(http.ResponseWriter, *http.Request)
	UnlinkSiteRepo(http.ResponseWriter, *http.Request)
	UpdateSite(http.ResponseWriter, *http.Request)
}
// SniCertificateAPIRouter defines the required methods for binding the api requests to a responses for the SniCertificateAPI
// The SniCertificateAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SniCertificateAPIServicer to perform the required actions, then write the service results to the http response.
type SniCertificateAPIRouter interface { 
	ProvisionSiteTLSCertificate(http.ResponseWriter, *http.Request)
	ShowSiteTLSCertificate(http.ResponseWriter, *http.Request)
}
// SnippetAPIRouter defines the required methods for binding the api requests to a responses for the SnippetAPI
// The SnippetAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SnippetAPIServicer to perform the required actions, then write the service results to the http response.
type SnippetAPIRouter interface { 
	CreateSiteSnippet(http.ResponseWriter, *http.Request)
	DeleteSiteSnippet(http.ResponseWriter, *http.Request)
	GetSiteSnippet(http.ResponseWriter, *http.Request)
	ListSiteSnippets(http.ResponseWriter, *http.Request)
	UpdateSiteSnippet(http.ResponseWriter, *http.Request)
}
// SplitTestAPIRouter defines the required methods for binding the api requests to a responses for the SplitTestAPI
// The SplitTestAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SplitTestAPIServicer to perform the required actions, then write the service results to the http response.
type SplitTestAPIRouter interface { 
	CreateSplitTest(http.ResponseWriter, *http.Request)
	DisableSplitTest(http.ResponseWriter, *http.Request)
	EnableSplitTest(http.ResponseWriter, *http.Request)
	GetSplitTest(http.ResponseWriter, *http.Request)
	GetSplitTests(http.ResponseWriter, *http.Request)
	UpdateSplitTest(http.ResponseWriter, *http.Request)
}
// SubmissionAPIRouter defines the required methods for binding the api requests to a responses for the SubmissionAPI
// The SubmissionAPIRouter implementation should parse necessary information from the http request,
// pass the data to a SubmissionAPIServicer to perform the required actions, then write the service results to the http response.
type SubmissionAPIRouter interface { 
	DeleteSubmission(http.ResponseWriter, *http.Request)
	ListFormSubmission(http.ResponseWriter, *http.Request)
	ListFormSubmissions(http.ResponseWriter, *http.Request)
	ListSiteSubmissions(http.ResponseWriter, *http.Request)
}
// TicketAPIRouter defines the required methods for binding the api requests to a responses for the TicketAPI
// The TicketAPIRouter implementation should parse necessary information from the http request,
// pass the data to a TicketAPIServicer to perform the required actions, then write the service results to the http response.
type TicketAPIRouter interface { 
	CreateTicket(http.ResponseWriter, *http.Request)
	ShowTicket(http.ResponseWriter, *http.Request)
}
// UserAPIRouter defines the required methods for binding the api requests to a responses for the UserAPI
// The UserAPIRouter implementation should parse necessary information from the http request,
// pass the data to a UserAPIServicer to perform the required actions, then write the service results to the http response.
type UserAPIRouter interface { 
	GetCurrentUser(http.ResponseWriter, *http.Request)
}
// XInternalAPIRouter defines the required methods for binding the api requests to a responses for the XInternalAPI
// The XInternalAPIRouter implementation should parse necessary information from the http request,
// pass the data to a XInternalAPIServicer to perform the required actions, then write the service results to the http response.
type XInternalAPIRouter interface { 
	CreatePluginRun(http.ResponseWriter, *http.Request)
	GetLatestPluginRuns(http.ResponseWriter, *http.Request)
	UpdatePlugin(http.ResponseWriter, *http.Request)
}


// AccessTokenAPIServicer defines the api actions for the AccessTokenAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccessTokenAPIServicer interface { 
	ExchangeTicket(context.Context, string) (ImplResponse, error)
}


// AccountMembershipAPIServicer defines the api actions for the AccountMembershipAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccountMembershipAPIServicer interface { 
	CancelAccount(context.Context, string) (ImplResponse, error)
	CreateAccount(context.Context, AccountSetup) (ImplResponse, error)
	GetAccount(context.Context, string) (ImplResponse, error)
	ListAccountsForUser(context.Context) (ImplResponse, error)
	UpdateAccount(context.Context, string, AccountUpdateSetup) (ImplResponse, error)
}


// AccountTypeAPIServicer defines the api actions for the AccountTypeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AccountTypeAPIServicer interface { 
	ListAccountTypesForUser(context.Context) (ImplResponse, error)
}


// AssetAPIServicer defines the api actions for the AssetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AssetAPIServicer interface { 
	CreateSiteAsset(context.Context, string, string, int64, string, string) (ImplResponse, error)
	DeleteSiteAsset(context.Context, string, string) (ImplResponse, error)
	GetSiteAssetInfo(context.Context, string, string) (ImplResponse, error)
	ListSiteAssets(context.Context, string) (ImplResponse, error)
	UpdateSiteAsset(context.Context, string, string, string) (ImplResponse, error)
}


// AssetPublicSignatureAPIServicer defines the api actions for the AssetPublicSignatureAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AssetPublicSignatureAPIServicer interface { 
	GetSiteAssetPublicSignature(context.Context, string, string) (ImplResponse, error)
}


// AuditLogAPIServicer defines the api actions for the AuditLogAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type AuditLogAPIServicer interface { 
	ListAccountAuditEvents(context.Context, string, string, string, int32, int32) (ImplResponse, error)
}


// BuildAPIServicer defines the api actions for the BuildAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BuildAPIServicer interface { 
	CreateSiteBuild(context.Context, string, BuildSetup) (ImplResponse, error)
	GetAccountBuildStatus(context.Context, string) (ImplResponse, error)
	GetSiteBuild(context.Context, string) (ImplResponse, error)
	ListSiteBuilds(context.Context, string, int32, int32) (ImplResponse, error)
	NotifyBuildStart(context.Context, string) (ImplResponse, error)
}


// BuildHookAPIServicer defines the api actions for the BuildHookAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BuildHookAPIServicer interface { 
	CreateSiteBuildHook(context.Context, string, BuildHookSetup) (ImplResponse, error)
	DeleteSiteBuildHook(context.Context, string, string) (ImplResponse, error)
	GetSiteBuildHook(context.Context, string, string) (ImplResponse, error)
	ListSiteBuildHooks(context.Context, string) (ImplResponse, error)
	UpdateSiteBuildHook(context.Context, string, string, BuildHookSetup) (ImplResponse, error)
}


// BuildLogMsgAPIServicer defines the api actions for the BuildLogMsgAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type BuildLogMsgAPIServicer interface { 
	UpdateSiteBuildLog(context.Context, string, BuildLogMsg) (ImplResponse, error)
}


// DeployAPIServicer defines the api actions for the DeployAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DeployAPIServicer interface { 
	CancelSiteDeploy(context.Context, string) (ImplResponse, error)
	CreateSiteDeploy(context.Context, string, DeployFiles, bool, bool, string, string, bool, string) (ImplResponse, error)
	DeleteDeploy(context.Context, string) (ImplResponse, error)
	DeleteSiteDeploy(context.Context, string, string) (ImplResponse, error)
	GetDeploy(context.Context, string) (ImplResponse, error)
	GetSiteDeploy(context.Context, string, string) (ImplResponse, error)
	ListSiteDeploys(context.Context, string, bool, bool, string, string, bool, int32, int32) (ImplResponse, error)
	LockDeploy(context.Context, string) (ImplResponse, error)
	RestoreSiteDeploy(context.Context, string, string) (ImplResponse, error)
	RollbackSiteDeploy(context.Context, string) (ImplResponse, error)
	UnlockDeploy(context.Context, string) (ImplResponse, error)
	UpdateSiteDeploy(context.Context, string, string, DeployFiles) (ImplResponse, error)
}


// DeployKeyAPIServicer defines the api actions for the DeployKeyAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DeployKeyAPIServicer interface { 
	CreateDeployKey(context.Context) (ImplResponse, error)
	DeleteDeployKey(context.Context, string) (ImplResponse, error)
	GetDeployKey(context.Context, string) (ImplResponse, error)
	ListDeployKeys(context.Context) (ImplResponse, error)
}


// DeployedBranchAPIServicer defines the api actions for the DeployedBranchAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DeployedBranchAPIServicer interface { 
	ListSiteDeployedBranches(context.Context, string) (ImplResponse, error)
}


// DnsZoneAPIServicer defines the api actions for the DnsZoneAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type DnsZoneAPIServicer interface { 
	ConfigureDNSForSite(context.Context, string) (ImplResponse, error)
	CreateDnsRecord(context.Context, string, DnsRecordCreate) (ImplResponse, error)
	CreateDnsZone(context.Context, DnsZoneSetup) (ImplResponse, error)
	DeleteDnsRecord(context.Context, string, string) (ImplResponse, error)
	DeleteDnsZone(context.Context, string) (ImplResponse, error)
	GetDNSForSite(context.Context, string) (ImplResponse, error)
	GetDnsRecords(context.Context, string) (ImplResponse, error)
	GetDnsZone(context.Context, string) (ImplResponse, error)
	GetDnsZones(context.Context, string) (ImplResponse, error)
	GetIndividualDnsRecord(context.Context, string, string) (ImplResponse, error)
	TransferDnsZone(context.Context, string, string, string, string) (ImplResponse, error)
}


// EnvironmentVariablesAPIServicer defines the api actions for the EnvironmentVariablesAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type EnvironmentVariablesAPIServicer interface { 
	CreateEnvVars(context.Context, string, string, []CreateEnvVarsRequestInner) (ImplResponse, error)
	DeleteEnvVar(context.Context, string, string, string) (ImplResponse, error)
	DeleteEnvVarValue(context.Context, string, string, string, string) (ImplResponse, error)
	GetEnvVar(context.Context, string, string, string) (ImplResponse, error)
	GetEnvVars(context.Context, string, string, string, string) (ImplResponse, error)
	SetEnvVarValue(context.Context, string, string, string, SetEnvVarValueRequest) (ImplResponse, error)
	UpdateEnvVar(context.Context, string, string, string, CreateEnvVarsRequestInner) (ImplResponse, error)
}


// FileAPIServicer defines the api actions for the FileAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FileAPIServicer interface { 
	GetSiteFileByPathName(context.Context, string, string) (ImplResponse, error)
	ListSiteFiles(context.Context, string) (ImplResponse, error)
	UploadDeployFile(context.Context, string, string, *os.File, int32) (ImplResponse, error)
}


// FormAPIServicer defines the api actions for the FormAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FormAPIServicer interface { 
	DeleteSiteForm(context.Context, string, string) (ImplResponse, error)
	ListSiteForms(context.Context, string) (ImplResponse, error)
}


// FunctionAPIServicer defines the api actions for the FunctionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type FunctionAPIServicer interface { 
	UploadDeployFunction(context.Context, string, string, *os.File, string, int32, int32) (ImplResponse, error)
}


// HookAPIServicer defines the api actions for the HookAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HookAPIServicer interface { 
	CreateHookBySiteId(context.Context, string, Hook) (ImplResponse, error)
	DeleteHook(context.Context, string) (ImplResponse, error)
	EnableHook(context.Context, string) (ImplResponse, error)
	GetHook(context.Context, string) (ImplResponse, error)
	ListHooksBySiteId(context.Context, string) (ImplResponse, error)
	UpdateHook(context.Context, string, Hook) (ImplResponse, error)
}


// HookTypeAPIServicer defines the api actions for the HookTypeAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type HookTypeAPIServicer interface { 
	ListHookTypes(context.Context) (ImplResponse, error)
}


// MemberAPIServicer defines the api actions for the MemberAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MemberAPIServicer interface { 
	AddMemberToAccount(context.Context, string, AccountAddMemberSetup) (ImplResponse, error)
	GetAccountMember(context.Context, string, string) (ImplResponse, error)
	ListMembersForAccount(context.Context, string) (ImplResponse, error)
	RemoveAccountMember(context.Context, string, string) (ImplResponse, error)
	UpdateAccountMember(context.Context, string, string, AccountUpdateMemberSetup) (ImplResponse, error)
}


// MetadataAPIServicer defines the api actions for the MetadataAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type MetadataAPIServicer interface { 
	GetSiteMetadata(context.Context, string) (ImplResponse, error)
	UpdateSiteMetadata(context.Context, string, map[string]interface{}) (ImplResponse, error)
}


// PaymentMethodAPIServicer defines the api actions for the PaymentMethodAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type PaymentMethodAPIServicer interface { 
	ListPaymentMethodsForUser(context.Context) (ImplResponse, error)
}


// ServiceAPIServicer defines the api actions for the ServiceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServiceAPIServicer interface { 
	GetServices(context.Context, string) (ImplResponse, error)
	ShowService(context.Context, string) (ImplResponse, error)
	ShowServiceManifest(context.Context, string) (ImplResponse, error)
}


// ServiceInstanceAPIServicer defines the api actions for the ServiceInstanceAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type ServiceInstanceAPIServicer interface { 
	CreateServiceInstance(context.Context, string, string, map[string]interface{}) (ImplResponse, error)
	DeleteServiceInstance(context.Context, string, string, string) (ImplResponse, error)
	ListServiceInstancesForSite(context.Context, string) (ImplResponse, error)
	ShowServiceInstance(context.Context, string, string, string) (ImplResponse, error)
	UpdateServiceInstance(context.Context, string, string, string, map[string]interface{}) (ImplResponse, error)
}


// SiteAPIServicer defines the api actions for the SiteAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SiteAPIServicer interface { 
	CreateSite(context.Context, SiteSetup, bool) (ImplResponse, error)
	CreateSiteInTeam(context.Context, string, bool, SiteSetup) (ImplResponse, error)
	DeleteSite(context.Context, string) (ImplResponse, error)
	GetSite(context.Context, string) (ImplResponse, error)
	ListSites(context.Context, string, string, int32, int32) (ImplResponse, error)
	ListSitesForAccount(context.Context, string, string, int32, int32) (ImplResponse, error)
	UnlinkSiteRepo(context.Context, string) (ImplResponse, error)
	UpdateSite(context.Context, string, SiteSetup) (ImplResponse, error)
}


// SniCertificateAPIServicer defines the api actions for the SniCertificateAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SniCertificateAPIServicer interface { 
	ProvisionSiteTLSCertificate(context.Context, string, string, string, string) (ImplResponse, error)
	ShowSiteTLSCertificate(context.Context, string) (ImplResponse, error)
}


// SnippetAPIServicer defines the api actions for the SnippetAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SnippetAPIServicer interface { 
	CreateSiteSnippet(context.Context, string, Snippet) (ImplResponse, error)
	DeleteSiteSnippet(context.Context, string, string) (ImplResponse, error)
	GetSiteSnippet(context.Context, string, string) (ImplResponse, error)
	ListSiteSnippets(context.Context, string) (ImplResponse, error)
	UpdateSiteSnippet(context.Context, string, string, Snippet) (ImplResponse, error)
}


// SplitTestAPIServicer defines the api actions for the SplitTestAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SplitTestAPIServicer interface { 
	CreateSplitTest(context.Context, string, SplitTestSetup) (ImplResponse, error)
	DisableSplitTest(context.Context, string, string) (ImplResponse, error)
	EnableSplitTest(context.Context, string, string) (ImplResponse, error)
	GetSplitTest(context.Context, string, string) (ImplResponse, error)
	GetSplitTests(context.Context, string) (ImplResponse, error)
	UpdateSplitTest(context.Context, string, string, SplitTestSetup) (ImplResponse, error)
}


// SubmissionAPIServicer defines the api actions for the SubmissionAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type SubmissionAPIServicer interface { 
	DeleteSubmission(context.Context, string) (ImplResponse, error)
	ListFormSubmission(context.Context, string, string, int32, int32) (ImplResponse, error)
	ListFormSubmissions(context.Context, string, int32, int32) (ImplResponse, error)
	ListSiteSubmissions(context.Context, string, int32, int32) (ImplResponse, error)
}


// TicketAPIServicer defines the api actions for the TicketAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type TicketAPIServicer interface { 
	CreateTicket(context.Context, string) (ImplResponse, error)
	ShowTicket(context.Context, string) (ImplResponse, error)
}


// UserAPIServicer defines the api actions for the UserAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type UserAPIServicer interface { 
	GetCurrentUser(context.Context) (ImplResponse, error)
}


// XInternalAPIServicer defines the api actions for the XInternalAPI service
// This interface intended to stay up to date with the openapi yaml used to generate it,
// while the service implementation can be ignored with the .openapi-generator-ignore file
// and updated with the logic required for the API.
type XInternalAPIServicer interface { 
	CreatePluginRun(context.Context, string, PluginRunData) (ImplResponse, error)
	GetLatestPluginRuns(context.Context, string, []string, string) (ImplResponse, error)
	UpdatePlugin(context.Context, string, string, PluginParams) (ImplResponse, error)
}
