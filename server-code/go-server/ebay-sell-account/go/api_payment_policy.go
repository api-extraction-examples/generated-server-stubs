/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// PaymentPolicyAPIController binds http requests to an api service and writes the service results to the http response
type PaymentPolicyAPIController struct {
	service PaymentPolicyAPIServicer
	errorHandler ErrorHandler
}

// PaymentPolicyAPIOption for how the controller is set up.
type PaymentPolicyAPIOption func(*PaymentPolicyAPIController)

// WithPaymentPolicyAPIErrorHandler inject ErrorHandler into controller
func WithPaymentPolicyAPIErrorHandler(h ErrorHandler) PaymentPolicyAPIOption {
	return func(c *PaymentPolicyAPIController) {
		c.errorHandler = h
	}
}

// NewPaymentPolicyAPIController creates a default api controller
func NewPaymentPolicyAPIController(s PaymentPolicyAPIServicer, opts ...PaymentPolicyAPIOption) Router {
	controller := &PaymentPolicyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the PaymentPolicyAPIController
func (c *PaymentPolicyAPIController) Routes() Routes {
	return Routes{
		"CreatePaymentPolicy": Route{
			strings.ToUpper("Post"),
			"/sell/account/v1/payment_policy",
			c.CreatePaymentPolicy,
		},
		"DeletePaymentPolicy": Route{
			strings.ToUpper("Delete"),
			"/sell/account/v1/payment_policy/{payment_policy_id}",
			c.DeletePaymentPolicy,
		},
		"GetPaymentPolicies": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/payment_policy",
			c.GetPaymentPolicies,
		},
		"GetPaymentPolicy": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/payment_policy/{payment_policy_id}",
			c.GetPaymentPolicy,
		},
		"GetPaymentPolicyByName": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/payment_policy/get_by_policy_name",
			c.GetPaymentPolicyByName,
		},
		"UpdatePaymentPolicy": Route{
			strings.ToUpper("Put"),
			"/sell/account/v1/payment_policy/{payment_policy_id}",
			c.UpdatePaymentPolicy,
		},
	}
}

// CreatePaymentPolicy - 
func (c *PaymentPolicyAPIController) CreatePaymentPolicy(w http.ResponseWriter, r *http.Request) {
	paymentPolicyRequestParam := PaymentPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPaymentPolicyRequestRequired(paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPaymentPolicyRequestConstraints(paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreatePaymentPolicy(r.Context(), paymentPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeletePaymentPolicy - 
func (c *PaymentPolicyAPIController) DeletePaymentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	paymentPolicyIdParam := params["payment_policy_id"]
	if paymentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"payment_policy_id"}, nil)
		return
	}
	result, err := c.service.DeletePaymentPolicy(r.Context(), paymentPolicyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPaymentPolicies - 
func (c *PaymentPolicyAPIController) GetPaymentPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var marketplaceIdParam string
	if query.Has("marketplace_id") {
		param := query.Get("marketplace_id")

		marketplaceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "marketplace_id"}, nil)
		return
	}
	result, err := c.service.GetPaymentPolicies(r.Context(), marketplaceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPaymentPolicy - 
func (c *PaymentPolicyAPIController) GetPaymentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	paymentPolicyIdParam := params["payment_policy_id"]
	if paymentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"payment_policy_id"}, nil)
		return
	}
	result, err := c.service.GetPaymentPolicy(r.Context(), paymentPolicyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetPaymentPolicyByName - 
func (c *PaymentPolicyAPIController) GetPaymentPolicyByName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var marketplaceIdParam string
	if query.Has("marketplace_id") {
		param := query.Get("marketplace_id")

		marketplaceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "marketplace_id"}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	result, err := c.service.GetPaymentPolicyByName(r.Context(), marketplaceIdParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdatePaymentPolicy - 
func (c *PaymentPolicyAPIController) UpdatePaymentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	paymentPolicyIdParam := params["payment_policy_id"]
	if paymentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"payment_policy_id"}, nil)
		return
	}
	paymentPolicyRequestParam := PaymentPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertPaymentPolicyRequestRequired(paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertPaymentPolicyRequestConstraints(paymentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdatePaymentPolicy(r.Context(), paymentPolicyIdParam, paymentPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
