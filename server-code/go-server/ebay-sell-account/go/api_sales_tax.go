/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SalesTaxAPIController binds http requests to an api service and writes the service results to the http response
type SalesTaxAPIController struct {
	service SalesTaxAPIServicer
	errorHandler ErrorHandler
}

// SalesTaxAPIOption for how the controller is set up.
type SalesTaxAPIOption func(*SalesTaxAPIController)

// WithSalesTaxAPIErrorHandler inject ErrorHandler into controller
func WithSalesTaxAPIErrorHandler(h ErrorHandler) SalesTaxAPIOption {
	return func(c *SalesTaxAPIController) {
		c.errorHandler = h
	}
}

// NewSalesTaxAPIController creates a default api controller
func NewSalesTaxAPIController(s SalesTaxAPIServicer, opts ...SalesTaxAPIOption) Router {
	controller := &SalesTaxAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SalesTaxAPIController
func (c *SalesTaxAPIController) Routes() Routes {
	return Routes{
		"CreateOrReplaceSalesTax": Route{
			strings.ToUpper("Put"),
			"/sell/account/v1/sales_tax/{countryCode}/{jurisdictionId}",
			c.CreateOrReplaceSalesTax,
		},
		"DeleteSalesTax": Route{
			strings.ToUpper("Delete"),
			"/sell/account/v1/sales_tax/{countryCode}/{jurisdictionId}",
			c.DeleteSalesTax,
		},
		"GetSalesTax": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/sales_tax/{countryCode}/{jurisdictionId}",
			c.GetSalesTax,
		},
		"GetSalesTaxes": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/sales_tax",
			c.GetSalesTaxes,
		},
	}
}

// CreateOrReplaceSalesTax - 
func (c *SalesTaxAPIController) CreateOrReplaceSalesTax(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	countryCodeParam := params["countryCode"]
	if countryCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"countryCode"}, nil)
		return
	}
	jurisdictionIdParam := params["jurisdictionId"]
	if jurisdictionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jurisdictionId"}, nil)
		return
	}
	salesTaxBaseParam := SalesTaxBase{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&salesTaxBaseParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertSalesTaxBaseRequired(salesTaxBaseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertSalesTaxBaseConstraints(salesTaxBaseParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateOrReplaceSalesTax(r.Context(), countryCodeParam, jurisdictionIdParam, salesTaxBaseParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteSalesTax - 
func (c *SalesTaxAPIController) DeleteSalesTax(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	countryCodeParam := params["countryCode"]
	if countryCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"countryCode"}, nil)
		return
	}
	jurisdictionIdParam := params["jurisdictionId"]
	if jurisdictionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jurisdictionId"}, nil)
		return
	}
	result, err := c.service.DeleteSalesTax(r.Context(), countryCodeParam, jurisdictionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSalesTax - 
func (c *SalesTaxAPIController) GetSalesTax(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	countryCodeParam := params["countryCode"]
	if countryCodeParam == "" {
		c.errorHandler(w, r, &RequiredError{"countryCode"}, nil)
		return
	}
	jurisdictionIdParam := params["jurisdictionId"]
	if jurisdictionIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"jurisdictionId"}, nil)
		return
	}
	result, err := c.service.GetSalesTax(r.Context(), countryCodeParam, jurisdictionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetSalesTaxes - 
func (c *SalesTaxAPIController) GetSalesTaxes(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var countryCodeParam string
	if query.Has("country_code") {
		param := query.Get("country_code")

		countryCodeParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "country_code"}, nil)
		return
	}
	result, err := c.service.GetSalesTaxes(r.Context(), countryCodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
