/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// ProgramAPIController binds http requests to an api service and writes the service results to the http response
type ProgramAPIController struct {
	service ProgramAPIServicer
	errorHandler ErrorHandler
}

// ProgramAPIOption for how the controller is set up.
type ProgramAPIOption func(*ProgramAPIController)

// WithProgramAPIErrorHandler inject ErrorHandler into controller
func WithProgramAPIErrorHandler(h ErrorHandler) ProgramAPIOption {
	return func(c *ProgramAPIController) {
		c.errorHandler = h
	}
}

// NewProgramAPIController creates a default api controller
func NewProgramAPIController(s ProgramAPIServicer, opts ...ProgramAPIOption) Router {
	controller := &ProgramAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the ProgramAPIController
func (c *ProgramAPIController) Routes() Routes {
	return Routes{
		"GetOptedInPrograms": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/program/get_opted_in_programs",
			c.GetOptedInPrograms,
		},
		"OptInToProgram": Route{
			strings.ToUpper("Post"),
			"/sell/account/v1/program/opt_in",
			c.OptInToProgram,
		},
		"OptOutOfProgram": Route{
			strings.ToUpper("Post"),
			"/sell/account/v1/program/opt_out",
			c.OptOutOfProgram,
		},
	}
}

// GetOptedInPrograms - 
func (c *ProgramAPIController) GetOptedInPrograms(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetOptedInPrograms(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OptInToProgram - 
func (c *ProgramAPIController) OptInToProgram(w http.ResponseWriter, r *http.Request) {
	programParam := Program{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&programParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProgramRequired(programParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProgramConstraints(programParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OptInToProgram(r.Context(), programParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// OptOutOfProgram - 
func (c *ProgramAPIController) OptOutOfProgram(w http.ResponseWriter, r *http.Request) {
	programParam := Program{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&programParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertProgramRequired(programParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertProgramConstraints(programParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.OptOutOfProgram(r.Context(), programParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
