/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// SubscriptionAPIController binds http requests to an api service and writes the service results to the http response
type SubscriptionAPIController struct {
	service SubscriptionAPIServicer
	errorHandler ErrorHandler
}

// SubscriptionAPIOption for how the controller is set up.
type SubscriptionAPIOption func(*SubscriptionAPIController)

// WithSubscriptionAPIErrorHandler inject ErrorHandler into controller
func WithSubscriptionAPIErrorHandler(h ErrorHandler) SubscriptionAPIOption {
	return func(c *SubscriptionAPIController) {
		c.errorHandler = h
	}
}

// NewSubscriptionAPIController creates a default api controller
func NewSubscriptionAPIController(s SubscriptionAPIServicer, opts ...SubscriptionAPIOption) Router {
	controller := &SubscriptionAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the SubscriptionAPIController
func (c *SubscriptionAPIController) Routes() Routes {
	return Routes{
		"GetSubscription": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/subscription",
			c.GetSubscription,
		},
	}
}

// GetSubscription - 
func (c *SubscriptionAPIController) GetSubscription(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var limitParam string
	if query.Has("limit") {
		param := query.Get("limit")

		limitParam = param
	} else {
	}
	var continuationTokenParam string
	if query.Has("continuation_token") {
		param := query.Get("continuation_token")

		continuationTokenParam = param
	} else {
	}
	result, err := c.service.GetSubscription(r.Context(), limitParam, continuationTokenParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
