/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// RateTableAPIController binds http requests to an api service and writes the service results to the http response
type RateTableAPIController struct {
	service RateTableAPIServicer
	errorHandler ErrorHandler
}

// RateTableAPIOption for how the controller is set up.
type RateTableAPIOption func(*RateTableAPIController)

// WithRateTableAPIErrorHandler inject ErrorHandler into controller
func WithRateTableAPIErrorHandler(h ErrorHandler) RateTableAPIOption {
	return func(c *RateTableAPIController) {
		c.errorHandler = h
	}
}

// NewRateTableAPIController creates a default api controller
func NewRateTableAPIController(s RateTableAPIServicer, opts ...RateTableAPIOption) Router {
	controller := &RateTableAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the RateTableAPIController
func (c *RateTableAPIController) Routes() Routes {
	return Routes{
		"GetRateTables": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/rate_table",
			c.GetRateTables,
		},
	}
}

// GetRateTables - 
func (c *RateTableAPIController) GetRateTables(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var countryCodeParam string
	if query.Has("country_code") {
		param := query.Get("country_code")

		countryCodeParam = param
	} else {
	}
	result, err := c.service.GetRateTables(r.Context(), countryCodeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
