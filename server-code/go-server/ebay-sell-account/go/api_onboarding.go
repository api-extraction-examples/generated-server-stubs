/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OnboardingAPIController binds http requests to an api service and writes the service results to the http response
type OnboardingAPIController struct {
	service OnboardingAPIServicer
	errorHandler ErrorHandler
}

// OnboardingAPIOption for how the controller is set up.
type OnboardingAPIOption func(*OnboardingAPIController)

// WithOnboardingAPIErrorHandler inject ErrorHandler into controller
func WithOnboardingAPIErrorHandler(h ErrorHandler) OnboardingAPIOption {
	return func(c *OnboardingAPIController) {
		c.errorHandler = h
	}
}

// NewOnboardingAPIController creates a default api controller
func NewOnboardingAPIController(s OnboardingAPIServicer, opts ...OnboardingAPIOption) Router {
	controller := &OnboardingAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OnboardingAPIController
func (c *OnboardingAPIController) Routes() Routes {
	return Routes{
		"GetPaymentsProgramOnboarding": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/payments_program/{marketplace_id}/{payments_program_type}/onboarding",
			c.GetPaymentsProgramOnboarding,
		},
	}
}

// GetPaymentsProgramOnboarding - 
func (c *OnboardingAPIController) GetPaymentsProgramOnboarding(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	marketplaceIdParam := params["marketplace_id"]
	if marketplaceIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"marketplace_id"}, nil)
		return
	}
	paymentsProgramTypeParam := params["payments_program_type"]
	if paymentsProgramTypeParam == "" {
		c.errorHandler(w, r, &RequiredError{"payments_program_type"}, nil)
		return
	}
	result, err := c.service.GetPaymentsProgramOnboarding(r.Context(), marketplaceIdParam, paymentsProgramTypeParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
