/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// AdvertisingEligibilityAPIController binds http requests to an api service and writes the service results to the http response
type AdvertisingEligibilityAPIController struct {
	service AdvertisingEligibilityAPIServicer
	errorHandler ErrorHandler
}

// AdvertisingEligibilityAPIOption for how the controller is set up.
type AdvertisingEligibilityAPIOption func(*AdvertisingEligibilityAPIController)

// WithAdvertisingEligibilityAPIErrorHandler inject ErrorHandler into controller
func WithAdvertisingEligibilityAPIErrorHandler(h ErrorHandler) AdvertisingEligibilityAPIOption {
	return func(c *AdvertisingEligibilityAPIController) {
		c.errorHandler = h
	}
}

// NewAdvertisingEligibilityAPIController creates a default api controller
func NewAdvertisingEligibilityAPIController(s AdvertisingEligibilityAPIServicer, opts ...AdvertisingEligibilityAPIOption) Router {
	controller := &AdvertisingEligibilityAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the AdvertisingEligibilityAPIController
func (c *AdvertisingEligibilityAPIController) Routes() Routes {
	return Routes{
		"GetAdvertisingEligibility": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/advertising_eligibility",
			c.GetAdvertisingEligibility,
		},
	}
}

// GetAdvertisingEligibility - 
func (c *AdvertisingEligibilityAPIController) GetAdvertisingEligibility(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xEBAYCMARKETPLACEIDParam := r.Header.Get("X-EBAY-C-MARKETPLACE-ID")
	var programTypesParam string
	if query.Has("program_types") {
		param := query.Get("program_types")

		programTypesParam = param
	} else {
	}
	result, err := c.service.GetAdvertisingEligibility(r.Context(), xEBAYCMARKETPLACEIDParam, programTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
