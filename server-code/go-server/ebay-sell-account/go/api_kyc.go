/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// KycAPIController binds http requests to an api service and writes the service results to the http response
type KycAPIController struct {
	service KycAPIServicer
	errorHandler ErrorHandler
}

// KycAPIOption for how the controller is set up.
type KycAPIOption func(*KycAPIController)

// WithKycAPIErrorHandler inject ErrorHandler into controller
func WithKycAPIErrorHandler(h ErrorHandler) KycAPIOption {
	return func(c *KycAPIController) {
		c.errorHandler = h
	}
}

// NewKycAPIController creates a default api controller
func NewKycAPIController(s KycAPIServicer, opts ...KycAPIOption) Router {
	controller := &KycAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the KycAPIController
func (c *KycAPIController) Routes() Routes {
	return Routes{
		"GetKYC": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/kyc",
			c.GetKYC,
		},
	}
}

// GetKYC - 
func (c *KycAPIController) GetKYC(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetKYC(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
