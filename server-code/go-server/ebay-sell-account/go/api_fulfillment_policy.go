/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// FulfillmentPolicyAPIController binds http requests to an api service and writes the service results to the http response
type FulfillmentPolicyAPIController struct {
	service FulfillmentPolicyAPIServicer
	errorHandler ErrorHandler
}

// FulfillmentPolicyAPIOption for how the controller is set up.
type FulfillmentPolicyAPIOption func(*FulfillmentPolicyAPIController)

// WithFulfillmentPolicyAPIErrorHandler inject ErrorHandler into controller
func WithFulfillmentPolicyAPIErrorHandler(h ErrorHandler) FulfillmentPolicyAPIOption {
	return func(c *FulfillmentPolicyAPIController) {
		c.errorHandler = h
	}
}

// NewFulfillmentPolicyAPIController creates a default api controller
func NewFulfillmentPolicyAPIController(s FulfillmentPolicyAPIServicer, opts ...FulfillmentPolicyAPIOption) Router {
	controller := &FulfillmentPolicyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the FulfillmentPolicyAPIController
func (c *FulfillmentPolicyAPIController) Routes() Routes {
	return Routes{
		"CreateFulfillmentPolicy": Route{
			strings.ToUpper("Post"),
			"/sell/account/v1/fulfillment_policy/",
			c.CreateFulfillmentPolicy,
		},
		"DeleteFulfillmentPolicy": Route{
			strings.ToUpper("Delete"),
			"/sell/account/v1/fulfillment_policy/{fulfillmentPolicyId}",
			c.DeleteFulfillmentPolicy,
		},
		"GetFulfillmentPolicies": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/fulfillment_policy",
			c.GetFulfillmentPolicies,
		},
		"GetFulfillmentPolicy": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/fulfillment_policy/{fulfillmentPolicyId}",
			c.GetFulfillmentPolicy,
		},
		"GetFulfillmentPolicyByName": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/fulfillment_policy/get_by_policy_name",
			c.GetFulfillmentPolicyByName,
		},
		"UpdateFulfillmentPolicy": Route{
			strings.ToUpper("Put"),
			"/sell/account/v1/fulfillment_policy/{fulfillmentPolicyId}",
			c.UpdateFulfillmentPolicy,
		},
	}
}

// CreateFulfillmentPolicy - 
func (c *FulfillmentPolicyAPIController) CreateFulfillmentPolicy(w http.ResponseWriter, r *http.Request) {
	fulfillmentPolicyRequestParam := FulfillmentPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFulfillmentPolicyRequestRequired(fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFulfillmentPolicyRequestConstraints(fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateFulfillmentPolicy(r.Context(), fulfillmentPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// DeleteFulfillmentPolicy - 
func (c *FulfillmentPolicyAPIController) DeleteFulfillmentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fulfillmentPolicyIdParam := params["fulfillmentPolicyId"]
	if fulfillmentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fulfillmentPolicyId"}, nil)
		return
	}
	result, err := c.service.DeleteFulfillmentPolicy(r.Context(), fulfillmentPolicyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFulfillmentPolicies - 
func (c *FulfillmentPolicyAPIController) GetFulfillmentPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var marketplaceIdParam string
	if query.Has("marketplace_id") {
		param := query.Get("marketplace_id")

		marketplaceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "marketplace_id"}, nil)
		return
	}
	result, err := c.service.GetFulfillmentPolicies(r.Context(), marketplaceIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFulfillmentPolicy - 
func (c *FulfillmentPolicyAPIController) GetFulfillmentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fulfillmentPolicyIdParam := params["fulfillmentPolicyId"]
	if fulfillmentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fulfillmentPolicyId"}, nil)
		return
	}
	result, err := c.service.GetFulfillmentPolicy(r.Context(), fulfillmentPolicyIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetFulfillmentPolicyByName - 
func (c *FulfillmentPolicyAPIController) GetFulfillmentPolicyByName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	var marketplaceIdParam string
	if query.Has("marketplace_id") {
		param := query.Get("marketplace_id")

		marketplaceIdParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "marketplace_id"}, nil)
		return
	}
	var nameParam string
	if query.Has("name") {
		param := query.Get("name")

		nameParam = param
	} else {
		c.errorHandler(w, r, &RequiredError{Field: "name"}, nil)
		return
	}
	result, err := c.service.GetFulfillmentPolicyByName(r.Context(), marketplaceIdParam, nameParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateFulfillmentPolicy - 
func (c *FulfillmentPolicyAPIController) UpdateFulfillmentPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	fulfillmentPolicyIdParam := params["fulfillmentPolicyId"]
	if fulfillmentPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"fulfillmentPolicyId"}, nil)
		return
	}
	fulfillmentPolicyRequestParam := FulfillmentPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertFulfillmentPolicyRequestRequired(fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertFulfillmentPolicyRequestConstraints(fulfillmentPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateFulfillmentPolicy(r.Context(), fulfillmentPolicyIdParam, fulfillmentPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
