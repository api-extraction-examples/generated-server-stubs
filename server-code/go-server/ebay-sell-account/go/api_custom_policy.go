/*
 * Account API
 *
 * The <b>Account API</b> gives sellers the ability to configure their eBay seller accounts, including the seller's policies (eBay business policies and seller-defined custom policies), opt in and out of eBay seller programs, configure sales tax tables, and get account information.  <br/><br/>For details on the availability of the methods in this API, see <a href=\"/api-docs/sell/account/overview.html#requirements\">Account API requirements and restrictions</a>.
 *
 * API version: v1.9.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// CustomPolicyAPIController binds http requests to an api service and writes the service results to the http response
type CustomPolicyAPIController struct {
	service CustomPolicyAPIServicer
	errorHandler ErrorHandler
}

// CustomPolicyAPIOption for how the controller is set up.
type CustomPolicyAPIOption func(*CustomPolicyAPIController)

// WithCustomPolicyAPIErrorHandler inject ErrorHandler into controller
func WithCustomPolicyAPIErrorHandler(h ErrorHandler) CustomPolicyAPIOption {
	return func(c *CustomPolicyAPIController) {
		c.errorHandler = h
	}
}

// NewCustomPolicyAPIController creates a default api controller
func NewCustomPolicyAPIController(s CustomPolicyAPIServicer, opts ...CustomPolicyAPIOption) Router {
	controller := &CustomPolicyAPIController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the CustomPolicyAPIController
func (c *CustomPolicyAPIController) Routes() Routes {
	return Routes{
		"CreateCustomPolicy": Route{
			strings.ToUpper("Post"),
			"/sell/account/v1/custom_policy/",
			c.CreateCustomPolicy,
		},
		"GetCustomPolicies": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/custom_policy/",
			c.GetCustomPolicies,
		},
		"GetCustomPolicy": Route{
			strings.ToUpper("Get"),
			"/sell/account/v1/custom_policy/{custom_policy_id}",
			c.GetCustomPolicy,
		},
		"UpdateCustomPolicy": Route{
			strings.ToUpper("Put"),
			"/sell/account/v1/custom_policy/{custom_policy_id}",
			c.UpdateCustomPolicy,
		},
	}
}

// CreateCustomPolicy - 
func (c *CustomPolicyAPIController) CreateCustomPolicy(w http.ResponseWriter, r *http.Request) {
	xEBAYCMARKETPLACEIDParam := r.Header.Get("X-EBAY-C-MARKETPLACE-ID")
	customPolicyCreateRequestParam := CustomPolicyCreateRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customPolicyCreateRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomPolicyCreateRequestRequired(customPolicyCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomPolicyCreateRequestConstraints(customPolicyCreateRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.CreateCustomPolicy(r.Context(), xEBAYCMARKETPLACEIDParam, customPolicyCreateRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomPolicies - 
func (c *CustomPolicyAPIController) GetCustomPolicies(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	xEBAYCMARKETPLACEIDParam := r.Header.Get("X-EBAY-C-MARKETPLACE-ID")
	var policyTypesParam string
	if query.Has("policy_types") {
		param := query.Get("policy_types")

		policyTypesParam = param
	} else {
	}
	result, err := c.service.GetCustomPolicies(r.Context(), xEBAYCMARKETPLACEIDParam, policyTypesParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// GetCustomPolicy - 
func (c *CustomPolicyAPIController) GetCustomPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customPolicyIdParam := params["custom_policy_id"]
	if customPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_policy_id"}, nil)
		return
	}
	xEBAYCMARKETPLACEIDParam := r.Header.Get("X-EBAY-C-MARKETPLACE-ID")
	result, err := c.service.GetCustomPolicy(r.Context(), customPolicyIdParam, xEBAYCMARKETPLACEIDParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}

// UpdateCustomPolicy - 
func (c *CustomPolicyAPIController) UpdateCustomPolicy(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	customPolicyIdParam := params["custom_policy_id"]
	if customPolicyIdParam == "" {
		c.errorHandler(w, r, &RequiredError{"custom_policy_id"}, nil)
		return
	}
	xEBAYCMARKETPLACEIDParam := r.Header.Get("X-EBAY-C-MARKETPLACE-ID")
	customPolicyRequestParam := CustomPolicyRequest{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&customPolicyRequestParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertCustomPolicyRequestRequired(customPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	if err := AssertCustomPolicyRequestConstraints(customPolicyRequestParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateCustomPolicy(r.Context(), customPolicyIdParam, xEBAYCMARKETPLACEIDParam, customPolicyRequestParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)
}
